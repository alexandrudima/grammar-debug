//!! Processing provides [goog.reflect] from input ../closure-library/closure/goog/reflect/reflect.js
//!! Processing provides [goog.json.hybrid] from input ../closure-library/closure/goog/json/hybrid.js
//!! Processing provides [goog.Uri, goog.Uri.QueryData] from input ../closure-library/closure/goog/uri/uri.js
//!! Processing provides [goog.testing.JsUnitException, goog.testing.asserts] from input ../closure-library/closure/goog/testing/asserts.js
//!! Processing provides [goog.promise.Resolver] from input ../closure-library/closure/goog/promise/resolver.js
//!! Processing provides [goog.graphics.ImageElement] from input ../closure-library/closure/goog/graphics/imageelement.js
//!! Processing provides [goog.debug.ErrorHandler, goog.debug.ErrorHandler.ProtectedFunctionError] from input ../closure-library/closure/goog/debug/errorhandler.js
//!! Processing provides [goog.storage.Storage] from input ../closure-library/closure/goog/storage/storage.js
//!! Processing provides [] from input ../closure-library/closure/goog/deps.js
//!! Processing provides [goog.fx.DragListDirection, goog.fx.DragListGroup, goog.fx.DragListGroup.EventType, goog.fx.DragListGroupEvent] from input ../closure-library/closure/goog/fx/draglistgroup.js
//!! Processing provides [goog.labs.testing.Environment] from input ../closure-library/closure/goog/labs/testing/environment.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/page_visibility.js
//!! Processing provides [goog.graphics.ext.Shape] from input ../closure-library/closure/goog/graphics/ext/shape.js
//!! Processing provides [goog.dom.classlist] from input ../closure-library/closure/goog/dom/classlist.js
//!! Processing provides [goog.labs.events.touch, goog.labs.events.touch.TouchData] from input ../closure-library/closure/goog/labs/events/touch.js
//!! Processing provides [goog.storage.CollectableStorage] from input ../closure-library/closure/goog/storage/collectablestorage.js
//!! Processing provides [goog.editor.plugins.TableEditor] from input ../closure-library/closure/goog/editor/plugins/tableeditor.js
//!! Processing provides [goog.fs.ProgressEvent] from input ../closure-library/closure/goog/fs/progressevent.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/webkit_event.js
//!! Processing provides [goog.fs.DirectoryEntryImpl, goog.fs.EntryImpl, goog.fs.FileEntryImpl] from input ../closure-library/closure/goog/fs/entryimpl.js
//!! Processing provides [goog.storage.mechanism.ErrorCode] from input ../closure-library/closure/goog/storage/mechanism/errorcode.js
//!! Processing provides [goog.labs.net.webChannel.ForwardChannelRequestPool] from input ../closure-library/closure/goog/labs/net/webchannel/forwardchannelrequestpool.js
//!! Processing provides [goog.math.Box] from input ../closure-library/closure/goog/math/box.js
//!! Processing provides [goog.labs.testing.Matcher] from input ../closure-library/closure/goog/labs/testing/matcher.js
//!! Processing provides [goog.editor.icontent, goog.editor.icontent.FieldFormatInfo, goog.editor.icontent.FieldStyleInfo] from input ../closure-library/closure/goog/editor/icontent.js
//!! Processing provides [goog.graphics.CanvasEllipseElement, goog.graphics.CanvasGroupElement, goog.graphics.CanvasImageElement, goog.graphics.CanvasPathElement, goog.graphics.CanvasRectElement, goog.graphics.CanvasTextElement] from input ../closure-library/closure/goog/graphics/canvaselement.js
//!! Processing provides [goog.dom.ControlRange, goog.dom.ControlRangeIterator] from input ../closure-library/closure/goog/dom/controlrange.js
//!! Processing provides [goog.labs.i18n.ListFormatSymbols, goog.labs.i18n.ListFormatSymbols_af, goog.labs.i18n.ListFormatSymbols_am, goog.labs.i18n.ListFormatSymbols_ar, goog.labs.i18n.ListFormatSymbols_az, goog.labs.i18n.ListFormatSymbols_be, goog.labs.i18n.ListFormatSymbols_bg, goog.labs.i18n.ListFormatSymbols_bn, goog.labs.i18n.ListFormatSymbols_br, goog.labs.i18n.ListFormatSymbols_bs, goog.labs.i18n.ListFormatSymbols_ca, goog.labs.i18n.ListFormatSymbols_chr, goog.labs.i18n.ListFormatSymbols_cs, goog.labs.i18n.ListFormatSymbols_cy, goog.labs.i18n.ListFormatSymbols_da, goog.labs.i18n.ListFormatSymbols_de, goog.labs.i18n.ListFormatSymbols_de_AT, goog.labs.i18n.ListFormatSymbols_de_CH, goog.labs.i18n.ListFormatSymbols_el, goog.labs.i18n.ListFormatSymbols_en, goog.labs.i18n.ListFormatSymbols_en_AU, goog.labs.i18n.ListFormatSymbols_en_CA, goog.labs.i18n.ListFormatSymbols_en_GB, goog.labs.i18n.ListFormatSymbols_en_IE, goog.labs.i18n.ListFormatSymbols_en_IN, goog.labs.i18n.ListFormatSymbols_en_SG, goog.labs.i18n.ListFormatSymbols_en_US, goog.labs.i18n.ListFormatSymbols_en_ZA, goog.labs.i18n.ListFormatSymbols_es, goog.labs.i18n.ListFormatSymbols_es_419, goog.labs.i18n.ListFormatSymbols_es_ES, goog.labs.i18n.ListFormatSymbols_es_MX, goog.labs.i18n.ListFormatSymbols_es_US, goog.labs.i18n.ListFormatSymbols_et, goog.labs.i18n.ListFormatSymbols_eu, goog.labs.i18n.ListFormatSymbols_fa, goog.labs.i18n.ListFormatSymbols_fi, goog.labs.i18n.ListFormatSymbols_fil, goog.labs.i18n.ListFormatSymbols_fr, goog.labs.i18n.ListFormatSymbols_fr_CA, goog.labs.i18n.ListFormatSymbols_ga, goog.labs.i18n.ListFormatSymbols_gl, goog.labs.i18n.ListFormatSymbols_gsw, goog.labs.i18n.ListFormatSymbols_gu, goog.labs.i18n.ListFormatSymbols_haw, goog.labs.i18n.ListFormatSymbols_he, goog.labs.i18n.ListFormatSymbols_hi, goog.labs.i18n.ListFormatSymbols_hr, goog.labs.i18n.ListFormatSymbols_hu, goog.labs.i18n.ListFormatSymbols_hy, goog.labs.i18n.ListFormatSymbols_id, goog.labs.i18n.ListFormatSymbols_in, goog.labs.i18n.ListFormatSymbols_is, goog.labs.i18n.ListFormatSymbols_it, goog.labs.i18n.ListFormatSymbols_iw, goog.labs.i18n.ListFormatSymbols_ja, goog.labs.i18n.ListFormatSymbols_ka, goog.labs.i18n.ListFormatSymbols_kk, goog.labs.i18n.ListFormatSymbols_km, goog.labs.i18n.ListFormatSymbols_kn, goog.labs.i18n.ListFormatSymbols_ko, goog.labs.i18n.ListFormatSymbols_ky, goog.labs.i18n.ListFormatSymbols_ln, goog.labs.i18n.ListFormatSymbols_lo, goog.labs.i18n.ListFormatSymbols_lt, goog.labs.i18n.ListFormatSymbols_lv, goog.labs.i18n.ListFormatSymbols_mk, goog.labs.i18n.ListFormatSymbols_ml, goog.labs.i18n.ListFormatSymbols_mn, goog.labs.i18n.ListFormatSymbols_mo, goog.labs.i18n.ListFormatSymbols_mr, goog.labs.i18n.ListFormatSymbols_ms, goog.labs.i18n.ListFormatSymbols_mt, goog.labs.i18n.ListFormatSymbols_my, goog.labs.i18n.ListFormatSymbols_nb, goog.labs.i18n.ListFormatSymbols_ne, goog.labs.i18n.ListFormatSymbols_nl, goog.labs.i18n.ListFormatSymbols_no, goog.labs.i18n.ListFormatSymbols_no_NO, goog.labs.i18n.ListFormatSymbols_or, goog.labs.i18n.ListFormatSymbols_pa, goog.labs.i18n.ListFormatSymbols_pl, goog.labs.i18n.ListFormatSymbols_pt, goog.labs.i18n.ListFormatSymbols_pt_BR, goog.labs.i18n.ListFormatSymbols_pt_PT, goog.labs.i18n.ListFormatSymbols_ro, goog.labs.i18n.ListFormatSymbols_ru, goog.labs.i18n.ListFormatSymbols_sh, goog.labs.i18n.ListFormatSymbols_si, goog.labs.i18n.ListFormatSymbols_sk, goog.labs.i18n.ListFormatSymbols_sl, goog.labs.i18n.ListFormatSymbols_sq, goog.labs.i18n.ListFormatSymbols_sr, goog.labs.i18n.ListFormatSymbols_sr_Latn, goog.labs.i18n.ListFormatSymbols_sv, goog.labs.i18n.ListFormatSymbols_sw, goog.labs.i18n.ListFormatSymbols_ta, goog.labs.i18n.ListFormatSymbols_te, goog.labs.i18n.ListFormatSymbols_th, goog.labs.i18n.ListFormatSymbols_tl, goog.labs.i18n.ListFormatSymbols_tr, goog.labs.i18n.ListFormatSymbols_uk, goog.labs.i18n.ListFormatSymbols_ur, goog.labs.i18n.ListFormatSymbols_uz, goog.labs.i18n.ListFormatSymbols_vi, goog.labs.i18n.ListFormatSymbols_zh, goog.labs.i18n.ListFormatSymbols_zh_CN, goog.labs.i18n.ListFormatSymbols_zh_HK, goog.labs.i18n.ListFormatSymbols_zh_TW, goog.labs.i18n.ListFormatSymbols_zu] from input ../closure-library/closure/goog/labs/i18n/listsymbols.js
//!! Processing provides [goog.history.Html5History, goog.history.Html5History.TokenTransformer] from input ../closure-library/closure/goog/history/html5history.js
//!! Processing provides [goog.dom.TextRangeIterator] from input ../closure-library/closure/goog/dom/textrangeiterator.js
//!! Processing provides [goog.editor.plugins.ListTabHandler] from input ../closure-library/closure/goog/editor/plugins/listtabhandler.js
//!! Processing provides [goog.ui.INLINE_BLOCK_CLASSNAME] from input ../closure-library/closure/goog/ui/cssnames.js
//!! Processing provides [goog.ui.Tab] from input ../closure-library/closure/goog/ui/tab.js
//!! Processing provides [goog.labs.testing.JsonFuzzing] from input ../closure-library/closure/goog/labs/testing/json_fuzzing.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/html5.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_elementtraversal.js
//!! Processing provides [goog.color, goog.color.Hsl, goog.color.Hsv, goog.color.Rgb] from input ../closure-library/closure/goog/color/color.js
//!! Processing provides [goog.editor.plugins.LinkDialogPlugin] from input ../closure-library/closure/goog/editor/plugins/linkdialogplugin.js
//!! Processing provides [goog.storage.mechanism.Mechanism] from input ../closure-library/closure/goog/storage/mechanism/mechanism.js
//!! Processing provides [goog.math.Matrix] from input ../closure-library/closure/goog/math/matrix.js
//!! Processing provides [goog.window] from input ../closure-library/closure/goog/window/window.js
//!! Processing provides [goog.date.UtcDateTime] from input ../closure-library/closure/goog/date/utcdatetime.js
//!! Processing provides [goog.json.Processor] from input ../closure-library/closure/goog/json/processor.js
//!! Processing provides [goog.debug.ErrorReporter, goog.debug.ErrorReporter.ExceptionEvent] from input ../closure-library/closure/goog/debug/errorreporter.js
//!! Processing provides [goog.editor.Table, goog.editor.TableCell, goog.editor.TableRow] from input ../closure-library/closure/goog/editor/table.js
//!! Processing provides [goog.graphics.VmlEllipseElement, goog.graphics.VmlGroupElement, goog.graphics.VmlImageElement, goog.graphics.VmlPathElement, goog.graphics.VmlRectElement, goog.graphics.VmlTextElement] from input ../closure-library/closure/goog/graphics/vmlelement.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_dom4.js
//!! Processing provides [goog.dom.forms] from input ../closure-library/closure/goog/dom/forms.js
//!! Processing provides [goog.html.utils] from input ../closure-library/closure/goog/html/utils.js
//!! Processing provides [goog.structs.Collection] from input ../closure-library/closure/goog/structs/collection.js
//!! Processing provides [goog.a11y.aria.Announcer] from input ../closure-library/closure/goog/a11y/aria/announcer.js
//!! Processing provides [goog.crypt.Sha512_256] from input ../closure-library/closure/goog/crypt/sha512_256.js
//!! Processing provides [goog.dom.browserrange.GeckoRange] from input ../closure-library/closure/goog/dom/browserrange/geckorange.js
//!! Processing provides [goog.date.DateRange, goog.date.DateRange.Iterator, goog.date.DateRange.StandardDateRangeKeys] from input ../closure-library/closure/goog/date/daterange.js
//!! Processing provides [goog.color.alpha] from input ../closure-library/closure/goog/color/alpha.js
//!! Processing provides [goog.functions] from input ../closure-library/closure/goog/functions/functions.js
//!! Processing provides [goog.locale] from input ../closure-library/closure/goog/locale/locale.js
//!! Processing provides [] from input ../closure-compiler/externs/es3.js
//!! Processing provides [goog.uri.utils, goog.uri.utils.ComponentIndex, goog.uri.utils.QueryArray, goog.uri.utils.QueryValue, goog.uri.utils.StandardQueryParam] from input ../closure-library/closure/goog/uri/utils.js
//!! Processing provides [goog.editor.plugins.LinkBubble, goog.editor.plugins.LinkBubble.Action] from input ../closure-library/closure/goog/editor/plugins/linkbubble.js
//!! Processing provides [goog.memoize] from input ../closure-library/closure/goog/memoize/memoize.js
//!! Processing provides [goog.i18n.DateTimeFormat, goog.i18n.DateTimeFormat.Format] from input ../closure-library/closure/goog/i18n/datetimeformat.js
//!! Processing provides [goog.a11y.aria.datatables] from input ../closure-library/closure/goog/a11y/aria/datatables.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_dom3.js
//!! Processing provides [goog.crypt.baseN] from input ../closure-library/closure/goog/crypt/basen.js
//!! Processing provides [goog.dom.AbstractMultiRange] from input ../closure-library/closure/goog/dom/abstractmultirange.js
//!! Processing provides [goog.testing.stacktrace, goog.testing.stacktrace.Frame] from input ../closure-library/closure/goog/testing/stacktrace.js
//!! Processing provides [goog.dom.iter.AncestorIterator, goog.dom.iter.ChildIterator, goog.dom.iter.SiblingIterator] from input ../closure-library/closure/goog/dom/iter.js
//!! Processing provides [goog.locale.genericFontNamesData] from input ../closure-library/closure/goog/locale/genericfontnamesdata.js
//!! Processing provides [goog.labs.testing.AnythingMatcher] from input ../closure-library/closure/goog/labs/testing/decoratormatcher.js
//!! Processing provides [goog.events.EventWrapper] from input ../closure-library/closure/goog/events/eventwrapper.js
//!! Processing provides [goog.labs.userAgent.browser] from input ../closure-library/closure/goog/labs/useragent/browser.js
//!! Processing provides [goog.math.tdma] from input ../closure-library/closure/goog/math/tdma.js
//!! Processing provides [goog.iter, goog.iter.Iterable, goog.iter.Iterator, goog.iter.StopIteration] from input ../closure-library/closure/goog/iter/iter.js
//!! Processing provides [goog.graphics.ext.Path] from input ../closure-library/closure/goog/graphics/ext/path.js
//!! Processing provides [goog.dom.pattern.callback.Counter] from input ../closure-library/closure/goog/dom/pattern/callback/counter.js
//!! Processing provides [goog.editor.plugins.Emoticons] from input ../closure-library/closure/goog/editor/plugins/emoticons.js
//!! Processing provides [goog.labs.html.scrubber] from input ../closure-library/closure/goog/labs/html/scrubber.js
//!! Processing provides [goog.events.EventTarget] from input ../closure-library/closure/goog/events/eventtarget.js
//!! Processing provides [goog.editor.plugins.TagOnEnterHandler] from input ../closure-library/closure/goog/editor/plugins/tagonenterhandler.js
//!! Processing provides [goog.crypt.pbkdf2] from input ../closure-library/closure/goog/crypt/pbkdf2.js
//!! Processing provides [goog.ui.editor.TabPane] from input ../closure-library/closure/goog/ui/editor/tabpane.js
//!! Processing provides [goog.graphics.AffineTransform] from input ../closure-library/closure/goog/graphics/affinetransform.js
//!! Processing provides [goog.graphics.EllipseElement] from input ../closure-library/closure/goog/graphics/ellipseelement.js
//!! Processing provides [goog.dom.BrowserFeature] from input ../closure-library/closure/goog/dom/browserfeature.js
//!! Processing provides [goog.messaging.BufferedChannel] from input ../closure-library/closure/goog/messaging/bufferedchannel.js
//!! Processing provides [goog.testing.TestRunner] from input ../closure-library/closure/goog/testing/testrunner.js
//!! Processing provides [goog.math.Long] from input ../closure-library/closure/goog/math/long.js
//!! Processing provides [goog.html.sanitizer.TagWhitelist] from input ../closure-library/closure/goog/html/sanitizer/tagwhitelist.js
//!! Processing provides [goog.dom.pattern.Tag] from input ../closure-library/closure/goog/dom/pattern/tag.js
//!! Processing provides [goog.ui.editor.AbstractDialog, goog.ui.editor.AbstractDialog.Builder, goog.ui.editor.AbstractDialog.EventType] from input ../closure-library/closure/goog/ui/editor/abstractdialog.js
//!! Processing provides [goog.dom.RangeEndpoint] from input ../closure-library/closure/goog/dom/rangeendpoint.js
//!! Processing provides [goog.math.interpolator.Spline1] from input ../closure-library/closure/goog/math/interpolator/spline1.js
//!! Processing provides [goog.fx.CssSpriteAnimation] from input ../closure-library/closure/goog/fx/cssspriteanimation.js
//!! Processing provides [goog.dom.SavedCaretRange] from input ../closure-library/closure/goog/dom/savedcaretrange.js
//!! Processing provides [goog.ui.FlatButtonRenderer] from input ../closure-library/closure/goog/ui/flatbuttonrenderer.js
//!! Processing provides [goog.html.SafeHtmlFormatter] from input ../closure-library/closure/goog/html/safehtmlformatter.js
//!! Processing provides [goog.db, goog.db.BlockedCallback, goog.db.UpgradeNeededCallback] from input ../closure-library/closure/goog/db/db.js
//!! Processing provides [goog.fx.css3.Transition] from input ../closure-library/closure/goog/fx/css3/transition.js
//!! Processing provides [goog.userAgent] from input ../closure-library/closure/goog/useragent/useragent.js
//!! Processing provides [goog.labs.testing.CloseToMatcher, goog.labs.testing.EqualToMatcher, goog.labs.testing.GreaterThanEqualToMatcher, goog.labs.testing.GreaterThanMatcher, goog.labs.testing.LessThanEqualToMatcher, goog.labs.testing.LessThanMatcher] from input ../closure-library/closure/goog/labs/testing/numbermatcher.js
//!! Processing provides [goog.html.sanitizer.TagBlacklist] from input ../closure-library/closure/goog/html/sanitizer/tagblacklist.js
//!! Processing provides [goog.net.WebChannelTransport] from input ../closure-library/closure/goog/labs/net/webchanneltransport.js
//!! Processing provides [goog.math.Coordinate] from input ../closure-library/closure/goog/math/coordinate.js
//!! Processing provides [goog.editor.defines] from input ../closure-library/closure/goog/editor/defines.js
//!! Processing provides [goog.dom.vendor] from input ../closure-library/closure/goog/dom/vendor.js
//!! Processing provides [goog.editor.style] from input ../closure-library/closure/goog/editor/style.js
//!! Processing provides [goog.structs.Map] from input ../closure-library/closure/goog/structs/map.js
//!! Processing provides [goog.debug.devCssRunner] from input ../closure-library/closure/goog/debug/devcss/devcssrunner.js
//!! Processing provides [goog.cssom, goog.cssom.CssRuleType] from input ../closure-library/closure/goog/cssom/cssom.js
//!! Processing provides [goog.db.Index] from input ../closure-library/closure/goog/db/index.js
//!! Processing provides [goog.fs.FileReader, goog.fs.FileReader.EventType, goog.fs.FileReader.ReadyState] from input ../closure-library/closure/goog/fs/filereader.js
//!! Processing provides [goog.ds.JsXmlHttpDataSource] from input ../closure-library/closure/goog/datasource/jsxmlhttpdatasource.js
//!! Processing provides [goog.graphics.SolidFill] from input ../closure-library/closure/goog/graphics/solidfill.js
//!! Processing provides [goog.graphics.Element] from input ../closure-library/closure/goog/graphics/element.js
//!! Processing provides [goog.locale.genericFontNames] from input ../closure-library/closure/goog/locale/genericfontnames.js
//!! Processing provides [goog.labs.mock.verification, goog.labs.mock.verification.VerificationMode] from input ../closure-library/closure/goog/labs/mock/verificationmode.js
//!! Processing provides [goog.math.interpolator.Linear1] from input ../closure-library/closure/goog/math/interpolator/linear1.js
//!! Processing provides [goog.fx.Transition, goog.fx.Transition.EventType] from input ../closure-library/closure/goog/fx/transition.js
//!! Processing provides [goog.object] from input ../closure-library/closure/goog/object/object.js
//!! Processing provides [goog.labs.i18n.GenderInfo, goog.labs.i18n.GenderInfo.Gender, goog.labs.i18n.ListFormat] from input ../closure-library/closure/goog/labs/i18n/listformat.js
//!! Processing provides [goog.async.nextTick, goog.async.throwException] from input ../closure-library/closure/goog/async/nexttick.js
//!! Processing provides [goog.crypt.hash32] from input ../closure-library/closure/goog/crypt/hash32.js
//!! Processing provides [goog.dom.pattern, goog.dom.pattern.MatchType] from input ../closure-library/closure/goog/dom/pattern/pattern.js
//!! Processing provides [goog.storage.RichStorage, goog.storage.RichStorage.Wrapper] from input ../closure-library/closure/goog/storage/richstorage.js
//!! Processing provides [goog.fx.anim, goog.fx.anim.Animated] from input ../closure-library/closure/goog/fx/anim/anim.js
//!! Processing provides [goog.json.NativeJsonProcessor] from input ../closure-library/closure/goog/json/nativejsonprocessor.js
//!! Processing provides [goog.events.Event, goog.events.EventLike] from input ../closure-library/closure/goog/events/event.js
//!! Processing provides [goog.storage.mechanism.HTML5WebStorage] from input ../closure-library/closure/goog/storage/mechanism/html5webstorage.js
//!! Processing provides [goog.fx] from input ../closure-library/closure/goog/fx/fx.js
//!! Processing provides [goog.editor.node] from input ../closure-library/closure/goog/editor/node.js
//!! Processing provides [goog.graphics.ext.StrokeAndFillElement] from input ../closure-library/closure/goog/graphics/ext/strokeandfillelement.js
//!! Processing provides [goog.locale.nativeNameConstants] from input ../closure-library/closure/goog/locale/nativenameconstants.js
//!! Processing provides [goog.messaging.LoggerClient] from input ../closure-library/closure/goog/messaging/loggerclient.js
//!! Processing provides [goog.async.AnimationDelay] from input ../closure-library/closure/goog/async/animationdelay.js
//!! Processing provides [goog.dom.animationFrame.polyfill] from input ../closure-library/closure/goog/dom/animationframe/polyfill.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/fetchapi.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_navigation_timing.js
//!! Processing provides [goog.html.SafeUrl] from input ../closure-library/closure/goog/html/safeurl.js
//!! Processing provides [goog.editor.Link] from input ../closure-library/closure/goog/editor/link.js
//!! Processing provides [goog.ui.editor.messages] from input ../closure-library/closure/goog/ui/editor/messages.js
//!! Processing provides [goog.events.PasteHandler, goog.events.PasteHandler.EventType, goog.events.PasteHandler.State] from input ../closure-library/closure/goog/events/pastehandler.js
//!! Processing provides [goog.labs.net.webChannel.WebChannelDebug] from input ../closure-library/closure/goog/labs/net/webchannel/webchanneldebug.js
//!! Processing provides [goog.ds.AbstractFastDataNode, goog.ds.FastDataNode, goog.ds.FastListNode, goog.ds.PrimitiveFastDataNode] from input ../closure-library/closure/goog/datasource/fastdatanode.js
//!! Processing provides [goog.i18n.collation] from input ../closure-library/closure/goog/i18n/collation.js
//!! Processing provides [goog.dom.pattern.Repeat] from input ../closure-library/closure/goog/dom/pattern/repeat.js
//!! Processing provides [goog.labs.net.webChannel.BaseTestChannel] from input ../closure-library/closure/goog/labs/net/webchannel/basetestchannel.js
//!! Processing provides [goog.labs.userAgent.platform] from input ../closure-library/closure/goog/labs/useragent/platform.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/chrome.js
//!! Processing provides [goog.events.ListenerMap] from input ../closure-library/closure/goog/events/listenermap.js
//!! Processing provides [goog.fx.css3] from input ../closure-library/closure/goog/fx/css3/fx.js
//!! Processing provides [goog.history.Event] from input ../closure-library/closure/goog/history/event.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/ie_event.js
//!! Processing provides [goog.debug.Trace] from input ../closure-library/closure/goog/debug/tracer.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_dom2.js
//!! Processing provides [goog.positioning, goog.positioning.Corner, goog.positioning.CornerBit, goog.positioning.Overflow, goog.positioning.OverflowStatus] from input ../closure-library/closure/goog/positioning/positioning.js
//!! Processing provides [goog.graphics.ext.coordinates] from input ../closure-library/closure/goog/graphics/ext/coordinates.js
//!! Processing provides [goog.storage.ExpiringStorage] from input ../closure-library/closure/goog/storage/expiringstorage.js
//!! Processing provides [goog.messaging.RespondingChannel] from input ../closure-library/closure/goog/messaging/respondingchannel.js
//!! Processing provides [goog.net.createWebChannelTransport] from input ../closure-library/closure/goog/labs/net/webchanneltransportfactory.js
//!! Processing provides [goog.events.BrowserEvent, goog.events.BrowserEvent.MouseButton] from input ../closure-library/closure/goog/events/browserevent.js
//!! Processing provides [goog.structs.Set] from input ../closure-library/closure/goog/structs/set.js
//!! Processing provides [goog.structs] from input ../closure-library/closure/goog/structs/structs.js
//!! Processing provides [goog.fx.DragDropGroup] from input ../closure-library/closure/goog/fx/dragdropgroup.js
//!! Processing provides [goog.events.WheelEvent] from input ../closure-library/closure/goog/events/wheelevent.js
//!! Processing provides [goog.dom.pattern.ChildMatches] from input ../closure-library/closure/goog/dom/pattern/childmatches.js
//!! Processing provides [goog.messaging.PortNetwork] from input ../closure-library/closure/goog/messaging/portnetwork.js
//!! Processing provides [] from input ../closure-compiler/externs/es5.js
//!! Processing provides [goog.editor.plugins.AbstractBubblePlugin] from input ../closure-library/closure/goog/editor/plugins/abstractbubbleplugin.js
//!! Processing provides [goog.net.ErrorCode] from input ../closure-library/closure/goog/net/errorcode.js
//!! Processing provides [goog.debug.Error] from input ../closure-library/closure/goog/debug/error.js
//!! Processing provides [goog.graphics.SvgGraphics] from input ../closure-library/closure/goog/graphics/svggraphics.js
//!! Processing provides [goog.editor.plugins.LoremIpsum] from input ../closure-library/closure/goog/editor/plugins/loremipsum.js
//!! Processing provides [goog.editor.plugins.UndoRedoManager, goog.editor.plugins.UndoRedoManager.EventType] from input ../closure-library/closure/goog/editor/plugins/undoredomanager.js
//!! Processing provides [goog.fx.Animation, goog.fx.Animation.EventType, goog.fx.Animation.State, goog.fx.AnimationEvent] from input ../closure-library/closure/goog/fx/animation.js
//!! Processing provides [goog.labs.i18n.ListFormatSymbolsExt, goog.labs.i18n.ListFormatSymbols_af_NA, goog.labs.i18n.ListFormatSymbols_af_ZA, goog.labs.i18n.ListFormatSymbols_agq, goog.labs.i18n.ListFormatSymbols_agq_CM, goog.labs.i18n.ListFormatSymbols_ak, goog.labs.i18n.ListFormatSymbols_ak_GH, goog.labs.i18n.ListFormatSymbols_am_ET, goog.labs.i18n.ListFormatSymbols_ar_001, goog.labs.i18n.ListFormatSymbols_ar_AE, goog.labs.i18n.ListFormatSymbols_ar_BH, goog.labs.i18n.ListFormatSymbols_ar_DJ, goog.labs.i18n.ListFormatSymbols_ar_DZ, goog.labs.i18n.ListFormatSymbols_ar_EG, goog.labs.i18n.ListFormatSymbols_ar_EH, goog.labs.i18n.ListFormatSymbols_ar_ER, goog.labs.i18n.ListFormatSymbols_ar_IL, goog.labs.i18n.ListFormatSymbols_ar_IQ, goog.labs.i18n.ListFormatSymbols_ar_JO, goog.labs.i18n.ListFormatSymbols_ar_KM, goog.labs.i18n.ListFormatSymbols_ar_KW, goog.labs.i18n.ListFormatSymbols_ar_LB, goog.labs.i18n.ListFormatSymbols_ar_LY, goog.labs.i18n.ListFormatSymbols_ar_MA, goog.labs.i18n.ListFormatSymbols_ar_MR, goog.labs.i18n.ListFormatSymbols_ar_OM, goog.labs.i18n.ListFormatSymbols_ar_PS, goog.labs.i18n.ListFormatSymbols_ar_QA, goog.labs.i18n.ListFormatSymbols_ar_SA, goog.labs.i18n.ListFormatSymbols_ar_SD, goog.labs.i18n.ListFormatSymbols_ar_SO, goog.labs.i18n.ListFormatSymbols_ar_SS, goog.labs.i18n.ListFormatSymbols_ar_SY, goog.labs.i18n.ListFormatSymbols_ar_TD, goog.labs.i18n.ListFormatSymbols_ar_TN, goog.labs.i18n.ListFormatSymbols_ar_XB, goog.labs.i18n.ListFormatSymbols_ar_YE, goog.labs.i18n.ListFormatSymbols_as, goog.labs.i18n.ListFormatSymbols_as_IN, goog.labs.i18n.ListFormatSymbols_asa, goog.labs.i18n.ListFormatSymbols_asa_TZ, goog.labs.i18n.ListFormatSymbols_ast, goog.labs.i18n.ListFormatSymbols_ast_ES, goog.labs.i18n.ListFormatSymbols_az_Cyrl, goog.labs.i18n.ListFormatSymbols_az_Cyrl_AZ, goog.labs.i18n.ListFormatSymbols_az_Latn, goog.labs.i18n.ListFormatSymbols_az_Latn_AZ, goog.labs.i18n.ListFormatSymbols_bas, goog.labs.i18n.ListFormatSymbols_bas_CM, goog.labs.i18n.ListFormatSymbols_be_BY, goog.labs.i18n.ListFormatSymbols_bem, goog.labs.i18n.ListFormatSymbols_bem_ZM, goog.labs.i18n.ListFormatSymbols_bez, goog.labs.i18n.ListFormatSymbols_bez_TZ, goog.labs.i18n.ListFormatSymbols_bg_BG, goog.labs.i18n.ListFormatSymbols_bm, goog.labs.i18n.ListFormatSymbols_bm_ML, goog.labs.i18n.ListFormatSymbols_bn_BD, goog.labs.i18n.ListFormatSymbols_bn_IN, goog.labs.i18n.ListFormatSymbols_bo, goog.labs.i18n.ListFormatSymbols_bo_CN, goog.labs.i18n.ListFormatSymbols_bo_IN, goog.labs.i18n.ListFormatSymbols_br_FR, goog.labs.i18n.ListFormatSymbols_brx, goog.labs.i18n.ListFormatSymbols_brx_IN, goog.labs.i18n.ListFormatSymbols_bs_Cyrl, goog.labs.i18n.ListFormatSymbols_bs_Cyrl_BA, goog.labs.i18n.ListFormatSymbols_bs_Latn, goog.labs.i18n.ListFormatSymbols_bs_Latn_BA, goog.labs.i18n.ListFormatSymbols_ca_AD, goog.labs.i18n.ListFormatSymbols_ca_ES, goog.labs.i18n.ListFormatSymbols_ca_FR, goog.labs.i18n.ListFormatSymbols_ca_IT, goog.labs.i18n.ListFormatSymbols_ce, goog.labs.i18n.ListFormatSymbols_ce_RU, goog.labs.i18n.ListFormatSymbols_cgg, goog.labs.i18n.ListFormatSymbols_cgg_UG, goog.labs.i18n.ListFormatSymbols_chr_US, goog.labs.i18n.ListFormatSymbols_cs_CZ, goog.labs.i18n.ListFormatSymbols_cy_GB, goog.labs.i18n.ListFormatSymbols_da_DK, goog.labs.i18n.ListFormatSymbols_da_GL, goog.labs.i18n.ListFormatSymbols_dav, goog.labs.i18n.ListFormatSymbols_dav_KE, goog.labs.i18n.ListFormatSymbols_de_BE, goog.labs.i18n.ListFormatSymbols_de_DE, goog.labs.i18n.ListFormatSymbols_de_LI, goog.labs.i18n.ListFormatSymbols_de_LU, goog.labs.i18n.ListFormatSymbols_dje, goog.labs.i18n.ListFormatSymbols_dje_NE, goog.labs.i18n.ListFormatSymbols_dsb, goog.labs.i18n.ListFormatSymbols_dsb_DE, goog.labs.i18n.ListFormatSymbols_dua, goog.labs.i18n.ListFormatSymbols_dua_CM, goog.labs.i18n.ListFormatSymbols_dyo, goog.labs.i18n.ListFormatSymbols_dyo_SN, goog.labs.i18n.ListFormatSymbols_dz, goog.labs.i18n.ListFormatSymbols_dz_BT, goog.labs.i18n.ListFormatSymbols_ebu, goog.labs.i18n.ListFormatSymbols_ebu_KE, goog.labs.i18n.ListFormatSymbols_ee, goog.labs.i18n.ListFormatSymbols_ee_GH, goog.labs.i18n.ListFormatSymbols_ee_TG, goog.labs.i18n.ListFormatSymbols_el_CY, goog.labs.i18n.ListFormatSymbols_el_GR, goog.labs.i18n.ListFormatSymbols_en_001, goog.labs.i18n.ListFormatSymbols_en_150, goog.labs.i18n.ListFormatSymbols_en_AG, goog.labs.i18n.ListFormatSymbols_en_AI, goog.labs.i18n.ListFormatSymbols_en_AS, goog.labs.i18n.ListFormatSymbols_en_AT, goog.labs.i18n.ListFormatSymbols_en_BB, goog.labs.i18n.ListFormatSymbols_en_BE, goog.labs.i18n.ListFormatSymbols_en_BI, goog.labs.i18n.ListFormatSymbols_en_BM, goog.labs.i18n.ListFormatSymbols_en_BS, goog.labs.i18n.ListFormatSymbols_en_BW, goog.labs.i18n.ListFormatSymbols_en_BZ, goog.labs.i18n.ListFormatSymbols_en_CC, goog.labs.i18n.ListFormatSymbols_en_CH, goog.labs.i18n.ListFormatSymbols_en_CK, goog.labs.i18n.ListFormatSymbols_en_CM, goog.labs.i18n.ListFormatSymbols_en_CX, goog.labs.i18n.ListFormatSymbols_en_CY, goog.labs.i18n.ListFormatSymbols_en_DE, goog.labs.i18n.ListFormatSymbols_en_DG, goog.labs.i18n.ListFormatSymbols_en_DK, goog.labs.i18n.ListFormatSymbols_en_DM, goog.labs.i18n.ListFormatSymbols_en_ER, goog.labs.i18n.ListFormatSymbols_en_FI, goog.labs.i18n.ListFormatSymbols_en_FJ, goog.labs.i18n.ListFormatSymbols_en_FK, goog.labs.i18n.ListFormatSymbols_en_FM, goog.labs.i18n.ListFormatSymbols_en_GD, goog.labs.i18n.ListFormatSymbols_en_GG, goog.labs.i18n.ListFormatSymbols_en_GH, goog.labs.i18n.ListFormatSymbols_en_GI, goog.labs.i18n.ListFormatSymbols_en_GM, goog.labs.i18n.ListFormatSymbols_en_GU, goog.labs.i18n.ListFormatSymbols_en_GY, goog.labs.i18n.ListFormatSymbols_en_HK, goog.labs.i18n.ListFormatSymbols_en_IL, goog.labs.i18n.ListFormatSymbols_en_IM, goog.labs.i18n.ListFormatSymbols_en_IO, goog.labs.i18n.ListFormatSymbols_en_JE, goog.labs.i18n.ListFormatSymbols_en_JM, goog.labs.i18n.ListFormatSymbols_en_KE, goog.labs.i18n.ListFormatSymbols_en_KI, goog.labs.i18n.ListFormatSymbols_en_KN, goog.labs.i18n.ListFormatSymbols_en_KY, goog.labs.i18n.ListFormatSymbols_en_LC, goog.labs.i18n.ListFormatSymbols_en_LR, goog.labs.i18n.ListFormatSymbols_en_LS, goog.labs.i18n.ListFormatSymbols_en_MG, goog.labs.i18n.ListFormatSymbols_en_MH, goog.labs.i18n.ListFormatSymbols_en_MO, goog.labs.i18n.ListFormatSymbols_en_MP, goog.labs.i18n.ListFormatSymbols_en_MS, goog.labs.i18n.ListFormatSymbols_en_MT, goog.labs.i18n.ListFormatSymbols_en_MU, goog.labs.i18n.ListFormatSymbols_en_MW, goog.labs.i18n.ListFormatSymbols_en_MY, goog.labs.i18n.ListFormatSymbols_en_NA, goog.labs.i18n.ListFormatSymbols_en_NF, goog.labs.i18n.ListFormatSymbols_en_NG, goog.labs.i18n.ListFormatSymbols_en_NL, goog.labs.i18n.ListFormatSymbols_en_NR, goog.labs.i18n.ListFormatSymbols_en_NU, goog.labs.i18n.ListFormatSymbols_en_NZ, goog.labs.i18n.ListFormatSymbols_en_PG, goog.labs.i18n.ListFormatSymbols_en_PH, goog.labs.i18n.ListFormatSymbols_en_PK, goog.labs.i18n.ListFormatSymbols_en_PN, goog.labs.i18n.ListFormatSymbols_en_PR, goog.labs.i18n.ListFormatSymbols_en_PW, goog.labs.i18n.ListFormatSymbols_en_RW, goog.labs.i18n.ListFormatSymbols_en_SB, goog.labs.i18n.ListFormatSymbols_en_SC, goog.labs.i18n.ListFormatSymbols_en_SD, goog.labs.i18n.ListFormatSymbols_en_SE, goog.labs.i18n.ListFormatSymbols_en_SH, goog.labs.i18n.ListFormatSymbols_en_SI, goog.labs.i18n.ListFormatSymbols_en_SL, goog.labs.i18n.ListFormatSymbols_en_SS, goog.labs.i18n.ListFormatSymbols_en_SX, goog.labs.i18n.ListFormatSymbols_en_SZ, goog.labs.i18n.ListFormatSymbols_en_TC, goog.labs.i18n.ListFormatSymbols_en_TK, goog.labs.i18n.ListFormatSymbols_en_TO, goog.labs.i18n.ListFormatSymbols_en_TT, goog.labs.i18n.ListFormatSymbols_en_TV, goog.labs.i18n.ListFormatSymbols_en_TZ, goog.labs.i18n.ListFormatSymbols_en_UG, goog.labs.i18n.ListFormatSymbols_en_UM, goog.labs.i18n.ListFormatSymbols_en_US_POSIX, goog.labs.i18n.ListFormatSymbols_en_VC, goog.labs.i18n.ListFormatSymbols_en_VG, goog.labs.i18n.ListFormatSymbols_en_VI, goog.labs.i18n.ListFormatSymbols_en_VU, goog.labs.i18n.ListFormatSymbols_en_WS, goog.labs.i18n.ListFormatSymbols_en_XA, goog.labs.i18n.ListFormatSymbols_en_ZM, goog.labs.i18n.ListFormatSymbols_en_ZW, goog.labs.i18n.ListFormatSymbols_eo, goog.labs.i18n.ListFormatSymbols_es_AR, goog.labs.i18n.ListFormatSymbols_es_BO, goog.labs.i18n.ListFormatSymbols_es_CL, goog.labs.i18n.ListFormatSymbols_es_CO, goog.labs.i18n.ListFormatSymbols_es_CR, goog.labs.i18n.ListFormatSymbols_es_CU, goog.labs.i18n.ListFormatSymbols_es_DO, goog.labs.i18n.ListFormatSymbols_es_EA, goog.labs.i18n.ListFormatSymbols_es_EC, goog.labs.i18n.ListFormatSymbols_es_GQ, goog.labs.i18n.ListFormatSymbols_es_GT, goog.labs.i18n.ListFormatSymbols_es_HN, goog.labs.i18n.ListFormatSymbols_es_IC, goog.labs.i18n.ListFormatSymbols_es_NI, goog.labs.i18n.ListFormatSymbols_es_PA, goog.labs.i18n.ListFormatSymbols_es_PE, goog.labs.i18n.ListFormatSymbols_es_PH, goog.labs.i18n.ListFormatSymbols_es_PR, goog.labs.i18n.ListFormatSymbols_es_PY, goog.labs.i18n.ListFormatSymbols_es_SV, goog.labs.i18n.ListFormatSymbols_es_UY, goog.labs.i18n.ListFormatSymbols_es_VE, goog.labs.i18n.ListFormatSymbols_et_EE, goog.labs.i18n.ListFormatSymbols_eu_ES, goog.labs.i18n.ListFormatSymbols_ewo, goog.labs.i18n.ListFormatSymbols_ewo_CM, goog.labs.i18n.ListFormatSymbols_fa_AF, goog.labs.i18n.ListFormatSymbols_fa_IR, goog.labs.i18n.ListFormatSymbols_ff, goog.labs.i18n.ListFormatSymbols_ff_CM, goog.labs.i18n.ListFormatSymbols_ff_GN, goog.labs.i18n.ListFormatSymbols_ff_MR, goog.labs.i18n.ListFormatSymbols_ff_SN, goog.labs.i18n.ListFormatSymbols_fi_FI, goog.labs.i18n.ListFormatSymbols_fil_PH, goog.labs.i18n.ListFormatSymbols_fo, goog.labs.i18n.ListFormatSymbols_fo_DK, goog.labs.i18n.ListFormatSymbols_fo_FO, goog.labs.i18n.ListFormatSymbols_fr_BE, goog.labs.i18n.ListFormatSymbols_fr_BF, goog.labs.i18n.ListFormatSymbols_fr_BI, goog.labs.i18n.ListFormatSymbols_fr_BJ, goog.labs.i18n.ListFormatSymbols_fr_BL, goog.labs.i18n.ListFormatSymbols_fr_CD, goog.labs.i18n.ListFormatSymbols_fr_CF, goog.labs.i18n.ListFormatSymbols_fr_CG, goog.labs.i18n.ListFormatSymbols_fr_CH, goog.labs.i18n.ListFormatSymbols_fr_CI, goog.labs.i18n.ListFormatSymbols_fr_CM, goog.labs.i18n.ListFormatSymbols_fr_DJ, goog.labs.i18n.ListFormatSymbols_fr_DZ, goog.labs.i18n.ListFormatSymbols_fr_FR, goog.labs.i18n.ListFormatSymbols_fr_GA, goog.labs.i18n.ListFormatSymbols_fr_GF, goog.labs.i18n.ListFormatSymbols_fr_GN, goog.labs.i18n.ListFormatSymbols_fr_GP, goog.labs.i18n.ListFormatSymbols_fr_GQ, goog.labs.i18n.ListFormatSymbols_fr_HT, goog.labs.i18n.ListFormatSymbols_fr_KM, goog.labs.i18n.ListFormatSymbols_fr_LU, goog.labs.i18n.ListFormatSymbols_fr_MA, goog.labs.i18n.ListFormatSymbols_fr_MC, goog.labs.i18n.ListFormatSymbols_fr_MF, goog.labs.i18n.ListFormatSymbols_fr_MG, goog.labs.i18n.ListFormatSymbols_fr_ML, goog.labs.i18n.ListFormatSymbols_fr_MQ, goog.labs.i18n.ListFormatSymbols_fr_MR, goog.labs.i18n.ListFormatSymbols_fr_MU, goog.labs.i18n.ListFormatSymbols_fr_NC, goog.labs.i18n.ListFormatSymbols_fr_NE, goog.labs.i18n.ListFormatSymbols_fr_PF, goog.labs.i18n.ListFormatSymbols_fr_PM, goog.labs.i18n.ListFormatSymbols_fr_RE, goog.labs.i18n.ListFormatSymbols_fr_RW, goog.labs.i18n.ListFormatSymbols_fr_SC, goog.labs.i18n.ListFormatSymbols_fr_SN, goog.labs.i18n.ListFormatSymbols_fr_SY, goog.labs.i18n.ListFormatSymbols_fr_TD, goog.labs.i18n.ListFormatSymbols_fr_TG, goog.labs.i18n.ListFormatSymbols_fr_TN, goog.labs.i18n.ListFormatSymbols_fr_VU, goog.labs.i18n.ListFormatSymbols_fr_WF, goog.labs.i18n.ListFormatSymbols_fr_YT, goog.labs.i18n.ListFormatSymbols_fur, goog.labs.i18n.ListFormatSymbols_fur_IT, goog.labs.i18n.ListFormatSymbols_fy, goog.labs.i18n.ListFormatSymbols_fy_NL, goog.labs.i18n.ListFormatSymbols_ga_IE, goog.labs.i18n.ListFormatSymbols_gd, goog.labs.i18n.ListFormatSymbols_gd_GB, goog.labs.i18n.ListFormatSymbols_gl_ES, goog.labs.i18n.ListFormatSymbols_gsw_CH, goog.labs.i18n.ListFormatSymbols_gsw_FR, goog.labs.i18n.ListFormatSymbols_gsw_LI, goog.labs.i18n.ListFormatSymbols_gu_IN, goog.labs.i18n.ListFormatSymbols_guz, goog.labs.i18n.ListFormatSymbols_guz_KE, goog.labs.i18n.ListFormatSymbols_gv, goog.labs.i18n.ListFormatSymbols_gv_IM, goog.labs.i18n.ListFormatSymbols_ha, goog.labs.i18n.ListFormatSymbols_ha_GH, goog.labs.i18n.ListFormatSymbols_ha_NE, goog.labs.i18n.ListFormatSymbols_ha_NG, goog.labs.i18n.ListFormatSymbols_haw_US, goog.labs.i18n.ListFormatSymbols_he_IL, goog.labs.i18n.ListFormatSymbols_hi_IN, goog.labs.i18n.ListFormatSymbols_hr_BA, goog.labs.i18n.ListFormatSymbols_hr_HR, goog.labs.i18n.ListFormatSymbols_hsb, goog.labs.i18n.ListFormatSymbols_hsb_DE, goog.labs.i18n.ListFormatSymbols_hu_HU, goog.labs.i18n.ListFormatSymbols_hy_AM, goog.labs.i18n.ListFormatSymbols_id_ID, goog.labs.i18n.ListFormatSymbols_ig, goog.labs.i18n.ListFormatSymbols_ig_NG, goog.labs.i18n.ListFormatSymbols_ii, goog.labs.i18n.ListFormatSymbols_ii_CN, goog.labs.i18n.ListFormatSymbols_is_IS, goog.labs.i18n.ListFormatSymbols_it_CH, goog.labs.i18n.ListFormatSymbols_it_IT, goog.labs.i18n.ListFormatSymbols_it_SM, goog.labs.i18n.ListFormatSymbols_ja_JP, goog.labs.i18n.ListFormatSymbols_jgo, goog.labs.i18n.ListFormatSymbols_jgo_CM, goog.labs.i18n.ListFormatSymbols_jmc, goog.labs.i18n.ListFormatSymbols_jmc_TZ, goog.labs.i18n.ListFormatSymbols_ka_GE, goog.labs.i18n.ListFormatSymbols_kab, goog.labs.i18n.ListFormatSymbols_kab_DZ, goog.labs.i18n.ListFormatSymbols_kam, goog.labs.i18n.ListFormatSymbols_kam_KE, goog.labs.i18n.ListFormatSymbols_kde, goog.labs.i18n.ListFormatSymbols_kde_TZ, goog.labs.i18n.ListFormatSymbols_kea, goog.labs.i18n.ListFormatSymbols_kea_CV, goog.labs.i18n.ListFormatSymbols_khq, goog.labs.i18n.ListFormatSymbols_khq_ML, goog.labs.i18n.ListFormatSymbols_ki, goog.labs.i18n.ListFormatSymbols_ki_KE, goog.labs.i18n.ListFormatSymbols_kk_KZ, goog.labs.i18n.ListFormatSymbols_kkj, goog.labs.i18n.ListFormatSymbols_kkj_CM, goog.labs.i18n.ListFormatSymbols_kl, goog.labs.i18n.ListFormatSymbols_kl_GL, goog.labs.i18n.ListFormatSymbols_kln, goog.labs.i18n.ListFormatSymbols_kln_KE, goog.labs.i18n.ListFormatSymbols_km_KH, goog.labs.i18n.ListFormatSymbols_kn_IN, goog.labs.i18n.ListFormatSymbols_ko_KP, goog.labs.i18n.ListFormatSymbols_ko_KR, goog.labs.i18n.ListFormatSymbols_kok, goog.labs.i18n.ListFormatSymbols_kok_IN, goog.labs.i18n.ListFormatSymbols_ks, goog.labs.i18n.ListFormatSymbols_ks_IN, goog.labs.i18n.ListFormatSymbols_ksb, goog.labs.i18n.ListFormatSymbols_ksb_TZ, goog.labs.i18n.ListFormatSymbols_ksf, goog.labs.i18n.ListFormatSymbols_ksf_CM, goog.labs.i18n.ListFormatSymbols_ksh, goog.labs.i18n.ListFormatSymbols_ksh_DE, goog.labs.i18n.ListFormatSymbols_kw, goog.labs.i18n.ListFormatSymbols_kw_GB, goog.labs.i18n.ListFormatSymbols_ky_KG, goog.labs.i18n.ListFormatSymbols_lag, goog.labs.i18n.ListFormatSymbols_lag_TZ, goog.labs.i18n.ListFormatSymbols_lb, goog.labs.i18n.ListFormatSymbols_lb_LU, goog.labs.i18n.ListFormatSymbols_lg, goog.labs.i18n.ListFormatSymbols_lg_UG, goog.labs.i18n.ListFormatSymbols_lkt, goog.labs.i18n.ListFormatSymbols_lkt_US, goog.labs.i18n.ListFormatSymbols_ln_AO, goog.labs.i18n.ListFormatSymbols_ln_CD, goog.labs.i18n.ListFormatSymbols_ln_CF, goog.labs.i18n.ListFormatSymbols_ln_CG, goog.labs.i18n.ListFormatSymbols_lo_LA, goog.labs.i18n.ListFormatSymbols_lrc, goog.labs.i18n.ListFormatSymbols_lrc_IQ, goog.labs.i18n.ListFormatSymbols_lrc_IR, goog.labs.i18n.ListFormatSymbols_lt_LT, goog.labs.i18n.ListFormatSymbols_lu, goog.labs.i18n.ListFormatSymbols_lu_CD, goog.labs.i18n.ListFormatSymbols_luo, goog.labs.i18n.ListFormatSymbols_luo_KE, goog.labs.i18n.ListFormatSymbols_luy, goog.labs.i18n.ListFormatSymbols_luy_KE, goog.labs.i18n.ListFormatSymbols_lv_LV, goog.labs.i18n.ListFormatSymbols_mas, goog.labs.i18n.ListFormatSymbols_mas_KE, goog.labs.i18n.ListFormatSymbols_mas_TZ, goog.labs.i18n.ListFormatSymbols_mer, goog.labs.i18n.ListFormatSymbols_mer_KE, goog.labs.i18n.ListFormatSymbols_mfe, goog.labs.i18n.ListFormatSymbols_mfe_MU, goog.labs.i18n.ListFormatSymbols_mg, goog.labs.i18n.ListFormatSymbols_mg_MG, goog.labs.i18n.ListFormatSymbols_mgh, goog.labs.i18n.ListFormatSymbols_mgh_MZ, goog.labs.i18n.ListFormatSymbols_mgo, goog.labs.i18n.ListFormatSymbols_mgo_CM, goog.labs.i18n.ListFormatSymbols_mk_MK, goog.labs.i18n.ListFormatSymbols_ml_IN, goog.labs.i18n.ListFormatSymbols_mn_MN, goog.labs.i18n.ListFormatSymbols_mr_IN, goog.labs.i18n.ListFormatSymbols_ms_BN, goog.labs.i18n.ListFormatSymbols_ms_MY, goog.labs.i18n.ListFormatSymbols_ms_SG, goog.labs.i18n.ListFormatSymbols_mt_MT, goog.labs.i18n.ListFormatSymbols_mua, goog.labs.i18n.ListFormatSymbols_mua_CM, goog.labs.i18n.ListFormatSymbols_my_MM, goog.labs.i18n.ListFormatSymbols_mzn, goog.labs.i18n.ListFormatSymbols_mzn_IR, goog.labs.i18n.ListFormatSymbols_naq, goog.labs.i18n.ListFormatSymbols_naq_NA, goog.labs.i18n.ListFormatSymbols_nb_NO, goog.labs.i18n.ListFormatSymbols_nb_SJ, goog.labs.i18n.ListFormatSymbols_nd, goog.labs.i18n.ListFormatSymbols_nd_ZW, goog.labs.i18n.ListFormatSymbols_ne_IN, goog.labs.i18n.ListFormatSymbols_ne_NP, goog.labs.i18n.ListFormatSymbols_nl_AW, goog.labs.i18n.ListFormatSymbols_nl_BE, goog.labs.i18n.ListFormatSymbols_nl_BQ, goog.labs.i18n.ListFormatSymbols_nl_CW, goog.labs.i18n.ListFormatSymbols_nl_NL, goog.labs.i18n.ListFormatSymbols_nl_SR, goog.labs.i18n.ListFormatSymbols_nl_SX, goog.labs.i18n.ListFormatSymbols_nmg, goog.labs.i18n.ListFormatSymbols_nmg_CM, goog.labs.i18n.ListFormatSymbols_nn, goog.labs.i18n.ListFormatSymbols_nn_NO, goog.labs.i18n.ListFormatSymbols_nnh, goog.labs.i18n.ListFormatSymbols_nnh_CM, goog.labs.i18n.ListFormatSymbols_nus, goog.labs.i18n.ListFormatSymbols_nus_SS, goog.labs.i18n.ListFormatSymbols_nyn, goog.labs.i18n.ListFormatSymbols_nyn_UG, goog.labs.i18n.ListFormatSymbols_om, goog.labs.i18n.ListFormatSymbols_om_ET, goog.labs.i18n.ListFormatSymbols_om_KE, goog.labs.i18n.ListFormatSymbols_or_IN, goog.labs.i18n.ListFormatSymbols_os, goog.labs.i18n.ListFormatSymbols_os_GE, goog.labs.i18n.ListFormatSymbols_os_RU, goog.labs.i18n.ListFormatSymbols_pa_Arab, goog.labs.i18n.ListFormatSymbols_pa_Arab_PK, goog.labs.i18n.ListFormatSymbols_pa_Guru, goog.labs.i18n.ListFormatSymbols_pa_Guru_IN, goog.labs.i18n.ListFormatSymbols_pl_PL, goog.labs.i18n.ListFormatSymbols_ps, goog.labs.i18n.ListFormatSymbols_ps_AF, goog.labs.i18n.ListFormatSymbols_pt_AO, goog.labs.i18n.ListFormatSymbols_pt_CV, goog.labs.i18n.ListFormatSymbols_pt_GW, goog.labs.i18n.ListFormatSymbols_pt_MO, goog.labs.i18n.ListFormatSymbols_pt_MZ, goog.labs.i18n.ListFormatSymbols_pt_ST, goog.labs.i18n.ListFormatSymbols_pt_TL, goog.labs.i18n.ListFormatSymbols_qu, goog.labs.i18n.ListFormatSymbols_qu_BO, goog.labs.i18n.ListFormatSymbols_qu_EC, goog.labs.i18n.ListFormatSymbols_qu_PE, goog.labs.i18n.ListFormatSymbols_rm, goog.labs.i18n.ListFormatSymbols_rm_CH, goog.labs.i18n.ListFormatSymbols_rn, goog.labs.i18n.ListFormatSymbols_rn_BI, goog.labs.i18n.ListFormatSymbols_ro_MD, goog.labs.i18n.ListFormatSymbols_ro_RO, goog.labs.i18n.ListFormatSymbols_rof, goog.labs.i18n.ListFormatSymbols_rof_TZ, goog.labs.i18n.ListFormatSymbols_ru_BY, goog.labs.i18n.ListFormatSymbols_ru_KG, goog.labs.i18n.ListFormatSymbols_ru_KZ, goog.labs.i18n.ListFormatSymbols_ru_MD, goog.labs.i18n.ListFormatSymbols_ru_RU, goog.labs.i18n.ListFormatSymbols_ru_UA, goog.labs.i18n.ListFormatSymbols_rw, goog.labs.i18n.ListFormatSymbols_rw_RW, goog.labs.i18n.ListFormatSymbols_rwk, goog.labs.i18n.ListFormatSymbols_rwk_TZ, goog.labs.i18n.ListFormatSymbols_sah, goog.labs.i18n.ListFormatSymbols_sah_RU, goog.labs.i18n.ListFormatSymbols_saq, goog.labs.i18n.ListFormatSymbols_saq_KE, goog.labs.i18n.ListFormatSymbols_sbp, goog.labs.i18n.ListFormatSymbols_sbp_TZ, goog.labs.i18n.ListFormatSymbols_se, goog.labs.i18n.ListFormatSymbols_se_FI, goog.labs.i18n.ListFormatSymbols_se_NO, goog.labs.i18n.ListFormatSymbols_se_SE, goog.labs.i18n.ListFormatSymbols_seh, goog.labs.i18n.ListFormatSymbols_seh_MZ, goog.labs.i18n.ListFormatSymbols_ses, goog.labs.i18n.ListFormatSymbols_ses_ML, goog.labs.i18n.ListFormatSymbols_sg, goog.labs.i18n.ListFormatSymbols_sg_CF, goog.labs.i18n.ListFormatSymbols_shi, goog.labs.i18n.ListFormatSymbols_shi_Latn, goog.labs.i18n.ListFormatSymbols_shi_Latn_MA, goog.labs.i18n.ListFormatSymbols_shi_Tfng, goog.labs.i18n.ListFormatSymbols_shi_Tfng_MA, goog.labs.i18n.ListFormatSymbols_si_LK, goog.labs.i18n.ListFormatSymbols_sk_SK, goog.labs.i18n.ListFormatSymbols_sl_SI, goog.labs.i18n.ListFormatSymbols_smn, goog.labs.i18n.ListFormatSymbols_smn_FI, goog.labs.i18n.ListFormatSymbols_sn, goog.labs.i18n.ListFormatSymbols_sn_ZW, goog.labs.i18n.ListFormatSymbols_so, goog.labs.i18n.ListFormatSymbols_so_DJ, goog.labs.i18n.ListFormatSymbols_so_ET, goog.labs.i18n.ListFormatSymbols_so_KE, goog.labs.i18n.ListFormatSymbols_so_SO, goog.labs.i18n.ListFormatSymbols_sq_AL, goog.labs.i18n.ListFormatSymbols_sq_MK, goog.labs.i18n.ListFormatSymbols_sq_XK, goog.labs.i18n.ListFormatSymbols_sr_Cyrl, goog.labs.i18n.ListFormatSymbols_sr_Cyrl_BA, goog.labs.i18n.ListFormatSymbols_sr_Cyrl_ME, goog.labs.i18n.ListFormatSymbols_sr_Cyrl_RS, goog.labs.i18n.ListFormatSymbols_sr_Cyrl_XK, goog.labs.i18n.ListFormatSymbols_sr_Latn_BA, goog.labs.i18n.ListFormatSymbols_sr_Latn_ME, goog.labs.i18n.ListFormatSymbols_sr_Latn_RS, goog.labs.i18n.ListFormatSymbols_sr_Latn_XK, goog.labs.i18n.ListFormatSymbols_sv_AX, goog.labs.i18n.ListFormatSymbols_sv_FI, goog.labs.i18n.ListFormatSymbols_sv_SE, goog.labs.i18n.ListFormatSymbols_sw_CD, goog.labs.i18n.ListFormatSymbols_sw_KE, goog.labs.i18n.ListFormatSymbols_sw_TZ, goog.labs.i18n.ListFormatSymbols_sw_UG, goog.labs.i18n.ListFormatSymbols_ta_IN, goog.labs.i18n.ListFormatSymbols_ta_LK, goog.labs.i18n.ListFormatSymbols_ta_MY, goog.labs.i18n.ListFormatSymbols_ta_SG, goog.labs.i18n.ListFormatSymbols_te_IN, goog.labs.i18n.ListFormatSymbols_teo, goog.labs.i18n.ListFormatSymbols_teo_KE, goog.labs.i18n.ListFormatSymbols_teo_UG, goog.labs.i18n.ListFormatSymbols_th_TH, goog.labs.i18n.ListFormatSymbols_ti, goog.labs.i18n.ListFormatSymbols_ti_ER, goog.labs.i18n.ListFormatSymbols_ti_ET, goog.labs.i18n.ListFormatSymbols_to, goog.labs.i18n.ListFormatSymbols_to_TO, goog.labs.i18n.ListFormatSymbols_tr_CY, goog.labs.i18n.ListFormatSymbols_tr_TR, goog.labs.i18n.ListFormatSymbols_twq, goog.labs.i18n.ListFormatSymbols_twq_NE, goog.labs.i18n.ListFormatSymbols_tzm, goog.labs.i18n.ListFormatSymbols_tzm_MA, goog.labs.i18n.ListFormatSymbols_ug, goog.labs.i18n.ListFormatSymbols_ug_CN, goog.labs.i18n.ListFormatSymbols_uk_UA, goog.labs.i18n.ListFormatSymbols_ur_IN, goog.labs.i18n.ListFormatSymbols_ur_PK, goog.labs.i18n.ListFormatSymbols_uz_Arab, goog.labs.i18n.ListFormatSymbols_uz_Arab_AF, goog.labs.i18n.ListFormatSymbols_uz_Cyrl, goog.labs.i18n.ListFormatSymbols_uz_Cyrl_UZ, goog.labs.i18n.ListFormatSymbols_uz_Latn, goog.labs.i18n.ListFormatSymbols_uz_Latn_UZ, goog.labs.i18n.ListFormatSymbols_vai, goog.labs.i18n.ListFormatSymbols_vai_Latn, goog.labs.i18n.ListFormatSymbols_vai_Latn_LR, goog.labs.i18n.ListFormatSymbols_vai_Vaii, goog.labs.i18n.ListFormatSymbols_vai_Vaii_LR, goog.labs.i18n.ListFormatSymbols_vi_VN, goog.labs.i18n.ListFormatSymbols_vun, goog.labs.i18n.ListFormatSymbols_vun_TZ, goog.labs.i18n.ListFormatSymbols_wae, goog.labs.i18n.ListFormatSymbols_wae_CH, goog.labs.i18n.ListFormatSymbols_xog, goog.labs.i18n.ListFormatSymbols_xog_UG, goog.labs.i18n.ListFormatSymbols_yav, goog.labs.i18n.ListFormatSymbols_yav_CM, goog.labs.i18n.ListFormatSymbols_yi, goog.labs.i18n.ListFormatSymbols_yi_001, goog.labs.i18n.ListFormatSymbols_yo, goog.labs.i18n.ListFormatSymbols_yo_BJ, goog.labs.i18n.ListFormatSymbols_yo_NG, goog.labs.i18n.ListFormatSymbols_yue, goog.labs.i18n.ListFormatSymbols_yue_HK, goog.labs.i18n.ListFormatSymbols_zgh, goog.labs.i18n.ListFormatSymbols_zgh_MA, goog.labs.i18n.ListFormatSymbols_zh_Hans, goog.labs.i18n.ListFormatSymbols_zh_Hans_CN, goog.labs.i18n.ListFormatSymbols_zh_Hans_HK, goog.labs.i18n.ListFormatSymbols_zh_Hans_MO, goog.labs.i18n.ListFormatSymbols_zh_Hans_SG, goog.labs.i18n.ListFormatSymbols_zh_Hant, goog.labs.i18n.ListFormatSymbols_zh_Hant_HK, goog.labs.i18n.ListFormatSymbols_zh_Hant_MO, goog.labs.i18n.ListFormatSymbols_zh_Hant_TW, goog.labs.i18n.ListFormatSymbols_zu_ZA] from input ../closure-library/closure/goog/labs/i18n/listsymbolsext.js
//!! Processing provides [goog.locale.countries] from input ../closure-library/closure/goog/locale/countries.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/webkit_dom.js
//!! Processing provides [goog.ui.TabBarRenderer] from input ../closure-library/closure/goog/ui/tabbarrenderer.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_dom1.js
//!! Processing provides [goog.i18n.CharPickerData] from input ../closure-library/closure/goog/i18n/charpickerdata.js
//!! Processing provides [goog.net.XmlHttpFactory] from input ../closure-library/closure/goog/net/xmlhttpfactory.js
//!! Processing provides [goog.structs.SimplePool] from input ../closure-library/closure/goog/structs/simplepool.js
//!! Processing provides [goog.i18n.uCharNames] from input ../closure-library/closure/goog/i18n/ucharnames.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/google.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_indexeddb.js
//!! Processing provides [goog.crypt.Cbc] from input ../closure-library/closure/goog/crypt/cbc.js
//!! Processing provides [goog.graphics.CanvasGraphics] from input ../closure-library/closure/goog/graphics/canvasgraphics.js
//!! Processing provides [goog.crypt.BlockCipher] from input ../closure-library/closure/goog/crypt/blockcipher.js
//!! Processing provides [goog.json.HybridJsonProcessor] from input ../closure-library/closure/goog/json/hybridjsonprocessor.js
//!! Processing provides [] from input ../closure-compiler/externs/es6.js
//!! Processing provides [goog.dom.SavedRange] from input ../closure-library/closure/goog/dom/savedrange.js
//!! Processing provides [goog.i18n.currencyCodeMap, goog.i18n.currencyCodeMapTier2] from input ../closure-library/closure/goog/i18n/currencycodemap.js
//!! Processing provides [goog.debug.FpsDisplay] from input ../closure-library/closure/goog/debug/fpsdisplay.js
//!! Processing provides [goog.math.AffineTransform] from input ../closure-library/closure/goog/math/affinetransform.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_permissions.js
//!! Processing provides [goog.debug.EntryPointMonitor, goog.debug.entryPointRegistry] from input ../closure-library/closure/goog/debug/entrypointregistry.js
//!! Processing provides [goog.labs.structs.Map] from input ../closure-library/closure/goog/labs/structs/map.js
//!! Processing provides [goog.events.MouseWheelEvent, goog.events.MouseWheelHandler, goog.events.MouseWheelHandler.EventType] from input ../closure-library/closure/goog/events/mousewheelhandler.js
//!! Processing provides [goog.events.KeyEvent, goog.events.KeyHandler, goog.events.KeyHandler.EventType] from input ../closure-library/closure/goog/events/keyhandler.js
//!! Processing provides [goog.messaging.AbstractChannel] from input ../closure-library/closure/goog/messaging/abstractchannel.js
//!! Processing provides [goog.string, goog.string.Unicode] from input ../closure-library/closure/goog/string/string.js
//!! Processing provides [goog.graphics.TextElement] from input ../closure-library/closure/goog/graphics/textelement.js
//!! Processing provides [goog.testing.events, goog.testing.events.Event] from input ../closure-library/closure/goog/testing/events/events.js
//!! Processing provides [goog.events.KeyCodes] from input ../closure-library/closure/goog/events/keycodes.js
//!! Processing provides [goog.Disposable, goog.dispose, goog.disposeAll] from input ../closure-library/closure/goog/disposable/disposable.js
//!! Processing provides [goog.a11y.aria] from input ../closure-library/closure/goog/a11y/aria/aria.js
//!! Processing provides [goog.net.WrapperXmlHttpFactory] from input ../closure-library/closure/goog/net/wrapperxmlhttpfactory.js
//!! Processing provides [goog.ui.Container, goog.ui.Container.EventType, goog.ui.Container.Orientation] from input ../closure-library/closure/goog/ui/container.js
//!! Processing provides [goog.math.Vec3] from input ../closure-library/closure/goog/math/vec3.js
//!! Processing provides [goog.storage.mechanism.IterableMechanism] from input ../closure-library/closure/goog/storage/mechanism/iterablemechanism.js
//!! Processing provides [goog.fx.DragScrollSupport] from input ../closure-library/closure/goog/fx/dragscrollsupport.js
//!! Processing provides [goog.testing.MockInterface] from input ../closure-library/closure/goog/testing/mockinterface.js
//!! Processing provides [goog.graphics.Stroke] from input ../closure-library/closure/goog/graphics/stroke.js
//!! Processing provides [goog.disposable.IDisposable] from input ../closure-library/closure/goog/disposable/idisposable.js
//!! Processing provides [goog.events.FocusHandler, goog.events.FocusHandler.EventType] from input ../closure-library/closure/goog/events/focushandler.js
//!! Processing provides [goog.testing.TestCase, goog.testing.TestCase.Error, goog.testing.TestCase.Order, goog.testing.TestCase.Result, goog.testing.TestCase.Test] from input ../closure-library/closure/goog/testing/testcase.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_range.js
//!! Processing provides [goog.async.run] from input ../closure-library/closure/goog/async/run.js
//!! Processing provides [goog.i18n.pluralRules] from input ../closure-library/closure/goog/i18n/pluralrules.js
//!! Processing provides [goog.graphics.ext.Element] from input ../closure-library/closure/goog/graphics/ext/element.js
//!! Processing provides [goog.style.bidi] from input ../closure-library/closure/goog/style/bidi.js
//!! Processing provides [goog.editor.plugins.SpacesTabHandler] from input ../closure-library/closure/goog/editor/plugins/spacestabhandler.js
//!! Processing provides [goog.locale.timeZoneDetection] from input ../closure-library/closure/goog/locale/timezonedetection.js
//!! Processing provides [goog.messaging.PortCaller] from input ../closure-library/closure/goog/messaging/portcaller.js
//!! Processing provides [goog.graphics] from input ../closure-library/closure/goog/graphics/graphics.js
//!! Processing provides [goog.fx.AnimationParallelQueue, goog.fx.AnimationQueue, goog.fx.AnimationSerialQueue] from input ../closure-library/closure/goog/fx/animationqueue.js
//!! Processing provides [goog.ui.ButtonRenderer] from input ../closure-library/closure/goog/ui/buttonrenderer.js
//!! Processing provides [goog.ds.Expr] from input ../closure-library/closure/goog/datasource/expr.js
//!! Processing provides [goog.testing.MockControl] from input ../closure-library/closure/goog/testing/mockcontrol.js
//!! Processing provides [goog.dom.pattern.Matcher] from input ../closure-library/closure/goog/dom/pattern/matcher.js
//!! Processing provides [goog.crypt.Sha512] from input ../closure-library/closure/goog/crypt/sha512.js
//!! Processing provides [goog.math.Coordinate3] from input ../closure-library/closure/goog/math/coordinate3.js
//!! Processing provides [goog.labs.useragent.verifier] from input ../closure-library/closure/goog/labs/useragent/verifier.js
//!! Processing provides [goog.debug.RelativeTimeProvider] from input ../closure-library/closure/goog/debug/relativetimeprovider.js
//!! Processing provides [goog.date, goog.date.Date, goog.date.DateTime, goog.date.Interval, goog.date.month, goog.date.weekDay] from input ../closure-library/closure/goog/date/date.js
//!! Processing provides [goog.userAgent.product.isVersion] from input ../closure-library/closure/goog/useragent/product_isversion.js
//!! Processing provides [goog.math.Integer] from input ../closure-library/closure/goog/math/integer.js
//!! Processing provides [goog.labs.pubsub.BroadcastPubSub] from input ../closure-library/closure/goog/labs/pubsub/broadcastpubsub.js
//!! Processing provides [goog.graphics.LinearGradient] from input ../closure-library/closure/goog/graphics/lineargradient.js
//!! Processing provides [goog.html.SafeScript] from input ../closure-library/closure/goog/html/safescript.js
//!! Processing provides [goog.fs] from input ../closure-library/closure/goog/fs/fs.js
//!! Processing provides [goog.graphics.ext.Rectangle] from input ../closure-library/closure/goog/graphics/ext/rectangle.js
//!! Processing provides [goog.string.newlines, goog.string.newlines.Line] from input ../closure-library/closure/goog/string/newlines.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/iphone.js
//!! Processing provides [goog.style] from input ../closure-library/closure/goog/style/style.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/ie_dom.js
//!! Processing provides [goog.graphics.ext.Group] from input ../closure-library/closure/goog/graphics/ext/group.js
//!! Processing provides [goog.testing.ObjectPropertyString] from input ../closure-library/closure/goog/testing/objectpropertystring.js
//!! Processing provides [goog.ui.Control] from input ../closure-library/closure/goog/ui/control.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/gecko_css.js
//!! Processing provides [goog.ui.TabBar, goog.ui.TabBar.Location] from input ../closure-library/closure/goog/ui/tabbar.js
//!! Processing provides [goog.i18n.DateTimeSymbolsExt, goog.i18n.DateTimeSymbols_af_NA, goog.i18n.DateTimeSymbols_af_ZA, goog.i18n.DateTimeSymbols_agq, goog.i18n.DateTimeSymbols_agq_CM, goog.i18n.DateTimeSymbols_ak, goog.i18n.DateTimeSymbols_ak_GH, goog.i18n.DateTimeSymbols_am_ET, goog.i18n.DateTimeSymbols_ar_001, goog.i18n.DateTimeSymbols_ar_AE, goog.i18n.DateTimeSymbols_ar_BH, goog.i18n.DateTimeSymbols_ar_DJ, goog.i18n.DateTimeSymbols_ar_DZ, goog.i18n.DateTimeSymbols_ar_EG, goog.i18n.DateTimeSymbols_ar_EH, goog.i18n.DateTimeSymbols_ar_ER, goog.i18n.DateTimeSymbols_ar_IL, goog.i18n.DateTimeSymbols_ar_IQ, goog.i18n.DateTimeSymbols_ar_JO, goog.i18n.DateTimeSymbols_ar_KM, goog.i18n.DateTimeSymbols_ar_KW, goog.i18n.DateTimeSymbols_ar_LB, goog.i18n.DateTimeSymbols_ar_LY, goog.i18n.DateTimeSymbols_ar_MA, goog.i18n.DateTimeSymbols_ar_MR, goog.i18n.DateTimeSymbols_ar_OM, goog.i18n.DateTimeSymbols_ar_PS, goog.i18n.DateTimeSymbols_ar_QA, goog.i18n.DateTimeSymbols_ar_SA, goog.i18n.DateTimeSymbols_ar_SD, goog.i18n.DateTimeSymbols_ar_SO, goog.i18n.DateTimeSymbols_ar_SS, goog.i18n.DateTimeSymbols_ar_SY, goog.i18n.DateTimeSymbols_ar_TD, goog.i18n.DateTimeSymbols_ar_TN, goog.i18n.DateTimeSymbols_ar_XB, goog.i18n.DateTimeSymbols_ar_YE, goog.i18n.DateTimeSymbols_as, goog.i18n.DateTimeSymbols_as_IN, goog.i18n.DateTimeSymbols_asa, goog.i18n.DateTimeSymbols_asa_TZ, goog.i18n.DateTimeSymbols_ast, goog.i18n.DateTimeSymbols_ast_ES, goog.i18n.DateTimeSymbols_az_Cyrl, goog.i18n.DateTimeSymbols_az_Cyrl_AZ, goog.i18n.DateTimeSymbols_az_Latn, goog.i18n.DateTimeSymbols_az_Latn_AZ, goog.i18n.DateTimeSymbols_bas, goog.i18n.DateTimeSymbols_bas_CM, goog.i18n.DateTimeSymbols_be_BY, goog.i18n.DateTimeSymbols_bem, goog.i18n.DateTimeSymbols_bem_ZM, goog.i18n.DateTimeSymbols_bez, goog.i18n.DateTimeSymbols_bez_TZ, goog.i18n.DateTimeSymbols_bg_BG, goog.i18n.DateTimeSymbols_bm, goog.i18n.DateTimeSymbols_bm_ML, goog.i18n.DateTimeSymbols_bn_BD, goog.i18n.DateTimeSymbols_bn_IN, goog.i18n.DateTimeSymbols_bo, goog.i18n.DateTimeSymbols_bo_CN, goog.i18n.DateTimeSymbols_bo_IN, goog.i18n.DateTimeSymbols_br_FR, goog.i18n.DateTimeSymbols_brx, goog.i18n.DateTimeSymbols_brx_IN, goog.i18n.DateTimeSymbols_bs_Cyrl, goog.i18n.DateTimeSymbols_bs_Cyrl_BA, goog.i18n.DateTimeSymbols_bs_Latn, goog.i18n.DateTimeSymbols_bs_Latn_BA, goog.i18n.DateTimeSymbols_ca_AD, goog.i18n.DateTimeSymbols_ca_ES, goog.i18n.DateTimeSymbols_ca_ES_VALENCIA, goog.i18n.DateTimeSymbols_ca_FR, goog.i18n.DateTimeSymbols_ca_IT, goog.i18n.DateTimeSymbols_ce, goog.i18n.DateTimeSymbols_ce_RU, goog.i18n.DateTimeSymbols_cgg, goog.i18n.DateTimeSymbols_cgg_UG, goog.i18n.DateTimeSymbols_chr_US, goog.i18n.DateTimeSymbols_ckb, goog.i18n.DateTimeSymbols_ckb_Arab, goog.i18n.DateTimeSymbols_ckb_Arab_IQ, goog.i18n.DateTimeSymbols_ckb_Arab_IR, goog.i18n.DateTimeSymbols_ckb_IQ, goog.i18n.DateTimeSymbols_ckb_IR, goog.i18n.DateTimeSymbols_ckb_Latn, goog.i18n.DateTimeSymbols_ckb_Latn_IQ, goog.i18n.DateTimeSymbols_cs_CZ, goog.i18n.DateTimeSymbols_cu, goog.i18n.DateTimeSymbols_cu_RU, goog.i18n.DateTimeSymbols_cy_GB, goog.i18n.DateTimeSymbols_da_DK, goog.i18n.DateTimeSymbols_da_GL, goog.i18n.DateTimeSymbols_dav, goog.i18n.DateTimeSymbols_dav_KE, goog.i18n.DateTimeSymbols_de_BE, goog.i18n.DateTimeSymbols_de_DE, goog.i18n.DateTimeSymbols_de_LI, goog.i18n.DateTimeSymbols_de_LU, goog.i18n.DateTimeSymbols_dje, goog.i18n.DateTimeSymbols_dje_NE, goog.i18n.DateTimeSymbols_dsb, goog.i18n.DateTimeSymbols_dsb_DE, goog.i18n.DateTimeSymbols_dua, goog.i18n.DateTimeSymbols_dua_CM, goog.i18n.DateTimeSymbols_dyo, goog.i18n.DateTimeSymbols_dyo_SN, goog.i18n.DateTimeSymbols_dz, goog.i18n.DateTimeSymbols_dz_BT, goog.i18n.DateTimeSymbols_ebu, goog.i18n.DateTimeSymbols_ebu_KE, goog.i18n.DateTimeSymbols_ee, goog.i18n.DateTimeSymbols_ee_GH, goog.i18n.DateTimeSymbols_ee_TG, goog.i18n.DateTimeSymbols_el_CY, goog.i18n.DateTimeSymbols_el_GR, goog.i18n.DateTimeSymbols_en_001, goog.i18n.DateTimeSymbols_en_150, goog.i18n.DateTimeSymbols_en_AG, goog.i18n.DateTimeSymbols_en_AI, goog.i18n.DateTimeSymbols_en_AS, goog.i18n.DateTimeSymbols_en_AT, goog.i18n.DateTimeSymbols_en_BB, goog.i18n.DateTimeSymbols_en_BE, goog.i18n.DateTimeSymbols_en_BI, goog.i18n.DateTimeSymbols_en_BM, goog.i18n.DateTimeSymbols_en_BS, goog.i18n.DateTimeSymbols_en_BW, goog.i18n.DateTimeSymbols_en_BZ, goog.i18n.DateTimeSymbols_en_CC, goog.i18n.DateTimeSymbols_en_CH, goog.i18n.DateTimeSymbols_en_CK, goog.i18n.DateTimeSymbols_en_CM, goog.i18n.DateTimeSymbols_en_CX, goog.i18n.DateTimeSymbols_en_CY, goog.i18n.DateTimeSymbols_en_DE, goog.i18n.DateTimeSymbols_en_DG, goog.i18n.DateTimeSymbols_en_DK, goog.i18n.DateTimeSymbols_en_DM, goog.i18n.DateTimeSymbols_en_ER, goog.i18n.DateTimeSymbols_en_FI, goog.i18n.DateTimeSymbols_en_FJ, goog.i18n.DateTimeSymbols_en_FK, goog.i18n.DateTimeSymbols_en_FM, goog.i18n.DateTimeSymbols_en_GD, goog.i18n.DateTimeSymbols_en_GG, goog.i18n.DateTimeSymbols_en_GH, goog.i18n.DateTimeSymbols_en_GI, goog.i18n.DateTimeSymbols_en_GM, goog.i18n.DateTimeSymbols_en_GU, goog.i18n.DateTimeSymbols_en_GY, goog.i18n.DateTimeSymbols_en_HK, goog.i18n.DateTimeSymbols_en_IL, goog.i18n.DateTimeSymbols_en_IM, goog.i18n.DateTimeSymbols_en_IO, goog.i18n.DateTimeSymbols_en_JE, goog.i18n.DateTimeSymbols_en_JM, goog.i18n.DateTimeSymbols_en_KE, goog.i18n.DateTimeSymbols_en_KI, goog.i18n.DateTimeSymbols_en_KN, goog.i18n.DateTimeSymbols_en_KY, goog.i18n.DateTimeSymbols_en_LC, goog.i18n.DateTimeSymbols_en_LR, goog.i18n.DateTimeSymbols_en_LS, goog.i18n.DateTimeSymbols_en_MG, goog.i18n.DateTimeSymbols_en_MH, goog.i18n.DateTimeSymbols_en_MO, goog.i18n.DateTimeSymbols_en_MP, goog.i18n.DateTimeSymbols_en_MS, goog.i18n.DateTimeSymbols_en_MT, goog.i18n.DateTimeSymbols_en_MU, goog.i18n.DateTimeSymbols_en_MW, goog.i18n.DateTimeSymbols_en_MY, goog.i18n.DateTimeSymbols_en_NA, goog.i18n.DateTimeSymbols_en_NF, goog.i18n.DateTimeSymbols_en_NG, goog.i18n.DateTimeSymbols_en_NL, goog.i18n.DateTimeSymbols_en_NR, goog.i18n.DateTimeSymbols_en_NU, goog.i18n.DateTimeSymbols_en_NZ, goog.i18n.DateTimeSymbols_en_PG, goog.i18n.DateTimeSymbols_en_PH, goog.i18n.DateTimeSymbols_en_PK, goog.i18n.DateTimeSymbols_en_PN, goog.i18n.DateTimeSymbols_en_PR, goog.i18n.DateTimeSymbols_en_PW, goog.i18n.DateTimeSymbols_en_RW, goog.i18n.DateTimeSymbols_en_SB, goog.i18n.DateTimeSymbols_en_SC, goog.i18n.DateTimeSymbols_en_SD, goog.i18n.DateTimeSymbols_en_SE, goog.i18n.DateTimeSymbols_en_SH, goog.i18n.DateTimeSymbols_en_SI, goog.i18n.DateTimeSymbols_en_SL, goog.i18n.DateTimeSymbols_en_SS, goog.i18n.DateTimeSymbols_en_SX, goog.i18n.DateTimeSymbols_en_SZ, goog.i18n.DateTimeSymbols_en_TC, goog.i18n.DateTimeSymbols_en_TK, goog.i18n.DateTimeSymbols_en_TO, goog.i18n.DateTimeSymbols_en_TT, goog.i18n.DateTimeSymbols_en_TV, goog.i18n.DateTimeSymbols_en_TZ, goog.i18n.DateTimeSymbols_en_UG, goog.i18n.DateTimeSymbols_en_UM, goog.i18n.DateTimeSymbols_en_VC, goog.i18n.DateTimeSymbols_en_VG, goog.i18n.DateTimeSymbols_en_VI, goog.i18n.DateTimeSymbols_en_VU, goog.i18n.DateTimeSymbols_en_WS, goog.i18n.DateTimeSymbols_en_XA, goog.i18n.DateTimeSymbols_en_ZM, goog.i18n.DateTimeSymbols_en_ZW, goog.i18n.DateTimeSymbols_eo, goog.i18n.DateTimeSymbols_eo_001, goog.i18n.DateTimeSymbols_es_AR, goog.i18n.DateTimeSymbols_es_BO, goog.i18n.DateTimeSymbols_es_BR, goog.i18n.DateTimeSymbols_es_CL, goog.i18n.DateTimeSymbols_es_CO, goog.i18n.DateTimeSymbols_es_CR, goog.i18n.DateTimeSymbols_es_CU, goog.i18n.DateTimeSymbols_es_DO, goog.i18n.DateTimeSymbols_es_EA, goog.i18n.DateTimeSymbols_es_EC, goog.i18n.DateTimeSymbols_es_GQ, goog.i18n.DateTimeSymbols_es_GT, goog.i18n.DateTimeSymbols_es_HN, goog.i18n.DateTimeSymbols_es_IC, goog.i18n.DateTimeSymbols_es_NI, goog.i18n.DateTimeSymbols_es_PA, goog.i18n.DateTimeSymbols_es_PE, goog.i18n.DateTimeSymbols_es_PH, goog.i18n.DateTimeSymbols_es_PR, goog.i18n.DateTimeSymbols_es_PY, goog.i18n.DateTimeSymbols_es_SV, goog.i18n.DateTimeSymbols_es_UY, goog.i18n.DateTimeSymbols_es_VE, goog.i18n.DateTimeSymbols_et_EE, goog.i18n.DateTimeSymbols_eu_ES, goog.i18n.DateTimeSymbols_ewo, goog.i18n.DateTimeSymbols_ewo_CM, goog.i18n.DateTimeSymbols_fa_AF, goog.i18n.DateTimeSymbols_fa_IR, goog.i18n.DateTimeSymbols_ff, goog.i18n.DateTimeSymbols_ff_CM, goog.i18n.DateTimeSymbols_ff_GN, goog.i18n.DateTimeSymbols_ff_MR, goog.i18n.DateTimeSymbols_ff_SN, goog.i18n.DateTimeSymbols_fi_FI, goog.i18n.DateTimeSymbols_fil_PH, goog.i18n.DateTimeSymbols_fo, goog.i18n.DateTimeSymbols_fo_DK, goog.i18n.DateTimeSymbols_fo_FO, goog.i18n.DateTimeSymbols_fr_BE, goog.i18n.DateTimeSymbols_fr_BF, goog.i18n.DateTimeSymbols_fr_BI, goog.i18n.DateTimeSymbols_fr_BJ, goog.i18n.DateTimeSymbols_fr_BL, goog.i18n.DateTimeSymbols_fr_CD, goog.i18n.DateTimeSymbols_fr_CF, goog.i18n.DateTimeSymbols_fr_CG, goog.i18n.DateTimeSymbols_fr_CH, goog.i18n.DateTimeSymbols_fr_CI, goog.i18n.DateTimeSymbols_fr_CM, goog.i18n.DateTimeSymbols_fr_DJ, goog.i18n.DateTimeSymbols_fr_DZ, goog.i18n.DateTimeSymbols_fr_FR, goog.i18n.DateTimeSymbols_fr_GA, goog.i18n.DateTimeSymbols_fr_GF, goog.i18n.DateTimeSymbols_fr_GN, goog.i18n.DateTimeSymbols_fr_GP, goog.i18n.DateTimeSymbols_fr_GQ, goog.i18n.DateTimeSymbols_fr_HT, goog.i18n.DateTimeSymbols_fr_KM, goog.i18n.DateTimeSymbols_fr_LU, goog.i18n.DateTimeSymbols_fr_MA, goog.i18n.DateTimeSymbols_fr_MC, goog.i18n.DateTimeSymbols_fr_MF, goog.i18n.DateTimeSymbols_fr_MG, goog.i18n.DateTimeSymbols_fr_ML, goog.i18n.DateTimeSymbols_fr_MQ, goog.i18n.DateTimeSymbols_fr_MR, goog.i18n.DateTimeSymbols_fr_MU, goog.i18n.DateTimeSymbols_fr_NC, goog.i18n.DateTimeSymbols_fr_NE, goog.i18n.DateTimeSymbols_fr_PF, goog.i18n.DateTimeSymbols_fr_PM, goog.i18n.DateTimeSymbols_fr_RE, goog.i18n.DateTimeSymbols_fr_RW, goog.i18n.DateTimeSymbols_fr_SC, goog.i18n.DateTimeSymbols_fr_SN, goog.i18n.DateTimeSymbols_fr_SY, goog.i18n.DateTimeSymbols_fr_TD, goog.i18n.DateTimeSymbols_fr_TG, goog.i18n.DateTimeSymbols_fr_TN, goog.i18n.DateTimeSymbols_fr_VU, goog.i18n.DateTimeSymbols_fr_WF, goog.i18n.DateTimeSymbols_fr_YT, goog.i18n.DateTimeSymbols_fur, goog.i18n.DateTimeSymbols_fur_IT, goog.i18n.DateTimeSymbols_fy, goog.i18n.DateTimeSymbols_fy_NL, goog.i18n.DateTimeSymbols_ga_IE, goog.i18n.DateTimeSymbols_gd, goog.i18n.DateTimeSymbols_gd_GB, goog.i18n.DateTimeSymbols_gl_ES, goog.i18n.DateTimeSymbols_gsw_CH, goog.i18n.DateTimeSymbols_gsw_FR, goog.i18n.DateTimeSymbols_gsw_LI, goog.i18n.DateTimeSymbols_gu_IN, goog.i18n.DateTimeSymbols_guz, goog.i18n.DateTimeSymbols_guz_KE, goog.i18n.DateTimeSymbols_gv, goog.i18n.DateTimeSymbols_gv_IM, goog.i18n.DateTimeSymbols_ha, goog.i18n.DateTimeSymbols_ha_GH, goog.i18n.DateTimeSymbols_ha_NE, goog.i18n.DateTimeSymbols_ha_NG, goog.i18n.DateTimeSymbols_haw_US, goog.i18n.DateTimeSymbols_he_IL, goog.i18n.DateTimeSymbols_hi_IN, goog.i18n.DateTimeSymbols_hr_BA, goog.i18n.DateTimeSymbols_hr_HR, goog.i18n.DateTimeSymbols_hsb, goog.i18n.DateTimeSymbols_hsb_DE, goog.i18n.DateTimeSymbols_hu_HU, goog.i18n.DateTimeSymbols_hy_AM, goog.i18n.DateTimeSymbols_id_ID, goog.i18n.DateTimeSymbols_ig, goog.i18n.DateTimeSymbols_ig_NG, goog.i18n.DateTimeSymbols_ii, goog.i18n.DateTimeSymbols_ii_CN, goog.i18n.DateTimeSymbols_is_IS, goog.i18n.DateTimeSymbols_it_CH, goog.i18n.DateTimeSymbols_it_IT, goog.i18n.DateTimeSymbols_it_SM, goog.i18n.DateTimeSymbols_ja_JP, goog.i18n.DateTimeSymbols_jgo, goog.i18n.DateTimeSymbols_jgo_CM, goog.i18n.DateTimeSymbols_jmc, goog.i18n.DateTimeSymbols_jmc_TZ, goog.i18n.DateTimeSymbols_ka_GE, goog.i18n.DateTimeSymbols_kab, goog.i18n.DateTimeSymbols_kab_DZ, goog.i18n.DateTimeSymbols_kam, goog.i18n.DateTimeSymbols_kam_KE, goog.i18n.DateTimeSymbols_kde, goog.i18n.DateTimeSymbols_kde_TZ, goog.i18n.DateTimeSymbols_kea, goog.i18n.DateTimeSymbols_kea_CV, goog.i18n.DateTimeSymbols_khq, goog.i18n.DateTimeSymbols_khq_ML, goog.i18n.DateTimeSymbols_ki, goog.i18n.DateTimeSymbols_ki_KE, goog.i18n.DateTimeSymbols_kk_KZ, goog.i18n.DateTimeSymbols_kkj, goog.i18n.DateTimeSymbols_kkj_CM, goog.i18n.DateTimeSymbols_kl, goog.i18n.DateTimeSymbols_kl_GL, goog.i18n.DateTimeSymbols_kln, goog.i18n.DateTimeSymbols_kln_KE, goog.i18n.DateTimeSymbols_km_KH, goog.i18n.DateTimeSymbols_kn_IN, goog.i18n.DateTimeSymbols_ko_KP, goog.i18n.DateTimeSymbols_ko_KR, goog.i18n.DateTimeSymbols_kok, goog.i18n.DateTimeSymbols_kok_IN, goog.i18n.DateTimeSymbols_ks, goog.i18n.DateTimeSymbols_ks_IN, goog.i18n.DateTimeSymbols_ksb, goog.i18n.DateTimeSymbols_ksb_TZ, goog.i18n.DateTimeSymbols_ksf, goog.i18n.DateTimeSymbols_ksf_CM, goog.i18n.DateTimeSymbols_ksh, goog.i18n.DateTimeSymbols_ksh_DE, goog.i18n.DateTimeSymbols_kw, goog.i18n.DateTimeSymbols_kw_GB, goog.i18n.DateTimeSymbols_ky_KG, goog.i18n.DateTimeSymbols_lag, goog.i18n.DateTimeSymbols_lag_TZ, goog.i18n.DateTimeSymbols_lb, goog.i18n.DateTimeSymbols_lb_LU, goog.i18n.DateTimeSymbols_lg, goog.i18n.DateTimeSymbols_lg_UG, goog.i18n.DateTimeSymbols_lkt, goog.i18n.DateTimeSymbols_lkt_US, goog.i18n.DateTimeSymbols_ln_AO, goog.i18n.DateTimeSymbols_ln_CD, goog.i18n.DateTimeSymbols_ln_CF, goog.i18n.DateTimeSymbols_ln_CG, goog.i18n.DateTimeSymbols_lo_LA, goog.i18n.DateTimeSymbols_lrc, goog.i18n.DateTimeSymbols_lrc_IQ, goog.i18n.DateTimeSymbols_lrc_IR, goog.i18n.DateTimeSymbols_lt_LT, goog.i18n.DateTimeSymbols_lu, goog.i18n.DateTimeSymbols_lu_CD, goog.i18n.DateTimeSymbols_luo, goog.i18n.DateTimeSymbols_luo_KE, goog.i18n.DateTimeSymbols_luy, goog.i18n.DateTimeSymbols_luy_KE, goog.i18n.DateTimeSymbols_lv_LV, goog.i18n.DateTimeSymbols_mas, goog.i18n.DateTimeSymbols_mas_KE, goog.i18n.DateTimeSymbols_mas_TZ, goog.i18n.DateTimeSymbols_mer, goog.i18n.DateTimeSymbols_mer_KE, goog.i18n.DateTimeSymbols_mfe, goog.i18n.DateTimeSymbols_mfe_MU, goog.i18n.DateTimeSymbols_mg, goog.i18n.DateTimeSymbols_mg_MG, goog.i18n.DateTimeSymbols_mgh, goog.i18n.DateTimeSymbols_mgh_MZ, goog.i18n.DateTimeSymbols_mgo, goog.i18n.DateTimeSymbols_mgo_CM, goog.i18n.DateTimeSymbols_mk_MK, goog.i18n.DateTimeSymbols_ml_IN, goog.i18n.DateTimeSymbols_mn_MN, goog.i18n.DateTimeSymbols_mr_IN, goog.i18n.DateTimeSymbols_ms_BN, goog.i18n.DateTimeSymbols_ms_MY, goog.i18n.DateTimeSymbols_ms_SG, goog.i18n.DateTimeSymbols_mt_MT, goog.i18n.DateTimeSymbols_mua, goog.i18n.DateTimeSymbols_mua_CM, goog.i18n.DateTimeSymbols_my_MM, goog.i18n.DateTimeSymbols_mzn, goog.i18n.DateTimeSymbols_mzn_IR, goog.i18n.DateTimeSymbols_naq, goog.i18n.DateTimeSymbols_naq_NA, goog.i18n.DateTimeSymbols_nb_NO, goog.i18n.DateTimeSymbols_nb_SJ, goog.i18n.DateTimeSymbols_nd, goog.i18n.DateTimeSymbols_nd_ZW, goog.i18n.DateTimeSymbols_ne_IN, goog.i18n.DateTimeSymbols_ne_NP, goog.i18n.DateTimeSymbols_nl_AW, goog.i18n.DateTimeSymbols_nl_BE, goog.i18n.DateTimeSymbols_nl_BQ, goog.i18n.DateTimeSymbols_nl_CW, goog.i18n.DateTimeSymbols_nl_NL, goog.i18n.DateTimeSymbols_nl_SR, goog.i18n.DateTimeSymbols_nl_SX, goog.i18n.DateTimeSymbols_nmg, goog.i18n.DateTimeSymbols_nmg_CM, goog.i18n.DateTimeSymbols_nn, goog.i18n.DateTimeSymbols_nn_NO, goog.i18n.DateTimeSymbols_nnh, goog.i18n.DateTimeSymbols_nnh_CM, goog.i18n.DateTimeSymbols_nus, goog.i18n.DateTimeSymbols_nus_SS, goog.i18n.DateTimeSymbols_nyn, goog.i18n.DateTimeSymbols_nyn_UG, goog.i18n.DateTimeSymbols_om, goog.i18n.DateTimeSymbols_om_ET, goog.i18n.DateTimeSymbols_om_KE, goog.i18n.DateTimeSymbols_or_IN, goog.i18n.DateTimeSymbols_os, goog.i18n.DateTimeSymbols_os_GE, goog.i18n.DateTimeSymbols_os_RU, goog.i18n.DateTimeSymbols_pa_Arab, goog.i18n.DateTimeSymbols_pa_Arab_PK, goog.i18n.DateTimeSymbols_pa_Guru, goog.i18n.DateTimeSymbols_pa_Guru_IN, goog.i18n.DateTimeSymbols_pl_PL, goog.i18n.DateTimeSymbols_prg, goog.i18n.DateTimeSymbols_prg_001, goog.i18n.DateTimeSymbols_ps, goog.i18n.DateTimeSymbols_ps_AF, goog.i18n.DateTimeSymbols_pt_AO, goog.i18n.DateTimeSymbols_pt_CH, goog.i18n.DateTimeSymbols_pt_CV, goog.i18n.DateTimeSymbols_pt_GQ, goog.i18n.DateTimeSymbols_pt_GW, goog.i18n.DateTimeSymbols_pt_LU, goog.i18n.DateTimeSymbols_pt_MO, goog.i18n.DateTimeSymbols_pt_MZ, goog.i18n.DateTimeSymbols_pt_ST, goog.i18n.DateTimeSymbols_pt_TL, goog.i18n.DateTimeSymbols_qu, goog.i18n.DateTimeSymbols_qu_BO, goog.i18n.DateTimeSymbols_qu_EC, goog.i18n.DateTimeSymbols_qu_PE, goog.i18n.DateTimeSymbols_rm, goog.i18n.DateTimeSymbols_rm_CH, goog.i18n.DateTimeSymbols_rn, goog.i18n.DateTimeSymbols_rn_BI, goog.i18n.DateTimeSymbols_ro_MD, goog.i18n.DateTimeSymbols_ro_RO, goog.i18n.DateTimeSymbols_rof, goog.i18n.DateTimeSymbols_rof_TZ, goog.i18n.DateTimeSymbols_ru_BY, goog.i18n.DateTimeSymbols_ru_KG, goog.i18n.DateTimeSymbols_ru_KZ, goog.i18n.DateTimeSymbols_ru_MD, goog.i18n.DateTimeSymbols_ru_RU, goog.i18n.DateTimeSymbols_ru_UA, goog.i18n.DateTimeSymbols_rw, goog.i18n.DateTimeSymbols_rw_RW, goog.i18n.DateTimeSymbols_rwk, goog.i18n.DateTimeSymbols_rwk_TZ, goog.i18n.DateTimeSymbols_sah, goog.i18n.DateTimeSymbols_sah_RU, goog.i18n.DateTimeSymbols_saq, goog.i18n.DateTimeSymbols_saq_KE, goog.i18n.DateTimeSymbols_sbp, goog.i18n.DateTimeSymbols_sbp_TZ, goog.i18n.DateTimeSymbols_se, goog.i18n.DateTimeSymbols_se_FI, goog.i18n.DateTimeSymbols_se_NO, goog.i18n.DateTimeSymbols_se_SE, goog.i18n.DateTimeSymbols_seh, goog.i18n.DateTimeSymbols_seh_MZ, goog.i18n.DateTimeSymbols_ses, goog.i18n.DateTimeSymbols_ses_ML, goog.i18n.DateTimeSymbols_sg, goog.i18n.DateTimeSymbols_sg_CF, goog.i18n.DateTimeSymbols_shi, goog.i18n.DateTimeSymbols_shi_Latn, goog.i18n.DateTimeSymbols_shi_Latn_MA, goog.i18n.DateTimeSymbols_shi_Tfng, goog.i18n.DateTimeSymbols_shi_Tfng_MA, goog.i18n.DateTimeSymbols_si_LK, goog.i18n.DateTimeSymbols_sk_SK, goog.i18n.DateTimeSymbols_sl_SI, goog.i18n.DateTimeSymbols_smn, goog.i18n.DateTimeSymbols_smn_FI, goog.i18n.DateTimeSymbols_sn, goog.i18n.DateTimeSymbols_sn_ZW, goog.i18n.DateTimeSymbols_so, goog.i18n.DateTimeSymbols_so_DJ, goog.i18n.DateTimeSymbols_so_ET, goog.i18n.DateTimeSymbols_so_KE, goog.i18n.DateTimeSymbols_so_SO, goog.i18n.DateTimeSymbols_sq_AL, goog.i18n.DateTimeSymbols_sq_MK, goog.i18n.DateTimeSymbols_sq_XK, goog.i18n.DateTimeSymbols_sr_Cyrl, goog.i18n.DateTimeSymbols_sr_Cyrl_BA, goog.i18n.DateTimeSymbols_sr_Cyrl_ME, goog.i18n.DateTimeSymbols_sr_Cyrl_RS, goog.i18n.DateTimeSymbols_sr_Cyrl_XK, goog.i18n.DateTimeSymbols_sr_Latn_BA, goog.i18n.DateTimeSymbols_sr_Latn_ME, goog.i18n.DateTimeSymbols_sr_Latn_RS, goog.i18n.DateTimeSymbols_sr_Latn_XK, goog.i18n.DateTimeSymbols_sv_AX, goog.i18n.DateTimeSymbols_sv_FI, goog.i18n.DateTimeSymbols_sv_SE, goog.i18n.DateTimeSymbols_sw_CD, goog.i18n.DateTimeSymbols_sw_KE, goog.i18n.DateTimeSymbols_sw_TZ, goog.i18n.DateTimeSymbols_sw_UG, goog.i18n.DateTimeSymbols_ta_IN, goog.i18n.DateTimeSymbols_ta_LK, goog.i18n.DateTimeSymbols_ta_MY, goog.i18n.DateTimeSymbols_ta_SG, goog.i18n.DateTimeSymbols_te_IN, goog.i18n.DateTimeSymbols_teo, goog.i18n.DateTimeSymbols_teo_KE, goog.i18n.DateTimeSymbols_teo_UG, goog.i18n.DateTimeSymbols_th_TH, goog.i18n.DateTimeSymbols_ti, goog.i18n.DateTimeSymbols_ti_ER, goog.i18n.DateTimeSymbols_ti_ET, goog.i18n.DateTimeSymbols_tk, goog.i18n.DateTimeSymbols_tk_TM, goog.i18n.DateTimeSymbols_to, goog.i18n.DateTimeSymbols_to_TO, goog.i18n.DateTimeSymbols_tr_CY, goog.i18n.DateTimeSymbols_tr_TR, goog.i18n.DateTimeSymbols_twq, goog.i18n.DateTimeSymbols_twq_NE, goog.i18n.DateTimeSymbols_tzm, goog.i18n.DateTimeSymbols_tzm_MA, goog.i18n.DateTimeSymbols_ug, goog.i18n.DateTimeSymbols_ug_CN, goog.i18n.DateTimeSymbols_uk_UA, goog.i18n.DateTimeSymbols_ur_IN, goog.i18n.DateTimeSymbols_ur_PK, goog.i18n.DateTimeSymbols_uz_Arab, goog.i18n.DateTimeSymbols_uz_Arab_AF, goog.i18n.DateTimeSymbols_uz_Cyrl, goog.i18n.DateTimeSymbols_uz_Cyrl_UZ, goog.i18n.DateTimeSymbols_uz_Latn, goog.i18n.DateTimeSymbols_uz_Latn_UZ, goog.i18n.DateTimeSymbols_vai, goog.i18n.DateTimeSymbols_vai_Latn, goog.i18n.DateTimeSymbols_vai_Latn_LR, goog.i18n.DateTimeSymbols_vai_Vaii, goog.i18n.DateTimeSymbols_vai_Vaii_LR, goog.i18n.DateTimeSymbols_vi_VN, goog.i18n.DateTimeSymbols_vo, goog.i18n.DateTimeSymbols_vo_001, goog.i18n.DateTimeSymbols_vun, goog.i18n.DateTimeSymbols_vun_TZ, goog.i18n.DateTimeSymbols_wae, goog.i18n.DateTimeSymbols_wae_CH, goog.i18n.DateTimeSymbols_xog, goog.i18n.DateTimeSymbols_xog_UG, goog.i18n.DateTimeSymbols_yav, goog.i18n.DateTimeSymbols_yav_CM, goog.i18n.DateTimeSymbols_yi, goog.i18n.DateTimeSymbols_yi_001, goog.i18n.DateTimeSymbols_yo, goog.i18n.DateTimeSymbols_yo_BJ, goog.i18n.DateTimeSymbols_yo_NG, goog.i18n.DateTimeSymbols_yue, goog.i18n.DateTimeSymbols_yue_HK, goog.i18n.DateTimeSymbols_zgh, goog.i18n.DateTimeSymbols_zgh_MA, goog.i18n.DateTimeSymbols_zh_Hans, goog.i18n.DateTimeSymbols_zh_Hans_CN, goog.i18n.DateTimeSymbols_zh_Hans_HK, goog.i18n.DateTimeSymbols_zh_Hans_MO, goog.i18n.DateTimeSymbols_zh_Hans_SG, goog.i18n.DateTimeSymbols_zh_Hant, goog.i18n.DateTimeSymbols_zh_Hant_HK, goog.i18n.DateTimeSymbols_zh_Hant_MO, goog.i18n.DateTimeSymbols_zh_Hant_TW, goog.i18n.DateTimeSymbols_zu_ZA] from input ../closure-library/closure/goog/i18n/datetimesymbolsext.js
//!! Processing provides [goog.fs.FileWriter] from input ../closure-library/closure/goog/fs/filewriter.js
//!! Processing provides [goog.ui.editor.LinkDialog, goog.ui.editor.LinkDialog.BeforeTestLinkEvent, goog.ui.editor.LinkDialog.EventType, goog.ui.editor.LinkDialog.OkEvent] from input ../closure-library/closure/goog/ui/editor/linkdialog.js
//!! Processing provides [goog.storage.ErrorCode] from input ../closure-library/closure/goog/storage/errorcode.js
//!! Processing provides [goog.dom.browserrange.OperaRange] from input ../closure-library/closure/goog/dom/browserrange/operarange.js
//!! Processing provides [goog.labs.structs.Multimap] from input ../closure-library/closure/goog/labs/structs/multimap.js
//!! Processing provides [goog.labs.iterable] from input ../closure-library/closure/goog/labs/iterable/iterable.js
//!! Processing provides [goog.labs.storage.BoundedCollectableStorage] from input ../closure-library/closure/goog/labs/storage/boundedcollectablestorage.js
//!! Processing provides [goog.locale.TimeZoneList] from input ../closure-library/closure/goog/locale/timezonelist.js
//!! Processing provides [goog.math.interpolator.Interpolator1] from input ../closure-library/closure/goog/math/interpolator/interpolator1.js
//!! Processing provides [goog.editor.Plugin] from input ../closure-library/closure/goog/editor/plugin.js
//!! Processing provides [goog.i18n.NumberFormatSymbols, goog.i18n.NumberFormatSymbols_af, goog.i18n.NumberFormatSymbols_af_ZA, goog.i18n.NumberFormatSymbols_am, goog.i18n.NumberFormatSymbols_am_ET, goog.i18n.NumberFormatSymbols_ar, goog.i18n.NumberFormatSymbols_ar_001, goog.i18n.NumberFormatSymbols_ar_EG, goog.i18n.NumberFormatSymbols_ar_XB, goog.i18n.NumberFormatSymbols_az, goog.i18n.NumberFormatSymbols_az_Latn, goog.i18n.NumberFormatSymbols_az_Latn_AZ, goog.i18n.NumberFormatSymbols_be, goog.i18n.NumberFormatSymbols_be_BY, goog.i18n.NumberFormatSymbols_bg, goog.i18n.NumberFormatSymbols_bg_BG, goog.i18n.NumberFormatSymbols_bn, goog.i18n.NumberFormatSymbols_bn_BD, goog.i18n.NumberFormatSymbols_br, goog.i18n.NumberFormatSymbols_br_FR, goog.i18n.NumberFormatSymbols_bs, goog.i18n.NumberFormatSymbols_bs_Latn, goog.i18n.NumberFormatSymbols_bs_Latn_BA, goog.i18n.NumberFormatSymbols_ca, goog.i18n.NumberFormatSymbols_ca_AD, goog.i18n.NumberFormatSymbols_ca_ES, goog.i18n.NumberFormatSymbols_ca_ES_VALENCIA, goog.i18n.NumberFormatSymbols_ca_FR, goog.i18n.NumberFormatSymbols_ca_IT, goog.i18n.NumberFormatSymbols_chr, goog.i18n.NumberFormatSymbols_chr_US, goog.i18n.NumberFormatSymbols_cs, goog.i18n.NumberFormatSymbols_cs_CZ, goog.i18n.NumberFormatSymbols_cy, goog.i18n.NumberFormatSymbols_cy_GB, goog.i18n.NumberFormatSymbols_da, goog.i18n.NumberFormatSymbols_da_DK, goog.i18n.NumberFormatSymbols_da_GL, goog.i18n.NumberFormatSymbols_de, goog.i18n.NumberFormatSymbols_de_AT, goog.i18n.NumberFormatSymbols_de_BE, goog.i18n.NumberFormatSymbols_de_CH, goog.i18n.NumberFormatSymbols_de_DE, goog.i18n.NumberFormatSymbols_de_LU, goog.i18n.NumberFormatSymbols_el, goog.i18n.NumberFormatSymbols_el_CY, goog.i18n.NumberFormatSymbols_el_GR, goog.i18n.NumberFormatSymbols_en, goog.i18n.NumberFormatSymbols_en_001, goog.i18n.NumberFormatSymbols_en_AS, goog.i18n.NumberFormatSymbols_en_AU, goog.i18n.NumberFormatSymbols_en_CA, goog.i18n.NumberFormatSymbols_en_DG, goog.i18n.NumberFormatSymbols_en_FM, goog.i18n.NumberFormatSymbols_en_GB, goog.i18n.NumberFormatSymbols_en_GU, goog.i18n.NumberFormatSymbols_en_IE, goog.i18n.NumberFormatSymbols_en_IN, goog.i18n.NumberFormatSymbols_en_IO, goog.i18n.NumberFormatSymbols_en_MH, goog.i18n.NumberFormatSymbols_en_MP, goog.i18n.NumberFormatSymbols_en_PR, goog.i18n.NumberFormatSymbols_en_PW, goog.i18n.NumberFormatSymbols_en_SG, goog.i18n.NumberFormatSymbols_en_TC, goog.i18n.NumberFormatSymbols_en_UM, goog.i18n.NumberFormatSymbols_en_US, goog.i18n.NumberFormatSymbols_en_VG, goog.i18n.NumberFormatSymbols_en_VI, goog.i18n.NumberFormatSymbols_en_XA, goog.i18n.NumberFormatSymbols_en_ZA, goog.i18n.NumberFormatSymbols_en_ZW, goog.i18n.NumberFormatSymbols_es, goog.i18n.NumberFormatSymbols_es_419, goog.i18n.NumberFormatSymbols_es_EA, goog.i18n.NumberFormatSymbols_es_ES, goog.i18n.NumberFormatSymbols_es_IC, goog.i18n.NumberFormatSymbols_es_MX, goog.i18n.NumberFormatSymbols_es_US, goog.i18n.NumberFormatSymbols_et, goog.i18n.NumberFormatSymbols_et_EE, goog.i18n.NumberFormatSymbols_eu, goog.i18n.NumberFormatSymbols_eu_ES, goog.i18n.NumberFormatSymbols_fa, goog.i18n.NumberFormatSymbols_fa_IR, goog.i18n.NumberFormatSymbols_fi, goog.i18n.NumberFormatSymbols_fi_FI, goog.i18n.NumberFormatSymbols_fil, goog.i18n.NumberFormatSymbols_fil_PH, goog.i18n.NumberFormatSymbols_fr, goog.i18n.NumberFormatSymbols_fr_BL, goog.i18n.NumberFormatSymbols_fr_CA, goog.i18n.NumberFormatSymbols_fr_FR, goog.i18n.NumberFormatSymbols_fr_GF, goog.i18n.NumberFormatSymbols_fr_GP, goog.i18n.NumberFormatSymbols_fr_MC, goog.i18n.NumberFormatSymbols_fr_MF, goog.i18n.NumberFormatSymbols_fr_MQ, goog.i18n.NumberFormatSymbols_fr_PM, goog.i18n.NumberFormatSymbols_fr_RE, goog.i18n.NumberFormatSymbols_fr_YT, goog.i18n.NumberFormatSymbols_ga, goog.i18n.NumberFormatSymbols_ga_IE, goog.i18n.NumberFormatSymbols_gl, goog.i18n.NumberFormatSymbols_gl_ES, goog.i18n.NumberFormatSymbols_gsw, goog.i18n.NumberFormatSymbols_gsw_CH, goog.i18n.NumberFormatSymbols_gsw_LI, goog.i18n.NumberFormatSymbols_gu, goog.i18n.NumberFormatSymbols_gu_IN, goog.i18n.NumberFormatSymbols_haw, goog.i18n.NumberFormatSymbols_haw_US, goog.i18n.NumberFormatSymbols_he, goog.i18n.NumberFormatSymbols_he_IL, goog.i18n.NumberFormatSymbols_hi, goog.i18n.NumberFormatSymbols_hi_IN, goog.i18n.NumberFormatSymbols_hr, goog.i18n.NumberFormatSymbols_hr_HR, goog.i18n.NumberFormatSymbols_hu, goog.i18n.NumberFormatSymbols_hu_HU, goog.i18n.NumberFormatSymbols_hy, goog.i18n.NumberFormatSymbols_hy_AM, goog.i18n.NumberFormatSymbols_id, goog.i18n.NumberFormatSymbols_id_ID, goog.i18n.NumberFormatSymbols_in, goog.i18n.NumberFormatSymbols_is, goog.i18n.NumberFormatSymbols_is_IS, goog.i18n.NumberFormatSymbols_it, goog.i18n.NumberFormatSymbols_it_IT, goog.i18n.NumberFormatSymbols_it_SM, goog.i18n.NumberFormatSymbols_iw, goog.i18n.NumberFormatSymbols_ja, goog.i18n.NumberFormatSymbols_ja_JP, goog.i18n.NumberFormatSymbols_ka, goog.i18n.NumberFormatSymbols_ka_GE, goog.i18n.NumberFormatSymbols_kk, goog.i18n.NumberFormatSymbols_kk_KZ, goog.i18n.NumberFormatSymbols_km, goog.i18n.NumberFormatSymbols_km_KH, goog.i18n.NumberFormatSymbols_kn, goog.i18n.NumberFormatSymbols_kn_IN, goog.i18n.NumberFormatSymbols_ko, goog.i18n.NumberFormatSymbols_ko_KR, goog.i18n.NumberFormatSymbols_ky, goog.i18n.NumberFormatSymbols_ky_KG, goog.i18n.NumberFormatSymbols_ln, goog.i18n.NumberFormatSymbols_ln_CD, goog.i18n.NumberFormatSymbols_lo, goog.i18n.NumberFormatSymbols_lo_LA, goog.i18n.NumberFormatSymbols_lt, goog.i18n.NumberFormatSymbols_lt_LT, goog.i18n.NumberFormatSymbols_lv, goog.i18n.NumberFormatSymbols_lv_LV, goog.i18n.NumberFormatSymbols_mk, goog.i18n.NumberFormatSymbols_mk_MK, goog.i18n.NumberFormatSymbols_ml, goog.i18n.NumberFormatSymbols_ml_IN, goog.i18n.NumberFormatSymbols_mn, goog.i18n.NumberFormatSymbols_mn_MN, goog.i18n.NumberFormatSymbols_mr, goog.i18n.NumberFormatSymbols_mr_IN, goog.i18n.NumberFormatSymbols_ms, goog.i18n.NumberFormatSymbols_ms_MY, goog.i18n.NumberFormatSymbols_mt, goog.i18n.NumberFormatSymbols_mt_MT, goog.i18n.NumberFormatSymbols_my, goog.i18n.NumberFormatSymbols_my_MM, goog.i18n.NumberFormatSymbols_nb, goog.i18n.NumberFormatSymbols_nb_NO, goog.i18n.NumberFormatSymbols_nb_SJ, goog.i18n.NumberFormatSymbols_ne, goog.i18n.NumberFormatSymbols_ne_NP, goog.i18n.NumberFormatSymbols_nl, goog.i18n.NumberFormatSymbols_nl_NL, goog.i18n.NumberFormatSymbols_no, goog.i18n.NumberFormatSymbols_no_NO, goog.i18n.NumberFormatSymbols_or, goog.i18n.NumberFormatSymbols_or_IN, goog.i18n.NumberFormatSymbols_pa, goog.i18n.NumberFormatSymbols_pa_Guru, goog.i18n.NumberFormatSymbols_pa_Guru_IN, goog.i18n.NumberFormatSymbols_pl, goog.i18n.NumberFormatSymbols_pl_PL, goog.i18n.NumberFormatSymbols_pt, goog.i18n.NumberFormatSymbols_pt_BR, goog.i18n.NumberFormatSymbols_pt_PT, goog.i18n.NumberFormatSymbols_ro, goog.i18n.NumberFormatSymbols_ro_RO, goog.i18n.NumberFormatSymbols_ru, goog.i18n.NumberFormatSymbols_ru_RU, goog.i18n.NumberFormatSymbols_si, goog.i18n.NumberFormatSymbols_si_LK, goog.i18n.NumberFormatSymbols_sk, goog.i18n.NumberFormatSymbols_sk_SK, goog.i18n.NumberFormatSymbols_sl, goog.i18n.NumberFormatSymbols_sl_SI, goog.i18n.NumberFormatSymbols_sq, goog.i18n.NumberFormatSymbols_sq_AL, goog.i18n.NumberFormatSymbols_sr, goog.i18n.NumberFormatSymbols_sr_Cyrl, goog.i18n.NumberFormatSymbols_sr_Cyrl_RS, goog.i18n.NumberFormatSymbols_sr_Latn, goog.i18n.NumberFormatSymbols_sr_Latn_RS, goog.i18n.NumberFormatSymbols_sv, goog.i18n.NumberFormatSymbols_sv_SE, goog.i18n.NumberFormatSymbols_sw, goog.i18n.NumberFormatSymbols_sw_TZ, goog.i18n.NumberFormatSymbols_ta, goog.i18n.NumberFormatSymbols_ta_IN, goog.i18n.NumberFormatSymbols_te, goog.i18n.NumberFormatSymbols_te_IN, goog.i18n.NumberFormatSymbols_th, goog.i18n.NumberFormatSymbols_th_TH, goog.i18n.NumberFormatSymbols_tl, goog.i18n.NumberFormatSymbols_tr, goog.i18n.NumberFormatSymbols_tr_TR, goog.i18n.NumberFormatSymbols_uk, goog.i18n.NumberFormatSymbols_uk_UA, goog.i18n.NumberFormatSymbols_ur, goog.i18n.NumberFormatSymbols_ur_PK, goog.i18n.NumberFormatSymbols_uz, goog.i18n.NumberFormatSymbols_uz_Latn, goog.i18n.NumberFormatSymbols_uz_Latn_UZ, goog.i18n.NumberFormatSymbols_vi, goog.i18n.NumberFormatSymbols_vi_VN, goog.i18n.NumberFormatSymbols_zh, goog.i18n.NumberFormatSymbols_zh_CN, goog.i18n.NumberFormatSymbols_zh_HK, goog.i18n.NumberFormatSymbols_zh_Hans, goog.i18n.NumberFormatSymbols_zh_Hans_CN, goog.i18n.NumberFormatSymbols_zh_TW, goog.i18n.NumberFormatSymbols_zu, goog.i18n.NumberFormatSymbols_zu_ZA] from input ../closure-library/closure/goog/i18n/numberformatsymbols.js
//!! Processing provides [goog.labs.style.PixelDensityMonitor, goog.labs.style.PixelDensityMonitor.Density, goog.labs.style.PixelDensityMonitor.EventType] from input ../closure-library/closure/goog/labs/style/pixeldensitymonitor.js
//!! Processing provides [goog.string.Parser] from input ../closure-library/closure/goog/string/parser.js
//!! Processing provides [goog.dom.BufferedViewportSizeMonitor] from input ../closure-library/closure/goog/dom/bufferedviewportsizemonitor.js
//!! Processing provides [goog.style.transition, goog.style.transition.Css3Property] from input ../closure-library/closure/goog/style/transition.js
//!! Processing provides [goog.db.Cursor] from input ../closure-library/closure/goog/db/cursor.js
//!! Processing provides [goog.dom.selection] from input ../closure-library/closure/goog/dom/selection.js
//!! Processing provides [goog.crypt.base64] from input ../closure-library/closure/goog/crypt/base64.js
//!! Processing provides [] from input ../closure-compiler/externs/es6_collections.js
//!! Processing provides [goog.fs.FileSystemImpl] from input ../closure-library/closure/goog/fs/filesystemimpl.js
//!! Processing provides [goog.i18n.NumberFormatSymbolsExt, goog.i18n.NumberFormatSymbols_af_NA, goog.i18n.NumberFormatSymbols_agq, goog.i18n.NumberFormatSymbols_agq_CM, goog.i18n.NumberFormatSymbols_ak, goog.i18n.NumberFormatSymbols_ak_GH, goog.i18n.NumberFormatSymbols_ar_AE, goog.i18n.NumberFormatSymbols_ar_BH, goog.i18n.NumberFormatSymbols_ar_DJ, goog.i18n.NumberFormatSymbols_ar_DZ, goog.i18n.NumberFormatSymbols_ar_EH, goog.i18n.NumberFormatSymbols_ar_ER, goog.i18n.NumberFormatSymbols_ar_IL, goog.i18n.NumberFormatSymbols_ar_IQ, goog.i18n.NumberFormatSymbols_ar_JO, goog.i18n.NumberFormatSymbols_ar_KM, goog.i18n.NumberFormatSymbols_ar_KW, goog.i18n.NumberFormatSymbols_ar_LB, goog.i18n.NumberFormatSymbols_ar_LY, goog.i18n.NumberFormatSymbols_ar_MA, goog.i18n.NumberFormatSymbols_ar_MR, goog.i18n.NumberFormatSymbols_ar_OM, goog.i18n.NumberFormatSymbols_ar_PS, goog.i18n.NumberFormatSymbols_ar_QA, goog.i18n.NumberFormatSymbols_ar_SA, goog.i18n.NumberFormatSymbols_ar_SD, goog.i18n.NumberFormatSymbols_ar_SO, goog.i18n.NumberFormatSymbols_ar_SS, goog.i18n.NumberFormatSymbols_ar_SY, goog.i18n.NumberFormatSymbols_ar_TD, goog.i18n.NumberFormatSymbols_ar_TN, goog.i18n.NumberFormatSymbols_ar_YE, goog.i18n.NumberFormatSymbols_as, goog.i18n.NumberFormatSymbols_as_IN, goog.i18n.NumberFormatSymbols_asa, goog.i18n.NumberFormatSymbols_asa_TZ, goog.i18n.NumberFormatSymbols_ast, goog.i18n.NumberFormatSymbols_ast_ES, goog.i18n.NumberFormatSymbols_az_Cyrl, goog.i18n.NumberFormatSymbols_az_Cyrl_AZ, goog.i18n.NumberFormatSymbols_bas, goog.i18n.NumberFormatSymbols_bas_CM, goog.i18n.NumberFormatSymbols_bem, goog.i18n.NumberFormatSymbols_bem_ZM, goog.i18n.NumberFormatSymbols_bez, goog.i18n.NumberFormatSymbols_bez_TZ, goog.i18n.NumberFormatSymbols_bm, goog.i18n.NumberFormatSymbols_bm_ML, goog.i18n.NumberFormatSymbols_bn_IN, goog.i18n.NumberFormatSymbols_bo, goog.i18n.NumberFormatSymbols_bo_CN, goog.i18n.NumberFormatSymbols_bo_IN, goog.i18n.NumberFormatSymbols_brx, goog.i18n.NumberFormatSymbols_brx_IN, goog.i18n.NumberFormatSymbols_bs_Cyrl, goog.i18n.NumberFormatSymbols_bs_Cyrl_BA, goog.i18n.NumberFormatSymbols_ce, goog.i18n.NumberFormatSymbols_ce_RU, goog.i18n.NumberFormatSymbols_cgg, goog.i18n.NumberFormatSymbols_cgg_UG, goog.i18n.NumberFormatSymbols_ckb, goog.i18n.NumberFormatSymbols_ckb_Arab, goog.i18n.NumberFormatSymbols_ckb_Arab_IQ, goog.i18n.NumberFormatSymbols_ckb_Arab_IR, goog.i18n.NumberFormatSymbols_ckb_IQ, goog.i18n.NumberFormatSymbols_ckb_IR, goog.i18n.NumberFormatSymbols_ckb_Latn, goog.i18n.NumberFormatSymbols_ckb_Latn_IQ, goog.i18n.NumberFormatSymbols_cu, goog.i18n.NumberFormatSymbols_cu_RU, goog.i18n.NumberFormatSymbols_dav, goog.i18n.NumberFormatSymbols_dav_KE, goog.i18n.NumberFormatSymbols_de_LI, goog.i18n.NumberFormatSymbols_dje, goog.i18n.NumberFormatSymbols_dje_NE, goog.i18n.NumberFormatSymbols_dsb, goog.i18n.NumberFormatSymbols_dsb_DE, goog.i18n.NumberFormatSymbols_dua, goog.i18n.NumberFormatSymbols_dua_CM, goog.i18n.NumberFormatSymbols_dyo, goog.i18n.NumberFormatSymbols_dyo_SN, goog.i18n.NumberFormatSymbols_dz, goog.i18n.NumberFormatSymbols_dz_BT, goog.i18n.NumberFormatSymbols_ebu, goog.i18n.NumberFormatSymbols_ebu_KE, goog.i18n.NumberFormatSymbols_ee, goog.i18n.NumberFormatSymbols_ee_GH, goog.i18n.NumberFormatSymbols_ee_TG, goog.i18n.NumberFormatSymbols_en_150, goog.i18n.NumberFormatSymbols_en_AG, goog.i18n.NumberFormatSymbols_en_AI, goog.i18n.NumberFormatSymbols_en_AT, goog.i18n.NumberFormatSymbols_en_BB, goog.i18n.NumberFormatSymbols_en_BE, goog.i18n.NumberFormatSymbols_en_BI, goog.i18n.NumberFormatSymbols_en_BM, goog.i18n.NumberFormatSymbols_en_BS, goog.i18n.NumberFormatSymbols_en_BW, goog.i18n.NumberFormatSymbols_en_BZ, goog.i18n.NumberFormatSymbols_en_CC, goog.i18n.NumberFormatSymbols_en_CH, goog.i18n.NumberFormatSymbols_en_CK, goog.i18n.NumberFormatSymbols_en_CM, goog.i18n.NumberFormatSymbols_en_CX, goog.i18n.NumberFormatSymbols_en_CY, goog.i18n.NumberFormatSymbols_en_DE, goog.i18n.NumberFormatSymbols_en_DK, goog.i18n.NumberFormatSymbols_en_DM, goog.i18n.NumberFormatSymbols_en_ER, goog.i18n.NumberFormatSymbols_en_FI, goog.i18n.NumberFormatSymbols_en_FJ, goog.i18n.NumberFormatSymbols_en_FK, goog.i18n.NumberFormatSymbols_en_GD, goog.i18n.NumberFormatSymbols_en_GG, goog.i18n.NumberFormatSymbols_en_GH, goog.i18n.NumberFormatSymbols_en_GI, goog.i18n.NumberFormatSymbols_en_GM, goog.i18n.NumberFormatSymbols_en_GY, goog.i18n.NumberFormatSymbols_en_HK, goog.i18n.NumberFormatSymbols_en_IL, goog.i18n.NumberFormatSymbols_en_IM, goog.i18n.NumberFormatSymbols_en_JE, goog.i18n.NumberFormatSymbols_en_JM, goog.i18n.NumberFormatSymbols_en_KE, goog.i18n.NumberFormatSymbols_en_KI, goog.i18n.NumberFormatSymbols_en_KN, goog.i18n.NumberFormatSymbols_en_KY, goog.i18n.NumberFormatSymbols_en_LC, goog.i18n.NumberFormatSymbols_en_LR, goog.i18n.NumberFormatSymbols_en_LS, goog.i18n.NumberFormatSymbols_en_MG, goog.i18n.NumberFormatSymbols_en_MO, goog.i18n.NumberFormatSymbols_en_MS, goog.i18n.NumberFormatSymbols_en_MT, goog.i18n.NumberFormatSymbols_en_MU, goog.i18n.NumberFormatSymbols_en_MW, goog.i18n.NumberFormatSymbols_en_MY, goog.i18n.NumberFormatSymbols_en_NA, goog.i18n.NumberFormatSymbols_en_NF, goog.i18n.NumberFormatSymbols_en_NG, goog.i18n.NumberFormatSymbols_en_NL, goog.i18n.NumberFormatSymbols_en_NR, goog.i18n.NumberFormatSymbols_en_NU, goog.i18n.NumberFormatSymbols_en_NZ, goog.i18n.NumberFormatSymbols_en_PG, goog.i18n.NumberFormatSymbols_en_PH, goog.i18n.NumberFormatSymbols_en_PK, goog.i18n.NumberFormatSymbols_en_PN, goog.i18n.NumberFormatSymbols_en_RW, goog.i18n.NumberFormatSymbols_en_SB, goog.i18n.NumberFormatSymbols_en_SC, goog.i18n.NumberFormatSymbols_en_SD, goog.i18n.NumberFormatSymbols_en_SE, goog.i18n.NumberFormatSymbols_en_SH, goog.i18n.NumberFormatSymbols_en_SI, goog.i18n.NumberFormatSymbols_en_SL, goog.i18n.NumberFormatSymbols_en_SS, goog.i18n.NumberFormatSymbols_en_SX, goog.i18n.NumberFormatSymbols_en_SZ, goog.i18n.NumberFormatSymbols_en_TK, goog.i18n.NumberFormatSymbols_en_TO, goog.i18n.NumberFormatSymbols_en_TT, goog.i18n.NumberFormatSymbols_en_TV, goog.i18n.NumberFormatSymbols_en_TZ, goog.i18n.NumberFormatSymbols_en_UG, goog.i18n.NumberFormatSymbols_en_VC, goog.i18n.NumberFormatSymbols_en_VU, goog.i18n.NumberFormatSymbols_en_WS, goog.i18n.NumberFormatSymbols_en_ZM, goog.i18n.NumberFormatSymbols_eo, goog.i18n.NumberFormatSymbols_eo_001, goog.i18n.NumberFormatSymbols_es_AR, goog.i18n.NumberFormatSymbols_es_BO, goog.i18n.NumberFormatSymbols_es_BR, goog.i18n.NumberFormatSymbols_es_CL, goog.i18n.NumberFormatSymbols_es_CO, goog.i18n.NumberFormatSymbols_es_CR, goog.i18n.NumberFormatSymbols_es_CU, goog.i18n.NumberFormatSymbols_es_DO, goog.i18n.NumberFormatSymbols_es_EC, goog.i18n.NumberFormatSymbols_es_GQ, goog.i18n.NumberFormatSymbols_es_GT, goog.i18n.NumberFormatSymbols_es_HN, goog.i18n.NumberFormatSymbols_es_NI, goog.i18n.NumberFormatSymbols_es_PA, goog.i18n.NumberFormatSymbols_es_PE, goog.i18n.NumberFormatSymbols_es_PH, goog.i18n.NumberFormatSymbols_es_PR, goog.i18n.NumberFormatSymbols_es_PY, goog.i18n.NumberFormatSymbols_es_SV, goog.i18n.NumberFormatSymbols_es_UY, goog.i18n.NumberFormatSymbols_es_VE, goog.i18n.NumberFormatSymbols_ewo, goog.i18n.NumberFormatSymbols_ewo_CM, goog.i18n.NumberFormatSymbols_fa_AF, goog.i18n.NumberFormatSymbols_ff, goog.i18n.NumberFormatSymbols_ff_CM, goog.i18n.NumberFormatSymbols_ff_GN, goog.i18n.NumberFormatSymbols_ff_MR, goog.i18n.NumberFormatSymbols_ff_SN, goog.i18n.NumberFormatSymbols_fo, goog.i18n.NumberFormatSymbols_fo_DK, goog.i18n.NumberFormatSymbols_fo_FO, goog.i18n.NumberFormatSymbols_fr_BE, goog.i18n.NumberFormatSymbols_fr_BF, goog.i18n.NumberFormatSymbols_fr_BI, goog.i18n.NumberFormatSymbols_fr_BJ, goog.i18n.NumberFormatSymbols_fr_CD, goog.i18n.NumberFormatSymbols_fr_CF, goog.i18n.NumberFormatSymbols_fr_CG, goog.i18n.NumberFormatSymbols_fr_CH, goog.i18n.NumberFormatSymbols_fr_CI, goog.i18n.NumberFormatSymbols_fr_CM, goog.i18n.NumberFormatSymbols_fr_DJ, goog.i18n.NumberFormatSymbols_fr_DZ, goog.i18n.NumberFormatSymbols_fr_GA, goog.i18n.NumberFormatSymbols_fr_GN, goog.i18n.NumberFormatSymbols_fr_GQ, goog.i18n.NumberFormatSymbols_fr_HT, goog.i18n.NumberFormatSymbols_fr_KM, goog.i18n.NumberFormatSymbols_fr_LU, goog.i18n.NumberFormatSymbols_fr_MA, goog.i18n.NumberFormatSymbols_fr_MG, goog.i18n.NumberFormatSymbols_fr_ML, goog.i18n.NumberFormatSymbols_fr_MR, goog.i18n.NumberFormatSymbols_fr_MU, goog.i18n.NumberFormatSymbols_fr_NC, goog.i18n.NumberFormatSymbols_fr_NE, goog.i18n.NumberFormatSymbols_fr_PF, goog.i18n.NumberFormatSymbols_fr_RW, goog.i18n.NumberFormatSymbols_fr_SC, goog.i18n.NumberFormatSymbols_fr_SN, goog.i18n.NumberFormatSymbols_fr_SY, goog.i18n.NumberFormatSymbols_fr_TD, goog.i18n.NumberFormatSymbols_fr_TG, goog.i18n.NumberFormatSymbols_fr_TN, goog.i18n.NumberFormatSymbols_fr_VU, goog.i18n.NumberFormatSymbols_fr_WF, goog.i18n.NumberFormatSymbols_fur, goog.i18n.NumberFormatSymbols_fur_IT, goog.i18n.NumberFormatSymbols_fy, goog.i18n.NumberFormatSymbols_fy_NL, goog.i18n.NumberFormatSymbols_gd, goog.i18n.NumberFormatSymbols_gd_GB, goog.i18n.NumberFormatSymbols_gsw_FR, goog.i18n.NumberFormatSymbols_guz, goog.i18n.NumberFormatSymbols_guz_KE, goog.i18n.NumberFormatSymbols_gv, goog.i18n.NumberFormatSymbols_gv_IM, goog.i18n.NumberFormatSymbols_ha, goog.i18n.NumberFormatSymbols_ha_GH, goog.i18n.NumberFormatSymbols_ha_NE, goog.i18n.NumberFormatSymbols_ha_NG, goog.i18n.NumberFormatSymbols_hr_BA, goog.i18n.NumberFormatSymbols_hsb, goog.i18n.NumberFormatSymbols_hsb_DE, goog.i18n.NumberFormatSymbols_ig, goog.i18n.NumberFormatSymbols_ig_NG, goog.i18n.NumberFormatSymbols_ii, goog.i18n.NumberFormatSymbols_ii_CN, goog.i18n.NumberFormatSymbols_it_CH, goog.i18n.NumberFormatSymbols_jgo, goog.i18n.NumberFormatSymbols_jgo_CM, goog.i18n.NumberFormatSymbols_jmc, goog.i18n.NumberFormatSymbols_jmc_TZ, goog.i18n.NumberFormatSymbols_kab, goog.i18n.NumberFormatSymbols_kab_DZ, goog.i18n.NumberFormatSymbols_kam, goog.i18n.NumberFormatSymbols_kam_KE, goog.i18n.NumberFormatSymbols_kde, goog.i18n.NumberFormatSymbols_kde_TZ, goog.i18n.NumberFormatSymbols_kea, goog.i18n.NumberFormatSymbols_kea_CV, goog.i18n.NumberFormatSymbols_khq, goog.i18n.NumberFormatSymbols_khq_ML, goog.i18n.NumberFormatSymbols_ki, goog.i18n.NumberFormatSymbols_ki_KE, goog.i18n.NumberFormatSymbols_kkj, goog.i18n.NumberFormatSymbols_kkj_CM, goog.i18n.NumberFormatSymbols_kl, goog.i18n.NumberFormatSymbols_kl_GL, goog.i18n.NumberFormatSymbols_kln, goog.i18n.NumberFormatSymbols_kln_KE, goog.i18n.NumberFormatSymbols_ko_KP, goog.i18n.NumberFormatSymbols_kok, goog.i18n.NumberFormatSymbols_kok_IN, goog.i18n.NumberFormatSymbols_ks, goog.i18n.NumberFormatSymbols_ks_IN, goog.i18n.NumberFormatSymbols_ksb, goog.i18n.NumberFormatSymbols_ksb_TZ, goog.i18n.NumberFormatSymbols_ksf, goog.i18n.NumberFormatSymbols_ksf_CM, goog.i18n.NumberFormatSymbols_ksh, goog.i18n.NumberFormatSymbols_ksh_DE, goog.i18n.NumberFormatSymbols_kw, goog.i18n.NumberFormatSymbols_kw_GB, goog.i18n.NumberFormatSymbols_lag, goog.i18n.NumberFormatSymbols_lag_TZ, goog.i18n.NumberFormatSymbols_lb, goog.i18n.NumberFormatSymbols_lb_LU, goog.i18n.NumberFormatSymbols_lg, goog.i18n.NumberFormatSymbols_lg_UG, goog.i18n.NumberFormatSymbols_lkt, goog.i18n.NumberFormatSymbols_lkt_US, goog.i18n.NumberFormatSymbols_ln_AO, goog.i18n.NumberFormatSymbols_ln_CF, goog.i18n.NumberFormatSymbols_ln_CG, goog.i18n.NumberFormatSymbols_lrc, goog.i18n.NumberFormatSymbols_lrc_IQ, goog.i18n.NumberFormatSymbols_lrc_IR, goog.i18n.NumberFormatSymbols_lu, goog.i18n.NumberFormatSymbols_lu_CD, goog.i18n.NumberFormatSymbols_luo, goog.i18n.NumberFormatSymbols_luo_KE, goog.i18n.NumberFormatSymbols_luy, goog.i18n.NumberFormatSymbols_luy_KE, goog.i18n.NumberFormatSymbols_mas, goog.i18n.NumberFormatSymbols_mas_KE, goog.i18n.NumberFormatSymbols_mas_TZ, goog.i18n.NumberFormatSymbols_mer, goog.i18n.NumberFormatSymbols_mer_KE, goog.i18n.NumberFormatSymbols_mfe, goog.i18n.NumberFormatSymbols_mfe_MU, goog.i18n.NumberFormatSymbols_mg, goog.i18n.NumberFormatSymbols_mg_MG, goog.i18n.NumberFormatSymbols_mgh, goog.i18n.NumberFormatSymbols_mgh_MZ, goog.i18n.NumberFormatSymbols_mgo, goog.i18n.NumberFormatSymbols_mgo_CM, goog.i18n.NumberFormatSymbols_ms_BN, goog.i18n.NumberFormatSymbols_ms_SG, goog.i18n.NumberFormatSymbols_mua, goog.i18n.NumberFormatSymbols_mua_CM, goog.i18n.NumberFormatSymbols_mzn, goog.i18n.NumberFormatSymbols_mzn_IR, goog.i18n.NumberFormatSymbols_naq, goog.i18n.NumberFormatSymbols_naq_NA, goog.i18n.NumberFormatSymbols_nd, goog.i18n.NumberFormatSymbols_nd_ZW, goog.i18n.NumberFormatSymbols_ne_IN, goog.i18n.NumberFormatSymbols_nl_AW, goog.i18n.NumberFormatSymbols_nl_BE, goog.i18n.NumberFormatSymbols_nl_BQ, goog.i18n.NumberFormatSymbols_nl_CW, goog.i18n.NumberFormatSymbols_nl_SR, goog.i18n.NumberFormatSymbols_nl_SX, goog.i18n.NumberFormatSymbols_nmg, goog.i18n.NumberFormatSymbols_nmg_CM, goog.i18n.NumberFormatSymbols_nn, goog.i18n.NumberFormatSymbols_nn_NO, goog.i18n.NumberFormatSymbols_nnh, goog.i18n.NumberFormatSymbols_nnh_CM, goog.i18n.NumberFormatSymbols_nus, goog.i18n.NumberFormatSymbols_nus_SS, goog.i18n.NumberFormatSymbols_nyn, goog.i18n.NumberFormatSymbols_nyn_UG, goog.i18n.NumberFormatSymbols_om, goog.i18n.NumberFormatSymbols_om_ET, goog.i18n.NumberFormatSymbols_om_KE, goog.i18n.NumberFormatSymbols_os, goog.i18n.NumberFormatSymbols_os_GE, goog.i18n.NumberFormatSymbols_os_RU, goog.i18n.NumberFormatSymbols_pa_Arab, goog.i18n.NumberFormatSymbols_pa_Arab_PK, goog.i18n.NumberFormatSymbols_prg, goog.i18n.NumberFormatSymbols_prg_001, goog.i18n.NumberFormatSymbols_ps, goog.i18n.NumberFormatSymbols_ps_AF, goog.i18n.NumberFormatSymbols_pt_AO, goog.i18n.NumberFormatSymbols_pt_CH, goog.i18n.NumberFormatSymbols_pt_CV, goog.i18n.NumberFormatSymbols_pt_GQ, goog.i18n.NumberFormatSymbols_pt_GW, goog.i18n.NumberFormatSymbols_pt_LU, goog.i18n.NumberFormatSymbols_pt_MO, goog.i18n.NumberFormatSymbols_pt_MZ, goog.i18n.NumberFormatSymbols_pt_ST, goog.i18n.NumberFormatSymbols_pt_TL, goog.i18n.NumberFormatSymbols_qu, goog.i18n.NumberFormatSymbols_qu_BO, goog.i18n.NumberFormatSymbols_qu_EC, goog.i18n.NumberFormatSymbols_qu_PE, goog.i18n.NumberFormatSymbols_rm, goog.i18n.NumberFormatSymbols_rm_CH, goog.i18n.NumberFormatSymbols_rn, goog.i18n.NumberFormatSymbols_rn_BI, goog.i18n.NumberFormatSymbols_ro_MD, goog.i18n.NumberFormatSymbols_rof, goog.i18n.NumberFormatSymbols_rof_TZ, goog.i18n.NumberFormatSymbols_ru_BY, goog.i18n.NumberFormatSymbols_ru_KG, goog.i18n.NumberFormatSymbols_ru_KZ, goog.i18n.NumberFormatSymbols_ru_MD, goog.i18n.NumberFormatSymbols_ru_UA, goog.i18n.NumberFormatSymbols_rw, goog.i18n.NumberFormatSymbols_rw_RW, goog.i18n.NumberFormatSymbols_rwk, goog.i18n.NumberFormatSymbols_rwk_TZ, goog.i18n.NumberFormatSymbols_sah, goog.i18n.NumberFormatSymbols_sah_RU, goog.i18n.NumberFormatSymbols_saq, goog.i18n.NumberFormatSymbols_saq_KE, goog.i18n.NumberFormatSymbols_sbp, goog.i18n.NumberFormatSymbols_sbp_TZ, goog.i18n.NumberFormatSymbols_se, goog.i18n.NumberFormatSymbols_se_FI, goog.i18n.NumberFormatSymbols_se_NO, goog.i18n.NumberFormatSymbols_se_SE, goog.i18n.NumberFormatSymbols_seh, goog.i18n.NumberFormatSymbols_seh_MZ, goog.i18n.NumberFormatSymbols_ses, goog.i18n.NumberFormatSymbols_ses_ML, goog.i18n.NumberFormatSymbols_sg, goog.i18n.NumberFormatSymbols_sg_CF, goog.i18n.NumberFormatSymbols_shi, goog.i18n.NumberFormatSymbols_shi_Latn, goog.i18n.NumberFormatSymbols_shi_Latn_MA, goog.i18n.NumberFormatSymbols_shi_Tfng, goog.i18n.NumberFormatSymbols_shi_Tfng_MA, goog.i18n.NumberFormatSymbols_smn, goog.i18n.NumberFormatSymbols_smn_FI, goog.i18n.NumberFormatSymbols_sn, goog.i18n.NumberFormatSymbols_sn_ZW, goog.i18n.NumberFormatSymbols_so, goog.i18n.NumberFormatSymbols_so_DJ, goog.i18n.NumberFormatSymbols_so_ET, goog.i18n.NumberFormatSymbols_so_KE, goog.i18n.NumberFormatSymbols_so_SO, goog.i18n.NumberFormatSymbols_sq_MK, goog.i18n.NumberFormatSymbols_sq_XK, goog.i18n.NumberFormatSymbols_sr_Cyrl_BA, goog.i18n.NumberFormatSymbols_sr_Cyrl_ME, goog.i18n.NumberFormatSymbols_sr_Cyrl_XK, goog.i18n.NumberFormatSymbols_sr_Latn_BA, goog.i18n.NumberFormatSymbols_sr_Latn_ME, goog.i18n.NumberFormatSymbols_sr_Latn_XK, goog.i18n.NumberFormatSymbols_sv_AX, goog.i18n.NumberFormatSymbols_sv_FI, goog.i18n.NumberFormatSymbols_sw_CD, goog.i18n.NumberFormatSymbols_sw_KE, goog.i18n.NumberFormatSymbols_sw_UG, goog.i18n.NumberFormatSymbols_ta_LK, goog.i18n.NumberFormatSymbols_ta_MY, goog.i18n.NumberFormatSymbols_ta_SG, goog.i18n.NumberFormatSymbols_teo, goog.i18n.NumberFormatSymbols_teo_KE, goog.i18n.NumberFormatSymbols_teo_UG, goog.i18n.NumberFormatSymbols_ti, goog.i18n.NumberFormatSymbols_ti_ER, goog.i18n.NumberFormatSymbols_ti_ET, goog.i18n.NumberFormatSymbols_tk, goog.i18n.NumberFormatSymbols_tk_TM, goog.i18n.NumberFormatSymbols_to, goog.i18n.NumberFormatSymbols_to_TO, goog.i18n.NumberFormatSymbols_tr_CY, goog.i18n.NumberFormatSymbols_twq, goog.i18n.NumberFormatSymbols_twq_NE, goog.i18n.NumberFormatSymbols_tzm, goog.i18n.NumberFormatSymbols_tzm_MA, goog.i18n.NumberFormatSymbols_ug, goog.i18n.NumberFormatSymbols_ug_CN, goog.i18n.NumberFormatSymbols_ur_IN, goog.i18n.NumberFormatSymbols_uz_Arab, goog.i18n.NumberFormatSymbols_uz_Arab_AF, goog.i18n.NumberFormatSymbols_uz_Cyrl, goog.i18n.NumberFormatSymbols_uz_Cyrl_UZ, goog.i18n.NumberFormatSymbols_vai, goog.i18n.NumberFormatSymbols_vai_Latn, goog.i18n.NumberFormatSymbols_vai_Latn_LR, goog.i18n.NumberFormatSymbols_vai_Vaii, goog.i18n.NumberFormatSymbols_vai_Vaii_LR, goog.i18n.NumberFormatSymbols_vo, goog.i18n.NumberFormatSymbols_vo_001, goog.i18n.NumberFormatSymbols_vun, goog.i18n.NumberFormatSymbols_vun_TZ, goog.i18n.NumberFormatSymbols_wae, goog.i18n.NumberFormatSymbols_wae_CH, goog.i18n.NumberFormatSymbols_xog, goog.i18n.NumberFormatSymbols_xog_UG, goog.i18n.NumberFormatSymbols_yav, goog.i18n.NumberFormatSymbols_yav_CM, goog.i18n.NumberFormatSymbols_yi, goog.i18n.NumberFormatSymbols_yi_001, goog.i18n.NumberFormatSymbols_yo, goog.i18n.NumberFormatSymbols_yo_BJ, goog.i18n.NumberFormatSymbols_yo_NG, goog.i18n.NumberFormatSymbols_yue, goog.i18n.NumberFormatSymbols_yue_HK, goog.i18n.NumberFormatSymbols_zgh, goog.i18n.NumberFormatSymbols_zgh_MA, goog.i18n.NumberFormatSymbols_zh_Hans_HK, goog.i18n.NumberFormatSymbols_zh_Hans_MO, goog.i18n.NumberFormatSymbols_zh_Hans_SG, goog.i18n.NumberFormatSymbols_zh_Hant, goog.i18n.NumberFormatSymbols_zh_Hant_HK, goog.i18n.NumberFormatSymbols_zh_Hant_MO, goog.i18n.NumberFormatSymbols_zh_Hant_TW] from input ../closure-library/closure/goog/i18n/numberformatsymbolsext.js
//!! Processing provides [goog.labs.html.Sanitizer] from input ../closure-library/closure/goog/labs/html/sanitizer.js
//!! Processing provides [goog.dom.pattern.Text] from input ../closure-library/closure/goog/dom/pattern/text.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_serviceworker.js
//!! Processing provides [goog.messaging.MessageChannel] from input ../closure-library/closure/goog/messaging/messagechannel.js
//!! Processing provides [goog.editor.plugins.RemoveFormatting] from input ../closure-library/closure/goog/editor/plugins/removeformatting.js
//!! Processing provides [goog.graphics.SvgEllipseElement, goog.graphics.SvgGroupElement, goog.graphics.SvgImageElement, goog.graphics.SvgPathElement, goog.graphics.SvgRectElement, goog.graphics.SvgTextElement] from input ../closure-library/closure/goog/graphics/svgelement.js
//!! Processing provides [goog.string.path] from input ../closure-library/closure/goog/string/path.js
//!! Processing provides [goog.dom.tags] from input ../closure-library/closure/goog/dom/tags.js
//!! Processing provides [goog.html.SafeHtml] from input ../closure-library/closure/goog/html/safehtml.js
//!! Processing provides [goog.math.Rect] from input ../closure-library/closure/goog/math/rect.js
//!! Processing provides [goog.math.Vec2] from input ../closure-library/closure/goog/math/vec2.js
//!! Processing provides [goog.graphics.Path, goog.graphics.Path.Segment] from input ../closure-library/closure/goog/graphics/path.js
//!! Processing provides [goog.labs.userAgent.device] from input ../closure-library/closure/goog/labs/useragent/device.js
//!! Processing provides [goog.dom.TypedTagName] from input ../closure-library/closure/goog/dom/typedtagname.js
//!! Processing provides [goog.ui.editor.Bubble] from input ../closure-library/closure/goog/ui/editor/bubble.js
//!! Processing provides [goog.locale.TimeZoneFingerprint] from input ../closure-library/closure/goog/locale/timezonefingerprint.js
//!! Processing provides [goog.dom.pattern.callback.Test] from input ../closure-library/closure/goog/dom/pattern/callback/test.js
//!! Processing provides [goog.editor.range, goog.editor.range.Point] from input ../closure-library/closure/goog/editor/range.js
//!! Processing provides [goog.ui.registry] from input ../closure-library/closure/goog/ui/registry.js
//!! Processing provides [goog.editor.plugins.LinkShortcutPlugin] from input ../closure-library/closure/goog/editor/plugins/linkshortcutplugin.js
//!! Processing provides [goog.graphics.paths] from input ../closure-library/closure/goog/graphics/paths.js
//!! Processing provides [goog.labs.net.webChannel.requestStats, goog.labs.net.webChannel.requestStats.Event, goog.labs.net.webChannel.requestStats.ServerReachability, goog.labs.net.webChannel.requestStats.ServerReachabilityEvent, goog.labs.net.webChannel.requestStats.Stat, goog.labs.net.webChannel.requestStats.StatEvent, goog.labs.net.webChannel.requestStats.TimingEvent] from input ../closure-library/closure/goog/labs/net/webchannel/requeststats.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/webkit_notifications.js
//!! Processing provides [goog.net.WebChannel] from input ../closure-library/closure/goog/labs/net/webchannel.js
//!! Processing provides [goog.labs.net.webChannel.WebChannelBase] from input ../closure-library/closure/goog/labs/net/webchannel/webchannelbase.js
//!! Processing provides [goog.events.actionEventWrapper] from input ../closure-library/closure/goog/events/actioneventwrapper.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/mediasource.js
//!! Processing provides [goog.events.FileDropHandler, goog.events.FileDropHandler.EventType] from input ../closure-library/closure/goog/events/filedrophandler.js
//!! Processing provides [goog.labs.userAgent.util] from input ../closure-library/closure/goog/labs/useragent/util.js
//!! Processing provides [goog.fx.DragDrop] from input ../closure-library/closure/goog/fx/dragdrop.js
//!! Processing provides [goog.i18n.DateTimePatternsExt, goog.i18n.DateTimePatterns_af_NA, goog.i18n.DateTimePatterns_af_ZA, goog.i18n.DateTimePatterns_agq, goog.i18n.DateTimePatterns_agq_CM, goog.i18n.DateTimePatterns_ak, goog.i18n.DateTimePatterns_ak_GH, goog.i18n.DateTimePatterns_am_ET, goog.i18n.DateTimePatterns_ar_001, goog.i18n.DateTimePatterns_ar_AE, goog.i18n.DateTimePatterns_ar_BH, goog.i18n.DateTimePatterns_ar_DJ, goog.i18n.DateTimePatterns_ar_DZ, goog.i18n.DateTimePatterns_ar_EG, goog.i18n.DateTimePatterns_ar_EH, goog.i18n.DateTimePatterns_ar_ER, goog.i18n.DateTimePatterns_ar_IL, goog.i18n.DateTimePatterns_ar_IQ, goog.i18n.DateTimePatterns_ar_JO, goog.i18n.DateTimePatterns_ar_KM, goog.i18n.DateTimePatterns_ar_KW, goog.i18n.DateTimePatterns_ar_LB, goog.i18n.DateTimePatterns_ar_LY, goog.i18n.DateTimePatterns_ar_MA, goog.i18n.DateTimePatterns_ar_MR, goog.i18n.DateTimePatterns_ar_OM, goog.i18n.DateTimePatterns_ar_PS, goog.i18n.DateTimePatterns_ar_QA, goog.i18n.DateTimePatterns_ar_SA, goog.i18n.DateTimePatterns_ar_SD, goog.i18n.DateTimePatterns_ar_SO, goog.i18n.DateTimePatterns_ar_SS, goog.i18n.DateTimePatterns_ar_SY, goog.i18n.DateTimePatterns_ar_TD, goog.i18n.DateTimePatterns_ar_TN, goog.i18n.DateTimePatterns_ar_XB, goog.i18n.DateTimePatterns_ar_YE, goog.i18n.DateTimePatterns_as, goog.i18n.DateTimePatterns_as_IN, goog.i18n.DateTimePatterns_asa, goog.i18n.DateTimePatterns_asa_TZ, goog.i18n.DateTimePatterns_ast, goog.i18n.DateTimePatterns_ast_ES, goog.i18n.DateTimePatterns_az_Cyrl, goog.i18n.DateTimePatterns_az_Cyrl_AZ, goog.i18n.DateTimePatterns_az_Latn, goog.i18n.DateTimePatterns_az_Latn_AZ, goog.i18n.DateTimePatterns_bas, goog.i18n.DateTimePatterns_bas_CM, goog.i18n.DateTimePatterns_be_BY, goog.i18n.DateTimePatterns_bem, goog.i18n.DateTimePatterns_bem_ZM, goog.i18n.DateTimePatterns_bez, goog.i18n.DateTimePatterns_bez_TZ, goog.i18n.DateTimePatterns_bg_BG, goog.i18n.DateTimePatterns_bm, goog.i18n.DateTimePatterns_bm_ML, goog.i18n.DateTimePatterns_bn_BD, goog.i18n.DateTimePatterns_bn_IN, goog.i18n.DateTimePatterns_bo, goog.i18n.DateTimePatterns_bo_CN, goog.i18n.DateTimePatterns_bo_IN, goog.i18n.DateTimePatterns_br_FR, goog.i18n.DateTimePatterns_brx, goog.i18n.DateTimePatterns_brx_IN, goog.i18n.DateTimePatterns_bs_Cyrl, goog.i18n.DateTimePatterns_bs_Cyrl_BA, goog.i18n.DateTimePatterns_bs_Latn, goog.i18n.DateTimePatterns_bs_Latn_BA, goog.i18n.DateTimePatterns_ca_AD, goog.i18n.DateTimePatterns_ca_ES, goog.i18n.DateTimePatterns_ca_FR, goog.i18n.DateTimePatterns_ca_IT, goog.i18n.DateTimePatterns_ce, goog.i18n.DateTimePatterns_ce_RU, goog.i18n.DateTimePatterns_cgg, goog.i18n.DateTimePatterns_cgg_UG, goog.i18n.DateTimePatterns_chr_US, goog.i18n.DateTimePatterns_cs_CZ, goog.i18n.DateTimePatterns_cy_GB, goog.i18n.DateTimePatterns_da_DK, goog.i18n.DateTimePatterns_da_GL, goog.i18n.DateTimePatterns_dav, goog.i18n.DateTimePatterns_dav_KE, goog.i18n.DateTimePatterns_de_BE, goog.i18n.DateTimePatterns_de_DE, goog.i18n.DateTimePatterns_de_LI, goog.i18n.DateTimePatterns_de_LU, goog.i18n.DateTimePatterns_dje, goog.i18n.DateTimePatterns_dje_NE, goog.i18n.DateTimePatterns_dsb, goog.i18n.DateTimePatterns_dsb_DE, goog.i18n.DateTimePatterns_dua, goog.i18n.DateTimePatterns_dua_CM, goog.i18n.DateTimePatterns_dyo, goog.i18n.DateTimePatterns_dyo_SN, goog.i18n.DateTimePatterns_dz, goog.i18n.DateTimePatterns_dz_BT, goog.i18n.DateTimePatterns_ebu, goog.i18n.DateTimePatterns_ebu_KE, goog.i18n.DateTimePatterns_ee, goog.i18n.DateTimePatterns_ee_GH, goog.i18n.DateTimePatterns_ee_TG, goog.i18n.DateTimePatterns_el_CY, goog.i18n.DateTimePatterns_el_GR, goog.i18n.DateTimePatterns_en_001, goog.i18n.DateTimePatterns_en_150, goog.i18n.DateTimePatterns_en_AG, goog.i18n.DateTimePatterns_en_AI, goog.i18n.DateTimePatterns_en_AS, goog.i18n.DateTimePatterns_en_AT, goog.i18n.DateTimePatterns_en_BB, goog.i18n.DateTimePatterns_en_BE, goog.i18n.DateTimePatterns_en_BI, goog.i18n.DateTimePatterns_en_BM, goog.i18n.DateTimePatterns_en_BS, goog.i18n.DateTimePatterns_en_BW, goog.i18n.DateTimePatterns_en_BZ, goog.i18n.DateTimePatterns_en_CC, goog.i18n.DateTimePatterns_en_CH, goog.i18n.DateTimePatterns_en_CK, goog.i18n.DateTimePatterns_en_CM, goog.i18n.DateTimePatterns_en_CX, goog.i18n.DateTimePatterns_en_CY, goog.i18n.DateTimePatterns_en_DE, goog.i18n.DateTimePatterns_en_DG, goog.i18n.DateTimePatterns_en_DK, goog.i18n.DateTimePatterns_en_DM, goog.i18n.DateTimePatterns_en_ER, goog.i18n.DateTimePatterns_en_FI, goog.i18n.DateTimePatterns_en_FJ, goog.i18n.DateTimePatterns_en_FK, goog.i18n.DateTimePatterns_en_FM, goog.i18n.DateTimePatterns_en_GD, goog.i18n.DateTimePatterns_en_GG, goog.i18n.DateTimePatterns_en_GH, goog.i18n.DateTimePatterns_en_GI, goog.i18n.DateTimePatterns_en_GM, goog.i18n.DateTimePatterns_en_GU, goog.i18n.DateTimePatterns_en_GY, goog.i18n.DateTimePatterns_en_HK, goog.i18n.DateTimePatterns_en_IL, goog.i18n.DateTimePatterns_en_IM, goog.i18n.DateTimePatterns_en_IO, goog.i18n.DateTimePatterns_en_JE, goog.i18n.DateTimePatterns_en_JM, goog.i18n.DateTimePatterns_en_KE, goog.i18n.DateTimePatterns_en_KI, goog.i18n.DateTimePatterns_en_KN, goog.i18n.DateTimePatterns_en_KY, goog.i18n.DateTimePatterns_en_LC, goog.i18n.DateTimePatterns_en_LR, goog.i18n.DateTimePatterns_en_LS, goog.i18n.DateTimePatterns_en_MG, goog.i18n.DateTimePatterns_en_MH, goog.i18n.DateTimePatterns_en_MO, goog.i18n.DateTimePatterns_en_MP, goog.i18n.DateTimePatterns_en_MS, goog.i18n.DateTimePatterns_en_MT, goog.i18n.DateTimePatterns_en_MU, goog.i18n.DateTimePatterns_en_MW, goog.i18n.DateTimePatterns_en_MY, goog.i18n.DateTimePatterns_en_NA, goog.i18n.DateTimePatterns_en_NF, goog.i18n.DateTimePatterns_en_NG, goog.i18n.DateTimePatterns_en_NL, goog.i18n.DateTimePatterns_en_NR, goog.i18n.DateTimePatterns_en_NU, goog.i18n.DateTimePatterns_en_NZ, goog.i18n.DateTimePatterns_en_PG, goog.i18n.DateTimePatterns_en_PH, goog.i18n.DateTimePatterns_en_PK, goog.i18n.DateTimePatterns_en_PN, goog.i18n.DateTimePatterns_en_PR, goog.i18n.DateTimePatterns_en_PW, goog.i18n.DateTimePatterns_en_RW, goog.i18n.DateTimePatterns_en_SB, goog.i18n.DateTimePatterns_en_SC, goog.i18n.DateTimePatterns_en_SD, goog.i18n.DateTimePatterns_en_SE, goog.i18n.DateTimePatterns_en_SH, goog.i18n.DateTimePatterns_en_SI, goog.i18n.DateTimePatterns_en_SL, goog.i18n.DateTimePatterns_en_SS, goog.i18n.DateTimePatterns_en_SX, goog.i18n.DateTimePatterns_en_SZ, goog.i18n.DateTimePatterns_en_TC, goog.i18n.DateTimePatterns_en_TK, goog.i18n.DateTimePatterns_en_TO, goog.i18n.DateTimePatterns_en_TT, goog.i18n.DateTimePatterns_en_TV, goog.i18n.DateTimePatterns_en_TZ, goog.i18n.DateTimePatterns_en_UG, goog.i18n.DateTimePatterns_en_UM, goog.i18n.DateTimePatterns_en_US_POSIX, goog.i18n.DateTimePatterns_en_VC, goog.i18n.DateTimePatterns_en_VG, goog.i18n.DateTimePatterns_en_VI, goog.i18n.DateTimePatterns_en_VU, goog.i18n.DateTimePatterns_en_WS, goog.i18n.DateTimePatterns_en_XA, goog.i18n.DateTimePatterns_en_ZM, goog.i18n.DateTimePatterns_en_ZW, goog.i18n.DateTimePatterns_eo, goog.i18n.DateTimePatterns_es_AR, goog.i18n.DateTimePatterns_es_BO, goog.i18n.DateTimePatterns_es_CL, goog.i18n.DateTimePatterns_es_CO, goog.i18n.DateTimePatterns_es_CR, goog.i18n.DateTimePatterns_es_CU, goog.i18n.DateTimePatterns_es_DO, goog.i18n.DateTimePatterns_es_EA, goog.i18n.DateTimePatterns_es_EC, goog.i18n.DateTimePatterns_es_GQ, goog.i18n.DateTimePatterns_es_GT, goog.i18n.DateTimePatterns_es_HN, goog.i18n.DateTimePatterns_es_IC, goog.i18n.DateTimePatterns_es_NI, goog.i18n.DateTimePatterns_es_PA, goog.i18n.DateTimePatterns_es_PE, goog.i18n.DateTimePatterns_es_PH, goog.i18n.DateTimePatterns_es_PR, goog.i18n.DateTimePatterns_es_PY, goog.i18n.DateTimePatterns_es_SV, goog.i18n.DateTimePatterns_es_UY, goog.i18n.DateTimePatterns_es_VE, goog.i18n.DateTimePatterns_et_EE, goog.i18n.DateTimePatterns_eu_ES, goog.i18n.DateTimePatterns_ewo, goog.i18n.DateTimePatterns_ewo_CM, goog.i18n.DateTimePatterns_fa_AF, goog.i18n.DateTimePatterns_fa_IR, goog.i18n.DateTimePatterns_ff, goog.i18n.DateTimePatterns_ff_CM, goog.i18n.DateTimePatterns_ff_GN, goog.i18n.DateTimePatterns_ff_MR, goog.i18n.DateTimePatterns_ff_SN, goog.i18n.DateTimePatterns_fi_FI, goog.i18n.DateTimePatterns_fil_PH, goog.i18n.DateTimePatterns_fo, goog.i18n.DateTimePatterns_fo_DK, goog.i18n.DateTimePatterns_fo_FO, goog.i18n.DateTimePatterns_fr_BE, goog.i18n.DateTimePatterns_fr_BF, goog.i18n.DateTimePatterns_fr_BI, goog.i18n.DateTimePatterns_fr_BJ, goog.i18n.DateTimePatterns_fr_BL, goog.i18n.DateTimePatterns_fr_CD, goog.i18n.DateTimePatterns_fr_CF, goog.i18n.DateTimePatterns_fr_CG, goog.i18n.DateTimePatterns_fr_CH, goog.i18n.DateTimePatterns_fr_CI, goog.i18n.DateTimePatterns_fr_CM, goog.i18n.DateTimePatterns_fr_DJ, goog.i18n.DateTimePatterns_fr_DZ, goog.i18n.DateTimePatterns_fr_FR, goog.i18n.DateTimePatterns_fr_GA, goog.i18n.DateTimePatterns_fr_GF, goog.i18n.DateTimePatterns_fr_GN, goog.i18n.DateTimePatterns_fr_GP, goog.i18n.DateTimePatterns_fr_GQ, goog.i18n.DateTimePatterns_fr_HT, goog.i18n.DateTimePatterns_fr_KM, goog.i18n.DateTimePatterns_fr_LU, goog.i18n.DateTimePatterns_fr_MA, goog.i18n.DateTimePatterns_fr_MC, goog.i18n.DateTimePatterns_fr_MF, goog.i18n.DateTimePatterns_fr_MG, goog.i18n.DateTimePatterns_fr_ML, goog.i18n.DateTimePatterns_fr_MQ, goog.i18n.DateTimePatterns_fr_MR, goog.i18n.DateTimePatterns_fr_MU, goog.i18n.DateTimePatterns_fr_NC, goog.i18n.DateTimePatterns_fr_NE, goog.i18n.DateTimePatterns_fr_PF, goog.i18n.DateTimePatterns_fr_PM, goog.i18n.DateTimePatterns_fr_RE, goog.i18n.DateTimePatterns_fr_RW, goog.i18n.DateTimePatterns_fr_SC, goog.i18n.DateTimePatterns_fr_SN, goog.i18n.DateTimePatterns_fr_SY, goog.i18n.DateTimePatterns_fr_TD, goog.i18n.DateTimePatterns_fr_TG, goog.i18n.DateTimePatterns_fr_TN, goog.i18n.DateTimePatterns_fr_VU, goog.i18n.DateTimePatterns_fr_WF, goog.i18n.DateTimePatterns_fr_YT, goog.i18n.DateTimePatterns_fur, goog.i18n.DateTimePatterns_fur_IT, goog.i18n.DateTimePatterns_fy, goog.i18n.DateTimePatterns_fy_NL, goog.i18n.DateTimePatterns_ga_IE, goog.i18n.DateTimePatterns_gd, goog.i18n.DateTimePatterns_gd_GB, goog.i18n.DateTimePatterns_gl_ES, goog.i18n.DateTimePatterns_gsw_CH, goog.i18n.DateTimePatterns_gsw_FR, goog.i18n.DateTimePatterns_gsw_LI, goog.i18n.DateTimePatterns_gu_IN, goog.i18n.DateTimePatterns_guz, goog.i18n.DateTimePatterns_guz_KE, goog.i18n.DateTimePatterns_gv, goog.i18n.DateTimePatterns_gv_IM, goog.i18n.DateTimePatterns_ha, goog.i18n.DateTimePatterns_ha_GH, goog.i18n.DateTimePatterns_ha_NE, goog.i18n.DateTimePatterns_ha_NG, goog.i18n.DateTimePatterns_haw_US, goog.i18n.DateTimePatterns_he_IL, goog.i18n.DateTimePatterns_hi_IN, goog.i18n.DateTimePatterns_hr_BA, goog.i18n.DateTimePatterns_hr_HR, goog.i18n.DateTimePatterns_hsb, goog.i18n.DateTimePatterns_hsb_DE, goog.i18n.DateTimePatterns_hu_HU, goog.i18n.DateTimePatterns_hy_AM, goog.i18n.DateTimePatterns_id_ID, goog.i18n.DateTimePatterns_ig, goog.i18n.DateTimePatterns_ig_NG, goog.i18n.DateTimePatterns_ii, goog.i18n.DateTimePatterns_ii_CN, goog.i18n.DateTimePatterns_is_IS, goog.i18n.DateTimePatterns_it_CH, goog.i18n.DateTimePatterns_it_IT, goog.i18n.DateTimePatterns_it_SM, goog.i18n.DateTimePatterns_ja_JP, goog.i18n.DateTimePatterns_jgo, goog.i18n.DateTimePatterns_jgo_CM, goog.i18n.DateTimePatterns_jmc, goog.i18n.DateTimePatterns_jmc_TZ, goog.i18n.DateTimePatterns_ka_GE, goog.i18n.DateTimePatterns_kab, goog.i18n.DateTimePatterns_kab_DZ, goog.i18n.DateTimePatterns_kam, goog.i18n.DateTimePatterns_kam_KE, goog.i18n.DateTimePatterns_kde, goog.i18n.DateTimePatterns_kde_TZ, goog.i18n.DateTimePatterns_kea, goog.i18n.DateTimePatterns_kea_CV, goog.i18n.DateTimePatterns_khq, goog.i18n.DateTimePatterns_khq_ML, goog.i18n.DateTimePatterns_ki, goog.i18n.DateTimePatterns_ki_KE, goog.i18n.DateTimePatterns_kk_KZ, goog.i18n.DateTimePatterns_kkj, goog.i18n.DateTimePatterns_kkj_CM, goog.i18n.DateTimePatterns_kl, goog.i18n.DateTimePatterns_kl_GL, goog.i18n.DateTimePatterns_kln, goog.i18n.DateTimePatterns_kln_KE, goog.i18n.DateTimePatterns_km_KH, goog.i18n.DateTimePatterns_kn_IN, goog.i18n.DateTimePatterns_ko_KP, goog.i18n.DateTimePatterns_ko_KR, goog.i18n.DateTimePatterns_kok, goog.i18n.DateTimePatterns_kok_IN, goog.i18n.DateTimePatterns_ks, goog.i18n.DateTimePatterns_ks_IN, goog.i18n.DateTimePatterns_ksb, goog.i18n.DateTimePatterns_ksb_TZ, goog.i18n.DateTimePatterns_ksf, goog.i18n.DateTimePatterns_ksf_CM, goog.i18n.DateTimePatterns_ksh, goog.i18n.DateTimePatterns_ksh_DE, goog.i18n.DateTimePatterns_kw, goog.i18n.DateTimePatterns_kw_GB, goog.i18n.DateTimePatterns_ky_KG, goog.i18n.DateTimePatterns_lag, goog.i18n.DateTimePatterns_lag_TZ, goog.i18n.DateTimePatterns_lb, goog.i18n.DateTimePatterns_lb_LU, goog.i18n.DateTimePatterns_lg, goog.i18n.DateTimePatterns_lg_UG, goog.i18n.DateTimePatterns_lkt, goog.i18n.DateTimePatterns_lkt_US, goog.i18n.DateTimePatterns_ln_AO, goog.i18n.DateTimePatterns_ln_CD, goog.i18n.DateTimePatterns_ln_CF, goog.i18n.DateTimePatterns_ln_CG, goog.i18n.DateTimePatterns_lo_LA, goog.i18n.DateTimePatterns_lrc, goog.i18n.DateTimePatterns_lrc_IQ, goog.i18n.DateTimePatterns_lrc_IR, goog.i18n.DateTimePatterns_lt_LT, goog.i18n.DateTimePatterns_lu, goog.i18n.DateTimePatterns_lu_CD, goog.i18n.DateTimePatterns_luo, goog.i18n.DateTimePatterns_luo_KE, goog.i18n.DateTimePatterns_luy, goog.i18n.DateTimePatterns_luy_KE, goog.i18n.DateTimePatterns_lv_LV, goog.i18n.DateTimePatterns_mas, goog.i18n.DateTimePatterns_mas_KE, goog.i18n.DateTimePatterns_mas_TZ, goog.i18n.DateTimePatterns_mer, goog.i18n.DateTimePatterns_mer_KE, goog.i18n.DateTimePatterns_mfe, goog.i18n.DateTimePatterns_mfe_MU, goog.i18n.DateTimePatterns_mg, goog.i18n.DateTimePatterns_mg_MG, goog.i18n.DateTimePatterns_mgh, goog.i18n.DateTimePatterns_mgh_MZ, goog.i18n.DateTimePatterns_mgo, goog.i18n.DateTimePatterns_mgo_CM, goog.i18n.DateTimePatterns_mk_MK, goog.i18n.DateTimePatterns_ml_IN, goog.i18n.DateTimePatterns_mn_MN, goog.i18n.DateTimePatterns_mr_IN, goog.i18n.DateTimePatterns_ms_BN, goog.i18n.DateTimePatterns_ms_MY, goog.i18n.DateTimePatterns_ms_SG, goog.i18n.DateTimePatterns_mt_MT, goog.i18n.DateTimePatterns_mua, goog.i18n.DateTimePatterns_mua_CM, goog.i18n.DateTimePatterns_my_MM, goog.i18n.DateTimePatterns_mzn, goog.i18n.DateTimePatterns_mzn_IR, goog.i18n.DateTimePatterns_naq, goog.i18n.DateTimePatterns_naq_NA, goog.i18n.DateTimePatterns_nb_NO, goog.i18n.DateTimePatterns_nb_SJ, goog.i18n.DateTimePatterns_nd, goog.i18n.DateTimePatterns_nd_ZW, goog.i18n.DateTimePatterns_ne_IN, goog.i18n.DateTimePatterns_ne_NP, goog.i18n.DateTimePatterns_nl_AW, goog.i18n.DateTimePatterns_nl_BE, goog.i18n.DateTimePatterns_nl_BQ, goog.i18n.DateTimePatterns_nl_CW, goog.i18n.DateTimePatterns_nl_NL, goog.i18n.DateTimePatterns_nl_SR, goog.i18n.DateTimePatterns_nl_SX, goog.i18n.DateTimePatterns_nmg, goog.i18n.DateTimePatterns_nmg_CM, goog.i18n.DateTimePatterns_nn, goog.i18n.DateTimePatterns_nn_NO, goog.i18n.DateTimePatterns_nnh, goog.i18n.DateTimePatterns_nnh_CM, goog.i18n.DateTimePatterns_nus, goog.i18n.DateTimePatterns_nus_SS, goog.i18n.DateTimePatterns_nyn, goog.i18n.DateTimePatterns_nyn_UG, goog.i18n.DateTimePatterns_om, goog.i18n.DateTimePatterns_om_ET, goog.i18n.DateTimePatterns_om_KE, goog.i18n.DateTimePatterns_or_IN, goog.i18n.DateTimePatterns_os, goog.i18n.DateTimePatterns_os_GE, goog.i18n.DateTimePatterns_os_RU, goog.i18n.DateTimePatterns_pa_Arab, goog.i18n.DateTimePatterns_pa_Arab_PK, goog.i18n.DateTimePatterns_pa_Guru, goog.i18n.DateTimePatterns_pa_Guru_IN, goog.i18n.DateTimePatterns_pl_PL, goog.i18n.DateTimePatterns_ps, goog.i18n.DateTimePatterns_ps_AF, goog.i18n.DateTimePatterns_pt_AO, goog.i18n.DateTimePatterns_pt_CV, goog.i18n.DateTimePatterns_pt_GW, goog.i18n.DateTimePatterns_pt_MO, goog.i18n.DateTimePatterns_pt_MZ, goog.i18n.DateTimePatterns_pt_ST, goog.i18n.DateTimePatterns_pt_TL, goog.i18n.DateTimePatterns_qu, goog.i18n.DateTimePatterns_qu_BO, goog.i18n.DateTimePatterns_qu_EC, goog.i18n.DateTimePatterns_qu_PE, goog.i18n.DateTimePatterns_rm, goog.i18n.DateTimePatterns_rm_CH, goog.i18n.DateTimePatterns_rn, goog.i18n.DateTimePatterns_rn_BI, goog.i18n.DateTimePatterns_ro_MD, goog.i18n.DateTimePatterns_ro_RO, goog.i18n.DateTimePatterns_rof, goog.i18n.DateTimePatterns_rof_TZ, goog.i18n.DateTimePatterns_ru_BY, goog.i18n.DateTimePatterns_ru_KG, goog.i18n.DateTimePatterns_ru_KZ, goog.i18n.DateTimePatterns_ru_MD, goog.i18n.DateTimePatterns_ru_RU, goog.i18n.DateTimePatterns_ru_UA, goog.i18n.DateTimePatterns_rw, goog.i18n.DateTimePatterns_rw_RW, goog.i18n.DateTimePatterns_rwk, goog.i18n.DateTimePatterns_rwk_TZ, goog.i18n.DateTimePatterns_sah, goog.i18n.DateTimePatterns_sah_RU, goog.i18n.DateTimePatterns_saq, goog.i18n.DateTimePatterns_saq_KE, goog.i18n.DateTimePatterns_sbp, goog.i18n.DateTimePatterns_sbp_TZ, goog.i18n.DateTimePatterns_se, goog.i18n.DateTimePatterns_se_FI, goog.i18n.DateTimePatterns_se_NO, goog.i18n.DateTimePatterns_se_SE, goog.i18n.DateTimePatterns_seh, goog.i18n.DateTimePatterns_seh_MZ, goog.i18n.DateTimePatterns_ses, goog.i18n.DateTimePatterns_ses_ML, goog.i18n.DateTimePatterns_sg, goog.i18n.DateTimePatterns_sg_CF, goog.i18n.DateTimePatterns_shi, goog.i18n.DateTimePatterns_shi_Latn, goog.i18n.DateTimePatterns_shi_Latn_MA, goog.i18n.DateTimePatterns_shi_Tfng, goog.i18n.DateTimePatterns_shi_Tfng_MA, goog.i18n.DateTimePatterns_si_LK, goog.i18n.DateTimePatterns_sk_SK, goog.i18n.DateTimePatterns_sl_SI, goog.i18n.DateTimePatterns_smn, goog.i18n.DateTimePatterns_smn_FI, goog.i18n.DateTimePatterns_sn, goog.i18n.DateTimePatterns_sn_ZW, goog.i18n.DateTimePatterns_so, goog.i18n.DateTimePatterns_so_DJ, goog.i18n.DateTimePatterns_so_ET, goog.i18n.DateTimePatterns_so_KE, goog.i18n.DateTimePatterns_so_SO, goog.i18n.DateTimePatterns_sq_AL, goog.i18n.DateTimePatterns_sq_MK, goog.i18n.DateTimePatterns_sq_XK, goog.i18n.DateTimePatterns_sr_Cyrl, goog.i18n.DateTimePatterns_sr_Cyrl_BA, goog.i18n.DateTimePatterns_sr_Cyrl_ME, goog.i18n.DateTimePatterns_sr_Cyrl_RS, goog.i18n.DateTimePatterns_sr_Cyrl_XK, goog.i18n.DateTimePatterns_sr_Latn_BA, goog.i18n.DateTimePatterns_sr_Latn_ME, goog.i18n.DateTimePatterns_sr_Latn_RS, goog.i18n.DateTimePatterns_sr_Latn_XK, goog.i18n.DateTimePatterns_sv_AX, goog.i18n.DateTimePatterns_sv_FI, goog.i18n.DateTimePatterns_sv_SE, goog.i18n.DateTimePatterns_sw_CD, goog.i18n.DateTimePatterns_sw_KE, goog.i18n.DateTimePatterns_sw_TZ, goog.i18n.DateTimePatterns_sw_UG, goog.i18n.DateTimePatterns_ta_IN, goog.i18n.DateTimePatterns_ta_LK, goog.i18n.DateTimePatterns_ta_MY, goog.i18n.DateTimePatterns_ta_SG, goog.i18n.DateTimePatterns_te_IN, goog.i18n.DateTimePatterns_teo, goog.i18n.DateTimePatterns_teo_KE, goog.i18n.DateTimePatterns_teo_UG, goog.i18n.DateTimePatterns_th_TH, goog.i18n.DateTimePatterns_ti, goog.i18n.DateTimePatterns_ti_ER, goog.i18n.DateTimePatterns_ti_ET, goog.i18n.DateTimePatterns_to, goog.i18n.DateTimePatterns_to_TO, goog.i18n.DateTimePatterns_tr_CY, goog.i18n.DateTimePatterns_tr_TR, goog.i18n.DateTimePatterns_twq, goog.i18n.DateTimePatterns_twq_NE, goog.i18n.DateTimePatterns_tzm, goog.i18n.DateTimePatterns_tzm_MA, goog.i18n.DateTimePatterns_ug, goog.i18n.DateTimePatterns_ug_CN, goog.i18n.DateTimePatterns_uk_UA, goog.i18n.DateTimePatterns_ur_IN, goog.i18n.DateTimePatterns_ur_PK, goog.i18n.DateTimePatterns_uz_Arab, goog.i18n.DateTimePatterns_uz_Arab_AF, goog.i18n.DateTimePatterns_uz_Cyrl, goog.i18n.DateTimePatterns_uz_Cyrl_UZ, goog.i18n.DateTimePatterns_uz_Latn, goog.i18n.DateTimePatterns_uz_Latn_UZ, goog.i18n.DateTimePatterns_vai, goog.i18n.DateTimePatterns_vai_Latn, goog.i18n.DateTimePatterns_vai_Latn_LR, goog.i18n.DateTimePatterns_vai_Vaii, goog.i18n.DateTimePatterns_vai_Vaii_LR, goog.i18n.DateTimePatterns_vi_VN, goog.i18n.DateTimePatterns_vun, goog.i18n.DateTimePatterns_vun_TZ, goog.i18n.DateTimePatterns_wae, goog.i18n.DateTimePatterns_wae_CH, goog.i18n.DateTimePatterns_xog, goog.i18n.DateTimePatterns_xog_UG, goog.i18n.DateTimePatterns_yav, goog.i18n.DateTimePatterns_yav_CM, goog.i18n.DateTimePatterns_yi, goog.i18n.DateTimePatterns_yi_001, goog.i18n.DateTimePatterns_yo, goog.i18n.DateTimePatterns_yo_BJ, goog.i18n.DateTimePatterns_yo_NG, goog.i18n.DateTimePatterns_yue, goog.i18n.DateTimePatterns_yue_HK, goog.i18n.DateTimePatterns_zgh, goog.i18n.DateTimePatterns_zgh_MA, goog.i18n.DateTimePatterns_zh_Hans, goog.i18n.DateTimePatterns_zh_Hans_CN, goog.i18n.DateTimePatterns_zh_Hans_HK, goog.i18n.DateTimePatterns_zh_Hans_MO, goog.i18n.DateTimePatterns_zh_Hans_SG, goog.i18n.DateTimePatterns_zh_Hant, goog.i18n.DateTimePatterns_zh_Hant_HK, goog.i18n.DateTimePatterns_zh_Hant_MO, goog.i18n.DateTimePatterns_zh_Hant_TW, goog.i18n.DateTimePatterns_zu_ZA] from input ../closure-library/closure/goog/i18n/datetimepatternsext.js
//!! Processing provides [goog.cssom.iframe.style] from input ../closure-library/closure/goog/cssom/iframe/style.js
//!! Processing provides [goog.dom.fullscreen, goog.dom.fullscreen.EventType] from input ../closure-library/closure/goog/dom/fullscreen.js
//!! Processing provides [goog.messaging.MultiChannel, goog.messaging.MultiChannel.VirtualChannel] from input ../closure-library/closure/goog/messaging/multichannel.js
//!! Processing provides [goog.locale.scriptToLanguages] from input ../closure-library/closure/goog/locale/scriptToLanguages.js
//!! Processing provides [goog.events.WheelHandler] from input ../closure-library/closure/goog/events/wheelhandler.js
//!! Processing provides [goog.date.DateLike] from input ../closure-library/closure/goog/date/datelike.js
//!! Processing provides [goog.i18n.MessageFormat] from input ../closure-library/closure/goog/i18n/messageformat.js
//!! Processing provides [goog.debug.DebugWindow] from input ../closure-library/closure/goog/debug/debugwindow.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_rtc.js
//!! Processing provides [goog.crypt.Sha1] from input ../closure-library/closure/goog/crypt/sha1.js
//!! Processing provides [goog.math] from input ../closure-library/closure/goog/math/math.js
//!! Processing provides [goog.net.XhrIo, goog.net.XhrIo.ResponseType] from input ../closure-library/closure/goog/net/xhrio.js
//!! Processing provides [goog.debug.DevCss, goog.debug.DevCss.UserAgent] from input ../closure-library/closure/goog/debug/devcss/devcss.js
//!! Processing provides [goog.i18n.uChar.NameFetcher] from input ../closure-library/closure/goog/i18n/uchar/namefetcher.js
//!! Processing provides [goog.dom.NodeOffset] from input ../closure-library/closure/goog/dom/nodeoffset.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_geolocation.js
//!! Processing provides [goog.fs.url] from input ../closure-library/closure/goog/fs/url.js
//!! Processing provides [goog.dom.MultiRange, goog.dom.MultiRangeIterator] from input ../closure-library/closure/goog/dom/multirange.js
//!! Processing provides [goog.crypt.Sha256] from input ../closure-library/closure/goog/crypt/sha256.js
//!! Processing provides [goog.math.Bezier] from input ../closure-library/closure/goog/math/bezier.js
//!! Processing provides [goog.fx.TransitionBase, goog.fx.TransitionBase.State] from input ../closure-library/closure/goog/fx/transitionbase.js
//!! Processing provides [goog.math.Range] from input ../closure-library/closure/goog/math/range.js
//!! Processing provides [goog.ui.Component, goog.ui.Component.Error, goog.ui.Component.EventType, goog.ui.Component.State] from input ../closure-library/closure/goog/ui/component.js
//!! Processing provides [goog.crypt] from input ../closure-library/closure/goog/crypt/crypt.js
//!! Processing provides [goog.graphics.GroupElement] from input ../closure-library/closure/goog/graphics/groupelement.js
//!! Processing provides [goog.crypt.Hash] from input ../closure-library/closure/goog/crypt/hash.js
//!! Processing provides [goog.editor.plugins.EnterHandler] from input ../closure-library/closure/goog/editor/plugins/enterhandler.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/streamsapi.js
//!! Processing provides [goog.debug.Formatter, goog.debug.HtmlFormatter, goog.debug.TextFormatter] from input ../closure-library/closure/goog/debug/formatter.js
//!! Processing provides [goog.editor.ContentEditableField] from input ../closure-library/closure/goog/editor/contenteditablefield.js
//!! Processing provides [goog.format.HtmlPrettyPrinter, goog.format.HtmlPrettyPrinter.Buffer] from input ../closure-library/closure/goog/format/htmlprettyprinter.js
//!! Processing provides [goog.db.Transaction, goog.db.Transaction.TransactionMode] from input ../closure-library/closure/goog/db/transaction.js
//!! Processing provides [goog.labs.testing.AllOfMatcher, goog.labs.testing.AnyOfMatcher, goog.labs.testing.IsNotMatcher] from input ../closure-library/closure/goog/labs/testing/logicmatcher.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_anim_timing.js
//!! Processing provides [goog.labs.testing.HasPropertyMatcher, goog.labs.testing.InstanceOfMatcher, goog.labs.testing.IsNullMatcher, goog.labs.testing.IsNullOrUndefinedMatcher, goog.labs.testing.IsUndefinedMatcher, goog.labs.testing.ObjectEqualsMatcher] from input ../closure-library/closure/goog/labs/testing/objectmatcher.js
//!! Processing provides [goog.dom.browserrange.WebKitRange] from input ../closure-library/closure/goog/dom/browserrange/webkitrange.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/webstorage.js
//!! Processing provides [goog.graphics.AbstractGraphics] from input ../closure-library/closure/goog/graphics/abstractgraphics.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/gecko_event.js
//!! Processing provides [goog.Timer] from input ../closure-library/closure/goog/timer/timer.js
//!! Processing provides [goog.labs.net.webChannel.ChannelRequest] from input ../closure-library/closure/goog/labs/net/webchannel/channelrequest.js
//!! Processing provides [goog.labs.net.webChannel.netUtils] from input ../closure-library/closure/goog/labs/net/webchannel/netutils.js
//!! Processing provides [goog.pubsub.PubSub] from input ../closure-library/closure/goog/pubsub/pubsub.js
//!! Processing provides [goog.debug.logRecordSerializer] from input ../closure-library/closure/goog/debug/logrecordserializer.js
//!! Processing provides [goog.dom.dataset] from input ../closure-library/closure/goog/dom/dataset.js
//!! Processing provides [goog.events, goog.events.CaptureSimulationMode, goog.events.Key, goog.events.ListenableType] from input ../closure-library/closure/goog/events/events.js
//!! Processing provides [goog.editor.BrowserFeature] from input ../closure-library/closure/goog/editor/browserfeature.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/webkit_css.js
//!! Processing provides [goog.structs.CircularBuffer] from input ../closure-library/closure/goog/structs/circularbuffer.js
//!! Processing provides [goog.ui.NativeButtonRenderer] from input ../closure-library/closure/goog/ui/nativebuttonrenderer.js
//!! Processing provides [goog.db.Error, goog.db.Error.ErrorCode, goog.db.Error.ErrorName, goog.db.Error.VersionChangeBlockedError] from input ../closure-library/closure/goog/db/error.js
//!! Processing provides [goog.debug.DivConsole] from input ../closure-library/closure/goog/debug/divconsole.js
//!! Processing provides [goog.labs.net.webChannel.Wire] from input ../closure-library/closure/goog/labs/net/webchannel/wire.js
//!! Processing provides [goog.crypt.Aes] from input ../closure-library/closure/goog/crypt/aes.js
//!! Processing provides [goog.dom.browserrange, goog.dom.browserrange.Error] from input ../closure-library/closure/goog/dom/browserrange/browserrange.js
//!! Processing provides [goog.labs.testing.HasEntriesMatcher, goog.labs.testing.HasEntryMatcher, goog.labs.testing.HasKeyMatcher, goog.labs.testing.HasValueMatcher] from input ../closure-library/closure/goog/labs/testing/dictionarymatcher.js
//!! Processing provides [goog.dom.FontSizeMonitor, goog.dom.FontSizeMonitor.EventType] from input ../closure-library/closure/goog/dom/fontsizemonitor.js
//!! Processing provides [goog.html.uncheckedconversions] from input ../closure-library/closure/goog/html/uncheckedconversions.js
//!! Processing provides [goog.string.TypedString] from input ../closure-library/closure/goog/string/typedstring.js
//!! Processing provides [goog.fx.AbstractDragDrop, goog.fx.AbstractDragDrop.EventType, goog.fx.DragDropEvent, goog.fx.DragDropItem] from input ../closure-library/closure/goog/fx/abstractdragdrop.js
//!! Processing provides [goog.ui.ButtonSide] from input ../closure-library/closure/goog/ui/buttonside.js
//!! Processing provides [goog.dom.pattern.Sequence] from input ../closure-library/closure/goog/dom/pattern/sequence.js
//!! Processing provides [goog.labs.events.NonDisposableEventTarget] from input ../closure-library/closure/goog/labs/events/nondisposableeventtarget.js
//!! Processing provides [goog.ui.ControlContent] from input ../closure-library/closure/goog/ui/controlcontent.js
//!! Processing provides [goog.fs.FileSystem] from input ../closure-library/closure/goog/fs/filesystem.js
//!! Processing provides [goog.date.relative, goog.date.relative.TimeDeltaFormatter, goog.date.relative.Unit] from input ../closure-library/closure/goog/date/relative.js
//!! Processing provides [goog.i18n.uChar.LocalNameFetcher] from input ../closure-library/closure/goog/i18n/uchar/localnamefetcher.js
//!! Processing provides [goog.Thenable] from input ../closure-library/closure/goog/promise/thenable.js
//!! Processing provides [goog.debug.LogManager, goog.debug.Loggable, goog.debug.Logger, goog.debug.Logger.Level] from input ../closure-library/closure/goog/debug/logger.js
//!! Processing provides [goog.Promise] from input ../closure-library/closure/goog/promise/promise.js
//!! Processing provides [goog.history.EventType] from input ../closure-library/closure/goog/history/eventtype.js
//!! Processing provides [goog.i18n.ordinalRules] from input ../closure-library/closure/goog/i18n/ordinalrules.js
//!! Processing provides [goog.labs.promise] from input ../closure-library/closure/goog/labs/promise/promise.js
//!! Processing provides [goog.editor.plugins.AbstractTabHandler] from input ../closure-library/closure/goog/editor/plugins/abstracttabhandler.js
//!! Processing provides [goog.crypt.Sha384] from input ../closure-library/closure/goog/crypt/sha384.js
//!! Processing provides [goog.format.InternationalizedEmailAddress] from input ../closure-library/closure/goog/format/internationalizedemailaddress.js
//!! Processing provides [goog.html.TrustedResourceUrl] from input ../closure-library/closure/goog/html/trustedresourceurl.js
//!! Processing provides [goog.dom.browserrange.IeRange] from input ../closure-library/closure/goog/dom/browserrange/ierange.js
//!! Processing provides [goog.testing.jsunit] from input ../closure-library/closure/goog/testing/jsunit.js
//!! Processing provides [goog.html.sanitizer.AttributeWhitelist] from input ../closure-library/closure/goog/html/sanitizer/attributewhitelist.js
//!! Processing provides [goog.ui.IdGenerator] from input ../closure-library/closure/goog/ui/idgenerator.js
//!! Processing provides [goog.ui.emoji.Emoji] from input ../closure-library/closure/goog/ui/emoji/emoji.js
//!! Processing provides [goog.ui.Dialog, goog.ui.Dialog.ButtonSet, goog.ui.Dialog.ButtonSet.DefaultButtons, goog.ui.Dialog.DefaultButtonCaptions, goog.ui.Dialog.DefaultButtonKeys, goog.ui.Dialog.Event, goog.ui.Dialog.EventType] from input ../closure-library/closure/goog/ui/dialog.js
//!! Processing provides [goog.editor.focus] from input ../closure-library/closure/goog/editor/focus.js
//!! Processing provides [goog.messaging.DeferredChannel] from input ../closure-library/closure/goog/messaging/deferredchannel.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/fileapi.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_audio.js
//!! Processing provides [goog.color.names] from input ../closure-library/closure/goog/color/names.js
//!! Processing provides [goog.debug.LogRecord] from input ../closure-library/closure/goog/debug/logrecord.js
//!! Processing provides [goog.events.EventId] from input ../closure-library/closure/goog/events/eventid.js
//!! Processing provides [goog.labs.format.csv, goog.labs.format.csv.ParseError, goog.labs.format.csv.Token] from input ../closure-library/closure/goog/labs/format/csv.js
//!! Processing provides [goog.ui.Button, goog.ui.Button.Side] from input ../closure-library/closure/goog/ui/button.js
//!! Processing provides [goog.math.interpolator.Pchip1] from input ../closure-library/closure/goog/math/interpolator/pchip1.js
//!! Processing provides [goog.i18n.BidiFormatter] from input ../closure-library/closure/goog/i18n/bidiformatter.js
//!! Processing provides [goog.messaging.PortChannel] from input ../closure-library/closure/goog/messaging/portchannel.js
//!! Processing provides [goog.net.DefaultXmlHttpFactory, goog.net.XmlHttp, goog.net.XmlHttp.OptionType, goog.net.XmlHttp.ReadyState, goog.net.XmlHttpDefines] from input ../closure-library/closure/goog/net/xmlhttp.js
//!! Processing provides [goog.events.ActionEvent, goog.events.ActionHandler, goog.events.ActionHandler.EventType, goog.events.BeforeActionEvent] from input ../closure-library/closure/goog/events/actionhandler.js
//!! Processing provides [goog.fs.DirectoryEntry, goog.fs.DirectoryEntry.Behavior, goog.fs.Entry, goog.fs.FileEntry] from input ../closure-library/closure/goog/fs/entry.js
//!! Processing provides [goog.events.Listener] from input ../closure-library/closure/goog/events/listener.js
//!! Processing provides [goog.ui.ModalPopup] from input ../closure-library/closure/goog/ui/modalpopup.js
//!! Processing provides [goog.structs.InversionMap] from input ../closure-library/closure/goog/structs/inversionmap.js
//!! Processing provides [goog.editor.Field, goog.editor.Field.EventType] from input ../closure-library/closure/goog/editor/field.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/gecko_xml.js
//!! Processing provides [goog.i18n.uChar.RemoteNameFetcher] from input ../closure-library/closure/goog/i18n/uchar/remotenamefetcher.js
//!! Processing provides [goog.dom.safe, goog.dom.safe.InsertAdjacentHtmlPosition] from input ../closure-library/closure/goog/dom/safe.js
//!! Processing provides [goog.dom.TextRange] from input ../closure-library/closure/goog/dom/textrange.js
//!! Processing provides [goog.testing, goog.testing.FunctionMock, goog.testing.GlobalFunctionMock, goog.testing.MethodMock] from input ../closure-library/closure/goog/testing/functionmock.js
//!! Processing provides [goog.dom.pattern.FullTag] from input ../closure-library/closure/goog/dom/pattern/fulltag.js
//!! Processing provides [goog.date.duration] from input ../closure-library/closure/goog/date/duration.js
//!! Processing provides [goog.dom.pattern.StartTag] from input ../closure-library/closure/goog/dom/pattern/starttag.js
//!! Processing provides [goog.i18n.GraphemeBreak] from input ../closure-library/closure/goog/i18n/graphemebreak.js
//!! Processing provides [goog.dom.iframe] from input ../closure-library/closure/goog/dom/iframe.js
//!! Processing provides [goog.events.OnlineHandler, goog.events.OnlineHandler.EventType] from input ../closure-library/closure/goog/events/onlinehandler.js
//!! Processing provides [goog.i18n.TimeZone] from input ../closure-library/closure/goog/i18n/timezone.js
//!! Processing provides [goog.labs.net.image] from input ../closure-library/closure/goog/labs/net/image.js
//!! Processing provides [goog.editor.plugins.BasicTextFormatter, goog.editor.plugins.BasicTextFormatter.COMMAND] from input ../closure-library/closure/goog/editor/plugins/basictextformatter.js
//!! Processing provides [goog.math.IRect] from input ../closure-library/closure/goog/math/irect.js
//!! Processing provides [goog.testing.Mock, goog.testing.MockExpectation] from input ../closure-library/closure/goog/testing/mock.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_batterystatus.js
//!! Processing provides [goog.i18n.uChar] from input ../closure-library/closure/goog/i18n/uchar.js
//!! Processing provides [goog.string.format] from input ../closure-library/closure/goog/string/stringformat.js
//!! Processing provides [goog.date.relativeWithPlurals] from input ../closure-library/closure/goog/date/relativewithplurals.js
//!! Processing provides [goog.events.BrowserFeature] from input ../closure-library/closure/goog/events/browserfeature.js
//!! Processing provides [goog.string.Const] from input ../closure-library/closure/goog/string/const.js
//!! Processing provides [goog.dom.classes] from input ../closure-library/closure/goog/dom/classes.js
//!! Processing provides [goog.fx.easing] from input ../closure-library/closure/goog/fx/easing.js
//!! Processing provides [goog.graphics.RectElement] from input ../closure-library/closure/goog/graphics/rectelement.js
//!! Processing provides [goog.crypt.Md5] from input ../closure-library/closure/goog/crypt/md5.js
//!! Processing provides [goog.json, goog.json.Replacer, goog.json.Reviver, goog.json.Serializer] from input ../closure-library/closure/goog/json/json.js
//!! Processing provides [goog.ui.ModalAriaVisibilityHelper] from input ../closure-library/closure/goog/ui/modalariavisibilityhelper.js
//!! Processing provides [goog.editor.plugins.FirstStrong] from input ../closure-library/closure/goog/editor/plugins/firststrong.js
//!! Processing provides [goog.events.EventHandler] from input ../closure-library/closure/goog/events/eventhandler.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/whatwg_encoding.js
//!! Processing provides [goog.labs.html.AttributeRewriter, goog.labs.html.AttributeValue, goog.labs.html.attributeRewriterPresubmitWorkaround] from input ../closure-library/closure/goog/labs/html/attribute_rewriter.js
//!! Processing provides [goog.crypt.Sha224] from input ../closure-library/closure/goog/crypt/sha224.js
//!! Processing provides [goog.math.RangeSet] from input ../closure-library/closure/goog/math/rangeset.js
//!! Processing provides [goog.events.EventType] from input ../closure-library/closure/goog/events/eventtype.js
//!! Processing provides [goog.ds.DataManager] from input ../closure-library/closure/goog/datasource/datamanager.js
//!! Processing provides [goog.html.legacyconversions] from input ../closure-library/closure/goog/html/legacyconversions.js
//!! Processing provides [goog.html.SafeStyleSheet] from input ../closure-library/closure/goog/html/safestylesheet.js
//!! Processing provides [goog.dom.xml] from input ../closure-library/closure/goog/dom/xml.js
//!! Processing provides [goog.dom.pattern.callback] from input ../closure-library/closure/goog/dom/pattern/callback/callback.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/v8.js
//!! Processing provides [goog.debug.LogBuffer] from input ../closure-library/closure/goog/debug/logbuffer.js
//!! Processing provides [goog.editor.plugins.AbstractDialogPlugin, goog.editor.plugins.AbstractDialogPlugin.EventType] from input ../closure-library/closure/goog/editor/plugins/abstractdialogplugin.js
//!! Processing provides [goog.editor.plugins.UndoRedo] from input ../closure-library/closure/goog/editor/plugins/undoredo.js
//!! Processing provides [goog.async.WorkItem, goog.async.WorkQueue] from input ../closure-library/closure/goog/async/workqueue.js
//!! Processing provides [goog.net.NetworkStatusMonitor] from input ../closure-library/closure/goog/net/networkstatusmonitor.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_webcrypto.js
//!! Processing provides [goog.editor.plugins.HeaderFormatter] from input ../closure-library/closure/goog/editor/plugins/headerformatter.js
//!! Processing provides [goog.dom.pattern.EndTag] from input ../closure-library/closure/goog/dom/pattern/endtag.js
//!! Processing provides [goog.labs.net.xhr, goog.labs.net.xhr.Error, goog.labs.net.xhr.HttpError, goog.labs.net.xhr.Options, goog.labs.net.xhr.PostData, goog.labs.net.xhr.ResponseType, goog.labs.net.xhr.TimeoutError] from input ../closure-library/closure/goog/labs/net/xhr.js
//!! Processing provides [goog.graphics.VmlGraphics] from input ../closure-library/closure/goog/graphics/vmlgraphics.js
//!! Processing provides [goog.ds.BaseDataNode, goog.ds.BasicNodeList, goog.ds.DataNode, goog.ds.DataNodeList, goog.ds.EmptyNodeList, goog.ds.LoadState, goog.ds.SortedNodeList, goog.ds.Util, goog.ds.logger] from input ../closure-library/closure/goog/datasource/datasource.js
//!! Processing provides [goog.dom.annotate, goog.dom.annotate.AnnotateFn] from input ../closure-library/closure/goog/dom/annotate.js
//!! Processing provides [goog.log, goog.log.Level, goog.log.LogRecord, goog.log.Logger] from input ../closure-library/closure/goog/log/log.js
//!! Processing provides [goog.Throttle, goog.async.Throttle] from input ../closure-library/closure/goog/async/throttle.js
//!! Processing provides [goog.format] from input ../closure-library/closure/goog/format/format.js
//!! Processing provides [goog.dom.animationFrame, goog.dom.animationFrame.Spec, goog.dom.animationFrame.State] from input ../closure-library/closure/goog/dom/animationframe/animationframe.js
//!! Processing provides [goog.html.flash] from input ../closure-library/closure/goog/html/flash.js
//!! Processing provides [goog.events.ImeHandler, goog.events.ImeHandler.Event, goog.events.ImeHandler.EventType] from input ../closure-library/closure/goog/events/imehandler.js
//!! Processing provides [goog.ui.TabRenderer] from input ../closure-library/closure/goog/ui/tabrenderer.js
//!! Processing provides [goog.a11y.aria.Role] from input ../closure-library/closure/goog/a11y/aria/roles.js
//!! Processing provides [goog.array] from input ../closure-library/closure/goog/array/array.js
//!! Processing provides [goog.dom.pattern.AllChildren] from input ../closure-library/closure/goog/dom/pattern/allchildren.js
//!! Processing provides [goog.dom.NodeType] from input ../closure-library/closure/goog/dom/nodetype.js
//!! Processing provides [goog.messaging.PortOperator] from input ../closure-library/closure/goog/messaging/portoperator.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_touch_event.js
//!! Processing provides [goog.math.Size] from input ../closure-library/closure/goog/math/size.js
//!! Processing provides [goog.net.XhrLike] from input ../closure-library/closure/goog/net/xhrlike.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_css3d.js
//!! Processing provides [goog.dom.browserrange.AbstractRange] from input ../closure-library/closure/goog/dom/browserrange/abstractrange.js
//!! Processing provides [goog.format.EmailAddress] from input ../closure-library/closure/goog/format/emailaddress.js
//!! Processing provides [goog.crypt.Arc4] from input ../closure-library/closure/goog/crypt/arc4.js
//!! Processing provides [goog.json.EvalJsonProcessor] from input ../closure-library/closure/goog/json/evaljsonprocessor.js
//!! Processing provides [goog.crypt.Ctr] from input ../closure-library/closure/goog/crypt/ctr.js
//!! Processing provides [goog.db.ObjectStore] from input ../closure-library/closure/goog/db/objectstore.js
//!! Processing provides [goog.editor.plugins.UndoRedoState] from input ../closure-library/closure/goog/editor/plugins/undoredostate.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/webkit_usercontent.js
//!! Processing provides [goog.i18n.bidi, goog.i18n.bidi.Dir, goog.i18n.bidi.DirectionalString, goog.i18n.bidi.Format] from input ../closure-library/closure/goog/i18n/bidi.js
//!! Processing provides [goog.labs.userAgent.engine] from input ../closure-library/closure/goog/labs/useragent/engine.js
//!! Processing provides [goog.i18n.currency, goog.i18n.currency.CurrencyInfo, goog.i18n.currency.CurrencyInfoTier2] from input ../closure-library/closure/goog/i18n/currency.js
//!! Processing provides [goog.html.sanitizer.CssSanitizer] from input ../closure-library/closure/goog/html/sanitizer/csssanitizer.js
//!! Processing provides [goog.html.sanitizer.HtmlSanitizer, goog.html.sanitizer.HtmlSanitizer.Builder, goog.html.sanitizer.HtmlSanitizerPolicy, goog.html.sanitizer.HtmlSanitizerPolicyContext, goog.html.sanitizer.HtmlSanitizerPolicyHints] from input ../closure-library/closure/goog/html/sanitizer/htmlsanitizer.js
//!! Processing provides [goog.ui.PopupBase, goog.ui.PopupBase.EventType, goog.ui.PopupBase.Type] from input ../closure-library/closure/goog/ui/popupbase.js
//!! Processing provides [goog.db.IndexedDb] from input ../closure-library/closure/goog/db/indexeddb.js
//!! Processing provides [goog.db.KeyRange] from input ../closure-library/closure/goog/db/keyrange.js
//!! Processing provides [goog.ds.XmlDataSource, goog.ds.XmlHttpDataSource] from input ../closure-library/closure/goog/datasource/xmldatasource.js
//!! Processing provides [goog.debug.FancyWindow] from input ../closure-library/closure/goog/debug/fancywindow.js
//!! Processing provides [goog.asserts, goog.asserts.AssertionError] from input ../closure-library/closure/goog/asserts/asserts.js
//!! Processing provides [goog.i18n.DateTimeSymbols, goog.i18n.DateTimeSymbolsType, goog.i18n.DateTimeSymbols_af, goog.i18n.DateTimeSymbols_am, goog.i18n.DateTimeSymbols_ar, goog.i18n.DateTimeSymbols_az, goog.i18n.DateTimeSymbols_be, goog.i18n.DateTimeSymbols_bg, goog.i18n.DateTimeSymbols_bn, goog.i18n.DateTimeSymbols_br, goog.i18n.DateTimeSymbols_bs, goog.i18n.DateTimeSymbols_ca, goog.i18n.DateTimeSymbols_chr, goog.i18n.DateTimeSymbols_cs, goog.i18n.DateTimeSymbols_cy, goog.i18n.DateTimeSymbols_da, goog.i18n.DateTimeSymbols_de, goog.i18n.DateTimeSymbols_de_AT, goog.i18n.DateTimeSymbols_de_CH, goog.i18n.DateTimeSymbols_el, goog.i18n.DateTimeSymbols_en, goog.i18n.DateTimeSymbols_en_AU, goog.i18n.DateTimeSymbols_en_CA, goog.i18n.DateTimeSymbols_en_GB, goog.i18n.DateTimeSymbols_en_IE, goog.i18n.DateTimeSymbols_en_IN, goog.i18n.DateTimeSymbols_en_ISO, goog.i18n.DateTimeSymbols_en_SG, goog.i18n.DateTimeSymbols_en_US, goog.i18n.DateTimeSymbols_en_ZA, goog.i18n.DateTimeSymbols_es, goog.i18n.DateTimeSymbols_es_419, goog.i18n.DateTimeSymbols_es_ES, goog.i18n.DateTimeSymbols_es_MX, goog.i18n.DateTimeSymbols_es_US, goog.i18n.DateTimeSymbols_et, goog.i18n.DateTimeSymbols_eu, goog.i18n.DateTimeSymbols_fa, goog.i18n.DateTimeSymbols_fi, goog.i18n.DateTimeSymbols_fil, goog.i18n.DateTimeSymbols_fr, goog.i18n.DateTimeSymbols_fr_CA, goog.i18n.DateTimeSymbols_ga, goog.i18n.DateTimeSymbols_gl, goog.i18n.DateTimeSymbols_gsw, goog.i18n.DateTimeSymbols_gu, goog.i18n.DateTimeSymbols_haw, goog.i18n.DateTimeSymbols_he, goog.i18n.DateTimeSymbols_hi, goog.i18n.DateTimeSymbols_hr, goog.i18n.DateTimeSymbols_hu, goog.i18n.DateTimeSymbols_hy, goog.i18n.DateTimeSymbols_id, goog.i18n.DateTimeSymbols_in, goog.i18n.DateTimeSymbols_is, goog.i18n.DateTimeSymbols_it, goog.i18n.DateTimeSymbols_iw, goog.i18n.DateTimeSymbols_ja, goog.i18n.DateTimeSymbols_ka, goog.i18n.DateTimeSymbols_kk, goog.i18n.DateTimeSymbols_km, goog.i18n.DateTimeSymbols_kn, goog.i18n.DateTimeSymbols_ko, goog.i18n.DateTimeSymbols_ky, goog.i18n.DateTimeSymbols_ln, goog.i18n.DateTimeSymbols_lo, goog.i18n.DateTimeSymbols_lt, goog.i18n.DateTimeSymbols_lv, goog.i18n.DateTimeSymbols_mk, goog.i18n.DateTimeSymbols_ml, goog.i18n.DateTimeSymbols_mn, goog.i18n.DateTimeSymbols_mr, goog.i18n.DateTimeSymbols_ms, goog.i18n.DateTimeSymbols_mt, goog.i18n.DateTimeSymbols_my, goog.i18n.DateTimeSymbols_nb, goog.i18n.DateTimeSymbols_ne, goog.i18n.DateTimeSymbols_nl, goog.i18n.DateTimeSymbols_no, goog.i18n.DateTimeSymbols_no_NO, goog.i18n.DateTimeSymbols_or, goog.i18n.DateTimeSymbols_pa, goog.i18n.DateTimeSymbols_pl, goog.i18n.DateTimeSymbols_pt, goog.i18n.DateTimeSymbols_pt_BR, goog.i18n.DateTimeSymbols_pt_PT, goog.i18n.DateTimeSymbols_ro, goog.i18n.DateTimeSymbols_ru, goog.i18n.DateTimeSymbols_si, goog.i18n.DateTimeSymbols_sk, goog.i18n.DateTimeSymbols_sl, goog.i18n.DateTimeSymbols_sq, goog.i18n.DateTimeSymbols_sr, goog.i18n.DateTimeSymbols_sr_Latn, goog.i18n.DateTimeSymbols_sv, goog.i18n.DateTimeSymbols_sw, goog.i18n.DateTimeSymbols_ta, goog.i18n.DateTimeSymbols_te, goog.i18n.DateTimeSymbols_th, goog.i18n.DateTimeSymbols_tl, goog.i18n.DateTimeSymbols_tr, goog.i18n.DateTimeSymbols_uk, goog.i18n.DateTimeSymbols_ur, goog.i18n.DateTimeSymbols_uz, goog.i18n.DateTimeSymbols_vi, goog.i18n.DateTimeSymbols_zh, goog.i18n.DateTimeSymbols_zh_CN, goog.i18n.DateTimeSymbols_zh_HK, goog.i18n.DateTimeSymbols_zh_TW, goog.i18n.DateTimeSymbols_zu] from input ../closure-library/closure/goog/i18n/datetimesymbols.js
//!! Processing provides [goog.Delay, goog.async.Delay] from input ../closure-library/closure/goog/async/delay.js
//!! Processing provides [goog.dom.pattern.AbstractPattern] from input ../closure-library/closure/goog/dom/pattern/abstractpattern.js
//!! Processing provides [goog.graphics.ext.Image] from input ../closure-library/closure/goog/graphics/ext/image.js
//!! Processing provides [goog.string.StringBuffer] from input ../closure-library/closure/goog/string/stringbuffer.js
//!! Processing provides [goog.i18n.DateTimeParse] from input ../closure-library/closure/goog/i18n/datetimeparse.js
//!! Processing provides [goog.html.silverlight] from input ../closure-library/closure/goog/html/silverlight.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_xml.js
//!! Processing provides [goog.fx.dom, goog.fx.dom.BgColorTransform, goog.fx.dom.ColorTransform, goog.fx.dom.Fade, goog.fx.dom.FadeIn, goog.fx.dom.FadeInAndShow, goog.fx.dom.FadeOut, goog.fx.dom.FadeOutAndHide, goog.fx.dom.PredefinedEffect, goog.fx.dom.Resize, goog.fx.dom.ResizeHeight, goog.fx.dom.ResizeWidth, goog.fx.dom.Scroll, goog.fx.dom.Slide, goog.fx.dom.SlideFrom, goog.fx.dom.Swipe] from input ../closure-library/closure/goog/fx/dom.js
//!! Processing provides [goog.async.Debouncer] from input ../closure-library/closure/goog/async/debouncer.js
//!! Processing provides [goog.fx.DragEvent, goog.fx.Dragger, goog.fx.Dragger.EventType] from input ../closure-library/closure/goog/fx/dragger.js
//!! Processing provides [goog.math.Path, goog.math.Path.Segment] from input ../closure-library/closure/goog/math/path.js
//!! Processing provides [goog.storage.mechanism.HTML5LocalStorage] from input ../closure-library/closure/goog/storage/mechanism/html5localstorage.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_event3.js
//!! Processing provides [goog.ds.JsDataSource, goog.ds.JsPropertyDataSource] from input ../closure-library/closure/goog/datasource/jsdatasource.js
//!! Processing provides [goog.async.ConditionalDelay] from input ../closure-library/closure/goog/async/conditionaldelay.js
//!! Processing provides [goog.string.Stringifier] from input ../closure-library/closure/goog/string/stringifier.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_css.js
//!! Processing provides [goog.dom.Range] from input ../closure-library/closure/goog/dom/range.js
//!! Processing provides [goog.testing.PseudoRandom] from input ../closure-library/closure/goog/testing/pseudorandom.js
//!! Processing provides [goog.graphics.ext] from input ../closure-library/closure/goog/graphics/ext/ext.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/webgl.js
//!! Processing provides [goog.net.HttpStatus] from input ../closure-library/closure/goog/net/httpstatus.js
//!! Processing provides [goog.html.SafeStyle] from input ../closure-library/closure/goog/html/safestyle.js
//!! Processing provides [goog.events.KeyNames] from input ../closure-library/closure/goog/events/keynames.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_event.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/window.js
//!! Processing provides [goog] from input ../closure-library/closure/goog/base.js
//!! Processing provides [goog.events.Listenable, goog.events.ListenableKey] from input ../closure-library/closure/goog/events/listenable.js
//!! Processing provides [goog.a11y.aria.AutoCompleteValues, goog.a11y.aria.CheckedValues, goog.a11y.aria.DropEffectValues, goog.a11y.aria.ExpandedValues, goog.a11y.aria.GrabbedValues, goog.a11y.aria.InvalidValues, goog.a11y.aria.LivePriority, goog.a11y.aria.OrientationValues, goog.a11y.aria.PressedValues, goog.a11y.aria.RelevantValues, goog.a11y.aria.SelectedValues, goog.a11y.aria.SortValues, goog.a11y.aria.State] from input ../closure-library/closure/goog/a11y/aria/attributes.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/deprecated.js
//!! Processing provides [goog.i18n.mime, goog.i18n.mime.encode] from input ../closure-library/closure/goog/i18n/mime.js
//!! Processing provides [goog.locale.defaultLocaleNameConstants] from input ../closure-library/closure/goog/locale/defaultlocalenameconstants.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/flash.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/gecko_dom.js
//!! Processing provides [goog.ds.JsonDataSource] from input ../closure-library/closure/goog/datasource/jsondatasource.js
//!! Processing provides [goog.dom.InputType] from input ../closure-library/closure/goog/dom/inputtype.js
//!! Processing provides [goog.i18n.DateTimePatterns, goog.i18n.DateTimePatterns_af, goog.i18n.DateTimePatterns_am, goog.i18n.DateTimePatterns_ar, goog.i18n.DateTimePatterns_az, goog.i18n.DateTimePatterns_be, goog.i18n.DateTimePatterns_bg, goog.i18n.DateTimePatterns_bn, goog.i18n.DateTimePatterns_br, goog.i18n.DateTimePatterns_bs, goog.i18n.DateTimePatterns_ca, goog.i18n.DateTimePatterns_chr, goog.i18n.DateTimePatterns_cs, goog.i18n.DateTimePatterns_cy, goog.i18n.DateTimePatterns_da, goog.i18n.DateTimePatterns_de, goog.i18n.DateTimePatterns_de_AT, goog.i18n.DateTimePatterns_de_CH, goog.i18n.DateTimePatterns_el, goog.i18n.DateTimePatterns_en, goog.i18n.DateTimePatterns_en_AU, goog.i18n.DateTimePatterns_en_CA, goog.i18n.DateTimePatterns_en_GB, goog.i18n.DateTimePatterns_en_IE, goog.i18n.DateTimePatterns_en_IN, goog.i18n.DateTimePatterns_en_SG, goog.i18n.DateTimePatterns_en_US, goog.i18n.DateTimePatterns_en_ZA, goog.i18n.DateTimePatterns_es, goog.i18n.DateTimePatterns_es_419, goog.i18n.DateTimePatterns_es_ES, goog.i18n.DateTimePatterns_es_MX, goog.i18n.DateTimePatterns_es_US, goog.i18n.DateTimePatterns_et, goog.i18n.DateTimePatterns_eu, goog.i18n.DateTimePatterns_fa, goog.i18n.DateTimePatterns_fi, goog.i18n.DateTimePatterns_fil, goog.i18n.DateTimePatterns_fr, goog.i18n.DateTimePatterns_fr_CA, goog.i18n.DateTimePatterns_ga, goog.i18n.DateTimePatterns_gl, goog.i18n.DateTimePatterns_gsw, goog.i18n.DateTimePatterns_gu, goog.i18n.DateTimePatterns_haw, goog.i18n.DateTimePatterns_he, goog.i18n.DateTimePatterns_hi, goog.i18n.DateTimePatterns_hr, goog.i18n.DateTimePatterns_hu, goog.i18n.DateTimePatterns_hy, goog.i18n.DateTimePatterns_id, goog.i18n.DateTimePatterns_in, goog.i18n.DateTimePatterns_is, goog.i18n.DateTimePatterns_it, goog.i18n.DateTimePatterns_iw, goog.i18n.DateTimePatterns_ja, goog.i18n.DateTimePatterns_ka, goog.i18n.DateTimePatterns_kk, goog.i18n.DateTimePatterns_km, goog.i18n.DateTimePatterns_kn, goog.i18n.DateTimePatterns_ko, goog.i18n.DateTimePatterns_ky, goog.i18n.DateTimePatterns_ln, goog.i18n.DateTimePatterns_lo, goog.i18n.DateTimePatterns_lt, goog.i18n.DateTimePatterns_lv, goog.i18n.DateTimePatterns_mk, goog.i18n.DateTimePatterns_ml, goog.i18n.DateTimePatterns_mn, goog.i18n.DateTimePatterns_mo, goog.i18n.DateTimePatterns_mr, goog.i18n.DateTimePatterns_ms, goog.i18n.DateTimePatterns_mt, goog.i18n.DateTimePatterns_my, goog.i18n.DateTimePatterns_nb, goog.i18n.DateTimePatterns_ne, goog.i18n.DateTimePatterns_nl, goog.i18n.DateTimePatterns_no, goog.i18n.DateTimePatterns_no_NO, goog.i18n.DateTimePatterns_or, goog.i18n.DateTimePatterns_pa, goog.i18n.DateTimePatterns_pl, goog.i18n.DateTimePatterns_pt, goog.i18n.DateTimePatterns_pt_BR, goog.i18n.DateTimePatterns_pt_PT, goog.i18n.DateTimePatterns_ro, goog.i18n.DateTimePatterns_ru, goog.i18n.DateTimePatterns_sh, goog.i18n.DateTimePatterns_si, goog.i18n.DateTimePatterns_sk, goog.i18n.DateTimePatterns_sl, goog.i18n.DateTimePatterns_sq, goog.i18n.DateTimePatterns_sr, goog.i18n.DateTimePatterns_sr_Latn, goog.i18n.DateTimePatterns_sv, goog.i18n.DateTimePatterns_sw, goog.i18n.DateTimePatterns_ta, goog.i18n.DateTimePatterns_te, goog.i18n.DateTimePatterns_th, goog.i18n.DateTimePatterns_tl, goog.i18n.DateTimePatterns_tr, goog.i18n.DateTimePatterns_uk, goog.i18n.DateTimePatterns_ur, goog.i18n.DateTimePatterns_uz, goog.i18n.DateTimePatterns_vi, goog.i18n.DateTimePatterns_zh, goog.i18n.DateTimePatterns_zh_CN, goog.i18n.DateTimePatterns_zh_HK, goog.i18n.DateTimePatterns_zh_TW, goog.i18n.DateTimePatterns_zu] from input ../closure-library/closure/goog/i18n/datetimepatterns.js
//!! Processing provides [goog.testing.PropertyReplacer] from input ../closure-library/closure/goog/testing/propertyreplacer.js
//!! Processing provides [goog.graphics.PathElement] from input ../closure-library/closure/goog/graphics/pathelement.js
//!! Processing provides [goog.labs.mock, goog.labs.mock.VerificationError] from input ../closure-library/closure/goog/labs/mock/mock.js
//!! Processing provides [goog.messaging] from input ../closure-library/closure/goog/messaging/messaging.js
//!! Processing provides [goog.dom.TagName] from input ../closure-library/closure/goog/dom/tagname.js
//!! Processing provides [goog.net.EventType] from input ../closure-library/closure/goog/net/eventtype.js
//!! Processing provides [goog.labs.net.webChannel.WebChannelBaseTransport] from input ../closure-library/closure/goog/labs/net/webchannel/webchannelbasetransport.js
//!! Processing provides [goog.debug] from input ../closure-library/closure/goog/debug/debug.js
//!! Processing provides [goog.events.InputHandler, goog.events.InputHandler.EventType] from input ../closure-library/closure/goog/events/inputhandler.js
//!! Processing provides [goog.labs.testing.ContainsStringMatcher, goog.labs.testing.EndsWithMatcher, goog.labs.testing.EqualToIgnoringWhitespaceMatcher, goog.labs.testing.EqualsMatcher, goog.labs.testing.RegexMatcher, goog.labs.testing.StartsWithMatcher, goog.labs.testing.StringContainsInOrderMatcher] from input ../closure-library/closure/goog/labs/testing/stringmatcher.js
//!! Processing provides [goog.math.ExponentialBackoff] from input ../closure-library/closure/goog/math/exponentialbackoff.js
//!! Processing provides [goog.testing.LooseExpectationCollection, goog.testing.LooseMock] from input ../closure-library/closure/goog/testing/loosemock.js
//!! Processing provides [goog.editor.Command] from input ../closure-library/closure/goog/editor/command.js
//!! Processing provides [goog.dom.ViewportSizeMonitor] from input ../closure-library/closure/goog/dom/viewportsizemonitor.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_device_sensor_event.js
//!! Processing provides [goog.i18n.NumberFormat, goog.i18n.NumberFormat.CurrencyStyle, goog.i18n.NumberFormat.Format] from input ../closure-library/closure/goog/i18n/numberformat.js
//!! Processing provides [goog.debug.Console] from input ../closure-library/closure/goog/debug/console.js
//!! Processing provides [goog.testing.StrictMock] from input ../closure-library/closure/goog/testing/strictmock.js
//!! Processing provides [goog.async.FreeList] from input ../closure-library/closure/goog/async/freelist.js
//!! Processing provides [goog.messaging.LoggerServer] from input ../closure-library/closure/goog/messaging/loggerserver.js
//!! Processing provides [goog.graphics.Font] from input ../closure-library/closure/goog/graphics/font.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/ie_css.js
//!! Processing provides [goog.math.Line] from input ../closure-library/closure/goog/math/line.js
//!! Processing provides [goog.dom.browserrange.W3cRange] from input ../closure-library/closure/goog/dom/browserrange/w3crange.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/intl.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/ie_vml.js
//!! Processing provides [goog.crypt.Hmac] from input ../closure-library/closure/goog/crypt/hmac.js
//!! Processing provides [goog.editor.SeamlessField] from input ../closure-library/closure/goog/editor/seamlessfield.js
//!! Processing provides [goog.labs.net.webChannel.Channel] from input ../closure-library/closure/goog/labs/net/webchannel/channel.js
//!! Processing provides [goog.editor.ClickToEditWrapper] from input ../closure-library/closure/goog/editor/clicktoeditwrapper.js
//!! Processing provides [goog.graphics.ext.Graphics] from input ../closure-library/closure/goog/graphics/ext/graphics.js
//!! Processing provides [goog.dom.pattern.NodeType] from input ../closure-library/closure/goog/dom/pattern/nodetype.js
//!! Processing provides [goog.labs.net.webChannel.WireV8] from input ../closure-library/closure/goog/labs/net/webchannel/wirev8.js
//!! Processing provides [goog.fs.Error, goog.fs.Error.ErrorCode] from input ../closure-library/closure/goog/fs/error.js
//!! Processing provides [goog.math.paths] from input ../closure-library/closure/goog/math/paths.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/w3c_selectors.js
//!! Processing provides [goog.labs.testing.MatcherError, goog.labs.testing.assertThat] from input ../closure-library/closure/goog/labs/testing/assertthat.js
//!! Processing provides [goog.testing.MockClock] from input ../closure-library/closure/goog/testing/mockclock.js
//!! Processing provides [goog.ui.ControlRenderer] from input ../closure-library/closure/goog/ui/controlrenderer.js
//!! Processing provides [goog.i18n.CharListDecompressor] from input ../closure-library/closure/goog/i18n/charlistdecompressor.js
//!! Processing provides [] from input ../closure-compiler/externs/browser/url.js
//!! Processing provides [goog.crypt.BlobHasher, goog.crypt.BlobHasher.EventType] from input ../closure-library/closure/goog/crypt/blobhasher.js
//!! Processing provides [goog.graphics.StrokeAndFillElement] from input ../closure-library/closure/goog/graphics/strokeandfillelement.js
//!! Processing provides [goog.graphics.ext.Ellipse] from input ../closure-library/closure/goog/graphics/ext/ellipse.js
//!! Processing provides [goog.dom, goog.dom.Appendable, goog.dom.DomHelper] from input ../closure-library/closure/goog/dom/dom.js
//!! Processing provides [goog.crypt.Sha2] from input ../closure-library/closure/goog/crypt/sha2.js
//!! Processing provides [goog.fs.FileSaver, goog.fs.FileSaver.EventType, goog.fs.FileSaver.ReadyState] from input ../closure-library/closure/goog/fs/filesaver.js
//!! Processing provides [goog.History, goog.History.Event, goog.History.EventType] from input ../closure-library/closure/goog/history/history.js
//!! Processing provides [goog.dom.TagIterator, goog.dom.TagWalkType] from input ../closure-library/closure/goog/dom/tagiterator.js
//!! Processing provides [goog.dom.AbstractRange, goog.dom.RangeIterator, goog.dom.RangeType] from input ../closure-library/closure/goog/dom/abstractrange.js
//!! Processing provides [goog.graphics.Fill] from input ../closure-library/closure/goog/graphics/fill.js
//!! Processing provides [goog.labs.dom.PageVisibilityEvent, goog.labs.dom.PageVisibilityMonitor, goog.labs.dom.PageVisibilityState] from input ../closure-library/closure/goog/labs/dom/pagevisibilitymonitor.js
//!! Processing provides [goog.debug.errorHandlerWeakDep] from input ../closure-library/closure/goog/debug/errorhandlerweakdep.js
//!! Processing provides [goog.crypt.Sha2_64bit] from input ../closure-library/closure/goog/crypt/sha2_64bit.js
//!! Processing provides [goog.ui.LinkButtonRenderer] from input ../closure-library/closure/goog/ui/linkbuttonrenderer.js
//!! Processing provides [goog.testing.mockmatchers, goog.testing.mockmatchers.ArgumentMatcher, goog.testing.mockmatchers.IgnoreArgument, goog.testing.mockmatchers.InstanceOf, goog.testing.mockmatchers.ObjectEquals, goog.testing.mockmatchers.RegexpMatch, goog.testing.mockmatchers.SaveArgument, goog.testing.mockmatchers.TypeOf] from input ../closure-library/closure/goog/testing/mockmatchers.js
//!! Processing provides [goog.labs.net.webChannel.ConnectionState] from input ../closure-library/closure/goog/labs/net/webchannel/connectionstate.js
//!! Processing provides [goog.userAgent.product] from input ../closure-library/closure/goog/useragent/product.js
//!! Processing provides [goog.format.JsonPrettyPrinter, goog.format.JsonPrettyPrinter.SafeHtmlDelimiters, goog.format.JsonPrettyPrinter.TextDelimiters] from input ../closure-library/closure/goog/format/jsonprettyprinter.js
//!! Processing provides [goog.ui.ContainerRenderer] from input ../closure-library/closure/goog/ui/containerrenderer.js
//!! Processing provides [goog.dom.NodeIterator] from input ../closure-library/closure/goog/dom/nodeiterator.js
//!! Processing provides [goog.editor.plugins.Blockquote] from input ../closure-library/closure/goog/editor/plugins/blockquote.js
declare namespace ಠ_ಠ.clutz.goog {
  var DEBUG : boolean ;
  /**
   * True if goog.dependencies_ is available.
   */
  var DEPENDENCIES_ENABLED : boolean ;
  var DISALLOW_TEST_ONLY_CODE : boolean ;
  var ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING : boolean ;
  var ENABLE_DEBUG_LOADER : boolean ;
  var LOAD_MODULE_USING_EVAL : boolean ;
  var LOCALE : string ;
  var NATIVE_ARRAY_PROTOTYPES : boolean ;
  var SEAL_MODULE_EXPORTS : boolean ;
  var STRICT_MODE_COMPATIBLE : boolean ;
  var TRANSPILE : string ;
  var TRANSPILER : string ;
  var TRUSTED_SITE : boolean ;
  /**
   * When defining a class Foo with an abstract method bar(), you can do:
   * Foo.prototype.bar = goog.abstractMethod
   *
   * Now if a subclass of Foo fails to override bar(), an error will be thrown
   * when bar() is invoked.
   *
   * Note: This does not take the name of the function to override as an argument
   * because that would make it more difficult to obfuscate our JavaScript code.
   */
  function abstractMethod ( ...a : any [] ) : any ;
  /**
   * Adds a dependency from a file to the files it requires.
   * @param relPath The path to the js file.
   * @param provides An array of strings with the names of the objects this file provides.
   * @param requires An array of strings with the names of the objects this file requires.
   * @param opt_loadFlags Parameters indicating how the file must be loaded.  The boolean 'true' is equivalent to {'module': 'goog'} for backwards-compatibility.  Valid properties and values include {'module': 'goog'} and {'lang': 'es6'}.
   */
  function addDependency (relPath : string , provides : string [] , requires : string [] , opt_loadFlags ? : boolean | { [ /* warning: coerced from ? */ key: string ]: string } ) : void ;
  /**
   * Adds a {@code getInstance} static method that always returns the same
   * instance object.
   * @param ctor The constructor for the class to add the static method to.
   */
  function addSingletonGetter (ctor : ( ...a : any [] ) => any ) : void ;
  /**
   * Call up to the superclass.
   *
   * If this is called from a constructor, then this calls the superclass
   * constructor with arguments 1-N.
   *
   * If this is called from a prototype method, then you must pass the name of the
   * method as the second argument to this function. If you do not, you will get a
   * runtime error. This calls the superclass' method with arguments 2-N.
   *
   * This function only works if you use goog.inherits to express inheritance
   * relationships between your classes.
   *
   * This function is a compiler primitive. At compile-time, the compiler will do
   * macro expansion to remove a lot of the extra overhead that this function
   * introduces. The compiler will also enforce a lot of the assumptions that this
   * function makes, and treat it as a compiler error if you break them.
   * @param me Should always be "this".
   * @param opt_methodName The method name if calling a super method.
   * @param var_args The rest of the arguments.
   */
  function base (me : Object , opt_methodName ? : any ,  ...var_args : any [] ) : any ;
  /**
   * Path for included scripts.
   */
  var basePath : string ;
  /**
   * Partially applies this function to a particular 'this object' and zero or
   * more arguments. The result is a new function with some arguments of the first
   * function pre-filled and the value of this 'pre-specified'.
   *
   * Remaining arguments specified at call-time are appended to the pre-specified
   * ones.
   *
   * Also see: {@link #partial}.
   *
   * Usage:
   * <pre>var barMethBound = goog.bind(myFunction, myObj, 'arg1', 'arg2');
   * barMethBound('arg3', 'arg4');</pre>
   * @param fn A function to partially apply.
   * @param selfObj Specifies the object which this should point to when the function is run.
   * @param var_args Additional arguments that are partially applied to the function.
   */
  function bind < T > (fn : ( ( ...a : any [] ) => any ) | null , selfObj : T ,  ...var_args : any [] ) : ( ...a : any [] ) => any ;
  /**
   * Clones a value. The input may be an Object, Array, or basic type. Objects and
   * arrays will be cloned recursively.
   *
   * WARNINGS:
   * <code>goog.cloneObject</code> does not detect reference loops. Objects that
   * refer to themselves will cause infinite recursion.
   *
   * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies
   * UIDs created by <code>getUid</code> into cloned results.
   * @param obj The value to clone.
   */
  function cloneObject (obj : any ) : any ;
  /**
   * Defines a named value. In uncompiled mode, the value is retrieved from
   * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and
   * has the property specified, and otherwise used the defined defaultValue.
   * When compiled the default can be overridden using the compiler
   * options or the value set in the CLOSURE_DEFINES object.
   * @param name The distinguished name to provide.
   */
  function define (name : string , defaultValue : string | number | boolean ) : void ;
  /**
   * Creates a restricted form of a Closure "class":
   * - from the compiler's perspective, the instance returned from the
   * constructor is sealed (no new properties may be added).  This enables
   * better checks.
   * - the compiler will rewrite this definition to a form that is optimal
   * for type checking and optimization (initially this will be a more
   * traditional form).
   * @param superClass The superclass, Object or null.
   * @param def An object literal describing the class.  It may have the following properties: "constructor": the constructor function "statics": an object literal containing methods to add to the constructor as "static" methods or a function that will receive the constructor function as its only parameter to which static properties can be added. all other properties are added to the prototype.
   */
  function defineClass (superClass : ( ( ...a : any [] ) => any ) | null , def : ಠ_ಠ.clutz.goog.defineClass.ClassDescriptor ) : ( ...a : any [] ) => any ;
  /**
   * Exports a property unobfuscated into the object's namespace.
   * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);
   * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);
   * @param object Object whose static property is being exported.
   * @param publicName Unobfuscated name to export.
   * @param symbol Object the name should point to.
   */
  function exportProperty (object : Object | null , publicName : string , symbol : any ) : void ;
  /**
   * Exposes an unobfuscated global namespace path for the given object.
   * Note that fields of the exported object *will* be obfuscated, unless they are
   * exported in turn via this function or goog.exportProperty.
   *
   * Also handy for making public items that are defined in anonymous closures.
   *
   * ex. goog.exportSymbol('public.path.Foo', Foo);
   *
   * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);
   * public.path.Foo.staticFunction();
   *
   * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',
   * Foo.prototype.myMethod);
   * new public.path.Foo().myMethod();
   * @param publicPath Unobfuscated name to export.
   * @param object Object the name should point to.
   * @param opt_objectToExportTo The object to add the path to; default is goog.global.
   */
  function exportSymbol (publicPath : string , object : any , opt_objectToExportTo ? : Object | null ) : void ;
  /**
   * Forward declares a symbol. This is an indication to the compiler that the
   * symbol may be used in the source yet is not required and may not be provided
   * in compilation.
   *
   * The most common usage of forward declaration is code that takes a type as a
   * function parameter but does not need to require it. By forward declaring
   * instead of requiring, no hard dependency is made, and (if not required
   * elsewhere) the namespace may never be required and thus, not be pulled
   * into the JavaScript binary. If it is required elsewhere, it will be type
   * checked as normal.
   * @param name The namespace to forward declare in the form of "goog.package.part".
   */
  function forwardDeclare (name : string ) : void ;
  /**
   * Handles strings that are intended to be used as CSS class names.
   *
   * This function works in tandem with @see goog.setCssNameMapping.
   *
   * Without any mapping set, the arguments are simple joined with a hyphen and
   * passed through unaltered.
   *
   * When there is a mapping, there are two possible styles in which these
   * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)
   * of the passed in css name is rewritten according to the map. In the BY_WHOLE
   * style, the full css name is looked up in the map directly. If a rewrite is
   * not specified by the map, the compiler will output a warning.
   *
   * When the mapping is passed to the compiler, it will replace calls to
   * goog.getCssName with the strings from the mapping, e.g.
   * var x = goog.getCssName('foo');
   * var y = goog.getCssName(this.baseClass, 'active');
   * becomes:
   * var x = 'foo';
   * var y = this.baseClass + '-active';
   *
   * If one argument is passed it will be processed, if two are passed only the
   * modifier will be processed, as it is assumed the first argument was generated
   * as a result of calling goog.getCssName.
   * @param className The class name.
   * @param opt_modifier A modifier to be appended to the class name.
   */
  function getCssName (className : string , opt_modifier ? : string ) : string ;
  /**
   * Adds a hash code field to an object. The hash code is unique for the
   * given object.
   * @param obj The object to get the hash code for.
   */
  function getHashCode (a : Object | null ) : number ;
  /**
   * Gets a localized message.
   *
   * This function is a compiler primitive. If you give the compiler a localized
   * message bundle, it will replace the string at compile-time with a localized
   * version, and expand goog.getMsg call to a concatenated string.
   *
   * Messages must be initialized in the form:
   * <code>
   * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});
   * </code>
   *
   * This function produces a string which should be treated as plain text. Use
   * {@link goog.html.SafeHtmlFormatter} in conjunction with goog.getMsg to
   * produce SafeHtml.
   * @param str Translatable string, places holders in the form {$foo}.
   * @param opt_values Maps place holder name to value.
   */
  function getMsg (str : string , opt_values ? : { [ key: string ]: string } | null ) : string ;
  /**
   * Gets a localized message. If the message does not have a translation, gives a
   * fallback message.
   *
   * This is useful when introducing a new message that has not yet been
   * translated into all languages.
   *
   * This function is a compiler primitive. Must be used in the form:
   * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>
   * where MSG_A and MSG_B were initialized with goog.getMsg.
   * @param a The preferred message.
   * @param b The fallback message.
   */
  function getMsgWithFallback (a : string , b : string ) : string ;
  /**
   * Returns an object based on its fully qualified external name.  The object
   * is not found if null or undefined.  If you are using a compilation pass that
   * renames property names beware that using this function will not find renamed
   * properties.
   * @param name The fully qualified name.
   * @param opt_obj The object within which to look; default is |goog.global|.
   */
  function getObjectByName (name : string , opt_obj ? : Object | null ) : any ;
  /**
   * Gets a unique ID for an object. This mutates the object so that further calls
   * with the same object as a parameter returns the same value. The unique ID is
   * guaranteed to be unique across the current session amongst objects that are
   * passed into {@code getUid}. There is no guarantee that the ID is unique or
   * consistent across sessions. It is unsafe to generate unique ID for function
   * prototypes.
   * @param obj The object to get the unique ID for.
   */
  function getUid (obj : Object | null ) : number ;
  /**
   * Evals JavaScript in the global scope.  In IE this uses execScript, other
   * browsers use goog.global.eval. If goog.global.eval does not evaluate in the
   * global scope (for example, in Safari), appends a script tag instead.
   * Throws an exception if neither execScript or eval is defined.
   * @param script JavaScript string.
   */
  function globalEval (script : string ) : void ;
  /**
   * Globalizes a whole namespace, such as goog or goog.lang.
   * @param obj The namespace to globalize.
   * @param opt_global The object to add the properties to.
   */
  function globalize (obj : Object , opt_global ? : Object | null ) : void ;
  /**
   * Whether the given object is already assigned a unique ID.
   *
   * This does not modify the object.
   * @param obj The object to check.
   */
  function hasUid (obj : Object ) : boolean ;
  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * Usage:
   * <pre>
   * function ParentClass(a, b) { }
   * ParentClass.prototype.foo = function(a) { };
   *
   * function ChildClass(a, b, c) {
   * ChildClass.base(this, 'constructor', a, b);
   * }
   * goog.inherits(ChildClass, ParentClass);
   *
   * var child = new ChildClass('a', 'b', 'see');
   * child.foo(); // This works.
   * </pre>
   * @param childCtor Child class.
   * @param parentCtor Parent class.
   */
  function inherits (childCtor : ( ...a : any [] ) => any , parentCtor : ( ...a : any [] ) => any ) : void ;
  /**
   * Returns true if the specified value is an array.
   * @param val Variable to test.
   */
  function isArray (val : any ) : boolean ;
  /**
   * Returns true if the object looks like an array. To qualify as array like
   * the value needs to be either a NodeList or an object with a Number length
   * property. As a special case, a function value is not array like, because its
   * length property is fixed to correspond to the number of expected arguments.
   * @param val Variable to test.
   */
  function isArrayLike (val : any ) : boolean ;
  /**
   * Returns true if the specified value is a boolean.
   * @param val Variable to test.
   */
  function isBoolean (val : any ) : boolean ;
  /**
   * Returns true if the object looks like a Date. To qualify as Date-like the
   * value needs to be an object and have a getFullYear() function.
   * @param val Variable to test.
   */
  function isDateLike (val : any ) : boolean ;
  /**
   * Returns true if the specified value is not undefined.
   * WARNING: Do not use this to test if an object has a property. Use the in
   * operator instead.
   * @param val Variable to test.
   */
  function isDef (val : any ) : boolean ;
  /**
   * Returns true if the specified value is defined and not null.
   * @param val Variable to test.
   */
  function isDefAndNotNull (val : any ) : boolean ;
  /**
   * Returns true if the specified value is a function.
   * @param val Variable to test.
   */
  function isFunction (val : any ) : boolean ;
  /**
   * Returns true if the specified value is null.
   * @param val Variable to test.
   */
  function isNull (val : any ) : boolean ;
  /**
   * Returns true if the specified value is a number.
   * @param val Variable to test.
   */
  function isNumber (val : any ) : boolean ;
  /**
   * Returns true if the specified value is an object.  This includes arrays and
   * functions.
   * @param val Variable to test.
   */
  function isObject (val : any ) : boolean ;
  /**
   * Returns true if the specified value is a string.
   * @param val Variable to test.
   */
  function isString (val : any ) : boolean ;
  function loadModule (moduleDef : ( (a : any ) => any ) | string ) : void ;
  /**
   * Load a goog.module from the provided URL.  This is not a general purpose
   * code loader and does not support late loading code, that is it should only
   * be used during page load. This method exists to support unit tests and
   * "debug" loaders that would otherwise have inserted script tags. Under the
   * hood this needs to use a synchronous XHR and is not recommeneded for
   * production code.
   *
   * The module's goog.requires must have already been satisified; an exception
   * will be thrown if this is not the case. This assumption is that no
   * "deps.js" file exists, so there is no way to discover and locate the
   * module-to-be-loaded's dependencies and no attempt is made to do so.
   *
   * There should only be one attempt to load a module.  If
   * "goog.loadModuleFromUrl" is called for an already loaded module, an
   * exception will be throw.
   * @param url The URL from which to attempt to load the goog.module.
   */
  function loadModuleFromUrl (url : string ) : void ;
  /**
   * Copies all the members of a source object to a target object. This method
   * does not work on all browsers for all objects that contain keys such as
   * toString or hasOwnProperty. Use goog.object.extend for this purpose.
   * @param target Target.
   * @param source Source.
   */
  function mixin (target : Object | null , source : Object | null ) : void ;
  /**
   * Defines a module in Closure.
   *
   * Marks that this file must be loaded as a module and claims the namespace.
   *
   * A namespace may only be defined once in a codebase. It may be defined using
   * goog.provide() or goog.module().
   *
   * goog.module() has three requirements:
   * - goog.module may not be used in the same file as goog.provide.
   * - goog.module must be the first statement in the file.
   * - only one goog.module is allowed per file.
   *
   * When a goog.module annotated file is loaded, it is enclosed in
   * a strict function closure. This means that:
   * - any variables declared in a goog.module file are private to the file
   * (not global), though the compiler is expected to inline the module.
   * - The code must obey all the rules of "strict" JavaScript.
   * - the file will be marked as "use strict"
   *
   * NOTE: unlike goog.provide, goog.module does not declare any symbols by
   * itself. If declared symbols are desired, use
   * goog.module.declareLegacyNamespace().
   *
   *
   * See the public goog.module proposal: http://goo.gl/Va1hin
   * @param name Namespace provided by this file in the form "goog.package.part", is expected but not required.
   */
  function module (name : string ) : void ;
  function now ( ) : number ;
  /**
   * Null function used for default values of callbacks, etc.
   */
  function nullFunction ( ) : void ;
  /**
   * Like goog.bind(), except that a 'this object' is not required. Useful when
   * the target function is already bound.
   *
   * Usage:
   * var g = goog.partial(f, arg1, arg2);
   * g(arg3, arg4);
   * @param fn A function to partially apply.
   * @param var_args Additional arguments that are partially applied to fn.
   */
  function partial (fn : ( ( ...a : any [] ) => any ) | null ,  ...var_args : any [] ) : ( ...a : any [] ) => any ;
  /**
   * Defines a namespace in Closure.
   *
   * A namespace may only be defined once in a codebase. It may be defined using
   * goog.provide() or goog.module().
   *
   * The presence of one or more goog.provide() calls in a file indicates
   * that the file defines the given objects/namespaces.
   * Provided symbols must not be null or undefined.
   *
   * In addition, goog.provide() creates the object stubs for a namespace
   * (for example, goog.provide("goog.foo.bar") will create the object
   * goog.foo.bar if it does not already exist).
   *
   * Build tools also scan for provide/require/module statements
   * to discern dependencies, build dependency files (see deps.js), etc.
   * @param name Namespace provided by this file in the form "goog.package.part".
   */
  function provide (name : string ) : void ;
  /**
   * Removes the hash code field from an object.
   * @param obj The object to remove the field from.
   */
  function removeHashCode (a : Object | null ) : any ;
  /**
   * Removes the unique ID from an object. This is useful if the object was
   * previously mutated using {@code goog.getUid} in which case the mutation is
   * undone.
   * @param obj The object to remove the unique ID field from.
   */
  function removeUid (obj : Object | null ) : void ;
  function require (name : string ) : ಠ_ಠ.clutz.ClosureSymbolNotGoogProvided;
  /**
   * Allow for aliasing within scope functions.  This function exists for
   * uncompiled code - in compiled code the calls will be inlined and the aliases
   * applied.  In uncompiled code the function is simply run since the aliases as
   * written are valid JavaScript.
   * @param fn Function to call.  This function can contain aliases to namespaces (e.g. "var dom = goog.dom") or classes (e.g. "var Timer = goog.Timer").
   */
  function scope (fn : ( ) => any ) : void ;
  /**
   * Sets the map to check when returning a value from goog.getCssName(). Example:
   * <pre>
   * goog.setCssNameMapping({
   * "goog": "a",
   * "disabled": "b",
   * });
   *
   * var x = goog.getCssName('goog');
   * // The following evaluates to: "a a-b".
   * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')
   * </pre>
   * When declared as a map of string literals to string literals, the JSCompiler
   * will replace all calls to goog.getCssName() using the supplied map if the
   * --process_closure_primitives flag is set.
   * @param mapping A map of strings to strings where keys are possible arguments to goog.getCssName() and values are the corresponding values that should be returned.
   * @param opt_style The style of css name mapping. There are two valid options: 'BY_PART', and 'BY_WHOLE'.
   */
  function setCssNameMapping (mapping : Object , opt_style ? : string ) : void ;
  /**
   * Marks that the current file should only be used for testing, and never for
   * live code in production.
   *
   * In the case of unit tests, the message may optionally be an exact namespace
   * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra
   * provide (if not explicitly defined in the code).
   * @param opt_message Optional message to add to the error that's raised when used in production code.
   */
  function setTestOnly (opt_message ? : string ) : void ;
  /**
   * Sealing classes breaks the older idiom of assigning properties on the
   * prototype rather than in the constructor. As such, goog.defineClass
   * must not seal subclasses of these old-style classes until they are fixed.
   * Until then, this marks a class as "broken", instructing defineClass
   * not to seal subclasses.
   * @param ctr The legacy constructor to tag as unsealable.
   */
  function tagUnsealableClass (ctr : ( ...a : any [] ) => any ) : void ;
  /**
   * This is a "fixed" version of the typeof operator.  It differs from the typeof
   * operator in such a way that null returns 'null' and arrays return 'array'.
   * @param value The value to get the type of.
   */
  function typeOf (value : any ) : string ;
}
declare module 'goog:goog' {
  import alias = ಠ_ಠ.clutz.goog;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * A deprecated alias.
   */
  type Delay < THIS > = ಠ_ಠ.clutz.goog.async.Delay < THIS > ;
  var Delay : typeof ಠ_ಠ.clutz.goog.async.Delay ;
}
declare module 'goog:goog.Delay' {
  import alias = ಠ_ಠ.clutz.goog.Delay;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * Class that provides the basic implementation for disposable objects. If your
   * class holds one or more references to COM objects, DOM nodes, or other
   * disposable objects, it should extend this class or implement the disposable
   * interface (defined in goog.disposable.IDisposable).
   */
  class Disposable extends Disposable_Instance {
    static INCLUDE_STACK_ON_CREATION : boolean ;
    static MONITORING_MODE : number ;
    /**
     * Clears the registry of undisposed objects but doesn't dispose of them.
     */
    static clearUndisposedObjects ( ) : void ;
    static getUndisposedObjects ( ) : ಠ_ಠ.clutz.goog.Disposable [] ;
    /**
     * Returns True if we can verify the object is disposed.
     * Calls {@code isDisposed} on the argument if it supports it.  If obj
     * is not an object with an isDisposed() method, return false.
     * @param obj The object to investigate.
     */
    static isDisposed (obj : any ) : boolean ;
  }
  class Disposable_Instance implements ಠ_ಠ.clutz.goog.disposable.IDisposable {
    private noStructuralTyping_: any;
    /**
     * Invokes a callback function when this object is disposed. Callbacks are
     * invoked in the order in which they were added. If a callback is added to
     * an already disposed Disposable, it will be called immediately.
     * @param callback The callback function.
     * @param opt_scope An optional scope to call the callback in.
     */
    addOnDisposeCallback < T > (callback : ( ) => any , opt_scope ? : T ) : void ;
    /**
     * If monitoring the goog.Disposable instances is enabled, stores the creation
     * stack trace of the Disposable instance.
     */
    creationStack : string ;
    /**
     * Disposes of the object. If the object hasn't already been disposed of, calls
     * {@link #disposeInternal}. Classes that extend {@code goog.Disposable} should
     * override {@link #disposeInternal} in order to delete references to COM
     * objects, DOM nodes, and other disposable objects. Reentrant.
     */
    dispose ( ) : void ;
    /**
     * Deletes or nulls out any references to COM objects, DOM nodes, or other
     * disposable objects. Classes that extend {@code goog.Disposable} should
     * override this method.
     * Not reentrant. To avoid calling it twice, it must only be called from the
     * subclass' {@code disposeInternal} method. Everywhere else the public
     * {@code dispose} method must be used.
     * For example:
     * <pre>
     * mypackage.MyClass = function() {
     * mypackage.MyClass.base(this, 'constructor');
     * // Constructor logic specific to MyClass.
     * ...
     * };
     * goog.inherits(mypackage.MyClass, goog.Disposable);
     *
     * mypackage.MyClass.prototype.disposeInternal = function() {
     * // Dispose logic specific to MyClass.
     * ...
     * // Call superclass's disposeInternal at the end of the subclass's, like
     * // in C++, to avoid hard-to-catch issues.
     * mypackage.MyClass.base(this, 'disposeInternal');
     * };
     * </pre>
     */
    disposeInternal ( ) : void ;
    getDisposed ( ) : boolean ;
    isDisposed ( ) : boolean ;
    /**
     * Associates a disposable object with this object so that they will be disposed
     * together.
     * @param disposable that will be disposed when this object is disposed.
     */
    registerDisposable (disposable : ಠ_ಠ.clutz.goog.disposable.IDisposable | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.Disposable {
  type MonitoringMode = number ;
  var MonitoringMode : {
    INTERACTIVE : MonitoringMode ,
    OFF : MonitoringMode ,
    PERMANENT : MonitoringMode ,
  };
}
declare module 'goog:goog.Disposable' {
  import alias = ಠ_ಠ.clutz.goog.Disposable;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * A history management object. Can be instantiated in user-visible mode (uses
   * the address fragment to manage state) or in hidden mode. This object should
   * be created from a script in the document body before the document has
   * finished loading.
   *
   * To store the hidden states in browsers other than IE, a hidden iframe is
   * used. It must point to a valid html page on the same domain (which can and
   * probably should be blank.)
   *
   * Sample instantiation and usage:
   *
   * <pre>
   * // Instantiate history to use the address bar for state.
   * var h = new goog.History();
   * goog.events.listen(h, goog.history.EventType.NAVIGATE, navCallback);
   * h.setEnabled(true);
   *
   * // Any changes to the location hash will call the following function.
   * function navCallback(e) {
   * alert('Navigated to state "' + e.token + '"');
   * }
   *
   * // The history token can also be set from code directly.
   * h.setToken('foo');
   * </pre>
   */
  class History extends History_Instance {
    /**
     * Whether the browser always requires the hash to be present. Internet Explorer
     * before version 8 will reload the HTML page if the hash is omitted.
     */
    static HASH_ALWAYS_REQUIRED : boolean ;
    /**
     * Whether the current browser is Internet Explorer prior to version 8. Many IE
     * specific workarounds developed before version 8 are unnecessary in more
     * current versions.
     */
    static LEGACY_IE : boolean ;
    /**
     * Whether the browser supports HTML5 history management's onhashchange event.
     * {@link http://www.w3.org/TR/html5/history.html}. IE 9 in compatibility mode
     * indicates that onhashchange is in window, but testing reveals the event
     * isn't actually fired.
     */
    static isOnHashChangeSupported ( ) : boolean ;
  }
  class History_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * A history management object. Can be instantiated in user-visible mode (uses
     * the address fragment to manage state) or in hidden mode. This object should
     * be created from a script in the document body before the document has
     * finished loading.
     *
     * To store the hidden states in browsers other than IE, a hidden iframe is
     * used. It must point to a valid html page on the same domain (which can and
     * probably should be blank.)
     *
     * Sample instantiation and usage:
     *
     * <pre>
     * // Instantiate history to use the address bar for state.
     * var h = new goog.History();
     * goog.events.listen(h, goog.history.EventType.NAVIGATE, navCallback);
     * h.setEnabled(true);
     *
     * // Any changes to the location hash will call the following function.
     * function navCallback(e) {
     * alert('Navigated to state "' + e.token + '"');
     * }
     *
     * // The history token can also be set from code directly.
     * h.setToken('foo');
     * </pre>
     * @param opt_invisible True to use hidden history states instead of the user-visible location hash.
     * @param opt_blankPageUrl A URL to a blank page on the same server. Required if opt_invisible is true. This URL is also used as the src for the iframe used to track history state in IE (if not specified the iframe is not given a src attribute). Access is Denied error may occur in IE7 if the window's URL's scheme is https, and this URL is not specified.
     * @param opt_input The hidden input element to be used to store the history token.  If not provided, a hidden input element will be created using document.write.
     * @param opt_iframe The hidden iframe that will be used by IE for pushing history state changes, or by all browsers if opt_invisible is true. If not provided, a hidden iframe element will be created using document.write.
     */
    constructor (opt_invisible ? : boolean , opt_blankPageUrl ? : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl , opt_input ? : HTMLInputElement | null , opt_iframe ? : HTMLIFrameElement | null ) ;
    /**
     * IE-only variable for determining if the document has loaded.
     */
    documentLoaded : boolean ;
    disposeInternal ( ) : void ;
    getToken ( ) : string ;
    /**
     * Callback for the window onload event in IE. This is necessary to read the
     * value of the hidden input after restoring a history session. The value of
     * input elements is not viewable until after window onload for some reason (the
     * iframe state is similarly unavailable during the loading phase.)  If
     * setEnabled is called before the iframe has completed loading, the history
     * object will actually be enabled at this point.
     */
    onDocumentLoaded ( ) : void ;
    /**
     * Replaces the current history state without affecting the rest of the history
     * stack.
     * @param token The history state identifier.
     * @param opt_title Optional title used when setting the hidden iframe title in IE.
     */
    replaceToken (token : string , opt_title ? : string ) : void ;
    /**
     * Starts or stops the History polling loop. When enabled, the History object
     * will immediately fire an event for the current location. The caller can set
     * up event listeners between the call to the constructor and the call to
     * setEnabled.
     *
     * On IE, actual startup may be delayed until the iframe and hidden input
     * element have been loaded and can be polled. This behavior is transparent to
     * the caller.
     * @param enable Whether to enable the history polling loop.
     */
    setEnabled (enable : boolean ) : void ;
    /**
     * Sets the history state. When user visible states are used, the URL fragment
     * will be set to the provided token.  Sometimes it is necessary to set the
     * history token before the document title has changed, in this case IE's
     * history drop down can be out of sync with the token.  To get around this
     * problem, the app can pass in a title to use with the hidden iframe.
     * @param token The history state identifier.
     * @param opt_title Optional title used when setting the hidden iframe title in IE.
     */
    setToken (token : string , opt_title ? : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.History {
  type PollingType = number ;
  var PollingType : {
    LONG : PollingType ,
    NORMAL : PollingType ,
  };
}
declare module 'goog:goog.History' {
  import alias = ಠ_ಠ.clutz.goog.History;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.History {
  /**
   * Constant for the history change event type.
   */
  type Event = ಠ_ಠ.clutz.goog.history.Event ;
  var Event : typeof ಠ_ಠ.clutz.goog.history.Event ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.History.Event'): typeof ಠ_ಠ.clutz.goog.History.Event;
}
declare module 'goog:goog.History.Event' {
  import alias = ಠ_ಠ.clutz.goog.History.Event;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.History {
  /**
   * Constant for the history change event type.
   */
  type EventType = string ;
  var EventType : {
    NAVIGATE : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.History.EventType'): typeof ಠ_ಠ.clutz.goog.History.EventType;
}
declare module 'goog:goog.History.EventType' {
  import alias = ಠ_ಠ.clutz.goog.History.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * Promises provide a result that may be resolved asynchronously. A Promise may
   * be resolved by being fulfilled with a fulfillment value, rejected with a
   * rejection reason, or blocked by another Promise. A Promise is said to be
   * settled if it is either fulfilled or rejected. Once settled, the Promise
   * result is immutable.
   *
   * Promises may represent results of any type, including undefined. Rejection
   * reasons are typically Errors, but may also be of any type. Closure Promises
   * allow for optional type annotations that enforce that fulfillment values are
   * of the appropriate types at compile time.
   *
   * The result of a Promise is accessible by calling {@code then} and registering
   * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise
   * is settled, the relevant callbacks are invoked with the fulfillment value or
   * rejection reason as argument. Callbacks are always invoked in the order they
   * were registered, even when additional {@code then} calls are made from inside
   * another callback. A callback is always run asynchronously sometime after the
   * scope containing the registering {@code then} invocation has returned.
   *
   * If a Promise is resolved with another Promise, the first Promise will block
   * until the second is settled, and then assumes the same result as the second
   * Promise. This allows Promises to depend on the results of other Promises,
   * linking together multiple asynchronous operations.
   *
   * This implementation is compatible with the Promises/A+ specification and
   * passes that specification's conformance test suite. A Closure Promise may be
   * resolved with a Promise instance (or sufficiently compatible Promise-like
   * object) created by other Promise implementations. From the specification,
   * Promise-like objects are known as "Thenables".
   */
  class Promise < TYPE , RESOLVER_CONTEXT > extends Promise_Instance < TYPE , RESOLVER_CONTEXT > {
    static DEFAULT_MAX_UNUSED : number ;
    static LONG_STACK_TRACES : boolean ;
    static UNHANDLED_REJECTION_DELAY : number ;
    static all < TYPE > (promises : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : ಠ_ಠ.clutz.goog.Promise < TYPE [] , any > ;
    static allSettled < TYPE > (promises : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : ಠ_ಠ.clutz.goog.Promise < { fulfilled : boolean , reason ? : any , value ? : TYPE } [] , any > ;
    static firstFulfilled < TYPE > (promises : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : ಠ_ಠ.clutz.goog.Promise < TYPE , any > ;
    static race < TYPE > (promises : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : ಠ_ಠ.clutz.goog.Promise < TYPE , any > ;
    static reject (opt_reason ? : any ) : ಠ_ಠ.clutz.goog.Promise < any , any > ;
    static resolve < VALUE , RESULT > (opt_value ? : VALUE ) : RESULT ;
    /**
     * Sets a handler that will be called with reasons from unhandled rejected
     * Promises. If the rejected Promise (or one of its descendants) has an
     * {@code onRejected} callback registered, the rejection will be considered
     * handled, and the rejection handler will not be called.
     *
     * By default, unhandled rejections are rethrown so that the error may be
     * captured by the developer console or a {@code window.onerror} handler.
     * @param handler A function that will be called with reasons from rejected Promises. Defaults to {@code goog.async.throwException}.
     */
    static setUnhandledRejectionHandler (handler : (a : any ) => any ) : void ;
    static withResolver < TYPE > ( ) : ಠ_ಠ.clutz.goog.promise.Resolver < TYPE > ;
  }
  class Promise_Instance < TYPE , RESOLVER_CONTEXT > implements ಠ_ಠ.clutz.goog.Thenable < TYPE > {
    private noStructuralTyping_: any;
    /**
     * Promises provide a result that may be resolved asynchronously. A Promise may
     * be resolved by being fulfilled with a fulfillment value, rejected with a
     * rejection reason, or blocked by another Promise. A Promise is said to be
     * settled if it is either fulfilled or rejected. Once settled, the Promise
     * result is immutable.
     *
     * Promises may represent results of any type, including undefined. Rejection
     * reasons are typically Errors, but may also be of any type. Closure Promises
     * allow for optional type annotations that enforce that fulfillment values are
     * of the appropriate types at compile time.
     *
     * The result of a Promise is accessible by calling {@code then} and registering
     * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise
     * is settled, the relevant callbacks are invoked with the fulfillment value or
     * rejection reason as argument. Callbacks are always invoked in the order they
     * were registered, even when additional {@code then} calls are made from inside
     * another callback. A callback is always run asynchronously sometime after the
     * scope containing the registering {@code then} invocation has returned.
     *
     * If a Promise is resolved with another Promise, the first Promise will block
     * until the second is settled, and then assumes the same result as the second
     * Promise. This allows Promises to depend on the results of other Promises,
     * linking together multiple asynchronous operations.
     *
     * This implementation is compatible with the Promises/A+ specification and
     * passes that specification's conformance test suite. A Closure Promise may be
     * resolved with a Promise instance (or sufficiently compatible Promise-like
     * object) created by other Promise implementations. From the specification,
     * Promise-like objects are known as "Thenables".
     * @param resolver Initialization function that is invoked immediately with {@code resolve} and {@code reject} functions as arguments. The Promise is resolved or rejected with the first argument passed to either function.
     * @param opt_context An optional context for executing the resolver function. If unspecified, the resolver function will be executed in the default scope.
     */
    constructor (resolver : (a : (a ? : TYPE | IThenable < TYPE > | null | { then : any } ) => any , b : (a ? : any ) => any ) => undefined , opt_context ? : RESOLVER_CONTEXT ) ;
    /**
     * Cancels the Promise if it is still pending by rejecting it with a cancel
     * Error. No action is performed if the Promise is already resolved.
     *
     * All child Promises of the canceled Promise will be rejected with the same
     * cancel error, as with normal Promise rejection. If the Promise to be canceled
     * is the only child of a pending Promise, the parent Promise will also be
     * canceled. Cancellation may propagate upward through multiple generations.
     * @param opt_message An optional debugging message for describing the cancellation reason.
     */
    cancel (opt_message ? : string ) : void ;
    /**
     * Adds callbacks that will operate on the result of the Promise, returning a
     * new child Promise.
     *
     * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked
     * with the fulfillment value as argument, and the child Promise will be
     * fulfilled with the return value of the callback. If the callback throws an
     * exception, the child Promise will be rejected with the thrown value instead.
     *
     * If the Promise is rejected, the {@code onRejected} callback will be invoked
     * with the rejection reason as argument, and the child Promise will be resolved
     * with the return value or rejected with the thrown value of the callback.
     */
    then < VALUE , THIS , RESULT > (opt_onFulfilled ? : ( (a : TYPE ) => VALUE ) | null , opt_onRejected ? : ( (a : any ) => any ) | null , opt_context ? : THIS ) : RESULT ;
    /**
     * Adds a callback that will be invoked when the Promise is settled (fulfilled
     * or rejected). The callback receives no argument, and no new child Promise is
     * created. This is useful for ensuring that cleanup takes place after certain
     * asynchronous operations. Callbacks added with {@code thenAlways} will be
     * executed in the same order with other calls to {@code then},
     * {@code thenAlways}, or {@code thenCatch}.
     *
     * Since it does not produce a new child Promise, cancellation propagation is
     * not prevented by adding callbacks with {@code thenAlways}. A Promise that has
     * a cleanup handler added with {@code thenAlways} will be canceled if all of
     * its children created by {@code then} (or {@code thenCatch}) are canceled.
     * Additionally, since any rejections are not passed to the callback, it does
     * not stop the unhandled rejection handler from running.
     * @param onSettled A function that will be invoked when the Promise is settled (fulfilled or rejected).
     * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed in the global scope.
     */
    thenAlways < THIS > (onSettled : ( ) => undefined , opt_context ? : THIS ) : ಠ_ಠ.clutz.goog.Promise < TYPE , any > ;
    /**
     * Adds a callback that will be invoked only if the Promise is rejected. This
     * is equivalent to {@code then(null, onRejected)}.
     * @param onRejected A function that will be invoked with the rejection reason if the Promise is rejected.
     * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed in the global scope.
     */
    thenCatch < THIS > (onRejected : (a : any ) => any , opt_context ? : THIS ) : ಠ_ಠ.clutz.goog.Promise < any , any > ;
    /**
     * Adds callbacks that will operate on the result of the Promise without
     * returning a child Promise (unlike "then").
     *
     * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked
     * with the fulfillment value as argument.
     *
     * If the Promise is rejected, the {@code onRejected} callback will be invoked
     * with the rejection reason as argument.
     * @param opt_onFulfilled A function that will be invoked with the fulfillment value if the Promise is fulfilled.
     * @param opt_onRejected A function that will be invoked with the rejection reason if the Promise is rejected.
     * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed with the default this.
     */
    thenVoid < THIS > (opt_onFulfilled ? : ( (a : TYPE ) => any ) | null , opt_onRejected ? : ( (a : any ) => any ) | null , opt_context ? : THIS ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.Promise {
  class CancellationError extends CancellationError_Instance {
  }
  class CancellationError_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
    /**
     * Error used as a rejection reason for canceled Promises.
     */
    constructor (opt_message ? : string ) ;
  }
}
declare module 'goog:goog.Promise' {
  import alias = ಠ_ಠ.clutz.goog.Promise;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * Provides a more strict interface for Thenables in terms of
   * http://promisesaplus.com for interop with {@see goog.Promise}.
   */
  interface Thenable < TYPE > extends IThenable < TYPE > {
    /**
     * Adds callbacks that will operate on the result of the Thenable, returning a
     * new child Promise.
     *
     * If the Thenable is fulfilled, the {@code onFulfilled} callback will be
     * invoked with the fulfillment value as argument, and the child Promise will
     * be fulfilled with the return value of the callback. If the callback throws
     * an exception, the child Promise will be rejected with the thrown value
     * instead.
     *
     * If the Thenable is rejected, the {@code onRejected} callback will be invoked
     * with the rejection reason as argument, and the child Promise will be rejected
     * with the return value of the callback or thrown value.
     * @param opt_onFulfilled A function that will be invoked with the fulfillment value if the Promise is fulfilled.
     * @param opt_onRejected A function that will be invoked with the rejection reason if the Promise is rejected.
     * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed with the default this.
     */
    then < VALUE , THIS , RESULT > (opt_onFulfilled ? : ( (a : TYPE ) => VALUE ) | null , opt_onRejected ? : ( (a : any ) => any ) | null , opt_context ? : THIS ) : RESULT ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.Thenable {
  var IMPLEMENTED_BY_PROP : string ;
  function addImplementation (ctor : { new ( ...a : any [] ) : ಠ_ಠ.clutz.goog.Thenable < any > } ) : void ;
  function isImplementedBy (object : any ) : boolean ;
}
declare module 'goog:goog.Thenable' {
  import alias = ಠ_ಠ.clutz.goog.Thenable;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * A deprecated alias.
   */
  type Throttle < T > = ಠ_ಠ.clutz.goog.async.Throttle < T > ;
  var Throttle : typeof ಠ_ಠ.clutz.goog.async.Throttle ;
}
declare module 'goog:goog.Throttle' {
  import alias = ಠ_ಠ.clutz.goog.Throttle;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * Class for handling timing events.
   */
  class Timer extends Timer_Instance {
    /**
     * Constant for the timer's event type.
     */
    static TICK : string ;
    /**
     * Calls the given function once, after the optional pause.
     * <p>
     * The function is always called asynchronously, even if the delay is 0. This
     * is a common trick to schedule a function to run after a batch of browser
     * event processing.
     * @param listener Function or object that has a handleEvent method.
     * @param opt_delay Milliseconds to wait; default is 0.
     * @param opt_handler Object in whose scope to call the listener.
     */
    static callOnce < SCOPE > (listener : ( ( ) => any ) | { handleEvent : ( ) => any } | null , opt_delay ? : number , opt_handler ? : SCOPE ) : number ;
    /**
     * Clears a timeout initiated by {@link #callOnce}.
     * @param timerId A timer ID.
     */
    static clear (timerId : number | null ) : void ;
    /**
     * An object that implements {@code setTimeout}, {@code setInterval},
     * {@code clearTimeout} and {@code clearInterval}. We default to the global
     * object. Changing {@code goog.Timer.defaultTimerObject} changes the object for
     * all timer instances which can be useful if your environment has some other
     * implementation of timers you'd like to use.
     */
    static defaultTimerObject : { clearTimeout : any , setTimeout : any } ;
    /**
     * Variable that controls the timer error correction. If the timer is called
     * before the requested interval times {@code intervalScale}, which often
     * happens on Mozilla, the timer is rescheduled.
     */
    static intervalScale : number ;
    static promise < RESULT > (delay : number , opt_result ? : RESULT | ಠ_ಠ.clutz.goog.Thenable < RESULT > | null | { then : any } ) : ಠ_ಠ.clutz.goog.Promise < RESULT , any > ;
  }
  class Timer_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Class for handling timing events.
     * @param opt_interval Number of ms between ticks (default: 1ms).
     * @param opt_timerObject An object that has {@code setTimeout}, {@code setInterval}, {@code clearTimeout} and {@code clearInterval} (e.g., {@code window}).
     */
    constructor (opt_interval ? : number , opt_timerObject ? : Object | null ) ;
    /**
     * Dispatches the TICK event. This is its own method so subclasses can override.
     */
    dispatchTick ( ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Whether this timer is enabled
     */
    enabled : boolean ;
    /**
     * Gets the interval of the timer.
     */
    getInterval ( ) : number ;
    /**
     * Sets the interval of the timer.
     * @param interval Number of ms between ticks.
     */
    setInterval (interval : number ) : void ;
    /**
     * Starts the timer.
     */
    start ( ) : void ;
    /**
     * Stops the timer.
     */
    stop ( ) : void ;
  }
}
declare module 'goog:goog.Timer' {
  import alias = ಠ_ಠ.clutz.goog.Timer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * This class contains setters and getters for the parts of the URI.
   * The <code>getXyz</code>/<code>setXyz</code> methods return the decoded part
   * -- so<code>goog.Uri.parse('/foo%20bar').getPath()</code> will return the
   * decoded path, <code>/foo bar</code>.
   *
   * Reserved characters (see RFC 3986 section 2.2) can be present in
   * their percent-encoded form in scheme, domain, and path URI components and
   * will not be auto-decoded. For example:
   * <code>goog.Uri.parse('rel%61tive/path%2fto/resource').getPath()</code> will
   * return <code>relative/path%2fto/resource</code>.
   *
   * The constructor accepts an optional unparsed, raw URI string.  The parser
   * is relaxed, so special characters that aren't escaped but don't cause
   * ambiguities will not cause parse failures.
   *
   * All setters return <code>this</code> and so may be chained, a la
   * <code>goog.Uri.parse('/foo').setFragment('part').toString()</code>.
   */
  class Uri extends Uri_Instance {
    /**
     * Parameter name added to stop caching.
     */
    static RANDOM_PARAM : string ;
    /**
     * Creates a new goog.Uri object from unencoded parts.
     * @param opt_scheme Scheme/protocol or full URI to parse.
     * @param opt_userInfo username:password.
     * @param opt_domain www.google.com.
     * @param opt_port 9830.
     * @param opt_path /some/path/to/a/file.html.
     * @param opt_query a=1&b=2.
     * @param opt_fragment The fragment without the #.
     * @param opt_ignoreCase Whether to ignore parameter name case in #getParameterValue.
     */
    static create (opt_scheme ? : string | null , opt_userInfo ? : string | null , opt_domain ? : string | null , opt_port ? : number | null , opt_path ? : string | null , opt_query ? : string | ಠ_ಠ.clutz.goog.Uri.QueryData | null , opt_fragment ? : string | null , opt_ignoreCase ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Checks whether two URIs have the same domain.
     * @param uri1String First URI string.
     * @param uri2String Second URI string.
     */
    static haveSameDomain (uri1String : string , uri2String : string ) : boolean ;
    /**
     * Creates a uri from the string form.  Basically an alias of new goog.Uri().
     * If a Uri object is passed to parse then it will return a clone of the object.
     * @param uri Raw URI string or instance of Uri object.
     * @param opt_ignoreCase Whether to ignore the case of parameter names in #getParameterValue.
     */
    static parse (uri : any , opt_ignoreCase ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * If true, we preserve the type of query parameters set programmatically.
     *
     * This means that if you set a parameter to a boolean, and then call
     * getParameterValue, you will get a boolean back.
     *
     * If false, we will coerce parameters to strings, just as they would
     * appear in real URIs.
     *
     * TODO(nicksantos): Remove this once people have time to fix all tests.
     */
    static preserveParameterTypesCompatibilityFlag : boolean ;
    /**
     * Removes dot segments in given path component, as described in
     * RFC 3986, section 5.2.4.
     * @param path A non-empty path component.
     */
    static removeDotSegments (path : string ) : string ;
    /**
     * Resolves a relative Uri against a base Uri, accepting both strings and
     * Uri objects.
     * @param base Base Uri.
     * @param rel Relative Uri.
     */
    static resolve (base : any , rel : any ) : ಠ_ಠ.clutz.goog.Uri ;
  }
  class Uri_Instance {
    private noStructuralTyping_: any;
    /**
     * This class contains setters and getters for the parts of the URI.
     * The <code>getXyz</code>/<code>setXyz</code> methods return the decoded part
     * -- so<code>goog.Uri.parse('/foo%20bar').getPath()</code> will return the
     * decoded path, <code>/foo bar</code>.
     *
     * Reserved characters (see RFC 3986 section 2.2) can be present in
     * their percent-encoded form in scheme, domain, and path URI components and
     * will not be auto-decoded. For example:
     * <code>goog.Uri.parse('rel%61tive/path%2fto/resource').getPath()</code> will
     * return <code>relative/path%2fto/resource</code>.
     *
     * The constructor accepts an optional unparsed, raw URI string.  The parser
     * is relaxed, so special characters that aren't escaped but don't cause
     * ambiguities will not cause parse failures.
     *
     * All setters return <code>this</code> and so may be chained, a la
     * <code>goog.Uri.parse('/foo').setFragment('part').toString()</code>.
     * @param opt_uri Optional string URI to parse (use goog.Uri.create() to create a URI from parts), or if a goog.Uri is passed, a clone is created.
     * @param opt_ignoreCase If true, #getParameterValue will ignore the case of the parameter name.
     */
    constructor (opt_uri ? : any , opt_ignoreCase ? : boolean ) ;
    /**
     * Clones the URI instance.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Checks if this Uri has been marked as read only, and if so, throws an error.
     * This should be called whenever any modifying function is called.
     */
    enforceReadOnly ( ) : void ;
    getDecodedQuery ( ) : string ;
    getDomain ( ) : string ;
    getEncodedQuery ( ) : string ;
    getFragment ( ) : string ;
    getIgnoreCase ( ) : boolean ;
    /**
     * Returns the first value for a given cgi parameter or undefined if the given
     * parameter name does not appear in the query string.
     * @param paramName Unescaped parameter name.
     */
    getParameterValue (paramName : string ) : string | undefined ;
    /**
     * Returns the value<b>s</b> for a given cgi parameter as a list of decoded
     * query parameter values.
     * @param name The parameter to get values for.
     */
    getParameterValues (name : string ) : any [] ;
    getPath ( ) : string ;
    getPort ( ) : number | null ;
    getQuery ( ) : string ;
    /**
     * Returns the query data.
     */
    getQueryData ( ) : ಠ_ಠ.clutz.goog.Uri.QueryData ;
    getScheme ( ) : string ;
    getUserInfo ( ) : string ;
    hasDomain ( ) : boolean ;
    hasFragment ( ) : boolean ;
    hasPath ( ) : boolean ;
    hasPort ( ) : boolean ;
    hasQuery ( ) : boolean ;
    /**
     * Returns true if this has the same domain as that of uri2.
     * @param uri2 The URI object to compare to.
     */
    hasSameDomainAs (uri2 : ಠ_ಠ.clutz.goog.Uri ) : boolean ;
    hasScheme ( ) : boolean ;
    hasUserInfo ( ) : boolean ;
    isReadOnly ( ) : boolean ;
    /**
     * Adds a random parameter to the Uri.
     */
    makeUnique ( ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Removes the named query parameter.
     * @param key The parameter to remove.
     */
    removeParameter (key : string ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Resolves the given relative URI (a goog.Uri object), using the URI
     * represented by this instance as the base URI.
     *
     * There are several kinds of relative URIs:<br>
     * 1. foo - replaces the last part of the path, the whole query and fragment<br>
     * 2. /foo - replaces the the path, the query and fragment<br>
     * 3. //foo - replaces everything from the domain on.  foo is a domain name<br>
     * 4. ?foo - replace the query and fragment<br>
     * 5. #foo - replace the fragment only
     *
     * Additionally, if relative URI has a non-empty path, all ".." and "."
     * segments will be resolved, as described in RFC 3986.
     * @param relativeUri The relative URI to resolve.
     */
    resolve (relativeUri : ಠ_ಠ.clutz.goog.Uri ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the domain.
     * @param newDomain New domain value.
     * @param opt_decode Optional param for whether to decode new value.
     */
    setDomain (newDomain : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the URI fragment.
     * @param newFragment New fragment value.
     * @param opt_decode Optional param for whether to decode new value.
     */
    setFragment (newFragment : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets whether to ignore case.
     * NOTE: If there are already key/value pairs in the QueryData, and
     * ignoreCase_ is set to false, the keys will all be lower-cased.
     * @param ignoreCase whether this goog.Uri should ignore case.
     */
    setIgnoreCase (ignoreCase : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the value of the named query parameters, clearing previous values for
     * that key.
     * @param key The parameter to set.
     * @param value The new value.
     */
    setParameterValue (key : string , value : any ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the values of the named query parameters, clearing previous values for
     * that key.  Not new values will currently be moved to the end of the query
     * string.
     *
     * So, <code>goog.Uri.parse('foo?a=b&c=d&e=f').setParameterValues('c', ['new'])
     * </code> yields <tt>foo?a=b&e=f&c=new</tt>.</p>
     * @param key The parameter to set.
     * @param values The new values. If values is a single string then it will be treated as the sole value.
     */
    setParameterValues (key : string , values : any ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the path.
     * @param newPath New path value.
     * @param opt_decode Optional param for whether to decode new value.
     */
    setPath (newPath : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the port number.
     * @param newPort Port number. Will be explicitly casted to a number.
     */
    setPort (newPort : any ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the URI query.
     * @param newQuery New query value.
     * @param opt_decode Optional param for whether to decode new value.
     */
    setQuery (newQuery : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the query data.
     * @param queryData QueryData object.
     * @param opt_decode Optional param for whether to decode new value. Applies only if queryData is a string.
     */
    setQueryData (queryData : ಠ_ಠ.clutz.goog.Uri.QueryData | null | string | undefined , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets whether Uri is read only. If this goog.Uri is read-only,
     * enforceReadOnly_ will be called at the start of any function that may modify
     * this Uri.
     * @param isReadOnly whether this goog.Uri should be read only.
     */
    setReadOnly (isReadOnly : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the scheme/protocol.
     * @param newScheme New scheme value.
     * @param opt_decode Optional param for whether to decode new value.
     */
    setScheme (newScheme : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the userInfo.
     * @param newUserInfo New userInfo value.
     * @param opt_decode Optional param for whether to decode new value.
     */
    setUserInfo (newUserInfo : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    toString ( ) : string ;
  }
}
declare module 'goog:goog.Uri' {
  import alias = ಠ_ಠ.clutz.goog.Uri;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.Uri {
  /**
   * Class used to represent URI query parameters.  It is essentially a hash of
   * name-value pairs, though a name can be present more than once.
   *
   * Has the same interface as the collections in goog.structs.
   */
  class QueryData extends QueryData_Instance {
    /**
     * Creates a new query data instance from parallel arrays of parameter names
     * and values. Allows for duplicate parameter names. Throws an error if the
     * lengths of the arrays differ.
     * @param keys Parameter names.
     * @param values Parameter values.
     * @param opt_uri URI object that should have its cache invalidated when this object updates.
     * @param opt_ignoreCase If true, ignore the case of the parameter name in #get.
     */
    static createFromKeysValues (keys : string [] , values : any [] , opt_uri ? : ಠ_ಠ.clutz.goog.Uri | null , opt_ignoreCase ? : boolean ) : ಠ_ಠ.clutz.goog.Uri.QueryData ;
    /**
     * Creates a new query data instance from a map of names and values.
     * @param map Map of string parameter names to parameter value. If parameter value is an array, it is treated as if the key maps to each individual value in the array.
     * @param opt_uri URI object that should have its cache invalidated when this object updates.
     * @param opt_ignoreCase If true, ignore the case of the parameter name in #get.
     */
    static createFromMap (map : Object , opt_uri ? : ಠ_ಠ.clutz.goog.Uri | null , opt_ignoreCase ? : boolean ) : ಠ_ಠ.clutz.goog.Uri.QueryData ;
  }
  class QueryData_Instance {
    private noStructuralTyping_: any;
    /**
     * Class used to represent URI query parameters.  It is essentially a hash of
     * name-value pairs, though a name can be present more than once.
     *
     * Has the same interface as the collections in goog.structs.
     * @param opt_query Optional encoded query string to parse into the object.
     * @param opt_uri Optional uri object that should have its cache invalidated when this object updates. Deprecated -- this is no longer required.
     * @param opt_ignoreCase If true, ignore the case of the parameter name in #get.
     */
    constructor (opt_query ? : string | null , opt_uri ? : ಠ_ಠ.clutz.goog.Uri | null , opt_ignoreCase ? : boolean ) ;
    /**
     * Adds a key value pair.
     * @param key Name.
     * @param value Value.
     */
    add (key : string , value : any ) : ಠ_ಠ.clutz.goog.Uri.QueryData ;
    /**
     * Clears the parameters.
     */
    clear ( ) : void ;
    /**
     * Clone the query data instance.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.Uri.QueryData ;
    /**
     * Whether there is a parameter with the given name
     * @param key The parameter name to check for.
     */
    containsKey (key : string ) : boolean ;
    /**
     * Whether there is a parameter with the given value.
     * @param value The value to check for.
     */
    containsValue (value : any ) : boolean ;
    /**
     * Extends a query data object with another query data or map like object. This
     * operates 'in-place', it does not create a new QueryData object.
     * @param var_args The object from which key value pairs will be copied.
     */
    extend ( ...var_args : ( null | Object | undefined ) [] ) : void ;
    /**
     * Removes all keys that are not in the provided list. (Modifies this object.)
     * @param keys The desired keys.
     */
    filterKeys (keys : string [] | null ) : ಠ_ಠ.clutz.goog.Uri.QueryData ;
    /**
     * Returns the first value associated with the key. If the query data has no
     * such key this will return undefined or the optional default.
     * @param key The name of the parameter to get the value for.
     * @param opt_default The default value to return if the query data has no such key.
     */
    get (key : string , opt_default ? : any ) : any ;
    getCount ( ) : number | null ;
    /**
     * Returns all the keys of the parameters. If a key is used multiple times
     * it will be included multiple times in the returned array
     */
    getKeys ( ) : string [] ;
    /**
     * Returns all the values of the parameters with the given name. If the query
     * data has no such key this will return an empty array. If no key is given
     * all values wil be returned.
     * @param opt_key The name of the parameter to get the values for.
     */
    getValues (opt_key ? : string ) : any [] ;
    isEmpty ( ) : boolean ;
    /**
     * Removes all the params with the given key.
     * @param key Name.
     */
    remove (key : string ) : boolean ;
    /**
     * Sets a key value pair and removes all other keys with the same value.
     * @param key Name.
     * @param value Value.
     */
    set (key : string , value : any ) : ಠ_ಠ.clutz.goog.Uri.QueryData ;
    /**
     * Ignore case in parameter names.
     * NOTE: If there are already key/value pairs in the QueryData, and
     * ignoreCase_ is set to false, the keys will all be lower-cased.
     * @param ignoreCase whether this goog.Uri should ignore case.
     */
    setIgnoreCase (ignoreCase : boolean ) : void ;
    /**
     * Sets the values for a key. If the key already exists, this will
     * override all of the existing values that correspond to the key.
     * @param key The key to set values for.
     * @param values The values to set.
     */
    setValues (key : string , values : any [] ) : void ;
    toDecodedString ( ) : string ;
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.Uri.QueryData'): typeof ಠ_ಠ.clutz.goog.Uri.QueryData;
}
declare module 'goog:goog.Uri.QueryData' {
  import alias = ಠ_ಠ.clutz.goog.Uri.QueryData;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * A map that contains mapping between an ARIA state and the default value
   * for it. Note that not all ARIA states have default values.
   */
  var DefaultStateValueMap_ : { [ key: string ]: string | boolean | number } | null ;
  /**
   * Asserts that the element has a role set if it's not an HTML element whose
   * semantics is well supported by most screen readers.
   * Only to be used internally by the ARIA library in goog.a11y.aria.*.
   * @param element The element to assert an ARIA role set.
   * @param allowedRoles The child roles of the roles.
   */
  function assertRoleIsSetInternalUtil (element : Element , allowedRoles : IArrayLike < string > ) : void ;
  /**
   * Returns the activedescendant element for the input element by
   * using the activedescendant ARIA property of the given element.
   * @param element DOM node to get activedescendant element for.
   */
  function getActiveDescendant (element : Element ) : Element | null ;
  /**
   * Gets the label of the given element.
   * @param element DOM node to get label from.
   */
  function getLabel (element : Element ) : string ;
  /**
   * Gets role of an element.
   * @param element DOM element to get role of.
   */
  function getRole (element : Element ) : ಠ_ಠ.clutz.goog.a11y.aria.Role ;
  /**
   * Gets value of specified state or property.
   * @param element DOM node to get state from.
   * @param stateName State name.
   */
  function getState (element : Element , stateName : string ) : string ;
  /**
   * Gets the boolean value of an ARIA state/property.
   * @param element The element to get the ARIA state for.
   * @param stateName the ARIA state name.
   */
  function getStateBoolean (element : Element , stateName : string ) : boolean | null ;
  /**
   * Gets the number value of an ARIA state/property.
   * @param element The element to get the ARIA state for.
   * @param stateName the ARIA state name.
   */
  function getStateNumber (element : Element , stateName : string ) : number | null ;
  /**
   * Gets the string value of an ARIA state/property.
   * @param element The element to get the ARIA state for.
   * @param stateName the ARIA state name.
   */
  function getStateString (element : Element , stateName : string ) : string | null ;
  /**
   * Gets array of strings value of the specified state or
   * property for the element.
   * Only to be used internally by the ARIA library in goog.a11y.aria.*.
   * @param element DOM node to get state from.
   * @param stateName State name.
   */
  function getStringArrayStateInternalUtil (element : Element , stateName : ಠ_ಠ.clutz.goog.a11y.aria.State ) : IArrayLike < string > ;
  /**
   * Returns true if element has an ARIA state/property, false otherwise.
   * @param element The element to get the ARIA state for.
   * @param stateName the ARIA state name.
   */
  function hasState (element : Element , stateName : string ) : boolean ;
  /**
   * Returns whether the element has a container ARIA role.
   * Container roles are ARIA roles that use the aria-activedescendant property
   * to manage their active descendants or children. See
   * {@link http://www.w3.org/TR/wai-aria/states_and_properties
   * #aria-activedescendant} for more information.
   */
  function isContainerRole (element : Element ) : boolean ;
  /**
   * Removes role of an element.
   * @param element DOM element to remove the role from.
   */
  function removeRole (element : Element ) : void ;
  /**
   * Remove the state or property for the element.
   * @param element DOM node where we set state.
   * @param stateName State name.
   */
  function removeState (element : Element , stateName : ಠ_ಠ.clutz.goog.a11y.aria.State ) : void ;
  /**
   * Sets the activedescendant ARIA property value for an element.
   * If the activeElement is not null, it should have an id set.
   * @param element DOM node to set activedescendant ARIA property to.
   * @param activeElement DOM node being set as activedescendant.
   */
  function setActiveDescendant (element : Element , activeElement : Element | null ) : void ;
  /**
   * Sets the label of the given element.
   * @param element DOM node to set label to.
   * @param label The label to set.
   */
  function setLabel (element : Element , label : string ) : void ;
  /**
   * Sets the role of an element. If the roleName is
   * empty string or null, the role for the element is removed.
   * We encourage clients to call the goog.a11y.aria.removeRole
   * method instead of setting null and empty string values.
   * Special handling for this case is added to ensure
   * backword compatibility with existing code.
   * @param element DOM node to set role of.
   * @param roleName role name(s).
   */
  function setRole (element : Element , roleName : string ) : void ;
  /**
   * Sets the state or property of an element.
   * @param element DOM node where we set state.
   * @param stateName State attribute being set. Automatically adds prefix 'aria-' to the state name if the attribute is not an extra attribute.
   * @param value Value for the state attribute.
   */
  function setState (element : Element , stateName : string , value : string | boolean | number | string [] ) : void ;
  /**
   * Toggles the ARIA attribute of an element.
   * Meant for attributes with a true/false value, but works with any attribute.
   * If the attribute does not have a true/false value, the following rules apply:
   * A not empty attribute will be removed.
   * An empty attribute will be set to true.
   * @param el DOM node for which to set attribute.
   * @param attr ARIA attribute being set. Automatically adds prefix 'aria-' to the attribute name if the attribute is not an extra attribute.
   */
  function toggleState (el : Element , attr : string ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria'): typeof ಠ_ಠ.clutz.goog.a11y.aria;
}
declare module 'goog:goog.a11y.aria' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * Class that allows messages to be spoken by assistive technologies that the
   * user may have active.
   */
  class Announcer extends Announcer_Instance {
  }
  class Announcer_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Class that allows messages to be spoken by assistive technologies that the
     * user may have active.
     * @param opt_domHelper DOM helper.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    disposeInternal ( ) : void ;
    /**
     * Announce a message to be read by any assistive technologies the user may
     * have active.
     * @param message The message to announce to screen readers.
     * @param opt_priority The priority of the message. Defaults to POLITE.
     */
    say (message : string , opt_priority ? : ಠ_ಠ.clutz.goog.a11y.aria.LivePriority ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.Announcer'): typeof ಠ_ಠ.clutz.goog.a11y.aria.Announcer;
}
declare module 'goog:goog.a11y.aria.Announcer' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.Announcer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA state values for AutoCompleteValues.
   */
  type AutoCompleteValues = string ;
  var AutoCompleteValues : {
    BOTH : AutoCompleteValues ,
    INLINE : AutoCompleteValues ,
    LIST : AutoCompleteValues ,
    NONE : AutoCompleteValues ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.AutoCompleteValues'): typeof ಠ_ಠ.clutz.goog.a11y.aria.AutoCompleteValues;
}
declare module 'goog:goog.a11y.aria.AutoCompleteValues' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.AutoCompleteValues;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA state values for CheckedValues.
   */
  type CheckedValues = string ;
  var CheckedValues : {
    FALSE : CheckedValues ,
    MIXED : CheckedValues ,
    TRUE : CheckedValues ,
    UNDEFINED : CheckedValues ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.CheckedValues'): typeof ಠ_ಠ.clutz.goog.a11y.aria.CheckedValues;
}
declare module 'goog:goog.a11y.aria.CheckedValues' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.CheckedValues;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA state values for DropEffectValues.
   */
  type DropEffectValues = string ;
  var DropEffectValues : {
    COPY : DropEffectValues ,
    EXECUTE : DropEffectValues ,
    LINK : DropEffectValues ,
    MOVE : DropEffectValues ,
    NONE : DropEffectValues ,
    POPUP : DropEffectValues ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.DropEffectValues'): typeof ಠ_ಠ.clutz.goog.a11y.aria.DropEffectValues;
}
declare module 'goog:goog.a11y.aria.DropEffectValues' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.DropEffectValues;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA state values for ExpandedValues.
   */
  type ExpandedValues = string ;
  var ExpandedValues : {
    FALSE : ExpandedValues ,
    TRUE : ExpandedValues ,
    UNDEFINED : ExpandedValues ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.ExpandedValues'): typeof ಠ_ಠ.clutz.goog.a11y.aria.ExpandedValues;
}
declare module 'goog:goog.a11y.aria.ExpandedValues' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.ExpandedValues;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA state values for GrabbedValues.
   */
  type GrabbedValues = string ;
  var GrabbedValues : {
    FALSE : GrabbedValues ,
    TRUE : GrabbedValues ,
    UNDEFINED : GrabbedValues ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.GrabbedValues'): typeof ಠ_ಠ.clutz.goog.a11y.aria.GrabbedValues;
}
declare module 'goog:goog.a11y.aria.GrabbedValues' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.GrabbedValues;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA state values for InvalidValues.
   */
  type InvalidValues = string ;
  var InvalidValues : {
    FALSE : InvalidValues ,
    GRAMMAR : InvalidValues ,
    SPELLING : InvalidValues ,
    TRUE : InvalidValues ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.InvalidValues'): typeof ಠ_ಠ.clutz.goog.a11y.aria.InvalidValues;
}
declare module 'goog:goog.a11y.aria.InvalidValues' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.InvalidValues;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA state values for LivePriority.
   */
  type LivePriority = string ;
  var LivePriority : {
    ASSERTIVE : LivePriority ,
    OFF : LivePriority ,
    POLITE : LivePriority ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.LivePriority'): typeof ಠ_ಠ.clutz.goog.a11y.aria.LivePriority;
}
declare module 'goog:goog.a11y.aria.LivePriority' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.LivePriority;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA state values for OrientationValues.
   */
  type OrientationValues = string ;
  var OrientationValues : {
    HORIZONTAL : OrientationValues ,
    VERTICAL : OrientationValues ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.OrientationValues'): typeof ಠ_ಠ.clutz.goog.a11y.aria.OrientationValues;
}
declare module 'goog:goog.a11y.aria.OrientationValues' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.OrientationValues;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA state values for PressedValues.
   */
  type PressedValues = string ;
  var PressedValues : {
    FALSE : PressedValues ,
    MIXED : PressedValues ,
    TRUE : PressedValues ,
    UNDEFINED : PressedValues ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.PressedValues'): typeof ಠ_ಠ.clutz.goog.a11y.aria.PressedValues;
}
declare module 'goog:goog.a11y.aria.PressedValues' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.PressedValues;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA state values for RelevantValues.
   */
  type RelevantValues = string ;
  var RelevantValues : {
    ADDITIONS : RelevantValues ,
    ALL : RelevantValues ,
    REMOVALS : RelevantValues ,
    TEXT : RelevantValues ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.RelevantValues'): typeof ಠ_ಠ.clutz.goog.a11y.aria.RelevantValues;
}
declare module 'goog:goog.a11y.aria.RelevantValues' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.RelevantValues;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA role values.
   */
  type Role = string ;
  var Role : {
    ALERT : Role ,
    ALERTDIALOG : Role ,
    APPLICATION : Role ,
    ARTICLE : Role ,
    BANNER : Role ,
    BUTTON : Role ,
    CHECKBOX : Role ,
    COLUMNHEADER : Role ,
    COMBOBOX : Role ,
    COMPLEMENTARY : Role ,
    CONTENTINFO : Role ,
    DEFINITION : Role ,
    DIALOG : Role ,
    DIRECTORY : Role ,
    DOCUMENT : Role ,
    FORM : Role ,
    GRID : Role ,
    GRIDCELL : Role ,
    GROUP : Role ,
    HEADING : Role ,
    IMG : Role ,
    LINK : Role ,
    LIST : Role ,
    LISTBOX : Role ,
    LISTITEM : Role ,
    LOG : Role ,
    MAIN : Role ,
    MARQUEE : Role ,
    MATH : Role ,
    MENU : Role ,
    MENUBAR : Role ,
    MENU_ITEM : Role ,
    MENU_ITEM_CHECKBOX : Role ,
    MENU_ITEM_RADIO : Role ,
    NAVIGATION : Role ,
    NOTE : Role ,
    OPTION : Role ,
    PRESENTATION : Role ,
    PROGRESSBAR : Role ,
    RADIO : Role ,
    RADIOGROUP : Role ,
    REGION : Role ,
    ROW : Role ,
    ROWGROUP : Role ,
    ROWHEADER : Role ,
    SCROLLBAR : Role ,
    SEARCH : Role ,
    SEPARATOR : Role ,
    SLIDER : Role ,
    SPINBUTTON : Role ,
    STATUS : Role ,
    TAB : Role ,
    TAB_LIST : Role ,
    TAB_PANEL : Role ,
    TEXTBOX : Role ,
    TEXTINFO : Role ,
    TIMER : Role ,
    TOOLBAR : Role ,
    TOOLTIP : Role ,
    TREE : Role ,
    TREEGRID : Role ,
    TREEITEM : Role ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.Role'): typeof ಠ_ಠ.clutz.goog.a11y.aria.Role;
}
declare module 'goog:goog.a11y.aria.Role' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.Role;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA state values for SelectedValues.
   */
  type SelectedValues = string ;
  var SelectedValues : {
    FALSE : SelectedValues ,
    TRUE : SelectedValues ,
    UNDEFINED : SelectedValues ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.SelectedValues'): typeof ಠ_ಠ.clutz.goog.a11y.aria.SelectedValues;
}
declare module 'goog:goog.a11y.aria.SelectedValues' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.SelectedValues;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA state values for SortValues.
   */
  type SortValues = string ;
  var SortValues : {
    ASCENDING : SortValues ,
    DESCENDING : SortValues ,
    NONE : SortValues ,
    OTHER : SortValues ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.SortValues'): typeof ಠ_ಠ.clutz.goog.a11y.aria.SortValues;
}
declare module 'goog:goog.a11y.aria.SortValues' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.SortValues;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * ARIA states and properties.
   */
  type State = string ;
  var State : {
    ACTIVEDESCENDANT : State ,
    ATOMIC : State ,
    AUTOCOMPLETE : State ,
    BUSY : State ,
    CHECKED : State ,
    CONTROLS : State ,
    DESCRIBEDBY : State ,
    DISABLED : State ,
    DROPEFFECT : State ,
    EXPANDED : State ,
    FLOWTO : State ,
    GRABBED : State ,
    HASPOPUP : State ,
    HIDDEN : State ,
    INVALID : State ,
    LABEL : State ,
    LABELLEDBY : State ,
    LEVEL : State ,
    LIVE : State ,
    MULTILINE : State ,
    MULTISELECTABLE : State ,
    ORIENTATION : State ,
    OWNS : State ,
    POSINSET : State ,
    PRESSED : State ,
    READONLY : State ,
    RELEVANT : State ,
    REQUIRED : State ,
    SELECTED : State ,
    SETSIZE : State ,
    SORT : State ,
    VALUEMAX : State ,
    VALUEMIN : State ,
    VALUENOW : State ,
    VALUETEXT : State ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.State'): typeof ಠ_ಠ.clutz.goog.a11y.aria.State;
}
declare module 'goog:goog.a11y.aria.State' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.State;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria.datatables {
  /**
   * A method that creates a map that contains mapping between an ARIA state and
   * the default value for it. Note that not all ARIA states have default values.
   */
  function getDefaultValuesMap ( ) : { [ key: string ]: string | boolean | number } ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.a11y.aria.datatables'): typeof ಠ_ಠ.clutz.goog.a11y.aria.datatables;
}
declare module 'goog:goog.a11y.aria.datatables' {
  import alias = ಠ_ಠ.clutz.goog.a11y.aria.datatables;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.array {
  var ASSUME_NATIVE_FUNCTIONS : boolean ;
  /**
   * Inserts a value into a sorted array. The array is not modified if the
   * value is already present.
   * @param array The array to modify.
   * @param value The object to insert.
   * @param opt_compareFn Optional comparison function by which the array is ordered. Should take 2 arguments to compare, and return a negative number, zero, or a positive number depending on whether the first argument is less than, equal to, or greater than the second.
   */
  function binaryInsert < VALUE > (array : IArrayLike < VALUE > | null , value : VALUE , opt_compareFn ? : (a : VALUE , b : VALUE ) => number ) : boolean ;
  /**
   * Removes a value from a sorted array.
   * @param array The array to modify.
   * @param value The object to remove.
   * @param opt_compareFn Optional comparison function by which the array is ordered. Should take 2 arguments to compare, and return a negative number, zero, or a positive number depending on whether the first argument is less than, equal to, or greater than the second.
   */
  function binaryRemove < VALUE > (array : IArrayLike < VALUE > , value : VALUE , opt_compareFn ? : (a : VALUE , b : VALUE ) => number ) : boolean ;
  /**
   * Searches the specified array for the specified target using the binary
   * search algorithm.  If no opt_compareFn is specified, elements are compared
   * using <code>goog.array.defaultCompare</code>, which compares the elements
   * using the built in < and > operators.  This will produce the expected
   * behavior for homogeneous arrays of String(s) and Number(s). The array
   * specified <b>must</b> be sorted in ascending order (as defined by the
   * comparison function).  If the array is not sorted, results are undefined.
   * If the array contains multiple instances of the specified target value, any
   * of these instances may be found.
   *
   * Runtime: O(log n)
   * @param arr The array to be searched.
   * @param target The sought value.
   * @param opt_compareFn Optional comparison function by which the array is ordered. Should take 2 arguments to compare, and return a negative number, zero, or a positive number depending on whether the first argument is less than, equal to, or greater than the second.
   */
  function binarySearch < TARGET , VALUE > (arr : IArrayLike < VALUE > | null , target : TARGET , opt_compareFn ? : (a : TARGET , b : VALUE ) => number ) : number ;
  /**
   * Selects an index in the specified array using the binary search algorithm.
   * The evaluator receives an element and determines whether the desired index
   * is before, at, or after it.  The evaluator must be consistent (formally,
   * goog.array.map(goog.array.map(arr, evaluator, opt_obj), goog.math.sign)
   * must be monotonically non-increasing).
   *
   * Runtime: O(log n)
   * @param arr The array to be searched.
   * @param evaluator Evaluator function that receives 3 arguments (the element, the index and the array). Should return a negative number, zero, or a positive number depending on whether the desired index is before, at, or after the element passed to it.
   * @param opt_obj The object to be used as the value of 'this' within evaluator.
   */
  function binarySelect < THIS , VALUE > (arr : IArrayLike < VALUE > | null , evaluator : (a : VALUE , b : number , c : any ) => number , opt_obj ? : THIS ) : number ;
  /**
   * Splits an array into disjoint buckets according to a splitting function.
   * @param array The array.
   * @param sorter Function to call for every element.  This takes 3 arguments (the element, the index and the array) and must return a valid object key (a string, number, etc), or undefined, if that object should not be placed in a bucket.
   * @param opt_obj The object to be used as the value of 'this' within sorter.
   */
  function bucket < T , S > (array : T [] | null , sorter : (a : T , b : number , c : T [] | null ) => any , opt_obj ? : S ) : Object ;
  /**
   * Clears the array.
   * @param arr Array or array like object to clear.
   */
  function clear (arr : IArrayLike < any > | null ) : void ;
  /**
   * Does a shallow copy of an array.
   * @param arr Array or array-like object to clone.
   */
  function clone < T > (a : IArrayLike < T > | null | string ) : T [] ;
  /**
   * 3-way array compare function.
   * @param arr1 The first array to compare.
   * @param arr2 The second array to compare.
   * @param opt_compareFn Optional comparison function by which the array is to be ordered. Should take 2 arguments to compare, and return a negative number, zero, or a positive number depending on whether the first argument is less than, equal to, or greater than the second.
   */
  function compare3 < VALUE > (arr1 : IArrayLike < VALUE > , arr2 : IArrayLike < VALUE > , opt_compareFn ? : (a : VALUE , b : VALUE ) => number ) : number ;
  /**
   * Returns a new array that is the result of joining the arguments.  If arrays
   * are passed then their items are added, however, if non-arrays are passed they
   * will be added to the return array as is.
   *
   * Note that ArrayLike objects will be added as is, rather than having their
   * items added.
   *
   * goog.array.concat([1, 2], [3, 4]) -> [1, 2, 3, 4]
   * goog.array.concat(0, [1, 2]) -> [0, 1, 2]
   * goog.array.concat([1, 2], null) -> [1, 2, null]
   *
   * There is bug in all current versions of IE (6, 7 and 8) where arrays created
   * in an iframe become corrupted soon (not immediately) after the iframe is
   * destroyed. This is common if loading data via goog.net.IframeIo, for example.
   * This corruption only affects the concat method which will start throwing
   * Catastrophic Errors (#-2147418113).
   *
   * See http://endoflow.com/scratch/corrupted-arrays.html for a test case.
   *
   * Internally goog.array should use this, so that all methods will continue to
   * work on these broken array objects.
   * @param var_args Items to concatenate.  Arrays will have each item added, while primitives and objects will be added as is.
   */
  function concat ( ...var_args : any [] ) : any [] ;
  /**
   * Maps each element of the input array into zero or more elements of the output
   * array.
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the element, the index and the array) and should return an array. The result will be used to extend a new array.
   * @param opt_obj The object to be used as the value of 'this' within f.
   */
  function concatMap < THIS , VALUE , RESULT > (arr : IArrayLike < VALUE > | string , f : (a : VALUE , b : number , c : any ) => RESULT [] , opt_obj ? : THIS ) : RESULT [] ;
  /**
   * Whether the array contains the given object.
   * @param arr The array to test for the presence of the element.
   * @param obj The object for which to test.
   */
  function contains (arr : IArrayLike < any > | null | string , obj : any ) : boolean ;
  /**
   * Returns a new array of elements from arr, based on the indexes of elements
   * provided by index_arr. For example, the result of index copying
   * ['a', 'b', 'c'] with index_arr [1,0,0,2] is ['b', 'a', 'a', 'c'].
   * @param arr The array to get a indexed copy from.
   * @param index_arr An array of indexes to get from arr.
   */
  function copyByIndex < T > (arr : T [] , index_arr : number [] ) : T [] ;
  /**
   * Counts the array elements that fulfill the predicate, i.e. for which the
   * callback function returns true. Skips holes in the array.
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. Takes 3 arguments (the element, the index and the array).
   * @param opt_obj The object to be used as the value of 'this' within f.
   */
  function count < T , S > (arr : IArrayLike < T > | string , f : (a : T , b : number , c : any ) => boolean , opt_obj ? : S ) : number ;
  /**
   * Compares its two arguments for order, using the built in < and >
   * operators.
   * @param a The first object to be compared.
   * @param b The second object to be compared.
   */
  function defaultCompare < VALUE > (a : VALUE , b : VALUE ) : number ;
  /**
   * Compares its two arguments for equality, using the built in === operator.
   * @param a The first object to compare.
   * @param b The second object to compare.
   */
  function defaultCompareEquality (a : any , b : any ) : boolean ;
  /**
   * Compares two arrays for equality. Two arrays are considered equal if they
   * have the same length and their corresponding elements are equal according to
   * the comparison function.
   * @param arr1 The first array to compare.
   * @param arr2 The second array to compare.
   * @param opt_equalsFn Optional comparison function. Should take 2 arguments to compare, and return true if the arguments are equal. Defaults to {@link goog.array.defaultCompareEquality} which compares the elements using the built-in '===' operator.
   */
  function equals (arr1 : IArrayLike < any > | null , arr2 : IArrayLike < any > | null , opt_equalsFn ? : ( ( ...a : any [] ) => any ) | null ) : boolean ;
  /**
   * Call f for each element of an array. If all calls return true, every()
   * returns true. If any call returns false, every() returns false and
   * does not continue to check the remaining elements.
   *
   * See {@link http://tinyurl.com/developer-mozilla-org-array-every}
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for for every element. This function takes 3 arguments (the element, the index and the array) and should return a boolean.
   * @param opt_obj The object to be used as the value of 'this' within f.
   */
  function every < T , S > (a : IArrayLike < T > | null | string , b : ( (a : T , b : number , c : any ) => boolean ) | null , c ? : S ) : boolean ;
  /**
   * Extends an array with another array, element, or "array like" object.
   * This function operates 'in-place', it does not create a new Array.
   *
   * Example:
   * var a = [];
   * goog.array.extend(a, [0, 1]);
   * a; // [0, 1]
   * goog.array.extend(a, 2);
   * a; // [0, 1, 2]
   * @param arr1 The array to modify.
   * @param var_args The elements or arrays of elements to add to arr1.
   */
  function extend < VALUE > (arr1 : VALUE [] | null ,  ...var_args : ( VALUE [] | null | VALUE | undefined ) [] ) : void ;
  /**
   * Calls a function for each element in an array, and if the function returns
   * true adds the element to a new array.
   *
   * See {@link http://tinyurl.com/developer-mozilla-org-array-filter}
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the element, the index and the array) and must return a Boolean. If the return value is true the element is added to the result array. If it is false the element is not included.
   * @param opt_obj The object to be used as the value of 'this' within f.
   */
  function filter < T , S > (a : IArrayLike < T > | null | string , b : ( (a : T , b : number , c : any ) => boolean ) | null , c ? : S ) : T [] ;
  /**
   * Search an array for the first element that satisfies a given condition and
   * return that element.
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the element, the index and the array) and should return a boolean.
   * @param opt_obj An optional "this" context for the function.
   */
  function find < T , S > (arr : IArrayLike < T > | null | string , f : ( (a : T , b : number , c : any ) => boolean ) | null , opt_obj ? : S ) : T | null ;
  /**
   * Search an array for the first element that satisfies a given condition and
   * return its index.
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the element, the index and the array) and should return a boolean.
   * @param opt_obj An optional "this" context for the function.
   */
  function findIndex < T , S > (arr : IArrayLike < T > | null | string , f : ( (a : T , b : number , c : any ) => boolean ) | null , opt_obj ? : S ) : number ;
  /**
   * Search an array (in reverse order) for the last element that satisfies a
   * given condition and return its index.
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the element, the index and the array) and should return a boolean.
   * @param opt_obj An optional "this" context for the function.
   */
  function findIndexRight < T , S > (arr : IArrayLike < T > | null | string , f : ( (a : T , b : number , c : any ) => boolean ) | null , opt_obj ? : S ) : number ;
  /**
   * Search an array (in reverse order) for the last element that satisfies a
   * given condition and return that element.
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the element, the index and the array) and should return a boolean.
   * @param opt_obj An optional "this" context for the function.
   */
  function findRight < T , S > (arr : IArrayLike < T > | null | string , f : ( (a : T , b : number , c : any ) => boolean ) | null , opt_obj ? : S ) : T | null ;
  /**
   * Returns an array consisting of every argument with all arrays
   * expanded in-place recursively.
   * @param var_args The values to flatten.
   */
  function flatten ( ...var_args : any [] ) : any [] ;
  /**
   * Calls a function for each element in an array. Skips holes in the array.
   * See {@link http://tinyurl.com/developer-mozilla-org-array-foreach}
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the element, the index and the array). The return value is ignored.
   * @param opt_obj The object to be used as the value of 'this' within f.
   */
  function forEach < T , S > (a : IArrayLike < T > | null | string , b : ( (a : T , b : number , c : any ) => any ) | null , c ? : S ) : any ;
  /**
   * Calls a function for each element in an array, starting from the last
   * element rather than the first.
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the element, the index and the array). The return value is ignored.
   * @param opt_obj The object to be used as the value of 'this' within f.
   */
  function forEachRight < T , S > (arr : IArrayLike < T > | null | string , f : ( (a : T , b : number , c : any ) => any ) | null , opt_obj ? : S ) : void ;
  /**
   * Returns the index of the first element of an array with a specified value, or
   * -1 if the element is not present in the array.
   *
   * See {@link http://tinyurl.com/developer-mozilla-org-array-indexof}
   * @param arr The array to be searched.
   * @param obj The object for which we are searching.
   * @param opt_fromIndex The index at which to start the search. If omitted the search starts at index 0.
   */
  function indexOf < T > (a : IArrayLike < T > | null | string , b : T , c ? : number ) : number ;
  /**
   * Pushes an item into an array, if it's not already in the array.
   * @param arr Array into which to insert the item.
   * @param obj Value to add.
   */
  function insert < T > (arr : T [] | null , obj : T ) : void ;
  /**
   * Inserts at the given index of the array, all elements of another array.
   * @param arr The array to modify.
   * @param elementsToAdd The array of elements to add.
   * @param opt_i The index at which to insert the object. If omitted, treated as 0. A negative index is counted from the end of the array.
   */
  function insertArrayAt (arr : IArrayLike < any > | null , elementsToAdd : IArrayLike < any > | null , opt_i ? : number ) : void ;
  /**
   * Inserts an object at the given index of the array.
   * @param arr The array to modify.
   * @param obj The object to insert.
   * @param opt_i The index at which to insert the object. If omitted, treated as 0. A negative index is counted from the end of the array.
   */
  function insertAt (arr : IArrayLike < any > | null , obj : any , opt_i ? : number ) : void ;
  /**
   * Inserts an object into an array before a specified object.
   * @param arr The array to modify.
   * @param obj The object to insert.
   * @param opt_obj2 The object before which obj should be inserted. If obj2 is omitted or not found, obj is inserted at the end of the array.
   */
  function insertBefore < T > (arr : T [] | null , obj : T , opt_obj2 ? : T ) : void ;
  /**
   * Compares its two arguments for inverse order, using the built in < and >
   * operators.
   * @param a The first object to be compared.
   * @param b The second object to be compared.
   */
  function inverseDefaultCompare < VALUE > (a : VALUE , b : VALUE ) : number ;
  /**
   * Whether the array is empty.
   * @param arr The array to test.
   */
  function isEmpty (arr : IArrayLike < any > | null | string ) : boolean ;
  /**
   * Tells if the array is sorted.
   * @param arr The array.
   * @param opt_compareFn Function to compare the array elements. Should take 2 arguments to compare, and return a negative number, zero, or a positive number depending on whether the first argument is less than, equal to, or greater than the second.
   * @param opt_strict If true no equal elements are allowed.
   */
  function isSorted < T > (arr : T [] , opt_compareFn ? : ( (a : T , b : T ) => number ) | null , opt_strict ? : boolean ) : boolean ;
  /**
   * Returns a new array that contains the contents of all the arrays passed.
   */
  function join < T > ( ...var_args : ( T [] | undefined ) [] ) : T [] ;
  /**
   * Returns the last element in an array without removing it.
   * Same as goog.array.peek.
   * @param array The array.
   */
  function last < T > (a : IArrayLike < T > | null | string ) : T ;
  /**
   * Returns the index of the last element of an array with a specified value, or
   * -1 if the element is not present in the array.
   *
   * See {@link http://tinyurl.com/developer-mozilla-org-array-lastindexof}
   * @param arr The array to be searched.
   * @param obj The object for which we are searching.
   * @param opt_fromIndex The index at which to start the search. If omitted the search starts at the end of the array.
   */
  function lastIndexOf < T > (a : IArrayLike < T > | string , b : T , c ? : number | null ) : number ;
  /**
   * Calls a function for each element in an array and inserts the result into a
   * new array.
   *
   * See {@link http://tinyurl.com/developer-mozilla-org-array-map}
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the element, the index and the array) and should return something. The result will be inserted into a new array.
   * @param opt_obj The object to be used as the value of 'this' within f.
   */
  function map < THIS , VALUE , RESULT > (a : IArrayLike < VALUE > | null | string , b : (a : VALUE , b : number , c : any ) => RESULT , c ? : THIS ) : RESULT [] ;
  /**
   * Moves one item of an array to a new position keeping the order of the rest
   * of the items. Example use case: keeping a list of JavaScript objects
   * synchronized with the corresponding list of DOM elements after one of the
   * elements has been dragged to a new position.
   * @param arr The array to modify.
   * @param fromIndex Index of the item to move between 0 and {@code arr.length - 1}.
   * @param toIndex Target index between 0 and {@code arr.length - 1}.
   */
  function moveItem (arr : IArrayLike < any > , fromIndex : number , toIndex : number ) : void ;
  /**
   * Returns the last element in an array without removing it.
   * Same as goog.array.last.
   * @param array The array.
   */
  function peek < T > (array : IArrayLike < T > | null | string ) : T ;
  /**
   * Creates a range of numbers in an arithmetic progression.
   *
   * Range takes 1, 2, or 3 arguments:
   * <pre>
   * range(5) is the same as range(0, 5, 1) and produces [0, 1, 2, 3, 4]
   * range(2, 5) is the same as range(2, 5, 1) and produces [2, 3, 4]
   * range(-2, -5, -1) produces [-2, -3, -4]
   * range(-2, -5, 1) produces [], since stepping by 1 wouldn't ever reach -5.
   * </pre>
   * @param startOrEnd The starting value of the range if an end argument is provided. Otherwise, the start value is 0, and this is the end value.
   * @param opt_end The optional end value of the range.
   * @param opt_step The step size between range values. Defaults to 1 if opt_step is undefined or 0.
   */
  function range (startOrEnd : number , opt_end ? : number , opt_step ? : number ) : number [] ;
  /**
   * Passes every element of an array into a function and accumulates the result.
   *
   * See {@link http://tinyurl.com/developer-mozilla-org-array-reduce}
   *
   * For example:
   * var a = [1, 2, 3, 4];
   * goog.array.reduce(a, function(r, v, i, arr) {return r + v;}, 0);
   * returns 10
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. This function takes 4 arguments (the function's previous result or the initial value, the value of the current array element, the current array index, and the array itself) function(previousValue, currentValue, index, array).
   * @param val The initial value to pass into the function on the first call.
   * @param opt_obj The object to be used as the value of 'this' within f.
   */
  function reduce < T , S , R > (a : IArrayLike < T > | null | string , b : (a : R , b : T , c : number , d : any ) => R , c : any , d ? : S ) : R ;
  /**
   * Passes every element of an array into a function and accumulates the result,
   * starting from the last element and working towards the first.
   *
   * See {@link http://tinyurl.com/developer-mozilla-org-array-reduceright}
   *
   * For example:
   * var a = ['a', 'b', 'c'];
   * goog.array.reduceRight(a, function(r, v, i, arr) {return r + v;}, '');
   * returns 'cba'
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. This function takes 4 arguments (the function's previous result or the initial value, the value of the current array element, the current array index, and the array itself) function(previousValue, currentValue, index, array).
   * @param val The initial value to pass into the function on the first call.
   * @param opt_obj The object to be used as the value of 'this' within f.
   */
  function reduceRight < T , S , R > (a : IArrayLike < T > | null | string , b : ( (a : R , b : T , c : number , d : any ) => R ) | null , c : any , d ? : S ) : R ;
  /**
   * Removes the first occurrence of a particular value from an array.
   * @param arr Array from which to remove value.
   * @param obj Object to remove.
   */
  function remove < T > (arr : IArrayLike < T > | null , obj : T ) : boolean ;
  /**
   * Removes all values that satisfy the given condition.
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the element, the index and the array) and should return a boolean.
   * @param opt_obj An optional "this" context for the function.
   */
  function removeAllIf < T , S > (arr : IArrayLike < T > | null , f : ( (a : T , b : number , c : any ) => boolean ) | null , opt_obj ? : S ) : number ;
  /**
   * Removes from an array the element at index i
   * @param arr Array or array like object from which to remove value.
   * @param i The index to remove.
   */
  function removeAt (arr : IArrayLike < any > | null , i : number ) : boolean ;
  /**
   * Removes all duplicates from an array (retaining only the first
   * occurrence of each array element).  This function modifies the
   * array in place and doesn't change the order of the non-duplicate items.
   *
   * For objects, duplicates are identified as having the same unique ID as
   * defined by {@link goog.getUid}.
   *
   * Alternatively you can specify a custom hash function that returns a unique
   * value for each item in the array it should consider unique.
   *
   * Runtime: N,
   * Worstcase space: 2N (no dupes)
   * @param arr The array from which to remove duplicates.
   * @param opt_rv An optional array in which to return the results, instead of performing the removal inplace.  If specified, the original array will remain unchanged.
   * @param opt_hashFn An optional function to use to apply to every item in the array. This function should return a unique value for each item in the array it should consider unique.
   */
  function removeDuplicates < T > (arr : IArrayLike < T > | null , opt_rv ? : any [] | null , opt_hashFn ? : (a : T ) => string ) : void ;
  /**
   * Removes the first value that satisfies the given condition.
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the element, the index and the array) and should return a boolean.
   * @param opt_obj An optional "this" context for the function.
   */
  function removeIf < T , S > (arr : IArrayLike < T > | null , f : ( (a : T , b : number , c : any ) => boolean ) | null , opt_obj ? : S ) : boolean ;
  /**
   * Removes the last occurrence of a particular value from an array.
   * @param arr Array from which to remove value.
   * @param obj Object to remove.
   */
  function removeLast < T > (arr : IArrayLike < T > , obj : T ) : boolean ;
  /**
   * Returns an array consisting of the given value repeated N times.
   * @param value The value to repeat.
   * @param n The repeat count.
   */
  function repeat < VALUE > (value : VALUE , n : number ) : VALUE [] ;
  /**
   * Rotates an array in-place. After calling this method, the element at
   * index i will be the element previously at index (i - n) %
   * array.length, for all values of i between 0 and array.length - 1,
   * inclusive.
   *
   * For example, suppose list comprises [t, a, n, k, s]. After invoking
   * rotate(array, 1) (or rotate(array, -4)), array will comprise [s, t, a, n, k].
   * @param array The array to rotate.
   * @param n The amount to rotate.
   */
  function rotate < T > (array : T [] , n : number ) : T [] ;
  /**
   * Shuffles the values in the specified array using the Fisher-Yates in-place
   * shuffle (also known as the Knuth Shuffle). By default, calls Math.random()
   * and so resets the state of that random number generator. Similarly, may reset
   * the state of the any other specified random number generator.
   *
   * Runtime: O(n)
   * @param arr The array to be shuffled.
   * @param opt_randFn Optional random function to use for shuffling. Takes no arguments, and returns a random number on the interval [0, 1). Defaults to Math.random() using JavaScript's built-in Math library.
   */
  function shuffle (arr : any [] , opt_randFn ? : ( ) => number ) : void ;
  /**
   * Returns a new array from a segment of an array. This is a generic version of
   * Array slice. This means that it might work on other objects similar to
   * arrays, such as the arguments object.
   * @param arr The array from which to copy a segment.
   * @param start The index of the first element to copy.
   * @param opt_end The index after the last element to copy.
   */
  function slice < T > (arr : IArrayLike < T > | null | string , start : number , opt_end ? : number ) : T [] ;
  /**
   * Calls f for each element of an array. If any call returns true, some()
   * returns true (without checking the remaining elements). If all calls
   * return false, some() returns false.
   *
   * See {@link http://tinyurl.com/developer-mozilla-org-array-some}
   * @param arr Array or array like object over which to iterate.
   * @param f The function to call for for every element. This function takes 3 arguments (the element, the index and the array) and should return a boolean.
   * @param opt_obj The object to be used as the value of 'this' within f.
   */
  function some < T , S > (a : IArrayLike < T > | null | string , b : ( (a : T , b : number , c : any ) => boolean ) | null , c ? : S ) : boolean ;
  /**
   * Sorts the specified array into ascending order.  If no opt_compareFn is
   * specified, elements are compared using
   * <code>goog.array.defaultCompare</code>, which compares the elements using
   * the built in < and > operators.  This will produce the expected behavior
   * for homogeneous arrays of String(s) and Number(s), unlike the native sort,
   * but will give unpredictable results for heterogeneous lists of strings and
   * numbers with different numbers of digits.
   *
   * This sort is not guaranteed to be stable.
   *
   * Runtime: Same as <code>Array.prototype.sort</code>
   * @param arr The array to be sorted.
   * @param opt_compareFn Optional comparison function by which the array is to be ordered. Should take 2 arguments to compare, and return a negative number, zero, or a positive number depending on whether the first argument is less than, equal to, or greater than the second.
   */
  function sort < T > (arr : T [] | null , opt_compareFn ? : ( (a : T , b : T ) => number ) | null ) : void ;
  /**
   * Sort the specified array into ascending order based on item keys
   * returned by the specified key function.
   * If no opt_compareFn is specified, the keys are compared in ascending order
   * using <code>goog.array.defaultCompare</code>.
   *
   * Runtime: O(S(f(n)), where S is runtime of <code>goog.array.sort</code>
   * and f(n) is runtime of the key function.
   * @param arr The array to be sorted.
   * @param keyFn Function taking array element and returning a key used for sorting this element.
   * @param opt_compareFn Optional comparison function by which the keys are to be ordered. Should take 2 arguments to compare, and return a negative number, zero, or a positive number depending on whether the first argument is less than, equal to, or greater than the second.
   */
  function sortByKey < T , K > (arr : T [] | null , keyFn : (a : T ) => K , opt_compareFn ? : ( (a : K , b : K ) => number ) | null ) : void ;
  /**
   * Sorts an array of objects by the specified object key and compare
   * function. If no compare function is provided, the key values are
   * compared in ascending order using <code>goog.array.defaultCompare</code>.
   * This won't work for keys that get renamed by the compiler. So use
   * {'foo': 1, 'bar': 2} rather than {foo: 1, bar: 2}.
   * @param arr An array of objects to sort.
   * @param key The object key to sort by.
   * @param opt_compareFn The function to use to compare key values.
   */
  function sortObjectsByKey (arr : ( Object | null ) [] | null , key : string , opt_compareFn ? : ( ( ...a : any [] ) => any ) | null ) : void ;
  /**
   * Adds or removes elements from an array. This is a generic version of Array
   * splice. This means that it might work on other objects similar to arrays,
   * such as the arguments object.
   * @param arr The array to modify.
   * @param index The index at which to start changing the array. If not defined, treated as 0.
   * @param howMany How many elements to remove (0 means no removal. A value below 0 is treated as zero and so is any other non number. Numbers are floored).
   * @param var_args Optional, additional elements to insert into the array.
   */
  function splice < T > (arr : IArrayLike < T > | null , index : number | undefined , howMany : number ,  ...var_args : ( T | undefined ) [] ) : T [] ;
  /**
   * Sorts the specified array into ascending order in a stable way.  If no
   * opt_compareFn is specified, elements are compared using
   * <code>goog.array.defaultCompare</code>, which compares the elements using
   * the built in < and > operators.  This will produce the expected behavior
   * for homogeneous arrays of String(s) and Number(s).
   *
   * Runtime: Same as <code>Array.prototype.sort</code>, plus an additional
   * O(n) overhead of copying the array twice.
   * @param arr The array to be sorted.
   * @param opt_compareFn Optional comparison function by which the array is to be ordered. Should take 2 arguments to compare, and return a negative number, zero, or a positive number depending on whether the first argument is less than, equal to, or greater than the second.
   */
  function stableSort < T > (arr : T [] | null , opt_compareFn ? : ( (a : T , b : T ) => number ) | null ) : void ;
  /**
   * Converts an object to an array.
   * @param object The object to convert to an array.
   */
  function toArray < T > (object : IArrayLike < T > | null | string ) : T [] ;
  /**
   * Creates a new object built from the provided array and the key-generation
   * function.
   * @param arr Array or array like object over which to iterate whose elements will be the values in the new object.
   * @param keyFunc The function to call for every element. This function takes 3 arguments (the element, the index and the array) and should return a string that will be used as the key for the element in the new object. If the function returns the same key for more than one element, the value for that key is implementation-defined.
   * @param opt_obj The object to be used as the value of 'this' within keyFunc.
   */
  function toObject < T , S > (arr : IArrayLike < T > | null , keyFunc : ( (a : T , b : number , c : any ) => string ) | null , opt_obj ? : S ) : { [ /* warning: coerced from ? */ key: string ]: T } ;
  /**
   * Creates a new array for which the element at position i is an array of the
   * ith element of the provided arrays.  The returned array will only be as long
   * as the shortest array provided; additional values are ignored.  For example,
   * the result of zipping [1, 2] and [3, 4, 5] is [[1,3], [2, 4]].
   *
   * This is similar to the zip() function in Python.  See {@link
   * http://docs.python.org/library/functions.html#zip}
   * @param var_args Arrays to be combined.
   */
  function zip ( ...var_args : ( IArrayLike < any > | undefined ) [] ) : any [] [] ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.array'): typeof ಠ_ಠ.clutz.goog.array;
}
declare module 'goog:goog.array' {
  import alias = ಠ_ಠ.clutz.goog.array;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.asserts {
  /**
   * The default error handler.
   * @param e The exception to be handled.
   */
  function DEFAULT_ERROR_HANDLER (e : ಠ_ಠ.clutz.goog.asserts.AssertionError ) : any ;
  var ENABLE_ASSERTS : boolean ;
  /**
   * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is
   * true.
   * @param condition The condition to check.
   * @param opt_message Error message in case of failure.
   * @param var_args The items to substitute into the failure message.
   */
  function assert < T > (condition : T , opt_message ? : string ,  ...var_args : any [] ) : T ;
  /**
   * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.
   * @param value The value to check.
   * @param opt_message Error message in case of failure.
   * @param var_args The items to substitute into the failure message.
   */
  function assertArray (value : any , opt_message ? : string ,  ...var_args : any [] ) : any [] ;
  /**
   * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.
   * @param value The value to check.
   * @param opt_message Error message in case of failure.
   * @param var_args The items to substitute into the failure message.
   */
  function assertBoolean (value : any , opt_message ? : string ,  ...var_args : any [] ) : boolean ;
  /**
   * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.
   * @param value The value to check.
   * @param opt_message Error message in case of failure.
   * @param var_args The items to substitute into the failure message.
   */
  function assertElement (value : any , opt_message ? : string ,  ...var_args : any [] ) : Element ;
  /**
   * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.
   * @param value The value to check.
   * @param opt_message Error message in case of failure.
   * @param var_args The items to substitute into the failure message.
   */
  function assertFunction (value : any , opt_message ? : string ,  ...var_args : any [] ) : ( ...a : any [] ) => any ;
  /**
   * Checks if the value is an instance of the user-defined type if
   * goog.asserts.ENABLE_ASSERTS is true.
   *
   * The compiler may tighten the type returned by this function.
   * @param value The value to check.
   * @param type A user-defined constructor.
   * @param opt_message Error message in case of failure.
   * @param var_args The items to substitute into the failure message.
   */
  function assertInstanceof < T > (value : any , type : { new ( ...a : any [] ) : T } , opt_message ? : string ,  ...var_args : any [] ) : T ;
  /**
   * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.
   * @param value The value to check.
   * @param opt_message Error message in case of failure.
   * @param var_args The items to substitute into the failure message.
   */
  function assertNumber (value : any , opt_message ? : string ,  ...var_args : any [] ) : number ;
  /**
   * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.
   * @param value The value to check.
   * @param opt_message Error message in case of failure.
   * @param var_args The items to substitute into the failure message.
   */
  function assertObject (value : any , opt_message ? : string ,  ...var_args : any [] ) : Object ;
  /**
   * Checks that no enumerable keys are present in Object.prototype. Such keys
   * would break most code that use {@code for (var ... in ...)} loops.
   */
  function assertObjectPrototypeIsIntact ( ) : void ;
  /**
   * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.
   * @param value The value to check.
   * @param opt_message Error message in case of failure.
   * @param var_args The items to substitute into the failure message.
   */
  function assertString (value : any , opt_message ? : string ,  ...var_args : any [] ) : string ;
  /**
   * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case
   * when we want to add a check in the unreachable area like switch-case
   * statement:
   *
   * <pre>
   * switch(type) {
   * case FOO: doSomething(); break;
   * case BAR: doSomethingElse(); break;
   * default: goog.asserts.fail('Unrecognized type: ' + type);
   * // We have only 2 types - "default:" section is unreachable code.
   * }
   * </pre>
   * @param opt_message Error message in case of failure.
   * @param var_args The items to substitute into the failure message.
   */
  function fail (opt_message ? : string ,  ...var_args : any [] ) : void ;
  /**
   * Sets a custom error handler that can be used to customize the behavior of
   * assertion failures, for example by turning all assertion failures into log
   * messages.
   */
  function setErrorHandler (errorHandler : (a : ಠ_ಠ.clutz.goog.asserts.AssertionError ) => any ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.asserts'): typeof ಠ_ಠ.clutz.goog.asserts;
}
declare module 'goog:goog.asserts' {
  import alias = ಠ_ಠ.clutz.goog.asserts;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.asserts {
  /**
   * Error object for failed assertions.
   */
  class AssertionError extends AssertionError_Instance {
  }
  class AssertionError_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
    /**
     * Error object for failed assertions.
     * @param messagePattern The pattern that was used to form message.
     * @param messageArgs The items to substitute into the pattern.
     */
    constructor (messagePattern : string , messageArgs : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) ;
    /**
     * The message pattern used to format the error message. Error handlers can
     * use this to uniquely identify the assertion.
     */
    messagePattern : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.asserts.AssertionError'): typeof ಠ_ಠ.clutz.goog.asserts.AssertionError;
}
declare module 'goog:goog.asserts.AssertionError' {
  import alias = ಠ_ಠ.clutz.goog.asserts.AssertionError;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
  /**
   * A delayed callback that pegs to the next animation frame
   * instead of a user configurable timeout. By design, this should have
   * the same interface as goog.async.Delay.
   *
   * Uses requestAnimationFrame and friends when available, but falls
   * back to a timeout of goog.async.AnimationDelay.TIMEOUT.
   *
   * For more on requestAnimationFrame and how you can use it to create smoother
   * animations, see:
   */
  class AnimationDelay extends AnimationDelay_Instance {
    /**
     * Default wait timeout for animations (in milliseconds).  Only used for timed
     * animation, which uses a timer (setTimeout) to schedule animation.
     */
    static TIMEOUT : number ;
  }
  class AnimationDelay_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * A delayed callback that pegs to the next animation frame
     * instead of a user configurable timeout. By design, this should have
     * the same interface as goog.async.Delay.
     *
     * Uses requestAnimationFrame and friends when available, but falls
     * back to a timeout of goog.async.AnimationDelay.TIMEOUT.
     *
     * For more on requestAnimationFrame and how you can use it to create smoother
     * animations, see:
     * @param listener Function to call when the delay completes. Will be passed the timestamp when it's called, in unix ms.
     * @param opt_window The window object to execute the delay in. Defaults to the global object.
     * @param opt_handler The object scope to invoke the function in.
     */
    constructor (listener : (a : number ) => any , opt_window ? : Window | null , opt_handler ? : Object | null ) ;
    disposeInternal ( ) : void ;
    /**
     * Fires delay's action even if timer has already gone off or has not been
     * started yet; guarantees action firing. Stops the delay timer.
     */
    fire ( ) : void ;
    /**
     * Fires delay's action only if timer is currently active. Stops the delay
     * timer.
     */
    fireIfActive ( ) : void ;
    isActive ( ) : boolean ;
    /**
     * Starts the delay timer. The provided listener function will be called
     * before the next animation frame.
     */
    start ( ) : void ;
    /**
     * Stops the delay timer if it is active. No action is taken if the timer is not
     * in use.
     */
    stop ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.async.AnimationDelay'): typeof ಠ_ಠ.clutz.goog.async.AnimationDelay;
}
declare module 'goog:goog.async.AnimationDelay' {
  import alias = ಠ_ಠ.clutz.goog.async.AnimationDelay;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
  /**
   * A ConditionalDelay object invokes the associated function after a specified
   * interval delay and checks its return value. If the function returns
   * {@code true} the conditional delay is cancelled and {@see #onSuccess}
   * is called. Otherwise this object keeps to invoke the deferred function until
   * either it returns {@code true} or the timeout is exceeded. In the latter case
   * the {@see #onFailure} method will be called.
   *
   * The interval duration and timeout can be specified each time the delay is
   * started. Calling start on an active delay will reset the timer.
   */
  class ConditionalDelay extends ConditionalDelay_Instance {
  }
  class ConditionalDelay_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * A ConditionalDelay object invokes the associated function after a specified
     * interval delay and checks its return value. If the function returns
     * {@code true} the conditional delay is cancelled and {@see #onSuccess}
     * is called. Otherwise this object keeps to invoke the deferred function until
     * either it returns {@code true} or the timeout is exceeded. In the latter case
     * the {@see #onFailure} method will be called.
     *
     * The interval duration and timeout can be specified each time the delay is
     * started. Calling start on an active delay will reset the timer.
     * @param listener Function to call when the delay completes. Should return a value that type-converts to {@code true} if the call succeeded and this delay should be stopped.
     * @param opt_handler The object scope to invoke the function in.
     */
    constructor (listener : ( ) => boolean , opt_handler ? : Object | null ) ;
    disposeInternal ( ) : void ;
    isActive ( ) : boolean ;
    isDone ( ) : boolean ;
    /**
     * Called when this delayed call is cancelled because the timeout has been
     * exceeded, and the listener has never returned {@code true}.
     * Designed for inheritance, should be overridden by subclasses or on the
     * instances if they care.
     */
    onFailure ( ) : void ;
    /**
     * Called when the listener has been successfully executed and returned
     * {@code true}. The {@see #isDone} method should return {@code true} by now.
     * Designed for inheritance, should be overridden by subclasses or on the
     * instances if they care.
     */
    onSuccess ( ) : void ;
    /**
     * Starts the delay timer. The provided listener function will be called
     * repeatedly after the specified interval until the function returns
     * {@code true} or the timeout is exceeded. Calling start on an active timer
     * will stop the timer first.
     * @param opt_interval The time interval between the function invocations (in milliseconds). Default is 0.
     * @param opt_timeout The timeout interval (in milliseconds). Takes precedence over the {@code opt_interval}, i.e. if the timeout is less than the invocation interval, the function will be called when the timeout is exceeded. A negative value means no timeout. Default is 0.
     */
    start (opt_interval ? : number , opt_timeout ? : number ) : void ;
    /**
     * Stops the delay timer if it is active. No action is taken if the timer is not
     * in use.
     */
    stop ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.async.ConditionalDelay'): typeof ಠ_ಠ.clutz.goog.async.ConditionalDelay;
}
declare module 'goog:goog.async.ConditionalDelay' {
  import alias = ಠ_ಠ.clutz.goog.async.ConditionalDelay;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
  /**
   * Debouncer will perform a specified action exactly once for any sequence of
   * signals fired repeatedly so long as they are fired less than a specified
   * interval apart (in milliseconds). Whether it receives one signal or multiple,
   * it will always wait until a full interval has elapsed since the last signal
   * before performing the action.
   */
  class Debouncer < T > extends Debouncer_Instance < T > {
  }
  class Debouncer_Instance < T > extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Debouncer will perform a specified action exactly once for any sequence of
     * signals fired repeatedly so long as they are fired less than a specified
     * interval apart (in milliseconds). Whether it receives one signal or multiple,
     * it will always wait until a full interval has elapsed since the last signal
     * before performing the action.
     * @param listener Function to callback when the action is triggered.
     * @param interval Interval over which to debounce. The listener will only be called after the full interval has elapsed since the last signal.
     * @param opt_handler Object in whose scope to call the listener.
     */
    constructor (listener : ( ...a : any [] ) => any , interval : number , opt_handler ? : T ) ;
    disposeInternal ( ) : void ;
    /**
     * Notifies the debouncer that the action has happened. It will debounce the
     * call so that the callback is only called after the last action in a sequence
     * of actions separated by periods less the interval parameter passed to the
     * constructor, passing the arguments from the last call of this function into
     * the debounced function.
     * @param var_args Arguments to pass on to the debounced function.
     */
    fire ( ...var_args : any [] ) : void ;
    /**
     * Pauses the debouncer. All pending and future action callbacks will be delayed
     * until the debouncer is resumed. Pauses can be nested.
     */
    pause ( ) : void ;
    /**
     * Resumes the debouncer. If doing so drops the pausing count to zero, pending
     * action callbacks will be executed as soon as possible, but still no sooner
     * than an interval's delay after the previous call. Future action callbacks
     * will be executed as normal.
     */
    resume ( ) : void ;
    /**
     * Cancels any pending action callback. The debouncer can be restarted by
     * calling {@link #fire}.
     */
    stop ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.async.Debouncer'): typeof ಠ_ಠ.clutz.goog.async.Debouncer;
}
declare module 'goog:goog.async.Debouncer' {
  import alias = ಠ_ಠ.clutz.goog.async.Debouncer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
  /**
   * A Delay object invokes the associated function after a specified delay. The
   * interval duration can be specified once in the constructor, or can be defined
   * each time the delay is started. Calling start on an active delay will reset
   * the timer.
   */
  class Delay < THIS > extends Delay_Instance < THIS > {
  }
  class Delay_Instance < THIS > extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * A Delay object invokes the associated function after a specified delay. The
     * interval duration can be specified once in the constructor, or can be defined
     * each time the delay is started. Calling start on an active delay will reset
     * the timer.
     * @param listener Function to call when the delay completes.
     * @param opt_interval The default length of the invocation delay (in milliseconds).
     * @param opt_handler The object scope to invoke the function in.
     */
    constructor (listener : ( ) => any , opt_interval ? : number , opt_handler ? : THIS ) ;
    /**
     * Disposes of the object, cancelling the timeout if it is still outstanding and
     * removing all object references.
     */
    disposeInternal ( ) : void ;
    /**
     * Fires delay's action even if timer has already gone off or has not been
     * started yet; guarantees action firing. Stops the delay timer.
     */
    fire ( ) : void ;
    /**
     * Fires delay's action only if timer is currently active. Stops the delay
     * timer.
     */
    fireIfActive ( ) : void ;
    isActive ( ) : boolean ;
    /**
     * Starts the delay timer. The provided listener function will be called after
     * the specified interval. Calling start on an active timer will reset the
     * delay interval.
     * @param opt_interval If specified, overrides the object's default interval with this one (in milliseconds).
     */
    start (opt_interval ? : number ) : void ;
    /**
     * Starts the delay timer if it's not already active.
     * @param opt_interval If specified and the timer is not already active, overrides the object's default interval with this one (in milliseconds).
     */
    startIfNotActive (opt_interval ? : number ) : void ;
    /**
     * Stops the delay timer if it is active. No action is taken if the timer is not
     * in use.
     */
    stop ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.async.Delay'): typeof ಠ_ಠ.clutz.goog.async.Delay;
}
declare module 'goog:goog.async.Delay' {
  import alias = ಠ_ಠ.clutz.goog.async.Delay;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
  class FreeList < ITEM > extends FreeList_Instance < ITEM > {
  }
  class FreeList_Instance < ITEM > {
    private noStructuralTyping_: any;
    constructor (create : ( ) => ITEM , reset : (a : ITEM ) => undefined , limit : number ) ;
    get ( ) : ITEM ;
    /**
     * Visible for testing.
     */
    occupants ( ) : number ;
    put (item : ITEM ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.async.FreeList'): typeof ಠ_ಠ.clutz.goog.async.FreeList;
}
declare module 'goog:goog.async.FreeList' {
  import alias = ಠ_ಠ.clutz.goog.async.FreeList;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
  /**
   * Throttle will perform an action that is passed in no more than once
   * per interval (specified in milliseconds). If it gets multiple signals
   * to perform the action while it is waiting, it will only perform the action
   * once at the end of the interval.
   */
  class Throttle < T > extends Throttle_Instance < T > {
  }
  class Throttle_Instance < T > extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Throttle will perform an action that is passed in no more than once
     * per interval (specified in milliseconds). If it gets multiple signals
     * to perform the action while it is waiting, it will only perform the action
     * once at the end of the interval.
     * @param listener Function to callback when the action is triggered.
     * @param interval Interval over which to throttle. The listener can only be called once per interval.
     * @param opt_handler Object in whose scope to call the listener.
     */
    constructor (listener : ( ...a : any [] ) => any , interval : number , opt_handler ? : T ) ;
    disposeInternal ( ) : void ;
    /**
     * Notifies the throttle that the action has happened. It will throttle the call
     * so that the callback is not called too often according to the interval
     * parameter passed to the constructor, passing the arguments from the last call
     * of this function into the throttled function.
     * @param var_args Arguments to pass on to the throttled function.
     */
    fire ( ...var_args : any [] ) : void ;
    /**
     * Pauses the throttle.  All pending and future action callbacks will be
     * delayed until the throttle is resumed.  Pauses can be nested.
     */
    pause ( ) : void ;
    /**
     * Resumes the throttle.  If doing so drops the pausing count to zero, pending
     * action callbacks will be executed as soon as possible, but still no sooner
     * than an interval's delay after the previous call.  Future action callbacks
     * will be executed as normal.
     */
    resume ( ) : void ;
    /**
     * Cancels any pending action callback. The throttle can be restarted by
     * calling {@link #fire}.
     */
    stop ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.async.Throttle'): typeof ಠ_ಠ.clutz.goog.async.Throttle;
}
declare module 'goog:goog.async.Throttle' {
  import alias = ಠ_ಠ.clutz.goog.async.Throttle;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
  class WorkItem extends WorkItem_Instance {
  }
  class WorkItem_Instance {
    private noStructuralTyping_: any;
    fn : ( ( ) => any ) | null ;
    next : ಠ_ಠ.clutz.goog.async.WorkItem | null ;
    scope : Object | null | undefined ;
    /**
     * Reset the work item so they don't prevent GC before reuse
     */
    reset ( ) : void ;
    set (fn : ( ) => any , scope : Object | null | undefined ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.async.WorkItem'): typeof ಠ_ಠ.clutz.goog.async.WorkItem;
}
declare module 'goog:goog.async.WorkItem' {
  import alias = ಠ_ಠ.clutz.goog.async.WorkItem;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
  /**
   * A low GC workqueue. The key elements of this design:
   * - avoids the need for goog.bind or equivalent by carrying scope
   * - avoids the need for array reallocation by using a linked list
   * - minimizes work entry objects allocation by recycling objects
   */
  class WorkQueue extends WorkQueue_Instance {
    static DEFAULT_MAX_UNUSED : number ;
  }
  class WorkQueue_Instance {
    private noStructuralTyping_: any;
    workHead_ : null | ಠ_ಠ.clutz.goog.async.WorkItem ;
    workTail_ : null | ಠ_ಠ.clutz.goog.async.WorkItem ;
    add (fn : ( ) => any , scope : Object | null | undefined ) : void ;
    remove ( ) : ಠ_ಠ.clutz.goog.async.WorkItem | null ;
    returnUnused (item : ಠ_ಠ.clutz.goog.async.WorkItem | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.async.WorkQueue'): typeof ಠ_ಠ.clutz.goog.async.WorkQueue;
}
declare module 'goog:goog.async.WorkQueue' {
  import alias = ಠ_ಠ.clutz.goog.async.WorkQueue;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
  /**
   * Fires the provided callbacks as soon as possible after the current JS
   * execution context. setTimeout(…, 0) takes at least 4ms when called from
   * within another setTimeout(…, 0) for legacy reasons.
   *
   * This will not schedule the callback as a microtask (i.e. a task that can
   * preempt user input or networking callbacks). It is meant to emulate what
   * setTimeout(_, 0) would do if it were not throttled. If you desire microtask
   * behavior, use {@see goog.Promise} instead.
   * @param callback Callback function to fire as soon as possible.
   * @param opt_context Object in whose scope to call the listener.
   * @param opt_useSetImmediate Avoid the IE workaround that ensures correctness at the cost of speed. See comments for details.
   */
  function nextTick < SCOPE > (callback : ( ) => any , opt_context ? : SCOPE , opt_useSetImmediate ? : boolean ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.async.nextTick'): typeof ಠ_ಠ.clutz.goog.async.nextTick;
}
declare module 'goog:goog.async.nextTick' {
  import alias = ಠ_ಠ.clutz.goog.async.nextTick;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
  /**
   * Fires the provided callback just before the current callstack unwinds, or as
   * soon as possible after the current JS execution context.
   * @param opt_context Object to use as the "this value" when calling the provided function.
   */
  function run < THIS > (callback : ( ) => any , opt_context ? : THIS ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.async.run'): typeof ಠ_ಠ.clutz.goog.async.run;
}
declare module 'goog:goog.async.run' {
  import alias = ಠ_ಠ.clutz.goog.async.run;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
  /**
   * Throw an item without interrupting the current execution context.  For
   * example, if processing a group of items in a loop, sometimes it is useful
   * to report an error while still allowing the rest of the batch to be
   * processed.
   */
  function throwException (exception : any ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.async.throwException'): typeof ಠ_ಠ.clutz.goog.async.throwException;
}
declare module 'goog:goog.async.throwException' {
  import alias = ಠ_ಠ.clutz.goog.async.throwException;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.color {
  /**
   * Blend two colors together, using the specified factor to indicate the weight
   * given to the first color
   * @param rgb1 First color represented in rgb.
   * @param rgb2 Second color represented in rgb.
   * @param factor The weight to be given to rgb1 over rgb2. Values should be in the range [0, 1]. If less than 0, factor will be set to 0. If greater than 1, factor will be set to 1.
   */
  function blend (rgb1 : number [] | null , rgb2 : number [] | null , factor : number ) : number [] ;
  /**
   * Adds black to the specified color, darkening it
   * @param rgb rgb representation of the color.
   * @param factor Number in the range [0, 1]. 0 will do nothing, while 1 will return black. If less than 0, factor will be set to 0. If greater than 1, factor will be set to 1.
   */
  function darken (rgb : number [] | null , factor : number ) : number [] ;
  /**
   * Converts a hex representation of a color to HSL.
   * @param hex Color to convert.
   */
  function hexToHsl (hex : string ) : number [] ;
  /**
   * Converts a hex representation of a color to HSV
   * @param hex Color to convert.
   */
  function hexToHsv (hex : string ) : number [] ;
  /**
   * Converts a hex representation of a color to RGB.
   * @param hexColor Color to convert.
   */
  function hexToRgb (hexColor : string ) : number [] ;
  /**
   * Converts a hex representation of a color to RGB.
   * @param hexColor Color to convert.
   */
  function hexToRgbStyle (hexColor : string ) : string ;
  /**
   * Find the "best" (highest-contrast) of the suggested colors for the prime
   * color. Uses W3C formula for judging readability and visual accessibility:
   * http://www.w3.org/TR/AERT#color-contrast
   * @param prime Color represented as a rgb array.
   * @param suggestions Array of colors, each representing a rgb array.
   */
  function highContrast (prime : number [] | null , suggestions : ( number [] | null ) [] | null ) : number [] ;
  /**
   * Converts from an hsl array to a hex string
   * @param hsl hsl representation of the color.
   */
  function hslArrayToHex (hsl : number [] | null ) : string ;
  /**
   * Converts a color from HSL color space to RGB color space.
   * @param hsl hsl representation of the color.
   */
  function hslArrayToRgb (hsl : number [] | null ) : number [] ;
  /**
   * Calculates the Euclidean distance between two color vectors on an HSL sphere.
   * A demo of the sphere can be found at:
   * http://en.wikipedia.org/wiki/HSL_color_space
   * In short, a vector for color (H, S, L) in this system can be expressed as
   * (S*L'*cos(2*PI*H), S*L'*sin(2*PI*H), L), where L' = abs(L - 0.5), and we
   * simply calculate the 1-2 distance using these coordinates
   * @param hsl1 First color in hsl representation.
   * @param hsl2 Second color in hsl representation.
   */
  function hslDistance (hsl1 : number [] | null , hsl2 : number [] | null ) : number ;
  /**
   * Converts from h,s,l values to a hex string
   * @param h Hue, in [0, 360].
   * @param s Saturation, in [0, 1].
   * @param l Luminosity, in [0, 1].
   */
  function hslToHex (h : number , s : number , l : number ) : string ;
  /**
   * Converts a color from HSL color space to RGB color space.
   * Modified from {@link http://www.easyrgb.com/math.html}
   * @param h Hue, in [0, 360].
   * @param s Saturation, in [0, 1].
   * @param l Luminosity, in [0, 1].
   */
  function hslToRgb (h : number , s : number , l : number ) : number [] ;
  /**
   * Converts from an HSV array to a hex string
   * @param hsv hsv representation of the color.
   */
  function hsvArrayToHex (hsv : number [] | null ) : string ;
  /**
   * Converts an HSV triplet to an RGB array.
   * @param hsv hsv representation of the color.
   */
  function hsvArrayToRgb (hsv : number [] | null ) : number [] ;
  /**
   * Converts from h,s,v values to a hex string
   * @param h Hue, in [0, 360].
   * @param s Saturation, in [0, 1].
   * @param v Value, in [0, 255].
   */
  function hsvToHex (h : number , s : number , v : number ) : string ;
  /**
   * Converts an HSV triplet to an RGB array.  V is brightness because b is
   * reserved for blue in RGB.
   * @param h Hue value in [0, 360].
   * @param s Saturation value in [0, 1].
   * @param brightness brightness in [0, 255].
   */
  function hsvToRgb (h : number , s : number , brightness : number ) : number [] ;
  /**
   * Determines if the given string can be parsed as a color.
   * {@see goog.color.parse}.
   * @param str Potential color string.
   */
  function isValidColor (str : string ) : boolean ;
  /**
   * Adds white to the specified color, lightening it
   * @param rgb rgb representation of the color.
   * @param factor Number in the range [0, 1].  0 will do nothing, while 1 will return white. If less than 0, factor will be set to 0. If greater than 1, factor will be set to 1.
   */
  function lighten (rgb : number [] | null , factor : number ) : number [] ;
  /**
   * Normalize an hex representation of a color
   * @param hexColor an hex color string.
   */
  function normalizeHex (hexColor : string ) : string ;
  /**
   * Parses a color out of a string.
   * @param str Color in some format.
   */
  function parse (str : string ) : { hex : string , type : string } ;
  /**
   * Parses red, green, blue components out of a valid rgb color string.
   * Throws Error if the color string is invalid.
   * @param str RGB representation of a color. {@see goog.color.isValidRgbColor_}.
   */
  function parseRgb (str : string ) : number [] ;
  /**
   * Takes a string a prepends a '#' sign if one doesn't exist.
   * Small helper method for use by goog.color and friends.
   * @param str String to check.
   */
  function prependHashIfNecessaryHelper (str : string ) : string ;
  /**
   * Takes a hex value and prepends a zero if it's a single digit.
   * Small helper method for use by goog.color and friends.
   * @param hex Hex value to prepend if single digit.
   */
  function prependZeroIfNecessaryHelper (hex : string ) : string ;
  /**
   * Converts a color from RGB to hex representation.
   * @param rgb rgb representation of the color.
   */
  function rgbArrayToHex (rgb : number [] | null ) : string ;
  /**
   * Converts a color from RGB color space to HSL color space.
   * @param rgb rgb representation of the color.
   */
  function rgbArrayToHsl (rgb : number [] | null ) : number [] ;
  /**
   * Converts from an array of RGB values to an array of HSV values.
   * @param rgb rgb representation of the color.
   */
  function rgbArrayToHsv (rgb : number [] | null ) : number [] ;
  /**
   * Converts a color from RGB to hex representation.
   * @param r Amount of red, int between 0 and 255.
   * @param g Amount of green, int between 0 and 255.
   * @param b Amount of blue, int between 0 and 255.
   */
  function rgbToHex (r : number , g : number , b : number ) : string ;
  /**
   * Converts a color from RGB color space to HSL color space.
   * Modified from {@link http://en.wikipedia.org/wiki/HLS_color_space}.
   * @param r Value of red, in [0, 255].
   * @param g Value of green, in [0, 255].
   * @param b Value of blue, in [0, 255].
   */
  function rgbToHsl (r : number , g : number , b : number ) : number [] ;
  /**
   * Converts from RGB values to an array of HSV values.
   * @param red Red value in [0, 255].
   * @param green Green value in [0, 255].
   * @param blue Blue value in [0, 255].
   */
  function rgbToHsv (red : number , green : number , blue : number ) : number [] ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.color'): typeof ಠ_ಠ.clutz.goog.color;
}
declare module 'goog:goog.color' {
  import alias = ಠ_ಠ.clutz.goog.color;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.color {
  /**
   * HSL color representation. An array containing three elements [h, s, l]:
   * h (hue) must be an integer in [0, 360], cyclic.
   * s (saturation) must be a number in [0, 1].
   * l (lightness) must be a number in [0, 1].
   */
  type Hsl = number [] | null ;
}
declare module 'goog:goog.color.Hsl' {
  import alias = ಠ_ಠ.clutz.goog.color.Hsl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.color {
  /**
   * HSV color representation. An array containing three elements [h, s, v]:
   * h (hue) must be an integer in [0, 360], cyclic.
   * s (saturation) must be a number in [0, 1].
   * v (value/brightness) must be an integer in [0, 255].
   */
  type Hsv = number [] | null ;
}
declare module 'goog:goog.color.Hsv' {
  import alias = ಠ_ಠ.clutz.goog.color.Hsv;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.color {
  /**
   * RGB color representation. An array containing three elements [r, g, b],
   * each an integer in [0, 255], representing the red, green, and blue components
   * of the color respectively.
   */
  type Rgb = number [] | null ;
}
declare module 'goog:goog.color.Rgb' {
  import alias = ಠ_ಠ.clutz.goog.color.Rgb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.color.alpha {
  /**
   * Gets the alpha color part of an alpha hex color. For example, both '#123A'
   * and '#123456aa' return 'aa'. The result is always two characters long.
   * @param colorWithAlpha The alpha hex color to get the hex color from.
   */
  function extractAlpha (colorWithAlpha : string ) : string ;
  /**
   * Gets the hex color part of an alpha hex color. For example, both '#abcd' and
   * '#AABBCC12' return '#aabbcc'.
   * @param colorWithAlpha The alpha hex color to get the hex color from.
   */
  function extractHexColor (colorWithAlpha : string ) : string ;
  /**
   * Converts an 8-hex representation of a color to RGBA.
   * @param hexColor Color to convert.
   */
  function hexToRgba (hexColor : string ) : number [] ;
  /**
   * Converts a hex representation of a color to RGBA.
   * @param hexColor Color to convert.
   */
  function hexToRgbaStyle (hexColor : string ) : string ;
  /**
   * Converts a color from HSLA to hex representation.
   * @param hsla Array of [h, s, l, a], where h is an integer in [0, 360], s and l are integers in [0, 100], and a is in [0, 1].
   */
  function hslaArrayToHex (hsla : number [] | null ) : string ;
  /**
   * Converts a color from HSLA to an RGBA style string.
   * @param hsla Array of [h, s, l, a], where h is and integer in [0, 360], s and l are integers in [0, 100], and a is in [0, 1].
   */
  function hslaArrayToRgbaStyle (hsla : number [] | null ) : string ;
  /**
   * Converts a color from HSLA to hex representation.
   * @param h Amount of hue, int between 0 and 360.
   * @param s Amount of saturation, int between 0 and 100.
   * @param l Amount of lightness, int between 0 and 100.
   * @param a Amount of alpha, float between 0 and 1.
   */
  function hslaToHex (h : number , s : number , l : number , a : number ) : string ;
  /**
   * Converts a color from HSLA color space to RGBA color space.
   * @param h Amount of hue, int between 0 and 360.
   * @param s Amount of saturation, int between 0 and 100.
   * @param l Amount of lightness, int between 0 and 100.
   * @param a Amount of alpha, float between 0 and 1.
   */
  function hslaToRgba (h : number , s : number , l : number , a : number ) : number [] ;
  /**
   * Converts a color from HSLA to an RGBA style string.
   * @param h Amount of hue, int between 0 and 360.
   * @param s Amount of saturation, int between 0 and 100.
   * @param l Amount of lightness, int between 0 and 100.
   * @param a Amount of alpha, float between 0 and 1.
   */
  function hslaToRgbaStyle (h : number , s : number , l : number , a : number ) : string ;
  /**
   * Converts from an HSVA array to a hex string
   * @param hsva Array of [h, s, v, a] in [[0, 1], [0, 1], [0, 255], [0, 1]].
   */
  function hsvaArrayToHex (hsva : number [] | null ) : string ;
  /**
   * Converts from h,s,v,a values to a hex string
   * @param h Hue, in [0, 1].
   * @param s Saturation, in [0, 1].
   * @param v Value, in [0, 255].
   * @param a Alpha, in [0, 1].
   */
  function hsvaToHex (h : number , s : number , v : number , a : number ) : string ;
  /**
   * Parses an alpha color out of a string.
   * @param str Color in some format.
   */
  function parse (str : string ) : { hex : string , type : string } ;
  /**
   * Converts a color from RGBA to hex representation.
   * @param rgba Array of [r, g, b, a], with r, g, b in [0, 255] and a in [0, 1].
   */
  function rgbaArrayToHex (rgba : number [] | null ) : string ;
  /**
   * Converts a color from RGBA color space to HSLA color space.
   * @param rgba [r, g, b, a] values for the color, each in [0, 255].
   */
  function rgbaArrayToHsla (rgba : number [] | null ) : number [] ;
  /**
   * Converts a color from RGBA to an RGBA style string.
   * @param rgba Array of [r, g, b, a], with r, g, b in [0, 255] and a in [0, 1].
   */
  function rgbaArrayToRgbaStyle (rgba : number [] | null | Float32Array ) : string ;
  /**
   * Converts a color from RGBA to hex representation.
   * @param r Amount of red, int between 0 and 255.
   * @param g Amount of green, int between 0 and 255.
   * @param b Amount of blue, int between 0 and 255.
   * @param a Amount of alpha, float between 0 and 1.
   */
  function rgbaToHex (r : number , g : number , b : number , a : number ) : string ;
  /**
   * Converts a color from RGBA color space to HSLA color space.
   * Modified from {@link http://en.wikipedia.org/wiki/HLS_color_space}.
   * @param r Value of red, in [0, 255].
   * @param g Value of green, in [0, 255].
   * @param b Value of blue, in [0, 255].
   * @param a Value of alpha, in [0, 255].
   */
  function rgbaToHsla (r : number , g : number , b : number , a : number ) : number [] ;
  /**
   * Converts a color from RGBA to an RGBA style string.
   * @param r Value of red, in [0, 255].
   * @param g Value of green, in [0, 255].
   * @param b Value of blue, in [0, 255].
   * @param a Value of alpha, in [0, 1].
   */
  function rgbaToRgbaStyle (r : number , g : number , b : number , a : number ) : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.color.alpha'): typeof ಠ_ಠ.clutz.goog.color.alpha;
}
declare module 'goog:goog.color.alpha' {
  import alias = ಠ_ಠ.clutz.goog.color.alpha;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.color {
  /**
   * A map that contains a lot of colors that are recognised by various browsers.
   * This list is way larger than the minimal one dictated by W3C.
   * The keys of this map are the lowercase "readable" names of the colors, while
   * the values are the "hex" values.
   */
  var names : { [ key: string ]: string } ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.color.names'): typeof ಠ_ಠ.clutz.goog.color.names;
}
declare module 'goog:goog.color.names' {
  import alias = ಠ_ಠ.clutz.goog.color.names;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * Turns an array of numbers into the hex string given by the concatenation of
   * the hex values to which the numbers correspond.
   * @param array Array of numbers representing characters.
   */
  function byteArrayToHex (array : Uint8Array | null | number [] ) : string ;
  /**
   * Turns an array of numbers into the string given by the concatenation of the
   * characters to which the numbers correspond.
   * @param bytes Array of numbers representing characters.
   */
  function byteArrayToString (bytes : Uint8Array | number [] ) : string ;
  /**
   * Converts a hex string into an integer array.
   * @param hexString Hex string of 16-bit integers (two characters per integer).
   */
  function hexToByteArray (hexString : string ) : number [] ;
  /**
   * Turns a string into an array of bytes; a "byte" being a JS number in the
   * range 0-255.
   * @param str String value to arrify.
   */
  function stringToByteArray (str : string ) : number [] ;
  /**
   * Converts a JS string to a UTF-8 "byte" array.
   * @param str 16-bit unicode string.
   */
  function stringToUtf8ByteArray (str : string ) : number [] ;
  /**
   * Converts a UTF-8 byte array to JavaScript's 16-bit Unicode.
   * @param bytes UTF-8 byte array.
   */
  function utf8ByteArrayToString (bytes : Uint8Array | null | number [] ) : string ;
  /**
   * XOR two byte arrays.
   * @param bytes1 Byte array 1.
   * @param bytes2 Byte array 2.
   */
  function xorByteArray (bytes1 : Uint8Array | Int8Array | number [] , bytes2 : Uint8Array | Int8Array | number [] ) : number [] ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt'): typeof ಠ_ಠ.clutz.goog.crypt;
}
declare module 'goog:goog.crypt' {
  import alias = ಠ_ಠ.clutz.goog.crypt;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * Implementation of AES in JavaScript.
   * See http://en.wikipedia.org/wiki/Advanced_Encryption_Standard
   *
   * WARNING: This is ECB mode only. If you are encrypting something
   * longer than 16 bytes, or encrypting more than one value with the same key
   * (so basically, always) you need to use this with a block cipher mode of
   * operation.  See goog.crypt.Cbc.
   *
   * See http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation for more
   * information.
   */
  class Aes extends Aes_Instance {
    static ENABLE_TEST_MODE : boolean ;
  }
  class Aes_Instance implements ಠ_ಠ.clutz.goog.crypt.BlockCipher {
    private noStructuralTyping_: any;
    /**
     * Implementation of AES in JavaScript.
     * See http://en.wikipedia.org/wiki/Advanced_Encryption_Standard
     *
     * WARNING: This is ECB mode only. If you are encrypting something
     * longer than 16 bytes, or encrypting more than one value with the same key
     * (so basically, always) you need to use this with a block cipher mode of
     * operation.  See goog.crypt.Cbc.
     *
     * See http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation for more
     * information.
     * @param key The key as an array of integers in {0, 255}. The key must have lengths of 16, 24, or 32 integers for 128-, 192-, or 256-bit encryption, respectively.
     */
    constructor (key : number [] ) ;
    /**
     * Block size, in bytes.  Fixed at 16 per AES spec.
     */
    BLOCK_SIZE : number ;
    decrypt (input : number [] | Uint8Array ) : number [] ;
    encrypt (input : number [] | Uint8Array ) : number [] ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Aes'): typeof ಠ_ಠ.clutz.goog.crypt.Aes;
}
declare module 'goog:goog.crypt.Aes' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Aes;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * ARC4 streamcipher implementation.
   */
  class Arc4 extends Arc4_Instance {
  }
  class Arc4_Instance {
    private noStructuralTyping_: any;
    /**
     * En- or decrypt (same operation for streamciphers like ARC4)
     * @param data The data to be xor-ed in place.
     * @param opt_length The number of bytes to crypt.
     */
    crypt (data : number [] | null | Uint8Array , opt_length ? : number ) : void ;
    /**
     * Discards n bytes of the keystream.
     * These days 1536 is considered a decent amount to drop to get the key state
     * warmed-up enough for secure usage. This is not done in the constructor to
     * preserve efficiency for use cases that do not need this.
     * NOTE: Discard is identical to crypt without actually xoring any data. It's
     * unfortunate to have this code duplicated, but this was done for performance
     * reasons. Alternatives which were attempted:
     * 1. Create a temp array of the correct length and pass it to crypt. This
     * works but needlessly allocates an array. But more importantly this
     * requires choosing an array type (Array or Uint8Array) in discard, and
     * choosing a different type than will be passed to crypt by the client
     * code hurts the javascript engines ability to optimize crypt (7x hit in
     * v8).
     * 2. Make data option in crypt so discard can pass null, this has a huge
     * perf hit for crypt.
     * @param length Number of bytes to disregard from the stream.
     */
    discard (length : number ) : void ;
    /**
     * Initialize the cipher for use with new key.
     * @param key A byte array containing the key.
     * @param opt_length Indicates # of bytes to take from the key.
     */
    setKey (key : number [] | null , opt_length ? : number ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Arc4'): typeof ಠ_ಠ.clutz.goog.crypt.Arc4;
}
declare module 'goog:goog.crypt.Arc4' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Arc4;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * Construct the hash computer.
   */
  class BlobHasher extends BlobHasher_Instance {
  }
  class BlobHasher_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Construct the hash computer.
     * @param hashFn The hash function to use.
     * @param opt_blockSize Processing block size.
     */
    constructor (hashFn : ಠ_ಠ.clutz.goog.crypt.Hash , opt_blockSize ? : number ) ;
    /**
     * Abort hash computation.
     */
    abort ( ) : void ;
    getBytesProcessed ( ) : number ;
    getHash ( ) : number [] | null ;
    /**
     * Start the hash computation.
     * @param blob The blob of data to compute the hash for.
     */
    hash (blob : Blob ) : void ;
    /**
     * Sets the maximum number of bytes to hash or Infinity for no limit. Can be
     * called before hash() to throttle the hash computation. The hash computation
     * can then be continued by repeatedly calling setHashingLimit() with greater
     * byte offsets. This is useful if you don't need the hash until some time in
     * the future, for example when uploading a file and you don't need the hash
     * until the transfer is complete.
     * @param byteOffset The byte offset to compute the hash up to. Should be a non-negative integer or Infinity for no limit. Negative values are not allowed.
     */
    setHashingLimit (byteOffset : number ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.BlobHasher'): typeof ಠ_ಠ.clutz.goog.crypt.BlobHasher;
}
declare module 'goog:goog.crypt.BlobHasher' {
  import alias = ಠ_ಠ.clutz.goog.crypt.BlobHasher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt.BlobHasher {
  /**
   * Event names for hash computation events
   */
  type EventType = string ;
  var EventType : {
    ABORT : EventType ,
    COMPLETE : EventType ,
    ERROR : EventType ,
    PROGRESS : EventType ,
    STARTED : EventType ,
    THROTTLED : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.BlobHasher.EventType'): typeof ಠ_ಠ.clutz.goog.crypt.BlobHasher.EventType;
}
declare module 'goog:goog.crypt.BlobHasher.EventType' {
  import alias = ಠ_ಠ.clutz.goog.crypt.BlobHasher.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * Interface definition for a block cipher.
   */
  interface BlockCipher {
    /**
     * Block size, in bytes.
     */
    BLOCK_SIZE : number ;
    /**
     * Decrypt a plaintext block.  The implementation may expect (and assert)
     * a particular block length.
     * @param input Ciphertext. Array of input bytes.
     */
    decrypt (a : number [] | Uint8Array ) : number [] ;
    /**
     * Encrypt a plaintext block.  The implementation may expect (and assert)
     * a particular block length.
     * @param input Plaintext array of input bytes.
     */
    encrypt (a : number [] | Uint8Array ) : number [] ;
  }
}
declare module 'goog:goog.crypt.BlockCipher' {
  import alias = ಠ_ಠ.clutz.goog.crypt.BlockCipher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * Implements the CBC mode for block ciphers. See
   * http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation
   * #Cipher-block_chaining_.28CBC.29
   */
  class Cbc extends Cbc_Instance {
  }
  class Cbc_Instance {
    private noStructuralTyping_: any;
    /**
     * Implements the CBC mode for block ciphers. See
     * http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation
     * #Cipher-block_chaining_.28CBC.29
     * @param cipher The block cipher to use.
     */
    constructor (cipher : ಠ_ಠ.clutz.goog.crypt.BlockCipher ) ;
    /**
     * Decrypt a message.
     * @param cipherText Message to decrypt. An array of bytes. The length should be a multiple of the block size.
     * @param initialVector Initial vector for the CBC mode. An array of bytes with the same length as the block size.
     */
    decrypt (cipherText : number [] | Uint8Array , initialVector : number [] | Uint8Array ) : number [] ;
    /**
     * Encrypt a message.
     * @param plainText Message to encrypt. An array of bytes. The length should be a multiple of the block size.
     * @param initialVector Initial vector for the CBC mode. An array of bytes with the same length as the block size.
     */
    encrypt (plainText : number [] | Uint8Array , initialVector : number [] | Uint8Array ) : number [] ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Cbc'): typeof ಠ_ಠ.clutz.goog.crypt.Cbc;
}
declare module 'goog:goog.crypt.Cbc' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Cbc;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * Implementation of Ctr mode for block ciphers.  See
   * http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation
   * #Cipher-block_chaining_.28Ctr.29. for an overview, and
   * http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf
   * for the spec.
   */
  class Ctr extends Ctr_Instance {
  }
  class Ctr_Instance {
    private noStructuralTyping_: any;
    /**
     * Implementation of Ctr mode for block ciphers.  See
     * http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation
     * #Cipher-block_chaining_.28Ctr.29. for an overview, and
     * http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf
     * for the spec.
     * @param cipher The block cipher to use.
     */
    constructor (cipher : ಠ_ಠ.clutz.goog.crypt.BlockCipher ) ;
    /**
     * Decrypts a message. In CTR, this is the same as encrypting.
     * @param cipherText Message to decrypt. The length does not have to be a multiple of the blocksize.
     * @param initialVector Initial vector for the Ctr mode. An array of bytes with the same length as the block size.
     */
    decrypt (a : number [] | Uint8Array , b : number [] | Uint8Array ) : number [] ;
    /**
     * Encrypts a message.
     * @param plainText Message to encrypt. An array of bytes. The length does not have to be a multiple of the blocksize.
     * @param initialVector Initial vector for the Ctr mode. An array of bytes with the same length as the block size, that should be not reused when using the same key.
     */
    encrypt (plainText : number [] | Uint8Array , initialVector : number [] | Uint8Array ) : number [] ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Ctr'): typeof ಠ_ಠ.clutz.goog.crypt.Ctr;
}
declare module 'goog:goog.crypt.Ctr' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Ctr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * Create a cryptographic hash instance.
   */
  class Hash extends Hash_Instance {
  }
  class Hash_Instance {
    private noStructuralTyping_: any;
    /**
     * The block size for the hasher.
     */
    blockSize : number ;
    digest ( ) : number [] ;
    /**
     * Resets the internal accumulator.
     */
    reset ( ...a : any [] ) : any ;
    /**
     * Adds a byte array (array with values in [0-255] range) or a string (might
     * only contain 8-bit, i.e., Latin1 characters) to the internal accumulator.
     *
     * Many hash functions operate on blocks of data and implement optimizations
     * when a full chunk of data is readily available. Hence it is often preferable
     * to provide large chunks of data (a kilobyte or more) than to repeatedly
     * call the update method with few tens of bytes. If this is not possible, or
     * not feasible, it might be good to provide data in multiplies of hash block
     * size (often 64 bytes). Please see the implementation and performance tests
     * of your favourite hash.
     * @param bytes Data used for the update.
     * @param opt_length Number of bytes to use.
     */
    update (a : number [] | null | Uint8Array | string , b ? : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Hash'): typeof ಠ_ಠ.clutz.goog.crypt.Hash;
}
declare module 'goog:goog.crypt.Hash' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Hash;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  class Hmac extends Hmac_Instance {
  }
  class Hmac_Instance extends ಠ_ಠ.clutz.goog.crypt.Hash_Instance {
    constructor (hasher : ಠ_ಠ.clutz.goog.crypt.Hash , key : number [] | null , opt_blockSize ? : number ) ;
    blockSize : number ;
    digest ( ) : number [] ;
    /**
     * Calculates an HMAC for a given message.
     * @param message Data to Hmac.
     */
    getHmac (message : number [] | null | Uint8Array | string ) : number [] ;
    reset ( ) : void ;
    update (bytes : number [] | null | Uint8Array | string , opt_length ? : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Hmac'): typeof ಠ_ಠ.clutz.goog.crypt.Hmac;
}
declare module 'goog:goog.crypt.Hmac' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Hmac;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * MD5 cryptographic hash constructor.
   */
  class Md5 extends Md5_Instance {
  }
  class Md5_Instance extends ಠ_ಠ.clutz.goog.crypt.Hash_Instance {
    blockSize : number ;
    digest ( ) : number [] ;
    reset ( ) : void ;
    update (bytes : number [] | null | Uint8Array | string , opt_length ? : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Md5'): typeof ಠ_ಠ.clutz.goog.crypt.Md5;
}
declare module 'goog:goog.crypt.Md5' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Md5;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * SHA-1 cryptographic hash constructor.
   *
   * The properties declared here are discussed in the above algorithm document.
   */
  class Sha1 extends Sha1_Instance {
  }
  class Sha1_Instance extends ಠ_ಠ.clutz.goog.crypt.Hash_Instance {
    blockSize : number ;
    digest ( ) : number [] ;
    reset ( ) : void ;
    update (bytes : number [] | null | Uint8Array | string , opt_length ? : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Sha1'): typeof ಠ_ಠ.clutz.goog.crypt.Sha1;
}
declare module 'goog:goog.crypt.Sha1' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Sha1;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * SHA-2 cryptographic hash constructor.
   * This constructor should not be used directly to create the object. Rather,
   * one should use the constructor of the sub-classes.
   */
  class Sha2 extends Sha2_Instance {
  }
  class Sha2_Instance extends ಠ_ಠ.clutz.goog.crypt.Hash_Instance {
    /**
     * SHA-2 cryptographic hash constructor.
     * This constructor should not be used directly to create the object. Rather,
     * one should use the constructor of the sub-classes.
     * @param numHashBlocks The size of output in 16-byte blocks.
     * @param initHashBlocks The hash-specific initialization
     */
    constructor (numHashBlocks : number , initHashBlocks : number [] ) ;
    blockSize : number ;
    digest ( ) : number [] ;
    reset ( ) : void ;
    update (message : number [] | null | Uint8Array | string , opt_length ? : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Sha2'): typeof ಠ_ಠ.clutz.goog.crypt.Sha2;
}
declare module 'goog:goog.crypt.Sha2' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Sha2;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * SHA-224 cryptographic hash constructor.
   */
  class Sha224 extends Sha224_Instance {
  }
  class Sha224_Instance extends ಠ_ಠ.clutz.goog.crypt.Sha2_Instance {
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Sha224'): typeof ಠ_ಠ.clutz.goog.crypt.Sha224;
}
declare module 'goog:goog.crypt.Sha224' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Sha224;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * SHA-256 cryptographic hash constructor.
   */
  class Sha256 extends Sha256_Instance {
  }
  class Sha256_Instance extends ಠ_ಠ.clutz.goog.crypt.Sha2_Instance {
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Sha256'): typeof ಠ_ಠ.clutz.goog.crypt.Sha256;
}
declare module 'goog:goog.crypt.Sha256' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Sha256;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * Constructs a SHA-2 64-bit cryptographic hash.
   * This class should not be used. Rather, one should use one of its
   * subclasses.
   */
  class Sha2_64bit extends Sha2_64bit_Instance {
  }
  class Sha2_64bit_Instance extends ಠ_ಠ.clutz.goog.crypt.Hash_Instance {
    /**
     * Constructs a SHA-2 64-bit cryptographic hash.
     * This class should not be used. Rather, one should use one of its
     * subclasses.
     * @param numHashBlocks The size of the output in 16-byte blocks
     * @param initHashBlocks The hash-specific initialization vector, as a sequence of sixteen 32-bit numbers.
     */
    constructor (numHashBlocks : number , initHashBlocks : number [] ) ;
    /**
     * The number of bytes that are digested in each pass of this hasher.
     */
    blockSize : number ;
    digest ( ) : number [] ;
    /**
     * Resets this hash function.
     */
    reset ( ) : void ;
    update (message : number [] | null | Uint8Array | string , opt_length ? : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Sha2_64bit'): typeof ಠ_ಠ.clutz.goog.crypt.Sha2_64bit;
}
declare module 'goog:goog.crypt.Sha2_64bit' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Sha2_64bit;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * Constructs a SHA-384 cryptographic hash.
   */
  class Sha384 extends Sha384_Instance {
  }
  class Sha384_Instance extends ಠ_ಠ.clutz.goog.crypt.Sha2_64bit_Instance {
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Sha384'): typeof ಠ_ಠ.clutz.goog.crypt.Sha384;
}
declare module 'goog:goog.crypt.Sha384' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Sha384;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * Constructs a SHA-512 cryptographic hash.
   */
  class Sha512 extends Sha512_Instance {
  }
  class Sha512_Instance extends ಠ_ಠ.clutz.goog.crypt.Sha2_64bit_Instance {
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Sha512'): typeof ಠ_ಠ.clutz.goog.crypt.Sha512;
}
declare module 'goog:goog.crypt.Sha512' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Sha512;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * Constructs a SHA-512/256 cryptographic hash.
   */
  class Sha512_256 extends Sha512_256_Instance {
  }
  class Sha512_256_Instance extends ಠ_ಠ.clutz.goog.crypt.Sha2_64bit_Instance {
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.Sha512_256'): typeof ಠ_ಠ.clutz.goog.crypt.Sha512_256;
}
declare module 'goog:goog.crypt.Sha512_256' {
  import alias = ಠ_ಠ.clutz.goog.crypt.Sha512_256;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt.base64 {
  /**
   * Our default alphabet. Value 64 (=) is special; it means "nothing."
   */
  var ENCODED_VALS : string ;
  /**
   * Our default alphabet, shared between
   * ENCODED_VALS and ENCODED_VALS_WEBSAFE
   */
  var ENCODED_VALS_BASE : string ;
  /**
   * Our websafe alphabet.
   */
  var ENCODED_VALS_WEBSAFE : string ;
  /**
   * Base64-decode a string.
   * @param input Input to decode. Any whitespace is ignored, and the input maybe encoded with either supported alphabet (or a mix thereof).
   * @param opt_webSafe True indicates we should use the alternative alphabet, which does not require escaping for use in URLs. Note that passing false may also still allow webSafe input decoding, when the fallback decoder is used on browsers without native support.
   */
  function decodeString (input : string , opt_webSafe ? : boolean ) : string ;
  /**
   * Base64-decode a string to an Array of numbers.
   *
   * In base-64 decoding, groups of four characters are converted into three
   * bytes.  If the encoder did not apply padding, the input length may not
   * be a multiple of 4.
   *
   * In this case, the last group will have fewer than 4 characters, and
   * padding will be inferred.  If the group has one or two characters, it decodes
   * to one byte.  If the group has three characters, it decodes to two bytes.
   * @param input Input to decode. Any whitespace is ignored, and the input maybe encoded with either supported alphabet (or a mix thereof).
   * @param opt_ignored Unused parameter, retained for compatibility.
   */
  function decodeStringToByteArray (input : string , opt_ignored ? : boolean ) : number [] ;
  /**
   * Base64-decode a string to a Uint8Array.
   *
   * Note that Uint8Array is not supported on older browsers, e.g. IE < 10.
   * @param input Input to decode. Any whitespace is ignored, and the input maybe encoded with either supported alphabet (or a mix thereof).
   */
  function decodeStringToUint8Array (input : string ) : Uint8Array ;
  /**
   * Base64-encode an array of bytes.
   * @param input An array of bytes (numbers with value in [0, 255]) to encode.
   * @param opt_webSafe True indicates we should use the alternative alphabet, which does not require escaping for use in URLs.
   */
  function encodeByteArray (input : number [] | null | Uint8Array , opt_webSafe ? : boolean ) : string ;
  /**
   * Base64-encode a string.
   * @param input A string to encode.
   * @param opt_webSafe True indicates we should use the alternative alphabet, which does not require escaping for use in URLs.
   */
  function encodeString (input : string , opt_webSafe ? : boolean ) : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.base64'): typeof ಠ_ಠ.clutz.goog.crypt.base64;
}
declare module 'goog:goog.crypt.base64' {
  import alias = ಠ_ಠ.clutz.goog.crypt.base64;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt.baseN {
  /**
   * The more-known version of the BASE-64 encoding.  Uses + and / characters.
   */
  var BASE_64 : string ;
  /**
   * URL-safe version of the BASE-64 encoding.
   */
  var BASE_64_URL_SAFE : string ;
  /**
   * Base-2, i.e. '01'.
   */
  var BASE_BINARY : string ;
  /**
   * Base-10, i.e. '0123456789'.
   */
  var BASE_DECIMAL : string ;
  /**
   * Base-16 using lower case, i.e. '0123456789abcdef'.
   */
  var BASE_LOWERCASE_HEXADECIMAL : string ;
  /**
   * Base-8, i.e. '01234567'.
   */
  var BASE_OCTAL : string ;
  /**
   * Base-16 using upper case, i.e. '0123456789ABCDEF'.
   */
  var BASE_UPPERCASE_HEXADECIMAL : string ;
  /**
   * Converts a number from one numeric base to another.
   *
   * The bases are represented as strings, which list allowed digits.  Each digit
   * should be unique.  The bases can either be user defined, or any of
   * goog.crypt.baseN.BASE_xxx.
   *
   * The number is in human-readable format, most significant digit first, and is
   * a non-negative integer.  Base designators such as $, 0x, d, b or h (at end)
   * will be interpreted as digits, so avoid them.  Leading zeros will be trimmed.
   *
   * Note: for huge bases the result may be inaccurate because of overflowing
   * 64-bit doubles used by JavaScript for integer calculus.  This may happen
   * if the product of the number of digits in the input and output bases comes
   * close to 10^16, which is VERY unlikely (100M digits in each base), but
   * may be possible in the future unicode world.  (Unicode 3.2 has less than 100K
   * characters.  However, it reserves some more, close to 1M.)
   * @param number The number to convert.
   * @param inputBase The numeric base the number is in (all digits).
   * @param outputBase Requested numeric base.
   */
  function recodeString (number : string , inputBase : string , outputBase : string ) : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.baseN'): typeof ಠ_ಠ.clutz.goog.crypt.baseN;
}
declare module 'goog:goog.crypt.baseN' {
  import alias = ಠ_ಠ.clutz.goog.crypt.baseN;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt.hash32 {
  /**
   * Arbitrary constant used during hashing.
   * See CONSTANT32 in http://go/base.hash.java
   */
  var CONSTANT32 : number ;
  /**
   * Default seed used during hashing, digits of pie.
   * See SEED32 in http://go/base.hash.java
   */
  var SEED32 : number ;
  /**
   * Hashes a "byte" array to a 32-bit value using the supplied seed.
   * @param bytes Array of bytes.
   * @param opt_offset The starting position to use for hash computation.
   * @param opt_length Number of bytes that are used for hashing.
   * @param opt_seed The seed.
   */
  function encodeByteArray (bytes : number [] | null , opt_offset ? : number , opt_length ? : number , opt_seed ? : number ) : number ;
  /**
   * Hashes an integer to a 32-bit value.
   * @param value Number to hash.
   */
  function encodeInteger (value : number ) : number ;
  /**
   * Hashes a string to a 32-bit value.
   * @param str String to hash.
   */
  function encodeString (str : string ) : number ;
  /**
   * Hashes a string to a 32-bit value, converting the string to UTF-8 before
   * doing the encoding.
   * @param str String to hash.
   */
  function encodeStringUtf8 (str : string ) : number ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.hash32'): typeof ಠ_ಠ.clutz.goog.crypt.hash32;
}
declare module 'goog:goog.crypt.hash32' {
  import alias = ಠ_ಠ.clutz.goog.crypt.hash32;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt.pbkdf2 {
  /**
   * Derives key from password using PBKDF2-SHA1
   * @param password Byte array representation of the password from which the key is derived.
   * @param initialSalt Byte array representation of the salt.
   * @param iterations Number of interations when computing the key.
   * @param keyLength Length of the output key in bits. Must be multiple of 8.
   */
  function deriveKeySha1 (password : number [] , initialSalt : number [] , iterations : number , keyLength : number ) : number [] ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.crypt.pbkdf2'): typeof ಠ_ಠ.clutz.goog.crypt.pbkdf2;
}
declare module 'goog:goog.crypt.pbkdf2' {
  import alias = ಠ_ಠ.clutz.goog.crypt.pbkdf2;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.cssom {
  /**
   * Cross browser function to add a CSSRule into a CSSStyleSheet, optionally
   * at a given index.
   * @param cssStyleSheet The CSSRule's parentStyleSheet.
   * @param cssText The text for the new CSSRule.
   * @param opt_index The index of the cssRule in its parentStylesheet.
   */
  function addCssRule (cssStyleSheet : CSSStyleSheet | null , cssText : string , opt_index ? : number ) : void ;
  /**
   * Appends a DOM node to HEAD containing the css text that's passed in.
   * @param cssText CSS to add to the end of the document.
   * @param opt_domHelper Optional DOM helper user for document interactions.
   */
  function addCssText (cssText : string , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) : Element ;
  /**
   * Recursively gets all CSSStyleRules, optionally starting from a given
   * CSSStyleSheet.
   * Note that this excludes any CSSImportRules, CSSMediaRules, etc..
   * @param opt_styleSheet The CSSStyleSheet.
   */
  function getAllCssStyleRules (opt_styleSheet ? : CSSStyleSheet | null | StyleSheetList ) : ( CSSStyleRule | null ) [] | null ;
  /**
   * Gets all CSSStyleSheet objects starting from some CSSStyleSheet. Note that we
   * want to return the sheets in the order of the cascade, therefore if we
   * encounter an import, we will splice that CSSStyleSheet object in front of
   * the CSSStyleSheet that contains it in the returned array of CSSStyleSheets.
   * @param opt_styleSheet A CSSStyleSheet.
   * @param opt_includeDisabled If true, includes disabled stylesheets, defaults to false.
   */
  function getAllCssStyleSheets (opt_styleSheet ? : CSSStyleSheet | null | StyleSheetList , opt_includeDisabled ? : boolean ) : ( CSSStyleSheet | null ) [] ;
  /**
   * Recursively gets all CSS as text, optionally starting from a given
   * CSSStyleSheet.
   * @param opt_styleSheet The CSSStyleSheet.
   */
  function getAllCssText (opt_styleSheet ? : CSSStyleSheet | null | StyleSheetList ) : string ;
  /**
   * Get the index of the CSSRule in it's CSSStyleSheet.
   * @param cssRule A CSSRule.
   * @param opt_parentStyleSheet A reference to the stylesheet object this cssRule belongs to.
   */
  function getCssRuleIndexInParentStyleSheet (cssRule : CSSRule | null , opt_parentStyleSheet ? : CSSStyleSheet | null ) : number ;
  /**
   * Returns the CSSRules from a styleSheet.
   * Worth noting here is that IE and FF differ in terms of what they will return.
   * Firefox will return styleSheet.cssRules, which includes ImportRules and
   * anything which implements the CSSRules interface. IE returns simply a list of
   * CSSRules.
   * @param styleSheet The CSSStyleSheet.
   */
  function getCssRulesFromStyleSheet (styleSheet : CSSStyleSheet | null ) : CSSRuleList | null ;
  /**
   * Gets the cssText from a CSSRule object cross-browserly.
   * @param cssRule A CSSRule.
   */
  function getCssTextFromCssRule (cssRule : CSSRule | null ) : string ;
  /**
   * Cross browser method to get the filename from the StyleSheet's href.
   * Explorer only returns the filename in the href, while other agents return
   * the full path.
   * @param styleSheet Any valid StyleSheet object with an href.
   */
  function getFileNameFromStyleSheet (styleSheet : StyleSheet ) : string | null ;
  /**
   * We do some trickery in getAllCssStyleRules that hacks this in for IE.
   * If the cssRule object isn't coming from a result of that function call, this
   * method will return undefined in IE.
   * @param cssRule The CSSRule.
   */
  function getParentStyleSheet (cssRule : CSSRule | null ) : CSSStyleSheet | null ;
  /**
   * Cross browser function to remove a CSSRule in a CSSStyleSheet at an index.
   * @param cssStyleSheet The CSSRule's parentStyleSheet.
   * @param index The CSSRule's index in the parentStyleSheet.
   */
  function removeCssRule (cssStyleSheet : CSSStyleSheet | null , index : number ) : void ;
  /**
   * Replace a cssRule with some cssText for a new rule.
   * If the cssRule object is not one of objects returned by
   * getAllCssStyleRules, then you'll need to provide both the styleSheet and
   * possibly the index, since we can't infer them from the standard cssRule
   * object in IE. We do some trickery in getAllCssStyleRules to hack this in.
   * @param cssRule A CSSRule.
   * @param cssText The text for the new CSSRule.
   * @param opt_parentStyleSheet A reference to the stylesheet object this cssRule belongs to.
   * @param opt_index The index of the cssRule in its parentStylesheet.
   */
  function replaceCssRule (cssRule : CSSRule | null , cssText : string , opt_parentStyleSheet ? : CSSStyleSheet | null , opt_index ? : number ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.cssom'): typeof ಠ_ಠ.clutz.goog.cssom;
}
declare module 'goog:goog.cssom' {
  import alias = ಠ_ಠ.clutz.goog.cssom;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.cssom {
  /**
   * Enumeration of {@code CSSRule} types.
   */
  type CssRuleType = number ;
  var CssRuleType : {
    FONT_FACE : CssRuleType ,
    IMPORT : CssRuleType ,
    MEDIA : CssRuleType ,
    NAMESPACE : CssRuleType ,
    PAGE : CssRuleType ,
    STYLE : CssRuleType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.cssom.CssRuleType'): typeof ಠ_ಠ.clutz.goog.cssom.CssRuleType;
}
declare module 'goog:goog.cssom.CssRuleType' {
  import alias = ಠ_ಠ.clutz.goog.cssom.CssRuleType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.cssom.iframe.style {
  /**
   * Generates a set of CSS properties that can be used to make another
   * element's background look like the background of a given element.
   * This is useful when you want to copy the CSS context of an element,
   * but the element's background is transparent. In the original context
   * you would see the ancestor's backround color/image showing through,
   * but in the new context there might be a something different underneath.
   * Note that this assumes the element you're copying context from has a
   * fairly standard positioning/layout - it assumes that when the element
   * has a transparent background what you're going to see through it is its
   * ancestors.
   * @param element The element from which to copy background styles.
   */
  function getBackgroundContext (element : Element | null ) : Object ;
  /**
   * Reads the current css rules from element's document, and returns them
   * rewriting selectors so that any rules that formerly applied to element will
   * be applied to doc.body. This makes it possible to replace a block in a page
   * with an iframe and preserve the css styling of the contents.
   * @param element The element for which context should be calculated.
   * @param opt_forceRuleSetCacheUpdate Flag to force the internal cache of rulesets to refresh itself before we read the same.
   * @param opt_copyBackgroundContext Flag indicating that if the {@code element} has a transparent background, background rules from the nearest ancestor element(s) that have background-color and/or background-image set should be copied.
   */
  function getElementContext (element : Element | null , opt_forceRuleSetCacheUpdate ? : boolean , opt_copyBackgroundContext ? : boolean ) : string ;
  /**
   * Throw away all cached dom information. Call this if you've modified
   * the structure or class/id attributes of your document and you want
   * to recalculate the currently applied CSS rules.
   */
  function resetDomCache ( ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.cssom.iframe.style'): typeof ಠ_ಠ.clutz.goog.cssom.iframe.style;
}
declare module 'goog:goog.cssom.iframe.style' {
  import alias = ಠ_ಠ.clutz.goog.cssom.iframe.style;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Number of milliseconds in a day.
   */
  var MS_PER_DAY : number ;
  /**
   * Formats a month/year string.
   * Example: "January 2008"
   * @param monthName The month name to use in the result.
   * @param yearNum The numeric year to use in the result.
   */
  function formatMonthAndYear (monthName : string , yearNum : number ) : string ;
  /**
   * Creates a DateTime from a datetime string expressed in ISO 8601 format.
   * @param formatted A date or datetime expressed in ISO 8601 format.
   */
  function fromIsoString (formatted : string ) : ಠ_ಠ.clutz.goog.date.DateTime | null ;
  /**
   * Returns the number of days for a given month.
   * @param year Year part of date.
   * @param month Month part of date.
   */
  function getNumberOfDaysInMonth (year : number , month : number ) : number ;
  /**
   * Static function for week number calculation. ISO 8601 implementation.
   * @param year Year part of date.
   * @param month Month part of date (0-11).
   * @param date Day part of date (1-31).
   * @param opt_weekDay Cut off weekday, defaults to Thursday.
   * @param opt_firstDayOfWeek First day of the week, defaults to Monday. Monday=0, Sunday=6.
   */
  function getWeekNumber (year : number , month : number , date : number , opt_weekDay ? : number , opt_firstDayOfWeek ? : number ) : number ;
  /**
   * Returns whether the given year is a leap year.
   * @param year Year part of date.
   */
  function isLeapYear (year : number ) : boolean ;
  /**
   * Returns whether the given year is a long ISO year.
   * See {@link http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm}.
   * @param year Full year part of date.
   */
  function isLongIsoYear (year : number ) : boolean ;
  /**
   * Returns true if the 2 dates are in the same day.
   * @param date The time to check.
   * @param opt_now The current time.
   */
  function isSameDay (date : Date | null | ಠ_ಠ.clutz.goog.date.Date , opt_now ? : Date | null | ಠ_ಠ.clutz.goog.date.Date ) : boolean ;
  /**
   * Returns true if the 2 dates are in the same month.
   * @param date The time to check.
   * @param opt_now The current time.
   */
  function isSameMonth (date : Date | null | ಠ_ಠ.clutz.goog.date.Date , opt_now ? : Date | null | ಠ_ಠ.clutz.goog.date.Date ) : boolean ;
  /**
   * Returns true if the 2 dates are in the same year.
   * @param date The time to check.
   * @param opt_now The current time.
   */
  function isSameYear (date : Date | null | ಠ_ಠ.clutz.goog.date.Date , opt_now ? : Date | null | ಠ_ಠ.clutz.goog.date.Date ) : boolean ;
  function max < T , S > (date1 : T , date2 : S ) : T | S ;
  function min < T , S > (date1 : T , date2 : S ) : T | S ;
  /**
   * Parses a datetime string expressed in ISO 8601 format. Overwrites the date
   * and optionally the time part of the given object with the parsed values.
   * @param dateTime Object whose fields will be set.
   * @param formatted A date or datetime expressed in ISO 8601 format.
   */
  function setIso8601DateTime (dateTime : ಠ_ಠ.clutz.goog.date.DateTime , formatted : string ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.date'): typeof ಠ_ಠ.clutz.goog.date;
}
declare module 'goog:goog.date' {
  import alias = ಠ_ಠ.clutz.goog.date;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Class representing a date. Defaults to current date if none is specified.
   *
   * Implements most methods of the native js Date object (except the time related
   * ones, {@see goog.date.DateTime}) and can be used interchangeably with it just
   * as if goog.date.Date was a synonym of Date. To make this more transparent,
   * Closure APIs should accept goog.date.DateLike instead of the real Date
   * object.
   *
   * To allow goog.date.Date objects to be passed as arguments to methods
   * expecting Date objects this class is marked as extending the built in Date
   * object even though that's not strictly true.
   */
  class Date extends Date_Instance {
    /**
     * Compares two dates.  May be used as a sorting function.
     * @param date1 Date to compare.
     * @param date2 Date to compare.
     */
    static compare (date1 : Date | ಠ_ಠ.clutz.goog.date.Date , date2 : Date | ಠ_ಠ.clutz.goog.date.Date ) : number ;
  }
  class Date_Instance {
    private noStructuralTyping_: any;
    /**
     * Class representing a date. Defaults to current date if none is specified.
     *
     * Implements most methods of the native js Date object (except the time related
     * ones, {@see goog.date.DateTime}) and can be used interchangeably with it just
     * as if goog.date.Date was a synonym of Date. To make this more transparent,
     * Closure APIs should accept goog.date.DateLike instead of the real Date
     * object.
     *
     * To allow goog.date.Date objects to be passed as arguments to methods
     * expecting Date objects this class is marked as extending the built in Date
     * object even though that's not strictly true.
     * @param opt_year Four digit year or a date-like object. If not set, the created object will contain the date determined by goog.now().
     * @param opt_month Month, 0 = Jan, 11 = Dec.
     * @param opt_date Date of month, 1 - 31.
     */
    constructor (opt_year ? : number | Date | null | ಠ_ಠ.clutz.goog.date.Date , opt_month ? : number , opt_date ? : number ) ;
    date : Date ;
    /**
     * Performs date calculation by adding the supplied interval to the date.
     * @param interval Date interval to add.
     */
    add (interval : ಠ_ಠ.clutz.goog.date.Interval | null ) : void ;
    clone ( ) : ಠ_ಠ.clutz.goog.date.Date ;
    /**
     * Tests whether given date is equal to this Date.
     * Note: This ignores units more precise than days (hours and below)
     * and also ignores timezone considerations.
     * @param other The date to compare.
     */
    equals (other : ಠ_ಠ.clutz.goog.date.Date | null ) : boolean ;
    getDate ( ) : number ;
    getDay ( ) : number ;
    getDayOfYear ( ) : number ;
    getFirstDayOfWeek ( ) : number ;
    getFirstWeekCutOffDay ( ) : number ;
    getFullYear ( ) : number ;
    getIsoWeekday ( ) : ಠ_ಠ.clutz.goog.date.weekDay ;
    getMonth ( ) : ಠ_ಠ.clutz.goog.date.month ;
    getNumberOfDaysInMonth ( ) : number ;
    /**
     * Returns the number of milliseconds since 1 January 1970 00:00:00.
     */
    getTime ( ) : number ;
    /**
     * Returns timezone offset. The timezone offset is the delta in minutes between
     * UTC and your local time. E.g., UTC+10 returns -600. Daylight savings time
     * prevents this value from being constant.
     */
    getTimezoneOffset ( ) : number ;
    /**
     * Returns timezone offset as a string. Returns offset in [+-]HH:mm format or Z
     * for UTC.
     */
    getTimezoneOffsetString ( ) : string ;
    getUTCDate ( ) : number ;
    getUTCDay ( ) : number ;
    getUTCFullYear ( ) : number ;
    getUTCHours ( ) : number ;
    getUTCIsoWeekday ( ) : ಠ_ಠ.clutz.goog.date.weekDay ;
    getUTCMinutes ( ) : number ;
    getUTCMonth ( ) : ಠ_ಠ.clutz.goog.date.month ;
    getUTCWeekday ( ) : number ;
    getWeekNumber ( ) : number ;
    getWeekday ( ) : number ;
    /**
     * Alias for getFullYear.
     */
    getYear ( ) : number ;
    /**
     * Sets the date.
     * @param date Date object to set date from.
     */
    set (date : ಠ_ಠ.clutz.goog.date.Date | null ) : void ;
    /**
     * Sets the day part of the date.
     * @param date The day part.
     */
    setDate (date : number ) : void ;
    /**
     * Sets the first day of week.
     * @param day 0 = Mon, 6 = Sun.
     */
    setFirstDayOfWeek (day : number ) : void ;
    /**
     * Sets cut off weekday used for week number calculations. 0 = Mon, 6 = Sun.
     * @param day The cut off weekday.
     */
    setFirstWeekCutOffDay (day : number ) : void ;
    /**
     * Sets the year part of the date.
     * @param year Four digit year.
     */
    setFullYear (year : number ) : void ;
    /**
     * Sets the month part of the date.
     *
     * TODO(nnaze): Update type to goog.date.month.
     * @param month The month, where 0 = Jan, 11 = Dec.
     */
    setMonth (month : number ) : void ;
    /**
     * Sets the value of the date object as expressed in the number of milliseconds
     * since 1 January 1970 00:00:00.
     * @param ms Number of milliseconds since 1 Jan 1970.
     */
    setTime (ms : number ) : void ;
    /**
     * Sets the day part of the date according to universal time.
     * @param date The UTC date.
     */
    setUTCDate (date : number ) : void ;
    /**
     * Sets the year part of the date according to universal time.
     * @param year Four digit year.
     */
    setUTCFullYear (year : number ) : void ;
    /**
     * Sets the month part of the date according to universal time.
     * @param month The month, where 0 = Jan, 11 = Dec.
     */
    setUTCMonth (month : number ) : void ;
    /**
     * Alias for setFullYear.
     * @param year Four digit year.
     */
    setYear (year : number ) : void ;
    /**
     * Returns ISO 8601 string representation of date.
     * @param opt_verbose Whether the verbose format should be used instead of the default compact one.
     * @param opt_tz Whether the timezone offset should be included in the string.
     */
    toIsoString (opt_verbose ? : boolean , opt_tz ? : boolean ) : string ;
    /**
     * Overloaded toString method for object.
     */
    toString ( ) : string ;
    /**
     * Returns ISO 8601 string representation of date according to universal time.
     * @param opt_verbose Whether the verbose format should be used instead of the default compact one.
     * @param opt_tz Whether the timezone offset should be included in the string.
     */
    toUTCIsoString (opt_verbose ? : boolean , opt_tz ? : boolean ) : string ;
    valueOf ( ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.date.Date'): typeof ಠ_ಠ.clutz.goog.date.Date;
}
declare module 'goog:goog.date.Date' {
  import alias = ಠ_ಠ.clutz.goog.date.Date;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
  type DateLike = Date | null | ಠ_ಠ.clutz.goog.date.Date ;
}
declare module 'goog:goog.date.DateLike' {
  import alias = ಠ_ಠ.clutz.goog.date.DateLike;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Constructs a date range.
   */
  class DateRange extends DateRange_Instance {
    /**
     * The last possible day, as far as this class is concerned.
     */
    static MAXIMUM_DATE : ಠ_ಠ.clutz.goog.date.Date | null ;
    /**
     * The first possible day, as far as this class is concerned.
     */
    static MINIMUM_DATE : ಠ_ಠ.clutz.goog.date.Date | null ;
    /**
     * Returns the range that includes all days between January 1, 1900 and
     * December 31, 9999.
     * @param opt_today The date to consider today. Defaults to today.
     */
    static allTime (opt_today ? : ಠ_ಠ.clutz.goog.date.Date | null ) : ಠ_ಠ.clutz.goog.date.DateRange ;
    /**
     * Tests two {@link goog.date.DateRange} objects for equality.
     * @param a A date range.
     * @param b A date range.
     */
    static equals (a : ಠ_ಠ.clutz.goog.date.DateRange | null , b : ಠ_ಠ.clutz.goog.date.DateRange | null ) : boolean ;
    /**
     * Returns the range that includes the seven days that end yesterday.
     * @param opt_today The date to consider today. Defaults to today.
     */
    static last7Days (opt_today ? : ಠ_ಠ.clutz.goog.date.Date | null ) : ಠ_ಠ.clutz.goog.date.DateRange ;
    /**
     * Returns the range that starts seven days before the Monday on or before
     * today and ends the Friday before today.
     * @param opt_today The date to consider today. Defaults to today.
     */
    static lastBusinessWeek (opt_today ? : ಠ_ಠ.clutz.goog.date.Date | null ) : ಠ_ಠ.clutz.goog.date.DateRange ;
    /**
     * Returns the range that starts the first of last month and ends the last day
     * of last month.
     * @param opt_today The date to consider today. Defaults to today.
     */
    static lastMonth (opt_today ? : ಠ_ಠ.clutz.goog.date.Date | null ) : ಠ_ಠ.clutz.goog.date.DateRange ;
    /**
     * Returns the seven-day range that ends the day before the first day of
     * the week (see {@link goog.i18n.DateTimeSymbols.FIRSTDAYOFWEEK}) that
     * contains today.
     * @param opt_today The date to consider today. Defaults to today.
     */
    static lastWeek (opt_today ? : ಠ_ಠ.clutz.goog.date.Date | null ) : ಠ_ಠ.clutz.goog.date.DateRange ;
    static standardDateRange (dateRangeKey : string , opt_today ? : ಠ_ಠ.clutz.goog.date.Date | null ) : ಠ_ಠ.clutz.goog.date.DateRange ;
    /**
     * Returns the range that starts the first of this month and ends the last day
     * of this month.
     * @param opt_today The date to consider today. Defaults to today.
     */
    static thisMonth (opt_today ? : ಠ_ಠ.clutz.goog.date.Date | null ) : ಠ_ಠ.clutz.goog.date.DateRange ;
    /**
     * Returns the seven-day range that starts on the first day of the week
     * (see {@link goog.i18n.DateTimeSymbols.FIRSTDAYOFWEEK}) on or before today.
     * @param opt_today The date to consider today. Defaults to today.
     */
    static thisWeek (opt_today ? : ಠ_ಠ.clutz.goog.date.Date | null ) : ಠ_ಠ.clutz.goog.date.DateRange ;
    /**
     * Returns the range from today to today.
     * @param opt_today The date to consider today. Defaults to today.
     */
    static today (opt_today ? : ಠ_ಠ.clutz.goog.date.Date | null ) : ಠ_ಠ.clutz.goog.date.DateRange ;
    /**
     * Returns the range from yesterday to yesterday.
     * @param opt_today The date to consider today. Defaults to today.
     */
    static yesterday (opt_today ? : ಠ_ಠ.clutz.goog.date.Date | null ) : ಠ_ಠ.clutz.goog.date.DateRange ;
  }
  class DateRange_Instance {
    private noStructuralTyping_: any;
    /**
     * Constructs a date range.
     * @param startDate The first date in the range.
     * @param endDate The last date in the range.
     */
    constructor (startDate : ಠ_ಠ.clutz.goog.date.Date | null , endDate : ಠ_ಠ.clutz.goog.date.Date | null ) ;
    /**
     * Tests if a date falls within this range.
     * @param date The date to test.
     */
    contains (date : ಠ_ಠ.clutz.goog.date.Date | null ) : boolean ;
    getEndDate ( ) : ಠ_ಠ.clutz.goog.date.Date | null ;
    getStartDate ( ) : ಠ_ಠ.clutz.goog.date.Date | null ;
    iterator ( ) : ಠ_ಠ.clutz.goog.date.DateRange.Iterator ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.date.DateRange'): typeof ಠ_ಠ.clutz.goog.date.DateRange;
}
declare module 'goog:goog.date.DateRange' {
  import alias = ಠ_ಠ.clutz.goog.date.DateRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.DateRange {
  /**
   * Creates an iterator over the dates in a {@link goog.date.DateRange}.
   */
  class Iterator extends Iterator_Instance {
  }
  class Iterator_Instance extends ಠ_ಠ.clutz.goog.iter.Iterator_Instance < ಠ_ಠ.clutz.goog.date.Date | null > {
    /**
     * Creates an iterator over the dates in a {@link goog.date.DateRange}.
     * @param dateRange The date range to iterate.
     */
    constructor (dateRange : ಠ_ಠ.clutz.goog.date.DateRange | null ) ;
    next ( ) : ಠ_ಠ.clutz.goog.date.Date | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.date.DateRange.Iterator'): typeof ಠ_ಠ.clutz.goog.date.DateRange.Iterator;
}
declare module 'goog:goog.date.DateRange.Iterator' {
  import alias = ಠ_ಠ.clutz.goog.date.DateRange.Iterator;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.DateRange {
  /**
   * Standard date range keys. Equivalent to the enum IDs in
   * DateRange.java http://go/datarange.java
   */
  type StandardDateRangeKeys = string ;
  var StandardDateRangeKeys : {
    ALL_TIME : StandardDateRangeKeys ,
    LAST_7_DAYS : StandardDateRangeKeys ,
    LAST_BUSINESS_WEEK : StandardDateRangeKeys ,
    LAST_MONTH : StandardDateRangeKeys ,
    LAST_WEEK : StandardDateRangeKeys ,
    THIS_MONTH : StandardDateRangeKeys ,
    THIS_WEEK : StandardDateRangeKeys ,
    TODAY : StandardDateRangeKeys ,
    YESTERDAY : StandardDateRangeKeys ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.date.DateRange.StandardDateRangeKeys'): typeof ಠ_ಠ.clutz.goog.date.DateRange.StandardDateRangeKeys;
}
declare module 'goog:goog.date.DateRange.StandardDateRangeKeys' {
  import alias = ಠ_ಠ.clutz.goog.date.DateRange.StandardDateRangeKeys;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Class representing a date and time. Defaults to current date and time if none
   * is specified.
   *
   * Implements most methods of the native js Date object and can be used
   * interchangeably with it just as if goog.date.DateTime was a subclass of Date.
   */
  class DateTime extends DateTime_Instance {
    /**
     * Creates a DateTime from a datetime string expressed in RFC 822 format.
     * @param formatted A date or datetime expressed in RFC 822 format.
     */
    static fromRfc822String (formatted : string ) : ಠ_ಠ.clutz.goog.date.DateTime | null ;
    static fromTimestamp (timestamp : number ) : ಠ_ಠ.clutz.goog.date.DateTime ;
  }
  class DateTime_Instance extends ಠ_ಠ.clutz.goog.date.Date_Instance {
    /**
     * Class representing a date and time. Defaults to current date and time if none
     * is specified.
     *
     * Implements most methods of the native js Date object and can be used
     * interchangeably with it just as if goog.date.DateTime was a subclass of Date.
     * @param opt_year Four digit year or a date-like object. If not set, the created object will contain the date determined by goog.now().
     * @param opt_month Month, 0 = Jan, 11 = Dec.
     * @param opt_date Date of month, 1 - 31.
     * @param opt_hours Hours, 0 - 23.
     * @param opt_minutes Minutes, 0 - 59.
     * @param opt_seconds Seconds, 0 - 61.
     * @param opt_milliseconds Milliseconds, 0 - 999.
     */
    constructor (opt_year ? : number | Object | null , opt_month ? : number , opt_date ? : number , opt_hours ? : number , opt_minutes ? : number , opt_seconds ? : number , opt_milliseconds ? : number ) ;
    date : Date ;
    /**
     * Performs date calculation by adding the supplied interval to the date.
     * @param interval Date interval to add.
     */
    add (interval : ಠ_ಠ.clutz.goog.date.Interval | null ) : void ;
    clone ( ) : ಠ_ಠ.clutz.goog.date.DateTime ;
    /**
     * Tests whether given datetime is exactly equal to this DateTime.
     * @param other The datetime to compare.
     */
    equals (other : ಠ_ಠ.clutz.goog.date.Date | null ) : boolean ;
    /**
     * Returns the hours part of the datetime.
     */
    getHours ( ) : number ;
    /**
     * Returns the milliseconds part of the datetime.
     */
    getMilliseconds ( ) : number ;
    /**
     * Returns the minutes part of the datetime.
     */
    getMinutes ( ) : number ;
    /**
     * Returns the seconds part of the datetime.
     */
    getSeconds ( ) : number ;
    /**
     * Returns the day of week according to universal time, US style.
     */
    getUTCDay ( ) : ಠ_ಠ.clutz.goog.date.weekDay ;
    /**
     * Returns the hours part of the datetime according to universal time.
     */
    getUTCHours ( ) : number ;
    /**
     * Returns the milliseconds part of the datetime according to universal time.
     */
    getUTCMilliseconds ( ) : number ;
    /**
     * Returns the minutes part of the datetime according to universal time.
     */
    getUTCMinutes ( ) : number ;
    /**
     * Returns the seconds part of the datetime according to universal time.
     */
    getUTCSeconds ( ) : number ;
    isMidnight ( ) : boolean ;
    /**
     * Sets the hours part of the datetime.
     * @param hours An integer between 0 and 23, representing the hour.
     */
    setHours (hours : number ) : void ;
    /**
     * Sets the milliseconds part of the datetime.
     * @param ms Integer between 0 and 999, representing the milliseconds.
     */
    setMilliseconds (ms : number ) : void ;
    /**
     * Sets the minutes part of the datetime.
     * @param minutes Integer between 0 and 59, representing the minutes.
     */
    setMinutes (minutes : number ) : void ;
    /**
     * Sets the seconds part of the datetime.
     * @param seconds Integer between 0 and 59, representing the seconds.
     */
    setSeconds (seconds : number ) : void ;
    /**
     * Sets the hours part of the datetime according to universal time.
     * @param hours An integer between 0 and 23, representing the hour.
     */
    setUTCHours (hours : number ) : void ;
    /**
     * Sets the seconds part of the datetime according to universal time.
     * @param ms Integer between 0 and 999, representing the milliseconds.
     */
    setUTCMilliseconds (ms : number ) : void ;
    /**
     * Sets the minutes part of the datetime according to universal time.
     * @param minutes Integer between 0 and 59, representing the minutes.
     */
    setUTCMinutes (minutes : number ) : void ;
    /**
     * Sets the seconds part of the datetime according to universal time.
     * @param seconds Integer between 0 and 59, representing the seconds.
     */
    setUTCSeconds (seconds : number ) : void ;
    /**
     * Returns ISO 8601 string representation of date/time.
     * @param opt_verbose Whether the verbose format should be used instead of the default compact one.
     * @param opt_tz Whether the timezone offset should be included in the string.
     */
    toIsoString (opt_verbose ? : boolean , opt_tz ? : boolean ) : string ;
    /**
     * Generates time label for the datetime in standard ISO 24-hour time format.
     * E.g., '06:00:00' or '23:30:15'.
     * @param opt_showSeconds Whether to shows seconds. Defaults to TRUE.
     */
    toIsoTimeString (opt_showSeconds ? : boolean ) : string ;
    /**
     * Overloaded toString method for object.
     */
    toString ( ) : string ;
    /**
     * Returns ISO 8601 string representation of date/time according to universal
     * time.
     * @param opt_verbose Whether the opt_verbose format should be returned instead of the default compact one.
     * @param opt_tz Whether the the timezone offset should be included in the string.
     */
    toUTCIsoString (opt_verbose ? : boolean , opt_tz ? : boolean ) : string ;
    /**
     * Generates time label for the datetime, e.g., '5:30am'.
     * By default this does not pad hours (e.g., to '05:30') and it does add
     * an am/pm suffix.
     * TODO(user): i18n -- hardcoding time format like this is bad.  E.g., in CJK
     * locales, need Chinese characters for hour and minute units.
     * @param opt_padHours Whether to pad hours, e.g., '05:30' vs '5:30'.
     * @param opt_showAmPm Whether to show the 'am' and 'pm' suffix.
     * @param opt_omitZeroMinutes E.g., '5:00pm' becomes '5pm', but '5:01pm' remains '5:01pm'.
     */
    toUsTimeString (opt_padHours ? : boolean , opt_showAmPm ? : boolean , opt_omitZeroMinutes ? : boolean ) : string ;
    /**
     * Returns XML Schema 2 string representation of date/time.
     * The return value is also ISO 8601 compliant.
     * @param opt_timezone Should the timezone offset be included in the string?.
     */
    toXmlDateTime (opt_timezone ? : boolean ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.date.DateTime'): typeof ಠ_ಠ.clutz.goog.date.DateTime;
}
declare module 'goog:goog.date.DateTime' {
  import alias = ಠ_ಠ.clutz.goog.date.DateTime;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Class representing a date/time interval. Used for date calculations.
   * <pre>
   * new goog.date.Interval(0, 1) // One month
   * new goog.date.Interval(0, 0, 3, 1) // Three days and one hour
   * new goog.date.Interval(goog.date.Interval.DAYS, 1) // One day
   * </pre>
   */
  class Interval extends Interval_Instance {
    /**
     * Days constant for the date parts.
     */
    static DAYS : string ;
    /**
     * Hours constant for the date parts.
     */
    static HOURS : string ;
    /**
     * Minutes constant for the date parts.
     */
    static MINUTES : string ;
    /**
     * Months constant for the date parts.
     */
    static MONTHS : string ;
    /**
     * Seconds constant for the date parts.
     */
    static SECONDS : string ;
    /**
     * Years constant for the date parts.
     */
    static YEARS : string ;
    /**
     * Parses an XML Schema duration (ISO 8601 extended).
     * @param duration An XML schema duration in textual format. Recurring durations and weeks are not supported.
     */
    static fromIsoString (duration : string ) : ಠ_ಠ.clutz.goog.date.Interval | null ;
  }
  class Interval_Instance {
    private noStructuralTyping_: any;
    /**
     * Class representing a date/time interval. Used for date calculations.
     * <pre>
     * new goog.date.Interval(0, 1) // One month
     * new goog.date.Interval(0, 0, 3, 1) // Three days and one hour
     * new goog.date.Interval(goog.date.Interval.DAYS, 1) // One day
     * </pre>
     * @param opt_years Years or string representing date part.
     * @param opt_months Months or number of whatever date part specified by first parameter.
     * @param opt_days Days.
     * @param opt_hours Hours.
     * @param opt_minutes Minutes.
     * @param opt_seconds Seconds.
     */
    constructor (opt_years ? : number | string , opt_months ? : number , opt_days ? : number , opt_hours ? : number , opt_minutes ? : number , opt_seconds ? : number ) ;
    days : number ;
    hours : number ;
    minutes : number ;
    months : number ;
    seconds : number ;
    years : number ;
    /**
     * Adds the Interval in the argument to this Interval field by field.
     * @param interval The Interval to add.
     */
    add (interval : ಠ_ಠ.clutz.goog.date.Interval | null ) : void ;
    clone ( ) : ಠ_ಠ.clutz.goog.date.Interval ;
    /**
     * Tests whether the given interval is equal to this interval.
     * Note, this is a simple field-by-field comparison, it doesn't
     * account for comparisons like "12 months == 1 year".
     * @param other The interval to test.
     */
    equals (other : ಠ_ಠ.clutz.goog.date.Interval | null ) : boolean ;
    getInverse ( ) : ಠ_ಠ.clutz.goog.date.Interval ;
    /**
     * Gets the total number of seconds in the time interval. Assumes that months
     * and years are empty.
     */
    getTotalSeconds ( ) : number ;
    isZero ( ) : boolean ;
    /**
     * Calculates n * (this interval) by memberwise multiplication.
     * @param n An integer.
     */
    times (n : number ) : ಠ_ಠ.clutz.goog.date.Interval ;
    /**
     * Serializes goog.date.Interval into XML Schema duration (ISO 8601 extended).
     * @param opt_verbose Include zero fields in the duration string.
     */
    toIsoString (opt_verbose ? : boolean ) : string | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.date.Interval'): typeof ಠ_ಠ.clutz.goog.date.Interval;
}
declare module 'goog:goog.date.Interval' {
  import alias = ಠ_ಠ.clutz.goog.date.Interval;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Class representing a date/time in GMT+0 time zone, without daylight saving.
   * Defaults to current date and time if none is specified. The get... and the
   * getUTC... methods are equivalent.
   */
  class UtcDateTime extends UtcDateTime_Instance {
    /**
     * Creates a DateTime from a UTC datetime string expressed in ISO 8601 format.
     * @param formatted A date or datetime expressed in ISO 8601 format.
     */
    static fromIsoString (formatted : string ) : ಠ_ಠ.clutz.goog.date.UtcDateTime | null ;
    static fromTimestamp (timestamp : number ) : ಠ_ಠ.clutz.goog.date.UtcDateTime ;
  }
  class UtcDateTime_Instance extends ಠ_ಠ.clutz.goog.date.DateTime_Instance {
    /**
     * Class representing a date/time in GMT+0 time zone, without daylight saving.
     * Defaults to current date and time if none is specified. The get... and the
     * getUTC... methods are equivalent.
     * @param opt_year Four digit UTC year or a date-like object.  If not set, the created object will contain the date determined by goog.now().
     * @param opt_month UTC month, 0 = Jan, 11 = Dec.
     * @param opt_date UTC date of month, 1 - 31.
     * @param opt_hours UTC hours, 0 - 23.
     * @param opt_minutes UTC minutes, 0 - 59.
     * @param opt_seconds UTC seconds, 0 - 59.
     * @param opt_milliseconds UTC milliseconds, 0 - 999.
     */
    constructor (opt_year ? : number | Date | null | ಠ_ಠ.clutz.goog.date.Date , opt_month ? : number , opt_date ? : number , opt_hours ? : number , opt_minutes ? : number , opt_seconds ? : number , opt_milliseconds ? : number ) ;
    date : Date ;
    add (interval : ಠ_ಠ.clutz.goog.date.Interval | null ) : void ;
    /**
     * Clones the UtcDateTime object.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.date.UtcDateTime ;
    getTimezoneOffset ( ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.date.UtcDateTime'): typeof ಠ_ಠ.clutz.goog.date.UtcDateTime;
}
declare module 'goog:goog.date.UtcDateTime' {
  import alias = ಠ_ಠ.clutz.goog.date.UtcDateTime;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.duration {
  /**
   * Accepts a duration in milliseconds and outputs an absolute duration time in
   * form of "1 day", "2 hours", "20 minutes", "2 days 1 hour 15 minutes" etc.
   * @param durationMs Duration in milliseconds.
   */
  function format (durationMs : number ) : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.date.duration'): typeof ಠ_ಠ.clutz.goog.date.duration;
}
declare module 'goog:goog.date.duration' {
  import alias = ಠ_ಠ.clutz.goog.date.duration;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Constants for months.
   */
  type month = number ;
  var month : {
    APR : month ,
    AUG : month ,
    DEC : month ,
    FEB : month ,
    JAN : month ,
    JUL : month ,
    JUN : month ,
    MAR : month ,
    MAY : month ,
    NOV : month ,
    OCT : month ,
    SEP : month ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.date.month'): typeof ಠ_ಠ.clutz.goog.date.month;
}
declare module 'goog:goog.date.month' {
  import alias = ಠ_ಠ.clutz.goog.date.month;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.relative {
  /**
   * Accepts a timestamp in milliseconds and outputs a relative time in the form
   * of "1 hour ago", "1 day ago", "in 1 hour", "in 2 days" etc.  If the date
   * delta is over 2 weeks, then the output string will be empty.
   * @param dateMs Date in milliseconds.
   */
  function format (dateMs : number ) : string ;
  /**
   * Accepts a timestamp in milliseconds and outputs a relative day. i.e. "Today",
   * "Yesterday", "Tomorrow", or "Sept 15".
   * @param dateMs Date in milliseconds.
   * @param opt_formatter Formatter for the date. Defaults to form 'MMM dd'.
   */
  function formatDay (dateMs : number , opt_formatter ? : (a : Date ) => string ) : string ;
  /**
   * Accepts a timestamp in milliseconds and outputs a relative time in the form
   * of "1 hour ago", "1 day ago".  All future times will be returned as 0 minutes
   * ago.
   *
   * This is provided for compatibility with users of the previous incarnation of
   * the above {@see #format} method who relied on it protecting against
   * future dates.
   * @param dateMs Date in milliseconds.
   */
  function formatPast (dateMs : number ) : string ;
  /**
   * Formats a date, adding the relative date in parenthesis.  If the date is less
   * than 24 hours then the time will be printed, otherwise the full-date will be
   * used.  Examples:
   * 2:20 PM (1 minute ago)
   * Monday, February 27, 2009 (4 days ago)
   * Tuesday, March 20, 2005    // Too long ago for a relative date.
   * @param date A date object.
   * @param opt_shortTimeMsg An optional short time message can be provided if available, so that it's not recalculated in this function.
   * @param opt_fullDateMsg An optional date message can be provided if available, so that it's not recalculated in this function.
   */
  function getDateString (date : Date | null | ಠ_ಠ.clutz.goog.date.DateTime , opt_shortTimeMsg ? : string , opt_fullDateMsg ? : string ) : string ;
  /**
   * Formats a date, adding the relative date in parenthesis.   Functions the same
   * as #getDateString but ensures that the date is always seen to be in the past.
   * If the date is in the future, it will be shown as 0 minutes ago.
   *
   * This is provided for compatibility with users of the previous incarnation of
   * the above {@see #getDateString} method who relied on it protecting against
   * future dates.
   * @param date A date object.
   * @param opt_shortTimeMsg An optional short time message can be provided if available, so that it's not recalculated in this function.
   * @param opt_fullDateMsg An optional date message can be provided if available, so that it's not recalculated in this function.
   */
  function getPastDateString (date : Date | null | ಠ_ಠ.clutz.goog.date.DateTime , opt_shortTimeMsg ? : string , opt_fullDateMsg ? : string ) : string ;
  /**
   * Sets a different formatting function for time deltas ("3 days ago").
   * While its visibility is public, this function is Closure-internal and should
   * not be used in application code.
   * @param formatter The function to use for formatting time deltas (i.e. relative times).
   */
  function setTimeDeltaFormatter (formatter : ಠ_ಠ.clutz.PrivateType ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.date.relative'): typeof ಠ_ಠ.clutz.goog.date.relative;
}
declare module 'goog:goog.date.relative' {
  import alias = ಠ_ಠ.clutz.goog.date.relative;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.relative {
  type TimeDeltaFormatter = ಠ_ಠ.clutz.PrivateType ;
}
declare module 'goog:goog.date.relative.TimeDeltaFormatter' {
  import alias = ಠ_ಠ.clutz.goog.date.relative.TimeDeltaFormatter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.relative {
  /**
   * Enumeration used to identify time units internally.
   */
  type Unit = number ;
  var Unit : {
    DAYS : Unit ,
    HOURS : Unit ,
    MINUTES : Unit ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.date.relative.Unit'): typeof ಠ_ಠ.clutz.goog.date.relative.Unit;
}
declare module 'goog:goog.date.relative.Unit' {
  import alias = ಠ_ಠ.clutz.goog.date.relative.Unit;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.relativeWithPlurals {
}
declare module 'goog:goog.date.relativeWithPlurals' {
  import alias = ಠ_ಠ.clutz.goog.date.relativeWithPlurals;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Constants for weekdays.
   */
  type weekDay = number ;
  var weekDay : {
    FRI : weekDay ,
    MON : weekDay ,
    SAT : weekDay ,
    SUN : weekDay ,
    THU : weekDay ,
    TUE : weekDay ,
    WED : weekDay ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.date.weekDay'): typeof ಠ_ಠ.clutz.goog.date.weekDay;
}
declare module 'goog:goog.date.weekDay' {
  import alias = ಠ_ಠ.clutz.goog.date.weekDay;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * Deletes a database once all open connections have been closed.
   * @param name The name of the database to delete.
   * @param opt_onBlocked Called if there are active connections to the database.
   */
  function deleteDatabase (name : string , opt_onBlocked ? : (a : ಠ_ಠ.clutz.goog.db.IndexedDb.VersionChangeEvent ) => any ) : any ;
  /**
   * Opens a database connection and wraps it.
   * @param name The name of the database to open.
   * @param opt_version The expected version of the database. If this is larger than the actual version, opt_onUpgradeNeeded will be called (possibly after opt_onBlocked; see {@link goog.db.BlockedCallback}). If this is passed, opt_onUpgradeNeeded must be passed as well.
   * @param opt_onUpgradeNeeded Called if opt_version is greater than the old version of the database. If opt_version is passed, this must be passed as well.
   * @param opt_onBlocked Called if there are active connections to the database.
   */
  function openDatabase (name : string , opt_version ? : number , opt_onUpgradeNeeded ? : (a : ಠ_ಠ.clutz.goog.db.IndexedDb.VersionChangeEvent , b : ಠ_ಠ.clutz.goog.db.IndexedDb , c : ಠ_ಠ.clutz.goog.db.Transaction ) => any , opt_onBlocked ? : (a : ಠ_ಠ.clutz.goog.db.IndexedDb.VersionChangeEvent ) => any ) : any ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.db'): typeof ಠ_ಠ.clutz.goog.db;
}
declare module 'goog:goog.db' {
  import alias = ಠ_ಠ.clutz.goog.db;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * A callback that's called if a blocked event is received. When a database is
   * supposed to be deleted or upgraded (i.e. versionchange), and there are open
   * connections to this database, a block event will be fired to prevent the
   * operations from going through until all such open connections are closed.
   * This callback can be used to notify users that they should close other tabs
   * that have open connections, or to close the connections manually. Databases
   * can also listen for the {@link goog.db.IndexedDb.EventType.VERSION_CHANGE}
   * event to automatically close themselves when they're blocking such
   * operations.
   *
   * This is passed a VersionChangeEvent that has the version of the database
   * before it was deleted, and "null" as the new version.
   */
  type BlockedCallback = (a : ಠ_ಠ.clutz.goog.db.IndexedDb.VersionChangeEvent ) => any ;
}
declare module 'goog:goog.db.BlockedCallback' {
  import alias = ಠ_ಠ.clutz.goog.db.BlockedCallback;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * Creates a new IDBCursor wrapper object. Should not be created directly,
   * access cursor through object store.
   */
  class Cursor extends Cursor_Instance {
    /**
     * Opens a value cursor from IDBObjectStore or IDBIndex over the specified key
     * range. Returns a cursor object which is able to iterate over the given range.
     * @param source Data source to open cursor.
     * @param opt_range The key range. If undefined iterates over the whole data source.
     * @param opt_direction The direction. If undefined moves in a forward direction with duplicates.
     */
    static openCursor (source : IDBObjectStore | IDBIndex , opt_range ? : ಠ_ಠ.clutz.goog.db.KeyRange , opt_direction ? : ಠ_ಠ.clutz.goog.db.Cursor.Direction ) : ಠ_ಠ.clutz.goog.db.Cursor ;
  }
  class Cursor_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    getKey ( ) : number | string | Date | any [] ;
    getValue ( ) : any ;
    /**
     * Advances the cursor to the next position along its direction. When new data
     * is available, the NEW_DATA event will be fired. If the cursor has reached the
     * end of the range it will fire the COMPLETE event. If opt_key is specified it
     * will advance to the key it matches in its direction.
     *
     * This wraps the native #continue method on the underlying object.
     * @param opt_key The optional key to advance to.
     */
    next (opt_key ? : number | string | Date | any [] ) : void ;
    /**
     * Deletes the value at the cursor's position, without changing the cursor's
     * position. Once the value is deleted, the cursor's value is set to null.
     */
    remove ( ) : any ;
    /**
     * Updates the value at the current position of the cursor in the object store.
     * If the cursor points to a value that has just been deleted, a new value is
     * created.
     * @param value The value to be stored.
     */
    update (value : any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.db.Cursor {
  type Direction = string ;
  var Direction : {
    NEXT : Direction ,
    NEXT_NO_DUPLICATE : Direction ,
    PREV : Direction ,
    PREV_NO_DUPLICATE : Direction ,
  };
  type EventType = string ;
  var EventType : {
    COMPLETE : EventType ,
    ERROR : EventType ,
    NEW_DATA : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.db.Cursor'): typeof ಠ_ಠ.clutz.goog.db.Cursor;
}
declare module 'goog:goog.db.Cursor' {
  import alias = ಠ_ಠ.clutz.goog.db.Cursor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * A database error. Since the stack trace can be unhelpful in an asynchronous
   * context, the error provides a message about where it was produced.
   */
  class Error extends Error_Instance {
    /**
     * Constructs an goog.db.Error instance from an DOMException. This abstraction
     * is necessary to provide backwards compatibility with Chrome21.
     * @param ex The exception that was thrown.
     * @param message The error message to add to err if it's wrapped.
     */
    static fromException (ex : IDBDatabaseException , message : string ) : ಠ_ಠ.clutz.goog.db.Error ;
    /**
     * Constructs an goog.db.Error instance from an IDBRequest. This abstraction is
     * necessary to provide backwards compatibility with Chrome21.
     * @param request The request that failed.
     * @param message The error message to add to err if it's wrapped.
     */
    static fromRequest (request : IDBRequest , message : string ) : ಠ_ಠ.clutz.goog.db.Error ;
    /**
     * Translates an error name to an error code. This is purely kept for backwards
     * compatibility with Chrome21.
     * @param name The name of the erorr.
     */
    static getCode (name : string ) : number ;
    /**
     * Translates an error code into a more useful message.
     * @param code Error code.
     */
    static getMessage (code : number ) : string ;
    /**
     * Converts an error code used by the old spec, to an error name used by the
     * latest spec.
     * @param code The error code to convert.
     */
    static getName (code : number ) : ಠ_ಠ.clutz.goog.db.Error.ErrorName ;
  }
  class Error_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
    /**
     * A database error. Since the stack trace can be unhelpful in an asynchronous
     * context, the error provides a message about where it was produced.
     * @param error The DOMError instance returned by the browser for Chrome22+, or an error code for previous versions.
     * @param context A description of where the error occurred.
     * @param opt_message Additional message.
     */
    constructor (error : number | DOMError , context : string , opt_message ? : string ) ;
    /**
     * The code for this error.
     */
    code : number ;
    getName ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.db.Error'): typeof ಠ_ಠ.clutz.goog.db.Error;
}
declare module 'goog:goog.db.Error' {
  import alias = ಠ_ಠ.clutz.goog.db.Error;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db.Error {
  /**
   * Error codes for database errors.
   */
  type ErrorCode = number ;
  var ErrorCode : {
    ABORT_ERR : ErrorCode ,
    CONSTRAINT_ERR : ErrorCode ,
    DATA_ERR : ErrorCode ,
    INVALID_ACCESS_ERR : ErrorCode ,
    INVALID_STATE_ERR : ErrorCode ,
    NON_TRANSIENT_ERR : ErrorCode ,
    NOT_ALLOWED_ERR : ErrorCode ,
    NOT_FOUND_ERR : ErrorCode ,
    QUOTA_ERR : ErrorCode ,
    READ_ONLY_ERR : ErrorCode ,
    TIMEOUT_ERR : ErrorCode ,
    TRANSACTION_INACTIVE_ERR : ErrorCode ,
    UNKNOWN_ERR : ErrorCode ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.db.Error.ErrorCode'): typeof ಠ_ಠ.clutz.goog.db.Error.ErrorCode;
}
declare module 'goog:goog.db.Error.ErrorCode' {
  import alias = ಠ_ಠ.clutz.goog.db.Error.ErrorCode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db.Error {
  /**
   * Names of all possible errors as returned from the browser.
   */
  type ErrorName = string ;
  var ErrorName : {
    ABORT_ERR : ErrorName ,
    CONSTRAINT_ERR : ErrorName ,
    DATA_CLONE_ERR : ErrorName ,
    DATA_ERR : ErrorName ,
    INVALID_ACCESS_ERR : ErrorName ,
    INVALID_STATE_ERR : ErrorName ,
    NOT_FOUND_ERR : ErrorName ,
    QUOTA_EXCEEDED_ERR : ErrorName ,
    READ_ONLY_ERR : ErrorName ,
    SYNTAX_ERROR : ErrorName ,
    TIMEOUT_ERR : ErrorName ,
    TRANSACTION_INACTIVE_ERR : ErrorName ,
    UNKNOWN_ERR : ErrorName ,
    VERSION_ERR : ErrorName ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.db.Error.ErrorName'): typeof ಠ_ಠ.clutz.goog.db.Error.ErrorName;
}
declare module 'goog:goog.db.Error.ErrorName' {
  import alias = ಠ_ಠ.clutz.goog.db.Error.ErrorName;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db.Error {
  /**
   * A specific kind of database error. If a Version Change is unable to proceed
   * due to other open database connections, it will block and this error will be
   * thrown.
   */
  class VersionChangeBlockedError extends VersionChangeBlockedError_Instance {
  }
  class VersionChangeBlockedError_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.db.Error.VersionChangeBlockedError'): typeof ಠ_ಠ.clutz.goog.db.Error.VersionChangeBlockedError;
}
declare module 'goog:goog.db.Error.VersionChangeBlockedError' {
  import alias = ಠ_ಠ.clutz.goog.db.Error.VersionChangeBlockedError;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * Creates an IDBIndex wrapper object. Indexes are associated with object
   * stores and provide methods for looking up objects based on their non-key
   * properties. Should not be created directly, access through the object store
   * it belongs to.
   */
  class Index extends Index_Instance {
  }
  class Index_Instance {
    private noStructuralTyping_: any;
    /**
     * Creates an IDBIndex wrapper object. Indexes are associated with object
     * stores and provide methods for looking up objects based on their non-key
     * properties. Should not be created directly, access through the object store
     * it belongs to.
     * @param index Underlying IDBIndex object.
     */
    constructor (index : IDBIndex ) ;
    /**
     * Fetches a single object from the object store. Even if there are multiple
     * objects that match the given key, this method will get only one of them.
     * @param key Key to look up in the index.
     */
    get (key : number | string | Date | any [] ) : any ;
    /**
     * Gets all indexed objects. If the key is provided, gets all indexed objects
     * that match the key instead.
     * @param opt_key Key to look up in the index.
     */
    getAll (opt_key ? : number | string | Date | any [] ) : any ;
    /**
     * Gets the keys to look up all the indexed objects. If the key is provided,
     * gets all records for objects that match the key instead.
     * @param opt_key Key to look up in the index.
     */
    getAllKeys (opt_key ? : number | string | Date | any [] ) : any ;
    /**
     * Looks up a single object from the object store and gives back the key that
     * it's listed under in the object store. Even if there are multiple records
     * that match the given key, this method returns the first.
     * @param key Key to look up in the index.
     */
    getKey (key : number | string | Date | any [] ) : any ;
    getKeyPath ( ) : string ;
    getName ( ) : string ;
    isUnique ( ) : boolean ;
    /**
     * Opens a cursor over the specified key range. Returns a cursor object which is
     * able to iterate over the given range.
     *
     * Example usage:
     *
     * <code>
     * var cursor = index.openCursor(goog.db.KeyRange.bound('a', 'c'));
     *
     * var key = goog.events.listen(
     * cursor, goog.db.Cursor.EventType.NEW_DATA,
     * function() {
     * // Do something with data.
     * cursor.next();
     * });
     *
     * goog.events.listenOnce(
     * cursor, goog.db.Cursor.EventType.COMPLETE,
     * function() {
     * // Clean up listener, and perform a finishing operation on the data.
     * goog.events.unlistenByKey(key);
     * });
     * </code>
     * @param opt_range The key range. If undefined iterates over the whole object store.
     * @param opt_direction The direction. If undefined moves in a forward direction with duplicates.
     */
    openCursor (opt_range ? : ಠ_ಠ.clutz.goog.db.KeyRange , opt_direction ? : ಠ_ಠ.clutz.goog.db.Cursor.Direction ) : ಠ_ಠ.clutz.goog.db.Cursor ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.db.Index'): typeof ಠ_ಠ.clutz.goog.db.Index;
}
declare module 'goog:goog.db.Index' {
  import alias = ಠ_ಠ.clutz.goog.db.Index;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * Creates an IDBDatabase wrapper object. The database object has methods for
   * setting the version to change the structure of the database and for creating
   * transactions to get or modify the stored records. Should not be created
   * directly, call {@link goog.db.openDatabase} to set up the connection.
   */
  class IndexedDb extends IndexedDb_Instance {
  }
  class IndexedDb_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Creates an IDBDatabase wrapper object. The database object has methods for
     * setting the version to change the structure of the database and for creating
     * transactions to get or modify the stored records. Should not be created
     * directly, call {@link goog.db.openDatabase} to set up the connection.
     * @param db Underlying IndexedDB database object.
     */
    constructor (db : IDBDatabase ) ;
    /**
     * Closes the database connection. Metadata queries can still be made after this
     * method is called, but otherwise this wrapper should not be used further.
     */
    close ( ) : void ;
    /**
     * Creates an object store in this database. Can only be called inside a
     * {@link goog.db.UpgradeNeededCallback}.
     * @param name Name for the new object store.
     * @param opt_params Options object. The available options are: keyPath, which is a string and determines what object attribute to use as the key when storing objects in this object store; and autoIncrement, which is a boolean, which defaults to false and determines whether the object store should automatically generate keys for stored objects. If keyPath is not provided and autoIncrement is false, then all insert operations must provide a key as a parameter.
     */
    createObjectStore (name : string , opt_params ? : Object | null ) : ಠ_ಠ.clutz.goog.db.ObjectStore ;
    /**
     * Creates a new transaction.
     * @param storeNames A list of strings that contains the transaction's scope, the object stores that this transaction can operate on.
     * @param opt_mode The mode of the transaction. If not present, the default is READ_ONLY.
     */
    createTransaction (storeNames : string [] , opt_mode ? : ಠ_ಠ.clutz.goog.db.Transaction.TransactionMode ) : ಠ_ಠ.clutz.goog.db.Transaction ;
    /**
     * Deletes an object store. Can only be called inside a
     * {@link goog.db.UpgradeNeededCallback}.
     * @param name Name of the object store to delete.
     */
    deleteObjectStore (name : string ) : void ;
    disposeInternal ( ) : void ;
    getName ( ) : string ;
    getObjectStoreNames ( ) : DOMStringList | null ;
    getVersion ( ) : string ;
    isOpen ( ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.db.IndexedDb {
  type EventType = string ;
  var EventType : {
    ABORT : EventType ,
    CLOSE : EventType ,
    ERROR : EventType ,
    VERSION_CHANGE : EventType ,
  };
  class VersionChangeEvent extends VersionChangeEvent_Instance {
  }
  class VersionChangeEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * Event representing a (possibly attempted) change in the database structure.
     *
     * At time of writing, no Chrome versions support oldVersion or newVersion. See
     * http://crbug.com/153122.
     * @param oldVersion The previous version of the database.
     * @param newVersion The version the database is being or has been updated to.
     */
    constructor (oldVersion : number , newVersion : number ) ;
    /**
     * The version the database is being or has been updated to.
     */
    newVersion : number ;
    /**
     * The previous version of the database.
     */
    oldVersion : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.db.IndexedDb'): typeof ಠ_ಠ.clutz.goog.db.IndexedDb;
}
declare module 'goog:goog.db.IndexedDb' {
  import alias = ಠ_ಠ.clutz.goog.db.IndexedDb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * Creates a new IDBKeyRange wrapper object. Should not be created directly,
   * instead use one of the static factory methods. For example:
   */
  class KeyRange extends KeyRange_Instance {
    /**
     * Creates a key range with upper and lower bounds.
     * @param lower The value of the lower bound.
     * @param upper The value of the upper bound.
     * @param opt_lowerOpen If true, the range excludes the lower bound value.
     * @param opt_upperOpen If true, the range excludes the upper bound value.
     */
    static bound (lower : number | string | Date | any [] , upper : number | string | Date | any [] , opt_lowerOpen ? : boolean , opt_upperOpen ? : boolean ) : ಠ_ಠ.clutz.goog.db.KeyRange ;
    /**
     * Creates a key range with a lower bound only, finishes at the last record.
     * @param lower The value of the lower bound.
     * @param opt_lowerOpen If true, the range excludes the lower bound value.
     */
    static lowerBound (lower : number | string | Date | any [] , opt_lowerOpen ? : boolean ) : ಠ_ಠ.clutz.goog.db.KeyRange ;
    /**
     * Creates a new key range for a single value.
     * @param key The single value in the range.
     */
    static only (key : number | string | Date | any [] ) : ಠ_ಠ.clutz.goog.db.KeyRange ;
    /**
     * Creates a key range with a upper bound only, starts at the first record.
     * @param upper The value of the upper bound.
     * @param opt_upperOpen If true, the range excludes the upper bound value.
     */
    static upperBound (upper : number | string | Date | any [] , opt_upperOpen ? : boolean ) : ಠ_ಠ.clutz.goog.db.KeyRange ;
  }
  class KeyRange_Instance {
    private noStructuralTyping_: any;
    /**
     * Creates a new IDBKeyRange wrapper object. Should not be created directly,
     * instead use one of the static factory methods. For example:
     * @param range Underlying IDBKeyRange object.
     */
    constructor (range : IDBKeyRange ) ;
    /**
     * Returns underlying key range object. This is used in ObjectStore's openCursor
     * and count methods.
     */
    range ( ) : IDBKeyRange ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.db.KeyRange'): typeof ಠ_ಠ.clutz.goog.db.KeyRange;
}
declare module 'goog:goog.db.KeyRange' {
  import alias = ಠ_ಠ.clutz.goog.db.KeyRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * Creates an IDBObjectStore wrapper object. Object stores have methods for
   * storing and retrieving records, and are accessed through a transaction
   * object. They also have methods for creating indexes associated with the
   * object store. They can only be created when setting the version of the
   * database. Should not be created directly, access object stores through
   * transactions.
   */
  class ObjectStore extends ObjectStore_Instance {
  }
  class ObjectStore_Instance {
    private noStructuralTyping_: any;
    /**
     * Creates an IDBObjectStore wrapper object. Object stores have methods for
     * storing and retrieving records, and are accessed through a transaction
     * object. They also have methods for creating indexes associated with the
     * object store. They can only be created when setting the version of the
     * database. Should not be created directly, access object stores through
     * transactions.
     * @param store The backing IndexedDb object.
     */
    constructor (store : IDBObjectStore ) ;
    /**
     * Adds an object to the object store. Requires that there is no object with
     * the same key already present.
     * @param value The value to add.
     * @param opt_key The key to use. Cannot be used if the keyPath was specified for the object store. If the keyPath was not specified but autoIncrement was not enabled, it must be used.
     */
    add (value : any , opt_key ? : number | string | Date | any [] ) : any ;
    /**
     * Deletes all objects from the store.
     */
    clear ( ) : any ;
    /**
     * Gets number of records within a key range.
     * @param opt_range The key range. If undefined, this will count all records in the object store.
     */
    count (opt_range ? : ಠ_ಠ.clutz.goog.db.KeyRange ) : any ;
    /**
     * Creates an index in this object store. Can only be called inside a
     * {@link goog.db.UpgradeNeededCallback}.
     * @param name Name of the index to create.
     * @param keyPath Attribute to index on.
     * @param opt_parameters Optional parameters object. The only available option is unique, which defaults to false. If unique is true, the index will enforce that there is only ever one object in the object store for each unique value it indexes on.
     */
    createIndex (name : string , keyPath : string , opt_parameters ? : Object ) : ಠ_ಠ.clutz.goog.db.Index ;
    /**
     * Deletes an index from the object store. Can only be called inside a
     * {@link goog.db.UpgradeNeededCallback}.
     * @param name Name of the index to delete.
     */
    deleteIndex (name : string ) : void ;
    /**
     * Gets an object from the store. If no object is present with that key
     * the result is {@code undefined}.
     * @param key The key to look up.
     */
    get (key : number | string | Date | any [] ) : any ;
    /**
     * Gets all objects from the store and returns them as an array.
     * @param opt_range The key range. If undefined iterates over the whole object store.
     * @param opt_direction The direction. If undefined moves in a forward direction with duplicates.
     */
    getAll (opt_range ? : ಠ_ಠ.clutz.goog.db.KeyRange , opt_direction ? : ಠ_ಠ.clutz.goog.db.Cursor.Direction ) : any ;
    /**
     * Gets an index.
     * @param name Name of the index to fetch.
     */
    getIndex (name : string ) : ಠ_ಠ.clutz.goog.db.Index ;
    getName ( ) : string ;
    /**
     * Opens a cursor over the specified key range. Returns a cursor object which is
     * able to iterate over the given range.
     *
     * Example usage:
     *
     * <code>
     * var cursor = objectStore.openCursor(goog.db.Range.bound('a', 'c'));
     *
     * var key = goog.events.listen(
     * cursor, goog.db.Cursor.EventType.NEW_DATA, function() {
     * // Do something with data.
     * cursor.next();
     * });
     *
     * goog.events.listenOnce(
     * cursor, goog.db.Cursor.EventType.COMPLETE, function() {
     * // Clean up listener, and perform a finishing operation on the data.
     * goog.events.unlistenByKey(key);
     * });
     * </code>
     * @param opt_range The key range. If undefined iterates over the whole object store.
     * @param opt_direction The direction. If undefined moves in a forward direction with duplicates.
     */
    openCursor (opt_range ? : ಠ_ಠ.clutz.goog.db.KeyRange , opt_direction ? : ಠ_ಠ.clutz.goog.db.Cursor.Direction ) : ಠ_ಠ.clutz.goog.db.Cursor ;
    /**
     * Adds an object to the object store. Replaces existing objects with the
     * same key.
     * @param value The value to put.
     * @param opt_key The key to use. Cannot be used if the keyPath was specified for the object store. If the keyPath was not specified but autoIncrement was not enabled, it must be used.
     */
    put (value : any , opt_key ? : number | string | Date | any [] ) : any ;
    /**
     * Removes an object from the store. No-op if there is no object present with
     * the given key.
     * @param key The key to remove objects under.
     */
    remove (key : number | string | Date | any [] ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.db.ObjectStore'): typeof ಠ_ಠ.clutz.goog.db.ObjectStore;
}
declare module 'goog:goog.db.ObjectStore' {
  import alias = ಠ_ಠ.clutz.goog.db.ObjectStore;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * Creates a new transaction. Transactions contain methods for accessing object
   * stores and are created from the database object. Should not be created
   * directly, open a database and call createTransaction on it.
   */
  class Transaction extends Transaction_Instance {
  }
  class Transaction_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Creates a new transaction. Transactions contain methods for accessing object
     * stores and are created from the database object. Should not be created
     * directly, open a database and call createTransaction on it.
     * @param tx IndexedDB transaction to back this wrapper.
     * @param db The database that this transaction modifies.
     */
    constructor (tx : IDBTransaction , db : ಠ_ಠ.clutz.goog.db.IndexedDb ) ;
    /**
     * Aborts this transaction. No pending operations will be applied to the
     * database. Dispatches an ABORT event.
     */
    abort ( ) : void ;
    disposeInternal ( ) : void ;
    getDatabase ( ) : ಠ_ಠ.clutz.goog.db.IndexedDb ;
    getMode ( ) : ಠ_ಠ.clutz.goog.db.Transaction.TransactionMode ;
    /**
     * Opens an object store to do operations on in this transaction. The requested
     * object store must be one that is in this transaction's scope.
     * @param name The name of the requested object store.
     */
    objectStore (name : string ) : ಠ_ಠ.clutz.goog.db.ObjectStore ;
    wait ( ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.db.Transaction {
  type EventTypes = string ;
  var EventTypes : {
    ABORT : EventTypes ,
    COMPLETE : EventTypes ,
    ERROR : EventTypes ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.db.Transaction'): typeof ಠ_ಠ.clutz.goog.db.Transaction;
}
declare module 'goog:goog.db.Transaction' {
  import alias = ಠ_ಠ.clutz.goog.db.Transaction;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db.Transaction {
  /**
   * The three possible transaction modes.
   */
  type TransactionMode = string ;
  var TransactionMode : {
    READ_ONLY : TransactionMode ,
    READ_WRITE : TransactionMode ,
    VERSION_CHANGE : TransactionMode ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.db.Transaction.TransactionMode'): typeof ಠ_ಠ.clutz.goog.db.Transaction.TransactionMode;
}
declare module 'goog:goog.db.Transaction.TransactionMode' {
  import alias = ಠ_ಠ.clutz.goog.db.Transaction.TransactionMode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * A callback that's called when opening a database whose internal version is
   * lower than the version passed to {@link goog.db.openDatabase}.
   *
   * This callback is passed three arguments: a VersionChangeEvent with both the
   * old version and the new version of the database; the database that's being
   * opened, for which you can create and delete object stores; and the version
   * change transaction, with which you can abort the version change.
   *
   * Note that the transaction is not active, which means that it can't be used to
   * make changes to the database. However, since there is a transaction running,
   * you can't create another one via {@link goog.db.IndexedDb.createTransaction}.
   * This means that it's not possible to manipulate the database other than
   * creating or removing object stores in this callback.
   */
  type UpgradeNeededCallback = (a : ಠ_ಠ.clutz.goog.db.IndexedDb.VersionChangeEvent , b : ಠ_ಠ.clutz.goog.db.IndexedDb , c : ಠ_ಠ.clutz.goog.db.Transaction ) => any ;
}
declare module 'goog:goog.db.UpgradeNeededCallback' {
  import alias = ಠ_ಠ.clutz.goog.db.UpgradeNeededCallback;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  var FORCE_SLOPPY_STACKS : boolean ;
  var LOGGING_ENABLED : boolean ;
  /**
   * Max length of stack to try and output
   */
  var MAX_STACK_DEPTH : number ;
  /**
   * Catches onerror events fired by windows and similar objects.
   * @param logFunc The function to call with the error information.
   * @param opt_cancel Whether to stop the error from reaching the browser.
   * @param opt_target Object that fires onerror events.
   */
  function catchErrors (logFunc : (a : Object | null ) => any , opt_cancel ? : boolean , opt_target ? : Object | null ) : void ;
  /**
   * Creates a string representing a given primitive or object, and for an
   * object, all its properties and nested objects.  WARNING: If an object is
   * given, it and all its nested objects will be modified.  To detect reference
   * cycles, this method identifies objects using goog.getUid() which mutates the
   * object.
   * @param obj Object to expose.
   * @param opt_showFn Also show properties that are functions (by default, functions are omitted).
   */
  function deepExpose (obj : any , opt_showFn ? : boolean ) : string ;
  /**
   * Converts an object to an Error if it's a String,
   * adds a stacktrace if there isn't one,
   * and optionally adds an extra message.
   * @param err the original thrown object or string.
   * @param opt_message optional additional message to add to the error.
   */
  function enhanceError (err : GlobalError | null | string , opt_message ? : string ) : GlobalError ;
  /**
   * Creates a string representing an object and all its properties.
   * @param obj Object to expose.
   * @param opt_showFn Show the functions as well as the properties, default is false.
   */
  function expose (obj : Object | null | undefined , opt_showFn ? : boolean ) : string ;
  /**
   * Recursively outputs a nested array as a string.
   * @param arr The array.
   */
  function exposeArray (arr : any [] | null ) : string ;
  /**
   * Exposes an exception that has been caught by a try...catch and outputs the
   * error as HTML with a stack trace.
   * @param err Error object or string.
   * @param opt_fn Optional function to start stack trace from.
   */
  function exposeException (err : Object | null , opt_fn ? : ( ( ...a : any [] ) => any ) | null ) : string ;
  /**
   * Exposes an exception that has been caught by a try...catch and outputs the
   * error with a stack trace.
   * @param err Error object or string.
   * @param opt_fn Optional function to start stack trace from.
   */
  function exposeExceptionAsHtml (err : Object | null , opt_fn ? : ( ( ...a : any [] ) => any ) | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
  /**
   * Gets a function name
   * @param fn Function to get name of.
   */
  function getFunctionName (fn : ( ( ...a : any [] ) => any ) | null ) : string ;
  /**
   * Gets the current stack trace, either starting from the caller or starting
   * from a specified function that's currently on the call stack.
   * @param opt_fn Optional function to start getting the trace from. If not provided, defaults to the function that called this.
   */
  function getStacktrace (opt_fn ? : ( ( ...a : any [] ) => any ) | null ) : string ;
  /**
   * Gets the current stack trace. Simple and iterative - doesn't worry about
   * catching circular references or getting the args.
   * @param opt_depth Optional maximum depth to trace back to.
   */
  function getStacktraceSimple (opt_depth ? : number ) : string ;
  /**
   * Makes whitespace visible by replacing it with printable characters.
   * This is useful in finding diffrences between the expected and the actual
   * output strings of a testcase.
   * @param string whose whitespace needs to be made visible.
   */
  function makeWhitespaceVisible (string : string ) : string ;
  /**
   * Normalizes the error/exception object between browsers.
   * @param err Raw error object.
   */
  function normalizeErrorObject (err : Object | null ) : { fileName ? : any , lineNumber ? : any , message ? : any , name ? : any , stack ? : any } ;
  /**
   * Returns the type of a value. If a constructor is passed, and a suitable
   * string cannot be found, 'unknown type name' will be returned.
   *
   * <p>Forked rather than moved from {@link goog.asserts.getType_}
   * to avoid adding a dependency to goog.asserts.
   * @param value A constructor, object, or primitive.
   */
  function runtimeType (value : any ) : string ;
  /**
   * Set a custom function name resolver.
   * @param resolver Resolves functions to their names.
   */
  function setFunctionResolver (resolver : (a : ( ( ...a : any [] ) => any ) | null ) => string ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug'): typeof ಠ_ಠ.clutz.goog.debug;
}
declare module 'goog:goog.debug' {
  import alias = ಠ_ಠ.clutz.goog.debug;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Create and install a log handler that logs to window.console if available
   */
  class Console extends Console_Instance {
    /**
     * Install the console and start capturing if "Debug=true" is in the page URL
     */
    static autoInstall ( ) : void ;
    /**
     * Global console logger instance
     */
    static instance : ಠ_ಠ.clutz.goog.debug.Console | null ;
    /**
     * Sets the console to which to log.
     * @param console The console to which to log.
     */
    static setConsole (console : Object ) : void ;
    /**
     * Show an alert with all of the captured debug information.
     * Information is only captured if console is not available
     */
    static show ( ) : void ;
  }
  class Console_Instance {
    private noStructuralTyping_: any;
    isCapturing_ : boolean ;
    logBuffer_ : string ;
    publishHandler_ (a : ಠ_ಠ.clutz.goog.debug.LogRecord | null ) : void ;
    /**
     * Adds a logger name to be filtered.
     * @param loggerName the logger name to add.
     */
    addFilter (loggerName : string ) : void ;
    /**
     * Adds a log record.
     * @param logRecord The log entry.
     */
    addLogRecord (logRecord : ಠ_ಠ.clutz.goog.debug.LogRecord | null ) : void ;
    /**
     * Returns the text formatter used by this console
     */
    getFormatter ( ) : ಠ_ಠ.clutz.goog.debug.TextFormatter ;
    /**
     * Removes a logger name to be filtered.
     * @param loggerName the logger name to remove.
     */
    removeFilter (loggerName : string ) : void ;
    /**
     * Sets whether we are currently capturing logger output.
     * @param capturing Whether to capture logger output.
     */
    setCapturing (capturing : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.Console'): typeof ಠ_ಠ.clutz.goog.debug.Console;
}
declare module 'goog:goog.debug.Console' {
  import alias = ಠ_ಠ.clutz.goog.debug.Console;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Provides a debug DebugWindow that is bound to the goog.debug.Logger.
   * It handles log messages and writes them to the DebugWindow. This doesn't
   * provide a lot of functionality that the old Gmail logging infrastructure
   * provided like saving debug logs for exporting to the server. Now that we
   * have an event-based logging infrastructure, we can encapsulate that
   * functionality in a separate class.
   */
  class DebugWindow extends DebugWindow_Instance {
    /**
     * How long to keep the cookies for in milliseconds
     */
    static COOKIE_TIME : number ;
    /**
     * Max number of messages to be saved
     */
    static MAX_SAVED : number ;
    static isEnabled (identifier : string ) : boolean ;
  }
  class DebugWindow_Instance {
    private noStructuralTyping_: any;
    /**
     * Provides a debug DebugWindow that is bound to the goog.debug.Logger.
     * It handles log messages and writes them to the DebugWindow. This doesn't
     * provide a lot of functionality that the old Gmail logging infrastructure
     * provided like saving debug logs for exporting to the server. Now that we
     * have an event-based logging infrastructure, we can encapsulate that
     * functionality in a separate class.
     * @param opt_identifier Identifier for this logging class.
     * @param opt_prefix Prefix prepended to messages.
     */
    constructor (opt_identifier ? : string , opt_prefix ? : string ) ;
    /**
     * Identifier for this logging class
     */
    identifier : string ;
    /**
     * Array used to buffer log output
     */
    outputBuffer : ಠ_ಠ.clutz.goog.html.SafeHtml [] ;
    /**
     * Adds a logger name to be filtered.
     * @param loggerName the logger name to add.
     */
    addFilter (loggerName : string ) : void ;
    /**
     * Adds a log record.
     * @param logRecord the LogRecord.
     */
    addLogRecord (logRecord : ಠ_ಠ.clutz.goog.debug.LogRecord | null ) : void ;
    /**
     * Adds a separator to the debug window.
     */
    addSeparator ( ) : void ;
    /**
     * Clears the contents of the debug window
     */
    clear ( ) : void ;
    /**
     * Gets the formatter for outputting to the debug window. The default formatter
     * is an instance of goog.debug.HtmlFormatter
     */
    getFormatter ( ) : ಠ_ಠ.clutz.goog.debug.Formatter | null ;
    getStyleRules ( ) : ಠ_ಠ.clutz.goog.html.SafeStyleSheet ;
    hasActiveWindow ( ) : boolean ;
    /**
     * Initializes the debug window.
     */
    init ( ) : void ;
    /**
     * Whether we are currently capturing logger output.
     */
    isCapturing ( ) : boolean ;
    /**
     * Whether the DebugWindow is enabled. When the DebugWindow is enabled, it
     * tries to keep its window open and logs all messages to the window.  When the
     * DebugWindow is disabled, it stops logging messages to its window.
     */
    isEnabled ( ) : boolean ;
    /**
     * Timestamp for the last time the log was written to.
     */
    lastCall : number ;
    /**
     * Removes a logger name to be filtered.
     * @param loggerName the logger name to remove.
     */
    removeFilter (loggerName : string ) : void ;
    /**
     * Modify the size of the circular buffer. Allows the log to retain more
     * information while the window is closed.
     * @param size New size of the circular buffer.
     */
    resetBufferWithNewSize (size : number ) : void ;
    /**
     * Sets whether we are currently capturing logger output.
     * @param capturing Whether to capture logger output.
     */
    setCapturing (capturing : boolean ) : void ;
    /**
     * Sets whether the DebugWindow is enabled. When the DebugWindow is enabled, it
     * tries to keep its window open and log all messages to the window. When the
     * DebugWindow is disabled, it stops logging messages to its window. The
     * DebugWindow also saves this state to a cookie so that it's persisted across
     * application refreshes.
     * @param enable Whether the DebugWindow is enabled.
     */
    setEnabled (enable : boolean ) : void ;
    /**
     * Sets whether the debug window should be force enabled when a severe log is
     * encountered.
     * @param enableOnSevere Whether to enable on severe logs..
     */
    setForceEnableOnSevere (enableOnSevere : boolean ) : void ;
    /**
     * Sets the formatter for outputting to the debug window.
     * @param formatter The formatter to use.
     */
    setFormatter (formatter : ಠ_ಠ.clutz.goog.debug.Formatter | null ) : void ;
    /**
     * Sets the welcome message shown when the window is first opened or reset.
     * @param msg An HTML string.
     */
    setWelcomeMessage (msg : string ) : void ;
    /**
     * HTML string printed when the debug window opens
     */
    welcomeMessage : string ;
    /**
     * Reference to debug window
     */
    win : Window | null ;
    /**
     * Write to the log and maybe scroll into view.
     */
    writeBufferToLog ( ) : void ;
    /**
     * Writes the initial HTML of the debug window.
     */
    writeInitialDocument ( ) : void ;
    /**
     * Writes all saved messages to the DebugWindow.
     */
    writeSavedMessages ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.DebugWindow'): typeof ಠ_ಠ.clutz.goog.debug.DebugWindow;
}
declare module 'goog:goog.debug.DebugWindow' {
  import alias = ಠ_ಠ.clutz.goog.debug.DebugWindow;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * A class for solving development CSS issues/emulating the CSS Compiler.
   */
  class DevCss extends DevCss_Instance {
  }
  class DevCss_Instance {
    private noStructuralTyping_: any;
    /**
     * A class for solving development CSS issues/emulating the CSS Compiler.
     * @param opt_userAgent The user agent, if not passed in, will be determined using goog.userAgent.
     * @param opt_userAgentVersion The user agent's version. If not passed in, will be determined using goog.userAgent.
     */
    constructor (opt_userAgent ? : ಠ_ಠ.clutz.goog.debug.DevCss.UserAgent , opt_userAgentVersion ? : number | string ) ;
    /**
     * Rewrites the CSSOM as needed to activate any useragent-specific selectors.
     * @param opt_enableIe6ReadyHandler If true(the default), and the userAgent is ie6, we set a document "ready" event handler to walk the DOM and make combined selector className changes. Having this parameter also aids unit testing.
     */
    activateBrowserSpecificCssRules (opt_enableIe6ReadyHandler ? : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.DevCss'): typeof ಠ_ಠ.clutz.goog.debug.DevCss;
}
declare module 'goog:goog.debug.DevCss' {
  import alias = ಠ_ಠ.clutz.goog.debug.DevCss;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.DevCss {
  /**
   * A list of possible user agent strings.
   */
  type UserAgent = string ;
  var UserAgent : {
    EDGE : UserAgent ,
    FIREFOX : UserAgent ,
    GECKO : UserAgent ,
    IE : UserAgent ,
    MOBILE : UserAgent ,
    OPERA : UserAgent ,
    SAFARI : UserAgent ,
    WEBKIT : UserAgent ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.DevCss.UserAgent'): typeof ಠ_ಠ.clutz.goog.debug.DevCss.UserAgent;
}
declare module 'goog:goog.debug.DevCss.UserAgent' {
  import alias = ಠ_ಠ.clutz.goog.debug.DevCss.UserAgent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * A class for visualising logger calls in a div element.
   */
  class DivConsole extends DivConsole_Instance {
  }
  class DivConsole_Instance {
    private noStructuralTyping_: any;
    /**
     * A class for visualising logger calls in a div element.
     * @param element The element to append to.
     */
    constructor (element : Element | null ) ;
    elementOwnerDocument_ : Document | null ;
    element_ : Element | null ;
    formatter_ : ಠ_ಠ.clutz.goog.debug.HtmlFormatter | null ;
    isCapturing_ : boolean ;
    publishHandler_ (a : ಠ_ಠ.clutz.goog.debug.LogRecord | null ) : void ;
    /**
     * Adds a log record.
     * @param logRecord The log entry.
     */
    addLogRecord (logRecord : ಠ_ಠ.clutz.goog.debug.LogRecord | null ) : void ;
    /**
     * Adds a separator to the debug window.
     */
    addSeparator ( ) : void ;
    /**
     * Clears the console.
     */
    clear ( ) : void ;
    /**
     * Gets the formatter for outputting to the console. The default formatter
     * is an instance of goog.debug.HtmlFormatter
     */
    getFormatter ( ) : ಠ_ಠ.clutz.goog.debug.Formatter ;
    /**
     * Installs styles for the log messages and its div
     */
    installStyles ( ) : void ;
    /**
     * Sets whether we are currently capturing logger output.
     * @param capturing Whether to capture logger output.
     */
    setCapturing (capturing : boolean ) : void ;
    /**
     * Sets the formatter for outputting to the console.
     * @param formatter The formatter to use.
     */
    setFormatter (formatter : ಠ_ಠ.clutz.goog.debug.HtmlFormatter | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.DivConsole'): typeof ಠ_ಠ.clutz.goog.debug.DivConsole;
}
declare module 'goog:goog.debug.DivConsole' {
  import alias = ಠ_ಠ.clutz.goog.debug.DivConsole;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  interface EntryPointMonitor {
    /**
     * Try to remove an instrumentation wrapper created by this monitor.
     * If the function passed to unwrap is not a wrapper created by this
     * monitor, then we will do nothing.
     *
     * Notice that some wrappers may not be unwrappable. For example, if other
     * monitors have applied their own wrappers, then it will be impossible to
     * unwrap them because their wrappers will have captured our wrapper.
     *
     * So it is important that entry points are unwrapped in the reverse
     * order that they were wrapped.
     * @param fn A function to unwrap.
     */
    unwrap (a : ( ...a : any [] ) => any ) : ( ...a : any [] ) => any ;
    /**
     * Instruments a function.
     * @param fn A function to instrument.
     */
    wrap (a : ( ...a : any [] ) => any ) : ( ...a : any [] ) => any ;
  }
}
declare module 'goog:goog.debug.EntryPointMonitor' {
  import alias = ಠ_ಠ.clutz.goog.debug.EntryPointMonitor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Base class for custom error objects.
   */
  class Error extends Error_Instance {
  }
  class Error_Instance extends GlobalError {
    /**
     * Base class for custom error objects.
     * @param opt_msg The message associated with the error.
     */
    constructor (opt_msg ? : any ) ;
    message : string ;
    /**
     * Whether to report this error to the server. Setting this to false will
     * cause the error reporter to not report the error back to the server,
     * which can be useful if the client knows that the error has already been
     * logged on the server.
     */
    reportErrorToServer : boolean ;
    stack : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.Error'): typeof ಠ_ಠ.clutz.goog.debug.Error;
}
declare module 'goog:goog.debug.Error' {
  import alias = ಠ_ಠ.clutz.goog.debug.Error;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * The ErrorHandler can be used to to wrap functions with a try/catch
   * statement. If an exception is thrown, the given error handler function will
   * be called.
   *
   * When this object is disposed, it will stop handling exceptions and tracing.
   * It will also try to restore window.setTimeout and window.setInterval
   * if it wrapped them. Notice that in the general case, it is not technically
   * possible to remove the wrapper, because functions have no knowledge of
   * what they have been assigned to. So the app is responsible for other
   * forms of unwrapping.
   */
  class ErrorHandler extends ErrorHandler_Instance {
  }
  class ErrorHandler_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance implements ಠ_ಠ.clutz.goog.debug.EntryPointMonitor {
    /**
     * The ErrorHandler can be used to to wrap functions with a try/catch
     * statement. If an exception is thrown, the given error handler function will
     * be called.
     *
     * When this object is disposed, it will stop handling exceptions and tracing.
     * It will also try to restore window.setTimeout and window.setInterval
     * if it wrapped them. Notice that in the general case, it is not technically
     * possible to remove the wrapper, because functions have no knowledge of
     * what they have been assigned to. So the app is responsible for other
     * forms of unwrapping.
     * @param handler Handler for exceptions.
     */
    constructor (handler : ( ( ...a : any [] ) => any ) | null ) ;
    disposeInternal ( ) : void ;
    /**
     * Helps {@link #protectEntryPoint} by actually creating the protected
     * wrapper function, after {@link #protectEntryPoint} determines that one does
     * not already exist for the given function.  Can be overriden by subclasses
     * that may want to implement different error handling, or add additional
     * entry point hooks.
     * @param fn An entry point function to be protected.
     */
    getProtectedFunction (fn : ( ...a : any [] ) => any ) : ( ...a : any [] ) => any ;
    /**
     * Installs exception protection for an entry point function. When an exception
     * is thrown from a protected function, a handler will be invoked to handle it.
     * @param fn An entry point function to be protected.
     */
    protectEntryPoint (fn : ( ( ...a : any [] ) => any ) | null ) : ( ...a : any [] ) => any ;
    /**
     * Install exception protection for window.requestAnimationFrame to handle
     * exceptions.
     */
    protectWindowRequestAnimationFrame ( ) : void ;
    /**
     * Install exception protection for window.setInterval to handle exceptions.
     */
    protectWindowSetInterval ( ) : void ;
    /**
     * Installs exception protection for window.setTimeout to handle exceptions.
     */
    protectWindowSetTimeout ( ) : void ;
    /**
     * Enable tracers when instrumenting entry points.
     * @param newVal See above.
     */
    setAddTracersToProtectedFunctions (newVal : boolean ) : void ;
    /**
     * Set whether to add a prefix to all error messages that occur in protected
     * functions.
     * @param prefixErrorMessages Whether to add a prefix to error messages.
     */
    setPrefixErrorMessages (prefixErrorMessages : boolean ) : void ;
    /**
     * Set whether to wrap errors that occur in protected functions in a
     * goog.debug.ErrorHandler.ProtectedFunctionError.
     * @param wrapErrors Whether to wrap errors.
     */
    setWrapErrors (wrapErrors : boolean ) : void ;
    unwrap (fn : ( ...a : any [] ) => any ) : ( ...a : any [] ) => any ;
    wrap (fn : ( ...a : any [] ) => any ) : ( ...a : any [] ) => any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.ErrorHandler'): typeof ಠ_ಠ.clutz.goog.debug.ErrorHandler;
}
declare module 'goog:goog.debug.ErrorHandler' {
  import alias = ಠ_ಠ.clutz.goog.debug.ErrorHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.ErrorHandler {
  /**
   * Error thrown to the caller of a protected entry point if the entry point
   * throws an error.
   */
  class ProtectedFunctionError extends ProtectedFunctionError_Instance {
    /**
     * Text to prefix the message with.
     */
    static MESSAGE_PREFIX : string ;
  }
  class ProtectedFunctionError_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
    /**
     * Error thrown to the caller of a protected entry point if the entry point
     * throws an error.
     * @param cause The error thrown by the entry point.
     */
    constructor (cause : any ) ;
    /**
     * The error thrown by the entry point.
     */
    cause : any ;
    stack : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.ErrorHandler.ProtectedFunctionError'): typeof ಠ_ಠ.clutz.goog.debug.ErrorHandler.ProtectedFunctionError;
}
declare module 'goog:goog.debug.ErrorHandler.ProtectedFunctionError' {
  import alias = ಠ_ಠ.clutz.goog.debug.ErrorHandler.ProtectedFunctionError;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Constructs an error reporter. Internal Use Only. To install an error
   * reporter see the {@see #install} method below.
   */
  class ErrorReporter extends ErrorReporter_Instance {
    static ALLOW_AUTO_PROTECT : boolean ;
    /**
     * Default implementation of XHR sender interface.
     * @param uri URI to make request to.
     * @param method Send method.
     * @param content Post data.
     * @param opt_headers Map of headers to add to the request.
     */
    static defaultXhrSender (uri : string , method : string , content : string , opt_headers ? : Object | null ) : void ;
    /**
     * Installs an error reporter to catch all JavaScript errors raised.
     * @param loggingUrl The URL to which the errors caught will be reported.
     * @param opt_contextProvider When a report is to be sent to the server, this method will be called, and given an opportunity to modify the context object before submission to the server.
     * @param opt_noAutoProtect Whether to automatically add handlers for onerror and to protect entry points.  If apps have other error reporting facilities, it may make sense for them to set these up themselves and use the ErrorReporter just for transmission of reports.
     */
    static install (loggingUrl : string , opt_contextProvider ? : (a : GlobalError , b : { [ key: string ]: string } ) => any , opt_noAutoProtect ? : boolean ) : ಠ_ಠ.clutz.goog.debug.ErrorReporter ;
  }
  class ErrorReporter_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Constructs an error reporter. Internal Use Only. To install an error
     * reporter see the {@see #install} method below.
     * @param handlerUrl The URL to which all errors will be reported.
     * @param opt_contextProvider When a report is to be sent to the server, this method will be called, and given an opportunity to modify the context object before submission to the server.
     * @param opt_noAutoProtect Whether to automatically add handlers for onerror and to protect entry points.  If apps have other error reporting facilities, it may make sense for them to set these up themselves and use the ErrorReporter just for transmission of reports.
     */
    constructor (handlerUrl : string , opt_contextProvider ? : (a : GlobalError , b : { [ key: string ]: string } ) => any , opt_noAutoProtect ? : boolean ) ;
    disposeInternal ( ) : void ;
    /**
     * Handler for caught exceptions. Sends report to the LoggingServlet and
     * notifies any listeners.
     * @param e The exception.
     * @param opt_context Context values to optionally include in the error report.
     */
    handleException (e : Object | null , opt_context ? : { [ key: string ]: string } ) : void ;
    /**
     * Installs exception protection for an entry point function in addition
     * to those that are protected by default.
     * Has no effect in IE because window.onerror is used for reporting
     * exceptions in that case.
     * @param fn An entry point function to be protected.
     */
    protectAdditionalEntryPoint (a : ( ( ...a : any [] ) => any ) | null ) : ( ( ...a : any [] ) => any ) | null ;
    /**
     * Sends an error report to the logging URL.  This will not consult the context
     * provider, the report will be sent exactly as specified.
     * @param message Error description.
     * @param fileName URL of the JavaScript file with the error.
     * @param line Line number of the error.
     * @param opt_trace Call stack trace of the error.
     * @param opt_context Context information to include in the request.
     */
    sendErrorReport (message : string , fileName : string , line : number , opt_trace ? : string , opt_context ? : { [ key: string ]: string } ) : void ;
    setAdditionalArguments (urlArgs : { [ key: string ]: string } ) : void ;
    setContextPrefix (prefix : string ) : void ;
    /**
     * Add headers to the logging url.
     * @param loggingHeaders Extra headers to send to the logging URL.
     */
    setLoggingHeaders (loggingHeaders : Object | null ) : void ;
    setTruncationLimit (limit : number | null ) : void ;
    /**
     * Set the function used to send error reports to the server.
     * @param xhrSender If provided, this will be used to send a report to the server instead of the default method. The function will be given the URI, HTTP method request content, and (optionally) request headers to be added.
     */
    setXhrSender (xhrSender : (a : string , b : string , c : string , d ? : Object | null ) => any ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.ErrorReporter'): typeof ಠ_ಠ.clutz.goog.debug.ErrorReporter;
}
declare module 'goog:goog.debug.ErrorReporter' {
  import alias = ಠ_ಠ.clutz.goog.debug.ErrorReporter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.ErrorReporter {
  /**
   * Event broadcast when an exception is logged.
   */
  class ExceptionEvent extends ExceptionEvent_Instance {
    /**
     * Event type for notifying of a logged exception.
     */
    static TYPE : string ;
  }
  class ExceptionEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * Event broadcast when an exception is logged.
     * @param error The exception that was was reported.
     * @param context The context values sent to the server alongside this error.
     */
    constructor (error : GlobalError | null , context : { [ key: string ]: string } ) ;
    /**
     * Context values sent to the server alongside this report.
     */
    context : { [ key: string ]: string } ;
    /**
     * The error that was reported.
     */
    error : GlobalError | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.ErrorReporter.ExceptionEvent'): typeof ಠ_ಠ.clutz.goog.debug.ErrorReporter.ExceptionEvent;
}
declare module 'goog:goog.debug.ErrorReporter.ExceptionEvent' {
  import alias = ಠ_ಠ.clutz.goog.debug.ErrorReporter.ExceptionEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Provides a Fancy extension to the DebugWindow class.  Allows filtering based
   * on loggers and levels.
   */
  class FancyWindow extends FancyWindow_Instance {
    /**
     * Constant indicating if we are able to use localStorage to persist filters
     */
    static HAS_LOCAL_STORE : boolean ;
    /**
     * Constant defining the prefix to use when storing log levels
     */
    static LOCAL_STORE_PREFIX : string ;
  }
  class FancyWindow_Instance extends ಠ_ಠ.clutz.goog.debug.DebugWindow_Instance {
    /**
     * Provides a Fancy extension to the DebugWindow class.  Allows filtering based
     * on loggers and levels.
     * @param opt_identifier Idenitifier for this logging class.
     * @param opt_prefix Prefix pre-pended to messages.
     */
    constructor (opt_identifier ? : string , opt_prefix ? : string ) ;
    lastCall : number ;
    getStyleRules ( ) : ಠ_ಠ.clutz.goog.html.SafeStyleSheet ;
    writeBufferToLog ( ) : void ;
    writeInitialDocument ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.FancyWindow'): typeof ಠ_ಠ.clutz.goog.debug.FancyWindow;
}
declare module 'goog:goog.debug.FancyWindow' {
  import alias = ಠ_ಠ.clutz.goog.debug.FancyWindow;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Base class for Formatters. A Formatter is used to format a LogRecord into
   * something that can be displayed to the user.
   */
  class Formatter extends Formatter_Instance {
  }
  class Formatter_Instance {
    private noStructuralTyping_: any;
    /**
     * Base class for Formatters. A Formatter is used to format a LogRecord into
     * something that can be displayed to the user.
     * @param opt_prefix The prefix to place before text records.
     */
    constructor (opt_prefix ? : string ) ;
    prefix_ : string ;
    /**
     * Whether to append newlines to the end of formatted log records.
     */
    appendNewline : boolean ;
    /**
     * Formats a record.
     * @param logRecord the logRecord to format.
     */
    formatRecord (a : ಠ_ಠ.clutz.goog.debug.LogRecord | null ) : string ;
    /**
     * Formats a record as SafeHtml.
     * @param logRecord the logRecord to format.
     */
    formatRecordAsHtml (a : ಠ_ಠ.clutz.goog.debug.LogRecord | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Returns the start time provider. By default, this is the default instance
     * but can be changed.
     */
    getStartTimeProvider ( ) : ಠ_ಠ.clutz.goog.debug.RelativeTimeProvider | null ;
    /**
     * Resets the start relative time.
     */
    resetRelativeTimeStart ( ) : void ;
    /**
     * Sets the start time provider. By default, this is the default instance
     * but can be changed.
     * @param provider The provider to use.
     */
    setStartTimeProvider (provider : ಠ_ಠ.clutz.goog.debug.RelativeTimeProvider | null ) : void ;
    /**
     * Whether to show absolute time in the DebugWindow.
     */
    showAbsoluteTime : boolean ;
    /**
     * Whether to show the logger exception text.
     */
    showExceptionText : boolean ;
    /**
     * Whether to show the logger name in the DebugWindow.
     */
    showLoggerName : boolean ;
    /**
     * Whether to show relative time in the DebugWindow.
     */
    showRelativeTime : boolean ;
    /**
     * Whether to show the severity level.
     */
    showSeverityLevel : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.Formatter'): typeof ಠ_ಠ.clutz.goog.debug.Formatter;
}
declare module 'goog:goog.debug.Formatter' {
  import alias = ಠ_ಠ.clutz.goog.debug.Formatter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Displays frames per seconds that the window this component is
   * rendered in is animating at.
   */
  class FpsDisplay extends FpsDisplay_Instance {
    /**
     * CSS class for the FPS display.
     */
    static CSS : string ;
    /**
     * The number of samples per FPS report.
     */
    static SAMPLES : number ;
  }
  class FpsDisplay_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
    /**
     * Displays frames per seconds that the window this component is
     * rendered in is animating at.
     * @param opt_domHelper An optional dom helper.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    createDom ( ) : void ;
    enterDocument ( ) : void ;
    exitDocument ( ) : void ;
    getFps ( ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.FpsDisplay'): typeof ಠ_ಠ.clutz.goog.debug.FpsDisplay;
}
declare module 'goog:goog.debug.FpsDisplay' {
  import alias = ಠ_ಠ.clutz.goog.debug.FpsDisplay;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Formatter that returns formatted html. See formatRecord for the classes
   * it uses for various types of formatted output.
   */
  class HtmlFormatter extends HtmlFormatter_Instance {
  }
  class HtmlFormatter_Instance extends ಠ_ಠ.clutz.goog.debug.Formatter_Instance {
    /**
     * Formatter that returns formatted html. See formatRecord for the classes
     * it uses for various types of formatted output.
     * @param opt_prefix The prefix to place before text records.
     */
    constructor (opt_prefix ? : string ) ;
    showAbsoluteTime : boolean ;
    /**
     * Formats a record
     * @param logRecord the logRecord to format.
     */
    formatRecord (logRecord : ಠ_ಠ.clutz.goog.debug.LogRecord | null ) : string ;
    /**
     * Formats a record.
     * @param logRecord the logRecord to format.
     */
    formatRecordAsHtml (logRecord : ಠ_ಠ.clutz.goog.debug.LogRecord | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Whether to show the logger exception text
     */
    showExceptionText : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.HtmlFormatter'): typeof ಠ_ಠ.clutz.goog.debug.HtmlFormatter;
}
declare module 'goog:goog.debug.HtmlFormatter' {
  import alias = ಠ_ಠ.clutz.goog.debug.HtmlFormatter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Creates the log buffer.
   */
  class LogBuffer extends LogBuffer_Instance {
    static CAPACITY : number ;
    /**
     * A static method that always returns the same instance of LogBuffer.
     */
    static getInstance ( ) : ಠ_ಠ.clutz.goog.debug.LogBuffer ;
    static instance_ : ಠ_ಠ.clutz.goog.debug.LogBuffer ;
    static isBufferingEnabled ( ) : boolean ;
  }
  class LogBuffer_Instance {
    private noStructuralTyping_: any;
    /**
     * Adds a log record to the buffer, possibly overwriting the oldest record.
     * @param level One of the level identifiers.
     * @param msg The string message.
     * @param loggerName The name of the source logger.
     */
    addRecord (level : ಠ_ಠ.clutz.goog.debug.Logger.Level | null , msg : string , loggerName : string ) : ಠ_ಠ.clutz.goog.debug.LogRecord ;
    /**
     * Removes all buffered log records.
     */
    clear ( ) : void ;
    /**
     * Calls the given function for each buffered log record, starting with the
     * oldest one.
     * @param func The function to call.
     */
    forEachRecord (func : (a : ಠ_ಠ.clutz.goog.debug.LogRecord ) => any ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.LogBuffer'): typeof ಠ_ಠ.clutz.goog.debug.LogBuffer;
}
declare module 'goog:goog.debug.LogBuffer' {
  import alias = ಠ_ಠ.clutz.goog.debug.LogBuffer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.LogManager {
  /**
   * Creates a function that can be passed to goog.debug.catchErrors. The function
   * will log all reported errors using the given logger.
   * @param opt_logger The logger to log the errors to. Defaults to the root logger.
   */
  function createFunctionForCatchErrors (opt_logger ? : ಠ_ಠ.clutz.goog.debug.Logger | null ) : (a : Object | null ) => any ;
  /**
   * Finds a named logger.
   * @param name A name for the logger. This should be a dot-separated name and should normally be based on the package name or class name of the subsystem, such as goog.net.BrowserChannel.
   */
  function getLogger (name : string ) : ಠ_ಠ.clutz.goog.debug.Logger ;
  /**
   * Returns all the loggers.
   */
  function getLoggers ( ) : { [ key: string ]: ಠ_ಠ.clutz.goog.debug.Logger } ;
  /**
   * Returns the root of the logger tree namespace, the logger with the empty
   * string as its name.
   */
  function getRoot ( ) : ಠ_ಠ.clutz.goog.debug.Logger ;
  /**
   * Initializes the LogManager if not already initialized.
   */
  function initialize ( ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.LogManager'): typeof ಠ_ಠ.clutz.goog.debug.LogManager;
}
declare module 'goog:goog.debug.LogManager' {
  import alias = ಠ_ಠ.clutz.goog.debug.LogManager;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * LogRecord objects are used to pass logging requests between
   * the logging framework and individual log Handlers.
   */
  class LogRecord extends LogRecord_Instance {
    static ENABLE_SEQUENCE_NUMBERS : boolean ;
  }
  class LogRecord_Instance {
    private noStructuralTyping_: any;
    /**
     * LogRecord objects are used to pass logging requests between
     * the logging framework and individual log Handlers.
     * @param level One of the level identifiers.
     * @param msg The string message.
     * @param loggerName The name of the source logger.
     * @param opt_time Time this log record was created if other than now. If 0, we use #goog.now.
     * @param opt_sequenceNumber Sequence number of this log record. This should only be passed in when restoring a log record from persistence.
     */
    constructor (level : ಠ_ಠ.clutz.goog.debug.Logger.Level | null , msg : string , loggerName : string , opt_time ? : number , opt_sequenceNumber ? : number ) ;
    /**
     * Get the exception that is part of the log record.
     */
    getException ( ) : Object | null ;
    /**
     * Get the logging message level, for example Level.SEVERE.
     */
    getLevel ( ) : ಠ_ಠ.clutz.goog.debug.Logger.Level | null ;
    /**
     * Get the source Logger's name.
     */
    getLoggerName ( ) : string ;
    /**
     * Get the "raw" log message, before localization or formatting.
     */
    getMessage ( ) : string ;
    /**
     * Get event time in milliseconds since 1970.
     */
    getMillis ( ) : number ;
    /**
     * Get the sequence number.
     * <p>
     * Sequence numbers are normally assigned in the LogRecord
     * constructor, which assigns unique sequence numbers to
     * each new LogRecord in increasing order.
     */
    getSequenceNumber ( ) : number ;
    /**
     * Sets all fields of the log record.
     * @param level One of the level identifiers.
     * @param msg The string message.
     * @param loggerName The name of the source logger.
     * @param opt_time Time this log record was created if other than now. If 0, we use #goog.now.
     * @param opt_sequenceNumber Sequence number of this log record. This should only be passed in when restoring a log record from persistence.
     */
    reset (level : ಠ_ಠ.clutz.goog.debug.Logger.Level | null , msg : string , loggerName : string , opt_time ? : number , opt_sequenceNumber ? : number ) : void ;
    /**
     * Set the exception that is part of the log record.
     * @param exception the exception.
     */
    setException (exception : Object | null ) : void ;
    /**
     * Set the logging message level, for example Level.SEVERE.
     * @param level the logging message level.
     */
    setLevel (level : ಠ_ಠ.clutz.goog.debug.Logger.Level | null ) : void ;
    /**
     * Get the source Logger's name.
     * @param loggerName source logger name (may be null).
     */
    setLoggerName (loggerName : string ) : void ;
    /**
     * Set the "raw" log message, before localization or formatting.
     * @param msg the raw message string.
     */
    setMessage (msg : string ) : void ;
    /**
     * Set event time in milliseconds since 1970.
     * @param time event time in millis since 1970.
     */
    setMillis (time : number ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.LogRecord'): typeof ಠ_ಠ.clutz.goog.debug.LogRecord;
}
declare module 'goog:goog.debug.LogRecord' {
  import alias = ಠ_ಠ.clutz.goog.debug.LogRecord;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * A message value that can be handled by a Logger.
   *
   * Functions are treated like callbacks, but are only called when the event's
   * log level is enabled. This is useful for logging messages that are expensive
   * to construct.
   */
  type Loggable = string | ( ( ) => string ) ;
}
declare module 'goog:goog.debug.Loggable' {
  import alias = ಠ_ಠ.clutz.goog.debug.Loggable;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * The Logger is an object used for logging debug messages. Loggers are
   * normally named, using a hierarchical dot-separated namespace. Logger names
   * can be arbitrary strings, but they should normally be based on the package
   * name or class name of the logged component, such as goog.net.BrowserChannel.
   *
   * The Logger object is loosely based on the java class
   * java.util.logging.Logger. It supports different levels of filtering for
   * different loggers.
   *
   * The logger object should never be instantiated by application code. It
   * should always use the goog.debug.Logger.getLogger function.
   */
  class Logger extends Logger_Instance {
    static ENABLE_HIERARCHY : boolean ;
    static ROOT_LOGGER_NAME : string ;
    /**
     * Finds or creates a logger for a named subsystem. If a logger has already been
     * created with the given name it is returned. Otherwise a new logger is
     * created. If a new logger is created its log level will be configured based
     * on the LogManager configuration and it will configured to also send logging
     * output to its parent's handlers. It will be registered in the LogManager
     * global namespace.
     * @param name A name for the logger. This should be a dot-separated name and should normally be based on the package name or class name of the subsystem, such as goog.net.BrowserChannel.
     */
    static getLogger (name : string ) : ಠ_ಠ.clutz.goog.debug.Logger ;
    /**
     * Logs a message to profiling tools, if available.
     * {@see https://developers.google.com/web-toolkit/speedtracer/logging-api}
     * {@see http://msdn.microsoft.com/en-us/library/dd433074(VS.85).aspx}
     * @param msg The message to log.
     */
    static logToProfilers (msg : string ) : void ;
  }
  class Logger_Instance {
    private noStructuralTyping_: any;
    /**
     * The Logger is an object used for logging debug messages. Loggers are
     * normally named, using a hierarchical dot-separated namespace. Logger names
     * can be arbitrary strings, but they should normally be based on the package
     * name or class name of the logged component, such as goog.net.BrowserChannel.
     *
     * The Logger object is loosely based on the java class
     * java.util.logging.Logger. It supports different levels of filtering for
     * different loggers.
     *
     * The logger object should never be instantiated by application code. It
     * should always use the goog.debug.Logger.getLogger function.
     * @param name The name of the Logger.
     */
    constructor (name : string ) ;
    /**
     * Adds a handler to the logger. This doesn't use the event system because
     * we want to be able to add logging to the event system.
     * @param handler Handler function to add.
     */
    addHandler (handler : ( ( ...a : any [] ) => any ) | null ) : void ;
    /**
     * Logs a message at the Logger.Level.CONFIG level.
     * If the logger is currently enabled for the given message level then the
     * given message is forwarded to all the registered output Handler objects.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    config (msg : string | ( ( ) => string ) , opt_exception ? : GlobalError | null ) : void ;
    /**
     * Logs a message at the Logger.Level.FINE level.
     * If the logger is currently enabled for the given message level then the
     * given message is forwarded to all the registered output Handler objects.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    fine (msg : string | ( ( ) => string ) , opt_exception ? : GlobalError | null ) : void ;
    /**
     * Logs a message at the Logger.Level.FINER level.
     * If the logger is currently enabled for the given message level then the
     * given message is forwarded to all the registered output Handler objects.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    finer (msg : string | ( ( ) => string ) , opt_exception ? : GlobalError | null ) : void ;
    /**
     * Logs a message at the Logger.Level.FINEST level.
     * If the logger is currently enabled for the given message level then the
     * given message is forwarded to all the registered output Handler objects.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    finest (msg : string | ( ( ) => string ) , opt_exception ? : GlobalError | null ) : void ;
    /**
     * Returns the children of this logger as a map of the child name to the logger.
     */
    getChildren ( ) : Object ;
    /**
     * Returns the effective level of the logger based on its ancestors' levels.
     */
    getEffectiveLevel ( ) : ಠ_ಠ.clutz.goog.debug.Logger.Level | null ;
    /**
     * Gets the log level specifying which message levels will be logged by this
     * logger. Message levels lower than this value will be discarded.
     * The level value Level.OFF can be used to turn off logging. If the level
     * is null, it means that this node should inherit its level from its nearest
     * ancestor with a specific (non-null) level value.
     */
    getLevel ( ) : ಠ_ಠ.clutz.goog.debug.Logger.Level | null ;
    /**
     * Creates a new log record and adds the exception (if present) to it.
     * @param level One of the level identifiers.
     * @param msg The string message.
     * @param opt_exception An exception associated with the message.
     */
    getLogRecord (level : ಠ_ಠ.clutz.goog.debug.Logger.Level | null , msg : string , opt_exception ? : null | Object ) : ಠ_ಠ.clutz.goog.debug.LogRecord ;
    /**
     * Gets the name of this logger.
     */
    getName ( ) : string ;
    /**
     * Returns the parent of this logger.
     */
    getParent ( ) : ಠ_ಠ.clutz.goog.debug.Logger | null ;
    /**
     * Logs a message at the Logger.Level.INFO level.
     * If the logger is currently enabled for the given message level then the
     * given message is forwarded to all the registered output Handler objects.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    info (msg : string | ( ( ) => string ) , opt_exception ? : GlobalError | null ) : void ;
    /**
     * Checks if a message of the given level would actually be logged by this
     * logger. This check is based on the Loggers effective level, which may be
     * inherited from its parent.
     * @param level The level to check.
     */
    isLoggable (level : ಠ_ಠ.clutz.goog.debug.Logger.Level | null ) : boolean ;
    /**
     * Logs a message. If the logger is currently enabled for the
     * given message level then the given message is forwarded to all the
     * registered output Handler objects.
     * @param level One of the level identifiers.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    log (level : ಠ_ಠ.clutz.goog.debug.Logger.Level | null , msg : string | ( ( ) => string ) , opt_exception ? : null | Object ) : void ;
    /**
     * Logs a LogRecord. If the logger is currently enabled for the
     * given message level then the given message is forwarded to all the
     * registered output Handler objects.
     * @param logRecord A log record to log.
     */
    logRecord (logRecord : ಠ_ಠ.clutz.goog.debug.LogRecord | null ) : void ;
    /**
     * Removes a handler from the logger. This doesn't use the event system because
     * we want to be able to add logging to the event system.
     * @param handler Handler function to remove.
     */
    removeHandler (handler : ( ( ...a : any [] ) => any ) | null ) : boolean ;
    /**
     * Set the log level specifying which message levels will be logged by this
     * logger. Message levels lower than this value will be discarded.
     * The level value Level.OFF can be used to turn off logging. If the new level
     * is null, it means that this node should inherit its level from its nearest
     * ancestor with a specific (non-null) level value.
     * @param level The new level.
     */
    setLevel (level : ಠ_ಠ.clutz.goog.debug.Logger.Level | null ) : void ;
    /**
     * Logs a message at the Logger.Level.SEVERE level.
     * If the logger is currently enabled for the given message level then the
     * given message is forwarded to all the registered output Handler objects.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    severe (msg : string | ( ( ) => string ) , opt_exception ? : GlobalError | null ) : void ;
    /**
     * Logs a message at the Logger.Level.SHOUT level.
     * If the logger is currently enabled for the given message level then the
     * given message is forwarded to all the registered output Handler objects.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    shout (msg : string | ( ( ) => string ) , opt_exception ? : GlobalError | null ) : void ;
    /**
     * Logs a message at the Logger.Level.WARNING level.
     * If the logger is currently enabled for the given message level then the
     * given message is forwarded to all the registered output Handler objects.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    warning (msg : string | ( ( ) => string ) , opt_exception ? : GlobalError | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.Logger'): typeof ಠ_ಠ.clutz.goog.debug.Logger;
}
declare module 'goog:goog.debug.Logger' {
  import alias = ಠ_ಠ.clutz.goog.debug.Logger;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.Logger {
  /**
   * The Level class defines a set of standard logging levels that
   * can be used to control logging output.  The logging Level objects
   * are ordered and are specified by ordered integers.  Enabling logging
   * at a given level also enables logging at all higher levels.
   * <p>
   * Clients should normally use the predefined Level constants such
   * as Level.SEVERE.
   * <p>
   * The levels in descending order are:
   * <ul>
   * <li>SEVERE (highest value)
   * <li>WARNING
   * <li>INFO
   * <li>CONFIG
   * <li>FINE
   * <li>FINER
   * <li>FINEST  (lowest value)
   * </ul>
   * In addition there is a level OFF that can be used to turn
   * off logging, and a level ALL that can be used to enable
   * logging of all messages.
   */
  class Level extends Level_Instance {
    /**
     * ALL indicates that all messages should be logged.
     * This level is initialized to <CODE>0</CODE>.
     */
    static ALL : ಠ_ಠ.clutz.goog.debug.Logger.Level ;
    /**
     * CONFIG is a message level for static configuration messages.
     * This level is initialized to <CODE>700</CODE>.
     */
    static CONFIG : ಠ_ಠ.clutz.goog.debug.Logger.Level ;
    /**
     * FINE is a message level providing tracing information.
     * This level is initialized to <CODE>500</CODE>.
     */
    static FINE : ಠ_ಠ.clutz.goog.debug.Logger.Level ;
    /**
     * FINER indicates a fairly detailed tracing message.
     * This level is initialized to <CODE>400</CODE>.
     */
    static FINER : ಠ_ಠ.clutz.goog.debug.Logger.Level ;
    /**
     * FINEST indicates a highly detailed tracing message.
     * This level is initialized to <CODE>300</CODE>.
     */
    static FINEST : ಠ_ಠ.clutz.goog.debug.Logger.Level ;
    /**
     * INFO is a message level for informational messages.
     * This level is initialized to <CODE>800</CODE>.
     */
    static INFO : ಠ_ಠ.clutz.goog.debug.Logger.Level ;
    /**
     * OFF is a special level that can be used to turn off logging.
     * This level is initialized to <CODE>Infinity</CODE>.
     */
    static OFF : ಠ_ಠ.clutz.goog.debug.Logger.Level ;
    /**
     * The predefined levels.
     */
    static PREDEFINED_LEVELS : ಠ_ಠ.clutz.goog.debug.Logger.Level [] ;
    /**
     * SEVERE is a message level indicating a serious failure.
     * This level is initialized to <CODE>1000</CODE>.
     */
    static SEVERE : ಠ_ಠ.clutz.goog.debug.Logger.Level ;
    /**
     * SHOUT is a message level for extra debugging loudness.
     * This level is initialized to <CODE>1200</CODE>.
     */
    static SHOUT : ಠ_ಠ.clutz.goog.debug.Logger.Level ;
    /**
     * WARNING is a message level indicating a potential problem.
     * This level is initialized to <CODE>900</CODE>.
     */
    static WARNING : ಠ_ಠ.clutz.goog.debug.Logger.Level ;
    /**
     * Gets the predefined level with the given name.
     * @param name The name of the level.
     */
    static getPredefinedLevel (name : string ) : ಠ_ಠ.clutz.goog.debug.Logger.Level | null ;
    /**
     * Gets the highest predefined level <= #value.
     * @param value Level value.
     */
    static getPredefinedLevelByValue (value : number ) : ಠ_ಠ.clutz.goog.debug.Logger.Level | null ;
  }
  class Level_Instance {
    private noStructuralTyping_: any;
    /**
     * The Level class defines a set of standard logging levels that
     * can be used to control logging output.  The logging Level objects
     * are ordered and are specified by ordered integers.  Enabling logging
     * at a given level also enables logging at all higher levels.
     * <p>
     * Clients should normally use the predefined Level constants such
     * as Level.SEVERE.
     * <p>
     * The levels in descending order are:
     * <ul>
     * <li>SEVERE (highest value)
     * <li>WARNING
     * <li>INFO
     * <li>CONFIG
     * <li>FINE
     * <li>FINER
     * <li>FINEST  (lowest value)
     * </ul>
     * In addition there is a level OFF that can be used to turn
     * off logging, and a level ALL that can be used to enable
     * logging of all messages.
     * @param name The name of the level.
     * @param value The numeric value of the level.
     */
    constructor (name : string , value : number ) ;
    /**
     * The name of the level
     */
    name : string ;
    /**
     * The numeric value of the level
     */
    value : number ;
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.Logger.Level'): typeof ಠ_ಠ.clutz.goog.debug.Logger.Level;
}
declare module 'goog:goog.debug.Logger.Level' {
  import alias = ಠ_ಠ.clutz.goog.debug.Logger.Level;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * A simple object to keep track of a timestamp considered the start of
   * something. The main use is for the logger system to maintain a start time
   * that is occasionally reset. For example, in Gmail, we reset this relative
   * time at the start of a user action so that timings are offset from the
   * beginning of the action. This class also provides a singleton as the default
   * behavior for most use cases is to share the same start time.
   */
  class RelativeTimeProvider extends RelativeTimeProvider_Instance {
    static getDefaultInstance ( ) : ಠ_ಠ.clutz.goog.debug.RelativeTimeProvider | null ;
  }
  class RelativeTimeProvider_Instance {
    private noStructuralTyping_: any;
    get ( ) : number ;
    /**
     * Resets the start time to now.
     */
    reset ( ) : void ;
    /**
     * Sets the start time to the specified time.
     * @param timeStamp The start time.
     */
    set (timeStamp : number ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.RelativeTimeProvider'): typeof ಠ_ಠ.clutz.goog.debug.RelativeTimeProvider;
}
declare module 'goog:goog.debug.RelativeTimeProvider' {
  import alias = ಠ_ಠ.clutz.goog.debug.RelativeTimeProvider;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Formatter that returns formatted plain text
   */
  class TextFormatter extends TextFormatter_Instance {
  }
  class TextFormatter_Instance extends ಠ_ಠ.clutz.goog.debug.Formatter_Instance {
    /**
     * Formatter that returns formatted plain text
     * @param opt_prefix The prefix to place before text records.
     */
    constructor (opt_prefix ? : string ) ;
    appendNewline : boolean ;
    showAbsoluteTime : boolean ;
    showExceptionText : boolean ;
    /**
     * Formats a record as text
     * @param logRecord the logRecord to format.
     */
    formatRecord (logRecord : ಠ_ಠ.clutz.goog.debug.LogRecord | null ) : string ;
    /**
     * Formats a record as text
     * @param logRecord the logRecord to format.
     */
    formatRecordAsHtml (logRecord : ಠ_ಠ.clutz.goog.debug.LogRecord | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.TextFormatter'): typeof ಠ_ಠ.clutz.goog.debug.TextFormatter;
}
declare module 'goog:goog.debug.TextFormatter' {
  import alias = ಠ_ಠ.clutz.goog.debug.TextFormatter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Singleton trace object
   */
  var Trace : ಠ_ಠ.clutz.PrivateType | null ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.Trace'): typeof ಠ_ಠ.clutz.goog.debug.Trace;
}
declare module 'goog:goog.debug.Trace' {
  import alias = ಠ_ಠ.clutz.goog.debug.Trace;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  var devCssRunner : Object ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.devCssRunner'): typeof ಠ_ಠ.clutz.goog.debug.devCssRunner;
}
declare module 'goog:goog.debug.devCssRunner' {
  import alias = ಠ_ಠ.clutz.goog.debug.devCssRunner;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.entryPointRegistry {
  /**
   * Configures a monitor to wrap all entry points.
   *
   * Entry points that have already been registered are immediately wrapped by
   * the monitor. When an entry point is registered in the future, it will also
   * be wrapped by the monitor when it is registered.
   * @param monitor An entry point monitor.
   */
  function monitorAll (monitor : ಠ_ಠ.clutz.goog.debug.EntryPointMonitor ) : void ;
  /**
   * Register an entry point with this module.
   *
   * The entry point will be instrumented when a monitor is passed to
   * goog.debug.entryPointRegistry.monitorAll. If this has already occurred, the
   * entry point is instrumented immediately.
   * @param callback A callback function which is called with a transforming function to instrument the entry point. The callback is responsible for wrapping the relevant entry point with the transforming function.
   */
  function register (callback : (a : ( ...a : any [] ) => any ) => any ) : void ;
  /**
   * Try to unmonitor all the entry points that have already been registered. If
   * an entry point is registered in the future, it will not be wrapped by the
   * monitor when it is registered. Note that this may fail if the entry points
   * have additional wrapping.
   * @param monitor The last monitor to wrap the entry points.
   */
  function unmonitorAllIfPossible (monitor : ಠ_ಠ.clutz.goog.debug.EntryPointMonitor ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.entryPointRegistry'): typeof ಠ_ಠ.clutz.goog.debug.entryPointRegistry;
}
declare module 'goog:goog.debug.entryPointRegistry' {
  import alias = ಠ_ಠ.clutz.goog.debug.entryPointRegistry;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Dummy object to work around undefined properties compiler warning.
   */
  var errorHandlerWeakDep : { [ key: string ]: ( ( ...a : any [] ) => any ) | null } ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.errorHandlerWeakDep'): typeof ಠ_ಠ.clutz.goog.debug.errorHandlerWeakDep;
}
declare module 'goog:goog.debug.errorHandlerWeakDep' {
  import alias = ಠ_ಠ.clutz.goog.debug.errorHandlerWeakDep;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.logRecordSerializer {
  /**
   * Deserializes a JSON-serialized LogRecord.
   * @param s The JSON serialized record.
   */
  function parse (s : string ) : ಠ_ಠ.clutz.goog.debug.LogRecord ;
  /**
   * Serializes a LogRecord to a JSON string.  Note that any associated
   * exception is likely to be lost.
   * @param record The record to serialize.
   */
  function serialize (record : ಠ_ಠ.clutz.goog.debug.LogRecord | null ) : string ;
  /**
   * Deserializes a JSON-serialized LogRecord.  Use this only if you're
   * naive enough to blindly trust any JSON formatted input that comes
   * your way.
   * @param s The JSON serialized record.
   */
  function unsafeParse (s : string ) : ಠ_ಠ.clutz.goog.debug.LogRecord ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.debug.logRecordSerializer'): typeof ಠ_ಠ.clutz.goog.debug.logRecordSerializer;
}
declare module 'goog:goog.debug.logRecordSerializer' {
  import alias = ಠ_ಠ.clutz.goog.debug.logRecordSerializer;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.disposable {
  /**
   * Interface for a disposable object.  If a instance requires cleanup
   * (references COM objects, DOM notes, or other disposable objects), it should
   * implement this interface (it may subclass goog.Disposable).
   */
  interface IDisposable {
    /**
     * Disposes of the object and its resources.
     */
    dispose ( ) : void ;
    isDisposed ( ) : boolean ;
  }
}
declare module 'goog:goog.disposable.IDisposable' {
  import alias = ಠ_ಠ.clutz.goog.disposable.IDisposable;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * Calls {@code dispose} on the argument if it supports it. If obj is not an
   * object with a dispose() method, this is a no-op.
   * @param obj The object to dispose of.
   */
  function dispose (obj : any ) : void ;
}
declare module 'goog:goog.dispose' {
  import alias = ಠ_ಠ.clutz.goog.dispose;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * Calls {@code dispose} on each member of the list that supports it. (If the
   * member is an ArrayLike, then {@code goog.disposeAll()} will be called
   * recursively on each of its members.) If the member is not an object with a
   * {@code dispose()} method, then it is ignored.
   * @param var_args The list.
   */
  function disposeAll ( ...var_args : any [] ) : void ;
}
declare module 'goog:goog.disposeAll' {
  import alias = ಠ_ಠ.clutz.goog.disposeAll;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Alias for getElement.
   * @param element Element ID or a DOM node.
   */
  function $ (a : string | Element | null ) : Element | null ;
  /**
   * Alias for {@code getElementsByTagNameAndClass}.
   * @param opt_tag Element tag name.
   * @param opt_class Optional class name.
   * @param opt_el Optional element to look in.
   */
  function $$ (a ? : string | null , b ? : string | null , c ? : Element | null ) : IArrayLike < Element > ;
  /**
   * Alias for goog.dom.form.element.getValue
   */
  var $F : ( ( ...a : any [] ) => any ) | null ;
  /**
   * Alias for {@code createDom}.
   * @param tagName Tag to create.
   * @param opt_attributes If object, then a map of name-value pairs for attributes. If a string, then this is the className of the new element.
   * @param var_args Further DOM nodes or strings for text nodes. If one of the var_args is an array, its children will be added as childNodes instead.
   */
  function $dom (a : string , b ? : string | Object | null ,  ...c : ( Object | null | string | undefined ) [] ) : Element ;
  var ASSUME_QUIRKS_MODE : boolean ;
  var ASSUME_STANDARDS_MODE : boolean ;
  /**
   * Appends a node with text or other nodes.
   * @param parent The node to append nodes to.
   * @param var_args The things to append to the node. If this is a Node it is appended as is. If this is a string then a text node is appended. If this is an array like object then fields 0 to length - 1 are appended.
   */
  function append (parent : Node ,  ...var_args : ( Object | null | string | undefined ) [] ) : void ;
  /**
   * Appends a child to a node.
   * @param parent Parent.
   * @param child Child.
   */
  function appendChild (parent : Node | null , child : Node | null ) : void ;
  /**
   * Determines if the given node can contain children, intended to be used for
   * HTML generation.
   *
   * IE natively supports node.canHaveChildren but has inconsistent behavior.
   * Prior to IE8 the base tag allows children and in IE9 all nodes return true
   * for canHaveChildren.
   *
   * In practice all non-IE browsers allow you to add children to any node, but
   * the behavior is inconsistent:
   *
   * <pre>
   * var a = document.createElement(goog.dom.TagName.BR);
   * a.appendChild(document.createTextNode('foo'));
   * a.appendChild(document.createTextNode('bar'));
   * console.log(a.childNodes.length);  // 2
   * console.log(a.innerHTML);  // Chrome: "", IE9: "foobar", FF3.5: "foobar"
   * </pre>
   *
   * For more information, see:
   * http://dev.w3.org/html5/markup/syntax.html#syntax-elements
   *
   * TODO(user): Rename shouldAllowChildren() ?
   * @param node The node to check.
   */
  function canHaveChildren (node : Node | null ) : boolean ;
  /**
   * Compares the document order of two nodes, returning 0 if they are the same
   * node, a negative number if node1 is before node2, and a positive number if
   * node2 is before node1.  Note that we compare the order the tags appear in the
   * document so in the tree <b><i>text</i></b> the B node is considered to be
   * before the I node.
   * @param node1 The first node to compare.
   * @param node2 The second node to compare.
   */
  function compareNodeOrder (node1 : Node | null , node2 : Node | null ) : number ;
  /**
   * Creates a new Node from constant strings of HTML markup.
   * @param var_args The HTML strings to concatenate then convert into a node.
   */
  function constHtmlToNode ( ...var_args : ( ಠ_ಠ.clutz.goog.string.Const | undefined ) [] ) : Node ;
  /**
   * Whether a node contains another node.
   * @param parent The node that should contain the other node.
   * @param descendant The node to test presence of.
   */
  function contains (parent : Node | null , descendant : Node | null ) : boolean ;
  /**
   * Returns a dom node with a set of attributes.  This function accepts varargs
   * for subsequent nodes to be added.  Subsequent nodes will be added to the
   * first node as childNodes.
   *
   * So:
   * <code>createDom('div', null, createDom('p'), createDom('p'));</code>
   * would return a div with two child paragraphs
   * @param tagName Tag to create.
   * @param opt_attributes If object, then a map of name-value pairs for attributes. If a string, then this is the className of the new element. If an array, the elements will be joined together as the className of the new element.
   * @param var_args Further DOM nodes or strings for text nodes. If one of the var_args is an array or NodeList, its elements will be added as childNodes instead.
   */
  function createDom < T > (tagName : string | ಠ_ಠ.clutz.goog.dom.TypedTagName < any > , opt_attributes ? : Object | null | string ,  ...var_args : ( Object | null | string | undefined ) [] ) : Element ;
  /**
   * Creates a new element.
   * @param name Tag name.
   */
  function createElement < T > (name : string | ಠ_ಠ.clutz.goog.dom.TypedTagName < any > ) : Element ;
  /**
   * Create a table.
   * @param rows The number of rows in the table.  Must be >= 1.
   * @param columns The number of columns in the table.  Must be >= 1.
   * @param opt_fillWithNbsp If true, fills table entries with {@code goog.string.Unicode.NBSP} characters.
   */
  function createTable (rows : number , columns : number , opt_fillWithNbsp ? : boolean ) : Element ;
  /**
   * Creates a new text node.
   * @param content Content.
   */
  function createTextNode (content : number | string ) : Text ;
  /**
   * Find the deepest common ancestor of the given nodes.
   * @param var_args The nodes to find a common ancestor of.
   */
  function findCommonAncestor ( ...var_args : ( Node | null | undefined ) [] ) : Node | null ;
  /**
   * Finds the first descendant node that matches the filter function, using
   * a depth first search. This function offers the most general purpose way
   * of finding a matching element. You may also wish to consider
   * {@code goog.dom.query} which can express many matching criteria using
   * CSS selector expressions. These expressions often result in a more
   * compact representation of the desired result.
   * @param root The root of the tree to search.
   * @param p The filter function.
   */
  function findNode (root : Node | null , p : (a : Node | null ) => boolean ) : Node | null | undefined ;
  /**
   * Finds all the descendant nodes that match the filter function, using a
   * a depth first search. This function offers the most general-purpose way
   * of finding a set of matching elements. You may also wish to consider
   * {@code goog.dom.query} which can express many matching criteria using
   * CSS selector expressions. These expressions often result in a more
   * compact representation of the desired result.
   * @param root The root of the tree to search.
   * @param p The filter function.
   */
  function findNodes (root : Node | null , p : (a : Node | null ) => boolean ) : Node [] ;
  /**
   * Flattens an element. That is, removes it and replace it with its children.
   * Does nothing if the element is not in the document.
   * @param element The element to flatten.
   */
  function flattenElement (element : Element | null ) : Element | null | undefined ;
  /**
   * Determines the active element in the given document.
   * @param doc The document to look in.
   */
  function getActiveElement (doc : Document | null ) : Element | null ;
  /**
   * Walks up the DOM hierarchy returning the first ancestor that passes the
   * matcher function.
   * @param element The DOM node to start with.
   * @param matcher A function that returns true if the passed node matches the desired criteria.
   * @param opt_includeNode If true, the node itself is included in the search (the first call to the matcher will pass startElement as the node to test).
   * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
   */
  function getAncestor (element : Node | null , matcher : (a : Node | null ) => boolean , opt_includeNode ? : boolean , opt_maxSearchSteps ? : number ) : Node | null ;
  /**
   * Walks up the DOM hierarchy returning the first ancestor that has the passed
   * class name. If the passed element matches the specified criteria, the
   * element itself is returned.
   * @param element The DOM node to start with.
   * @param className The class name to match.
   * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
   */
  function getAncestorByClass (element : Node | null , className : string , opt_maxSearchSteps ? : number ) : Element | null ;
  /**
   * Walks up the DOM hierarchy returning the first ancestor that has the passed
   * tag name and/or class name. If the passed element matches the specified
   * criteria, the element itself is returned.
   * @param element The DOM node to start with.
   * @param opt_tag The tag name to match (or null/undefined to match only based on class name).
   * @param opt_class The class name to match (or null/undefined to match only based on tag name).
   * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
   */
  function getAncestorByTagNameAndClass (element : Node | null , opt_tag ? : string | null , opt_class ? : string | null , opt_maxSearchSteps ? : number ) : Element | null ;
  /**
   * Returns an array containing just the element children of the given element.
   * @param element The element whose element children we want.
   */
  function getChildren (element : Element | null ) : Element [] | NodeList < Element > ;
  /**
   * Gets the document object being used by the dom library.
   */
  function getDocument ( ) : Document ;
  /**
   * Calculates the height of the document.
   */
  function getDocumentHeight ( ) : number ;
  /**
   * Calculates the height of the document of the given window.
   * @param win The window whose document height to retrieve.
   */
  function getDocumentHeightForWindow (win : Window ) : number ;
  /**
   * Gets the document scroll distance as a coordinate object.
   */
  function getDocumentScroll ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Gets the document scroll element.
   */
  function getDocumentScrollElement ( ) : Element ;
  /**
   * Gets the DomHelper object for the document where the element resides.
   * @param opt_element If present, gets the DomHelper for this element.
   */
  function getDomHelper (opt_element ? : Node | null | Window ) : ಠ_ಠ.clutz.goog.dom.DomHelper ;
  /**
   * Gets an element from the current document by element id.
   *
   * If an Element is passed in, it is returned.
   * @param element Element ID or a DOM node.
   */
  function getElement (element : string | Element | null ) : Element | null ;
  /**
   * Returns the first element with the provided className.
   * @param className the name of the class to look for.
   * @param opt_el Optional element to look in.
   */
  function getElementByClass (className : string , opt_el ? : Element | null | Document ) : Element | null ;
  /**
   * Returns a static, array-like list of the elements with the provided
   * className.
   * @param className the name of the class to look for.
   * @param opt_el Optional element to look in.
   */
  function getElementsByClass (className : string , opt_el ? : Document | null | Element ) : IArrayLike < Element > ;
  /**
   * Looks up elements by both tag and class name, using browser native functions
   * ({@code querySelectorAll}, {@code getElementsByTagName} or
   * {@code getElementsByClassName}) where possible. This function
   * is a useful, if limited, way of collecting a list of DOM elements
   * with certain characteristics.  {@code goog.dom.query} offers a
   * more powerful and general solution which allows matching on CSS3
   * selector expressions, but at increased cost in code size. If all you
   * need is particular tags belonging to a single class, this function
   * is fast and sleek.
   *
   * Note that tag names are case sensitive in the SVG namespace, and this
   * function converts opt_tag to uppercase for comparisons. For queries in the
   * SVG namespace you should use querySelector or querySelectorAll instead.
   * https://bugzilla.mozilla.org/show_bug.cgi?id=963870
   * https://bugs.webkit.org/show_bug.cgi?id=83438
   * @param opt_tag Element tag name.
   * @param opt_class Optional class name.
   * @param opt_el Optional element to look in.
   */
  function getElementsByTagNameAndClass (opt_tag ? : string | null , opt_class ? : string | null , opt_el ? : Document | null | Element ) : IArrayLike < Element > ;
  /**
   * Returns the first child node that is an element.
   * @param node The node to get the first child element of.
   */
  function getFirstElementChild (node : Node | null ) : Element | null ;
  /**
   * Cross-browser function for getting the document element of a frame or iframe.
   * @param frame Frame element.
   */
  function getFrameContentDocument (frame : Element | null ) : Document ;
  /**
   * Cross-browser function for getting the window of a frame or iframe.
   * @param frame Frame element.
   */
  function getFrameContentWindow (frame : Element | null ) : Window | null ;
  /**
   * Returns the last child node that is an element.
   * @param node The node to get the last child element of.
   */
  function getLastElementChild (node : Node | null ) : Element | null ;
  /**
   * Returns the first next sibling that is an element.
   * @param node The node to get the next sibling element of.
   */
  function getNextElementSibling (node : Node | null ) : Element | null ;
  /**
   * Returns the next node in source order from the given node.
   * @param node The node.
   */
  function getNextNode (node : Node | null ) : Node | null ;
  /**
   * Returns the node at a given offset in a parent node.  If an object is
   * provided for the optional third parameter, the node and the remainder of the
   * offset will stored as properties of this object.
   * @param parent The parent node.
   * @param offset The offset into the parent node.
   * @param opt_result Object to be used to store the return value. The return value will be stored in the form {node: Node, remainder: number} if this object is provided.
   */
  function getNodeAtOffset (parent : Node | null , offset : number , opt_result ? : Object | null ) : Node | null ;
  /**
   * Returns the text length of the text contained in a node, without markup. This
   * is equivalent to the selection length if the node was selected, or the number
   * of cursor movements to traverse the node. Images & BRs take one space.  New
   * lines are ignored.
   * @param node The node whose text content length is being calculated.
   */
  function getNodeTextLength (node : Node | null ) : number ;
  /**
   * Returns the text offset of a node relative to one of its ancestors. The text
   * length is the same as the length calculated by goog.dom.getNodeTextLength.
   * @param node The node whose offset is being calculated.
   * @param opt_offsetParent The node relative to which the offset will be calculated. Defaults to the node's owner document's body.
   */
  function getNodeTextOffset (node : Node | null , opt_offsetParent ? : Node | null ) : number ;
  /**
   * Gets the outerHTML of a node, which islike innerHTML, except that it
   * actually contains the HTML of the node itself.
   * @param element The element to get the HTML of.
   */
  function getOuterHtml (element : Element | null ) : string ;
  /**
   * Returns the owner document for a node.
   * @param node The node to get the document for.
   */
  function getOwnerDocument (node : Node | null | Window ) : Document ;
  /**
   * Gets the page scroll distance as a coordinate object.
   * @param opt_window Optional window element to test.
   */
  function getPageScroll (opt_window ? : Window | null ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Returns an element's parent, if it's an Element.
   * @param element The DOM element.
   */
  function getParentElement (element : Element | null ) : Element | null ;
  /**
   * Gives the current devicePixelRatio.
   *
   * By default, this is the value of window.devicePixelRatio (which should be
   * preferred if present).
   *
   * If window.devicePixelRatio is not present, the ratio is calculated with
   * window.matchMedia, if present. Otherwise, gives 1.0.
   *
   * Some browsers (including Chrome) consider the browser zoom level in the pixel
   * ratio, so the value may change across multiple calls.
   */
  function getPixelRatio ( ) : number ;
  /**
   * Returns the first previous sibling that is an element.
   * @param node The node to get the previous sibling element of.
   */
  function getPreviousElementSibling (node : Node | null ) : Element | null ;
  /**
   * Returns the previous node in source order from the given node.
   * @param node The node.
   */
  function getPreviousNode (node : Node | null ) : Node | null ;
  /**
   * Returns the text content of the current node, without markup.
   *
   * Unlike {@code getTextContent} this method does not collapse whitespaces
   * or normalize lines breaks.
   * @param node The node from which we are getting content.
   */
  function getRawTextContent (node : Node | null ) : string ;
  /**
   * Gets an element by id, asserting that the element is found.
   *
   * This is used when an element is expected to exist, and should fail with
   * an assertion error if it does not (if assertions are enabled).
   * @param id Element ID.
   */
  function getRequiredElement (id : string ) : Element ;
  /**
   * Ensures an element with the given className exists, and then returns the
   * first element with the provided className.
   * @param className the name of the class to look for.
   * @param opt_root Optional element or document to look in.
   */
  function getRequiredElementByClass (className : string , opt_root ? : Element | Document ) : Element ;
  /**
   * Returns the text content of the current node, without markup and invisible
   * symbols. New lines are stripped and whitespace is collapsed,
   * such that each character would be visible.
   *
   * In browsers that support it, innerText is used.  Other browsers attempt to
   * simulate it via node traversal.  Line breaks are canonicalized in IE.
   * @param node The node from which we are getting content.
   */
  function getTextContent (node : Node | null ) : string ;
  /**
   * Gets the dimensions of the viewport.
   *
   * Gecko Standards mode:
   * docEl.clientWidth  Width of viewport excluding scrollbar.
   * win.innerWidth     Width of viewport including scrollbar.
   * body.clientWidth   Width of body element.
   *
   * docEl.clientHeight Height of viewport excluding scrollbar.
   * win.innerHeight    Height of viewport including scrollbar.
   * body.clientHeight  Height of document.
   *
   * Gecko Backwards compatible mode:
   * docEl.clientWidth  Width of viewport excluding scrollbar.
   * win.innerWidth     Width of viewport including scrollbar.
   * body.clientWidth   Width of viewport excluding scrollbar.
   *
   * docEl.clientHeight Height of document.
   * win.innerHeight    Height of viewport including scrollbar.
   * body.clientHeight  Height of viewport excluding scrollbar.
   *
   * IE6/7 Standards mode:
   * docEl.clientWidth  Width of viewport excluding scrollbar.
   * win.innerWidth     Undefined.
   * body.clientWidth   Width of body element.
   *
   * docEl.clientHeight Height of viewport excluding scrollbar.
   * win.innerHeight    Undefined.
   * body.clientHeight  Height of document element.
   *
   * IE5 + IE6/7 Backwards compatible mode:
   * docEl.clientWidth  0.
   * win.innerWidth     Undefined.
   * body.clientWidth   Width of viewport excluding scrollbar.
   *
   * docEl.clientHeight 0.
   * win.innerHeight    Undefined.
   * body.clientHeight  Height of viewport excluding scrollbar.
   *
   * Opera 9 Standards and backwards compatible mode:
   * docEl.clientWidth  Width of viewport excluding scrollbar.
   * win.innerWidth     Width of viewport including scrollbar.
   * body.clientWidth   Width of viewport excluding scrollbar.
   *
   * docEl.clientHeight Height of document.
   * win.innerHeight    Height of viewport including scrollbar.
   * body.clientHeight  Height of viewport excluding scrollbar.
   *
   * WebKit:
   * Safari 2
   * docEl.clientHeight Same as scrollHeight.
   * docEl.clientWidth  Same as innerWidth.
   * win.innerWidth     Width of viewport excluding scrollbar.
   * win.innerHeight    Height of the viewport including scrollbar.
   * frame.innerHeight  Height of the viewport exluding scrollbar.
   *
   * Safari 3 (tested in 522)
   *
   * docEl.clientWidth  Width of viewport excluding scrollbar.
   * docEl.clientHeight Height of viewport excluding scrollbar in strict mode.
   * body.clientHeight  Height of viewport excluding scrollbar in quirks mode.
   * @param opt_window Optional window element to test.
   */
  function getViewportSize (opt_window ? : Window | null ) : ಠ_ಠ.clutz.goog.math.Size ;
  /**
   * Gets the window object associated with the given document.
   * @param opt_doc Document object to get window for.
   */
  function getWindow (opt_doc ? : Document | null ) : Window ;
  /**
   * Insert a child at a given index. If index is larger than the number of child
   * nodes that the parent currently has, the node is inserted as the last child
   * node.
   * @param parent The element into which to insert the child.
   * @param child The element to insert.
   * @param index The index at which to insert the new child node. Must not be negative.
   */
  function insertChildAt (parent : Element | null , child : Node | null , index : number ) : void ;
  /**
   * Inserts a new node after an existing reference node (i.e. as the next
   * sibling). If the reference node has no parent, then does nothing.
   * @param newNode Node to insert.
   * @param refNode Reference node to insert after.
   */
  function insertSiblingAfter (newNode : Node | null , refNode : Node | null ) : void ;
  /**
   * Inserts a new node before an existing reference node (i.e. as the previous
   * sibling). If the reference node has no parent, then does nothing.
   * @param newNode Node to insert.
   * @param refNode Reference node to insert before.
   */
  function insertSiblingBefore (newNode : Node | null , refNode : Node | null ) : void ;
  /**
   * Returns true if the browser is in "CSS1-compatible" (standards-compliant)
   * mode, false otherwise.
   */
  function isCss1CompatMode ( ) : boolean ;
  /**
   * Whether the object looks like an Element.
   * @param obj The object being tested for Element likeness.
   */
  function isElement (obj : any ) : boolean ;
  /**
   * Returns true if the element can be focused, i.e. it has a tab index that
   * allows it to receive keyboard focus (tabIndex >= 0), or it is an element
   * that natively supports keyboard focus.
   * @param element Element to check.
   */
  function isFocusable (element : Element ) : boolean ;
  /**
   * Returns true if the element has a tab index that allows it to receive
   * keyboard focus (tabIndex >= 0), false otherwise.  Note that some elements
   * natively support keyboard focus, even if they have no tab index.
   * @param element Element to check.
   */
  function isFocusableTabIndex (element : Element ) : boolean ;
  /**
   * Whether the object looks like a DOM node.
   * @param obj The object being tested for node likeness.
   */
  function isNodeLike (obj : any ) : boolean ;
  /**
   * Returns true if the object is a {@code NodeList}.  To qualify as a NodeList,
   * the object must have a numeric length property and an item function (which
   * has type 'string' on IE for some reason).
   * @param val Object to test.
   */
  function isNodeList (val : Object | null ) : boolean ;
  /**
   * Returns true if the specified value is a Window object. This includes the
   * global window for HTML pages, and iframe windows.
   * @param obj Variable to test.
   */
  function isWindow (obj : any ) : boolean ;
  /**
   * Removes all the child nodes on a DOM node.
   * @param node Node to remove children from.
   */
  function removeChildren (node : Node | null ) : void ;
  /**
   * Removes a node from its parent.
   * @param node The node to remove.
   */
  function removeNode (node : Node | null ) : Node | null ;
  /**
   * Replaces a node in the DOM tree. Will do nothing if {@code oldNode} has no
   * parent.
   * @param newNode Node to insert.
   * @param oldNode Node to replace.
   */
  function replaceNode (newNode : Node | null , oldNode : Node | null ) : void ;
  /**
   * Converts HTML markup into a node. This is a safe version of
   * {@code goog.dom.htmlToDocumentFragment} which is now deleted.
   * @param html The HTML markup to convert.
   */
  function safeHtmlToNode (html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : Node ;
  /**
   * Enables or disables keyboard focus support on the element via its tab index.
   * Only elements for which {@link goog.dom.isFocusableTabIndex} returns true
   * (or elements that natively support keyboard focus, like form elements) can
   * receive keyboard focus.  See http://go/tabindex for more info.
   * @param element Element whose tab index is to be changed.
   * @param enable Whether to set or remove a tab index on the element that supports keyboard focus.
   */
  function setFocusableTabIndex (element : Element | null , enable : boolean ) : void ;
  /**
   * Sets multiple properties on a node.
   * @param element DOM node to set properties on.
   * @param properties Hash of property:value pairs.
   */
  function setProperties (element : Element | null , properties : Object | null ) : void ;
  /**
   * Sets the text content of a node, with cross-browser support.
   * @param node The node to change the text content of.
   * @param text The value that should replace the node's content.
   */
  function setTextContent (node : Node | null , text : string | number ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom'): typeof ಠ_ಠ.clutz.goog.dom;
}
declare module 'goog:goog.dom' {
  import alias = ಠ_ಠ.clutz.goog.dom;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Creates a new multi range with no properties.  Do not use this
   * constructor: use one of the goog.dom.Range.createFrom* methods instead.
   */
  class AbstractMultiRange extends AbstractMultiRange_Instance {
  }
  class AbstractMultiRange_Instance extends ಠ_ಠ.clutz.goog.dom.AbstractRange_Instance {
    containsRange (otherRange : ಠ_ಠ.clutz.goog.dom.AbstractRange | null , opt_allowPartial ? : boolean ) : boolean ;
    insertNode (node : Node | null , before : boolean ) : Node | null ;
    surroundWithNodes (startNode : Element | null , endNode : Element | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.AbstractMultiRange'): typeof ಠ_ಠ.clutz.goog.dom.AbstractMultiRange;
}
declare module 'goog:goog.dom.AbstractMultiRange' {
  import alias = ಠ_ಠ.clutz.goog.dom.AbstractMultiRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Creates a new selection with no properties.  Do not use this constructor -
   * use one of the goog.dom.Range.from* methods instead.
   */
  class AbstractRange extends AbstractRange_Instance {
    /**
     * Gets the browser native selection object from the given window.
     * @param win The window to get the selection object from.
     */
    static getBrowserSelectionForWindow (win : Window | null ) : Object | null ;
    /**
     * Tests if the given Object is a controlRange.
     * @param range The range object to test.
     */
    static isNativeControlRange (range : Object | null ) : boolean ;
  }
  class AbstractRange_Instance {
    private noStructuralTyping_: any;
    /**
     * Returns a RangeIterator over the contents of the range.  Regardless of the
     * direction of the range, the iterator will move in document order.
     * @param opt_keys Unused for this iterator.
     */
    __iterator__ (a ? : boolean ) : ಠ_ಠ.clutz.goog.dom.RangeIterator ;
    clone ( ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
    /**
     * Collapses the range to one of its boundary points.
     * @param toAnchor Whether to collapse to the anchor of the range.
     */
    collapse (a : boolean ) : any ;
    /**
     * Tests if this range contains the given node.
     * @param node The node to test for.
     * @param opt_allowPartial If not set or false, the node must be entirely contained in the selection for this function to return true.
     */
    containsNode (node : Node | null , opt_allowPartial ? : boolean ) : boolean ;
    /**
     * Tests if this range contains the given range.
     * @param range The range to test.
     * @param opt_allowPartial If true, the range can be partially contained in the selection, otherwise the range must be entirely contained.
     */
    containsRange (a : ಠ_ಠ.clutz.goog.dom.AbstractRange | null , b ? : boolean ) : boolean ;
    getAnchorNode ( ) : Node | null ;
    getAnchorOffset ( ) : number ;
    getBrowserRangeObject ( ) : Range | null | TextRange ;
    getContainer ( ) : Node | null ;
    /**
     * Returns the deepest element in the tree that contains the entire range.
     */
    getContainerElement ( ) : Element | null ;
    getDocument ( ) : Document ;
    getEndNode ( ) : Node | null ;
    getEndOffset ( ) : number ;
    getEndPosition ( ) : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    getFocusNode ( ) : Node | null ;
    getFocusOffset ( ) : number ;
    /**
     * Returns the HTML fragment this range selects.  This is slow on all browsers.
     * The HTML fragment may not be valid HTML, for instance if the user selects
     * from a to b inclusively in the following html:
     *
     * &lt;div&gt;a&lt;/div&gt;b
     *
     * This method will return
     *
     * a&lt;/div&gt;b
     *
     * If you need valid HTML, use {@link #getValidHtml} instead.
     */
    getHtmlFragment ( ) : string ;
    /**
     * Returns pastable HTML for this range.  This guarantees that any child items
     * that must have specific ancestors will have them, for instance all TDs will
     * be contained in a TR in a TBODY in a TABLE and all LIs will be contained in
     * a UL or OL as appropriate.  This is semi-fast on all browsers.
     */
    getPastableHtml ( ) : string ;
    getStartNode ( ) : Node | null ;
    getStartOffset ( ) : number ;
    getStartPosition ( ) : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    getText ( ) : string ;
    /**
     * Get the i-th text range in this range.  The behavior is undefined if
     * i >= getTextRangeCount or i < 0.
     * @param i The range number to retrieve.
     */
    getTextRange (a : number ) : ಠ_ಠ.clutz.goog.dom.TextRange | null ;
    getTextRangeCount ( ) : number ;
    /**
     * Gets an array of all text ranges this range is comprised of.  For non-multi
     * ranges, returns a single element array containing this.
     */
    getTextRanges ( ) : ( ಠ_ಠ.clutz.goog.dom.TextRange | null ) [] ;
    getType ( ) : ಠ_ಠ.clutz.goog.dom.RangeType ;
    /**
     * Returns valid HTML for this range.  This is fast on IE, and semi-fast on
     * other browsers.
     */
    getValidHtml ( ) : string ;
    getWindow ( ) : Window ;
    /**
     * Inserts a node before (or after) the range.  The range may be disrupted
     * beyond recovery because of the way this splits nodes.
     * @param node The node to insert.
     * @param before True to insert before, false to insert after.
     */
    insertNode (a : Node | null , b : boolean ) : Node | null ;
    isCollapsed ( ) : boolean ;
    /**
     * Tests whether this range is valid (i.e. whether its endpoints are still in
     * the document).  A range becomes invalid when, after this object was created,
     * either one or both of its endpoints are removed from the document.  Use of
     * an invalid range can lead to runtime errors, particularly in IE.
     */
    isRangeInDocument ( ) : boolean ;
    isReversed ( ) : boolean ;
    /**
     * Removes the contents of the range from the document.
     */
    removeContents ( ...a : any [] ) : any ;
    /**
     * Replaces the range contents with (possibly a copy of) the given node.  The
     * range may be disrupted beyond recovery because of the way this splits nodes.
     * @param node The node to insert.
     */
    replaceContentsWithNode (node : Node | null ) : Node | null ;
    /**
     * Saves the range using HTML carets. As long as the carets remained in the
     * HTML, the range can be restored...even when the HTML is copied across
     * documents.
     */
    saveUsingCarets ( ) : ಠ_ಠ.clutz.goog.dom.SavedCaretRange | null ;
    /**
     * Saves the range so that if the start and end nodes are left alone, it can
     * be restored.
     */
    saveUsingDom ( ) : ಠ_ಠ.clutz.goog.dom.SavedRange ;
    /**
     * Sets this range as the selection in its window.
     */
    select ( ...a : any [] ) : any ;
    /**
     * Sets the native browser range object, overwriting any state this range was
     * storing.
     * @param nativeRange The native browser range object.
     */
    setBrowserRangeObject (nativeRange : Range | null | TextRange ) : boolean ;
    /**
     * Surrounds this range with the two given nodes.  The range may be disrupted
     * beyond recovery because of the way this splits nodes.
     * @param startNode The node to insert at the start.
     * @param endNode The node to insert at the end.
     */
    surroundWithNodes (a : Element | null , b : Element | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.AbstractRange'): typeof ಠ_ಠ.clutz.goog.dom.AbstractRange;
}
declare module 'goog:goog.dom.AbstractRange' {
  import alias = ಠ_ಠ.clutz.goog.dom.AbstractRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Typedef for use with goog.dom.createDom and goog.dom.append.
   */
  type Appendable = Object | null | string ;
}
declare module 'goog:goog.dom.Appendable' {
  import alias = ಠ_ಠ.clutz.goog.dom.Appendable;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Enum of browser capabilities.
   */
  type BrowserFeature = boolean ;
  var BrowserFeature : {
    CAN_ADD_NAME_OR_TYPE_ATTRIBUTES : BrowserFeature ,
    CAN_USE_CHILDREN_ATTRIBUTE : BrowserFeature ,
    CAN_USE_INNER_TEXT : BrowserFeature ,
    CAN_USE_PARENT_ELEMENT_PROPERTY : BrowserFeature ,
    INNER_HTML_NEEDS_SCOPED_ELEMENT : BrowserFeature ,
    LEGACY_IE_RANGES : BrowserFeature ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.BrowserFeature'): typeof ಠ_ಠ.clutz.goog.dom.BrowserFeature;
}
declare module 'goog:goog.dom.BrowserFeature' {
  import alias = ಠ_ಠ.clutz.goog.dom.BrowserFeature;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Creates a new BufferedViewportSizeMonitor.
   */
  class BufferedViewportSizeMonitor extends BufferedViewportSizeMonitor_Instance {
  }
  class BufferedViewportSizeMonitor_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Creates a new BufferedViewportSizeMonitor.
     * @param viewportSizeMonitor The underlying viewport size monitor.
     * @param opt_bufferMs The buffer time, in ms. If not specified, this value defaults to {@link #RESIZE_EVENT_DELAY_MS_}.
     */
    constructor (viewportSizeMonitor : ಠ_ಠ.clutz.goog.dom.ViewportSizeMonitor , opt_bufferMs ? : number ) ;
    disposeInternal ( ) : void ;
    /**
     * Returns the current size of the viewport.
     */
    getSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.dom.BufferedViewportSizeMonitor {
  type EventType = string ;
  var EventType : {
    RESIZE_HEIGHT : EventType ,
    RESIZE_WIDTH : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.BufferedViewportSizeMonitor'): typeof ಠ_ಠ.clutz.goog.dom.BufferedViewportSizeMonitor;
}
declare module 'goog:goog.dom.BufferedViewportSizeMonitor' {
  import alias = ಠ_ಠ.clutz.goog.dom.BufferedViewportSizeMonitor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Create a new control selection with no properties.  Do not use this
   * constructor: use one of the goog.dom.Range.createFrom* methods instead.
   */
  class ControlRange extends ControlRange_Instance {
    /**
     * Create a new range wrapper from the given browser range object.  Do not use
     * this method directly - please use goog.dom.Range.createFrom* instead.
     * @param controlRange The browser range object.
     */
    static createFromBrowserRange (controlRange : Object | null ) : ಠ_ಠ.clutz.goog.dom.ControlRange ;
    /**
     * Create a new range wrapper that selects the given element.  Do not use
     * this method directly - please use goog.dom.Range.createFrom* instead.
     * @param var_args The element(s) to select.
     */
    static createFromElements ( ...var_args : ( Element | null | undefined ) [] ) : ಠ_ಠ.clutz.goog.dom.ControlRange ;
  }
  class ControlRange_Instance extends ಠ_ಠ.clutz.goog.dom.AbstractMultiRange_Instance {
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.dom.RangeIterator ;
    clone ( ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
    collapse (toAnchor : boolean ) : any ;
    getBrowserRangeObject ( ) : Range | null | TextRange ;
    getContainer ( ) : Node | null ;
    getElements ( ) : ( Element | null ) [] ;
    getEndNode ( ) : Node | null ;
    getEndOffset ( ) : number ;
    getHtmlFragment ( ) : string ;
    getSortedElements ( ) : ( Element | null ) [] ;
    getStartNode ( ) : Node | null ;
    getStartOffset ( ) : number ;
    getText ( ) : string ;
    getTextRange (i : number ) : ಠ_ಠ.clutz.goog.dom.TextRange | null ;
    getTextRangeCount ( ) : number ;
    getType ( ) : ಠ_ಠ.clutz.goog.dom.RangeType ;
    getValidHtml ( ) : string ;
    isCollapsed ( ) : boolean ;
    isRangeInDocument ( ) : boolean ;
    removeContents ( ) : void ;
    replaceContentsWithNode (node : Node | null ) : Node | null ;
    saveUsingDom ( ) : ಠ_ಠ.clutz.goog.dom.SavedRange ;
    select ( ) : void ;
    setBrowserRangeObject (nativeRange : Range | null | TextRange ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.ControlRange'): typeof ಠ_ಠ.clutz.goog.dom.ControlRange;
}
declare module 'goog:goog.dom.ControlRange' {
  import alias = ಠ_ಠ.clutz.goog.dom.ControlRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
   * adds functions to determine the portion of each text node that is selected.
   */
  class ControlRangeIterator extends ControlRangeIterator_Instance {
  }
  class ControlRangeIterator_Instance extends ಠ_ಠ.clutz.goog.dom.RangeIterator {
    /**
     * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
     * adds functions to determine the portion of each text node that is selected.
     * @param range The range to traverse.
     */
    constructor (range : ಠ_ಠ.clutz.goog.dom.ControlRange | null ) ;
    clone ( ) : ಠ_ಠ.clutz.goog.dom.ControlRangeIterator ;
    copyFrom (other : ಠ_ಠ.clutz.goog.dom.TagIterator | null ) : void ;
    getEndNode ( ) : Node | null ;
    getEndTextOffset ( ) : number ;
    getStartNode ( ) : Node | null ;
    getStartTextOffset ( ) : number ;
    isLast ( ) : boolean ;
    /**
     * Move to the next position in the selection.
     * Throws {@code goog.iter.StopIteration} when it passes the end of the range.
     */
    next ( ) : Node | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.ControlRangeIterator'): typeof ಠ_ಠ.clutz.goog.dom.ControlRangeIterator;
}
declare module 'goog:goog.dom.ControlRangeIterator' {
  import alias = ಠ_ಠ.clutz.goog.dom.ControlRangeIterator;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Create an instance of a DOM helper with a new document object.
   */
  class DomHelper extends DomHelper_Instance {
  }
  class DomHelper_Instance {
    private noStructuralTyping_: any;
    /**
     * Create an instance of a DOM helper with a new document object.
     * @param opt_document Document object to associate with this DOM helper.
     */
    constructor (opt_document ? : Document | null ) ;
    /**
     * Alias for {@code getElement}.
     * @param element Element ID or a DOM node.
     */
    $ (a : string | Element | null ) : Element | null ;
    /**
     * Alias for {@code getElementsByTagNameAndClass}.
     * @param opt_tag Element tag name.
     * @param opt_class Optional class name.
     * @param opt_el Optional element to look in.
     */
    $$ (a ? : string | null , b ? : string | null , c ? : Element | null ) : IArrayLike < Element > ;
    /**
     * Alias for {@code createDom}.
     * @param tagName Tag to create.
     * @param opt_attributes If object, then a map of name-value pairs for attributes. If a string, then this is the className of the new element.
     * @param var_args Further DOM nodes or strings for text nodes.  If one of the var_args is an array, its children will be added as childNodes instead.
     */
    $dom (a : string , b ? : Object | null | string ,  ...c : ( Object | null | string | undefined ) [] ) : Element ;
    /**
     * Appends a node with text or other nodes.
     * @param parent The node to append nodes to.
     * @param var_args The things to append to the node. If this is a Node it is appended as is. If this is a string then a text node is appended. If this is an array like object then fields 0 to length - 1 are appended.
     */
    append (a : Node ,  ...b : ( Object | null | string | undefined ) [] ) : any ;
    /**
     * Appends a child to a node.
     * @param parent Parent.
     * @param child Child.
     */
    appendChild (a : Node | null , b : Node | null ) : any ;
    /**
     * Determines if the given node can contain children, intended to be used for
     * HTML generation.
     * @param node The node to check.
     */
    canHaveChildren (a : Node | null ) : boolean ;
    /**
     * Compares the document order of two nodes, returning 0 if they are the same
     * node, a negative number if node1 is before node2, and a positive number if
     * node2 is before node1.  Note that we compare the order the tags appear in the
     * document so in the tree <b><i>text</i></b> the B node is considered to be
     * before the I node.
     * @param node1 The first node to compare.
     * @param node2 The second node to compare.
     */
    compareNodeOrder (a : Node | null , b : Node | null ) : number ;
    /**
     * Whether a node contains another node.
     * @param parent The node that should contain the other node.
     * @param descendant The node to test presence of.
     */
    contains (a : Node | null , b : Node | null ) : boolean ;
    /**
     * Returns a dom node with a set of attributes.  This function accepts varargs
     * for subsequent nodes to be added.  Subsequent nodes will be added to the
     * first node as childNodes.
     *
     * So:
     * <code>createDom('div', null, createDom('p'), createDom('p'));</code>
     * would return a div with two child paragraphs
     *
     * An easy way to move all child nodes of an existing element to a new parent
     * element is:
     * <code>createDom('div', null, oldElement.childNodes);</code>
     * which will remove all child nodes from the old element and add them as
     * child nodes of the new DIV.
     * @param tagName Tag to create.
     * @param opt_attributes If object, then a map of name-value pairs for attributes. If a string, then this is the className of the new element.
     * @param var_args Further DOM nodes or strings for text nodes. If one of the var_args is an array or NodeList, its elements will be added as childNodes instead.
     */
    createDom < T > (tagName : string | ಠ_ಠ.clutz.goog.dom.TypedTagName < any > , opt_attributes ? : Object | null | string ,  ...var_args : ( Object | null | string | undefined ) [] ) : Element ;
    /**
     * Creates a new element.
     * @param name Tag name.
     */
    createElement < T > (name : string | ಠ_ಠ.clutz.goog.dom.TypedTagName < any > ) : Element ;
    /**
     * Create a table.
     * @param rows The number of rows in the table.  Must be >= 1.
     * @param columns The number of columns in the table.  Must be >= 1.
     * @param opt_fillWithNbsp If true, fills table entries with {@code goog.string.Unicode.NBSP} characters.
     */
    createTable (rows : number , columns : number , opt_fillWithNbsp ? : boolean ) : HTMLElement ;
    /**
     * Creates a new text node.
     * @param content Content.
     */
    createTextNode (content : number | string ) : Text ;
    /**
     * Find the deepest common ancestor of the given nodes.
     * @param var_args The nodes to find a common ancestor of.
     */
    findCommonAncestor ( ...a : ( Node | null | undefined ) [] ) : Node | null ;
    /**
     * Finds the first descendant node that matches the filter function. This does
     * a depth first search.
     * @param root The root of the tree to search.
     * @param p The filter function.
     */
    findNode (a : Node | null , b : (a : Node | null ) => boolean ) : Node | null | undefined ;
    /**
     * Finds all the descendant nodes that matches the filter function. This does a
     * depth first search.
     * @param root The root of the tree to search.
     * @param p The filter function.
     */
    findNodes (a : Node | null , b : (a : Node | null ) => boolean ) : ( Node | null ) [] | null ;
    /**
     * Flattens an element. That is, removes it and replace it with its children.
     * @param element The element to flatten.
     */
    flattenElement (a : Element | null ) : Element | null | undefined ;
    /**
     * Determines the active element in the given document.
     * @param opt_doc The document to look in.
     */
    getActiveElement (opt_doc ? : Document | null ) : Element | null ;
    /**
     * Walks up the DOM hierarchy returning the first ancestor that passes the
     * matcher function.
     * @param element The DOM node to start with.
     * @param matcher A function that returns true if the passed node matches the desired criteria.
     * @param opt_includeNode If true, the node itself is included in the search (the first call to the matcher will pass startElement as the node to test).
     * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
     */
    getAncestor (a : Node | null , b : (a : Node | null ) => boolean , c ? : boolean , d ? : number ) : Node | null ;
    /**
     * Walks up the DOM hierarchy returning the first ancestor that has the passed
     * class name. If the passed element matches the specified criteria, the
     * element itself is returned.
     * @param element The DOM node to start with.
     * @param class The class name to match.
     * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
     */
    getAncestorByClass (a : Node | null , b : string , c ? : number ) : Element | null ;
    /**
     * Walks up the DOM hierarchy returning the first ancestor that has the passed
     * tag name and/or class name. If the passed element matches the specified
     * criteria, the element itself is returned.
     * @param element The DOM node to start with.
     * @param opt_tag The tag name to match (or null/undefined to match only based on class name).
     * @param opt_class The class name to match (or null/undefined to match only based on tag name).
     * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
     */
    getAncestorByTagNameAndClass (a : Node | null , b ? : string | null , c ? : string | null , d ? : number ) : Element | null ;
    /**
     * Returns an array containing just the element children of the given element.
     * @param element The element whose element children we want.
     */
    getChildren (a : Element | null ) : Element [] | NodeList < Element > ;
    /**
     * Gets the document object being used by the dom library.
     */
    getDocument ( ) : Document ;
    /**
     * Calculates the height of the document.
     */
    getDocumentHeight ( ) : number ;
    /**
     * Gets the document scroll distance as a coordinate object.
     */
    getDocumentScroll ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Gets the document scroll element.
     */
    getDocumentScrollElement ( ) : Element ;
    /**
     * Gets the dom helper object for the document where the element resides.
     * @param opt_node If present, gets the DomHelper for this node.
     */
    getDomHelper (a ? : Node | null ) : ಠ_ಠ.clutz.goog.dom.DomHelper ;
    /**
     * Alias for {@code getElementById}. If a DOM node is passed in then we just
     * return that.
     * @param element Element ID or a DOM node.
     */
    getElement (element : string | Element | null ) : Element | null ;
    /**
     * Returns the first element we find matching the provided class name.
     * @param className the name of the class to look for.
     * @param opt_el Optional element to look in.
     */
    getElementByClass (className : string , opt_el ? : Element | null | Document ) : Element | null ;
    /**
     * Returns an array of all the elements with the provided className.
     * @param className the name of the class to look for.
     * @param opt_el Optional element to look in.
     */
    getElementsByClass (className : string , opt_el ? : Element | null | Document ) : IArrayLike < Element > ;
    /**
     * Looks up elements by both tag and class name, using browser native functions
     * ({@code querySelectorAll}, {@code getElementsByTagName} or
     * {@code getElementsByClassName}) where possible. The returned array is a live
     * NodeList or a static list depending on the code path taken.
     * @param opt_tag Element tag name or * for all tags.
     * @param opt_class Optional class name.
     * @param opt_el Optional element to look in.
     */
    getElementsByTagNameAndClass (opt_tag ? : string | null , opt_class ? : string | null , opt_el ? : Document | null | Element ) : IArrayLike < Element > ;
    /**
     * Returns the first child node that is an element.
     * @param node The node to get the first child element of.
     */
    getFirstElementChild (a : Node | null ) : Element | null ;
    /**
     * Cross browser function for getting the document element of an iframe.
     * @param iframe Iframe element.
     */
    getFrameContentDocument (a : Element | null ) : Document ;
    /**
     * Cross browser function for getting the window of a frame or iframe.
     * @param frame Frame element.
     */
    getFrameContentWindow (a : Element | null ) : Window | null ;
    /**
     * Returns the last child node that is an element.
     * @param node The node to get the last child element of.
     */
    getLastElementChild (a : Node | null ) : Element | null ;
    /**
     * Returns the first next sibling that is an element.
     * @param node The node to get the next sibling element of.
     */
    getNextElementSibling (a : Node | null ) : Element | null ;
    /**
     * Returns the next node in source order from the given node.
     * @param node The node.
     */
    getNextNode (a : Node | null ) : Node | null ;
    /**
     * Returns the node at a given offset in a parent node.  If an object is
     * provided for the optional third parameter, the node and the remainder of the
     * offset will stored as properties of this object.
     * @param parent The parent node.
     * @param offset The offset into the parent node.
     * @param opt_result Object to be used to store the return value. The return value will be stored in the form {node: Node, remainder: number} if this object is provided.
     */
    getNodeAtOffset (a : Node | null , b : number , c ? : Object | null ) : Node | null ;
    /**
     * Returns the text length of the text contained in a node, without markup. This
     * is equivalent to the selection length if the node was selected, or the number
     * of cursor movements to traverse the node. Images & BRs take one space.  New
     * lines are ignored.
     * @param node The node whose text content length is being calculated.
     */
    getNodeTextLength (a : Node | null ) : number ;
    /**
     * Returns the text offset of a node relative to one of its ancestors. The text
     * length is the same as the length calculated by
     * {@code goog.dom.getNodeTextLength}.
     * @param node The node whose offset is being calculated.
     * @param opt_offsetParent Defaults to the node's owner document's body.
     */
    getNodeTextOffset (a : Node | null , b ? : Node | null ) : number ;
    /**
     * Gets the outerHTML of a node, which islike innerHTML, except that it
     * actually contains the HTML of the node itself.
     * @param element The element to get the HTML of.
     */
    getOuterHtml (a : Element | null ) : string ;
    /**
     * Returns the owner document for a node.
     * @param node The node to get the document for.
     */
    getOwnerDocument (a : Node | null ) : Document ;
    /**
     * Returns an element's parent, if it's an Element.
     * @param element The DOM element.
     */
    getParentElement (a : Element | null ) : Element | null ;
    /**
     * Returns the first previous sibling that is an element.
     * @param node The node to get the previous sibling element of.
     */
    getPreviousElementSibling (a : Node | null ) : Element | null ;
    /**
     * Returns the previous node in source order from the given node.
     * @param node The node.
     */
    getPreviousNode (a : Node | null ) : Node | null ;
    /**
     * Gets an element by id, asserting that the element is found.
     *
     * This is used when an element is expected to exist, and should fail with
     * an assertion error if it does not (if assertions are enabled).
     * @param id Element ID.
     */
    getRequiredElement (id : string ) : Element ;
    /**
     * Ensures an element with the given className exists, and then returns the
     * first element with the provided className.
     * @param className the name of the class to look for.
     * @param opt_root Optional element or document to look in.
     */
    getRequiredElementByClass (className : string , opt_root ? : Element | Document ) : Element ;
    /**
     * Returns the text contents of the current node, without markup. New lines are
     * stripped and whitespace is collapsed, such that each character would be
     * visible.
     *
     * In browsers that support it, innerText is used.  Other browsers attempt to
     * simulate it via node traversal.  Line breaks are canonicalized in IE.
     * @param node The node from which we are getting content.
     */
    getTextContent (a : Node | null ) : string ;
    /**
     * Gets the dimensions of the viewport.
     * @param opt_window Optional window element to test. Defaults to the window of the Dom Helper.
     */
    getViewportSize (opt_window ? : Window | null ) : ಠ_ಠ.clutz.goog.math.Size ;
    /**
     * Gets the window object associated with the document.
     */
    getWindow ( ) : Window ;
    /**
     * Insert a child at a given index. If index is larger than the number of child
     * nodes that the parent currently has, the node is inserted as the last child
     * node.
     * @param parent The element into which to insert the child.
     * @param child The element to insert.
     * @param index The index at which to insert the new child node. Must not be negative.
     */
    insertChildAt (a : Element | null , b : Node | null , c : number ) : any ;
    /**
     * Inserts a new node after an existing reference node (i.e., as the next
     * sibling). If the reference node has no parent, then does nothing.
     * @param newNode Node to insert.
     * @param refNode Reference node to insert after.
     */
    insertSiblingAfter (a : Node | null , b : Node | null ) : any ;
    /**
     * Inserts a new node before an existing reference node (i.e., as the previous
     * sibling). If the reference node has no parent, then does nothing.
     * @param newNode Node to insert.
     * @param refNode Reference node to insert before.
     */
    insertSiblingBefore (a : Node | null , b : Node | null ) : any ;
    /**
     * Returns true if the browser is in "CSS1-compatible" (standards-compliant)
     * mode, false otherwise.
     */
    isCss1CompatMode ( ) : boolean ;
    /**
     * Whether the object looks like an Element.
     * @param obj The object being tested for Element likeness.
     */
    isElement (a : any ) : boolean ;
    /**
     * Returns true if the element can be focused, i.e. it has a tab index that
     * allows it to receive keyboard focus (tabIndex >= 0), or it is an element
     * that natively supports keyboard focus.
     * @param element Element to check.
     */
    isFocusable (a : Element ) : boolean ;
    /**
     * Returns true if the element has a tab index that allows it to receive
     * keyboard focus (tabIndex >= 0), false otherwise.  Note that some elements
     * natively support keyboard focus, even if they have no tab index.
     * @param element Element to check.
     */
    isFocusableTabIndex (a : Element ) : boolean ;
    /**
     * Whether the object looks like a DOM node.
     * @param obj The object being tested for node likeness.
     */
    isNodeLike (a : any ) : boolean ;
    /**
     * Returns true if the object is a {@code NodeList}.  To qualify as a NodeList,
     * the object must have a numeric length property and an item function (which
     * has type 'string' on IE for some reason).
     * @param val Object to test.
     */
    isNodeList (a : Object | null ) : boolean ;
    /**
     * Returns true if the specified value is a Window object. This includes the
     * global window for HTML pages, and iframe windows.
     * @param obj Variable to test.
     */
    isWindow (a : any ) : boolean ;
    /**
     * Removes all the child nodes on a DOM node.
     * @param node Node to remove children from.
     */
    removeChildren (a : Node | null ) : any ;
    /**
     * Removes a node from its parent.
     * @param node The node to remove.
     */
    removeNode (a : Node | null ) : Node | null ;
    /**
     * Replaces a node in the DOM tree. Will do nothing if {@code oldNode} has no
     * parent.
     * @param newNode Node to insert.
     * @param oldNode Node to replace.
     */
    replaceNode (a : Node | null , b : Node | null ) : any ;
    /**
     * Converts an HTML into a node or a document fragment. A single Node is used if
     * {@code html} only generates a single node. If {@code html} generates multiple
     * nodes then these are put inside a {@code DocumentFragment}. This is a safe
     * version of {@code goog.dom.DomHelper#htmlToDocumentFragment} which is now
     * deleted.
     * @param html The HTML markup to convert.
     */
    safeHtmlToNode (html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : Node ;
    /**
     * Sets the document object.
     * @param document Document object.
     */
    setDocument (document : Document ) : void ;
    /**
     * Enables or disables keyboard focus support on the element via its tab index.
     * Only elements for which {@link goog.dom.isFocusableTabIndex} returns true
     * (or elements that natively support keyboard focus, like form elements) can
     * receive keyboard focus.  See http://go/tabindex for more info.
     * @param element Element whose tab index is to be changed.
     * @param enable Whether to set or remove a tab index on the element that supports keyboard focus.
     */
    setFocusableTabIndex (a : Element | null , b : boolean ) : any ;
    /**
     * Sets a number of properties on a node.
     * @param element DOM node to set properties on.
     * @param properties Hash of property:value pairs.
     */
    setProperties (a : Element | null , b : Object | null ) : any ;
    /**
     * Sets the text content of a node, with cross-browser support.
     * @param node The node to change the text content of.
     * @param text The value that should replace the node's content.
     */
    setTextContent (a : Node | null , b : string | number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.DomHelper'): typeof ಠ_ಠ.clutz.goog.dom.DomHelper;
}
declare module 'goog:goog.dom.DomHelper' {
  import alias = ಠ_ಠ.clutz.goog.dom.DomHelper;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * This class can be used to monitor changes in font size.  Instances will
   * dispatch a {@code goog.dom.FontSizeMonitor.EventType.CHANGE} event.
   * Example usage:
   * <pre>
   * var fms = new goog.dom.FontSizeMonitor();
   * goog.events.listen(fms, goog.dom.FontSizeMonitor.EventType.CHANGE,
   * function(e) {
   * alert('Font size was changed');
   * });
   * </pre>
   */
  class FontSizeMonitor extends FontSizeMonitor_Instance {
    /**
     * Constant for the change event.
     */
    static CHANGE_EVENT : string ;
  }
  class FontSizeMonitor_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * This class can be used to monitor changes in font size.  Instances will
     * dispatch a {@code goog.dom.FontSizeMonitor.EventType.CHANGE} event.
     * Example usage:
     * <pre>
     * var fms = new goog.dom.FontSizeMonitor();
     * goog.events.listen(fms, goog.dom.FontSizeMonitor.EventType.CHANGE,
     * function(e) {
     * alert('Font size was changed');
     * });
     * </pre>
     * @param opt_domHelper DOM helper object that is used to determine where to insert the DOM nodes used to determine when the font size changes.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    resizeTarget_ : Window | null | HTMLElement ;
    disposeInternal ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.FontSizeMonitor'): typeof ಠ_ಠ.clutz.goog.dom.FontSizeMonitor;
}
declare module 'goog:goog.dom.FontSizeMonitor' {
  import alias = ಠ_ಠ.clutz.goog.dom.FontSizeMonitor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.FontSizeMonitor {
  /**
   * The event types that the FontSizeMonitor fires.
   */
  type EventType = string ;
  var EventType : {
    CHANGE : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.FontSizeMonitor.EventType'): typeof ಠ_ಠ.clutz.goog.dom.FontSizeMonitor.EventType;
}
declare module 'goog:goog.dom.FontSizeMonitor.EventType' {
  import alias = ಠ_ಠ.clutz.goog.dom.FontSizeMonitor.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Enum of all input types (for INPUT, BUTTON, SELECT and TEXTAREA elements)
   * specified by the W3C HTML4.01 and HTML5 specifications.
   */
  type InputType = string ;
  var InputType : {
    BUTTON : InputType ,
    CHECKBOX : InputType ,
    COLOR : InputType ,
    DATE : InputType ,
    DATETIME : InputType ,
    DATETIME_LOCAL : InputType ,
    EMAIL : InputType ,
    FILE : InputType ,
    HIDDEN : InputType ,
    IMAGE : InputType ,
    MENU : InputType ,
    MONTH : InputType ,
    NUMBER : InputType ,
    PASSWORD : InputType ,
    RADIO : InputType ,
    RANGE : InputType ,
    RESET : InputType ,
    SEARCH : InputType ,
    SELECT_MULTIPLE : InputType ,
    SELECT_ONE : InputType ,
    SUBMIT : InputType ,
    TEL : InputType ,
    TEXT : InputType ,
    TEXTAREA : InputType ,
    TIME : InputType ,
    URL : InputType ,
    WEEK : InputType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.InputType'): typeof ಠ_ಠ.clutz.goog.dom.InputType;
}
declare module 'goog:goog.dom.InputType' {
  import alias = ಠ_ಠ.clutz.goog.dom.InputType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Creates a new multi part range with no properties.  Do not use this
   * constructor: use one of the goog.dom.Range.createFrom* methods instead.
   */
  class MultiRange extends MultiRange_Instance {
    /**
     * Creates a new range wrapper from the given browser ranges.  Do not
     * use this method directly - please use goog.dom.Range.createFrom* instead.
     * @param browserRanges The browser ranges.
     */
    static createFromBrowserRanges (browserRanges : ( Range | null ) [] | null ) : ಠ_ಠ.clutz.goog.dom.MultiRange ;
    /**
     * Creates a new range wrapper from the given browser selection object.  Do not
     * use this method directly - please use goog.dom.Range.createFrom* instead.
     * @param selection The browser selection object.
     */
    static createFromBrowserSelection (selection : Selection | null ) : ಠ_ಠ.clutz.goog.dom.MultiRange ;
    /**
     * Creates a new range wrapper from the given goog.dom.TextRange objects.  Do
     * not use this method directly - please use goog.dom.Range.createFrom* instead.
     * @param textRanges The text range objects.
     */
    static createFromTextRanges (textRanges : ( ಠ_ಠ.clutz.goog.dom.TextRange | null ) [] | null ) : ಠ_ಠ.clutz.goog.dom.MultiRange ;
  }
  class MultiRange_Instance extends ಠ_ಠ.clutz.goog.dom.AbstractMultiRange_Instance {
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.dom.RangeIterator ;
    clone ( ) : ಠ_ಠ.clutz.goog.dom.MultiRange ;
    /**
     * Collapses this range to a single point, either the first or last point
     * depending on the parameter.  This will result in the number of ranges in this
     * multi range becoming 1.
     * @param toAnchor Whether to collapse to the anchor.
     */
    collapse (toAnchor : boolean ) : any ;
    getBrowserRangeObject ( ) : Range | null | TextRange ;
    getContainer ( ) : Node | null ;
    getEndNode ( ) : Node | null ;
    getEndOffset ( ) : number ;
    getHtmlFragment ( ) : string ;
    getPastableHtml ( ) : string ;
    getSortedRanges ( ) : ( ಠ_ಠ.clutz.goog.dom.TextRange | null ) [] ;
    getStartNode ( ) : Node | null ;
    getStartOffset ( ) : number ;
    getText ( ) : string ;
    getTextRange (i : number ) : ಠ_ಠ.clutz.goog.dom.TextRange | null ;
    getTextRangeCount ( ) : number ;
    getType ( ) : ಠ_ಠ.clutz.goog.dom.RangeType ;
    getValidHtml ( ) : string ;
    isCollapsed ( ) : boolean ;
    isRangeInDocument ( ) : boolean ;
    removeContents ( ) : void ;
    saveUsingDom ( ) : ಠ_ಠ.clutz.goog.dom.SavedRange ;
    select ( ) : void ;
    setBrowserRangeObject (nativeRange : Range | null | TextRange ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.MultiRange'): typeof ಠ_ಠ.clutz.goog.dom.MultiRange;
}
declare module 'goog:goog.dom.MultiRange' {
  import alias = ಠ_ಠ.clutz.goog.dom.MultiRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
   * adds functions to determine the portion of each text node that is selected.
   */
  class MultiRangeIterator extends MultiRangeIterator_Instance {
  }
  class MultiRangeIterator_Instance extends ಠ_ಠ.clutz.goog.dom.RangeIterator {
    /**
     * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
     * adds functions to determine the portion of each text node that is selected.
     * @param range The range to traverse.
     */
    constructor (range : ಠ_ಠ.clutz.goog.dom.MultiRange | null ) ;
    clone ( ) : ಠ_ಠ.clutz.goog.dom.MultiRangeIterator ;
    copyFrom (other : ಠ_ಠ.clutz.goog.dom.TagIterator | null ) : void ;
    getEndNode ( ) : Node | null ;
    getEndTextOffset ( ) : number ;
    getStartNode ( ) : Node | null ;
    getStartTextOffset ( ) : number ;
    isLast ( ) : boolean ;
    next ( ) : Node | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.MultiRangeIterator'): typeof ಠ_ಠ.clutz.goog.dom.MultiRangeIterator;
}
declare module 'goog:goog.dom.MultiRangeIterator' {
  import alias = ಠ_ಠ.clutz.goog.dom.MultiRangeIterator;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * A DOM tree traversal iterator.
   *
   * Starting with the given node, the iterator walks the DOM in order, reporting
   * events for each node.  The iterator acts as a prefix iterator:
   *
   * <pre>
   * &lt;div&gt;1&lt;span&gt;2&lt;/span&gt;3&lt;/div&gt;
   * </pre>
   *
   * Will return the following nodes:
   *
   * <code>[div, 1, span, 2, 3]</code>
   *
   * With the following depths
   *
   * <code>[1, 1, 2, 2, 1]</code>
   *
   * Imagining <code>|</code> represents iterator position, the traversal stops at
   * each of the following locations:
   *
   * <pre>&lt;div&gt;|1|&lt;span&gt;|2|&lt;/span&gt;3|&lt;/div&gt;</pre>
   *
   * The iterator can also be used in reverse mode, which will return the nodes
   * and states in the opposite order.  The depths will be slightly different
   * since, like in normal mode, the depth is computed *after* the last move.
   *
   * Lastly, it is possible to create an iterator that is unconstrained, meaning
   * that it will continue iterating until the end of the document instead of
   * until exiting the start node.
   */
  class NodeIterator extends NodeIterator_Instance {
  }
  class NodeIterator_Instance extends ಠ_ಠ.clutz.goog.dom.TagIterator {
    /**
     * A DOM tree traversal iterator.
     *
     * Starting with the given node, the iterator walks the DOM in order, reporting
     * events for each node.  The iterator acts as a prefix iterator:
     *
     * <pre>
     * &lt;div&gt;1&lt;span&gt;2&lt;/span&gt;3&lt;/div&gt;
     * </pre>
     *
     * Will return the following nodes:
     *
     * <code>[div, 1, span, 2, 3]</code>
     *
     * With the following depths
     *
     * <code>[1, 1, 2, 2, 1]</code>
     *
     * Imagining <code>|</code> represents iterator position, the traversal stops at
     * each of the following locations:
     *
     * <pre>&lt;div&gt;|1|&lt;span&gt;|2|&lt;/span&gt;3|&lt;/div&gt;</pre>
     *
     * The iterator can also be used in reverse mode, which will return the nodes
     * and states in the opposite order.  The depths will be slightly different
     * since, like in normal mode, the depth is computed *after* the last move.
     *
     * Lastly, it is possible to create an iterator that is unconstrained, meaning
     * that it will continue iterating until the end of the document instead of
     * until exiting the start node.
     * @param opt_node The start node.  Defaults to an empty iterator.
     * @param opt_reversed Whether to traverse the tree in reverse.
     * @param opt_unconstrained Whether the iterator is not constrained to the starting node and its children.
     * @param opt_depth The starting tree depth.
     */
    constructor (opt_node ? : Node | null , opt_reversed ? : boolean , opt_unconstrained ? : boolean , opt_depth ? : number ) ;
    /**
     * Moves to the next position in the DOM tree.
     */
    next ( ) : Node | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.NodeIterator'): typeof ಠ_ಠ.clutz.goog.dom.NodeIterator;
}
declare module 'goog:goog.dom.NodeIterator' {
  import alias = ಠ_ಠ.clutz.goog.dom.NodeIterator;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Object to store the offset from one node to another in a way that works on
   * any similar DOM structure regardless of whether it is the same actual nodes.
   */
  class NodeOffset extends NodeOffset_Instance {
  }
  class NodeOffset_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Object to store the offset from one node to another in a way that works on
     * any similar DOM structure regardless of whether it is the same actual nodes.
     * @param node The node to get the offset for.
     * @param baseNode The node to calculate the offset from.
     */
    constructor (node : Node | null , baseNode : Node | null ) ;
    disposeInternal ( ) : void ;
    /**
     * Walk the dom and find the node relative to baseNode.  Returns null on
     * failure.
     * @param baseNode The node to start walking from.  Should be equivalent to the node passed in to the constructor, in that it should have the same contents.
     */
    findTargetNode (baseNode : Node | null ) : Node | null ;
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.NodeOffset'): typeof ಠ_ಠ.clutz.goog.dom.NodeOffset;
}
declare module 'goog:goog.dom.NodeOffset' {
  import alias = ಠ_ಠ.clutz.goog.dom.NodeOffset;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Constants for the nodeType attribute in the Node interface.
   *
   * These constants match those specified in the Node interface. These are
   * usually present on the Node object in recent browsers, but not in older
   * browsers (specifically, early IEs) and thus are given here.
   *
   * In some browsers (early IEs), these are not defined on the Node object,
   * so they are provided here.
   *
   * See http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1950641247
   */
  type NodeType = number ;
  var NodeType : {
    ATTRIBUTE : NodeType ,
    CDATA_SECTION : NodeType ,
    COMMENT : NodeType ,
    DOCUMENT : NodeType ,
    DOCUMENT_FRAGMENT : NodeType ,
    DOCUMENT_TYPE : NodeType ,
    ELEMENT : NodeType ,
    ENTITY : NodeType ,
    ENTITY_REFERENCE : NodeType ,
    NOTATION : NodeType ,
    PROCESSING_INSTRUCTION : NodeType ,
    TEXT : NodeType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.NodeType'): typeof ಠ_ಠ.clutz.goog.dom.NodeType;
}
declare module 'goog:goog.dom.NodeType' {
  import alias = ಠ_ಠ.clutz.goog.dom.NodeType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.Range {
  /**
   * Clears the window's selection.
   * @param opt_win The window to get the selection of.  Defaults to the window this class was defined in.
   */
  function clearSelection (opt_win ? : Window | null ) : void ;
  /**
   * Create a new range wrapper that represents a caret at the given node,
   * accounting for the given offset.  This always creates a TextRange, regardless
   * of whether node is an image node or other control range type node.
   * @param node The node to place a caret at.
   * @param offset The offset within the node to place the caret at.
   */
  function createCaret (node : Node | null , offset : number ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
  /**
   * Create a new range wrapper from the given browser range object.
   * @param range The browser range object.
   * @param opt_isReversed Whether the focus node is before the anchor node.
   */
  function createFromBrowserRange (range : Range | null | TextRange , opt_isReversed ? : boolean ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
  /**
   * Create a new range wrapper from the given browser selection object.  Note
   * that this object does not auto-update if the user changes their selection and
   * should be used as a snapshot.
   * @param selection The browser selection object.
   */
  function createFromBrowserSelection (selection : Object ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
  /**
   * Create a new range wrapper that selects the given node's text.
   * @param node The node to select.
   * @param opt_isReversed Whether the focus node is before the anchor node.
   */
  function createFromNodeContents (node : Node | null , opt_isReversed ? : boolean ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
  /**
   * Create a new range wrapper that selects the area between the given nodes,
   * accounting for the given offsets.
   * @param anchorNode The node to anchor on.
   * @param anchorOffset The offset within the node to anchor on.
   * @param focusNode The node to focus on.
   * @param focusOffset The offset within the node to focus on.
   */
  function createFromNodes (anchorNode : Node | null , anchorOffset : number , focusNode : Node | null , focusOffset : number ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
  /**
   * Create a new selection from the given browser window's current selection.
   * Note that this object does not auto-update if the user changes their
   * selection and should be used as a snapshot.
   * @param opt_win The window to get the selection of.  Defaults to the window this class was defined in.
   */
  function createFromWindow (opt_win ? : Window | null ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
  /**
   * Tests if the window has a selection.
   * @param opt_win The window to check the selection of.  Defaults to the window this class was defined in.
   */
  function hasSelection (opt_win ? : Window | null ) : boolean ;
  /**
   * Returns whether the focus position occurs before the anchor position.
   * @param anchorNode The node to anchor on.
   * @param anchorOffset The offset within the node to anchor on.
   * @param focusNode The node to focus on.
   * @param focusOffset The offset within the node to focus on.
   */
  function isReversed (anchorNode : Node | null , anchorOffset : number , focusNode : Node | null , focusOffset : number ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.Range'): typeof ಠ_ಠ.clutz.goog.dom.Range;
}
declare module 'goog:goog.dom.Range' {
  import alias = ಠ_ಠ.clutz.goog.dom.Range;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Constants for selection endpoints.
   */
  type RangeEndpoint = number ;
  var RangeEndpoint : {
    END : RangeEndpoint ,
    START : RangeEndpoint ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.RangeEndpoint'): typeof ಠ_ಠ.clutz.goog.dom.RangeEndpoint;
}
declare module 'goog:goog.dom.RangeEndpoint' {
  import alias = ಠ_ಠ.clutz.goog.dom.RangeEndpoint;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
   * adds functions to determine the portion of each text node that is selected.
   */
  class RangeIterator extends RangeIterator_Instance {
  }
  class RangeIterator_Instance extends ಠ_ಠ.clutz.goog.dom.TagIterator {
    /**
     * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
     * adds functions to determine the portion of each text node that is selected.
     * @param node The node to start traversal at.  When null, creates an empty iterator.
     * @param opt_reverse Whether to traverse nodes in reverse.
     */
    constructor (node : Node | null , opt_reverse ? : boolean ) ;
    getEndNode ( ) : Node | null ;
    getEndTextOffset ( ) : number ;
    getStartNode ( ) : Node | null ;
    getStartTextOffset ( ) : number ;
    isLast ( ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.RangeIterator'): typeof ಠ_ಠ.clutz.goog.dom.RangeIterator;
}
declare module 'goog:goog.dom.RangeIterator' {
  import alias = ಠ_ಠ.clutz.goog.dom.RangeIterator;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Types of ranges.
   */
  type RangeType = string ;
  var RangeType : {
    CONTROL : RangeType ,
    MULTI : RangeType ,
    TEXT : RangeType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.RangeType'): typeof ಠ_ಠ.clutz.goog.dom.RangeType;
}
declare module 'goog:goog.dom.RangeType' {
  import alias = ಠ_ಠ.clutz.goog.dom.RangeType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * A struct for holding context about saved selections.
   * This can be used to preserve the selection and restore while the DOM is
   * manipulated, or through an asynchronous call. Use goog.dom.Range factory
   * methods to obtain an {@see goog.dom.AbstractRange} instance, and use
   * {@see goog.dom.AbstractRange#saveUsingCarets} to obtain a SavedCaretRange.
   * For editor ranges under content-editable elements or design-mode iframes,
   * prefer using {@see goog.editor.range.saveUsingNormalizedCarets}.
   */
  class SavedCaretRange extends SavedCaretRange_Instance {
    /**
     * A regex that will match all saved range carets in a string.
     */
    static CARET_REGEX : RegExp | null ;
    /**
     * Returns whether two strings of html are equal, ignoring any saved carets.
     * Thus two strings of html whose only difference is the id of their saved
     * carets will be considered equal, since they represent html with the
     * same selection.
     * @param str1 The first string.
     * @param str2 The second string.
     */
    static htmlEqual (str1 : string , str2 : string ) : boolean ;
  }
  class SavedCaretRange_Instance extends ಠ_ಠ.clutz.goog.dom.SavedRange_Instance {
    /**
     * A struct for holding context about saved selections.
     * This can be used to preserve the selection and restore while the DOM is
     * manipulated, or through an asynchronous call. Use goog.dom.Range factory
     * methods to obtain an {@see goog.dom.AbstractRange} instance, and use
     * {@see goog.dom.AbstractRange#saveUsingCarets} to obtain a SavedCaretRange.
     * For editor ranges under content-editable elements or design-mode iframes,
     * prefer using {@see goog.editor.range.saveUsingNormalizedCarets}.
     * @param range The range being saved.
     */
    constructor (range : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ) ;
    /**
     * Dispose the saved range and remove the carets from the DOM.
     */
    disposeInternal ( ) : void ;
    /**
     * Gets carets.
     * @param start If true, returns the start caret. Otherwise, get the end caret.
     */
    getCaret (start : boolean ) : Element | null ;
    /**
     * Removes the carets from the current restoration document.
     * @param opt_range A range whose offsets have already been adjusted for caret removal; it will be adjusted if it is also affected by post-removal operations, such as text node normalization.
     */
    removeCarets (opt_range ? : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null | undefined ;
    /**
     * Reconstruct the selection from the given saved range. Removes carets after
     * restoring the selection. If restore does not dispose this saved range, it may
     * only be restored a second time if innerHTML or some other mechanism is used
     * to restore the carets to the dom.
     */
    restoreInternal ( ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
    /**
     * Sets the document where the range will be restored.
     * @param doc An HTML document.
     */
    setRestorationDocument (doc : Document ) : void ;
    /**
     * Gets the range that this SavedCaretRage represents, without selecting it
     * or removing the carets from the DOM.
     */
    toAbstractRange ( ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.SavedCaretRange'): typeof ಠ_ಠ.clutz.goog.dom.SavedCaretRange;
}
declare module 'goog:goog.dom.SavedCaretRange' {
  import alias = ಠ_ಠ.clutz.goog.dom.SavedCaretRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Abstract interface for a saved range.
   */
  class SavedRange extends SavedRange_Instance {
  }
  class SavedRange_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Restores the range and by default disposes of the saved copy.  Take note:
     * this means the by default SavedRange objects are single use objects.
     * @param opt_stayAlive Whether this SavedRange should stay alive (not be disposed) after restoring the range. Defaults to false (dispose).
     */
    restore (opt_stayAlive ? : boolean ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
    /**
     * Internal method to restore the saved range.
     */
    restoreInternal ( ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.SavedRange'): typeof ಠ_ಠ.clutz.goog.dom.SavedRange;
}
declare module 'goog:goog.dom.SavedRange' {
  import alias = ಠ_ಠ.clutz.goog.dom.SavedRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * A DOM tree traversal iterator.
   *
   * Starting with the given node, the iterator walks the DOM in order, reporting
   * events for the start and end of Elements, and the presence of text nodes. For
   * example:
   *
   * <pre>
   * &lt;div&gt;1&lt;span&gt;2&lt;/span&gt;3&lt;/div&gt;
   * </pre>
   *
   * Will return the following nodes:
   *
   * <code>[div, 1, span, 2, span, 3, div]</code>
   *
   * With the following states:
   *
   * <code>[START, OTHER, START, OTHER, END, OTHER, END]</code>
   *
   * And the following depths
   *
   * <code>[1, 1, 2, 2, 1, 1, 0]</code>
   *
   * Imagining <code>|</code> represents iterator position, the traversal stops at
   * each of the following locations:
   *
   * <pre>
   * &lt;div&gt;|1|&lt;span&gt;|2|&lt;/span&gt;|3|&lt;/div&gt;|
   * </pre>
   *
   * The iterator can also be used in reverse mode, which will return the nodes
   * and states in the opposite order.  The depths will be slightly different
   * since, like in normal mode, the depth is computed *after* the given node.
   *
   * Lastly, it is possible to create an iterator that is unconstrained, meaning
   * that it will continue iterating until the end of the document instead of
   * until exiting the start node.
   */
  class TagIterator extends TagIterator_Instance {
  }
  class TagIterator_Instance extends ಠ_ಠ.clutz.goog.iter.Iterator_Instance < Node | null > {
    /**
     * A DOM tree traversal iterator.
     *
     * Starting with the given node, the iterator walks the DOM in order, reporting
     * events for the start and end of Elements, and the presence of text nodes. For
     * example:
     *
     * <pre>
     * &lt;div&gt;1&lt;span&gt;2&lt;/span&gt;3&lt;/div&gt;
     * </pre>
     *
     * Will return the following nodes:
     *
     * <code>[div, 1, span, 2, span, 3, div]</code>
     *
     * With the following states:
     *
     * <code>[START, OTHER, START, OTHER, END, OTHER, END]</code>
     *
     * And the following depths
     *
     * <code>[1, 1, 2, 2, 1, 1, 0]</code>
     *
     * Imagining <code>|</code> represents iterator position, the traversal stops at
     * each of the following locations:
     *
     * <pre>
     * &lt;div&gt;|1|&lt;span&gt;|2|&lt;/span&gt;|3|&lt;/div&gt;|
     * </pre>
     *
     * The iterator can also be used in reverse mode, which will return the nodes
     * and states in the opposite order.  The depths will be slightly different
     * since, like in normal mode, the depth is computed *after* the given node.
     *
     * Lastly, it is possible to create an iterator that is unconstrained, meaning
     * that it will continue iterating until the end of the document instead of
     * until exiting the start node.
     * @param opt_node The start node.  If unspecified or null, defaults to an empty iterator.
     * @param opt_reversed Whether to traverse the tree in reverse.
     * @param opt_unconstrained Whether the iterator is not constrained to the starting node and its children.
     * @param opt_tagType The type of the position. Defaults to the start of the given node for forward iterators, and the end of the node for reverse iterators.
     * @param opt_depth The starting tree depth.
     */
    constructor (opt_node ? : Node | null , opt_reversed ? : boolean , opt_unconstrained ? : boolean , opt_tagType ? : ಠ_ಠ.clutz.goog.dom.TagWalkType | null , opt_depth ? : number ) ;
    /**
     * Whether the iterator is constrained to the starting node and its children.
     */
    constrained : boolean ;
    /**
     * The tree depth of this position relative to where the iterator started.
     * The depth is considered to be the tree depth just past the current node,
     * so if an iterator is at position
     * <pre>
     * <div>|</div>
     * </pre>
     * (i.e. the node is the div and the type is START_TAG) its depth will be 1.
     */
    depth : number ;
    /**
     * The node this position is located on.
     */
    node : Node | null ;
    /**
     * Whether the node iterator is moving in reverse.
     */
    reversed : boolean ;
    /**
     * The type of this position.
     */
    tagType : ಠ_ಠ.clutz.goog.dom.TagWalkType ;
    clone ( ) : ಠ_ಠ.clutz.goog.dom.TagIterator ;
    /**
     * Replace this iterator's values with values from another. The two iterators
     * must be of the same type.
     * @param other The iterator to copy.
     */
    copyFrom (other : ಠ_ಠ.clutz.goog.dom.TagIterator | null ) : void ;
    /**
     * Test if two iterators are at the same position - i.e. if the node and tagType
     * is the same.  This will still return true if the two iterators are moving in
     * opposite directions or have different constraints.
     * @param other The iterator to compare to.
     */
    equals (other : ಠ_ಠ.clutz.goog.dom.TagIterator | null ) : boolean ;
    isEndTag ( ) : boolean ;
    isNonElement ( ) : boolean ;
    isStartTag ( ) : boolean ;
    isStarted ( ) : boolean ;
    /**
     * Move to the next position in the DOM tree.
     */
    next ( ) : Node | null ;
    /**
     * Restart the current tag.
     */
    restartTag ( ) : void ;
    /**
     * Set the position of the iterator.  Overwrite the tree node and the position
     * type which can be one of the {@link goog.dom.TagWalkType} token types.
     * Only overwrites the tree depth when the parameter is specified.
     * @param node The node to set the position to.
     * @param opt_tagType The type of the position Defaults to the start of the given node.
     * @param opt_depth The tree depth.
     */
    setPosition (node : Node | null , opt_tagType ? : ಠ_ಠ.clutz.goog.dom.TagWalkType | null , opt_depth ? : number ) : void ;
    /**
     * Skip the current tag.
     */
    skipTag ( ) : void ;
    /**
     * Replace the current node with the list of nodes. Reset the iterator so that
     * it visits the first of the nodes next.
     * @param var_args A list of nodes to replace the current node with. If the first argument is array-like, it will be used, otherwise all the arguments are assumed to be nodes.
     */
    splice ( ...var_args : ( Object | null | undefined ) [] ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.TagIterator'): typeof ಠ_ಠ.clutz.goog.dom.TagIterator;
}
declare module 'goog:goog.dom.TagIterator' {
  import alias = ಠ_ಠ.clutz.goog.dom.TagIterator;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Enum of all html tag names specified by the W3C HTML4.01 and HTML5
   * specifications.
   */
  type TagName = string ;
  var TagName : {
    A : TagName ,
    ABBR : TagName ,
    ACRONYM : TagName ,
    ADDRESS : TagName ,
    APPLET : TagName ,
    AREA : TagName ,
    ARTICLE : TagName ,
    ASIDE : TagName ,
    AUDIO : TagName ,
    B : TagName ,
    BASE : TagName ,
    BASEFONT : TagName ,
    BDI : TagName ,
    BDO : TagName ,
    BIG : TagName ,
    BLOCKQUOTE : TagName ,
    BODY : TagName ,
    BR : TagName ,
    BUTTON : TagName ,
    CANVAS : TagName ,
    CAPTION : TagName ,
    CENTER : TagName ,
    CITE : TagName ,
    CODE : TagName ,
    COL : TagName ,
    COLGROUP : TagName ,
    COMMAND : TagName ,
    DATA : TagName ,
    DATALIST : TagName ,
    DD : TagName ,
    DEL : TagName ,
    DETAILS : TagName ,
    DFN : TagName ,
    DIALOG : TagName ,
    DIR : TagName ,
    DIV : TagName ,
    DL : TagName ,
    DT : TagName ,
    EM : TagName ,
    EMBED : TagName ,
    FIELDSET : TagName ,
    FIGCAPTION : TagName ,
    FIGURE : TagName ,
    FONT : TagName ,
    FOOTER : TagName ,
    FORM : TagName ,
    FRAME : TagName ,
    FRAMESET : TagName ,
    H1 : TagName ,
    H2 : TagName ,
    H3 : TagName ,
    H4 : TagName ,
    H5 : TagName ,
    H6 : TagName ,
    HEAD : TagName ,
    HEADER : TagName ,
    HGROUP : TagName ,
    HR : TagName ,
    HTML : TagName ,
    I : TagName ,
    IFRAME : TagName ,
    IMG : TagName ,
    INPUT : TagName ,
    INS : TagName ,
    ISINDEX : TagName ,
    KBD : TagName ,
    KEYGEN : TagName ,
    LABEL : TagName ,
    LEGEND : TagName ,
    LI : TagName ,
    LINK : TagName ,
    MAP : TagName ,
    MARK : TagName ,
    MATH : TagName ,
    MENU : TagName ,
    META : TagName ,
    METER : TagName ,
    NAV : TagName ,
    NOFRAMES : TagName ,
    NOSCRIPT : TagName ,
    OBJECT : TagName ,
    OL : TagName ,
    OPTGROUP : TagName ,
    OPTION : TagName ,
    OUTPUT : TagName ,
    P : TagName ,
    PARAM : TagName ,
    PRE : TagName ,
    PROGRESS : TagName ,
    Q : TagName ,
    RP : TagName ,
    RT : TagName ,
    RUBY : TagName ,
    S : TagName ,
    SAMP : TagName ,
    SCRIPT : TagName ,
    SECTION : TagName ,
    SELECT : TagName ,
    SMALL : TagName ,
    SOURCE : TagName ,
    SPAN : TagName ,
    STRIKE : TagName ,
    STRONG : TagName ,
    STYLE : TagName ,
    SUB : TagName ,
    SUMMARY : TagName ,
    SUP : TagName ,
    SVG : TagName ,
    TABLE : TagName ,
    TBODY : TagName ,
    TD : TagName ,
    TEMPLATE : TagName ,
    TEXTAREA : TagName ,
    TFOOT : TagName ,
    TH : TagName ,
    THEAD : TagName ,
    TIME : TagName ,
    TITLE : TagName ,
    TR : TagName ,
    TRACK : TagName ,
    TT : TagName ,
    U : TagName ,
    UL : TagName ,
    VAR : TagName ,
    VIDEO : TagName ,
    WBR : TagName ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.TagName'): typeof ಠ_ಠ.clutz.goog.dom.TagName;
}
declare module 'goog:goog.dom.TagName' {
  import alias = ಠ_ಠ.clutz.goog.dom.TagName;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * There are three types of token:
   * <ol>
   * <li>{@code START_TAG} - The beginning of a tag.
   * <li>{@code OTHER} - Any non-element node position.
   * <li>{@code END_TAG} - The end of a tag.
   * </ol>
   * Users of this enumeration can rely on {@code START_TAG + END_TAG = 0} and
   * that {@code OTHER = 0}.
   */
  type TagWalkType = number ;
  var TagWalkType : {
    END_TAG : TagWalkType ,
    OTHER : TagWalkType ,
    START_TAG : TagWalkType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.TagWalkType'): typeof ಠ_ಠ.clutz.goog.dom.TagWalkType;
}
declare module 'goog:goog.dom.TagWalkType' {
  import alias = ಠ_ಠ.clutz.goog.dom.TagWalkType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Create a new text selection with no properties.  Do not use this constructor:
   * use one of the goog.dom.Range.createFrom* methods instead.
   */
  class TextRange extends TextRange_Instance {
    /**
     * Create a new range wrapper from the given browser range object.  Do not use
     * this method directly - please use goog.dom.Range.createFrom* instead.
     * @param range The browser range object.
     * @param opt_isReversed Whether the focus node is before the anchor node.
     */
    static createFromBrowserRange (range : Range | null | TextRange , opt_isReversed ? : boolean ) : ಠ_ಠ.clutz.goog.dom.TextRange ;
    /**
     * Create a new range wrapper that selects the given node's text.  Do not use
     * this method directly - please use goog.dom.Range.createFrom* instead.
     * @param node The node to select.
     * @param opt_isReversed Whether the focus node is before the anchor node.
     */
    static createFromNodeContents (node : Node | null , opt_isReversed ? : boolean ) : ಠ_ಠ.clutz.goog.dom.TextRange ;
    /**
     * Create a new range wrapper that selects the area between the given nodes,
     * accounting for the given offsets.  Do not use this method directly - please
     * use goog.dom.Range.createFrom* instead.
     * @param anchorNode The node to start with.
     * @param anchorOffset The offset within the node to start.
     * @param focusNode The node to end with.
     * @param focusOffset The offset within the node to end.
     */
    static createFromNodes (anchorNode : Node | null , anchorOffset : number , focusNode : Node | null , focusOffset : number ) : ಠ_ಠ.clutz.goog.dom.TextRange ;
    /**
     * Tests if the given node is in a document.
     * @param node The node to check.
     */
    static isAttachedNode (node : Node | null ) : boolean ;
  }
  class TextRange_Instance extends ಠ_ಠ.clutz.goog.dom.AbstractRange_Instance {
    /**
     * Returns a TextRangeIterator over the contents of the range.  Regardless of
     * the direction of the range, the iterator will move in document order.
     * @param opt_keys Unused for this iterator.
     */
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.dom.TextRangeIterator ;
    clone ( ) : ಠ_ಠ.clutz.goog.dom.TextRange ;
    collapse (toAnchor : boolean ) : any ;
    containsRange (otherRange : ಠ_ಠ.clutz.goog.dom.AbstractRange | null , opt_allowPartial ? : boolean ) : boolean ;
    getBrowserRangeObject ( ) : Range | null | TextRange ;
    getContainer ( ) : Node | null ;
    getEndNode ( ) : Node | null ;
    getEndOffset ( ) : number ;
    getEndPosition ( ) : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    getHtmlFragment ( ) : string ;
    getPastableHtml ( ) : string ;
    getStartNode ( ) : Node | null ;
    getStartOffset ( ) : number ;
    getStartPosition ( ) : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    getText ( ) : string ;
    getTextRange (i : number ) : ಠ_ಠ.clutz.goog.dom.TextRange | null ;
    getTextRangeCount ( ) : number ;
    getType ( ) : ಠ_ಠ.clutz.goog.dom.RangeType ;
    getValidHtml ( ) : string ;
    insertNode (node : Node | null , before : boolean ) : Node | null ;
    isCollapsed ( ) : boolean ;
    isRangeInDocument ( ) : boolean ;
    isReversed ( ) : boolean ;
    /**
     * Moves a TextRange to the provided nodes and offsets.
     * @param startNode The node to start with.
     * @param startOffset The offset within the node to start.
     * @param endNode The node to end with.
     * @param endOffset The offset within the node to end.
     * @param isReversed Whether the range is reversed.
     */
    moveToNodes (startNode : Node | null , startOffset : number , endNode : Node | null , endOffset : number , isReversed : boolean ) : void ;
    removeContents ( ) : void ;
    saveUsingDom ( ) : ಠ_ಠ.clutz.goog.dom.SavedRange ;
    select ( ) : void ;
    setBrowserRangeObject (nativeRange : Range | null | TextRange ) : boolean ;
    /**
     * Surrounds the text range with the specified element (on Mozilla) or with a
     * clone of the specified element (on IE).  Returns a reference to the
     * surrounding element if the operation was successful; returns null if the
     * operation failed.
     * @param element The element with which the selection is to be surrounded.
     */
    surroundContents (element : Element | null ) : Element | null ;
    surroundWithNodes (startNode : Element | null , endNode : Element | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.TextRange'): typeof ಠ_ಠ.clutz.goog.dom.TextRange;
}
declare module 'goog:goog.dom.TextRange' {
  import alias = ಠ_ಠ.clutz.goog.dom.TextRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
   * adds functions to determine the portion of each text node that is selected.
   */
  class TextRangeIterator extends TextRangeIterator_Instance {
  }
  class TextRangeIterator_Instance extends ಠ_ಠ.clutz.goog.dom.RangeIterator {
    /**
     * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
     * adds functions to determine the portion of each text node that is selected.
     * @param startNode The starting node position.
     * @param startOffset The offset in to startNode.  If startNode is an element, indicates an offset in to childNodes.  If startNode is a text node, indicates an offset in to nodeValue.
     * @param endNode The ending node position.
     * @param endOffset The offset in to endNode.  If endNode is an element, indicates an offset in to childNodes.  If endNode is a text node, indicates an offset in to nodeValue.
     * @param opt_reverse Whether to traverse nodes in reverse.
     */
    constructor (startNode : Node | null , startOffset : number , endNode : Node | null , endOffset : number , opt_reverse ? : boolean ) ;
    clone ( ) : ಠ_ಠ.clutz.goog.dom.TextRangeIterator ;
    copyFrom (other : ಠ_ಠ.clutz.goog.dom.TagIterator | null ) : void ;
    getEndNode ( ) : Node | null ;
    getEndTextOffset ( ) : number ;
    getStartNode ( ) : Node | null ;
    getStartTextOffset ( ) : number ;
    isLast ( ) : boolean ;
    /**
     * Move to the next position in the selection.
     * Throws {@code goog.iter.StopIteration} when it passes the end of the range.
     */
    next ( ) : Node | null ;
    /**
     * Change the end node of the iterator.
     * @param node The new end node.
     */
    setEndNode (node : Node | null ) : void ;
    /**
     * Change the start node of the iterator.
     * @param node The new start node.
     */
    setStartNode (node : Node | null ) : void ;
    skipTag ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.TextRangeIterator'): typeof ಠ_ಠ.clutz.goog.dom.TextRangeIterator;
}
declare module 'goog:goog.dom.TextRangeIterator' {
  import alias = ಠ_ಠ.clutz.goog.dom.TextRangeIterator;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * A tag name with the type of the element stored in the generic.
   */
  class TypedTagName < T > extends TypedTagName_Instance < T > {
    static A : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLAnchorElement > ;
    static ABBR : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static ACRONYM : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static ADDRESS : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static APPLET : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLAppletElement > ;
    static AREA : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLAreaElement > ;
    static ARTICLE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static ASIDE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static AUDIO : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLAudioElement > ;
    static B : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static BASE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLBaseElement > ;
    static BASEFONT : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLBaseFontElement > ;
    static BDI : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static BDO : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static BIG : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static BLOCKQUOTE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLQuoteElement > ;
    static BODY : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLBodyElement > ;
    static BR : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLBRElement > ;
    static BUTTON : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLButtonElement > ;
    static CANVAS : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLCanvasElement > ;
    static CAPTION : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTableCaptionElement > ;
    static CENTER : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static CITE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static CODE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static COL : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTableColElement > ;
    static COLGROUP : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTableColElement > ;
    static COMMAND : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static DATA : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static DATALIST : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLDataListElement > ;
    static DD : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static DEL : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLModElement > ;
    static DETAILS : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLDetailsElement > ;
    static DFN : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static DIALOG : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLDialogElement > ;
    static DIR : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLDirectoryElement > ;
    static DIV : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLDivElement > ;
    static DL : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLDListElement > ;
    static DT : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static EM : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static EMBED : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLEmbedElement > ;
    static FIELDSET : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLFieldSetElement > ;
    static FIGCAPTION : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static FIGURE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static FONT : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLFontElement > ;
    static FOOTER : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static FORM : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLFormElement > ;
    static FRAME : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLFrameElement > ;
    static FRAMESET : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLFrameSetElement > ;
    static H1 : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLHeadingElement > ;
    static H2 : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLHeadingElement > ;
    static H3 : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLHeadingElement > ;
    static H4 : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLHeadingElement > ;
    static H5 : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLHeadingElement > ;
    static H6 : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLHeadingElement > ;
    static HEAD : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLHeadElement > ;
    static HEADER : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static HGROUP : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static HR : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLHRElement > ;
    static HTML : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLHtmlElement > ;
    static I : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static IFRAME : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLIFrameElement > ;
    static IMG : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLImageElement > ;
    static INPUT : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLInputElement > ;
    static INS : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLModElement > ;
    static ISINDEX : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLIsIndexElement > ;
    static KBD : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static KEYGEN : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static LABEL : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLLabelElement > ;
    static LEGEND : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLLegendElement > ;
    static LI : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLLIElement > ;
    static LINK : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLLinkElement > ;
    static MAP : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLMapElement > ;
    static MARK : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static MATH : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static MENU : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLMenuElement > ;
    static META : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLMetaElement > ;
    static METER : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLMeterElement > ;
    static NAV : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static NOFRAMES : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static NOSCRIPT : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static OBJECT : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLObjectElement > ;
    static OL : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLOListElement > ;
    static OPTGROUP : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLOptGroupElement > ;
    static OPTION : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLOptionElement > ;
    static OUTPUT : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLOutputElement > ;
    static P : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLParagraphElement > ;
    static PARAM : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLParamElement > ;
    static PRE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLPreElement > ;
    static PROGRESS : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLProgressElement > ;
    static Q : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLQuoteElement > ;
    static RP : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static RT : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static RUBY : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static S : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static SAMP : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static SCRIPT : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLScriptElement > ;
    static SECTION : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static SELECT : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLSelectElement > ;
    static SMALL : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static SOURCE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLSourceElement > ;
    static SPAN : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLSpanElement > ;
    static STRIKE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static STRONG : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static STYLE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLStyleElement > ;
    static SUB : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static SUMMARY : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static SUP : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static SVG : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static TABLE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTableElement > ;
    static TBODY : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTableSectionElement > ;
    static TD : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTableCellElement > ;
    static TEMPLATE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTemplateElement > ;
    static TEXTAREA : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTextAreaElement > ;
    static TFOOT : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTableSectionElement > ;
    static TH : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTableCellElement > ;
    static THEAD : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTableSectionElement > ;
    static TIME : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static TITLE : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTitleElement > ;
    static TR : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTableRowElement > ;
    static TRACK : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLTrackElement > ;
    static TT : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static U : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static UL : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLUListElement > ;
    static VAR : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
    static VIDEO : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLVideoElement > ;
    static WBR : ಠ_ಠ.clutz.goog.dom.TypedTagName < HTMLElement > ;
  }
  class TypedTagName_Instance < T > {
    private noStructuralTyping_: any;
    /**
     * A tag name with the type of the element stored in the generic.
     */
    constructor (tagName : string ) ;
    /**
     * Returns the tag name.
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.TypedTagName'): typeof ಠ_ಠ.clutz.goog.dom.TypedTagName;
}
declare module 'goog:goog.dom.TypedTagName' {
  import alias = ಠ_ಠ.clutz.goog.dom.TypedTagName;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * This class can be used to monitor changes in the viewport size.  Instances
   * dispatch a {@link goog.events.EventType.RESIZE} event when the viewport size
   * changes.  Handlers can call {@link goog.dom.ViewportSizeMonitor#getSize} to
   * get the new viewport size.
   *
   * Use this class if you want to execute resize/reflow logic each time the
   * user resizes the browser window.  This class is guaranteed to only dispatch
   * {@code RESIZE} events when the pixel dimensions of the viewport change.
   * (Internet Explorer fires resize events if any element on the page is resized,
   * even if the viewport dimensions are unchanged, which can lead to infinite
   * resize loops.)
   *
   * Example usage:
   * <pre>
   * var vsm = new goog.dom.ViewportSizeMonitor();
   * goog.events.listen(vsm, goog.events.EventType.RESIZE, function(e) {
   * alert('Viewport size changed to ' + vsm.getSize());
   * });
   * </pre>
   *
   * Manually verified on IE6, IE7, FF2, Opera 11, Safari 4 and Chrome.
   */
  class ViewportSizeMonitor extends ViewportSizeMonitor_Instance {
    /**
     * Returns a viewport size monitor for the given window.  A new one is created
     * if it doesn't exist already.  This prevents the unnecessary creation of
     * multiple spooling monitors for a window.
     * @param opt_window The window to monitor; defaults to the window in which this code is executing.
     */
    static getInstanceForWindow (opt_window ? : Window | null ) : ಠ_ಠ.clutz.goog.dom.ViewportSizeMonitor ;
    /**
     * Removes and disposes a viewport size monitor for the given window if one
     * exists.
     * @param opt_window The window whose monitor should be removed; defaults to the window in which this code is executing.
     */
    static removeInstanceForWindow (opt_window ? : Window | null ) : void ;
  }
  class ViewportSizeMonitor_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * This class can be used to monitor changes in the viewport size.  Instances
     * dispatch a {@link goog.events.EventType.RESIZE} event when the viewport size
     * changes.  Handlers can call {@link goog.dom.ViewportSizeMonitor#getSize} to
     * get the new viewport size.
     *
     * Use this class if you want to execute resize/reflow logic each time the
     * user resizes the browser window.  This class is guaranteed to only dispatch
     * {@code RESIZE} events when the pixel dimensions of the viewport change.
     * (Internet Explorer fires resize events if any element on the page is resized,
     * even if the viewport dimensions are unchanged, which can lead to infinite
     * resize loops.)
     *
     * Example usage:
     * <pre>
     * var vsm = new goog.dom.ViewportSizeMonitor();
     * goog.events.listen(vsm, goog.events.EventType.RESIZE, function(e) {
     * alert('Viewport size changed to ' + vsm.getSize());
     * });
     * </pre>
     *
     * Manually verified on IE6, IE7, FF2, Opera 11, Safari 4 and Chrome.
     * @param opt_window The window to monitor; defaults to the window in which this code is executing.
     */
    constructor (opt_window ? : Window | null ) ;
    disposeInternal ( ) : void ;
    /**
     * Returns the most recently recorded size of the viewport, in pixels.  May
     * return null if no window resize event has been handled yet.
     */
    getSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.ViewportSizeMonitor'): typeof ಠ_ಠ.clutz.goog.dom.ViewportSizeMonitor;
}
declare module 'goog:goog.dom.ViewportSizeMonitor' {
  import alias = ಠ_ಠ.clutz.goog.dom.ViewportSizeMonitor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.animationFrame {
  /**
   * Returns a function that schedules the two passed-in functions to be run upon
   * the next animation frame. Calling the function again during the same
   * animation frame does nothing.
   *
   * The function under the "measure" key will run first and together with all
   * other functions scheduled under this key and the function under "mutate" will
   * run after that.
   * @param opt_context Context in which to run the function.
   */
  function createTask < THIS > (spec : { measure ? : (a : ಠ_ಠ.clutz.goog.dom.animationFrame.State ) => any , mutate ? : (a : ಠ_ಠ.clutz.goog.dom.animationFrame.State ) => any } , opt_context ? : THIS ) : ( ...a : any [] ) => any ;
  function isRunning ( ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.animationFrame'): typeof ಠ_ಠ.clutz.goog.dom.animationFrame;
}
declare module 'goog:goog.dom.animationFrame' {
  import alias = ಠ_ಠ.clutz.goog.dom.animationFrame;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.animationFrame {
  type Spec = { measure ? : ( ...a : any [] ) => any , mutate ? : ( ...a : any [] ) => any } ;
}
declare module 'goog:goog.dom.animationFrame.Spec' {
  import alias = ಠ_ಠ.clutz.goog.dom.animationFrame.Spec;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.animationFrame {
  /**
   * A type to represent state. Users may add properties as desired.
   */
  class State extends State_Instance {
  }
  class State_Instance {
    private noStructuralTyping_: any;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.animationFrame.State'): typeof ಠ_ಠ.clutz.goog.dom.animationFrame.State;
}
declare module 'goog:goog.dom.animationFrame.State' {
  import alias = ಠ_ಠ.clutz.goog.dom.animationFrame.State;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.animationFrame.polyfill {
  var ENABLED : boolean ;
  /**
   * Installs the requestAnimationFrame (and cancelAnimationFrame) polyfill.
   */
  function install ( ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.animationFrame.polyfill'): typeof ಠ_ಠ.clutz.goog.dom.animationFrame.polyfill;
}
declare module 'goog:goog.dom.animationFrame.polyfill' {
  import alias = ಠ_ಠ.clutz.goog.dom.animationFrame.polyfill;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.annotate {
  /**
   * Calls {@code annotateFn} for each occurrence of a search term in text nodes
   * under {@code node}. Returns the number of hits.
   * @param node A DOM node.
   * @param terms An array of [searchTerm, matchWholeWordOnly] tuples. The matchWholeWordOnly value is a per-term attribute because some terms may be CJK, while others are not. (For correctness, matchWholeWordOnly should always be false for CJK terms.).
   * @param opt_ignoreCase Whether to ignore the case of the query terms when looking for matches.
   * @param opt_classesToSkip Nodes with one of these CSS class names (and its descendants) will be skipped.
   * @param opt_maxMs Number of milliseconds after which this function, if still annotating, should stop and return.
   */
  function annotateTerms (node : Node | null , terms : ( string | boolean ) [] [] | null , annotateFn : (a : number , b : ಠ_ಠ.clutz.goog.html.SafeHtml ) => ಠ_ಠ.clutz.goog.html.SafeHtml , opt_ignoreCase ? : any , opt_classesToSkip ? : string [] | null , opt_maxMs ? : number ) : boolean ;
  /**
   * Annotates occurrences of query terms in plain text. This process consists of
   * identifying all occurrences of all query terms, calling a provided function
   * to get the appropriate replacement HTML for each occurrence, and
   * HTML-escaping all the text.
   * @param text The plain text to be searched.
   * @param terms An array of [{string} searchTerm, {boolean} matchWholeWordOnly] tuples. The matchWholeWordOnly value is a per-term attribute because some terms may be CJK, while others are not. (For correctness, matchWholeWordOnly should always be false for CJK terms.).
   * @param opt_ignoreCase Whether to ignore the case of the query terms when looking for matches.
   */
  function annotateText (text : string , terms : ( any [] | null ) [] | null , annotateFn : (a : number , b : ಠ_ಠ.clutz.goog.html.SafeHtml ) => ಠ_ಠ.clutz.goog.html.SafeHtml , opt_ignoreCase ? : any ) : ಠ_ಠ.clutz.goog.html.SafeHtml | null ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.annotate'): typeof ಠ_ಠ.clutz.goog.dom.annotate;
}
declare module 'goog:goog.dom.annotate' {
  import alias = ಠ_ಠ.clutz.goog.dom.annotate;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.annotate {
  /**
   * A function that takes:
   * (1) the number of the term that is "hit",
   * (2) the HTML (search term) to be annotated,
   * and returns the annotated term as an HTML.
   */
  type AnnotateFn = (a : number , b : ಠ_ಠ.clutz.goog.html.SafeHtml ) => ಠ_ಠ.clutz.goog.html.SafeHtml ;
}
declare module 'goog:goog.dom.annotate.AnnotateFn' {
  import alias = ಠ_ಠ.clutz.goog.dom.annotate.AnnotateFn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
  /**
   * Tests whether the given node can contain a range end point.
   * @param node The node to check.
   */
  function canContainRangeEndpoint (node : Node | null ) : boolean ;
  /**
   * Static method that returns the proper type of browser range.
   * @param range A browser range object.
   */
  function createRange (range : Range | null | TextRange ) : ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange ;
  /**
   * Static method that returns the proper type of browser range.
   * @param node The node to select.
   */
  function createRangeFromNodeContents (node : Node | null ) : ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange ;
  /**
   * Static method that returns the proper type of browser range.
   * @param startNode The node to start with.
   * @param startOffset The offset within the node to start.  This is either the index into the childNodes array for element startNodes or the index into the character array for text startNodes.
   * @param endNode The node to end with.
   * @param endOffset The offset within the node to end.  This is either the index into the childNodes array for element endNodes or the index into the character array for text endNodes.
   */
  function createRangeFromNodes (startNode : Node | null , startOffset : number , endNode : Node | null , endOffset : number ) : ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.browserrange'): typeof ಠ_ಠ.clutz.goog.dom.browserrange;
}
declare module 'goog:goog.dom.browserrange' {
  import alias = ಠ_ಠ.clutz.goog.dom.browserrange;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
  /**
   * The constructor for abstract ranges.  Don't call this from subclasses.
   */
  class AbstractRange extends AbstractRange_Instance {
  }
  class AbstractRange_Instance {
    private noStructuralTyping_: any;
    /**
     * Returns a RangeIterator over the contents of the range.  Regardless of the
     * direction of the range, the iterator will move in document order.
     * @param opt_keys Unused for this iterator.
     */
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.dom.RangeIterator ;
    clone ( ) : ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange | null ;
    /**
     * Collapses the range to one of its boundary points.
     * @param toStart Whether to collapse to the start of the range.
     */
    collapse (a : boolean ) : any ;
    /**
     * Compares one endpoint of this range with the endpoint of another browser
     * native range object.
     * @param range The browser native range to compare against.
     * @param thisEndpoint The endpoint of this range to compare with.
     * @param otherEndpoint The endpoint of the other range to compare with.
     */
    compareBrowserRangeEndpoints (a : Range | null | TextRange , b : ಠ_ಠ.clutz.goog.dom.RangeEndpoint , c : ಠ_ಠ.clutz.goog.dom.RangeEndpoint ) : number ;
    /**
     * Tests if this range contains the given node.
     * @param node The node to test.
     * @param opt_allowPartial If not set or false, the node must be entirely contained in the selection for this function to return true.
     */
    containsNode (node : Node | null , opt_allowPartial ? : boolean ) : boolean ;
    /**
     * Tests if this range contains the given range.
     * @param abstractRange The range to test.
     * @param opt_allowPartial If not set or false, the range must be entirely contained in the selection for this function to return true.
     */
    containsRange (abstractRange : ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange | null , opt_allowPartial ? : boolean ) : boolean ;
    /**
     * Returns the browser native implementation of the range.  Please refrain from
     * using this function - if you find you need the range please add wrappers for
     * the functionality you need rather than just using the native range.
     */
    getBrowserRange ( ) : Range | null | TextRange ;
    /**
     * Returns the deepest node in the tree that contains the entire range.
     */
    getContainer ( ) : Node | null ;
    /**
     * Returns the node the range ends in.
     */
    getEndNode ( ) : Node | null ;
    /**
     * Returns the offset into the node the range ends in.
     */
    getEndOffset ( ) : number ;
    getEndPosition ( ) : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    /**
     * Returns the HTML fragment this range selects.  This is slow on all browsers.
     */
    getHtmlFragment ( ) : string ;
    /**
     * Returns the node the range starts in.
     */
    getStartNode ( ) : Node | null ;
    /**
     * Returns the offset into the node the range starts in.
     */
    getStartOffset ( ) : number ;
    getStartPosition ( ) : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    getText ( ) : string ;
    /**
     * Returns valid HTML for this range.  This is fast on IE, and semi-fast on
     * other browsers.
     */
    getValidHtml ( ) : string ;
    /**
     * Inserts a node before (or after) the range.  The range may be disrupted
     * beyond recovery because of the way this splits nodes.
     * @param node The node to insert.
     * @param before True to insert before, false to insert after.
     */
    insertNode (a : Node | null , b : boolean ) : Node | null ;
    /**
     * Tests if the selection is collapsed - i.e. is just a caret.
     */
    isCollapsed ( ) : boolean ;
    /**
     * Removes the contents of the range from the document.  As a side effect, the
     * selection will be collapsed.  The behavior of content removal is normalized
     * across browsers.  For instance, IE sometimes creates extra text nodes that
     * a W3C browser does not.  That behavior is corrected for.
     */
    removeContents ( ...a : any [] ) : any ;
    /**
     * Set this range as the selection in its window.
     * @param opt_reverse Whether to select the range in reverse, if possible.
     */
    select (a ? : boolean ) : any ;
    /**
     * Surrounds the text range with the specified element (on Mozilla) or with a
     * clone of the specified element (on IE).  Returns a reference to the
     * surrounding element if the operation was successful; returns null if the
     * operation failed.
     * @param element The element with which the selection is to be surrounded.
     */
    surroundContents (a : Element | null ) : Element | null ;
    /**
     * Surrounds this range with the two given nodes.  The range may be disrupted
     * beyond recovery because of the way this splits nodes.
     * @param startNode The node to insert at the start.
     * @param endNode The node to insert at the end.
     */
    surroundWithNodes (a : Element | null , b : Element | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.browserrange.AbstractRange'): typeof ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange;
}
declare module 'goog:goog.dom.browserrange.AbstractRange' {
  import alias = ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
  /**
   * Common error constants.
   */
  type Error = string ;
  var Error : {
    NOT_IMPLEMENTED : Error ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.browserrange.Error'): typeof ಠ_ಠ.clutz.goog.dom.browserrange.Error;
}
declare module 'goog:goog.dom.browserrange.Error' {
  import alias = ಠ_ಠ.clutz.goog.dom.browserrange.Error;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
  /**
   * The constructor for Gecko specific browser ranges.
   */
  class GeckoRange extends GeckoRange_Instance {
    /**
     * Creates a range object that selects the given node's text.
     * @param node The node to select.
     */
    static createFromNodeContents (node : Node | null ) : ಠ_ಠ.clutz.goog.dom.browserrange.GeckoRange ;
    /**
     * Creates a range object that selects between the given nodes.
     * @param startNode The node to start with.
     * @param startOffset The offset within the node to start.
     * @param endNode The node to end with.
     * @param endOffset The offset within the node to end.
     */
    static createFromNodes (startNode : Node | null , startOffset : number , endNode : Node | null , endOffset : number ) : ಠ_ಠ.clutz.goog.dom.browserrange.GeckoRange ;
  }
  class GeckoRange_Instance extends ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange_Instance {
    /**
     * The constructor for Gecko specific browser ranges.
     * @param range The range object.
     */
    constructor (range : Range | null ) ;
    selectInternal (selection : Selection | null , reversed : any ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.browserrange.GeckoRange'): typeof ಠ_ಠ.clutz.goog.dom.browserrange.GeckoRange;
}
declare module 'goog:goog.dom.browserrange.GeckoRange' {
  import alias = ಠ_ಠ.clutz.goog.dom.browserrange.GeckoRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
  /**
   * The constructor for IE specific browser ranges.
   */
  class IeRange extends IeRange_Instance {
    /**
     * Create a range object that selects the given node's text.
     * @param node The node to select.
     */
    static createFromNodeContents (node : Node | null ) : ಠ_ಠ.clutz.goog.dom.browserrange.IeRange ;
    /**
     * Static method that returns the proper type of browser range.
     * @param startNode The node to start with.
     * @param startOffset The offset within the start node.
     * @param endNode The node to end with.
     * @param endOffset The offset within the end node.
     */
    static createFromNodes (startNode : Node | null , startOffset : number , endNode : Node | null , endOffset : number ) : ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange ;
  }
  class IeRange_Instance extends ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange_Instance {
    /**
     * The constructor for IE specific browser ranges.
     * @param range The range object.
     * @param doc The document the range exists in.
     */
    constructor (range : TextRange | null , doc : Document | null ) ;
    clone ( ) : ಠ_ಠ.clutz.goog.dom.browserrange.IeRange ;
    collapse (toStart : boolean ) : any ;
    compareBrowserRangeEndpoints (range : Range | null | TextRange , thisEndpoint : ಠ_ಠ.clutz.goog.dom.RangeEndpoint , otherEndpoint : ಠ_ಠ.clutz.goog.dom.RangeEndpoint ) : number ;
    getBrowserRange ( ) : Range | null | TextRange ;
    getContainer ( ) : Node | null ;
    getEndNode ( ) : Node | null ;
    getEndOffset ( ) : number ;
    getStartNode ( ) : Node | null ;
    getStartOffset ( ) : number ;
    getText ( ) : string ;
    getValidHtml ( ) : string ;
    insertNode (node : Node | null , before : boolean ) : Node | null ;
    isCollapsed ( ) : boolean ;
    /**
     * Tests whether this range is valid (i.e. whether its endpoints are still in
     * the document).  A range becomes invalid when, after this object was created,
     * either one or both of its endpoints are removed from the document.  Use of
     * an invalid range can lead to runtime errors, particularly in IE.
     */
    isRangeInDocument ( ) : boolean ;
    removeContents ( ) : void ;
    select (opt_reverse ? : boolean ) : any ;
    surroundContents (element : Element | null ) : Element | null ;
    surroundWithNodes (startNode : Element | null , endNode : Element | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.browserrange.IeRange'): typeof ಠ_ಠ.clutz.goog.dom.browserrange.IeRange;
}
declare module 'goog:goog.dom.browserrange.IeRange' {
  import alias = ಠ_ಠ.clutz.goog.dom.browserrange.IeRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
  /**
   * The constructor for Opera specific browser ranges.
   */
  class OperaRange extends OperaRange_Instance {
    /**
     * Creates a range object that selects the given node's text.
     * @param node The node to select.
     */
    static createFromNodeContents (node : Node | null ) : ಠ_ಠ.clutz.goog.dom.browserrange.OperaRange ;
    /**
     * Creates a range object that selects between the given nodes.
     * @param startNode The node to start with.
     * @param startOffset The offset within the node to start.
     * @param endNode The node to end with.
     * @param endOffset The offset within the node to end.
     */
    static createFromNodes (startNode : Node | null , startOffset : number , endNode : Node | null , endOffset : number ) : ಠ_ಠ.clutz.goog.dom.browserrange.OperaRange ;
  }
  class OperaRange_Instance extends ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange_Instance {
    /**
     * The constructor for Opera specific browser ranges.
     * @param range The range object.
     */
    constructor (range : Range | null ) ;
    selectInternal (selection : Selection | null , reversed : any ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.browserrange.OperaRange'): typeof ಠ_ಠ.clutz.goog.dom.browserrange.OperaRange;
}
declare module 'goog:goog.dom.browserrange.OperaRange' {
  import alias = ಠ_ಠ.clutz.goog.dom.browserrange.OperaRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
  /**
   * The constructor for W3C specific browser ranges.
   */
  class W3cRange extends W3cRange_Instance {
    /**
     * Creates a range object that selects the given node's text.
     * @param node The node to select.
     */
    static createFromNodeContents (node : Node | null ) : ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange ;
    /**
     * Creates a range object that selects between the given nodes.
     * @param startNode The node to start with.
     * @param startOffset The offset within the start node.
     * @param endNode The node to end with.
     * @param endOffset The offset within the end node.
     */
    static createFromNodes (startNode : Node | null , startOffset : number , endNode : Node | null , endOffset : number ) : ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange ;
    /**
     * Returns a browser range spanning the given node's contents.
     * @param node The node to select.
     */
    static getBrowserRangeForNode (node : Node | null ) : Range ;
    /**
     * Returns a browser range spanning the given nodes.
     * @param startNode The node to start with - should not be a BR.
     * @param startOffset The offset within the start node.
     * @param endNode The node to end with - should not be a BR.
     * @param endOffset The offset within the end node.
     */
    static getBrowserRangeForNodes (startNode : Node | null , startOffset : number , endNode : Node | null , endOffset : number ) : Range ;
  }
  class W3cRange_Instance extends ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange_Instance {
    /**
     * The constructor for W3C specific browser ranges.
     * @param range The range object.
     */
    constructor (range : Range | null ) ;
    range_ : Range | null ;
    clone ( ) : ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange ;
    collapse (toStart : boolean ) : any ;
    compareBrowserRangeEndpoints (range : Range | null | TextRange , thisEndpoint : ಠ_ಠ.clutz.goog.dom.RangeEndpoint , otherEndpoint : ಠ_ಠ.clutz.goog.dom.RangeEndpoint ) : number ;
    getBrowserRange ( ) : Range | null | TextRange ;
    getContainer ( ) : Node | null ;
    getEndNode ( ) : Node | null ;
    getEndOffset ( ) : number ;
    getStartNode ( ) : Node | null ;
    getStartOffset ( ) : number ;
    getText ( ) : string ;
    getValidHtml ( ) : string ;
    insertNode (node : Node | null , before : boolean ) : Node | null ;
    isCollapsed ( ) : boolean ;
    removeContents ( ) : void ;
    select (reverse ? : boolean ) : any ;
    /**
     * Select this range.
     * @param selection Browser selection object.
     * @param reverse Whether to select this range in reverse.
     */
    selectInternal (selection : Selection | null , reverse : any ) : void ;
    surroundContents (element : Element | null ) : Element | null ;
    surroundWithNodes (startNode : Element | null , endNode : Element | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.browserrange.W3cRange'): typeof ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange;
}
declare module 'goog:goog.dom.browserrange.W3cRange' {
  import alias = ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
  /**
   * The constructor for WebKit specific browser ranges.
   */
  class WebKitRange extends WebKitRange_Instance {
    /**
     * Creates a range object that selects the given node's text.
     * @param node The node to select.
     */
    static createFromNodeContents (node : Node | null ) : ಠ_ಠ.clutz.goog.dom.browserrange.WebKitRange ;
    /**
     * Creates a range object that selects between the given nodes.
     * @param startNode The node to start with.
     * @param startOffset The offset within the start node.
     * @param endNode The node to end with.
     * @param endOffset The offset within the end node.
     */
    static createFromNodes (startNode : Node | null , startOffset : number , endNode : Node | null , endOffset : number ) : ಠ_ಠ.clutz.goog.dom.browserrange.WebKitRange ;
  }
  class WebKitRange_Instance extends ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange_Instance {
    /**
     * The constructor for WebKit specific browser ranges.
     * @param range The range object.
     */
    constructor (range : Range | null ) ;
    compareBrowserRangeEndpoints (range : Range | null | TextRange , thisEndpoint : ಠ_ಠ.clutz.goog.dom.RangeEndpoint , otherEndpoint : ಠ_ಠ.clutz.goog.dom.RangeEndpoint ) : number ;
    selectInternal (selection : Selection | null , reversed : any ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.browserrange.WebKitRange'): typeof ಠ_ಠ.clutz.goog.dom.browserrange.WebKitRange;
}
declare module 'goog:goog.dom.browserrange.WebKitRange' {
  import alias = ಠ_ಠ.clutz.goog.dom.browserrange.WebKitRange;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.classes {
  /**
   * Adds a class or classes to an element. Does not add multiples of class names.
   * @param element DOM node to add class to.
   * @param var_args Class names to add.
   */
  function add (element : Node | null ,  ...var_args : ( string | undefined ) [] ) : boolean ;
  /**
   * Adds zero or more classes to an element and removes zero or more as a single
   * operation. Unlike calling {@link goog.dom.classes.add} and
   * {@link goog.dom.classes.remove} separately, this is more efficient as it only
   * parses the class property once.
   *
   * If a class is in both the remove and add lists, it will be added. Thus,
   * you can use this instead of {@link goog.dom.classes.swap} when you have
   * more than two class names that you want to swap.
   * @param element DOM node to swap classes on.
   * @param classesToRemove Class or classes to remove, if null no classes are removed.
   * @param classesToAdd Class or classes to add, if null no classes are added.
   */
  function addRemove (element : Node | null , classesToRemove : string | string [] | null , classesToAdd : string | string [] | null ) : void ;
  /**
   * Adds or removes a class depending on the enabled argument.
   * @param element DOM node to add or remove the class on.
   * @param className Class name to add or remove.
   * @param enabled Whether to add or remove the class (true adds, false removes).
   */
  function enable (element : Node | null , className : string , enabled : boolean ) : void ;
  /**
   * Gets an array of class names on an element
   * @param element DOM node to get class of.
   */
  function get (element : Node | null ) : any [] ;
  /**
   * Returns true if an element has a class.
   * @param element DOM node to test.
   * @param className Class name to test for.
   */
  function has (element : Node | null , className : string ) : boolean ;
  /**
   * Removes a class or classes from an element.
   * @param element DOM node to remove class from.
   * @param var_args Class name(s) to remove.
   */
  function remove (element : Node | null ,  ...var_args : ( string | undefined ) [] ) : boolean ;
  /**
   * Sets the entire class name of an element.
   * @param element DOM node to set class of.
   * @param className Class name(s) to apply to element.
   */
  function set (element : Node | null , className : string ) : void ;
  /**
   * Switches a class on an element from one to another without disturbing other
   * classes. If the fromClass isn't removed, the toClass won't be added.
   * @param element DOM node to swap classes on.
   * @param fromClass Class to remove.
   * @param toClass Class to add.
   */
  function swap (element : Node | null , fromClass : string , toClass : string ) : boolean ;
  /**
   * Removes a class if an element has it, and adds it the element doesn't have
   * it.  Won't affect other classes on the node.
   * @param element DOM node to toggle class on.
   * @param className Class to toggle.
   */
  function toggle (element : Node | null , className : string ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.classes'): typeof ಠ_ಠ.clutz.goog.dom.classes;
}
declare module 'goog:goog.dom.classes' {
  import alias = ಠ_ಠ.clutz.goog.dom.classes;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.classlist {
  /**
   * Override this define at build-time if you know your target supports it.
   */
  var ALWAYS_USE_DOM_TOKEN_LIST : boolean ;
  /**
   * Adds a class to an element.  Does not add multiples of class names.  This
   * method may throw a DOM exception for an invalid or empty class name if
   * DOMTokenList is used.
   * @param element DOM node to add class to.
   * @param className Class name to add.
   */
  function add (element : Element | null , className : string ) : void ;
  /**
   * Convenience method to add a number of class names at once.
   * @param element The element to which to add classes.
   * @param classesToAdd An array-like object containing a collection of class names to add to the element. This method may throw a DOM exception if classesToAdd contains invalid or empty class names.
   */
  function addAll (element : Element | null , classesToAdd : IArrayLike < string > | null ) : void ;
  /**
   * Adds and removes a class of an element.  Unlike
   * {@link goog.dom.classlist.swap}, this method adds the classToAdd regardless
   * of whether the classToRemove was present and had been removed.  This method
   * may throw a DOM exception if the class names are empty or invalid.
   * @param element DOM node to swap classes on.
   * @param classToRemove Class to remove.
   * @param classToAdd Class to add.
   */
  function addRemove (element : Element | null , classToRemove : string , classToAdd : string ) : void ;
  /**
   * Returns true if an element has a class.  This method may throw a DOM
   * exception for an invalid or empty class name if DOMTokenList is used.
   * @param element DOM node to test.
   * @param className Class name to test for.
   */
  function contains (element : Element | null , className : string ) : boolean ;
  /**
   * Adds or removes a class depending on the enabled argument.  This method
   * may throw a DOM exception for an invalid or empty class name if DOMTokenList
   * is used.
   * @param element DOM node to add or remove the class on.
   * @param className Class name to add or remove.
   * @param enabled Whether to add or remove the class (true adds, false removes).
   */
  function enable (element : Element | null , className : string , enabled : boolean ) : void ;
  /**
   * Adds or removes a set of classes depending on the enabled argument.  This
   * method may throw a DOM exception for an invalid or empty class name if
   * DOMTokenList is used.
   * @param element DOM node to add or remove the class on.
   * @param classesToEnable An array-like object containing a collection of class names to add or remove from the element.
   * @param enabled Whether to add or remove the classes (true adds, false removes).
   */
  function enableAll (element : Element , classesToEnable : IArrayLike < string > | null , enabled : boolean ) : void ;
  /**
   * Gets an array-like object of class names on an element.
   * @param element DOM node to get the classes of.
   */
  function get (element : Element | null ) : IArrayLike < any > ;
  /**
   * Removes a class from an element.  This method may throw a DOM exception
   * for an invalid or empty class name if DOMTokenList is used.
   * @param element DOM node to remove class from.
   * @param className Class name to remove.
   */
  function remove (element : Element | null , className : string ) : void ;
  /**
   * Removes a set of classes from an element.  Prefer this call to
   * repeatedly calling {@code goog.dom.classlist.remove} if you want to remove
   * a large set of class names at once.
   * @param element The element from which to remove classes.
   * @param classesToRemove An array-like object containing a collection of class names to remove from the element. This method may throw a DOM exception if classesToRemove contains invalid or empty class names.
   */
  function removeAll (element : Element | null , classesToRemove : IArrayLike < string > | null ) : void ;
  /**
   * Sets the entire class name of an element.
   * @param element DOM node to set class of.
   * @param className Class name(s) to apply to element.
   */
  function set (element : Element | null , className : string ) : void ;
  /**
   * Switches a class on an element from one to another without disturbing other
   * classes. If the fromClass isn't removed, the toClass won't be added.  This
   * method may throw a DOM exception if the class names are empty or invalid.
   * @param element DOM node to swap classes on.
   * @param fromClass Class to remove.
   * @param toClass Class to add.
   */
  function swap (element : Element | null , fromClass : string , toClass : string ) : boolean ;
  /**
   * Removes a class if an element has it, and adds it the element doesn't have
   * it.  Won't affect other classes on the node.  This method may throw a DOM
   * exception if the class name is empty or invalid.
   * @param element DOM node to toggle class on.
   * @param className Class to toggle.
   */
  function toggle (element : Element | null , className : string ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.classlist'): typeof ಠ_ಠ.clutz.goog.dom.classlist;
}
declare module 'goog:goog.dom.classlist' {
  import alias = ಠ_ಠ.clutz.goog.dom.classlist;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.dataset {
  /**
   * Gets a custom data attribute from an element. The key should be
   * in camelCase format (e.g "keyName" for the "data-key-name" attribute).
   * @param element DOM node to get the custom data attribute from.
   * @param key Key for the custom data attribute.
   */
  function get (element : Element | null , key : string ) : string | null ;
  /**
   * Gets all custom data attributes as a string map.  The attribute names will be
   * camel cased (e.g., data-foo-bar -> dataset['fooBar']).  This operation is not
   * safe for attributes having camel-cased names clashing with already existing
   * properties (e.g., data-to-string -> dataset['toString']).
   * @param element DOM node to get the data attributes from.
   */
  function getAll (element : Element ) : Object ;
  /**
   * Checks whether custom data attribute exists on an element. The key should be
   * in camelCase format (e.g "keyName" for the "data-key-name" attribute).
   * @param element DOM node to get the custom data attribute from.
   * @param key Key for the custom data attribute.
   */
  function has (element : Element | null , key : string ) : boolean ;
  /**
   * Removes a custom data attribute from an element. The key should be
   * in camelCase format (e.g "keyName" for the "data-key-name" attribute).
   * @param element DOM node to get the custom data attribute from.
   * @param key Key for the custom data attribute.
   */
  function remove (element : Element | null , key : string ) : void ;
  /**
   * Sets a custom data attribute on an element. The key should be
   * in camelCase format (e.g "keyName" for the "data-key-name" attribute).
   * @param element DOM node to set the custom data attribute on.
   * @param key Key for the custom data attribute.
   * @param value Value for the custom data attribute.
   */
  function set (element : Element | null , key : string , value : string ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.dataset'): typeof ಠ_ಠ.clutz.goog.dom.dataset;
}
declare module 'goog:goog.dom.dataset' {
  import alias = ಠ_ಠ.clutz.goog.dom.dataset;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.forms {
  /**
   * Focuses, and optionally selects the content of, a form element.
   * @param el The form element.
   */
  function focusAndSelect (el : Element | null ) : void ;
  /**
   * Returns form data as a map of name to value arrays. This doesn't
   * support file inputs.
   * @param form The form.
   */
  function getFormDataMap (form : HTMLFormElement | null ) : ಠ_ಠ.clutz.goog.structs.Map < string , string [] > ;
  /**
   * Returns the form data as an application/x-www-url-encoded string. This
   * doesn't support file inputs.
   * @param form The form.
   */
  function getFormDataString (form : HTMLFormElement | null ) : string ;
  /**
   * Gets the current value of any element with a type.
   * @param el The element.
   */
  function getValue (el : Element | null ) : string | string [] | null ;
  /**
   * Returns the value of the named form field. In the case of radio buttons,
   * returns the value of the checked button with the given name.
   * @param form The form element.
   * @param name Name of an input to the form.
   */
  function getValueByName (form : HTMLFormElement | null , name : string ) : string [] | null | string ;
  /**
   * Whether the form has a file input.
   * @param form The form.
   */
  function hasFileInput (form : HTMLFormElement | null ) : boolean ;
  /**
   * Whether a form element has a value.
   * @param el The element.
   */
  function hasValue (el : Element | null ) : boolean ;
  /**
   * Whether a named form field has a value.
   * @param form The form element.
   * @param name Name of an input to the form.
   */
  function hasValueByName (form : HTMLFormElement | null , name : string ) : boolean ;
  /**
   * Enables or disables either all elements in a form or a single form element.
   * @param el The element, either a form or an element within a form.
   * @param disabled Whether the element should be disabled.
   */
  function setDisabled (el : Element | null , disabled : boolean ) : void ;
  /**
   * Sets the current value of any element with a type.
   * @param el The element.
   * @param opt_value The value to give to the element, which will be coerced by the browser in the default case using toString. This value should be an array for setting the value of select multiple elements.
   */
  function setValue (el : Element | null , opt_value ? : any ) : void ;
  /**
   * Submits form data via a new window. This hides references to the parent
   * window and should be used when submitting forms to untrusted 3rd party urls.
   * @param actionUri uri to submit form content to.
   * @param method HTTP method used to submit the form.
   * @param formData A map of the form data as field name to arrays of values.
   */
  function submitFormDataInNewWindow (actionUri : string , method : string , formData : ಠ_ಠ.clutz.goog.structs.Map < string , string [] > ) : boolean ;
  /**
   * Submits form data via a new window. This hides references to the parent
   * window and should be used when submitting forms to untrusted 3rd party urls.
   * By default, this uses the action and method of the specified form
   * element. It is possible to override the default action and method if an
   * optional submit element with formaction and/or formmethod attributes is
   * provided.
   * @param form The form.
   * @param opt_submitElement The `<button>` or `<input>` element used to submit the form. The element should have a submit type.
   */
  function submitFormInNewWindow (form : HTMLFormElement , opt_submitElement ? : HTMLElement ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.forms'): typeof ಠ_ಠ.clutz.goog.dom.forms;
}
declare module 'goog:goog.dom.forms' {
  import alias = ಠ_ಠ.clutz.goog.dom.forms;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.fullscreen {
  /**
   * Exits full screen.
   * @param opt_domHelper The DomHelper for the DOM being queried. If not provided, use the current DOM.
   */
  function exitFullScreen (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper ) : void ;
  /**
   * Get the root element in full screen mode.
   * @param opt_domHelper The DomHelper for the DOM being queried. If not provided, use the current DOM.
   */
  function getFullScreenElement (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper ) : Element | null ;
  /**
   * Determines if the document is full screen.
   * @param opt_domHelper The DomHelper for the DOM being queried. If not provided, use the current DOM.
   */
  function isFullScreen (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper ) : boolean ;
  /**
   * Determines if full screen is supported.
   * @param opt_domHelper The DomHelper for the DOM being queried. If not provided, use the current DOM.
   */
  function isSupported (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper ) : boolean ;
  /**
   * Requests putting the element in full screen.
   * @param element The element to put full screen.
   */
  function requestFullScreen (element : Element ) : void ;
  /**
   * Requests putting the element in full screen with full keyboard access.
   * @param element The element to put full screen.
   */
  function requestFullScreenWithKeys (element : Element ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.fullscreen'): typeof ಠ_ಠ.clutz.goog.dom.fullscreen;
}
declare module 'goog:goog.dom.fullscreen' {
  import alias = ಠ_ಠ.clutz.goog.dom.fullscreen;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.fullscreen {
  /**
   * Event types for full screen.
   */
  type EventType = string ;
  var EventType : {
    CHANGE : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.fullscreen.EventType'): typeof ಠ_ಠ.clutz.goog.dom.fullscreen.EventType;
}
declare module 'goog:goog.dom.fullscreen.EventType' {
  import alias = ಠ_ಠ.clutz.goog.dom.fullscreen.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.iframe {
  /**
   * Safe source for a blank iframe.
   *
   * Intentionally not about:blank for IE, which gives mixed content warnings in
   * IE6 over HTTPS. Using 'about:blank' for all other browsers to support Content
   * Security Policy (CSP). According to http://www.w3.org/TR/CSP/ CSP does not
   * allow inline javascript by default.
   */
  var BLANK_SOURCE : string ;
  /**
   * Safe source for a new blank iframe that may not cause a new load of the
   * iframe. This is different from {@code goog.dom.iframe.BLANK_SOURCE} in that
   * it will allow an iframe to be loaded synchronously in more browsers, notably
   * Gecko, following the javascript protocol spec.
   *
   * NOTE: This should not be used to replace the source of an existing iframe.
   * The new src value will be ignored, per the spec.
   *
   * Due to cross-browser differences, the load is not guaranteed  to be
   * synchronous. If code depends on the load of the iframe,
   * then {@code goog.net.IframeLoadMonitor} or a similar technique should be
   * used.
   *
   * According to
   * http://www.whatwg.org/specs/web-apps/current-work/multipage/webappapis.html#javascript-protocol
   * the 'javascript:""' URL should trigger a new load of the iframe, which may be
   * asynchronous. A void src, such as 'javascript:undefined', does not change
   * the browsing context document's, and thus should not trigger another load.
   *
   * Intentionally not about:blank, which also triggers a load.
   *
   * NOTE: 'javascript:' URL handling spec compliance varies per browser. IE
   * throws an error with 'javascript:undefined'. Webkit browsers will reload the
   * iframe when setting this source on an existing iframe.
   */
  var BLANK_SOURCE_NEW_FRAME : string ;
  /**
   * Creates a completely blank iframe element.
   *
   * The iframe will not caused mixed-content warnings for IE6 under HTTPS.
   * The iframe will also have no borders or padding, so that the styled width
   * and height will be the actual width and height of the iframe.
   *
   * This function currently only attempts to create a blank iframe.  There
   * are no guarantees to the contents of the iframe or whether it is rendered
   * in quirks mode.
   * @param domHelper The dom helper to use.
   * @param opt_styles CSS styles for the iframe.
   */
  function createBlank (domHelper : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_styles ? : ಠ_ಠ.clutz.goog.html.SafeStyle ) : HTMLIFrameElement ;
  /**
   * Creates a same-domain iframe containing preloaded content.
   *
   * This is primarily useful for DOM sandboxing.  One use case is to embed
   * a trusted Javascript app with potentially conflicting CSS styles.  The
   * second case is to reduce the cost of layout passes by the browser -- for
   * example, you can perform sandbox sizing of characters in an iframe while
   * manipulating a heavy DOM in the main window.  The iframe and parent frame
   * can access each others' properties and functions without restriction.
   * @param parentElement The parent element in which to append the iframe.
   * @param opt_headContents Contents to go into the iframe's head.
   * @param opt_bodyContents Contents to go into the iframe's body.
   * @param opt_styles CSS styles for the iframe itself, before adding to the parent element.
   * @param opt_quirks Whether to use quirks mode (false by default).
   */
  function createWithContent (parentElement : Element , opt_headContents ? : ಠ_ಠ.clutz.goog.html.SafeHtml , opt_bodyContents ? : ಠ_ಠ.clutz.goog.html.SafeHtml , opt_styles ? : ಠ_ಠ.clutz.goog.html.SafeStyle , opt_quirks ? : boolean ) : HTMLIFrameElement ;
  /**
   * Writes the contents of a blank iframe that has already been inserted
   * into the document.
   * @param iframe An iframe with no contents, such as one created by {@link #createBlank}, but already appended to a parent document.
   * @param content Content to write to the iframe, from doctype to the HTML close tag.
   */
  function writeSafeContent (iframe : HTMLIFrameElement , content : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.iframe'): typeof ಠ_ಠ.clutz.goog.dom.iframe;
}
declare module 'goog:goog.dom.iframe' {
  import alias = ಠ_ಠ.clutz.goog.dom.iframe;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.iter {
  /**
   * Iterator over a Node's ancestors, stopping after the document body.
   */
  class AncestorIterator extends AncestorIterator_Instance {
  }
  class AncestorIterator_Instance extends ಠ_ಠ.clutz.goog.iter.Iterator < any > {
    /**
     * Iterator over a Node's ancestors, stopping after the document body.
     * @param node The node to start with.
     * @param opt_includeNode Whether to return the given node as the first return value from next.
     */
    constructor (node : Node | null , opt_includeNode ? : boolean ) ;
    next ( ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.iter.AncestorIterator'): typeof ಠ_ಠ.clutz.goog.dom.iter.AncestorIterator;
}
declare module 'goog:goog.dom.iter.AncestorIterator' {
  import alias = ಠ_ಠ.clutz.goog.dom.iter.AncestorIterator;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.iter {
  /**
   * Iterator over an Element's children.
   */
  class ChildIterator extends ChildIterator_Instance {
  }
  class ChildIterator_Instance extends ಠ_ಠ.clutz.goog.dom.iter.SiblingIterator {
    /**
     * Iterator over an Element's children.
     * @param element The element to iterate over.
     * @param opt_reverse Optionally traverse children from last to first.
     * @param opt_startIndex Optional starting index.
     */
    constructor (element : Element | null , opt_reverse ? : boolean , opt_startIndex ? : number ) ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.iter.ChildIterator'): typeof ಠ_ಠ.clutz.goog.dom.iter.ChildIterator;
}
declare module 'goog:goog.dom.iter.ChildIterator' {
  import alias = ಠ_ಠ.clutz.goog.dom.iter.ChildIterator;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.iter {
  /**
   * Iterator over a Node's siblings.
   */
  class SiblingIterator extends SiblingIterator_Instance {
  }
  class SiblingIterator_Instance extends ಠ_ಠ.clutz.goog.iter.Iterator < any > {
    /**
     * Iterator over a Node's siblings.
     * @param node The node to start with.
     * @param opt_includeNode Whether to return the given node as the first return value from next.
     * @param opt_reverse Whether to traverse siblings in reverse document order.
     */
    constructor (node : Node | null , opt_includeNode ? : boolean , opt_reverse ? : boolean ) ;
    next ( ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.iter.SiblingIterator'): typeof ಠ_ಠ.clutz.goog.dom.iter.SiblingIterator;
}
declare module 'goog:goog.dom.iter.SiblingIterator' {
  import alias = ಠ_ಠ.clutz.goog.dom.iter.SiblingIterator;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * Utility function to match a string against either a string or a regular
   * expression.
   * @param obj Either a string or a regular expression.
   * @param str The string to match.
   */
  function matchStringOrRegex (obj : string | RegExp | null , str : string ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern'): typeof ಠ_ಠ.clutz.goog.dom.pattern;
}
declare module 'goog:goog.dom.pattern' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * Base pattern class for DOM matching.
   */
  class AbstractPattern extends AbstractPattern_Instance {
  }
  class AbstractPattern_Instance {
    private noStructuralTyping_: any;
    /**
     * The first node matched by this pattern.
     */
    matchedNode : Node | null ;
    /**
     * Test whether this pattern matches the given token.
     * @param token Token to match against.
     * @param type The type of token.
     */
    matchToken (token : Node | null , type : ಠ_ಠ.clutz.goog.dom.TagWalkType ) : ಠ_ಠ.clutz.goog.dom.pattern.MatchType ;
    /**
     * Reset any internal state this pattern keeps.
     */
    reset ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.AbstractPattern'): typeof ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern;
}
declare module 'goog:goog.dom.pattern.AbstractPattern' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * Pattern object that matches any nodes at or below the current tree depth.
   */
  class AllChildren extends AllChildren_Instance {
  }
  class AllChildren_Instance extends ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern_Instance {
    /**
     * Test whether the given token is on the same level.
     * @param token Token to match against.
     * @param type The type of token.
     */
    matchToken (token : Node | null , type : ಠ_ಠ.clutz.goog.dom.TagWalkType ) : ಠ_ಠ.clutz.goog.dom.pattern.MatchType ;
    /**
     * Reset any internal state this pattern keeps.
     */
    reset ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.AllChildren'): typeof ಠ_ಠ.clutz.goog.dom.pattern.AllChildren;
}
declare module 'goog:goog.dom.pattern.AllChildren' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.AllChildren;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * Pattern object that matches any nodes at or below the current tree depth.
   */
  class ChildMatches extends ChildMatches_Instance {
  }
  class ChildMatches_Instance extends ಠ_ಠ.clutz.goog.dom.pattern.AllChildren_Instance {
    /**
     * Pattern object that matches any nodes at or below the current tree depth.
     * @param childPattern Pattern to collect child matches of.
     * @param opt_minimumMatches Enforce a minimum nuber of matches. Defaults to 0.
     */
    constructor (childPattern : ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern | null , opt_minimumMatches ? : number ) ;
    /**
     * Array of matched child nodes.
     */
    matches : ( Node | null ) [] | null ;
    /**
     * Test whether the given token is on the same level.
     * @param token Token to match against.
     * @param type The type of token.
     */
    matchToken (token : Node | null , type : ಠ_ಠ.clutz.goog.dom.TagWalkType ) : ಠ_ಠ.clutz.goog.dom.pattern.MatchType ;
    /**
     * Reset any internal state this pattern keeps.
     */
    reset ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.ChildMatches'): typeof ಠ_ಠ.clutz.goog.dom.pattern.ChildMatches;
}
declare module 'goog:goog.dom.pattern.ChildMatches' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.ChildMatches;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * Pattern object that matches a closing tag.
   */
  class EndTag extends EndTag_Instance {
  }
  class EndTag_Instance extends ಠ_ಠ.clutz.goog.dom.pattern.Tag_Instance {
    /**
     * Pattern object that matches a closing tag.
     * @param tag Name of the tag.  Also will accept a regular expression to match against the tag name.
     * @param opt_attrs Optional map of attribute names to desired values. This pattern will only match when all attributes are present and match the string or regular expression value provided here.
     * @param opt_styles Optional map of CSS style names to desired values. This pattern will only match when all styles are present and match the string or regular expression value provided here.
     * @param opt_test Optional function that takes the element as a parameter and returns true if this pattern should match it.
     */
    constructor (tag : string | RegExp | null , opt_attrs ? : Object | null , opt_styles ? : Object | null , opt_test ? : ( ( ...a : any [] ) => any ) | null ) ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.EndTag'): typeof ಠ_ಠ.clutz.goog.dom.pattern.EndTag;
}
declare module 'goog:goog.dom.pattern.EndTag' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.EndTag;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * Pattern object that matches a full tag including all its children.
   */
  class FullTag extends FullTag_Instance {
  }
  class FullTag_Instance extends ಠ_ಠ.clutz.goog.dom.pattern.StartTag_Instance {
    /**
     * Pattern object that matches a full tag including all its children.
     * @param tag Name of the tag.  Also will accept a regular expression to match against the tag name.
     * @param opt_attrs Optional map of attribute names to desired values. This pattern will only match when all attributes are present and match the string or regular expression value provided here.
     * @param opt_styles Optional map of CSS style names to desired values. This pattern will only match when all styles are present and match the string or regular expression value provided here.
     * @param opt_test Optional function that takes the element as a parameter and returns true if this pattern should match it.
     */
    constructor (tag : string | RegExp | null , opt_attrs ? : Object | null , opt_styles ? : Object | null , opt_test ? : ( ( ...a : any [] ) => any ) | null ) ;
    /**
     * Test whether the given token is a start tag token which matches the tag name,
     * style, and attributes provided in the constructor.
     * @param token Token to match against.
     * @param type The type of token.
     */
    matchToken (token : Node | null , type : ಠ_ಠ.clutz.goog.dom.TagWalkType ) : ಠ_ಠ.clutz.goog.dom.pattern.MatchType ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.FullTag'): typeof ಠ_ಠ.clutz.goog.dom.pattern.FullTag;
}
declare module 'goog:goog.dom.pattern.FullTag' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.FullTag;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * When matched to a token, a pattern may return any of the following statuses:
   * <ol>
   * <li><code>NO_MATCH</code> - The pattern does not match.  This is the only
   * value that evaluates to <code>false</code> in a boolean context.
   * <li><code>MATCHING</code> - The token is part of an incomplete match.
   * <li><code>MATCH</code> - The token completes a match.
   * <li><code>BACKTRACK_MATCH</code> - The token does not match, but indicates
   * the end of a repetitive match.  For instance, in regular expressions,
   * the pattern <code>/a+/</code> would match <code>'aaaaaaaab'</code>.
   * Every <code>'a'</code> token would give a status of
   * <code>MATCHING</code> while the <code>'b'</code> token would give a
   * status of <code>BACKTRACK_MATCH</code>.
   * </ol>
   */
  type MatchType = number ;
  var MatchType : {
    BACKTRACK_MATCH : MatchType ,
    MATCH : MatchType ,
    MATCHING : MatchType ,
    NO_MATCH : MatchType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.MatchType'): typeof ಠ_ಠ.clutz.goog.dom.pattern.MatchType;
}
declare module 'goog:goog.dom.pattern.MatchType' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.MatchType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * Given a set of patterns and a root node, this class tests the patterns in
   * parallel.
   *
   * It is not (yet) a smart matcher - it doesn't do any advanced backtracking.
   * Given the pattern <code>DIV, SPAN</code> the matcher will not match
   * <code>DIV, DIV, SPAN</code> because it starts matching at the first
   * <code>DIV</code>, fails to match <code>SPAN</code> at the second, and never
   * backtracks to try again.
   *
   * It is also possible to have a set of complex patterns that when matched in
   * parallel will miss some possible matches.  Running multiple times will catch
   * all matches eventually.
   */
  class Matcher extends Matcher_Instance {
  }
  class Matcher_Instance {
    private noStructuralTyping_: any;
    /**
     * Adds a pattern to be matched.  The callback can return an object whose keys
     * are processing instructions.
     * @param pattern The pattern to add.
     * @param callback Function to call when a match is found.  Uses the above semantics.
     */
    addPattern (pattern : ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern | null , callback : ( ( ...a : any [] ) => any ) | null ) : void ;
    /**
     * Match the set of patterns against a match tree.
     * @param node The root node of the tree to match.
     */
    match (node : Node | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.Matcher'): typeof ಠ_ಠ.clutz.goog.dom.pattern.Matcher;
}
declare module 'goog:goog.dom.pattern.Matcher' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.Matcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * Pattern object that matches any node of the given type.
   */
  class NodeType extends NodeType_Instance {
  }
  class NodeType_Instance extends ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern_Instance {
    /**
     * Pattern object that matches any node of the given type.
     * @param nodeType The node type to match.
     */
    constructor (nodeType : ಠ_ಠ.clutz.goog.dom.NodeType ) ;
    /**
     * Test whether the given token is a text token which matches the string or
     * regular expression provided in the constructor.
     * @param token Token to match against.
     * @param type The type of token.
     */
    matchToken (token : Node | null , type : ಠ_ಠ.clutz.goog.dom.TagWalkType ) : ಠ_ಠ.clutz.goog.dom.pattern.MatchType ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.NodeType'): typeof ಠ_ಠ.clutz.goog.dom.pattern.NodeType;
}
declare module 'goog:goog.dom.pattern.NodeType' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.NodeType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * Pattern object that matches a repetition of another pattern.
   */
  class Repeat extends Repeat_Instance {
  }
  class Repeat_Instance extends ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern_Instance {
    /**
     * Pattern object that matches a repetition of another pattern.
     * @param pattern The pattern to repetitively match.
     * @param opt_minimum The minimum number of times to match.  Defaults to 0.
     * @param opt_maximum The maximum number of times to match.  Defaults to unlimited.
     */
    constructor (pattern : ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern | null , opt_minimum ? : number , opt_maximum ? : number ) ;
    /**
     * Number of times the pattern has matched.
     */
    count : number ;
    matchedNode : Node | null ;
    /**
     * The matched nodes.
     */
    matches : ( Node | null ) [] | null ;
    /**
     * Test whether the given token continues a repeated series of matches of the
     * pattern given in the constructor.
     * @param token Token to match against.
     * @param type The type of token.
     */
    matchToken (token : Node | null , type : ಠ_ಠ.clutz.goog.dom.TagWalkType ) : ಠ_ಠ.clutz.goog.dom.pattern.MatchType ;
    /**
     * Reset any internal state this pattern keeps.
     */
    reset ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.Repeat'): typeof ಠ_ಠ.clutz.goog.dom.pattern.Repeat;
}
declare module 'goog:goog.dom.pattern.Repeat' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.Repeat;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * Pattern object that matches a sequence of other patterns.
   */
  class Sequence extends Sequence_Instance {
  }
  class Sequence_Instance extends ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern_Instance {
    /**
     * Pattern object that matches a sequence of other patterns.
     * @param patterns Ordered array of patterns to match.
     * @param opt_ignoreWhitespace Optional flag to ignore text nodes consisting entirely of whitespace.  The default is to not ignore them.
     */
    constructor (patterns : ( ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern | null ) [] | null , opt_ignoreWhitespace ? : boolean ) ;
    matchedNode : Node | null ;
    /**
     * Ordered array of patterns to match.
     */
    patterns : ( ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern | null ) [] | null ;
    /**
     * Test whether the given token starts, continues, or finishes the sequence
     * of patterns given in the constructor.
     * @param token Token to match against.
     * @param type The type of token.
     */
    matchToken (token : Node | null , type : ಠ_ಠ.clutz.goog.dom.TagWalkType ) : ಠ_ಠ.clutz.goog.dom.pattern.MatchType ;
    /**
     * Reset any internal state this pattern keeps.
     */
    reset ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.Sequence'): typeof ಠ_ಠ.clutz.goog.dom.pattern.Sequence;
}
declare module 'goog:goog.dom.pattern.Sequence' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.Sequence;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * Pattern object that matches an opening tag.
   */
  class StartTag extends StartTag_Instance {
  }
  class StartTag_Instance extends ಠ_ಠ.clutz.goog.dom.pattern.Tag_Instance {
    /**
     * Pattern object that matches an opening tag.
     * @param tag Name of the tag.  Also will accept a regular expression to match against the tag name.
     * @param opt_attrs Optional map of attribute names to desired values. This pattern will only match when all attributes are present and match the string or regular expression value provided here.
     * @param opt_styles Optional map of CSS style names to desired values. This pattern will only match when all styles are present and match the string or regular expression value provided here.
     * @param opt_test Optional function that takes the element as a parameter and returns true if this pattern should match it.
     */
    constructor (tag : string | RegExp | null , opt_attrs ? : Object | null , opt_styles ? : Object | null , opt_test ? : ( ( ...a : any [] ) => any ) | null ) ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.StartTag'): typeof ಠ_ಠ.clutz.goog.dom.pattern.StartTag;
}
declare module 'goog:goog.dom.pattern.StartTag' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.StartTag;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * Pattern object that matches an tag.
   */
  class Tag extends Tag_Instance {
  }
  class Tag_Instance extends ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern_Instance {
    /**
     * Pattern object that matches an tag.
     * @param tag Name of the tag.  Also will accept a regular expression to match against the tag name.
     * @param type Type of token to match.
     * @param opt_attrs Optional map of attribute names to desired values. This pattern will only match when all attributes are present and match the string or regular expression value provided here.
     * @param opt_styles Optional map of CSS style names to desired values. This pattern will only match when all styles are present and match the string or regular expression value provided here.
     * @param opt_test Optional function that takes the element as a parameter and returns true if this pattern should match it.
     */
    constructor (tag : string | RegExp | null , type : ಠ_ಠ.clutz.goog.dom.TagWalkType , opt_attrs ? : Object | null , opt_styles ? : Object | null , opt_test ? : ( ( ...a : any [] ) => any ) | null ) ;
    matchedNode : Node | null ;
    /**
     * Test whether the given token is a tag token which matches the tag name,
     * style, and attributes provided in the constructor.
     * @param token Token to match against.
     * @param type The type of token.
     */
    matchToken (token : Node | null , type : ಠ_ಠ.clutz.goog.dom.TagWalkType ) : ಠ_ಠ.clutz.goog.dom.pattern.MatchType ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.Tag'): typeof ಠ_ಠ.clutz.goog.dom.pattern.Tag;
}
declare module 'goog:goog.dom.pattern.Tag' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.Tag;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
  /**
   * Pattern object that matches text by exact matching or regular expressions.
   */
  class Text extends Text_Instance {
  }
  class Text_Instance extends ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern_Instance {
    /**
     * Pattern object that matches text by exact matching or regular expressions.
     * @param match String or regular expression to match against.
     */
    constructor (match : string | RegExp | null ) ;
    matchedNode : Node | null ;
    /**
     * Test whether the given token is a text token which matches the string or
     * regular expression provided in the constructor.
     * @param token Token to match against.
     * @param type The type of token.
     */
    matchToken (token : Node | null , type : ಠ_ಠ.clutz.goog.dom.TagWalkType ) : ಠ_ಠ.clutz.goog.dom.pattern.MatchType ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.Text'): typeof ಠ_ಠ.clutz.goog.dom.pattern.Text;
}
declare module 'goog:goog.dom.pattern.Text' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.Text;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern.callback {
  /**
   * Callback function for use in {@link goog.dom.pattern.Matcher.addPattern}
   * that removes the matched node from the tree and replaces it with its
   * children.  Should be used in conjunction with a
   * {@link goog.dom.pattern.StartTag} pattern.
   * @param node The node matched by the pattern.
   * @param position The position where the match finished.
   */
  function flattenElement (node : Element | null , position : ಠ_ಠ.clutz.goog.dom.TagIterator | null ) : boolean ;
  /**
   * Callback function for use in {@link goog.dom.pattern.Matcher.addPattern}
   * that removes the matched node from the tree.  Should be used in conjunciton
   * with a {@link goog.dom.pattern.StartTag} pattern.
   * @param node The node matched by the pattern.
   * @param position The position where the match finished.
   */
  function removeNode (node : Node | null , position : ಠ_ಠ.clutz.goog.dom.TagIterator | null ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.callback'): typeof ಠ_ಠ.clutz.goog.dom.pattern.callback;
}
declare module 'goog:goog.dom.pattern.callback' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.callback;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern.callback {
  /**
   * Callback class for counting matches.
   */
  class Counter extends Counter_Instance {
  }
  class Counter_Instance {
    private noStructuralTyping_: any;
    /**
     * The count of objects matched so far.
     */
    count : number ;
    /**
     * Get a bound callback function that is suitable as a callback for
     * {@link goog.dom.pattern.Matcher}.
     */
    getCallback ( ) : ( ...a : any [] ) => any ;
    /**
     * Reset the counter.
     */
    reset ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.callback.Counter'): typeof ಠ_ಠ.clutz.goog.dom.pattern.callback.Counter;
}
declare module 'goog:goog.dom.pattern.callback.Counter' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.callback.Counter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern.callback {
  /**
   * Callback class for testing for at least one match.
   */
  class Test extends Test_Instance {
  }
  class Test_Instance {
    private noStructuralTyping_: any;
    /**
     * Whether or not the pattern matched.
     */
    matched : boolean ;
    /**
     * Get a bound callback function that is suitable as a callback for
     * {@link goog.dom.pattern.Matcher}.
     */
    getCallback ( ) : ( ...a : any [] ) => any ;
    /**
     * Reset the counter.
     */
    reset ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.pattern.callback.Test'): typeof ಠ_ಠ.clutz.goog.dom.pattern.callback.Test;
}
declare module 'goog:goog.dom.pattern.callback.Test' {
  import alias = ಠ_ಠ.clutz.goog.dom.pattern.callback.Test;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.safe {
  /**
   * Writes known-safe HTML to a document.
   * @param doc The document to be written to.
   * @param html The known-safe HTML to assign.
   */
  function documentWrite (doc : Document , html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
  /**
   * Inserts known-safe HTML into a Node, at the specified position.
   * @param node The node on which to call insertAdjacentHTML.
   * @param position Position where to insert the HTML.
   * @param html The known-safe HTML to insert.
   */
  function insertAdjacentHtml (node : Node , position : ಠ_ಠ.clutz.goog.dom.safe.InsertAdjacentHtmlPosition , html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
  /**
   * Safely opens a URL in a new window (via window.open).
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and passed in to
   * window.open.  If url is of type string however, it is first sanitized
   * using goog.html.SafeUrl.sanitize.
   *
   * Note that this function does not prevent leakages via the referer that is
   * sent by window.open. It is advised to only use this to open 1st party URLs.
   *
   * Example usage:
   * goog.dom.safe.openInWindow(url);
   * which is a safe alternative to
   * window.open(url);
   * The latter can result in XSS vulnerabilities if redirectUrl is a
   * user-/attacker-controlled value.
   * @param url The URL to open.
   * @param opt_openerWin Window of which to call the .open() method. Defaults to the global window.
   * @param opt_name Name of the window to open in. Can be _top, etc as allowed by window.open().
   * @param opt_specs Comma-separated list of specifications, same as in window.open().
   * @param opt_replace Whether to replace the current entry in browser history, same as in window.open().
   */
  function openInWindow (url : string | ಠ_ಠ.clutz.goog.html.SafeUrl , opt_openerWin ? : Window | null , opt_name ? : ಠ_ಠ.clutz.goog.string.Const , opt_specs ? : string , opt_replace ? : boolean ) : Window | null ;
  /**
   * Safely assigns a URL to an anchor element's href property.
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to
   * anchor's href property.  If url is of type string however, it is first
   * sanitized using goog.html.SafeUrl.sanitize.
   *
   * Example usage:
   * goog.dom.safe.setAnchorHref(anchorEl, url);
   * which is a safe alternative to
   * anchorEl.href = url;
   * The latter can result in XSS vulnerabilities if url is a
   * user-/attacker-controlled value.
   * @param anchor The anchor element whose href property is to be assigned to.
   * @param url The URL to assign.
   */
  function setAnchorHref (anchor : HTMLAnchorElement , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl ) : void ;
  /**
   * Safely assigns a URL to an embed element's src property.
   *
   * Example usage:
   * goog.dom.safe.setEmbedSrc(embedEl, url);
   * which is a safe alternative to
   * embedEl.src = url;
   * The latter can result in loading untrusted code unless it is ensured that
   * the URL refers to a trustworthy resource.
   * @param embed The embed element whose src property is to be assigned to.
   * @param url The URL to assign.
   */
  function setEmbedSrc (embed : HTMLEmbedElement , url : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ) : void ;
  /**
   * Safely assigns a URL to a frame element's src property.
   *
   * Example usage:
   * goog.dom.safe.setFrameSrc(frameEl, url);
   * which is a safe alternative to
   * frameEl.src = url;
   * The latter can result in loading untrusted code unless it is ensured that
   * the URL refers to a trustworthy resource.
   * @param frame The frame element whose src property is to be assigned to.
   * @param url The URL to assign.
   */
  function setFrameSrc (frame : HTMLFrameElement , url : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ) : void ;
  /**
   * Safely assigns a URL to an iframe element's src property.
   *
   * Example usage:
   * goog.dom.safe.setIframeSrc(iframeEl, url);
   * which is a safe alternative to
   * iframeEl.src = url;
   * The latter can result in loading untrusted code unless it is ensured that
   * the URL refers to a trustworthy resource.
   * @param iframe The iframe element whose src property is to be assigned to.
   * @param url The URL to assign.
   */
  function setIframeSrc (iframe : HTMLIFrameElement , url : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ) : void ;
  /**
   * Safely assigns a URL to an image element's src property.
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to
   * image's src property.  If url is of type string however, it is first
   * sanitized using goog.html.SafeUrl.sanitize.
   * @param imageElement The image element whose src property is to be assigned to.
   * @param url The URL to assign.
   */
  function setImageSrc (imageElement : HTMLImageElement , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl ) : void ;
  /**
   * Assigns known-safe HTML to an element's innerHTML property.
   * @param elem The element whose innerHTML is to be assigned to.
   * @param html The known-safe HTML to assign.
   */
  function setInnerHtml (elem : Element , html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
  /**
   * Safely sets a link element's href and rel properties. Whether or not
   * the URL assigned to href has to be a goog.html.TrustedResourceUrl
   * depends on the value of the rel property. If rel contains "stylesheet"
   * then a TrustedResourceUrl is required.
   *
   * Example usage:
   * goog.dom.safe.setLinkHrefAndRel(linkEl, url, 'stylesheet');
   * which is a safe alternative to
   * linkEl.rel = 'stylesheet';
   * linkEl.href = url;
   * The latter can result in loading untrusted code unless it is ensured that
   * the URL refers to a trustworthy resource.
   * @param link The link element whose href property is to be assigned to.
   * @param url The URL to assign to the href property. Must be a TrustedResourceUrl if the value assigned to rel contains "stylesheet". A string value is sanitized with goog.html.SafeUrl.sanitize.
   * @param rel The value to assign to the rel property.
   */
  function setLinkHrefAndRel (link : HTMLLinkElement , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl | ಠ_ಠ.clutz.goog.html.TrustedResourceUrl , rel : string ) : void ;
  /**
   * Safely assigns a URL to a Location object's href property.
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to
   * loc's href property.  If url is of type string however, it is first sanitized
   * using goog.html.SafeUrl.sanitize.
   *
   * Example usage:
   * goog.dom.safe.setLocationHref(document.location, redirectUrl);
   * which is a safe alternative to
   * document.location.href = redirectUrl;
   * The latter can result in XSS vulnerabilities if redirectUrl is a
   * user-/attacker-controlled value.
   * @param loc The Location object whose href property is to be assigned to.
   * @param url The URL to assign.
   */
  function setLocationHref (loc : Location , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl ) : void ;
  /**
   * Safely assigns a URL to an object element's data property.
   *
   * Example usage:
   * goog.dom.safe.setObjectData(objectEl, url);
   * which is a safe alternative to
   * objectEl.data = url;
   * The latter can result in loading untrusted code unless setit is ensured that
   * the URL refers to a trustworthy resource.
   * @param object The object element whose data property is to be assigned to.
   * @param url The URL to assign.
   */
  function setObjectData (object : HTMLObjectElement , url : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ) : void ;
  /**
   * Assigns known-safe HTML to an element's outerHTML property.
   * @param elem The element whose outerHTML is to be assigned to.
   * @param html The known-safe HTML to assign.
   */
  function setOuterHtml (elem : Element , html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
  /**
   * Safely assigns a URL to an iframe element's src property.
   *
   * Example usage:
   * goog.dom.safe.setScriptSrc(scriptEl, url);
   * which is a safe alternative to
   * scriptEl.src = url;
   * The latter can result in loading untrusted code unless it is ensured that
   * the URL refers to a trustworthy resource.
   * @param script The script element whose src property is to be assigned to.
   * @param url The URL to assign.
   */
  function setScriptSrc (script : HTMLScriptElement , url : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.safe'): typeof ಠ_ಠ.clutz.goog.dom.safe;
}
declare module 'goog:goog.dom.safe' {
  import alias = ಠ_ಠ.clutz.goog.dom.safe;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.safe {
  type InsertAdjacentHtmlPosition = string ;
  var InsertAdjacentHtmlPosition : {
    AFTERBEGIN : InsertAdjacentHtmlPosition ,
    AFTEREND : InsertAdjacentHtmlPosition ,
    BEFOREBEGIN : InsertAdjacentHtmlPosition ,
    BEFOREEND : InsertAdjacentHtmlPosition ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.safe.InsertAdjacentHtmlPosition'): typeof ಠ_ಠ.clutz.goog.dom.safe.InsertAdjacentHtmlPosition;
}
declare module 'goog:goog.dom.safe.InsertAdjacentHtmlPosition' {
  import alias = ಠ_ಠ.clutz.goog.dom.safe.InsertAdjacentHtmlPosition;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.selection {
  /**
   * Returns the place where the selection ends inside a textarea or a text input
   * @param textfield A textarea or text input.
   */
  function getEnd (textfield : Element | null ) : number ;
  /**
   * Returns the start and end points of the selection inside a textarea or a
   * text input.
   * @param textfield A textarea or text input.
   */
  function getEndPoints (textfield : Element | null ) : number [] ;
  /**
   * Return the place where the selection starts inside a textarea or a text
   * input
   * @param textfield A textarea or text input.
   */
  function getStart (textfield : Element | null ) : number ;
  /**
   * Returns the selected text inside a textarea or a text input
   * @param textfield A textarea or text input.
   */
  function getText (textfield : Element | null ) : string ;
  /**
   * Sets the cursor position within a textfield.
   * @param textfield A textarea or text input.
   * @param pos The position within the text field.
   */
  function setCursorPosition (textfield : Element | null , pos : number ) : void ;
  /**
   * Sets the place where the selection should end inside a text area or a text
   * input
   * @param textfield A textarea or text input.
   * @param pos The position to end the selection at.
   */
  function setEnd (textfield : Element | null , pos : number ) : void ;
  /**
   * Sets the place where the selection should start inside a textarea or a text
   * input
   * @param textfield A textarea or text input.
   * @param pos The position to set the start of the selection at.
   */
  function setStart (textfield : Element | null , pos : number ) : void ;
  /**
   * Sets the selected text inside a textarea or a text input
   * @param textfield A textarea or text input.
   * @param text The text to change the selection to.
   */
  function setText (textfield : Element | null , text : string ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.selection'): typeof ಠ_ಠ.clutz.goog.dom.selection;
}
declare module 'goog:goog.dom.selection' {
  import alias = ಠ_ಠ.clutz.goog.dom.selection;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.tags {
  /**
   * Checks whether the tag is void (with no contents allowed and no legal end
   * tag), for example 'br'.
   * @param tagName The tag name in lower case.
   */
  function isVoidTag (tagName : string ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.tags'): typeof ಠ_ಠ.clutz.goog.dom.tags;
}
declare module 'goog:goog.dom.tags' {
  import alias = ಠ_ಠ.clutz.goog.dom.tags;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.vendor {
  function getPrefixedEventType (eventType : string ) : string ;
  function getPrefixedPropertyName (propertyName : string , opt_object ? : Object ) : string | null ;
  /**
   * Returns the JS vendor prefix used in CSS properties. Different vendors
   * use different methods of changing the case of the property names.
   */
  function getVendorJsPrefix ( ) : string | null ;
  /**
   * Returns the vendor prefix used in CSS properties.
   */
  function getVendorPrefix ( ) : string | null ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.vendor'): typeof ಠ_ಠ.clutz.goog.dom.vendor;
}
declare module 'goog:goog.dom.vendor' {
  import alias = ಠ_ಠ.clutz.goog.dom.vendor;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.xml {
  /**
   * True if browser has ActiveXObject support.
   * Possible override if this test become wrong in coming IE versions.
   */
  var ACTIVEX_SUPPORT : boolean ;
  /**
   * Max XML size for MSXML2.  Used to prevent potential DoS attacks.
   */
  var MAX_ELEMENT_DEPTH : number ;
  /**
   * Max XML size for MSXML2.  Used to prevent potential DoS attacks.
   */
  var MAX_XML_SIZE_KB : number ;
  /**
   * Creates an XML document appropriate for the current JS runtime
   * @param opt_rootTagName The root tag name.
   * @param opt_namespaceUri Namespace URI of the document element.
   * @param opt_preferActiveX Whether to default to ActiveXObject to create Document in IE. Use this if you need xpath support in IE (e.g., selectSingleNode or selectNodes), but be aware that the ActiveXObject does not support various DOM-specific Document methods and attributes.
   */
  function createDocument (opt_rootTagName ? : string , opt_namespaceUri ? : string , opt_preferActiveX ? : boolean ) : Document | null ;
  /**
   * Creates an XML document from a string
   * @param xml The text.
   * @param opt_preferActiveX Whether to default to ActiveXObject to create Document in IE. Use this if you need xpath support in IE (e.g., selectSingleNode or selectNodes), but be aware that the ActiveXObject does not support various DOM-specific Document methods and attributes.
   */
  function loadXml (xml : string , opt_preferActiveX ? : boolean ) : Document | null ;
  /**
   * Selects multiple nodes using an Xpath expression and a root node
   * @param node The root node.
   * @param path Xpath selector.
   */
  function selectNodes (node : Node | null , path : string ) : NodeList < Node > | Node [] ;
  /**
   * Selects a single node using an Xpath expression and a root node
   * @param node The root node.
   * @param path Xpath selector.
   */
  function selectSingleNode (node : Node | null , path : string ) : Node | null ;
  /**
   * Serializes an XML document or subtree to string.
   * @param xml The document or the root node of the subtree.
   */
  function serialize (xml : Document | null | Element ) : string ;
  /**
   * Sets multiple attributes on an element. Differs from goog.dom.setProperties
   * in that it exclusively uses the element's setAttributes method. Use this
   * when you need to ensure that the exact property is available as an attribute
   * and can be read later by the native getAttribute method.
   * @param element XML or DOM element to set attributes on.
   * @param attributes Map of property:value pairs.
   */
  function setAttributes (element : Element , attributes : { [ key: string ]: string } ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.dom.xml'): typeof ಠ_ಠ.clutz.goog.dom.xml;
}
declare module 'goog:goog.dom.xml' {
  import alias = ಠ_ಠ.clutz.goog.dom.xml;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Creates a new abstract data node.
   */
  class AbstractFastDataNode extends AbstractFastDataNode_Instance {
  }
  class AbstractFastDataNode_Instance extends ಠ_ಠ.clutz.goog.ds.DataNodeList_Instance {
    /**
     * Creates a new abstract data node.
     * @param dataName Name of the datanode.
     * @param opt_parent Parent of this data node.
     */
    constructor (dataName : string , opt_parent ? : ಠ_ಠ.clutz.goog.ds.DataNode | null ) ;
    /**
     * Return the name of this data node.
     */
    getDataName ( ) : string ;
    /**
     * Get the path leading to this data node.
     */
    getDataPath ( ) : string ;
    /**
     * Set the name of this data node.
     * @param value Name.
     */
    setDataName (value : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.AbstractFastDataNode'): typeof ಠ_ಠ.clutz.goog.ds.AbstractFastDataNode;
}
declare module 'goog:goog.ds.AbstractFastDataNode' {
  import alias = ಠ_ಠ.clutz.goog.ds.AbstractFastDataNode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Base class for data node functionality, has default implementations for
   * many of the functions.
   *
   * implements {goog.ds.DataNode}
   */
  class BaseDataNode extends BaseDataNode_Instance {
  }
  class BaseDataNode_Instance {
    private noStructuralTyping_: any;
    /**
     * Gets a named child node of the current node
     * @param name The node name.
     * @param opt_canCreate Whether you can create the child node if it doesn't exist already.
     */
    getChildNode (name : string , opt_canCreate ? : boolean ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Gets the value of a child node
     * @param name The node name.
     */
    getChildNodeValue (name : string ) : Object | null ;
    /**
     * Gets all of the child nodes of the current node.
     * Should return an empty DataNode list if no child nodes.
     * @param opt_selector String selector to choose child nodes.
     */
    getChildNodes (opt_selector ? : string ) : ಠ_ಠ.clutz.goog.ds.DataNodeList ;
    /**
     * Get the name of the node relative to the parent node
     */
    getDataName ( ) : string ;
    /**
     * Gets the a qualified data path to this node
     */
    getDataPath ( ) : string ;
    /**
     * Gets the state of the backing data for this node
     */
    getLoadState ( ) : ಠ_ಠ.clutz.goog.ds.LoadState ;
    /**
     * Gets the parent node. Subclasses implement this function
     */
    getParent ( ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Load or reload the backing data for this node
     */
    load ( ) : void ;
    /**
     * Set the value of the node
     * @param value The new value of the node.
     */
    set (a : Object | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.BaseDataNode'): typeof ಠ_ಠ.clutz.goog.ds.BaseDataNode;
}
declare module 'goog:goog.ds.BaseDataNode' {
  import alias = ಠ_ಠ.clutz.goog.ds.BaseDataNode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Simple node list implementation with underlying array and map
   * implements goog.ds.DataNodeList.
   *
   * Names that are reserved for system use and shouldn't be used for data node
   * names: eval, toSource, toString, unwatch, valueOf, watch. Behavior is
   * undefined if these names are used.
   */
  class BasicNodeList extends BasicNodeList_Instance {
  }
  class BasicNodeList_Instance extends ಠ_ಠ.clutz.goog.ds.DataNodeList_Instance {
    /**
     * Simple node list implementation with underlying array and map
     * implements goog.ds.DataNodeList.
     *
     * Names that are reserved for system use and shouldn't be used for data node
     * names: eval, toSource, toString, unwatch, valueOf, watch. Behavior is
     * undefined if these names are used.
     * @param opt_nodes optional nodes to add to list.
     */
    constructor (opt_nodes ? : ( ಠ_ಠ.clutz.goog.ds.DataNode | null ) [] | null ) ;
    indexMap_ : Object ;
    list_ : any [] ;
    map_ : Object ;
    /**
     * Add a node to the node list.
     * If the node has a dataName, uses this for the key in the map.
     * TODO(user) Remove function as well
     * @param node The node to add.
     */
    add (node : ಠ_ಠ.clutz.goog.ds.DataNode | null ) : any ;
    /**
     * Get a node by string key.
     * Returns null if node doesn't exist.
     * @param key String lookup key.
     */
    get (key : string ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Get a node by index
     * Returns null if the index is out of range
     * @param index The index of the node.
     */
    getByIndex (index : number ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Gets the size of the node list
     */
    getCount ( ) : number ;
    /**
     * Get the index of a named node
     * @param name The name of the node to get the index of.
     */
    indexOf (name : string ) : number | undefined ;
    /**
     * Removes a node in the list of a given name
     * @param name Name of the node.
     */
    removeNode (name : string ) : boolean ;
    /**
     * Sets a node in the list of a given name
     * @param name Name of the node.
     * @param node The node.
     */
    setNode (name : string , node : ಠ_ಠ.clutz.goog.ds.DataNode | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.BasicNodeList'): typeof ಠ_ಠ.clutz.goog.ds.BasicNodeList;
}
declare module 'goog:goog.ds.BasicNodeList' {
  import alias = ಠ_ಠ.clutz.goog.ds.BasicNodeList;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Create a DataManger
   */
  class DataManager extends DataManager_Instance {
    /**
     * Clears the global instance (for unit tests to reset state).
     */
    static clearInstance ( ) : void ;
    /**
     * Get the global instance
     */
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ds.DataManager ;
  }
  class DataManager_Instance extends ಠ_ಠ.clutz.goog.ds.DataNode_Instance {
    aliases_ : Object ;
    autoloads_ : ಠ_ಠ.clutz.goog.structs.Map < any , any > ;
    dataSources_ : ಠ_ಠ.clutz.goog.ds.BasicNodeList ;
    eventCount_ : number ;
    indexedListenersByFunction_ : Object ;
    listenerMap_ : Object ;
    listenersByFunction_ : Object ;
    /**
     * Add a data source
     * @param ds The data source.
     * @param opt_autoload Whether to automatically load the data, defaults to false.
     * @param opt_name Optional name, can also get name from the datasource.
     */
    addDataSource (ds : ಠ_ಠ.clutz.goog.ds.DataNode | null , opt_autoload ? : boolean , opt_name ? : string ) : void ;
    /**
     * Adds an indexed listener.
     *
     * Indexed listeners allow for '*' in data paths. If a * exists, will match
     * all values and return the matched values in an array to the callback.
     *
     * Currently uses a promiscuous match algorithm: Matches everything before the
     * first '*', and then does a regex match for all of the returned events.
     * Although this isn't optimized, it is still an improvement as you can collapse
     * 100's of listeners into a single regex match
     * @param fn Callback function, signature (dataPath, id, indexes).
     * @param dataPath Fully qualified data path.
     * @param opt_id A value passed back to the listener when the dataPath is matched.
     */
    addIndexedListener (fn : ( ( ...a : any [] ) => any ) | null , dataPath : string , opt_id ? : string ) : void ;
    /**
     * Adds a listener
     * Listeners should fire when any data with path that has dataPath as substring
     * is changed.
     * TODO(user) Look into better listener handling
     * @param fn Callback function, signature function(dataPath, id).
     * @param dataPath Fully qualified data path.
     * @param opt_id A value passed back to the listener when the dataPath is matched.
     */
    addListener (fn : ( ( ...a : any [] ) => any ) | null , dataPath : string , opt_id ? : string ) : void ;
    /**
     * Create an alias for a data path, very similar to assigning a variable.
     * For example, you can set $CurrentContact -> $Request/Contacts[5], and all
     * references to $CurrentContact will be procesed on $Request/Contacts[5].
     *
     * Aliases will hide datasources of the same name.
     * @param name Alias name, must be a top level path ($Foo).
     * @param dataPath Data path being aliased.
     */
    aliasDataSource (name : string , dataPath : string ) : void ;
    /**
     * Fire a data change event to all listeners
     *
     * If the path matches the path of a listener, the listener will fire
     *
     * If your path is the parent of a listener, the listener will fire. I.e.
     * if $Contacts/bob@bob.com changes, then we will fire listener for
     * $Contacts/bob@bob.com/Name as well, as the assumption is that when
     * a parent changes, all children are invalidated.
     *
     * If your path is the child of a listener, the listener may fire, depending
     * on the ancestor depth.
     *
     * A listener for $Contacts might only be interested if the contact name changes
     * (i.e. $Contacts doesn't fire on $Contacts/bob@bob.com/Name),
     * while a listener for a specific contact might
     * (i.e. $Contacts/bob@bob.com would fire on $Contacts/bob@bob.com/Name).
     * Adding "/..." to a lisetener path listens to all children, and adding "/*" to
     * a listener path listens only to direct children
     * @param dataPath Fully qualified data path.
     */
    fireDataChange (dataPath : string ) : void ;
    /**
     * Get the value of the node
     */
    get ( ...a : any [] ) : Object ;
    /**
     * Gets a named child node of the current node
     * @param name The node name.
     */
    getChildNode (name : string , a ? : boolean ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    getChildNodeValue (name : string ) : any ;
    getChildNodes (opt_selector ? : string ) : ಠ_ಠ.clutz.goog.ds.DataNodeList ;
    /**
     * Get the name of the node relative to the parent node
     */
    getDataName ( ) : string ;
    /**
     * Gets the a qualified data path to this node
     */
    getDataPath ( ) : string ;
    /**
     * Gets a named child node of the current node.
     * @param name The node name.
     */
    getDataSource (name : string ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Get the total count of events fired (mostly for debugging)
     */
    getEventCount ( ) : number ;
    /**
     * Get the total number of listeners (per expression listened to, so may be
     * more than number of times addListener() has been called
     */
    getListenerCount ( ) : number ;
    /**
     * Gets the state of the backing data for this node
     */
    getLoadState ( ) : ಠ_ಠ.clutz.goog.ds.LoadState ;
    /**
     * Whether the value of this node is a homogeneous list of data
     */
    isList ( ) : boolean ;
    /**
     * Load or reload the backing data for this node
     * only loads datasources flagged with autoload
     */
    load ( ) : void ;
    /**
     * Removes indexed listeners with a given callback function, and optional
     * matching datapath and matching id.
     * @param fn Callback function, signature function(dataPath, id).
     * @param opt_dataPath Fully qualified data path.
     * @param opt_id A value passed back to the listener when the dataPath is matched.
     */
    removeIndexedListeners (fn : ( ( ...a : any [] ) => any ) | null , opt_dataPath ? : string , opt_id ? : string ) : void ;
    /**
     * Removes listeners with a given callback function, and optional
     * matching dataPath and matching id
     * @param fn Callback function, signature function(dataPath, id).
     * @param opt_dataPath Fully qualified data path.
     * @param opt_id A value passed back to the listener when the dataPath is matched.
     */
    removeListeners (fn : ( ( ...a : any [] ) => any ) | null , opt_dataPath ? : string , opt_id ? : string ) : void ;
    /**
     * Disables the sending of all data events during the execution of the given
     * callback. This provides a way to avoid useless notifications of small changes
     * when you will eventually send a data event manually that encompasses them
     * all.
     *
     * Note that this function can not be called reentrantly.
     * @param callback Zero-arg function to execute.
     */
    runWithoutFiringDataChanges (callback : ( ( ...a : any [] ) => any ) | null ) : void ;
    set (value : any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.DataManager'): typeof ಠ_ಠ.clutz.goog.ds.DataManager;
}
declare module 'goog:goog.ds.DataManager' {
  import alias = ಠ_ಠ.clutz.goog.ds.DataManager;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Interface for node in rich data tree.
   *
   * Names that are reserved for system use and shouldn't be used for data node
   * names: eval, toSource, toString, unwatch, valueOf, watch. Behavior is
   * undefined if these names are used.
   */
  class DataNode extends DataNode_Instance {
  }
  class DataNode_Instance {
    private noStructuralTyping_: any;
    /**
     * Get the value of the node
     * @param var_args Do not check arity of arguments, because some subclasses require args.
     */
    get ( ...a : any [] ) : any ;
    /**
     * Gets a named child node of the current node
     * @param name The node name.
     * @param opt_canCreate Whether to create a child node if it does not exist.
     */
    getChildNode (a : string , b ? : boolean ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Gets the value of a child node
     * @param name The node name.
     */
    getChildNodeValue (a : string ) : any ;
    /**
     * Gets all of the child nodes of the current node.
     * Should return an empty DataNode list if no child nodes.
     * @param opt_selector String selector to choose child nodes.
     */
    getChildNodes (a ? : string ) : ಠ_ಠ.clutz.goog.ds.DataNodeList ;
    /**
     * Get the name of the node relative to the parent node
     */
    getDataName ( ) : string ;
    /**
     * Gets the a qualified data path to this node
     */
    getDataPath ( ) : string ;
    /**
     * Gets the state of the backing data for this node
     */
    getLoadState ( ) : ಠ_ಠ.clutz.goog.ds.LoadState ;
    /**
     * Whether the value of this node is a homogeneous list of data
     */
    isList ( ) : boolean ;
    /**
     * Load or reload the backing data for this node
     */
    load ( ...a : any [] ) : any ;
    /**
     * Set the value of the node
     * @param value The new value of the node.
     */
    set (a : any ) : any ;
    /**
     * Sets a named child node of the current node.
     * @param name The node name.
     * @param value The value to set, can be DataNode, object, property, or null. If value is null, removes the child node.
     */
    setChildNode (a : string , b : Object | null ) : Object | null ;
    /**
     * Set the name of the node relative to the parent node
     * @param name The name of the node.
     */
    setDataName (a : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.DataNode'): typeof ಠ_ಠ.clutz.goog.ds.DataNode;
}
declare module 'goog:goog.ds.DataNode' {
  import alias = ಠ_ಠ.clutz.goog.ds.DataNode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Interface for node list in rich data tree.
   *
   * Has both map and list-style accessors
   */
  class DataNodeList extends DataNodeList_Instance {
  }
  class DataNodeList_Instance extends ಠ_ಠ.clutz.goog.ds.DataNode_Instance {
    /**
     * Add a node to the node list.
     * If the node has a dataName, uses this for the key in the map.
     * @param node The node to add.
     */
    add (a : ಠ_ಠ.clutz.goog.ds.DataNode | null ) : any ;
    /**
     * Get a node by string key.
     * Returns null if node doesn't exist.
     * @param key String lookup key.
     */
    get (a : string ) : any ;
    /**
     * Get a node by index
     * Returns null if the index is out of range
     * @param index The index of the node.
     */
    getByIndex (a : number ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Gets the size of the node list
     */
    getCount ( ) : number ;
    /**
     * Removes a node in the list of a given name
     * @param name Name of the node.
     */
    removeNode (a : string ) : boolean ;
    /**
     * Sets a node in the list of a given name
     * @param name Name of the node.
     * @param node The node.
     */
    setNode (a : string , b : ಠ_ಠ.clutz.goog.ds.DataNode | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.DataNodeList'): typeof ಠ_ಠ.clutz.goog.ds.DataNodeList;
}
declare module 'goog:goog.ds.DataNodeList' {
  import alias = ಠ_ಠ.clutz.goog.ds.DataNodeList;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Immulatable empty node list
   */
  class EmptyNodeList extends EmptyNodeList_Instance {
  }
  class EmptyNodeList_Instance extends ಠ_ಠ.clutz.goog.ds.BasicNodeList_Instance {
    /**
     * Add a node to the node list.
     * If the node has a dataName, uses this for the key in the map.
     * @param node The node to add.
     */
    add (node : ಠ_ಠ.clutz.goog.ds.DataNode | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.EmptyNodeList'): typeof ಠ_ಠ.clutz.goog.ds.EmptyNodeList;
}
declare module 'goog:goog.ds.EmptyNodeList' {
  import alias = ಠ_ಠ.clutz.goog.ds.EmptyNodeList;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Create a new expression. An expression uses a string expression language, and
   * from this string and a passed in DataNode can evaluate to a value, DataNode,
   * or a DataNodeList.
   */
  class Expr extends Expr_Instance {
    /**
     * For DOM interop - all DOM attribute nodes
     * Attribute nodes have dataName starting with "@"
     */
    static ALL_ATTRIBUTES : ಠ_ಠ.clutz.goog.ds.Expr | null ;
    /**
     * For DOM interop - all DOM child nodes (text + element).
     * Text nodes have dataName #text
     */
    static ALL_CHILD_NODES : ಠ_ಠ.clutz.goog.ds.Expr | null ;
    /**
     * For DOM interop - all DOM element child nodes
     */
    static ALL_ELEMENTS : ಠ_ಠ.clutz.goog.ds.Expr | null ;
    /**
     * Get the count of nodes matching an expression
     */
    static COUNT : ಠ_ಠ.clutz.goog.ds.Expr | null ;
    /**
     * The current node
     */
    static CURRENT : ಠ_ಠ.clutz.goog.ds.Expr | null ;
    /**
     * Get the dataName of a node
     */
    static NAME : ಠ_ಠ.clutz.goog.ds.Expr | null ;
    /**
     * Get the position of the "current" node in the current node list
     * This will only apply for datasources that support the concept of a current
     * node (none exist yet). This is similar to XPath position() and concept of
     * current node
     */
    static POSITION : ಠ_ಠ.clutz.goog.ds.Expr | null ;
    /**
     * Create an expression from a string, can use cached values
     * @param expr The expression string.
     */
    static create (expr : string ) : ಠ_ಠ.clutz.goog.ds.Expr | null ;
  }
  class Expr_Instance {
    private noStructuralTyping_: any;
    /**
     * Create a new expression. An expression uses a string expression language, and
     * from this string and a passed in DataNode can evaluate to a value, DataNode,
     * or a DataNodeList.
     * @param opt_expr The string expression.
     */
    constructor (opt_expr ? : string ) ;
    /**
     * Gets the last part of the expression.
     */
    getLast ( ) : string | null ;
    /**
     * Gets the parent expression of this expression, or null if this is top level
     */
    getNext ( ) : ಠ_ಠ.clutz.goog.ds.Expr | null ;
    /**
     * Evaluate an expression on a data node, and return the first matching node
     * Recursively walks through child nodes to evaluate
     * @param opt_ds Optional datasource to evaluate against. If not provided, evaluates against DataManager global root.
     * @param opt_canCreate If true, will try to create new nodes.
     */
    getNode (opt_ds ? : ಠ_ಠ.clutz.goog.ds.DataNode | null , opt_canCreate ? : boolean ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Evaluate an expression on a data node, and return matching nodes
     * Recursively walks through child nodes to evaluate
     * @param opt_ds Optional datasource to evaluate against. If not provided, evaluates against data root.
     * @param opt_canCreate If true, will try to create new nodes.
     */
    getNodes (opt_ds ? : ಠ_ಠ.clutz.goog.ds.DataNode | null , opt_canCreate ? : boolean ) : ಠ_ಠ.clutz.goog.ds.DataNodeList | null ;
    /**
     * Gets the parent expression of this expression, or null if this is top level
     */
    getParent ( ) : ಠ_ಠ.clutz.goog.ds.Expr | null ;
    /**
     * Get the source data path for the expression
     */
    getSource ( ) : string ;
    /**
     * Evaluate an expression on a data node, and return a value
     * Recursively walks through child nodes to evaluate
     * TODO(user) Support other expression functions
     * @param opt_ds Optional datasource to evaluate against. If not provided, evaluates against DataManager global root.
     */
    getValue (opt_ds ? : ಠ_ಠ.clutz.goog.ds.DataNode | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.Expr'): typeof ಠ_ಠ.clutz.goog.ds.Expr;
}
declare module 'goog:goog.ds.Expr' {
  import alias = ಠ_ಠ.clutz.goog.ds.Expr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Creates a new fast data node, using the properties of root.
   */
  class FastDataNode extends FastDataNode_Instance {
    /**
     * Creates a new FastDataNode structure initialized from object. This will
     * return an instance of the most suitable sub-class of FastDataNode.
     *
     * You should not modify object after creating a fast data node from it
     * or assume that changing object changes the data node. Doing so results
     * in undefined behaviour.
     * @param object Object to initialize data node from.
     * @param dataName Name of data node.
     * @param opt_parent Parent of data node.
     */
    static fromJs (object : Object | null | number | boolean | string , dataName : string , opt_parent ? : ಠ_ಠ.clutz.goog.ds.DataNode | null ) : ಠ_ಠ.clutz.goog.ds.AbstractFastDataNode ;
  }
  class FastDataNode_Instance extends ಠ_ಠ.clutz.goog.ds.AbstractFastDataNode_Instance {
    /**
     * Creates a new fast data node, using the properties of root.
     * @param root JSON-like object to initialize data node from.
     * @param dataName Name of this data node.
     * @param opt_parent Parent of this data node.
     */
    constructor (root : Object | null , dataName : string , opt_parent ? : ಠ_ಠ.clutz.goog.ds.DataNode | null ) ;
    /**
     * Adds a child to this data node.
     * @param value Child node to add.
     */
    add (value : ಠ_ಠ.clutz.goog.ds.DataNode | null ) : any ;
    /**
     * Creates a deep copy of this data node.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.ds.FastDataNode | null ;
    /**
     * Add all attributes of object to this data node.
     * @param object Object to add attributes from.
     */
    extendWith (object : Object | null ) : void ;
    /**
     * Gets the value of this data node (if called without opt_key) or
     * gets a child node (if called with opt_key).
     * @param opt_key Name of child node.
     */
    get (opt_key ? : string ) : any ;
    /**
     * Gets a child node by index. This method has a complexity of O(n) where
     * n is the number of children. If you need a faster implementation of this
     * method, you should use goog.ds.FastListNode.
     * @param index Index of child node (starting from 0).
     */
    getByIndex (index : number ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Get a child node by name.
     * @param name Name of child node.
     * @param opt_create Whether to create the child if it does not exist.
     */
    getChildNode (name : string , opt_create ? : boolean ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Returns the value of a child node. By using this method you can avoid
     * the need to create PrimitiveFastData nodes.
     * @param name Name of child node.
     */
    getChildNodeValue (name : string ) : Object | null ;
    getChildNodes (opt_selector ? : string ) : ಠ_ಠ.clutz.goog.ds.DataNodeList ;
    /**
     * Gets the number of child nodes. This method has a complexity of O(n) where
     * n is the number of children. If you need a faster implementation of this
     * method, you should use goog.ds.FastListNode.
     */
    getCount ( ) : number ;
    /**
     * Returns a javascript object representation of this data node. You should
     * not modify the object returned by this function.
     */
    getJsObject ( ) : Object ;
    /**
     * Returns whether this data node is a list. Always returns false for
     * instances of FastDataNode but may return true for subclasses.
     */
    isList ( ) : boolean ;
    /**
     * Removes a child node.
     */
    removeNode (name : string ) : boolean ;
    /**
     * Not supported for normal FastDataNodes.
     * @param value Value to set data node to.
     */
    set (value : any ) : any ;
    /**
     * Sets a child node. Creates the child if it does not exist.
     *
     * Calling  this function makes any child nodes previously obtained for name
     * invalid. You should not use these child nodes but instead obtain a new
     * instance by calling getChildNode.
     */
    setChildNode (name : string , value : Object | null ) : Object | null ;
    /**
     * Sets a child node.
     * @param name Name of child node.
     * @param value Value of child node.
     */
    setNode (name : string , value : Object | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.FastDataNode'): typeof ಠ_ಠ.clutz.goog.ds.FastDataNode;
}
declare module 'goog:goog.ds.FastDataNode' {
  import alias = ಠ_ಠ.clutz.goog.ds.FastDataNode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Creates a new list node from an array.
   */
  class FastListNode extends FastListNode_Instance {
  }
  class FastListNode_Instance extends ಠ_ಠ.clutz.goog.ds.AbstractFastDataNode_Instance {
    /**
     * Creates a new list node from an array.
     * @param values values hold by this list node.
     * @param dataName name of this node.
     * @param opt_parent parent of this node.
     */
    constructor (values : any [] | null , dataName : string , opt_parent ? : ಠ_ಠ.clutz.goog.ds.DataNode | null ) ;
    map_ : Object | Object ;
    values_ : any [] ;
    /**
     * Adds a child to this data node
     * @param value Child node to add.
     */
    add (value : ಠ_ಠ.clutz.goog.ds.DataNode | null ) : any ;
    /**
     * Gets the value of this data node (if called without opt_key) or
     * gets a child node (if called with opt_key).
     * @param opt_key Name of child node.
     */
    get (opt_key ? : string ) : any [] | null | ಠ_ಠ.clutz.goog.ds.DataNode ;
    /**
     * Gets a child node by (numeric) index.
     * @param index Index of child node (starting from 0).
     */
    getByIndex (index : number ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Get a child node by name.
     * @param key Name of child node.
     * @param opt_create Whether to create the child if it does not exist.
     */
    getChildNode (key : string , opt_create ? : boolean ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Returns the value of a child node.
     * @param key Name of child node.
     */
    getChildNodeValue (key : string ) : any ;
    /**
     * Returns child nodes of this data node. Currently, only supports
     * returning all children.
     */
    getChildNodes (a ? : string ) : ಠ_ಠ.clutz.goog.ds.DataNodeList ;
    /**
     * Gets the number of child nodes.
     */
    getCount ( ) : number ;
    /**
     * Returns a javascript object representation of this data node. You should
     * not modify the object returned by this function.
     */
    getJsObject ( ) : Object ;
    /**
     * Returns the index of a named child nodes. This method only works if
     * this list uses mixed name/indexed lookup, i.e. if its child node have
     * an 'id' attribute.
     * @param name Name of child node to determine index of.
     */
    indexOf (name : string ) : number ;
    /**
     * Returns whether this data node is a list. Always returns true.
     */
    isList ( ) : boolean ;
    /**
     * Removes a child node.
     */
    removeNode (name : string ) : boolean ;
    /**
     * Not supported for FastListNodes.
     * @param value Value to set data node to.
     */
    set (value : any ) : any ;
    /**
     * Sets a child node. Creates the child if it does not exist. To set
     * children at a certain index, use a key of the form '[index]'. Note, that
     * you can only set values at existing numeric indices. To add a new node
     * to this list, you have to use the add method.
     *
     * Calling  this function makes any child nodes previously obtained for name
     * invalid. You should not use these child nodes but instead obtain a new
     * instance by calling getChildNode.
     */
    setChildNode (key : string , value : Object | null ) : Object | null ;
    /**
     * Sets a child node.
     * @param name Name of child node.
     * @param value Value of child node.
     */
    setNode (name : string , value : Object | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.FastListNode'): typeof ಠ_ಠ.clutz.goog.ds.FastListNode;
}
declare module 'goog:goog.ds.FastListNode' {
  import alias = ಠ_ಠ.clutz.goog.ds.FastListNode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Data source whose backing is JavaScript data
   *
   * Names that are reserved for system use and shouldn't be used for data node
   * names: eval, toSource, toString, unwatch, valueOf, watch. Behavior is
   * undefined if these names are used.
   */
  class JsDataSource extends JsDataSource_Instance {
  }
  class JsDataSource_Instance extends ಠ_ಠ.clutz.goog.ds.DataNode_Instance {
    /**
     * Data source whose backing is JavaScript data
     *
     * Names that are reserved for system use and shouldn't be used for data node
     * names: eval, toSource, toString, unwatch, valueOf, watch. Behavior is
     * undefined if these names are used.
     * @param root The root JS node.
     * @param dataName The name of this node relative to the parent node.
     * @param opt_parent Optional parent of this JsDataSource. implements goog.ds.DataNode.
     */
    constructor (root : Object | null , dataName : string , opt_parent ? : Object | null ) ;
    dataName_ : string ;
    parent_ : Object | null | undefined ;
    get ( ...a : any [] ) : any ;
    /**
     * Gets a named child node of the current node
     * @param name The node name.
     * @param opt_canCreate If true, can create child node.
     */
    getChildNode (name : string , opt_canCreate ? : boolean ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Gets the value of a child node
     * @param name The node name.
     */
    getChildNodeValue (name : string ) : Object | null ;
    /**
     * TODO(user) revisit lazy creation.
     */
    getChildNodes (opt_selector ? : string ) : ಠ_ಠ.clutz.goog.ds.DataNodeList ;
    /**
     * Get the name of the node relative to the parent node
     */
    getDataName ( ) : string ;
    /**
     * Gets the a qualified data path to this node
     */
    getDataPath ( ) : string ;
    /**
     * Gets the state of the backing data for this node
     * TODO(user) Discuss null value handling
     */
    getLoadState ( ) : ಠ_ಠ.clutz.goog.ds.LoadState ;
    /**
     * Whether the value of this node is a homogeneous list of data
     */
    isList ( ) : boolean ;
    /**
     * Load or reload the backing data for this node
     */
    load ( ) : void ;
    /**
     * The root JS object. Can be null.
     */
    root_ : any ;
    /**
     * Set the value of the node
     * @param value The new value of the node.
     */
    set (value : any ) : any ;
    /**
     * Sets a named child node of the current node.
     * If value is null, removes the child node.
     * @param name The node name.
     * @param value The value to set, can be DataNode, object, property, or null.
     */
    setChildNode (name : string , value : Object | null ) : Object | null ;
    /**
     * Setthe name of the node relative to the parent node
     * @param dataName The name of the node.
     */
    setDataName (dataName : string ) : any ;
    /**
     * Sets the root JS object
     * @param root The root JS object. Can be null.
     */
    setRoot (root : Object | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.JsDataSource'): typeof ಠ_ಠ.clutz.goog.ds.JsDataSource;
}
declare module 'goog:goog.ds.JsDataSource' {
  import alias = ಠ_ಠ.clutz.goog.ds.JsDataSource;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Data source for JavaScript properties that arent objects. Contains reference
   * to parent object so that you can set the vaule
   */
  class JsPropertyDataSource extends JsPropertyDataSource_Instance {
  }
  class JsPropertyDataSource_Instance extends ಠ_ಠ.clutz.goog.ds.BaseDataNode_Instance {
    /**
     * Data source for JavaScript properties that arent objects. Contains reference
     * to parent object so that you can set the vaule
     * @param parent Parent object.
     * @param dataName Name of this property.
     * @param opt_parentDataNode The parent data node. If omitted, assumes that the parent object is the parent data node.
     */
    constructor (parent : ಠ_ಠ.clutz.goog.ds.DataNode | null , dataName : string , opt_parentDataNode ? : ಠ_ಠ.clutz.goog.ds.DataNode | null ) ;
    dataName_ : string ;
    parentDataNode_ : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    parent_ : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Get the value of the node
     */
    get ( ) : Object | null ;
    /**
     * Get the name of the node relative to the parent node
     */
    getDataName ( ) : string ;
    getParent ( ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Set the value of the node
     * @param value The new value of the node.
     */
    set (value : Object | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.JsPropertyDataSource'): typeof ಠ_ಠ.clutz.goog.ds.JsPropertyDataSource;
}
declare module 'goog:goog.ds.JsPropertyDataSource' {
  import alias = ಠ_ಠ.clutz.goog.ds.JsPropertyDataSource;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Similar to JsonDataSource, with using XMLHttpRequest for transport
   * Currently requires the result be a valid JSON.
   */
  class JsXmlHttpDataSource extends JsXmlHttpDataSource_Instance {
  }
  class JsXmlHttpDataSource_Instance extends ಠ_ಠ.clutz.goog.ds.FastDataNode_Instance {
    /**
     * Similar to JsonDataSource, with using XMLHttpRequest for transport
     * Currently requires the result be a valid JSON.
     * @param uri URI for the request.
     * @param name Name of the datasource.
     * @param opt_startText Text to expect/strip before JS response.
     * @param opt_endText Text to expect/strip after JS response.
     * @param opt_usePost If true, use POST. Defaults to false (GET).
     */
    constructor (uri : string | ಠ_ಠ.clutz.goog.Uri | null , name : string , opt_startText ? : string , opt_endText ? : string , opt_usePost ? : boolean ) ;
    uri_ : ಠ_ಠ.clutz.goog.Uri | null ;
    usePost_ : boolean ;
    xhr_ : ಠ_ಠ.clutz.goog.net.XhrIo ;
    /**
     * Gets the state of the backing data for this node
     */
    getLoadState ( ) : ಠ_ಠ.clutz.goog.ds.LoadState ;
    /**
     * Load or reload the backing data for this node.
     * Fires the JsonDataSource
     */
    load ( ) : void ;
    /**
     * Sets the request data. This can be used if it is required to
     * send a specific body rather than build the body from the query
     * parameters. Only used in POST requests.
     * @param data The data to send in the request body.
     */
    setQueryData (data : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.JsXmlHttpDataSource'): typeof ಠ_ಠ.clutz.goog.ds.JsXmlHttpDataSource;
}
declare module 'goog:goog.ds.JsXmlHttpDataSource' {
  import alias = ಠ_ಠ.clutz.goog.ds.JsXmlHttpDataSource;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Data source whose backing is a JSON-like service, in which
   * retreiving the resource specified by URL with the additional parameter
   * callback. The resource retreived is executable JavaScript that
   * makes a call to the named function with a JavaScript object literal
   * as the only parameter.
   *
   * Example URI could be:
   * http://www.google.com/data/search?q=monkey&callback=mycb
   * which might return the JS:
   * mycb({searchresults:
   * [{uri: 'http://www.monkey.com', title: 'Site About Monkeys'}]});
   *
   * TODO(user): Evaluate using goog.net.Jsonp here.
   *
   * A URI of an empty string will mean that no request is made
   * and the data source will be a data source with no child nodes
   */
  class JsonDataSource extends JsonDataSource_Instance {
  }
  class JsonDataSource_Instance extends ಠ_ಠ.clutz.goog.ds.JsDataSource_Instance {
    /**
     * Data source whose backing is a JSON-like service, in which
     * retreiving the resource specified by URL with the additional parameter
     * callback. The resource retreived is executable JavaScript that
     * makes a call to the named function with a JavaScript object literal
     * as the only parameter.
     *
     * Example URI could be:
     * http://www.google.com/data/search?q=monkey&callback=mycb
     * which might return the JS:
     * mycb({searchresults:
     * [{uri: 'http://www.monkey.com', title: 'Site About Monkeys'}]});
     *
     * TODO(user): Evaluate using goog.net.Jsonp here.
     *
     * A URI of an empty string will mean that no request is made
     * and the data source will be a data source with no child nodes
     * @param uri URI for the request.
     * @param name Name of the datasource.
     * @param opt_callbackParamName The parameter name that is used to specify the callback. Defaults to 'callback'.
     */
    constructor (uri : string | ಠ_ಠ.clutz.goog.Uri | null , name : string , opt_callbackParamName ? : string ) ;
    loadState_ : ಠ_ಠ.clutz.goog.ds.LoadState ;
    root_ : any ;
    uri_ : ಠ_ಠ.clutz.goog.Uri | null ;
    /**
     * Gets the state of the backing data for this node
     */
    getLoadState ( ) : ಠ_ಠ.clutz.goog.ds.LoadState ;
    /**
     * Load or reload the backing data for this node.
     * Fires the JsonDataSource
     */
    load ( ) : void ;
    /**
     * Receives data from a Json request
     * @param obj The JSON data.
     */
    receiveData (obj : Object | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.JsonDataSource'): typeof ಠ_ಠ.clutz.goog.ds.JsonDataSource;
}
declare module 'goog:goog.ds.JsonDataSource' {
  import alias = ಠ_ಠ.clutz.goog.ds.JsonDataSource;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Enum for load state of a DataNode.
   */
  type LoadState = string ;
  var LoadState : {
    FAILED : LoadState ,
    LOADED : LoadState ,
    LOADING : LoadState ,
    NOT_LOADED : LoadState ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.LoadState'): typeof ಠ_ಠ.clutz.goog.ds.LoadState;
}
declare module 'goog:goog.ds.LoadState' {
  import alias = ಠ_ಠ.clutz.goog.ds.LoadState;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Creates a new data node wrapping a primitive value.
   */
  class PrimitiveFastDataNode extends PrimitiveFastDataNode_Instance {
  }
  class PrimitiveFastDataNode_Instance extends ಠ_ಠ.clutz.goog.ds.AbstractFastDataNode_Instance {
    /**
     * Creates a new data node wrapping a primitive value.
     * @param value Value the value to wrap.
     * @param dataName name Name of this data node.
     * @param opt_parent Parent of this data node.
     */
    constructor (value : number | boolean | string , dataName : string , opt_parent ? : ಠ_ಠ.clutz.goog.ds.DataNode | null ) ;
    value_ : number | boolean | string | null | undefined ;
    /**
     * Returns the value of this data node.
     */
    get (a ? : string ) : boolean | number | string ;
    /**
     * Get a child node by name. Always returns null.
     * @param name Name of child node.
     */
    getChildNode (name : string , a ? : boolean ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Returns the value of a child node. Always returns null.
     * @param name Name of child node.
     */
    getChildNodeValue (name : string ) : Object | null ;
    /**
     * Returns child nodes of this data node. Always returns an unmodifiable,
     * empty list.
     */
    getChildNodes (a ? : string ) : ಠ_ಠ.clutz.goog.ds.DataNodeList ;
    /**
     * Returns a javascript object representation of this data node. You should
     * not modify the object returned by this function.
     */
    getJsObject ( ) : any ;
    /**
     * Returns whether this data node is a list. Always returns false for
     * instances of PrimitiveFastDataNode.
     */
    isList ( ) : boolean ;
    /**
     * Sets this data node to a new value.
     * @param value Value to set data node to.
     */
    set (value : any ) : any ;
    /**
     * Not supported by primitive data nodes.
     * @param name Name of child node.
     * @param value Value of child node.
     */
    setChildNode (name : string , value : Object | null ) : Object | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.PrimitiveFastDataNode'): typeof ಠ_ಠ.clutz.goog.ds.PrimitiveFastDataNode;
}
declare module 'goog:goog.ds.PrimitiveFastDataNode' {
  import alias = ಠ_ಠ.clutz.goog.ds.PrimitiveFastDataNode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Node list implementation which maintains sort order during insertion and
   * modification operations based on a comparison function.
   *
   * The SortedNodeList does not guarantee sort order will be maintained if
   * the underlying data nodes are modified externally.
   *
   * Names that are reserved for system use and shouldn't be used for data node
   * names: eval, toSource, toString, unwatch, valueOf, watch. Behavior is
   * undefined if these names are used.
   */
  class SortedNodeList extends SortedNodeList_Instance {
  }
  class SortedNodeList_Instance extends ಠ_ಠ.clutz.goog.ds.BasicNodeList_Instance {
    /**
     * Node list implementation which maintains sort order during insertion and
     * modification operations based on a comparison function.
     *
     * The SortedNodeList does not guarantee sort order will be maintained if
     * the underlying data nodes are modified externally.
     *
     * Names that are reserved for system use and shouldn't be used for data node
     * names: eval, toSource, toString, unwatch, valueOf, watch. Behavior is
     * undefined if these names are used.
     * @param compareFn Comparison function by which the node list is sorted. Should take 2 arguments to compare, and return a negative integer, zero, or a positive integer depending on whether the first argument is less than, equal to, or greater than the second.
     * @param opt_nodes optional nodes to add to list; these are assumed to be in sorted order.
     */
    constructor (compareFn : ( ( ...a : any [] ) => any ) | null , opt_nodes ? : ( ಠ_ಠ.clutz.goog.ds.DataNode | null ) [] | null ) ;
    compareFn_ : ( ( ...a : any [] ) => any ) | null ;
    /**
     * Add a node to the node list, maintaining sort order.
     * If the node has a dataName, uses this for the key in the map.
     * @param node The node to add.
     */
    add (node : ಠ_ಠ.clutz.goog.ds.DataNode | null ) : any ;
    /**
     * Adds the given node to the end of the SortedNodeList. This should
     * only be used when the caller can guarantee that the sort order will
     * be maintained according to this SortedNodeList's compareFn (e.g.
     * when initializing a new SortedNodeList from a list of nodes that has
     * already been sorted).
     * @param node The node to append.
     */
    append (node : ಠ_ಠ.clutz.goog.ds.DataNode | null ) : void ;
    /**
     * Sets a node in the list of a given name, maintaining sort order.
     * @param name Name of the node.
     * @param node The node.
     */
    setNode (name : string , node : ಠ_ಠ.clutz.goog.ds.DataNode | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.SortedNodeList'): typeof ಠ_ಠ.clutz.goog.ds.SortedNodeList;
}
declare module 'goog:goog.ds.SortedNodeList' {
  import alias = ಠ_ಠ.clutz.goog.ds.SortedNodeList;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds.Util {
  /**
   * Create a data node that references another data node,
   * useful for pointer-like functionality.
   * All functions will return same values as the original node except for
   * getDataName()
   * @param node The original node.
   * @param name The new name.
   */
  function makeReferenceNode (node : ಠ_ಠ.clutz.goog.ds.DataNode , name : string ) : ಠ_ಠ.clutz.goog.ds.DataNode ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.Util'): typeof ಠ_ಠ.clutz.goog.ds.Util;
}
declare module 'goog:goog.ds.Util' {
  import alias = ಠ_ಠ.clutz.goog.ds.Util;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Data source whose backing is an xml node
   */
  class XmlDataSource extends XmlDataSource_Instance {
  }
  class XmlDataSource_Instance extends ಠ_ಠ.clutz.goog.ds.DataNode_Instance {
    /**
     * Data source whose backing is an xml node
     * @param node The XML node. Can be null.
     * @param parent Parent of XML element. Can be null.
     * @param opt_name The name of this node relative to the parent node.
     */
    constructor (node : Node | null , parent : ಠ_ಠ.clutz.goog.ds.XmlDataSource | null , opt_name ? : string ) ;
    dataName_ : string ;
    parent_ : ಠ_ಠ.clutz.goog.ds.XmlDataSource | null ;
    /**
     * Get the value of the node
     */
    get ( ...a : any [] ) : Object | null ;
    /**
     * Gets a named child node of the current node
     * @param name The node name.
     */
    getChildNode (name : string , a ? : boolean ) : ಠ_ಠ.clutz.goog.ds.DataNode | null ;
    /**
     * Gets the value of a child node
     * @param name The node name.
     */
    getChildNodeValue (name : string ) : any ;
    getChildNodes (opt_selector ? : string ) : ಠ_ಠ.clutz.goog.ds.DataNodeList ;
    /**
     * Get the name of the node relative to the parent node
     */
    getDataName ( ) : string ;
    /**
     * Gets the a qualified data path to this node
     */
    getDataPath ( ) : string ;
    /**
     * Gets the state of the backing data for this node
     */
    getLoadState ( ) : ಠ_ಠ.clutz.goog.ds.LoadState ;
    /**
     * Load or reload the backing data for this node
     */
    load ( ) : void ;
    /**
     * Set the value of the node
     * @param value The new value of the node.
     */
    set (value : any ) : any ;
    /**
     * Setthe name of the node relative to the parent node
     * @param name The name of the node.
     */
    setDataName (name : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.XmlDataSource'): typeof ಠ_ಠ.clutz.goog.ds.XmlDataSource;
}
declare module 'goog:goog.ds.XmlDataSource' {
  import alias = ಠ_ಠ.clutz.goog.ds.XmlDataSource;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Data source whose backing is an XMLHttpRequest,
   *
   * A URI of an empty string will mean that no request is made
   * and the data source will be a single, empty node.
   */
  class XmlHttpDataSource extends XmlHttpDataSource_Instance {
  }
  class XmlHttpDataSource_Instance extends ಠ_ಠ.clutz.goog.ds.XmlDataSource_Instance {
    /**
     * Data source whose backing is an XMLHttpRequest,
     *
     * A URI of an empty string will mean that no request is made
     * and the data source will be a single, empty node.
     * @param uri URL of the XMLHttpRequest.
     * @param name Name of the datasource. implements goog.ds.XmlHttpDataSource.
     */
    constructor (uri : string | ಠ_ಠ.clutz.goog.Uri | null , name : string ) ;
    loadState_ : ಠ_ಠ.clutz.goog.ds.LoadState ;
    uri_ : ಠ_ಠ.clutz.goog.Uri | null ;
    /**
     * Gets the state of the backing data for this node
     */
    getLoadState ( ) : ಠ_ಠ.clutz.goog.ds.LoadState ;
    /**
     * Load or reload the backing data for this node.
     * Fires the XMLHttpRequest
     */
    load ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.XmlHttpDataSource'): typeof ಠ_ಠ.clutz.goog.ds.XmlHttpDataSource;
}
declare module 'goog:goog.ds.XmlHttpDataSource' {
  import alias = ಠ_ಠ.clutz.goog.ds.XmlHttpDataSource;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
  /**
   * Shared logger instance for data package
   */
  var logger : ಠ_ಠ.clutz.goog.debug.Logger | null ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ds.logger'): typeof ಠ_ಠ.clutz.goog.ds.logger;
}
declare module 'goog:goog.ds.logger' {
  import alias = ಠ_ಠ.clutz.goog.ds.logger;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.BrowserFeature {
  var ADDS_NBSPS_IN_REMOVE_FORMAT : boolean ;
  var CAN_LISTIFY_BR : boolean ;
  var CAN_SELECT_EMPTY_ELEMENT : boolean ;
  var CARET_INSIDE_SELECTION : boolean ;
  var CLEARS_SELECTION_WHEN_FOCUS_LEAVES : boolean ;
  var COLLAPSES_EMPTY_NODES : boolean ;
  var COLLAPSES_SELECTION_ONMOUSEDOWN : boolean ;
  var CONVERT_TO_B_AND_I_TAGS : boolean ;
  var CREATES_MULTIPLE_BLOCKQUOTES : boolean ;
  var DOESNT_OVERRIDE_FONT_SIZE_IN_STYLE_ATTR : boolean ;
  var EATS_EMPTY_BACKGROUND_COLOR : boolean ;
  var FOCUSES_EDITABLE_BODY_ON_HTML_CLICK : boolean ;
  var FOLLOWS_EDITABLE_LINKS : boolean ;
  var FORGETS_FORMATTING_WHEN_LISTIFYING : boolean ;
  var FORMAT_BLOCK_WORKS_FOR_BLOCKQUOTES : boolean ;
  var GETS_STUCK_IN_LINKS : boolean ;
  var HAS_ACTIVE_ELEMENT : boolean ;
  var HAS_CONTENT_EDITABLE : boolean ;
  var HAS_DOCUMENT_INDEPENDENT_NODES : boolean ;
  var HAS_DOM_SUBTREE_MODIFIED_EVENT : boolean ;
  var HAS_IE_RANGES : boolean ;
  var HAS_SET_CAPTURE : boolean ;
  var HAS_STYLE_WITH_CSS : boolean ;
  var HAS_UNSELECTABLE_STYLE : boolean ;
  var HAS_W3C_RANGES : boolean ;
  var LEAVES_P_WHEN_REMOVING_LISTS : boolean ;
  var MOVES_STYLE_TO_HEAD : boolean ;
  var NEEDS_99_WIDTH_IN_STANDARDS_MODE : boolean ;
  var NESTS_SUBSCRIPT_SUPERSCRIPT : boolean ;
  var NORMALIZE_CORRUPTS_ALL_TEXT_NODES : boolean ;
  var NORMALIZE_CORRUPTS_EMPTY_TEXT_NODES : boolean ;
  var PREFERS_READY_STATE_CHANGE_EVENT : boolean ;
  var PUTS_CURSOR_BEFORE_FIRST_BLOCK_ELEMENT_ON_FOCUS : boolean ;
  var SELECTS_IMAGES_ON_CLICK : boolean ;
  var SHOWS_CUSTOM_ATTRS_IN_INNER_HTML : boolean ;
  var SUPPORTS_FILE_PASTING : boolean ;
  var SUPPORTS_FOCUSIN : boolean ;
  var SUPPORTS_HTML5_FILE_DRAGGING : boolean ;
  var SUPPORTS_OPERA_DEFAULTBLOCK_COMMAND : boolean ;
  var TABS_THROUGH_IMAGES : boolean ;
  var TAB_FIRES_KEYPRESS : boolean ;
  var UNESCAPES_URLS_WITHOUT_ASKING : boolean ;
  var USES_KEYDOWN : boolean ;
  var USE_DOCUMENT_FOR_KEY_EVENTS : boolean ;
  var USE_MUTATION_EVENTS : boolean ;
  var WRAPS_BLOCKQUOTE_IN_DIVS : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.BrowserFeature'): typeof ಠ_ಠ.clutz.goog.editor.BrowserFeature;
}
declare module 'goog:goog.editor.BrowserFeature' {
  import alias = ಠ_ಠ.clutz.goog.editor.BrowserFeature;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
  /**
   * Initialize the wrapper, and begin listening to mouse events immediately.
   */
  class ClickToEditWrapper extends ClickToEditWrapper_Instance {
  }
  class ClickToEditWrapper_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Initialize the wrapper, and begin listening to mouse events immediately.
     * @param fieldObj The editable field being wrapped.
     */
    constructor (fieldObj : ಠ_ಠ.clutz.goog.editor.Field | null ) ;
    disposeInternal ( ) : void ;
    /**
     * Initialize listeners when the uneditable field is added to the document.
     * Also sets up lorem ipsum text.
     */
    enterDocument ( ) : void ;
    /**
     * Destroy listeners when the field is removed from the document.
     */
    exitDocument ( ) : void ;
    /**
     * Focus on the field object.
     * @param field The field to focus.
     */
    focusOnFieldObj (field : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    /**
     * Returns the uneditable field element if the field is not yet editable
     * (equivalent to EditableField.getOriginalElement()), and the editable DOM
     * element if the field is currently editable (equivalent to
     * EditableField.getElement()).
     */
    getElement ( ) : Element | null ;
    getFieldObject ( ) : ಠ_ಠ.clutz.goog.editor.Field | null ;
    getOriginalDomHelper ( ) : ಠ_ಠ.clutz.goog.dom.DomHelper | null ;
    /**
     * Make the field object editable.
     * @param field The field to make editable.
     */
    makeFieldEditable (field : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.ClickToEditWrapper'): typeof ಠ_ಠ.clutz.goog.editor.ClickToEditWrapper;
}
declare module 'goog:goog.editor.ClickToEditWrapper' {
  import alias = ಠ_ಠ.clutz.goog.editor.ClickToEditWrapper;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
  /**
   * Commands that the editor can excute via execCommand or queryCommandValue.
   */
  type Command = string ;
  var Command : {
    BACKGROUND_COLOR : Command ,
    BLOCKQUOTE : Command ,
    BOLD : Command ,
    CLEAR_LOREM : Command ,
    DEFAULT_TAG : Command ,
    DIR_LTR : Command ,
    DIR_RTL : Command ,
    EDIT_HTML : Command ,
    EMOTICON : Command ,
    EQUATION : Command ,
    FONT_COLOR : Command ,
    FONT_FACE : Command ,
    FONT_SIZE : Command ,
    FORMAT_BLOCK : Command ,
    HORIZONTAL_RULE : Command ,
    IMAGE : Command ,
    INDENT : Command ,
    ITALIC : Command ,
    JUSTIFY_CENTER : Command ,
    JUSTIFY_FULL : Command ,
    JUSTIFY_LEFT : Command ,
    JUSTIFY_RIGHT : Command ,
    LINK : Command ,
    MODAL_LINK_EDITOR : Command ,
    ORDERED_LIST : Command ,
    OUTDENT : Command ,
    REDO : Command ,
    REMOVE_FORMAT : Command ,
    STRIKE_THROUGH : Command ,
    SUBSCRIPT : Command ,
    SUPERSCRIPT : Command ,
    TABLE : Command ,
    UNDERLINE : Command ,
    UNDO : Command ,
    UNORDERED_LIST : Command ,
    UPDATE_LINK_BUBBLE : Command ,
    UPDATE_LOREM : Command ,
    USING_LOREM : Command ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.Command'): typeof ಠ_ಠ.clutz.goog.editor.Command;
}
declare module 'goog:goog.editor.Command' {
  import alias = ಠ_ಠ.clutz.goog.editor.Command;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
  /**
   * This class encapsulates an editable field that is just a contentEditable
   * div.
   *
   * To see events fired by this object, please see the base class.
   */
  class ContentEditableField extends ContentEditableField_Instance {
  }
  class ContentEditableField_Instance extends ಠ_ಠ.clutz.goog.editor.Field_Instance {
    /**
     * This class encapsulates an editable field that is just a contentEditable
     * div.
     *
     * To see events fired by this object, please see the base class.
     * @param id An identifer for the field. This is used to find the field and the element associated with this field.
     * @param opt_doc The document that the element with the given id can be found in.
     */
    constructor (id : string , opt_doc ? : Document | null ) ;
    installStyles ( ) : void ;
    makeEditableInternal (opt_iframeSrc ? : string ) : void ;
    usesIframe ( ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.ContentEditableField'): typeof ಠ_ಠ.clutz.goog.editor.ContentEditableField;
}
declare module 'goog:goog.editor.ContentEditableField' {
  import alias = ಠ_ಠ.clutz.goog.editor.ContentEditableField;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
  /**
   * This class encapsulates an editable field.
   *
   * event: load Fires when the field is loaded
   * event: unload Fires when the field is unloaded (made not editable)
   *
   * event: beforechange Fires before the content of the field might change
   *
   * event: delayedchange Fires a short time after field has changed. If multiple
   * change events happen really close to each other only
   * the last one will trigger the delayedchange event.
   *
   * event: beforefocus Fires before the field becomes active
   * event: focus Fires when the field becomes active. Fires after the blur event
   * event: blur Fires when the field becomes inactive
   *
   * TODO: figure out if blur or beforefocus fires first in IE and make FF match
   */
  class Field extends Field_Instance {
    /**
     * Number of milliseconds after a change when the change event should be fired.
     */
    static CHANGE_FREQUENCY : number ;
    /**
     * Number of milliseconds between delayed change events.
     */
    static DELAYED_CHANGE_FREQUENCY : number ;
    /**
     * List of mutation events in Gecko browsers.
     */
    static MUTATION_EVENTS_GECKO : string [] | null ;
    /**
     * Keycodes that result in a selectionchange event (e.g. the cursor moving).
     */
    static SELECTION_CHANGE_KEYCODES : { [ key: number ]: number } ;
    static getActiveFieldId ( ) : string | null ;
    /**
     * Sets the active field id.
     * @param fieldId The active field id.
     */
    static setActiveFieldId (fieldId : string | null ) : void ;
  }
  class Field_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * This class encapsulates an editable field.
     *
     * event: load Fires when the field is loaded
     * event: unload Fires when the field is unloaded (made not editable)
     *
     * event: beforechange Fires before the content of the field might change
     *
     * event: delayedchange Fires a short time after field has changed. If multiple
     * change events happen really close to each other only
     * the last one will trigger the delayedchange event.
     *
     * event: beforefocus Fires before the field becomes active
     * event: focus Fires when the field becomes active. Fires after the blur event
     * event: blur Fires when the field becomes inactive
     *
     * TODO: figure out if blur or beforefocus fires first in IE and make FF match
     * @param id An identifer for the field. This is used to find the field and the element associated with this field.
     * @param opt_doc The document that the element with the given id can be found in.  If not provided, the default document is used.
     */
    constructor (id : string , opt_doc ? : Document | null ) ;
    /**
     * Additional styles to install for the editable field.
     */
    cssStyles : string ;
    /**
     * Dom helper for the editable node.
     */
    editableDomHelper : ಠ_ಠ.clutz.goog.dom.DomHelper | null ;
    eventRegister : ಠ_ಠ.clutz.goog.events.EventHandler < ಠ_ಠ.clutz.goog.editor.Field > | null ;
    /**
     * The id for this editable field, which must match the id of the element
     * associated with this field.
     */
    id : string ;
    /**
     * The dom helper for the node to be made editable.
     */
    originalDomHelper : ಠ_ಠ.clutz.goog.dom.DomHelper | null ;
    /**
     * The original node that is being made editable, or null if it has
     * not yet been found.
     */
    originalElement : Element | null ;
    /**
     * Registers a keyboard event listener on the field.  This is necessary for
     * Gecko since the fields are contained in an iFrame and there is no way to
     * auto-propagate key events up to the main window.
     * @param type Event type to listen for or array of event types, for example goog.events.EventType.KEYDOWN.
     * @param listener Function to be used as the listener.
     * @param opt_capture Whether to use capture phase (optional, defaults to false).
     * @param opt_handler Object in whose scope to call the listener.
     */
    addListener (type : string | string [] | null , listener : ( ( ...a : any [] ) => any ) | null , opt_capture ? : boolean , opt_handler ? : Object | null ) : void ;
    /**
     * Given the original field element, and the iframe that is destined to
     * become the editable field, styles them appropriately and add the iframe
     * to the dom.
     * @param iframe The iframe element.
     */
    attachIframe (iframe : HTMLIFrameElement | null ) : void ;
    /**
     * Attach an wrapper to this field, to be thrown out when the field
     * is disposed.
     * @param wrapper The wrapper to attach.
     */
    attachWrapper (wrapper : ಠ_ಠ.clutz.goog.Disposable | null ) : void ;
    /**
     * Don't wait for the timer and just fire the delayed change event if it's
     * pending.
     */
    clearDelayedChange ( ) : void ;
    /**
     * Stops all listeners and timers.
     */
    clearListeners ( ) : void ;
    /**
     * Block an event for a short amount of time. Intended
     * for the situation where an event pair fires in quick succession
     * (e.g., mousedown/mouseup, keydown/keyup, focus/blur),
     * and we want the second event in the pair to get "debounced."
     *
     * WARNING: This should never be used to solve race conditions or for
     * mission-critical actions. It should only be used for UI improvements,
     * where it's okay if the behavior is non-deterministic.
     * @param eventType type of event to debounce.
     */
    debounceEvent (eventType : ಠ_ಠ.clutz.goog.editor.Field.EventType ) : void ;
    /**
     * This dispatches the beforechange event on the editable field
     */
    dispatchBeforeChange ( ) : void ;
    /**
     * Dispatches a blur event.
     */
    dispatchBlur ( ) : void ;
    /**
     * Dispatches the appropriate set of change events. This only fires
     * synchronous change events in blended-mode, iframe-using mozilla. It just
     * starts the appropriate timer for goog.editor.Field.EventType.DELAYEDCHANGE.
     * This also starts up change events again if they were stopped.
     * @param opt_noDelay True if goog.editor.Field.EventType.DELAYEDCHANGE should be fired syncronously.
     */
    dispatchChange (opt_noDelay ? : boolean ) : void ;
    /**
     * Dispatches a command value change event.
     * @param opt_commands Commands whose state has changed.
     */
    dispatchCommandValueChange (opt_commands ? : string [] | null ) : void ;
    /**
     * Dispatch a selection change event, optionally caused by the given browser
     * event or selecting the given target.
     * @param opt_e Optional browser event causing this event.
     * @param opt_target The node the selection changed to.
     */
    dispatchSelectionChangeEvent (opt_e ? : ಠ_ಠ.clutz.goog.events.BrowserEvent | null , opt_target ? : Node | null ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Executes an editing command as per the registered plugins.
     * @param command The command to execute.
     * @param var_args Any additional parameters needed to execute the command.
     */
    execCommand (command : string ,  ...var_args : any [] ) : any ;
    /**
     * The editable dom node.
     */
    field : Element | null ;
    /**
     * Gives the field focus.
     */
    focus ( ) : void ;
    /**
     * Gives the field focus and places the cursor at the start of the field.
     */
    focusAndPlaceCursorAtStart ( ) : void ;
    /**
     * Returns the "application" window, where dialogs and bubbles
     * should be rendered.
     */
    getAppWindow ( ) : Window ;
    /**
     * Returns the zindex of the base level of the field.
     */
    getBaseZindex ( ) : number ;
    /**
     * Retrieve the HTML contents of a field.
     *
     * Do NOT just get the innerHTML of a field directly--there's a lot of
     * processing that needs to happen.
     */
    getCleanContents ( ) : string ;
    getEditableDomHelper ( ) : ಠ_ಠ.clutz.goog.dom.DomHelper | null ;
    getEditableIframe ( ) : HTMLIFrameElement | null ;
    /**
     * Returns the editable DOM element or null if this field
     * is not editable.
     * <p>On IE or Safari this is the element with contentEditable=true
     * (in whitebox mode, the iFrame body).
     * <p>On Gecko this is the iFrame body
     * TODO(user): How do we word this for subclass version?
     */
    getElement ( ) : Element | null ;
    /**
     * Get the copy of the editable field element, which has the innerHTML set
     * correctly.
     */
    getFieldCopy ( ) : Element ;
    getFieldFormatInfo (extraStyles : Object | null ) : ಠ_ಠ.clutz.goog.editor.icontent.FieldFormatInfo ;
    /**
     * Returns a string usable as a hash code for this field. For field's
     * that were created with an id, the hash code is guaranteed to be the id.
     * TODO(user): I think we can get rid of this.  Seems only used from editor.
     */
    getHashCode ( ) : string ;
    getIframeAttributes ( ) : Object ;
    /**
     * Returns prepared contents that can be injected into the editable field.
     * @param contents The contents to prepare.
     * @param styles A map that will be populated with styles that should be applied to the field element together with the contents.
     */
    getInjectableContents (contents : string | null , styles : Object | null ) : string ;
    /**
     * Returns original DOM element that is being made editable by Trogedit or
     * null if that element has not yet been found in the appropriate document.
     */
    getOriginalElement ( ) : Element | null ;
    /**
     * Returns the registered plugin with the given classId.
     * @param classId classId of the plugin.
     */
    getPluginByClassId (classId : string ) : ಠ_ಠ.clutz.goog.editor.Plugin | null ;
    getRange ( ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
    /**
     * Handle a change in the Editable Field.  Marks the field has modified,
     * dispatches the change event on the editable field (moz only), starts the
     * timer for the delayed change event.  Note that these actions only occur if
     * the proper events are not stopped.
     */
    handleChange ( ) : void ;
    /**
     * Fires a change event only if the attribute change effects the editiable
     * field. We ignore events that are internal browser events (ie scrollbar
     * state change)
     * @param handler The function to call if this is not an internal browser event.
     * @param browserEvent The browser event.
     */
    handleDomAttrChange (handler : ( ( ...a : any [] ) => any ) | null , browserEvent : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handle the loading of the field (e.g. once the field is ready to setup).
     * TODO(user): this should probably just be moved into dispatchLoadEvent_.
     */
    handleFieldLoad ( ) : void ;
    /**
     * The function to call when the editable iframe loads.
     * @param iframe Iframe that just loaded.
     * @param innerHtml Html to put inside the body of the iframe.
     * @param styles Property-value map of CSS styles to install on editable field.
     */
    iframeFieldLoadHandler (iframe : HTMLIFrameElement | null , innerHtml : string , styles : Object | null ) : void ;
    inModalMode ( ) : boolean ;
    /**
     * Prepare the given contents, then inject them into the editable field.
     * @param contents The contents to prepare.
     * @param field The field element.
     */
    injectContents (contents : string | null , field : Element | null ) : void ;
    /**
     * Installs styles if needed. Only writes styles when they can't be written
     * inline directly into the field.
     */
    installStyles ( ) : void ;
    /**
     * Checks if the event of the given type has stopped being dispatched
     * @param eventType type of event to check.
     */
    isEventStopped (eventType : ಠ_ಠ.clutz.goog.editor.Field.EventType ) : boolean ;
    isFixedHeight ( ) : boolean ;
    isLoaded ( ) : boolean ;
    isLoading ( ) : boolean ;
    /**
     * Checks the modified state of the field.
     * Note: Changes that take place while the goog.editor.Field.EventType.CHANGE
     * event is stopped do not effect the modified state.
     * @param opt_useIsEverModified Set to true to check if the field has ever been modified since it was created, otherwise checks if the field has been modified since the last goog.editor.Field.EventType.DELAYEDCHANGE event was dispatched.
     */
    isModified (opt_useIsEverModified ? : boolean ) : boolean ;
    isSelectionEditable ( ) : boolean ;
    isUneditable ( ) : boolean ;
    /**
     * Logging object.
     */
    logger : ಠ_ಠ.clutz.goog.debug.Logger | null ;
    /**
     * Makes a field editable.
     * @param opt_iframeSrc URL to set the iframe src to if necessary.
     */
    makeEditable (opt_iframeSrc ? : string ) : void ;
    /**
     * Handles actually making something editable - creating necessary nodes,
     * injecting content, etc.
     * @param opt_iframeSrc URL to set the iframe src to if necessary.
     */
    makeEditableInternal (opt_iframeSrc ? : string ) : void ;
    /**
     * Closes the field and cancels all pending change timers.  Note that this
     * means that if a change event has not fired yet, it will not fire.  Clients
     * should check fieldOj.isModified() if they depend on the final change event.
     * Throws an error if the field is already uneditable.
     * @param opt_skipRestore True to prevent copying of editable field contents back into the original node.
     */
    makeUneditable (opt_skipRestore ? : boolean ) : void ;
    /**
     * Calls a function to manipulate the dom of this field. This method should be
     * used whenever Trogedit clients need to modify the dom of the field, so that
     * delayed change events are handled appropriately. Extra delayed change events
     * will cause undesired states to be added to the undo-redo stack. This method
     * will always fire at most one delayed change event, depending on the value of
     * {@code opt_preventDelayedChange}.
     * @param func The function to call that will manipulate the dom.
     * @param opt_preventDelayedChange Whether delayed change should be prevented after calling {@code func}. Defaults to always firing delayed change.
     * @param opt_handler Object in whose scope to call the listener.
     */
    manipulateDom (func : ( ) => any , opt_preventDelayedChange ? : boolean , opt_handler ? : Object | null ) : void ;
    /**
     * Place the cursor at the start of this field. It's recommended that you only
     * use this method (and manipulate the selection in general) when there is not
     * an existing selection in the field.
     */
    placeCursorAtEnd ( ) : void ;
    /**
     * Place the cursor at the start of this field. It's recommended that you only
     * use this method (and manipulate the selection in general) when there is not
     * an existing selection in the field.
     */
    placeCursorAtStart ( ) : void ;
    /**
     * Gets the value of command(s).
     * @param commands String name(s) of the command.
     */
    queryCommandValue (commands : string | string [] | null ) : any ;
    /**
     * Registers the plugin with the editable field.
     * @param plugin The plugin to register.
     */
    registerPlugin (plugin : ಠ_ಠ.clutz.goog.editor.Plugin | null ) : void ;
    /**
     * Removes all wrappers and destroys them.
     */
    removeAllWrappers ( ) : void ;
    /**
     * Reset the properties on the original field element to how it was before
     * it was made editable.
     */
    resetOriginalElemProperties ( ) : void ;
    /**
     * Restores the dom to how it was before being made editable.
     */
    restoreDom ( ) : void ;
    /**
     * Restore a saved range, and set the focus on the field.
     * If no range is specified, we simply set the focus.
     * @param opt_range A previously saved selected range.
     */
    restoreSavedRange (opt_range ? : ಠ_ಠ.clutz.goog.dom.SavedRange | null ) : void ;
    /**
     * Sets the application window.
     * @param appWindow The window where dialogs and bubbles should be rendered.
     */
    setAppWindow (appWindow : Window ) : void ;
    /**
     * Sets the zIndex that the field should be based off of.
     * TODO(user): Get rid of this completely.  Here for Sites.
     * Should this be set directly on UI plugins?
     * @param zindex The base zIndex of the editor.
     */
    setBaseZindex (zindex : number ) : void ;
    /**
     * Sets whether activating a hyperlink in this editable field will open a new
     * window or not.
     */
    setFollowLinkInNewWindow (followLinkInNewWindow : boolean ) : void ;
    /**
     * Sets the contents of the field.
     * @param addParas Boolean to specify whether to add paragraphs to long fields.
     * @param html html to insert.  If html=null, then this defaults to a nsbp for mozilla and an empty string for IE.
     * @param opt_dontFireDelayedChange True to make this content change not fire a delayed change event.
     * @param opt_applyLorem Whether to apply lorem ipsum styles.
     */
    setHtml (addParas : boolean , html : string | null , opt_dontFireDelayedChange ? : boolean , opt_applyLorem ? : boolean ) : void ;
    /**
     * Sets the value that will replace the style attribute of this field's
     * element when the field is made non-editable. This method is called with the
     * current value of the style attribute when the field is made editable.
     * @param cssText The value of the style attribute.
     */
    setInitialStyle (cssText : string ) : void ;
    setModalMode (inModalMode : boolean ) : void ;
    /**
     * Sets flag to control whether to use window mouse up after seeing
     * a mouse down operation on the field.
     * @param flag True to track window mouse up.
     */
    setUseWindowMouseUp (flag : boolean ) : void ;
    /**
     * Sets up the field object and window util of this field, and enables this
     * editable field with all registered plugins.
     * This is essential to the initialization of the field.
     * It must be called when the field becomes fully loaded and editable.
     * @param field The field property.
     */
    setupFieldObject (field : Element | null ) : void ;
    /**
     * Mutation events tell us when something has changed for mozilla.
     */
    setupMutationEventHandlersGecko ( ) : void ;
    /**
     * Returns true if the field needs to be loaded asynchrnously.
     */
    shouldLoadAsynchronously ( ) : boolean ;
    shouldRefocusOnInputMobileSafari ( ) : boolean ;
    /**
     * Start change events again and fire once if desired.
     * @param opt_fireChange Whether to fire the change event immediately.
     * @param opt_fireDelayedChange Whether to fire the delayed change event immediately.
     */
    startChangeEvents (opt_fireChange ? : boolean , opt_fireDelayedChange ? : boolean ) : void ;
    /**
     * Re-starts the event of the given type being dispatched, if it had
     * previously been stopped with stopEvent().
     * @param eventType type of event to start.
     */
    startEvent (eventType : ಠ_ಠ.clutz.goog.editor.Field.EventType ) : void ;
    /**
     * Temporarily ignore change events. If the time has already been set, it will
     * fire immediately now.  Further setting of the timer is stopped and
     * dispatching of events is stopped until startChangeEvents is called.
     * @param opt_stopChange Whether to ignore base change events.
     * @param opt_stopDelayedChange Whether to ignore delayed change events.
     */
    stopChangeEvents (opt_stopChange ? : boolean , opt_stopDelayedChange ? : boolean ) : void ;
    /**
     * Stops the event of the given type from being dispatched.
     * @param eventType type of event to stop.
     */
    stopEvent (eventType : ಠ_ಠ.clutz.goog.editor.Field.EventType ) : void ;
    /**
     * Attemps to turn on designMode for a document.  This function can fail under
     * certain circumstances related to the load event, and will throw an exception.
     */
    turnOnDesignModeGecko ( ) : void ;
    /**
     * Unregisters the plugin with this field.
     * @param plugin The plugin to unregister.
     */
    unregisterPlugin (plugin : ಠ_ಠ.clutz.goog.editor.Plugin | null ) : void ;
    usesIframe ( ) : boolean ;
    /**
     * Writes the html content into the iframe.  Handles writing any aditional
     * styling as well.
     * @param iframe Iframe to write contents into.
     * @param innerHtml The html content to write into the iframe.
     * @param extraStyles A map of extra style attributes.
     */
    writeIframeContent (iframe : HTMLIFrameElement | null , innerHtml : string , extraStyles : Object | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.Field'): typeof ಠ_ಠ.clutz.goog.editor.Field;
}
declare module 'goog:goog.editor.Field' {
  import alias = ಠ_ಠ.clutz.goog.editor.Field;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.Field {
  /**
   * Event types that can be stopped/started.
   */
  type EventType = string ;
  var EventType : {
    BEFORECHANGE : EventType ,
    BEFOREFOCUS : EventType ,
    BEFORESELECTIONCHANGE : EventType ,
    BEFORETAB : EventType ,
    BLUR : EventType ,
    CHANGE : EventType ,
    COMMAND_VALUE_CHANGE : EventType ,
    DELAYEDCHANGE : EventType ,
    FOCUS : EventType ,
    IFRAME_RESIZED : EventType ,
    LOAD : EventType ,
    SELECTIONCHANGE : EventType ,
    UNLOAD : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.Field.EventType'): typeof ಠ_ಠ.clutz.goog.editor.Field.EventType;
}
declare module 'goog:goog.editor.Field.EventType' {
  import alias = ಠ_ಠ.clutz.goog.editor.Field.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
  /**
   * Wrap an editable link.
   */
  class Link extends Link_Instance {
    /**
     * Initialize a new link.
     * @param anchor The anchor element.
     * @param url The initial URL.
     * @param opt_target The target.
     * @param opt_extraAnchors Extra anchors created by the browser when parsing a selection.
     */
    static createNewLink (anchor : HTMLAnchorElement | null , url : string , opt_target ? : string , opt_extraAnchors ? : ( HTMLAnchorElement | null ) [] | null ) : ಠ_ಠ.clutz.goog.editor.Link ;
    /**
     * Initialize a new link using text in anchor, or empty string if there is no
     * likely url in the anchor.
     * @param anchor The anchor element with likely url content.
     * @param opt_target The target.
     */
    static createNewLinkFromText (anchor : HTMLAnchorElement | null , opt_target ? : string ) : ಠ_ಠ.clutz.goog.editor.Link ;
    /**
     * Returns true if str could be an email address, false otherwise
     *
     * Ex: goog.editor.Link.isLikelyEmailAddress_("some word") == false
     * goog.editor.Link.isLikelyEmailAddress_("foo@foo.com") == true
     * @param str String to test for being email address.
     */
    static isLikelyEmailAddress (str : string ) : boolean ;
    /**
     * Returns true if str could be a URL, false otherwise
     *
     * Ex: TR_Util.isLikelyUrl_("http://www.google.com") == true
     * TR_Util.isLikelyUrl_("www.google.com") == true
     * @param str String to check if it looks like a URL.
     */
    static isLikelyUrl (str : string ) : boolean ;
    /**
     * Determines whether or not a url is an email link.
     * @param url A url.
     */
    static isMailto (url : string ) : boolean ;
  }
  class Link_Instance {
    private noStructuralTyping_: any;
    /**
     * Wrap an editable link.
     * @param anchor The anchor element.
     * @param isNew Whether this is a new link.
     */
    constructor (anchor : HTMLAnchorElement | null , isNew : boolean ) ;
    /**
     * After link creation, finish creating the link depending on the type
     * of link being created.
     * @param field The field where this link is being created.
     */
    finishLinkCreation (field : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    getAnchor ( ) : HTMLAnchorElement | null ;
    getCurrentText ( ) : string ;
    getExtraAnchors ( ) : ( HTMLAnchorElement | null ) [] ;
    getValidLinkFromText ( ) : string | null ;
    /**
     * Set the url without affecting the isNew() status of the link.
     * @param url A URL.
     */
    initializeUrl (url : string ) : void ;
    isNew ( ) : boolean ;
    /**
     * Places the cursor to the right of the anchor.
     * Note that this is different from goog.editor.range's placeCursorNextTo
     * in that it specifically handles the placement of a cursor in browsers
     * that trap you in links, by adding a space when necessary and placing the
     * cursor after that space.
     */
    placeCursorRightOf ( ) : void ;
    /**
     * Removes the link, leaving its contents in the document.  Note that this
     * object will no longer be usable/useful after this call.
     */
    removeLink ( ) : void ;
    /**
     * Change the link.
     * @param newText New text for the link. If the link contains all its text in one descendent, newText will only replace the text in that one node. Otherwise, we'll change the innerHTML of the whole link to newText.
     * @param newUrl A new URL.
     */
    setTextAndUrl (newText : string , newUrl : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.Link'): typeof ಠ_ಠ.clutz.goog.editor.Link;
}
declare module 'goog:goog.editor.Link' {
  import alias = ಠ_ಠ.clutz.goog.editor.Link;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
  /**
   * Abstract API for trogedit plugins.
   */
  class Plugin extends Plugin_Instance {
    /**
     * A set of op codes that run even on disabled plugins.
     */
    static IRREPRESSIBLE_OPS : Object ;
    /**
     * A map from plugin operations to the names of the methods that
     * invoke those operations.
     */
    static OPCODE : Object ;
  }
  class Plugin_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * The field object this plugin is attached to.
     */
    fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ;
    /**
     * The logger for this plugin.
     */
    logger : ಠ_ಠ.clutz.goog.debug.Logger | null ;
    activeOnUneditableFields ( ) : boolean ;
    /**
     * Cleans the contents of the node passed to it. The node contents are modified
     * directly, and the modifications will subsequently be used, for operations
     * such as saving the innerHTML of the editor etc. Since the plugins act on
     * the DOM directly, this method can be very expensive.
     *
     * This op is invoked even on disabled plugins.
     * @param fieldCopy The copy of the editable field which needs to be cleaned up.
     */
    cleanContentsDom (a : Element ) : any ;
    /**
     * Cleans the html contents of Trogedit. Both cleanContentsDom and
     * and cleanContentsHtml will be called on contents extracted from Trogedit.
     * The inverse of prepareContentsHtml.
     *
     * This op is invoked even on disabled plugins.
     * @param originalHtml The trogedit HTML.
     */
    cleanContentsHtml (a : string ) : string ;
    /**
     * Disables this plugin for the specified, registered field object.
     * @param fieldObject The field object.
     */
    disable (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Enables this plugin for the specified, registered field object. A field
     * object should only be enabled when it is loaded.
     * @param fieldObject The field object.
     */
    enable (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    /**
     * Handles execCommand. This default implementation handles dispatching
     * BEFORECHANGE, CHANGE, and SELECTIONCHANGE events, and calls
     * execCommandInternal to perform the actual command. Plugins that want to
     * do their own event dispatching should override execCommand, otherwise
     * it is preferred to only override execCommandInternal.
     *
     * This version of execCommand will only work for single field plugins.
     * Multi-field plugins must override execCommand.
     * @param command The command to execute.
     * @param var_args Any additional parameters needed to execute the command.
     */
    execCommand (command : string ,  ...var_args : any [] ) : any ;
    /**
     * Handles execCommand. This default implementation does nothing, and is
     * called by execCommand, which handles event dispatching. This method should
     * be overriden by plugins that don't need to do their own event dispatching.
     * If custom event dispatching is needed, execCommand shoul be overriden
     * instead.
     * @param command The command to execute.
     * @param var_args Any additional parameters needed to execute the command.
     */
    execCommandInternal (a : string ,  ...b : any [] ) : any ;
    getFieldDomHelper ( ) : ಠ_ಠ.clutz.goog.dom.DomHelper | null ;
    /**
     * Sets the field object for use with this plugin.
     */
    getFieldObject ( ) : ಠ_ಠ.clutz.goog.editor.Field | null ;
    getTrogClassId ( ) : string ;
    /**
     * Handles keydown. It is run before handleKeyboardShortcut and if it returns
     * true handleKeyboardShortcut will not be called.
     * @param e The browser event.
     */
    handleKeyDown (a : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    /**
     * Handles keypress. It is run before handleKeyboardShortcut and if it returns
     * true handleKeyboardShortcut will not be called.
     * @param e The browser event.
     */
    handleKeyPress (a : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    /**
     * Handles keyup.
     * @param e The browser event.
     */
    handleKeyUp (a : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    /**
     * Handles keyboard shortcuts.  Preferred to using handleKey* as it will use
     * the proper event based on browser and will be more performant. If
     * handleKeyPress/handleKeyDown returns true, this will not be called. If the
     * plugin handles the shortcut, it is responsible for dispatching appropriate
     * events (change, selection change at the time of this comment). If the plugin
     * calls execCommand on the editable field, then execCommand already takes care
     * of dispatching events.
     * NOTE: For performance reasons this is only called when any key is pressed
     * in conjunction with ctrl/meta keys OR when a small subset of keys (defined
     * in goog.editor.Field.POTENTIAL_SHORTCUT_KEYCODES_) are pressed without
     * ctrl/meta keys. We specifically don't invoke it when altKey is pressed since
     * alt key is used in many i8n UIs to enter certain characters.
     * @param e The browser event.
     * @param key The key pressed.
     * @param isModifierPressed Whether the ctrl/meta key was pressed or not.
     */
    handleKeyboardShortcut (a : ಠ_ಠ.clutz.goog.events.BrowserEvent , b : string , c : boolean ) : boolean ;
    /**
     * Handles selection change.
     * @param opt_e The browser event.
     * @param opt_target The node the selection changed to.
     */
    handleSelectionChange (a ? : ಠ_ಠ.clutz.goog.events.BrowserEvent , b ? : Node ) : boolean ;
    isAutoDispose ( ) : boolean ;
    /**
     * Returns whether this plugin is enabled for the field object.
     * @param fieldObject The field object.
     */
    isEnabled (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : boolean ;
    isSilentCommand (a : string ) : boolean ;
    /**
     * Whether the string corresponds to a command this plugin handles.
     * @param command Command string to check.
     */
    isSupportedCommand (command : string ) : boolean ;
    /**
     * Prepares the given HTML for editing. Strips out content that should not
     * appear in an editor, and normalizes content as appropriate. The inverse
     * of cleanContentsHtml.
     *
     * This op is invoked even on disabled plugins.
     * @param originalHtml The original HTML.
     * @param styles A map of strings. If the plugin wants to add any styles to the field element, it should add them as key-value pairs to this object.
     */
    prepareContentsHtml (a : string , b : Object | null ) : string ;
    /**
     * Gets the state of this command if this plugin serves that command.
     * @param command The command to check.
     */
    queryCommandValue (a : string ) : any ;
    /**
     * Registers the field object for use with this plugin.
     * @param fieldObject The editable field object.
     */
    registerFieldObject (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    /**
     * Saves the field's scroll position.  See b/7279077 for context.
     * Currently only does anything in Edge, since all other browsers
     * already seem to work correctly.
     */
    saveScrollPosition ( ) : ( ) => any ;
    /**
     * Set if this plugin should automatically be disposed when the registered
     * field is disposed.
     * @param autoDispose Whether to autoDispose.
     */
    setAutoDispose (autoDispose : boolean ) : void ;
    /**
     * Sets the field object for use with this plugin.
     * @param fieldObject The editable field object.
     */
    setFieldObject (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    /**
     * Unregisters and disables this plugin for the current field object.
     * @param fieldObj The field object. For single-field plugins, this parameter is ignored.
     */
    unregisterFieldObject (fieldObj : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.editor.Plugin {
  type Op = number ;
  var Op : {
    CLEAN_CONTENTS_DOM : Op ,
    CLEAN_CONTENTS_HTML : Op ,
    EXEC_COMMAND : Op ,
    KEYDOWN : Op ,
    KEYPRESS : Op ,
    KEYUP : Op ,
    PREPARE_CONTENTS_HTML : Op ,
    QUERY_COMMAND : Op ,
    SELECTION : Op ,
    SHORTCUT : Op ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.Plugin'): typeof ಠ_ಠ.clutz.goog.editor.Plugin;
}
declare module 'goog:goog.editor.Plugin' {
  import alias = ಠ_ಠ.clutz.goog.editor.Plugin;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
  /**
   * This class encapsulates an editable field that blends in with the
   * surrounding page.
   * To see events fired by this object, please see the base class.
   */
  class SeamlessField extends SeamlessField_Instance {
    static scrollbarWidth_ : number ;
  }
  class SeamlessField_Instance extends ಠ_ಠ.clutz.goog.editor.Field_Instance {
    /**
     * This class encapsulates an editable field that blends in with the
     * surrounding page.
     * To see events fired by this object, please see the base class.
     * @param id An identifer for the field. This is used to find the field and the element associated with this field.
     * @param opt_doc The document that the element with the given id can be found it.
     */
    constructor (id : string , opt_doc ? : Document | null ) ;
    attachIframe (iframe : HTMLIFrameElement | null ) : void ;
    clearListeners ( ) : void ;
    dispatchBlur ( ) : void ;
    /**
     * Perform all the sizing immediately.
     */
    doFieldSizingGecko ( ) : void ;
    getFieldFormatInfo (extraStyles : Object | null ) : ಠ_ಠ.clutz.goog.editor.icontent.FieldFormatInfo ;
    getIframeAttributes ( ) : Object ;
    /**
     * Gets the css rules that should be used to style an iframe's body as if it
     * were the original element that we made editable.
     * @param opt_forceRegeneration Set to true to not read the cached copy and instead completely regenerate the css rules.
     */
    getIframeableCss (opt_forceRegeneration ? : boolean ) : string ;
    handleChange ( ) : void ;
    handleFieldLoad ( ) : void ;
    /**
     * Applies CSS from the wrapper-div to the field iframe.
     */
    inheritBlendedCSS ( ) : void ;
    installStyles ( ) : void ;
    isFixedHeight ( ) : boolean ;
    makeEditableInternal (opt_iframeSrc ? : string ) : void ;
    overrideFixedHeight (newVal : boolean ) : void ;
    restoreDom ( ) : void ;
    /**
     * Sets the css rules that should be used inside the editable iframe.
     * Note: to clear the css cache between makeNotEditable/makeEditable,
     * call this with "" as iframeableCss.
     * TODO(user): Unify all these css setting methods + Nick's open
     * CL.  This is getting ridiculous.
     * @param iframeableCss String containing the css rules to use.
     */
    setIframeableCss (iframeableCss : string ) : void ;
    /**
     * Sets the min height of this editable field's iframe. Only used in growing
     * mode when an iframe is used. This will cause an immediate field sizing to
     * update the field if necessary based on the new min height.
     * @param height The min height specified as a number of pixels, e.g., 75.
     */
    setMinHeight (height : number ) : void ;
    setupMutationEventHandlersGecko ( ) : void ;
    turnOnDesignModeGecko ( ) : void ;
    usesIframe ( ) : boolean ;
    writeIframeContent (iframe : HTMLIFrameElement | null , innerHtml : string , extraStyles : Object | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.SeamlessField'): typeof ಠ_ಠ.clutz.goog.editor.SeamlessField;
}
declare module 'goog:goog.editor.SeamlessField' {
  import alias = ಠ_ಠ.clutz.goog.editor.SeamlessField;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
  /**
   * Class providing high level table editing functions.
   */
  class Table extends Table_Instance {
    /**
     * Default color for table borders.
     */
    static DEFAULT_BORDER_COLOR : string ;
    /**
     * Optimum size of empty cells (in pixels), if possible.
     */
    static OPTIMUM_EMPTY_CELL_WIDTH : number ;
    /**
     * Maximum width for new tables.
     */
    static OPTIMUM_MAX_NEW_TABLE_WIDTH : number ;
    /**
     * Creates a new table element, populated with cells and formatted.
     * @param doc Document in which to create the table element.
     * @param columns Number of columns in the table.
     * @param rows Number of rows in the table.
     * @param opt_tableStyle Object containing borderWidth and borderColor properties, used to set the initial style of the table.
     */
    static createDomTable (doc : Document | null , columns : number , rows : number , opt_tableStyle ? : Object | null ) : Element ;
    /**
     * Returns all child elements of a TR element that are of type TD or TH.
     * @param tr TR element in which to find children.
     */
    static getChildCellElements (tr : Element | null ) : ( Element | null ) [] ;
  }
  class Table_Instance {
    private noStructuralTyping_: any;
    /**
     * Class providing high level table editing functions.
     * @param node Element that is a table or descendant of a table.
     */
    constructor (node : Element | null ) ;
    dom_ : ಠ_ಠ.clutz.goog.dom.DomHelper ;
    element : Element | null ;
    /**
     * Creates an empty TD element and fill it with some empty content so it will
     * show up with borders even in IE pre-7 or if empty-cells is set to 'hide'
     */
    createEmptyTd ( ) : Element ;
    /**
     * Inserts a cell element at the given position. The colIndex is the logical
     * column index, not the position in the dom. This takes into consideration
     * that cells in a given logical  row may actually be children of a previous
     * DOM row that have used rowSpan to extend into the row.
     * @param td The new cell element to insert.
     * @param rowIndex Row in which to insert the element.
     * @param colIndex Column in which to insert the element.
     */
    insertCellElement (td : Element | null , rowIndex : number , colIndex : number ) : void ;
    /**
     * Inserts a new column in the table. The column will be created by
     * inserting new TD elements in each row, or extending the colspan
     * of existing TD elements.
     * @param opt_colIndex Index at which to insert the column. If this is omitted the column will be appended to the right side of the table.
     */
    insertColumn (opt_colIndex ? : number ) : ( Element | null ) [] ;
    /**
     * Inserts a new row in the table. The row will be populated with new
     * cells, and existing rowspanned cells that overlap the new row will
     * be extended.
     * @param opt_rowIndex Index at which to insert the row. If this is omitted the row will be appended to the end of the table.
     */
    insertRow (opt_rowIndex ? : number ) : Element ;
    /**
     * Merges multiple cells into a single cell, and sets the rowSpan and colSpan
     * attributes of the cell to take up the same space as the original cells.
     * @param startRowIndex Top coordinate of the cells to merge.
     * @param startColIndex Left coordinate of the cells to merge.
     * @param endRowIndex Bottom coordinate of the cells to merge.
     * @param endColIndex Right coordinate of the cells to merge.
     */
    mergeCells (startRowIndex : number , startColIndex : number , endRowIndex : number , endColIndex : number ) : boolean ;
    /**
     * Walks the dom structure of this object's table element and populates
     * this.rows with goog.editor.TableRow objects. This is done initially
     * to populate the internal data structures, and also after each time the
     * DOM structure is modified. Currently this means that the all existing
     * information is discarded and re-read from the DOM.
     */
    refresh ( ) : void ;
    /**
     * Removes a column from the table. This is done by removing cell elements,
     * or shrinking the colspan of elements that span multiple columns.
     * @param colIndex Index of the column to delete.
     */
    removeColumn (colIndex : number ) : void ;
    /**
     * Removes a row from the table, removing the TR element and
     * decrementing the rowspan of any cells in other rows that overlap the row.
     * @param rowIndex Index of the row to delete.
     */
    removeRow (rowIndex : number ) : void ;
    /**
     * Splits a cell with colspans or rowspans into multiple descrete cells.
     * @param rowIndex y coordinate of the cell to split.
     * @param colIndex x coordinate of the cell to split.
     */
    splitCell (rowIndex : number , colIndex : number ) : ( Element | null ) [] ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.Table'): typeof ಠ_ಠ.clutz.goog.editor.Table;
}
declare module 'goog:goog.editor.Table' {
  import alias = ಠ_ಠ.clutz.goog.editor.Table;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
  /**
   * Class representing a table cell, which may span across multiple
   * rows and columns
   */
  class TableCell extends TableCell_Instance {
  }
  class TableCell_Instance {
    private noStructuralTyping_: any;
    /**
     * Class representing a table cell, which may span across multiple
     * rows and columns
     * @param td This cell's underlying TD or TH element.
     * @param startRow Index of the row where this cell begins.
     * @param startCol Index of the column where this cell begins.
     */
    constructor (td : Element | null , startRow : number , startCol : number ) ;
    colSpan : number ;
    element : Element | null ;
    rowSpan : number ;
    startCol : number ;
    startRow : number ;
    /**
     * Set this cell's colSpan, updating both its colSpan property and the
     * underlying element's colSpan attribute.
     * @param colSpan The new colSpan.
     */
    setColSpan (colSpan : number ) : void ;
    /**
     * Set this cell's rowSpan, updating both its rowSpan property and the
     * underlying element's rowSpan attribute.
     * @param rowSpan The new rowSpan.
     */
    setRowSpan (rowSpan : number ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.TableCell'): typeof ಠ_ಠ.clutz.goog.editor.TableCell;
}
declare module 'goog:goog.editor.TableCell' {
  import alias = ಠ_ಠ.clutz.goog.editor.TableCell;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
  /**
   * Class representing a logical table row: a tr element and any cells
   * that appear in that row.
   */
  class TableRow extends TableRow_Instance {
  }
  class TableRow_Instance {
    private noStructuralTyping_: any;
    /**
     * Class representing a logical table row: a tr element and any cells
     * that appear in that row.
     * @param trElement This rows's underlying TR element.
     * @param rowIndex This row's index in its parent table.
     */
    constructor (trElement : Element | null , rowIndex : number ) ;
    columns : any [] ;
    element : Element | null ;
    index : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.TableRow'): typeof ಠ_ಠ.clutz.goog.editor.TableRow;
}
declare module 'goog:goog.editor.TableRow' {
  import alias = ಠ_ಠ.clutz.goog.editor.TableRow;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.defines {
  var USE_CONTENTEDITABLE_IN_FIREFOX_3 : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.defines'): typeof ಠ_ಠ.clutz.goog.editor.defines;
}
declare module 'goog:goog.editor.defines' {
  import alias = ಠ_ಠ.clutz.goog.editor.defines;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.focus {
  /**
   * Change focus to the given input field and set cursor to end of current text.
   * @param inputElem Input DOM element.
   */
  function focusInputField (inputElem : Element | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.focus'): typeof ಠ_ಠ.clutz.goog.editor.focus;
}
declare module 'goog:goog.editor.focus' {
  import alias = ಠ_ಠ.clutz.goog.editor.focus;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.icontent {
  /**
   * Sets up goog.editor.icontent to always use standards-mode iframes.
   */
  function forceStandardsModeIframes ( ) : void ;
  /**
   * Write the initial iframe content in IE/HTTPS mode.
   * @param info Formatting info about the field.
   * @param doc The iframe document.
   * @param bodyHtml The HTML to insert as the iframe body.
   */
  function writeHttpsInitialIframe (info : ಠ_ಠ.clutz.goog.editor.icontent.FieldFormatInfo | null , doc : Document | null , bodyHtml : string ) : void ;
  /**
   * Write the initial iframe content in normal mode.
   * @param info Formatting info about the field.
   * @param bodyHtml The HTML to insert as the iframe body.
   * @param style Style info about the field, if needed.
   * @param iframe The iframe.
   */
  function writeNormalInitialBlendedIframe (info : ಠ_ಠ.clutz.goog.editor.icontent.FieldFormatInfo | null , bodyHtml : string , style : ಠ_ಠ.clutz.goog.editor.icontent.FieldStyleInfo | null , iframe : HTMLIFrameElement | null ) : void ;
  /**
   * Write the initial iframe content in normal mode.
   * @param info Formatting info about the field.
   * @param bodyHtml The HTML to insert as the iframe body.
   * @param style Style info about the field, if needed.
   * @param iframe The iframe.
   */
  function writeNormalInitialIframe (info : ಠ_ಠ.clutz.goog.editor.icontent.FieldFormatInfo | null , bodyHtml : string , style : ಠ_ಠ.clutz.goog.editor.icontent.FieldStyleInfo | null , iframe : HTMLIFrameElement | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.icontent'): typeof ಠ_ಠ.clutz.goog.editor.icontent;
}
declare module 'goog:goog.editor.icontent' {
  import alias = ಠ_ಠ.clutz.goog.editor.icontent;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.icontent {
  /**
   * A data structure for storing simple rendering info about a field.
   */
  class FieldFormatInfo extends FieldFormatInfo_Instance {
  }
  class FieldFormatInfo_Instance {
    private noStructuralTyping_: any;
    /**
     * A data structure for storing simple rendering info about a field.
     * @param fieldId The id of the field.
     * @param standards Whether the field should be rendered in standards mode.
     * @param blended Whether the field is in blended mode.
     * @param fixedHeight Whether the field is in fixedHeight mode.
     * @param opt_extraStyles Other style attributes for the field, represented as a map of strings.
     */
    constructor (fieldId : string , standards : boolean , blended : boolean , fixedHeight : boolean , opt_extraStyles ? : Object | null ) ;
    blended_ : boolean ;
    extraStyles_ : Object ;
    fieldId_ : string ;
    fixedHeight_ : boolean ;
    standards_ : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.icontent.FieldFormatInfo'): typeof ಠ_ಠ.clutz.goog.editor.icontent.FieldFormatInfo;
}
declare module 'goog:goog.editor.icontent.FieldFormatInfo' {
  import alias = ಠ_ಠ.clutz.goog.editor.icontent.FieldFormatInfo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.icontent {
  /**
   * A data structure for storing simple info about the styles of a field.
   * Only needed in Firefox/Blended mode.
   */
  class FieldStyleInfo extends FieldStyleInfo_Instance {
  }
  class FieldStyleInfo_Instance {
    private noStructuralTyping_: any;
    /**
     * A data structure for storing simple info about the styles of a field.
     * Only needed in Firefox/Blended mode.
     * @param wrapper The wrapper div around a field.
     * @param css The css for a field.
     */
    constructor (wrapper : Element | null , css : string ) ;
    css_ : string ;
    wrapper_ : Element | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.icontent.FieldStyleInfo'): typeof ಠ_ಠ.clutz.goog.editor.icontent.FieldStyleInfo;
}
declare module 'goog:goog.editor.icontent.FieldStyleInfo' {
  import alias = ಠ_ಠ.clutz.goog.editor.icontent.FieldStyleInfo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.node {
  /**
   * Search ancestor nodes using a predicate function and returns the topmost
   * ancestor in the chain of consecutive ancestors that satisfies the condition.
   * @param node The node whose ancestors have to be searched.
   * @param hasProperty A function that takes a parent node as a parameter and returns true if it meets the criteria.
   */
  function findHighestMatchingAncestor (node : Node | null , hasProperty : (a : Node | null ) => boolean ) : Node | null ;
  /**
   * Search child nodes using a predicate function and return the first node that
   * satisfies the condition.
   * @param parent The parent node to search.
   * @param hasProperty A function that takes a child node as a parameter and returns true if it meets the criteria.
   */
  function findInChildren (parent : Node | null , hasProperty : (a : Node | null ) => boolean ) : number | null ;
  /**
   * Finds the top-most DOM node inside an editable field that is an ancestor
   * (or self) of a given DOM node and meets the specified criteria.
   * @param node The DOM node where the search starts.
   * @param criteria A function that takes a DOM node as a parameter and returns a boolean to indicate whether the node meets the criteria or not.
   */
  function findTopMostEditableAncestor (node : Node | null , criteria : (a : Node | null ) => boolean ) : Node | null ;
  /**
   * Version of firstChild that skips nodes that are entirely
   * whitespace and comments.
   * @param parent The reference node.
   */
  function getFirstChild (parent : Node | null ) : Node | null ;
  /**
   * Version of lastChild that skips nodes that are entirely whitespace or
   * comments.  (Normally lastChild is a property of all DOM nodes that gives the
   * last of the nodes contained directly in the reference node.)
   * @param parent The reference node.
   */
  function getLastChild (parent : Node | null ) : Node | null ;
  /**
   * Get the left-most non-ignorable leaf node of the given node.
   * @param parent The parent ndoe.
   */
  function getLeftMostLeaf (parent : Node | null ) : Node | null ;
  /**
   * Returns the length of the text in node if it is a text node, or the number
   * of children of the node, if it is an element. Useful for range-manipulation
   * code where you need to know the offset for the right side of the node.
   * @param node The node to get the length of.
   */
  function getLength (node : Node | null ) : number ;
  /**
   * Version of nextSibling that skips nodes that are entirely whitespace or
   * comments.
   * @param sibling The reference node.
   */
  function getNextSibling (sibling : Node | null ) : Node | null ;
  /**
   * Version of previoussibling that skips nodes that are entirely
   * whitespace or comments.  (Normally previousSibling is a property
   * of all DOM nodes that gives the sibling node, the node that is
   * a child of the same parent, that occurs immediately before the
   * reference node.)
   * @param sibling The reference node.
   */
  function getPreviousSibling (sibling : Node | null ) : Node | null ;
  /**
   * Get the right-most non-ignorable leaf node of the given node.
   * @param parent The parent ndoe.
   */
  function getRightMostLeaf (parent : Node | null ) : Node | null ;
  /**
   * Determine whether a node's text content is entirely whitespace.
   * @param textNode A node implementing the CharacterData interface (i.e., a Text, Comment, or CDATASection node.
   */
  function isAllNonNbspWhiteSpace (textNode : Node | null ) : boolean ;
  /**
   * Checks if node is a block-level html element. The <tt>display</tt> css
   * property is ignored.
   * @param node The node to test.
   */
  function isBlockTag (node : Node | null ) : boolean ;
  /**
   * Checks if a node is inside an editable container.
   * @param node The node to test.
   */
  function isEditable (node : Node | null ) : boolean ;
  /**
   * Checks if an element is a top-level editable container (meaning that
   * it itself is not editable, but all its child nodes are editable).
   * @param element The element to test.
   */
  function isEditableContainer (element : Node | null ) : boolean ;
  /**
   * Returns true if the node contains only whitespace and is not and does not
   * contain any images, iframes or embed tags.
   * @param node The node to check.
   * @param opt_prohibitSingleNbsp By default, this function treats a single nbsp as empty.  Set this to true to treat this case as non-empty.
   */
  function isEmpty (node : Node | null , opt_prohibitSingleNbsp ? : boolean ) : boolean ;
  /**
   * Determine if a node should be returned by the iterator functions.
   * @param node An object implementing the DOM1 Node interface.
   */
  function isImportant (node : Node | null ) : boolean ;
  /**
   * Check if the node is in a standards mode document.
   * @param node The node to test.
   */
  function isStandardsMode (node : Node | null ) : boolean ;
  /**
   * Replaces the innerHTML of a node.
   *
   * IE has serious problems if you try to set innerHTML of an editable node with
   * any selection. Early versions of IE tear up the old internal tree storage, to
   * help avoid ref-counting loops. But this sometimes leaves the selection object
   * in a bad state and leads to segfaults.
   *
   * Removing the nodes first prevents IE from tearing them up. This is not
   * strictly necessary in nodes that do not have the selection. You should always
   * use this function when setting innerHTML inside of a field.
   * @param node A node.
   * @param html The innerHTML to set on the node.
   */
  function replaceInnerHtml (node : Node | null , html : string ) : void ;
  /**
   * Skips siblings of a node that are empty text nodes.
   * @param node A node. May be null.
   */
  function skipEmptyTextNodes (node : Node | null ) : Node | null ;
  /**
   * Splits off a subtree.
   * @param currentNode The starting splitting point.
   * @param opt_secondHalf The initial leftmost leaf the new subtree. If null, siblings after currentNode will be placed in the subtree, but no additional node will be.
   * @param opt_root The top of the tree where splitting stops at.
   */
  function splitDomTreeAt (currentNode : Node , opt_secondHalf ? : Node | null , opt_root ? : Node | null ) : Node ;
  /**
   * Appends all of oldNode's children to newNode. This removes all children from
   * oldNode and appends them to newNode. oldNode is left with no children.
   * @param newNode Node to transfer children to.
   * @param oldNode Node to transfer children from.
   */
  function transferChildren (newNode : Node , oldNode : Node | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.node'): typeof ಠ_ಠ.clutz.goog.editor.node;
}
declare module 'goog:goog.editor.node' {
  import alias = ಠ_ಠ.clutz.goog.editor.node;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Base class for bubble plugins. This is used for to connect user behavior
   * in the editor to a goog.ui.editor.Bubble UI element that allows
   * the user to modify the properties of an element on their page (e.g. the alt
   * text of an image tag).
   *
   * Subclasses should override the abstract method getBubbleTargetFromSelection()
   * with code to determine if the current selection should activate the bubble
   * type. The other abstract method createBubbleContents() should be overriden
   * with code to create the inside markup of the bubble.  The base class creates
   * the rest of the bubble.
   */
  class AbstractBubblePlugin extends AbstractBubblePlugin_Instance {
    /**
     * The constant string used to separate option links.
     */
    static DASH_NBSP_STRING : string ;
    /**
     * Sets the global bubble factory function.
     * @param bubbleFactory Function that creates a bubble for the given bubble parent element and z index.
     */
    static setBubbleFactory (bubbleFactory : (a : Element , b : number ) => ಠ_ಠ.clutz.goog.ui.editor.Bubble ) : void ;
  }
  class AbstractBubblePlugin_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    /**
     * Place to register events the plugin listens to.
     */
    eventRegister : ಠ_ಠ.clutz.goog.events.EventHandler < ಠ_ಠ.clutz.goog.editor.plugins.AbstractBubblePlugin > | null ;
    /**
     * Called when the bubble is closed or hidden. The default implementation does
     * nothing.
     */
    cleanOnBubbleClose ( ) : void ;
    /**
     * Closes the bubble.
     */
    closeBubble ( ) : void ;
    /**
     * Creates and shows the property bubble.
     * @param targetElement The target element of the bubble.
     */
    createBubble (targetElement : Element | null ) : void ;
    /**
     * Should be overriden by subclasses to add the type specific contents to the
     * bubble.
     * @param bubbleContainer The container element of the bubble to which the contents should be added.
     */
    createBubbleContents (a : Element | null ) : any ;
    /**
     * Helper method that creates a link with text set to linkText and optionally
     * wires up a listener for the CLICK event or the link. The link is navigable by
     * tabs if {@code enableKeyboardNavigation(true)} was called.
     * @param linkId The id of the link.
     * @param linkText Text of the link.
     * @param opt_onClick Optional function to call when the link is clicked.
     * @param opt_container If specified, location to insert link. If no container is specified, the old link is removed and replaced.
     */
    createLink (linkId : string , linkText : string , opt_onClick ? : ( ( ...a : any [] ) => any ) | null , opt_container ? : Element | null ) : Element | null ;
    /**
     * Helper method to create a link to insert into the bubble. The link is
     * navigable by tabs if {@code enableKeyboardNavigation(true)} was called.
     * @param linkId The id of the link.
     * @param linkText Text of the link.
     * @param isAnchor Set to true to create an actual anchor tag instead of a span.  Actual links are right clickable (e.g. to open in a new window) and also update window status on hover.
     * @param opt_container If specified, location to insert link. If no container is specified, the old link is removed and replaced.
     */
    createLinkHelper (linkId : string , linkText : string , isAnchor : boolean , opt_container ? : Element | null ) : Element | null ;
    /**
     * Helper method that creates option links (such as edit, test, remove)
     * @param id String id for the span id.
     */
    createLinkOption (id : string ) : Element | null ;
    disable (field : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    /**
     * Sets whether the bubble should support tabbing through elements.
     */
    enableKeyboardNavigation (keyboardNavigationEnabled : boolean ) : void ;
    getBubbleDom ( ) : ಠ_ಠ.clutz.goog.dom.DomHelper | null ;
    /**
     * Returns the bubble map.  Subclasses may override to use a separate map.
     */
    getBubbleMap ( ) : { [ /* warning: coerced from ? */ key: string ]: ಠ_ಠ.clutz.goog.ui.editor.Bubble | null } ;
    /**
     * Should be overriden by subclasses to return the bubble target element or
     * null if an element of their required type isn't found.
     * @param selectedElement The target of the selection change event or the parent container of the current entire selection.
     */
    getBubbleTargetFromSelection (a : Element | null ) : Element | null ;
    getBubbleTitle ( ) : string ;
    getBubbleType ( ) : string ;
    /**
     * Returns the element whose properties the bubble manipulates.
     */
    getTargetElement ( ) : Element | null ;
    /**
     * In case the keyboard navigation is enabled, this will set focus on the first
     * tabbable element in the bubble when TAB is clicked.
     */
    handleKeyDown (e : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    handleKeyUp (e : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    /**
     * Pops up a property bubble for the given selection if appropriate and closes
     * open property bubbles if no longer needed.  This should not be overridden.
     */
    handleSelectionChange (opt_e ? : ಠ_ಠ.clutz.goog.events.BrowserEvent , opt_target ? : Node ) : boolean ;
    /**
     * Pops up a property bubble for the given selection if appropriate and closes
     * open property bubbles if no longer needed.
     * @param selectedElement The selected element.
     */
    handleSelectionChangeInternal (selectedElement : Element | null ) : boolean ;
    isVisible ( ) : boolean ;
    /**
     * Called after the bubble is shown. The default implementation does nothing.
     * Override it to provide your own one.
     */
    onShow ( ) : void ;
    /**
     * Register the handler for the target's CLICK and ENTER key events.
     * @param target The event source element.
     * @param handler The event handler.
     */
    registerActionHandler (target : Element | null , handler : ( ( ...a : any [] ) => any ) | null ) : void ;
    /**
     * Register the handler for the target's CLICK event.
     * @param target The event source element.
     * @param handler The event handler.
     */
    registerClickHandler (target : Element | null , handler : ( ( ...a : any [] ) => any ) | null ) : void ;
    /**
     * Reposition the property bubble.
     */
    reposition ( ) : void ;
    /**
     * Sets the instance bubble factory function.  If set to a non-null value, this
     * function will be used to create a bubble instead of the global factory
     * function.
     * @param bubbleFactory Function that creates a bubble for the given bubble parent element and z index.  Null to reset the factory function.
     */
    setBubbleFactory (bubbleFactory : ( (a : Element , b : number ) => ಠ_ಠ.clutz.goog.ui.editor.Bubble ) | null ) : void ;
    /**
     * Sets the bubble parent.
     * @param bubbleParent An element where the bubble will be anchored. If null, we will use the application document. This is useful when you have an editor embedded in a scrolling div.
     */
    setBubbleParent (bubbleParent : Element | null ) : void ;
    /**
     * Makes the given element tabbable.
     *
     * <p>Elements created by createLink[Helper] are tabbable even without
     * calling this method. Call it for other elements if needed.
     *
     * <p>If tabindex is not already set in the element, this function sets it to 0.
     * You'll usually want to also call {@code enableKeyboardNavigation(true)}.
     */
    setTabbable (element : Element ) : void ;
    /**
     * Inserts a link in the given container if it is specified or removes
     * the old link with this id and replaces it with the new link
     * @param link Html element to insert.
     * @param linkId Id of the link.
     * @param opt_container If specified, location to insert link.
     */
    setupLink (link : Element | null , linkId : string , opt_container ? : Element | null ) : void ;
    shouldPreferBubbleAboveElement ( ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.AbstractBubblePlugin'): typeof ಠ_ಠ.clutz.goog.editor.plugins.AbstractBubblePlugin;
}
declare module 'goog:goog.editor.plugins.AbstractBubblePlugin' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.AbstractBubblePlugin;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * An abstract superclass for a Trogedit plugin that creates exactly one
   * dialog. By default dialogs are not reused -- each time execCommand is called,
   * a new instance of the dialog object is created (and the old one disposed of).
   * To enable reusing of the dialog object, subclasses should call
   * setReuseDialog() after calling the superclass constructor.
   */
  class AbstractDialogPlugin extends AbstractDialogPlugin_Instance {
  }
  class AbstractDialogPlugin_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    /**
     * An abstract superclass for a Trogedit plugin that creates exactly one
     * dialog. By default dialogs are not reused -- each time execCommand is called,
     * a new instance of the dialog object is created (and the old one disposed of).
     * To enable reusing of the dialog object, subclasses should call
     * setReuseDialog() after calling the superclass constructor.
     * @param command The command that this plugin handles.
     */
    constructor (command : string ) ;
    /**
     * Creates a new instance of this plugin's dialog. Must be overridden by
     * subclasses.
     * @param dialogDomHelper The dom helper to be used to create the dialog.
     * @param opt_arg The dialog specific argument. Concrete subclasses should declare a specific type.
     */
    createDialog (a : ಠ_ಠ.clutz.goog.dom.DomHelper , b ? : any ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog | null ;
    disposeInternal ( ) : void ;
    /**
     * Cleans up the structure used to save the original selection before the dialog
     * was opened. Should be used by subclasses that don't restore the original
     * selection via restoreOriginalSelection.
     */
    disposeOriginalSelection ( ) : void ;
    /**
     * Handles execCommand. Dialog plugins don't make any changes when they open a
     * dialog, just when the dialog closes (because only modal dialogs are
     * supported). Hence this method does not dispatch the change events that the
     * superclass method does.
     * @param command The command to execute.
     * @param var_args Any additional parameters needed to execute the command.
     */
    execCommand (command : string ,  ...var_args : any [] ) : any ;
    /**
     * Handles execCommand by opening the dialog. Dispatches
     * {@link goog.editor.plugins.AbstractDialogPlugin.EventType.OPENED} after the
     * dialog is shown.
     * @param command The command to execute.
     * @param opt_arg The dialog specific argument. Should be the same as {@link createDialog}.
     */
    execCommandInternal (command : string , opt_arg ? : any ) : any ;
    /**
     * Returns the current dialog that was created and opened by this plugin.
     */
    getDialog ( ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog | null ;
    /**
     * Cleans up after the dialog has closed, including restoring the selection to
     * what it was before the dialog was opened. If a subclass modifies the editable
     * field's content such that the original selection is no longer valid (usually
     * the case when the user clicks OK, and sometimes also on Cancel), it is that
     * subclass' responsibility to place the selection in the desired place during
     * the OK or Cancel (or other) handler. In that case, this method will leave the
     * selection in place.
     * @param e The AFTER_HIDE event object.
     */
    handleAfterHide (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    isSupportedCommand (command : string ) : boolean ;
    /**
     * Restores the selection in the editable field to what it was before the dialog
     * was opened. This is not guaranteed to work if the contents of the field
     * have changed.
     */
    restoreOriginalSelection ( ) : void ;
    /**
     * Sets whether this plugin should reuse the same instance of the dialog each
     * time execCommand is called or create a new one. This is intended for use by
     * subclasses only, hence protected.
     * @param reuse Whether to reuse the dialog.
     */
    setReuseDialog (reuse : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.AbstractDialogPlugin'): typeof ಠ_ಠ.clutz.goog.editor.plugins.AbstractDialogPlugin;
}
declare module 'goog:goog.editor.plugins.AbstractDialogPlugin' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.AbstractDialogPlugin;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.AbstractDialogPlugin {
  /**
   * Event type constants for events the dialog plugins fire.
   */
  type EventType = string ;
  var EventType : {
    CLOSED : EventType ,
    OPENED : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.AbstractDialogPlugin.EventType'): typeof ಠ_ಠ.clutz.goog.editor.plugins.AbstractDialogPlugin.EventType;
}
declare module 'goog:goog.editor.plugins.AbstractDialogPlugin.EventType' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.AbstractDialogPlugin.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Plugin to handle tab keys. Specific tab behavior defined by subclasses.
   */
  class AbstractTabHandler extends AbstractTabHandler_Instance {
  }
  class AbstractTabHandler_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    handleKeyboardShortcut (e : ಠ_ಠ.clutz.goog.events.BrowserEvent , key : string , isModifierPressed : boolean ) : boolean ;
    /**
     * Handle a tab key press.
     * @param e The key event.
     */
    handleTabKey (a : ಠ_ಠ.clutz.goog.events.Event | null ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.AbstractTabHandler'): typeof ಠ_ಠ.clutz.goog.editor.plugins.AbstractTabHandler;
}
declare module 'goog:goog.editor.plugins.AbstractTabHandler' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.AbstractTabHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Functions to style text (e.g. underline, make bold, etc.)
   */
  class BasicTextFormatter extends BasicTextFormatter_Instance {
  }
  class BasicTextFormatter_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    cleanContentsDom (fieldCopy : Element ) : any ;
    cleanContentsHtml (html : string ) : string ;
    /**
     * Execute a user-initiated command.
     * @param command Command to execute.
     * @param var_args For color commands, this should be the hex color (with the #). For FORMAT_BLOCK, this should be the goog.editor.plugins.BasicTextFormatter.BLOCK_COMMAND. It will be unused for other commands.
     */
    execCommandInternal (command : string ,  ...var_args : any [] ) : Object | null | undefined ;
    getTrogClassId ( ) : string ;
    handleKeyboardShortcut (e : ಠ_ಠ.clutz.goog.events.BrowserEvent , key : string , isModifierPressed : boolean ) : boolean ;
    /**
     * Whether the string corresponds to a command that should be silent.
     */
    isSilentCommand (command : string ) : boolean ;
    /**
     * Whether the string corresponds to a command this plugin handles.
     * @param command Command string to check.
     */
    isSupportedCommand (command : string ) : boolean ;
    /**
     * Logging object.
     */
    logger : ಠ_ಠ.clutz.goog.debug.Logger | null ;
    prepareContentsHtml (html : string , a ? : Object | null ) : string ;
    /**
     * Gets the command value.
     * @param command The command value to get.
     */
    queryCommandValue (command : string ) : string | boolean | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.BasicTextFormatter'): typeof ಠ_ಠ.clutz.goog.editor.plugins.BasicTextFormatter;
}
declare module 'goog:goog.editor.plugins.BasicTextFormatter' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.BasicTextFormatter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.BasicTextFormatter {
  /**
   * Commands implemented by this plugin.
   */
  type COMMAND = string ;
  var COMMAND : {
    BACKGROUND_COLOR : COMMAND ,
    BOLD : COMMAND ,
    CREATE_LINK : COMMAND ,
    FONT_COLOR : COMMAND ,
    FONT_FACE : COMMAND ,
    FONT_SIZE : COMMAND ,
    FORMAT_BLOCK : COMMAND ,
    HORIZONTAL_RULE : COMMAND ,
    INDENT : COMMAND ,
    ITALIC : COMMAND ,
    JUSTIFY_CENTER : COMMAND ,
    JUSTIFY_FULL : COMMAND ,
    JUSTIFY_LEFT : COMMAND ,
    JUSTIFY_RIGHT : COMMAND ,
    LINK : COMMAND ,
    ORDERED_LIST : COMMAND ,
    OUTDENT : COMMAND ,
    STRIKE_THROUGH : COMMAND ,
    SUBSCRIPT : COMMAND ,
    SUPERSCRIPT : COMMAND ,
    UNDERLINE : COMMAND ,
    UNORDERED_LIST : COMMAND ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.BasicTextFormatter.COMMAND'): typeof ಠ_ಠ.clutz.goog.editor.plugins.BasicTextFormatter.COMMAND;
}
declare module 'goog:goog.editor.plugins.BasicTextFormatter.COMMAND' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.BasicTextFormatter.COMMAND;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Plugin to handle splitting block quotes.  This plugin does nothing on its
   * own and should be used in conjunction with EnterHandler or one of its
   * subclasses.
   */
  class Blockquote extends Blockquote_Instance {
    /**
     * Class ID used to identify this plugin.
     */
    static CLASS_ID : string ;
    /**
     * Command implemented by this plugin.
     */
    static SPLIT_COMMAND : string ;
  }
  class Blockquote_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    /**
     * Plugin to handle splitting block quotes.  This plugin does nothing on its
     * own and should be used in conjunction with EnterHandler or one of its
     * subclasses.
     * @param requiresClassNameToSplit Whether to split only blockquotes that have the given classname.
     * @param opt_className The classname to apply to generated blockquotes.  Defaults to 'tr_bq'.
     */
    constructor (requiresClassNameToSplit : boolean , opt_className ? : string ) ;
    /**
     * Splits a quoted region if any.  To be called on a key press event.  When this
     * function returns true, the event that caused it to be called should be
     * canceled.
     * @param command The command to execute.
     * @param var_args Single additional argument representing the current cursor position. If BrowserFeature.HAS_W3C_RANGES it is an object with a {@code node} key and an {@code offset} key. In other cases (legacy IE) it is a single node.
     */
    execCommandInternal (command : string ,  ...var_args : any [] ) : boolean | undefined ;
    /**
     * Gets the class name required for setup blockquotes.
     */
    getBlockquoteClassName ( ) : string ;
    getTrogClassId ( ) : string ;
    /**
     * Checks if a node is a blockquote element which has been setup.
     * @param node DOM node to check.
     */
    isSetupBlockquote (node : Node | null ) : boolean ;
    /**
     * Checks if a node is a blockquote which can be split. A splittable blockquote
     * meets the following criteria:
     * <ol>
     * <li>Node is a blockquote element</li>
     * <li>Node has the blockquote classname if the classname is required to
     * split</li>
     * </ol>
     * @param node DOM node in question.
     */
    isSplittableBlockquote (node : Node | null ) : boolean ;
    isSupportedCommand (command : string ) : boolean ;
    /**
     * Checks if a node is a blockquote element which has not been setup yet.
     * @param node DOM node to check.
     */
    isUnsetupBlockquote (node : Node | null ) : boolean ;
    /**
     * Logging object.
     */
    logger : ಠ_ಠ.clutz.goog.debug.Logger | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.Blockquote'): typeof ಠ_ಠ.clutz.goog.editor.plugins.Blockquote;
}
declare module 'goog:goog.editor.plugins.Blockquote' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.Blockquote;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Plugin for generating emoticons.
   */
  class Emoticons extends Emoticons_Instance {
    /**
     * The emoticon command.
     */
    static COMMAND : string ;
  }
  class Emoticons_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    /**
     * Inserts an emoticon into the editor at the cursor location. Places the
     * cursor to the right of the inserted emoticon.
     * @param command Command to execute.
     * @param opt_arg Emoji to insert.
     */
    execCommandInternal (command : string , opt_arg ? : any ) : Object | undefined ;
    isSupportedCommand (command : string ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.Emoticons'): typeof ಠ_ಠ.clutz.goog.editor.plugins.Emoticons;
}
declare module 'goog:goog.editor.plugins.Emoticons' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.Emoticons;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Plugin to handle enter keys. This does all the crazy to normalize (as much as
   * is reasonable) what happens when you hit enter. This also handles the
   * special casing of hitting enter in a blockquote.
   *
   * In IE, Webkit, and Opera, the resulting HTML uses one DIV tag per line. In
   * Firefox, the resulting HTML uses BR tags at the end of each line.
   */
  class EnterHandler extends EnterHandler_Instance {
    /**
     * Whether this is a node that contains a single BR tag and non-nbsp
     * whitespace.
     * @param node Node to check.
     */
    static isBrElem (node : Node | null ) : boolean ;
    /**
     * Determines whether the lowest containing block node is a blockquote.
     * @param n The node.
     */
    static isDirectlyInBlockquote (n : Node | null ) : boolean ;
  }
  class EnterHandler_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    /**
     * Deletes the element at the cursor if it is a BR node, and if it does, calls
     * e.preventDefault to stop the browser from deleting. Only necessary in Gecko
     * as a workaround for mozilla bug 205350 where deleting a BR that is followed
     * by a block element doesn't work (the BR gets immediately replaced). We also
     * need to account for an ill-formed cursor which occurs from us trying to
     * stop the browser from deleting.
     * @param e The DELETE keypress event.
     */
    deleteBrGecko (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    enable (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    /**
     * Ensures all text in IE and Opera to be in the given tag in order to control
     * Enter spacing. Call this when Enter is pressed if desired.
     *
     * We want to make sure the user is always inside of a block (or other nodes
     * listed in goog.editor.plugins.EnterHandler.IGNORE_ENSURE_BLOCK_NODES_).  We
     * listen to keypress to force nodes that the user is leaving to turn into
     * blocks, but we also need to listen to keyup to force nodes that the user is
     * entering to turn into blocks.
     * Example:  html is: `<h2>foo[cursor]</h2>`, and the user hits enter.  We
     * don't want to format the h2, but we do want to format the P that is
     * created on enter.  The P node is not available until keyup.
     * @param tag The tag name to convert to.
     * @param opt_keyUp Whether the function is being called on key up. When called on key up, the cursor is in the newly created node, so the semantics for when to change it to a block are different.  Specifically, if the resulting node contains only a BR, it is converted to `<tag>`.
     */
    ensureBlockIeOpera (tag : ಠ_ಠ.clutz.goog.dom.TagName , opt_keyUp ? : boolean ) : void ;
    /**
     * Gets HTML with no contents that won't collapse, for browsers that
     * collapse the empty string.
     */
    getNonCollapsingBlankHtml ( ) : string ;
    getTrogClassId ( ) : string ;
    /**
     * Internal backspace handler.
     * @param e The keypress event.
     * @param range The closure range object.
     */
    handleBackspaceInternal (e : ಠ_ಠ.clutz.goog.events.Event | null , range : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ) : void ;
    /**
     * Internal delete key handler.
     * @param e The keypress event.
     */
    handleDeleteGecko (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handle an enter key press on collapsed selection.  handleEnterGecko_ ensures
     * the selection is collapsed by deleting its contents if it is not.  The
     * default implementation does nothing.
     * @param e The key press event.
     * @param wasCollapsed Whether the selection was collapsed before the key press.  If it was not, code before this function has already cleared the contents of the selection.
     * @param range Object representing the selection.
     */
    handleEnterAtCursorGeckoInternal (a : ಠ_ಠ.clutz.goog.events.BrowserEvent | null , b : boolean , c : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ) : any ;
    /**
     * Handle an enter key press in WebKit.
     * @param e The key press event.
     */
    handleEnterWebkitInternal (a : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : any ;
    handleKeyPress (e : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    handleKeyUp (e : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    /**
     * Internal handler for keyup events.
     * @param e The key event.
     */
    handleKeyUpInternal (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * If the contents are empty, return the 'default' html for the field.
     * The 'default' contents depend on the enter handling mode, so it
     * makes the most sense in this plugin.
     * @param html The html to prepare.
     */
    prepareContentsHtml (html : string , a ? : Object | null ) : string ;
    /**
     * Fix paragraphs to be the correct type of node.
     * @param e The `<enter>` key event.
     * @param split Whether we already split up a blockquote by manually inserting elements.
     */
    processParagraphTagsInternal (e : ಠ_ಠ.clutz.goog.events.Event | null , split : boolean ) : void ;
    /**
     * The type of block level tag to add on enter, for browsers that support
     * specifying the default block-level tag. Can be overriden by subclasses; must
     * be either DIV or P.
     */
    tag : ಠ_ಠ.clutz.goog.dom.TagName ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.EnterHandler'): typeof ಠ_ಠ.clutz.goog.editor.plugins.EnterHandler;
}
declare module 'goog:goog.editor.plugins.EnterHandler' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.EnterHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * First Strong plugin.
   */
  class FirstStrong extends FirstStrong_Instance {
    /**
     * The name of the attribute which records the input text.
     */
    static INPUT_ATTRIBUTE : string ;
  }
  class FirstStrong_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    getTrogClassId ( ) : string ;
    handleKeyPress (e : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    /**
     * Calls the flip directionality commands.  This is done here so things go into
     * the redo-undo stack at the expected order; fist enter the input, then flip
     * directionality.
     */
    handleKeyUp (e : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    handleSelectionChange (e ? : ಠ_ಠ.clutz.goog.events.BrowserEvent , node ? : Node ) : boolean ;
    queryCommandValue (command : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.FirstStrong'): typeof ಠ_ಠ.clutz.goog.editor.plugins.FirstStrong;
}
declare module 'goog:goog.editor.plugins.FirstStrong' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.FirstStrong;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Applies header styles to text.
   */
  class HeaderFormatter extends HeaderFormatter_Instance {
  }
  class HeaderFormatter_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    getTrogClassId ( ) : string ;
    handleKeyboardShortcut (e : ಠ_ಠ.clutz.goog.events.BrowserEvent , key : string , isModifierPressed : boolean ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.HeaderFormatter {
  type HEADER_COMMAND = string ;
  var HEADER_COMMAND : {
    H1 : HEADER_COMMAND ,
    H2 : HEADER_COMMAND ,
    H3 : HEADER_COMMAND ,
    H4 : HEADER_COMMAND ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.HeaderFormatter'): typeof ಠ_ಠ.clutz.goog.editor.plugins.HeaderFormatter;
}
declare module 'goog:goog.editor.plugins.HeaderFormatter' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.HeaderFormatter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Property bubble plugin for links.
   */
  class LinkBubble extends LinkBubble_Instance {
    static MSG_INVALID_URL_LINK_BUBBLE : string ;
    static MSG_LINK_BUBBLE_CHANGE : string ;
    static MSG_LINK_BUBBLE_REMOVE : string ;
    static MSG_LINK_BUBBLE_TEST_LINK : string ;
  }
  class LinkBubble_Instance extends ಠ_ಠ.clutz.goog.editor.plugins.AbstractBubblePlugin_Instance {
    /**
     * Property bubble plugin for links.
     * @param var_args List of extra actions supported by the bubble.
     */
    constructor ( ...var_args : ( ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble.Action | undefined ) [] ) ;
    createBubbleContents (bubbleContainer : Element | null ) : any ;
    execCommandInternal (command : string ,  ...var_args : any [] ) : any ;
    getBubbleTargetFromSelection (selectedElement : Element | null ) : Element | null ;
    getBubbleTitle ( ) : string ;
    getBubbleType ( ) : string ;
    /**
     * Returns the target element url for the bubble.
     */
    getTargetUrl ( ) : string ;
    /**
     * Returns the message to display for testing a link.
     */
    getTestLinkMessage ( ) : string ;
    getTrogClassId ( ) : string ;
    /**
     * Returns whether the URL should be considered invalid.  This always returns
     * false in the base class, and should be overridden by subclasses that wish
     * to impose validity rules on URLs.
     * @param url The url to check.
     */
    isInvalidUrl (a : string ) : boolean ;
    isSupportedCommand (command : string ) : boolean ;
    /**
     * Sets the proper state for the action links.
     */
    onShow ( ) : void ;
    /**
     * Tells the plugin whether to block URLs with schemes not in the whitelist.
     * If blocking is enabled, this plugin will not linkify the link in the bubble
     * popup.
     * @param blockOpeningUnsafeSchemes Whether to block non-whitelisted schemes.
     */
    setBlockOpeningUnsafeSchemes (blockOpeningUnsafeSchemes : boolean ) : void ;
    /**
     * Sets a whitelist of allowed URL schemes that are safe to open.
     * Schemes should all be in lowercase. If the plugin is set to block opening
     * unsafe schemes, user-entered URLs will be converted to lowercase and checked
     * against this list. The whitelist has no effect if blocking is not enabled.
     * @param schemes String array of URL schemes to allow (http, https, etc.).
     */
    setSafeToOpenSchemes (schemes : string [] | null ) : void ;
    /**
     * Set the optional function for getting the "test" link of a url.
     * @param func The function to use.
     */
    setTestLinkUrlFn (func : (a : string ) => string ) : void ;
    /**
     * Checks whether the plugin should open the given url in a new window.
     * @param url The url to check.
     */
    shouldOpenUrl (url : string ) : boolean ;
    /**
     * Tells the plugin to stop leaking the page's url via the referrer header when
     * the link text link is clicked. When the user clicks on a link, the
     * browser makes a request for the link url, passing the url of the current page
     * in the request headers. If the user wants the current url to be kept secret
     * (e.g. an unpublished document), the owner of the url that was clicked will
     * see the secret url in the request headers, and it will no longer be a secret.
     * Calling this method will not send a referrer header in the request, just as
     * if the user had opened a blank window and typed the url in themselves.
     */
    stopReferrerLeaks ( ) : void ;
    /**
     * Tests the link by opening it in a new tab/window. Should be used as the
     * click event handler for the test pseudo-link.
     * @param opt_event If passed in, the event will be stopped.
     */
    testLink (opt_event ? : GlobalEvent ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.LinkBubble'): typeof ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble;
}
declare module 'goog:goog.editor.plugins.LinkBubble' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble {
  /**
   * Constructor for extra actions that can be added to the link bubble.
   */
  class Action extends Action_Instance {
  }
  class Action_Instance {
    private noStructuralTyping_: any;
    /**
     * Constructor for extra actions that can be added to the link bubble.
     * @param spanId The ID for the span showing the action.
     * @param linkId The ID for the link showing the action.
     * @param message The text for the link showing the action.
     * @param toShowFn Test function to determine whether to show the action for the given URL.
     * @param actionFn Action function to run when the action is clicked.  Takes the current target URL as a parameter.
     */
    constructor (spanId : string , linkId : string , message : string , toShowFn : (a : string ) => boolean , actionFn : (a : string ) => undefined ) ;
    actionFn_ (a : string ) : void ;
    linkId_ : string ;
    message_ : string ;
    spanId_ : string ;
    toShowFn_ (a : string ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.LinkBubble.Action'): typeof ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble.Action;
}
declare module 'goog:goog.editor.plugins.LinkBubble.Action' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble.Action;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * A plugin that opens the link dialog.
   */
  class LinkDialogPlugin extends LinkDialogPlugin_Instance {
  }
  class LinkDialogPlugin_Instance extends ಠ_ಠ.clutz.goog.editor.plugins.AbstractDialogPlugin_Instance {
    /**
     * Creates a new instance of the dialog and registers for the relevant events.
     * @param dialogDomHelper The dom helper to be used to create the dialog.
     * @param opt_link The target link (should be a goog.editor.Link).
     */
    createDialog (dialogDomHelper : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_link ? : any ) : ಠ_ಠ.clutz.goog.ui.editor.LinkDialog ;
    /**
     * Link object that the dialog is editing.
     */
    currentLink_ : ಠ_ಠ.clutz.goog.editor.Link | null ;
    disposeInternal ( ) : void ;
    /**
     * Handles execCommand by opening the dialog.
     * @param command The command to execute.
     * @param opt_arg {@link A goog.editor.Link} object representing the link being edited.
     */
    execCommandInternal (command : string , opt_arg ? : any ) : any ;
    getCurrentLink ( ) : ಠ_ಠ.clutz.goog.editor.Link | null ;
    getEventHandler < T > ( ) : ಠ_ಠ.clutz.goog.events.EventHandler < T > | null ;
    /**
     * Returns whether the"open link in new window" checkbox was checked last time
     * the dialog was closed.
     */
    getOpenLinkInNewWindowCheckedState ( ) : boolean ;
    /**
     * Handles when the dialog closes.
     * @param e The AFTER_HIDE event object.
     */
    handleAfterHide (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles the BeforeTestLink event fired when the 'test' link is clicked.
     * @param e BeforeTestLink event object.
     */
    handleBeforeTestLink (e : ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.BeforeTestLinkEvent | null ) : void ;
    /**
     * Handles the OK event from the dialog by updating the link in the field.
     * @param e OK event object.
     */
    handleOk (e : ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.OkEvent | null ) : void ;
    /**
     * Tells the plugin whether to block URLs with schemes not in the whitelist.
     * If blocking is enabled, this plugin will stop the 'Test Link' popup
     * window from being created. Blocking doesn't affect link creation--if the
     * user clicks the 'OK' button with an unsafe URL, the link will still be
     * created as normal.
     * @param blockOpeningUnsafeSchemes Whether to block non-whitelisted schemes.
     */
    setBlockOpeningUnsafeSchemes (blockOpeningUnsafeSchemes : boolean ) : void ;
    /**
     * Sets the warning message to show to users about including email addresses on
     * public web pages.
     * @param emailWarning Warning message to show users about including email addresses on the web.
     */
    setEmailWarning (emailWarning : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
    /**
     * Sets a whitelist of allowed URL schemes that are safe to open.
     * Schemes should all be in lowercase. If the plugin is set to block opening
     * unsafe schemes, user-entered URLs will be converted to lowercase and checked
     * against this list. The whitelist has no effect if blocking is not enabled.
     * @param schemes String array of URL schemes to allow (http, https, etc.).
     */
    setSafeToOpenSchemes (schemes : string [] | null ) : void ;
    /**
     * Checks whether the plugin should open the given url in a new window.
     * @param url The url to check.
     */
    shouldOpenUrl (url : string ) : boolean ;
    /**
     * Tells the dialog to show a checkbox where the user can choose to have the
     * link open in a new window.
     * @param startChecked Whether to check the checkbox the first time the dialog is shown. Subesquent times the checkbox will remember its previous state.
     */
    showOpenLinkInNewWindow (startChecked : boolean ) : void ;
    /**
     * Tells the dialog to show a checkbox where the user can choose to have
     * 'rel=nofollow' attribute added to the link.
     */
    showRelNoFollow ( ) : void ;
    /**
     * Tells the plugin to stop leaking the page's url via the referrer header when
     * the "test this link" link is clicked. When the user clicks on a link, the
     * browser makes a request for the link url, passing the url of the current page
     * in the request headers. If the user wants the current url to be kept secret
     * (e.g. an unpublished document), the owner of the url that was clicked will
     * see the secret url in the request headers, and it will no longer be a secret.
     * Calling this method will not send a referrer header in the request, just as
     * if the user had opened a blank window and typed the url in themselves.
     */
    stopReferrerLeaks ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.LinkDialogPlugin'): typeof ಠ_ಠ.clutz.goog.editor.plugins.LinkDialogPlugin;
}
declare module 'goog:goog.editor.plugins.LinkDialogPlugin' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.LinkDialogPlugin;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Plugin to add a keyboard shortcut for the link command
   */
  class LinkShortcutPlugin extends LinkShortcutPlugin_Instance {
  }
  class LinkShortcutPlugin_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    getTrogClassId ( ) : string ;
    handleKeyboardShortcut (e : ಠ_ಠ.clutz.goog.events.BrowserEvent , key : string , isModifierPressed : boolean ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.LinkShortcutPlugin'): typeof ಠ_ಠ.clutz.goog.editor.plugins.LinkShortcutPlugin;
}
declare module 'goog:goog.editor.plugins.LinkShortcutPlugin' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.LinkShortcutPlugin;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Plugin to handle tab keys in lists to indent and outdent.
   */
  class ListTabHandler extends ListTabHandler_Instance {
  }
  class ListTabHandler_Instance extends ಠ_ಠ.clutz.goog.editor.plugins.AbstractTabHandler_Instance {
    getTrogClassId ( ) : string ;
    handleTabKey (e : ಠ_ಠ.clutz.goog.events.Event | null ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.ListTabHandler'): typeof ಠ_ಠ.clutz.goog.editor.plugins.ListTabHandler;
}
declare module 'goog:goog.editor.plugins.ListTabHandler' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.ListTabHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * A plugin that manages lorem ipsum state of editable fields.
   */
  class LoremIpsum extends LoremIpsum_Instance {
  }
  class LoremIpsum_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    /**
     * A plugin that manages lorem ipsum state of editable fields.
     * @param message The lorem ipsum message.
     */
    constructor (message : string ) ;
    /**
     * Handles execCommand.
     * @param command The command to execute. Should be CLEAR_LOREM or UPDATE_LOREM.
     * @param opt_placeCursor Whether to place the cursor in the field after clearing lorem. Should be a boolean.
     */
    execCommand (command : string , opt_placeCursor ? : any ) : any ;
    isSupportedCommand (command : string ) : boolean ;
    /**
     * Handles queryCommandValue.
     * @param command The command to query.
     */
    queryCommandValue (command : string ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.LoremIpsum'): typeof ಠ_ಠ.clutz.goog.editor.plugins.LoremIpsum;
}
declare module 'goog:goog.editor.plugins.LoremIpsum' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.LoremIpsum;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * A plugin to handle removing formatting from selected text.
   */
  class RemoveFormatting extends RemoveFormatting_Instance {
    /**
     * The editor command this plugin in handling.
     */
    static REMOVE_FORMATTING_COMMAND : string ;
  }
  class RemoveFormatting_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    execCommandInternal (command : string ,  ...var_args : any [] ) : any ;
    getTrogClassId ( ) : string ;
    /**
     * Handle per node special processing if necessary. If this function returns
     * null then standard cleanup is applied. Otherwise this node and all children
     * are assumed to be cleaned.
     * NOTE(user): If an alternate RemoveFormatting processor is provided
     * (setRemoveFormattingFunc()), this will no longer work.
     * @param node The node to clean.
     */
    getValueForNode (node : Element | null ) : string | null ;
    handleKeyboardShortcut (e : ಠ_ಠ.clutz.goog.events.BrowserEvent , key : string , isModifierPressed : boolean ) : boolean ;
    isSupportedCommand (command : string ) : boolean ;
    /**
     * Sets a function to be used for remove formatting.
     * @param removeFormattingFunc - A function that takes  a string of html and returns a string of html that does any other formatting changes desired.  Use this only if trogedit's behavior doesn't meet your needs.
     */
    setRemoveFormattingFunc (removeFormattingFunc : (a : string ) => string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.RemoveFormatting'): typeof ಠ_ಠ.clutz.goog.editor.plugins.RemoveFormatting;
}
declare module 'goog:goog.editor.plugins.RemoveFormatting' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.RemoveFormatting;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Plugin to handle tab keys when not in lists to add 4 spaces.
   */
  class SpacesTabHandler extends SpacesTabHandler_Instance {
  }
  class SpacesTabHandler_Instance extends ಠ_ಠ.clutz.goog.editor.plugins.AbstractTabHandler_Instance {
    getTrogClassId ( ) : string ;
    handleTabKey (e : ಠ_ಠ.clutz.goog.events.Event | null ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.SpacesTabHandler'): typeof ಠ_ಠ.clutz.goog.editor.plugins.SpacesTabHandler;
}
declare module 'goog:goog.editor.plugins.SpacesTabHandler' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.SpacesTabHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Plugin that adds support for table creation and editing commands.
   */
  class TableEditor extends TableEditor_Instance {
  }
  class TableEditor_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    /**
     * Adds a function to filter out non-user-editable tables.
     * @param func A function to decide whether the table element could be editable by the user or not.
     */
    addIsTableEditableFunction (func : (a : Element | null ) => boolean ) : void ;
    enable (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    execCommandInternal (command : string ,  ...opt_arg : any [] ) : any ;
    getTrogClassId ( ) : string ;
    /**
     * Whether the string corresponds to a command this plugin handles.
     * @param command Command string to check.
     */
    isSupportedCommand (command : string ) : boolean ;
    /**
     * Returns the current value of a given command. Currently this plugin
     * only returns a value for goog.editor.plugins.TableEditor.COMMAND.TABLE.
     */
    queryCommandValue (command : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.TableEditor {
  type COMMAND = string ;
  var COMMAND : {
    INSERT_COLUMN_AFTER : COMMAND ,
    INSERT_COLUMN_BEFORE : COMMAND ,
    INSERT_ROW_AFTER : COMMAND ,
    INSERT_ROW_BEFORE : COMMAND ,
    MERGE_CELLS : COMMAND ,
    REMOVE_COLUMNS : COMMAND ,
    REMOVE_ROWS : COMMAND ,
    REMOVE_TABLE : COMMAND ,
    SPLIT_CELL : COMMAND ,
    TABLE : COMMAND ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.TableEditor'): typeof ಠ_ಠ.clutz.goog.editor.plugins.TableEditor;
}
declare module 'goog:goog.editor.plugins.TableEditor' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.TableEditor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Plugin to handle enter keys. This subclass normalizes all browsers to use
   * the given block tag on enter.
   */
  class TagOnEnterHandler extends TagOnEnterHandler_Instance {
  }
  class TagOnEnterHandler_Instance extends ಠ_ಠ.clutz.goog.editor.plugins.EnterHandler_Instance {
    /**
     * Plugin to handle enter keys. This subclass normalizes all browsers to use
     * the given block tag on enter.
     * @param tag The type of tag to add on enter.
     */
    constructor (tag : ಠ_ಠ.clutz.goog.dom.TagName ) ;
    tag : ಠ_ಠ.clutz.goog.dom.TagName ;
    /**
     * This plugin is active on uneditable fields so it can provide a value for
     * queryCommandValue calls asking for goog.editor.Command.BLOCKQUOTE.
     */
    activeOnUneditableFields ( ) : boolean ;
    getNonCollapsingBlankHtml ( ) : string ;
    getTrogClassId ( ) : string ;
    handleBackspaceInternal (e : ಠ_ಠ.clutz.goog.events.Event | null , range : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ) : void ;
    handleDeleteGecko (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    handleEnterAtCursorGeckoInternal (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null , wasCollapsed : boolean , range : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ) : any ;
    handleEnterWebkitInternal (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : any ;
    handleKeyUpInternal (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    isSupportedCommand (command : string ) : boolean ;
    processParagraphTagsInternal (e : ಠ_ಠ.clutz.goog.events.Event | null , split : boolean ) : void ;
    queryCommandValue (command : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.TagOnEnterHandler'): typeof ಠ_ಠ.clutz.goog.editor.plugins.TagOnEnterHandler;
}
declare module 'goog:goog.editor.plugins.TagOnEnterHandler' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.TagOnEnterHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Encapsulates undo/redo logic using a custom undo stack (i.e. not browser
   * built-in). Browser built-in undo stacks are too flaky (e.g. IE's gets
   * clobbered on DOM modifications). Also, this allows interleaving non-editing
   * commands into the undo stack via the UndoRedoManager.
   */
  class UndoRedo extends UndoRedo_Instance {
  }
  class UndoRedo_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
    /**
     * Encapsulates undo/redo logic using a custom undo stack (i.e. not browser
     * built-in). Browser built-in undo stacks are too flaky (e.g. IE's gets
     * clobbered on DOM modifications). Also, this allows interleaving non-editing
     * commands into the undo stack via the UndoRedoManager.
     * @param opt_manager An undo redo manager to be used by this plugin. If none is provided one is created.
     */
    constructor (opt_manager ? : ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager | null ) ;
    currentStates_ : Object ;
    eventHandlers_ : Object ;
    /**
     * Clear the undo/redo stack.
     */
    clearHistory ( ) : void ;
    disable (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    disposeInternal ( ) : void ;
    enable (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    execCommand (command : string ,  ...var_args : any [] ) : any ;
    /**
     * This is so subclasses can deal with multifield undo-redo.
     */
    getCurrentEventTarget ( ) : ಠ_ಠ.clutz.goog.editor.Field | null ;
    /**
     * This is so subclasses can deal with multifield undo-redo.
     */
    getCurrentFieldObject ( ) : ಠ_ಠ.clutz.goog.editor.Field | null ;
    /**
     * This is so subclasses can deal with multifield undo-redo.
     * @param fieldHashCode The Field's hashcode.
     */
    getFieldObjectForHash (fieldHashCode : string ) : ಠ_ಠ.clutz.goog.editor.Field | null ;
    getTrogClassId ( ) : string ;
    handleKeyboardShortcut (e : ಠ_ಠ.clutz.goog.events.BrowserEvent , key : string , isModifierPressed : boolean ) : boolean ;
    isEnabled (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : boolean ;
    /**
     * Whether the string corresponds to a command this plugin handles.
     * @param command Command string to check.
     */
    isSupportedCommand (command : string ) : boolean ;
    /**
     * The logger for this class.
     */
    logger : ಠ_ಠ.clutz.goog.debug.Logger | null ;
    queryCommandValue (command : string ) : any ;
    /**
     * Refreshes the current state of the editable field as maintained by undo-redo,
     * without adding any undo-redo states to the stack.
     * @param fieldObject The editable field.
     */
    refreshCurrentState (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    /**
     * Restores the state of the editable field.
     * @param state The state initiating the restore.
     * @param content The content to restore.
     * @param cursorPosition The cursor position within the content.
     */
    restoreState (state : ಠ_ಠ.clutz.PrivateType | null , content : string , cursorPosition : ಠ_ಠ.clutz.PrivateType | null ) : void ;
    /**
     * Set the max undo stack depth (not the real memory usage).
     * @param depth Depth of the stack.
     */
    setMaxUndoDepth (depth : number ) : void ;
    /**
     * Set the undo-redo manager used by this plugin. Any state on a previous
     * undo-redo manager is lost.
     * @param manager The undo-redo manager.
     */
    setUndoRedoManager (manager : ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager | null ) : void ;
    /**
     * Unregisters and disables the fieldObject with this plugin. Thie does *not*
     * clobber the undo stack for the fieldObject though.
     * TODO(user): For the multifield version, we really should add a way to
     * ignore undo actions on field's that have been made uneditable.
     * This is probably as simple as skipping over entries in the undo stack
     * that have a hashcode of an uneditable field.
     * @param fieldObject The field to register with the plugin.
     */
    unregisterFieldObject (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo {
  type COMMAND = string ;
  var COMMAND : {
    REDO : COMMAND ,
    UNDO : COMMAND ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.UndoRedo'): typeof ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo;
}
declare module 'goog:goog.editor.plugins.UndoRedo' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Manages undo and redo operations through a series of {@code UndoRedoState}s
   * maintained on undo and redo stacks.
   */
  class UndoRedoManager extends UndoRedoManager_Instance {
  }
  class UndoRedoManager_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Add state to the undo stack. This clears the redo stack.
     * @param state The state to add to the undo stack.
     */
    addState (state : ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState | null ) : void ;
    /**
     * Clears the undo and redo stacks.
     */
    clearHistory ( ) : void ;
    hasRedoState ( ) : boolean ;
    hasUndoState ( ) : boolean ;
    /**
     * Performs the redo operation of the state at the top of the redo stack, moving
     * that state to the top of the undo stack. If redo undo stack is empty, does
     * nothing.
     */
    redo ( ) : void ;
    redoPeek ( ) : ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState | null | undefined ;
    /**
     * Set the max undo stack depth (not the real memory usage).
     * @param depth Depth of the stack.
     */
    setMaxUndoDepth (depth : number ) : void ;
    /**
     * Performs the undo operation of the state at the top of the undo stack, moving
     * that state to the top of the redo stack. If the undo stack is empty, does
     * nothing.
     */
    undo ( ) : void ;
    undoPeek ( ) : ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState | null | undefined ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.UndoRedoManager'): typeof ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager;
}
declare module 'goog:goog.editor.plugins.UndoRedoManager' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager {
  /**
   * Event types for the events dispatched by undo-redo manager.
   */
  type EventType = string ;
  var EventType : {
    BEFORE_REDO : EventType ,
    BEFORE_UNDO : EventType ,
    STATE_ADDED : EventType ,
    STATE_CHANGE : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.UndoRedoManager.EventType'): typeof ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager.EventType;
}
declare module 'goog:goog.editor.plugins.UndoRedoManager.EventType' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Represents an undo and redo action for a particular state transition.
   */
  class UndoRedoState extends UndoRedoState_Instance {
    /**
     * Event type for events indicating that this state has completed an undo or
     * redo operation.
     */
    static ACTION_COMPLETED : string ;
  }
  class UndoRedoState_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Represents an undo and redo action for a particular state transition.
     * @param asynchronous Whether the undo or redo actions for this state complete asynchronously. If true, then this state must fire an ACTION_COMPLETED event when undo or redo is complete.
     */
    constructor (asynchronous : boolean ) ;
    /**
     * Checks if two undo-redo states are the same.
     * @param state The state to compare.
     */
    equals (a : ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState | null ) : boolean ;
    isAsynchronous ( ) : boolean ;
    /**
     * Redoes the action represented by this state.
     */
    redo ( ...a : any [] ) : any ;
    /**
     * Undoes the action represented by this state.
     */
    undo ( ...a : any [] ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.plugins.UndoRedoState'): typeof ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState;
}
declare module 'goog:goog.editor.plugins.UndoRedoState' {
  import alias = ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.range {
  /**
   * Given a range, expand the range to include outer tags if the full contents of
   * those tags are entirely selected.  This essentially changes the dom position,
   * but not the visible position of the range.
   * Ex. <code><li>foo</li></code> if "foo" is selected, instead of returning
   * start and end nodes as the foo text node, return the li.
   * @param range The range.
   * @param opt_stopNode Optional node to stop expanding past.
   */
  function expand (range : ಠ_ಠ.clutz.goog.dom.AbstractRange | null , opt_stopNode ? : Node | null ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
  /**
   * Get the deepest point in the DOM that's equivalent to the endpoint of the
   * given range.
   * @param range A range.
   * @param atStart True for the start point, false for the end point.
   */
  function getDeepEndPoint (range : ಠ_ಠ.clutz.goog.dom.AbstractRange | null , atStart : boolean ) : ಠ_ಠ.clutz.goog.editor.range.Point ;
  /**
   * Returns whether the given range intersects with any instance of the given
   * tag.
   * @param range The range to check.
   * @param tagName The name of the tag.
   */
  function intersectsTag (range : ಠ_ಠ.clutz.goog.dom.AbstractRange | null , tagName : ಠ_ಠ.clutz.goog.dom.TagName ) : boolean ;
  /**
   * Checks if a range is completely inside an editable region.
   * @param range The range to test.
   */
  function isEditable (range : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ) : boolean ;
  /**
   * Given a range and an element, create a narrower range that is limited to the
   * boundaries of the element. If the range starts (or ends) outside the
   * element, the narrowed range's start point (or end point) will be the
   * leftmost (or rightmost) leaf of the element.
   * @param range The range.
   * @param el The element to limit the range to.
   */
  function narrow (range : ಠ_ಠ.clutz.goog.dom.AbstractRange | null , el : Element | null ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
  /**
   * Given a range in the current DOM, create a factory for a range that
   * represents the same selection in a normalized DOM. The factory function
   * should be invoked after the DOM is normalized.
   *
   * All browsers do a bad job preserving ranges across DOM normalization.
   * The issue is best described in this 5-year-old bug report:
   * https://bugzilla.mozilla.org/show_bug.cgi?id=191864
   * For most applications, this isn't a problem. The browsers do a good job
   * handling un-normalized text, so there's usually no reason to normalize.
   *
   * The exception to this rule is the rich text editing commands
   * execCommand and queryCommandValue, which will fail often if there are
   * un-normalized text nodes.
   *
   * The factory function creates new ranges so that we can normalize the DOM
   * without problems. It must be created before any normalization happens,
   * and invoked after normalization happens.
   * @param range The range to normalize. It may become invalid after body.normalize() is called.
   */
  function normalize (range : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ) : ( ) => ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
  /**
   * Normalizes the given node.
   * @param node The node to normalize.
   */
  function normalizeNode (node : Node | null ) : void ;
  /**
   * Position the cursor immediately to the left or right of "node".
   * In Firefox, the selection parent is outside of "node", so the cursor can
   * effectively be moved to the end of a link node, without being considered
   * inside of it.
   * Note: This does not always work in WebKit. In particular, if you try to
   * place a cursor to the right of a link, typing still puts you in the link.
   * Bug: http://bugs.webkit.org/show_bug.cgi?id=17697
   * @param node The node to position the cursor relative to.
   * @param toLeft True to place it to the left, false to the right.
   */
  function placeCursorNextTo (node : Node | null , toLeft : boolean ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
  /**
   * Normalizes the node, preserving a range of the document.
   *
   * May also normalize things outside the node, if it is more efficient to do so.
   * @param node The node to normalize.
   * @param range The range to normalize.
   */
  function rangePreservingNormalize (node : Node | null , range : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
  /**
   * Saves the range by inserting carets into the HTML.
   *
   * Unlike the regular saveUsingCarets, this SavedRange normalizes text nodes.
   * Browsers have other bugs where they don't handle split text nodes in
   * contentEditable regions right.
   * @param range The abstract range object.
   */
  function saveUsingNormalizedCarets (range : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ) : ಠ_ಠ.clutz.goog.dom.SavedCaretRange ;
  /**
   * Cause the window's selection to be the start of this node.
   * @param node The node to select the start of.
   */
  function selectNodeStart (node : Node | null ) : void ;
  /**
   * Normalizes the node, preserving the selection of the document.
   *
   * May also normalize things outside the node, if it is more efficient to do so.
   * @param node The node to normalize.
   */
  function selectionPreservingNormalize (node : Node | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.range'): typeof ಠ_ಠ.clutz.goog.editor.range;
}
declare module 'goog:goog.editor.range' {
  import alias = ಠ_ಠ.clutz.goog.editor.range;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.range {
  /**
   * One endpoint of a range, represented as a Node and and offset.
   */
  class Point extends Point_Instance {
    /**
     * Construct the deepest possible point in the DOM that's equivalent
     * to the given point, expressed as a node and an offset.
     * @param node The node containing the point.
     * @param offset The offset of the point from the node.
     * @param opt_trendLeft Notice that a (node, offset) pair may be equivalent to more than one descendent (node, offset) pair in the DOM. By default, we trend rightward. If this parameter is true, then we trend leftward. The tendency to fall rightward by default is for consistency with other range APIs (like placeCursorNextTo).
     * @param opt_stopOnChildlessElement If true, and we encounter a Node which is an Element that cannot have children, we return a Point based on its parent rather than that Node itself.
     */
    static createDeepestPoint (node : Node | null , offset : number , opt_trendLeft ? : boolean , opt_stopOnChildlessElement ? : boolean ) : ಠ_ಠ.clutz.goog.editor.range.Point ;
    /**
     * Construct a point at the very end of the given node.
     * @param node The node to create a point for.
     */
    static getPointAtEndOfNode (node : Node | null ) : ಠ_ಠ.clutz.goog.editor.range.Point ;
  }
  class Point_Instance {
    private noStructuralTyping_: any;
    /**
     * One endpoint of a range, represented as a Node and and offset.
     * @param node The node containing the point.
     * @param offset The offset of the point into the node.
     */
    constructor (node : Node | null , offset : number ) ;
    /**
     * The node containing the point.
     */
    node : Node | null ;
    /**
     * The offset of the point into the node.
     */
    offset : number ;
    /**
     * Gets the point of this point's node in the DOM.
     */
    getParentPoint ( ) : ಠ_ಠ.clutz.goog.editor.range.Point ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.range.Point'): typeof ಠ_ಠ.clutz.goog.editor.range.Point;
}
declare module 'goog:goog.editor.range.Point' {
  import alias = ಠ_ಠ.clutz.goog.editor.range.Point;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.style {
  /**
   * Return the first ancestor of this node that is a container, inclusive.
   * @param node Node to find the container of.
   */
  function getContainer (node : Node | null ) : Element | null ;
  /**
   * Returns true if the element is a container of other non-inline HTML
   * Note that span, strong and em tags, being inline can only contain
   * other inline elements and are thus, not containers. Containers are elements
   * that should not be broken up when wrapping selections with a node of an
   * inline block styling.
   * @param element The element to check.
   */
  function isContainer (element : Node | null ) : boolean ;
  /**
   * Checks whether the given element inherits display: block.
   * @param node The Node to check.
   */
  function isDisplayBlock (node : Node ) : boolean ;
  /**
   * Make the given element selectable.
   *
   * For IE this simply turns off the "unselectable" property.
   *
   * Under FF no descendent of an unselectable node can be selectable:
   *
   * https://bugzilla.mozilla.org/show_bug.cgi?id=203291
   *
   * So we make each ancestor of node selectable, while trying to preserve the
   * unselectability of other nodes along that path
   *
   * This may cause certain text nodes which should be unselectable, to become
   * selectable. For example:
   *
   * <div id=div1 style="-moz-user-select: none">
   * Text1
   * <span id=span1>Text2</span>
   * </div>
   *
   * If we call makeSelectable on span1, then it will cause "Text1" to become
   * selectable, since it had to make div1 selectable in order for span1 to be
   * selectable.
   *
   * If "Text1" were enclosed within a `<p>` or `<span>`, then this problem would
   * not arise.  Text nodes do not have styles, so its style can't be set to
   * unselectable.
   * @param element The element to make selectable.
   */
  function makeSelectable (element : Element ) : void ;
  /**
   * Makes the given element unselectable, as well as all of its children, except
   * for text areas, text, file and url inputs.
   * @param element The element to make unselectable.
   * @param eventHandler An EventHandler to register the event with. Assumes when the node is destroyed, the eventHandler's listeners are destroyed as well.
   */
  function makeUnselectable (element : Element | null , eventHandler : ಠ_ಠ.clutz.goog.events.EventHandler < any > | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.editor.style'): typeof ಠ_ಠ.clutz.goog.editor.style;
}
declare module 'goog:goog.editor.style' {
  import alias = ಠ_ಠ.clutz.goog.editor.style;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  var CAPTURE_SIMULATION_MODE : number ;
  /**
   * Dispatches an event (or event like object) and calls all listeners
   * listening for events of this type. The type of the event is decided by the
   * type property on the event object.
   *
   * If any of the listeners returns false OR calls preventDefault then this
   * function will return false.  If one of the capture listeners calls
   * stopPropagation, then the bubble listeners won't fire.
   * @param src The event target.
   * @param e Event object.
   */
  function dispatchEvent (src : ಠ_ಠ.clutz.goog.events.Listenable | null , e : string | Object | null ) : boolean ;
  /**
   * Provides a nice string showing the normalized event objects public members
   * @param e Event Object.
   */
  function expose (e : Object | null ) : string ;
  /**
   * Fires a listener with a set of arguments
   * @param listener The listener object to call.
   * @param eventObject The event object to pass to the listener.
   */
  function fireListener (listener : ಠ_ಠ.clutz.goog.events.Listener | null , eventObject : Object | null ) : boolean ;
  /**
   * Fires an object's listeners of a particular type and phase
   * @param obj Object whose listeners to call.
   * @param type Event type.
   * @param capture Which event phase.
   * @param eventObject Event object to be passed to listener.
   */
  function fireListeners (obj : Object | null , type : string | ಠ_ಠ.clutz.goog.events.EventId < any > , capture : boolean , eventObject : Object | null ) : boolean ;
  /**
   * Gets the goog.events.Listener for the event or null if no such listener is
   * in use.
   * @param src The target from which to get listeners.
   * @param type The type of the event.
   * @param listener The listener function to get.
   * @param opt_capt In DOM-compliant browsers, this determines whether the listener is fired during the capture or bubble phase of the event.
   * @param opt_handler Element in whose scope to call the listener.
   */
  function getListener < EVENTOBJ > (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : ( (a : EVENTOBJ ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capt ? : boolean , opt_handler ? : Object | null ) : ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
  /**
   * Gets the listeners for a given object, type and capture phase.
   * @param obj Object to get listeners for.
   * @param type Event type.
   * @param capture Capture phase?.
   */
  function getListeners (obj : Object | null , type : string | ಠ_ಠ.clutz.goog.events.EventId < any > , capture : boolean ) : ಠ_ಠ.clutz.goog.events.Listener [] | null ;
  /**
   * Helper function for returning a proxy function.
   */
  function getProxy ( ) : ( ...a : any [] ) => any ;
  /**
   * Gets the total number of listeners currently in the system.
   */
  function getTotalListenerCount ( ) : number ;
  /**
   * Creates a unique event id.
   * @param identifier The identifier.
   */
  function getUniqueId (identifier : string ) : string ;
  /**
   * Returns whether an event target has any active listeners matching the
   * specified signature. If either the type or capture parameters are
   * unspecified, the function will match on the remaining criteria.
   * @param obj Target to get listeners for.
   * @param opt_type Event type.
   * @param opt_capture Whether to check for capture or bubble-phase listeners.
   */
  function hasListener (obj : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , opt_type ? : string | ಠ_ಠ.clutz.goog.events.EventId < any > , opt_capture ? : boolean ) : boolean ;
  /**
   * Adds an event listener for a specific event on a native event
   * target (such as a DOM element) or an object that has implemented
   * {@link goog.events.Listenable}. A listener can only be added once
   * to an object and if it is added again the key for the listener is
   * returned. Note that if the existing listener is a one-off listener
   * (registered via listenOnce), it will no longer be a one-off
   * listener after a call to listen().
   * @param src The node to listen to events on.
   * @param type Event type or array of event types.
   * @param listener Callback method, or an object with a handleEvent function. WARNING: passing an Object is now softly deprecated.
   * @param opt_capt Whether to fire in capture phase (defaults to false).
   * @param opt_handler Element in whose scope to call the listener.
   */
  function listen < T , EVENTOBJ > (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string | string [] | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > [] , listener : ( (a : EVENTOBJ ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capt ? : boolean , opt_handler ? : T ) : number | ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
  /**
   * Adds an event listener for a specific event on a native event
   * target (such as a DOM element) or an object that has implemented
   * {@link goog.events.Listenable}. After the event has fired the event
   * listener is removed from the target.
   *
   * If an existing listener already exists, listenOnce will do
   * nothing. In particular, if the listener was previously registered
   * via listen(), listenOnce() will not turn the listener into a
   * one-off listener. Similarly, if there is already an existing
   * one-off listener, listenOnce does not modify the listeners (it is
   * still a once listener).
   * @param src The node to listen to events on.
   * @param type Event type or array of event types.
   * @param listener Callback method.
   * @param opt_capt Fire in capture phase?.
   * @param opt_handler Element in whose scope to call the listener.
   */
  function listenOnce < T , EVENTOBJ > (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string | string [] | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > [] , listener : ( (a : EVENTOBJ ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capt ? : boolean , opt_handler ? : T ) : number | ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
  /**
   * Adds an event listener with a specific event wrapper on a DOM Node or an
   * object that has implemented {@link goog.events.Listenable}. A listener can
   * only be added once to an object.
   * @param src The target to listen to events on.
   * @param wrapper Event wrapper to use.
   * @param listener Callback method, or an object with a handleEvent function.
   * @param opt_capt Whether to fire in capture phase (defaults to false).
   * @param opt_handler Element in whose scope to call the listener.
   */
  function listenWithWrapper < T > (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , wrapper : ಠ_ಠ.clutz.goog.events.EventWrapper | null , listener : ( (a : any ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capt ? : boolean , opt_handler ? : T ) : void ;
  /**
   * Installs exception protection for the browser event entry point using the
   * given error handler.
   * @param errorHandler Error handler with which to protect the entry point.
   */
  function protectBrowserEventEntryPoint (errorHandler : ಠ_ಠ.clutz.goog.debug.ErrorHandler | null ) : void ;
  /**
   * Removes all listeners from an object. You can also optionally
   * remove listeners of a particular type.
   * @param obj Object to remove listeners from. Must be an EventTarget or a goog.events.Listenable.
   * @param opt_type Type of event to remove. Default is all types.
   */
  function removeAll (obj : Object | null | undefined , opt_type ? : string | ಠ_ಠ.clutz.goog.events.EventId < any > ) : number ;
  /**
   * Removes an event listener which was added with listen().
   * @param src The target to stop listening to events on.
   * @param type Event type or array of event types to unlisten to.
   * @param listener The listener function to remove.
   * @param opt_capt In DOM-compliant browsers, this determines whether the listener is fired during the capture or bubble phase of the event.
   * @param opt_handler Element in whose scope to call the listener.
   */
  function unlisten < EVENTOBJ > (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string | string [] | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > [] , listener : ( (a : any ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capt ? : boolean , opt_handler ? : Object | null ) : boolean | null ;
  /**
   * Removes an event listener which was added with listen() by the key
   * returned by listen().
   * @param key The key returned by listen() for this event listener.
   */
  function unlistenByKey (key : number | ಠ_ಠ.clutz.goog.events.ListenableKey | null ) : boolean ;
  /**
   * Removes an event listener which was added with listenWithWrapper().
   * @param src The target to stop listening to events on.
   * @param wrapper Event wrapper to use.
   * @param listener The listener function to remove.
   * @param opt_capt In DOM-compliant browsers, this determines whether the listener is fired during the capture or bubble phase of the event.
   * @param opt_handler Element in whose scope to call the listener.
   */
  function unlistenWithWrapper (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , wrapper : ಠ_ಠ.clutz.goog.events.EventWrapper | null , listener : ( (a : any ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capt ? : boolean , opt_handler ? : Object | null ) : void ;
  function wrapListener (listener : Object | null ) : ( ...a : any [] ) => any ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events'): typeof ಠ_ಠ.clutz.goog.events;
}
declare module 'goog:goog.events' {
  import alias = ಠ_ಠ.clutz.goog.events;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * This class is used for the goog.events.ActionHandler.EventType.ACTION event.
   */
  class ActionEvent extends ActionEvent_Instance {
  }
  class ActionEvent_Instance extends ಠ_ಠ.clutz.goog.events.BrowserEvent_Instance {
    /**
     * This class is used for the goog.events.ActionHandler.EventType.ACTION event.
     * @param browserEvent Browser event object.
     */
    constructor (browserEvent : ಠ_ಠ.clutz.goog.events.BrowserEvent ) ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.ActionEvent'): typeof ಠ_ಠ.clutz.goog.events.ActionEvent;
}
declare module 'goog:goog.events.ActionEvent' {
  import alias = ಠ_ಠ.clutz.goog.events.ActionEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A wrapper around an element that you want to listen to ACTION events on.
   */
  class ActionHandler extends ActionHandler_Instance {
  }
  class ActionHandler_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * A wrapper around an element that you want to listen to ACTION events on.
     * @param element The element or document to listen on.
     */
    constructor (element : Element | null | Document ) ;
    disposeInternal ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.ActionHandler'): typeof ಠ_ಠ.clutz.goog.events.ActionHandler;
}
declare module 'goog:goog.events.ActionHandler' {
  import alias = ಠ_ಠ.clutz.goog.events.ActionHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.ActionHandler {
  /**
   * Enum type for the events fired by the action handler
   */
  type EventType = string ;
  var EventType : {
    ACTION : EventType ,
    BEFOREACTION : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.ActionHandler.EventType'): typeof ಠ_ಠ.clutz.goog.events.ActionHandler.EventType;
}
declare module 'goog:goog.events.ActionHandler.EventType' {
  import alias = ಠ_ಠ.clutz.goog.events.ActionHandler.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * This class is used for the goog.events.ActionHandler.EventType.BEFOREACTION
   * event. BEFOREACTION gives a chance to the application so the keyboard focus
   * can be restored back, if required.
   */
  class BeforeActionEvent extends BeforeActionEvent_Instance {
  }
  class BeforeActionEvent_Instance extends ಠ_ಠ.clutz.goog.events.BrowserEvent_Instance {
    /**
     * This class is used for the goog.events.ActionHandler.EventType.BEFOREACTION
     * event. BEFOREACTION gives a chance to the application so the keyboard focus
     * can be restored back, if required.
     * @param browserEvent Browser event object.
     */
    constructor (browserEvent : ಠ_ಠ.clutz.goog.events.BrowserEvent ) ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.BeforeActionEvent'): typeof ಠ_ಠ.clutz.goog.events.BeforeActionEvent;
}
declare module 'goog:goog.events.BeforeActionEvent' {
  import alias = ಠ_ಠ.clutz.goog.events.BeforeActionEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Accepts a browser event object and creates a patched, cross browser event
   * object.
   * The content of this object will not be initialized if no event object is
   * provided. If this is the case, init() needs to be invoked separately.
   */
  class BrowserEvent extends BrowserEvent_Instance {
    /**
     * Static data for mapping mouse buttons.
     */
    static IEButtonMap : number [] ;
  }
  class BrowserEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * Accepts a browser event object and creates a patched, cross browser event
     * object.
     * The content of this object will not be initialized if no event object is
     * provided. If this is the case, init() needs to be invoked separately.
     * @param opt_e Browser event object.
     * @param opt_currentTarget Current target for event.
     */
    constructor (opt_e ? : GlobalEvent | null , opt_currentTarget ? : EventTarget | null ) ;
    /**
     * Whether alt was pressed at time of event.
     */
    altKey : boolean ;
    /**
     * Which mouse button was pressed.
     */
    button : number ;
    /**
     * Keycode of key press.
     */
    charCode : number ;
    /**
     * X-coordinate relative to the window.
     */
    clientX : number ;
    /**
     * Y-coordinate relative to the window.
     */
    clientY : number ;
    /**
     * Whether control was pressed at time of event.
     */
    ctrlKey : boolean ;
    /**
     * Node that had the listener attached.
     */
    currentTarget : Node | null | undefined ;
    /**
     * Keycode of key press.
     */
    keyCode : number ;
    /**
     * Whether the meta key was pressed at time of event.
     */
    metaKey : boolean ;
    /**
     * X-coordinate relative to target.
     */
    offsetX : number ;
    /**
     * Y-coordinate relative to target.
     */
    offsetY : number ;
    /**
     * Whether the default platform modifier key was pressed at time of event.
     * (This is control for all platforms except Mac, where it's Meta.)
     */
    platformModifierKey : boolean ;
    /**
     * For mouseover and mouseout events, the related object for the event.
     */
    relatedTarget : Node | null ;
    /**
     * X-coordinate relative to the monitor.
     */
    screenX : number ;
    /**
     * Y-coordinate relative to the monitor.
     */
    screenY : number ;
    /**
     * Whether shift was pressed at time of event.
     */
    shiftKey : boolean ;
    /**
     * History state object, only set for PopState events where it's a copy of the
     * state object provided to pushState or replaceState.
     */
    state : Object | null ;
    /**
     * Target that fired the event.
     */
    target : Node | null ;
    type : string ;
    getBrowserEvent ( ) : GlobalEvent | null ;
    /**
     * Accepts a browser event object and creates a patched, cross browser event
     * object.
     * @param e Browser event object.
     * @param opt_currentTarget Current target for event.
     */
    init (e : GlobalEvent | null , opt_currentTarget ? : EventTarget | null ) : void ;
    /**
     * Tests to see which button was pressed during the event. This is really only
     * useful in IE and Gecko browsers. And in IE, it's only useful for
     * mousedown/mouseup events, because click only fires for the left mouse button.
     *
     * Safari 2 only reports the left button being clicked, and uses the value '1'
     * instead of 0. Opera only reports a mousedown event for the middle button, and
     * no mouse events for the right button. Opera has default behavior for left and
     * middle click that can only be overridden via a configuration setting.
     *
     * There's a nice table of this mess at http://www.unixpapa.com/js/mouse.html.
     * @param button The button to test for.
     */
    isButton (button : ಠ_ಠ.clutz.goog.events.BrowserEvent.MouseButton ) : boolean ;
    /**
     * Whether this has an "action"-producing mouse button.
     *
     * By definition, this includes left-click on windows/linux, and left-click
     * without the ctrl key on Macs.
     */
    isMouseActionButton ( ) : boolean ;
    preventDefault ( ) : void ;
    stopPropagation ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.BrowserEvent'): typeof ಠ_ಠ.clutz.goog.events.BrowserEvent;
}
declare module 'goog:goog.events.BrowserEvent' {
  import alias = ಠ_ಠ.clutz.goog.events.BrowserEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.BrowserEvent {
  /**
   * Normalized button constants for the mouse.
   */
  type MouseButton = number ;
  var MouseButton : {
    LEFT : MouseButton ,
    MIDDLE : MouseButton ,
    RIGHT : MouseButton ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.BrowserEvent.MouseButton'): typeof ಠ_ಠ.clutz.goog.events.BrowserEvent.MouseButton;
}
declare module 'goog:goog.events.BrowserEvent.MouseButton' {
  import alias = ಠ_ಠ.clutz.goog.events.BrowserEvent.MouseButton;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Enum of browser capabilities.
   */
  type BrowserFeature = boolean ;
  var BrowserFeature : {
    HAS_HTML5_NETWORK_EVENT_SUPPORT : BrowserFeature ,
    HAS_NAVIGATOR_ONLINE_PROPERTY : BrowserFeature ,
    HAS_W3C_BUTTON : BrowserFeature ,
    HAS_W3C_EVENT_SUPPORT : BrowserFeature ,
    HTML5_NETWORK_EVENTS_FIRE_ON_BODY : BrowserFeature ,
    SET_KEY_CODE_TO_PREVENT_DEFAULT : BrowserFeature ,
    TOUCH_ENABLED : BrowserFeature ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.BrowserFeature'): typeof ಠ_ಠ.clutz.goog.events.BrowserFeature;
}
declare module 'goog:goog.events.BrowserFeature' {
  import alias = ಠ_ಠ.clutz.goog.events.BrowserFeature;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  type CaptureSimulationMode = number ;
  var CaptureSimulationMode : {
    OFF_AND_FAIL : CaptureSimulationMode ,
    OFF_AND_SILENT : CaptureSimulationMode ,
    ON : CaptureSimulationMode ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.CaptureSimulationMode'): typeof ಠ_ಠ.clutz.goog.events.CaptureSimulationMode;
}
declare module 'goog:goog.events.CaptureSimulationMode' {
  import alias = ಠ_ಠ.clutz.goog.events.CaptureSimulationMode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A base class for event objects, so that they can support preventDefault and
   * stopPropagation.
   */
  class Event extends Event_Instance {
    /**
     * Prevents the default action. It is equivalent to
     * {@code e.preventDefault()}, but can be used as the callback argument of
     * {@link goog.events.listen} without declaring another function.
     * @param e An event.
     */
    static preventDefault (e : ಠ_ಠ.clutz.goog.events.Event ) : void ;
    /**
     * Stops the propagation of the event. It is equivalent to
     * {@code e.stopPropagation()}, but can be used as the callback argument of
     * {@link goog.events.listen} without declaring another function.
     * @param e An event.
     */
    static stopPropagation (e : ಠ_ಠ.clutz.goog.events.Event ) : void ;
  }
  class Event_Instance {
    private noStructuralTyping_: any;
    /**
     * A base class for event objects, so that they can support preventDefault and
     * stopPropagation.
     * @param type Event Type.
     * @param opt_target Reference to the object that is the target of this event. It has to implement the {@code EventTarget} interface declared at {@link http://developer.mozilla.org/en/DOM/EventTarget}.
     */
    constructor (type : string | ಠ_ಠ.clutz.goog.events.EventId < any > , opt_target ? : Object | null ) ;
    /**
     * Object that had the listener attached.
     */
    currentTarget : Object | null | undefined ;
    /**
     * Whether the default action has been prevented.
     * This is a property to match the W3C specification at
     * {@link http://www.w3.org/TR/DOM-Level-3-Events/
     * #events-event-type-defaultPrevented}.
     * Must be treated as read-only outside the class.
     */
    defaultPrevented : boolean ;
    /**
     * Whether to cancel the event in internal capture/bubble processing for IE.
     */
    propagationStopped_ : boolean ;
    /**
     * Return value for in internal capture/bubble processing for IE.
     */
    returnValue_ : boolean ;
    /**
     * TODO(tbreisacher): The type should probably be
     * EventTarget|goog.events.EventTarget.
     *
     * Target of the event.
     */
    target : Object | null | undefined ;
    /**
     * Event type.
     */
    type : string ;
    /**
     * Prevents the default action, for example a link redirecting to a url.
     */
    preventDefault ( ) : void ;
    /**
     * Stops event propagation.
     */
    stopPropagation ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.Event'): typeof ಠ_ಠ.clutz.goog.events.Event;
}
declare module 'goog:goog.events.Event' {
  import alias = ಠ_ಠ.clutz.goog.events.Event;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Super class for objects that want to easily manage a number of event
   * listeners.  It allows a short cut to listen and also provides a quick way
   * to remove all events listeners belonging to this object.
   */
  class EventHandler < SCOPE > extends EventHandler_Instance < SCOPE > {
  }
  class EventHandler_Instance < SCOPE > extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Super class for objects that want to easily manage a number of event
     * listeners.  It allows a short cut to listen and also provides a quick way
     * to remove all events listeners belonging to this object.
     * @param opt_scope Object in whose scope to call the listeners.
     */
    constructor (opt_scope ? : SCOPE ) ;
    handler_ : SCOPE | undefined ;
    /**
     * Disposes of this EventHandler and removes all listeners that it registered.
     */
    disposeInternal ( ) : void ;
    getListenerCount ( ) : number ;
    /**
     * Default event handler
     * @param e Event object.
     */
    handleEvent (e : ಠ_ಠ.clutz.goog.events.Event | null ) : any ;
    /**
     * Listen to an event on a Listenable.  If the function is omitted then the
     * EventHandler's handleEvent method will be used.
     * @param src Event source.
     * @param type Event type to listen for or array of event types.
     * @param opt_fn Optional callback function to be used as the listener or an object with handleEvent function.
     * @param opt_capture Optional whether to use capture phase.
     */
    listen < EVENTOBJ > (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string | string [] | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > [] , opt_fn ? : ( (a : EVENTOBJ ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capture ? : boolean ) : ಠ_ಠ.clutz.goog.events.EventHandler < SCOPE > ;
    /**
     * Listen to an event on a Listenable.  If the function is omitted, then the
     * EventHandler's handleEvent method will be used. After the event has fired the
     * event listener is removed from the target. If an array of event types is
     * provided, each event type will be listened to once.
     * @param src Event source.
     * @param type Event type to listen for or array of event types.
     * @param opt_fn Optional callback function to be used as the listener or an object with handleEvent function.
     * @param opt_capture Optional whether to use capture phase.
     */
    listenOnce < EVENTOBJ > (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string | string [] | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > [] , opt_fn ? : ( (a : EVENTOBJ ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capture ? : boolean ) : ಠ_ಠ.clutz.goog.events.EventHandler < SCOPE > ;
    /**
     * Listen to an event on a Listenable.  If the function is omitted, then the
     * EventHandler's handleEvent method will be used. After the event has fired the
     * event listener is removed from the target. If an array of event types is
     * provided, each event type will be listened to once.
     * @param src Event source.
     * @param type Event type to listen for or array of event types.
     * @param fn Optional callback function to be used as the listener or an object with handleEvent function.
     * @param capture Optional whether to use capture phase.
     * @param scope Object in whose scope to call the listener.
     */
    listenOnceWithScope < T , EVENTOBJ > (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string | string [] | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > [] , fn : ( (a : EVENTOBJ ) => any ) | { handleEvent : (a : any ) => any } | null | undefined , capture : boolean | undefined , scope : T ) : ಠ_ಠ.clutz.goog.events.EventHandler < SCOPE > ;
    /**
     * Listen to an event on a Listenable.  If the function is omitted then the
     * EventHandler's handleEvent method will be used.
     * @param src Event source.
     * @param type Event type to listen for or array of event types.
     * @param fn Optional callback function to be used as the listener or an object with handleEvent function.
     * @param capture Optional whether to use capture phase.
     * @param scope Object in whose scope to call the listener.
     */
    listenWithScope < T , EVENTOBJ > (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string | string [] | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > [] , fn : ( (a : EVENTOBJ ) => any ) | { handleEvent : (a : any ) => any } | null | undefined , capture : boolean | undefined , scope : T ) : ಠ_ಠ.clutz.goog.events.EventHandler < SCOPE > ;
    /**
     * Adds an event listener with a specific event wrapper on a DOM Node or an
     * object that has implemented {@link goog.events.EventTarget}. A listener can
     * only be added once to an object.
     * @param src The node to listen to events on.
     * @param wrapper Event wrapper to use.
     * @param listener Callback method, or an object with a handleEvent function.
     * @param opt_capt Whether to fire in capture phase (defaults to false).
     */
    listenWithWrapper (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.EventTarget , wrapper : ಠ_ಠ.clutz.goog.events.EventWrapper | null , listener : ( (a : any ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capt ? : boolean ) : ಠ_ಠ.clutz.goog.events.EventHandler < SCOPE > ;
    /**
     * Adds an event listener with a specific event wrapper on a DOM Node or an
     * object that has implemented {@link goog.events.EventTarget}. A listener can
     * only be added once to an object.
     * @param src The node to listen to events on.
     * @param wrapper Event wrapper to use.
     * @param listener Optional callback function to be used as the listener or an object with handleEvent function.
     * @param capture Optional whether to use capture phase.
     * @param scope Object in whose scope to call the listener.
     */
    listenWithWrapperAndScope < T > (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.EventTarget , wrapper : ಠ_ಠ.clutz.goog.events.EventWrapper | null , listener : ( (a : any ) => any ) | { handleEvent : (a : any ) => any } | null , capture : boolean | undefined , scope : T ) : ಠ_ಠ.clutz.goog.events.EventHandler < SCOPE > ;
    /**
     * Unlistens to all events.
     */
    removeAll ( ) : void ;
    /**
     * Unlistens on an event.
     * @param src Event source.
     * @param type Event type or array of event types to unlisten to.
     * @param opt_fn Optional callback function to be used as the listener or an object with handleEvent function.
     * @param opt_capture Optional whether to use capture phase.
     * @param opt_scope Object in whose scope to call the listener.
     */
    unlisten < EVENTOBJ > (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string | string [] | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > [] , opt_fn ? : ( (a : EVENTOBJ ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capture ? : boolean , opt_scope ? : Object | null ) : ಠ_ಠ.clutz.goog.events.EventHandler < any > ;
    /**
     * Removes an event listener which was added with listenWithWrapper().
     * @param src The target to stop listening to events on.
     * @param wrapper Event wrapper to use.
     * @param listener The listener function to remove.
     * @param opt_capt In DOM-compliant browsers, this determines whether the listener is fired during the capture or bubble phase of the event.
     * @param opt_scope Element in whose scope to call the listener.
     */
    unlistenWithWrapper (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.EventTarget , wrapper : ಠ_ಠ.clutz.goog.events.EventWrapper | null , listener : ( (a : any ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capt ? : boolean , opt_scope ? : Object | null ) : ಠ_ಠ.clutz.goog.events.EventHandler < any > ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.EventHandler'): typeof ಠ_ಠ.clutz.goog.events.EventHandler;
}
declare module 'goog:goog.events.EventHandler' {
  import alias = ಠ_ಠ.clutz.goog.events.EventHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A templated class that is used when registering for events. Typical usage:
   *
   * /** @type {goog.events.EventId<MyEventObj>} *\
   * var myEventId = new goog.events.EventId(
   * goog.events.getUniqueId(('someEvent'));
   *
   * // No need to cast or declare here since the compiler knows the
   * // correct type of 'evt' (MyEventObj).
   * something.listen(myEventId, function(evt) {});
   */
  class EventId < T > extends EventId_Instance < T > {
  }
  class EventId_Instance < T > {
    private noStructuralTyping_: any;
    /**
     * A templated class that is used when registering for events. Typical usage:
     *
     * /** @type {goog.events.EventId<MyEventObj>} *\
     * var myEventId = new goog.events.EventId(
     * goog.events.getUniqueId(('someEvent'));
     *
     * // No need to cast or declare here since the compiler knows the
     * // correct type of 'evt' (MyEventObj).
     * something.listen(myEventId, function(evt) {});
     */
    constructor (eventId : string ) ;
    id : string ;
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.EventId'): typeof ಠ_ಠ.clutz.goog.events.EventId;
}
declare module 'goog:goog.events.EventId' {
  import alias = ಠ_ಠ.clutz.goog.events.EventId;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A typedef for event like objects that are dispatchable via the
   * goog.events.dispatchEvent function. strings are treated as the type for a
   * goog.events.Event. Objects are treated as an extension of a new
   * goog.events.Event with the type property of the object being used as the type
   * of the Event.
   */
  type EventLike = string | Object | null ;
}
declare module 'goog:goog.events.EventLike' {
  import alias = ಠ_ಠ.clutz.goog.events.EventLike;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * An implementation of {@code goog.events.Listenable} with full W3C
   * EventTarget-like support (capture/bubble mechanism, stopping event
   * propagation, preventing default actions).
   *
   * You may subclass this class to turn your class into a Listenable.
   *
   * Unless propagation is stopped, an event dispatched by an
   * EventTarget will bubble to the parent returned by
   * {@code getParentEventTarget}. To set the parent, call
   * {@code setParentEventTarget}. Subclasses that don't support
   * changing the parent can override the setter to throw an error.
   *
   * Example usage:
   * <pre>
   * var source = new goog.events.EventTarget();
   * function handleEvent(e) {
   * alert('Type: ' + e.type + '; Target: ' + e.target);
   * }
   * source.listen('foo', handleEvent);
   * // Or: goog.events.listen(source, 'foo', handleEvent);
   * ...
   * source.dispatchEvent('foo');  // will call handleEvent
   * ...
   * source.unlisten('foo', handleEvent);
   * // Or: goog.events.unlisten(source, 'foo', handleEvent);
   * </pre>
   */
  class EventTarget extends EventTarget_Instance {
  }
  class EventTarget_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance implements ಠ_ಠ.clutz.goog.events.Listenable {
    /**
     * Adds an event listener to the event target. The same handler can only be
     * added once per the type. Even if you add the same handler multiple times
     * using the same type then it will only be called once when the event is
     * dispatched.
     * @param type The type of the event to listen for.
     * @param handler The function to handle the event. The handler can also be an object that implements the handleEvent method which takes the event object as argument.
     * @param opt_capture In DOM-compliant browsers, this determines whether the listener is fired during the capture or bubble phase of the event.
     * @param opt_handlerScope Object in whose scope to call the listener.
     */
    addEventListener (type : string , handler : ( (a : any ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capture ? : boolean , opt_handlerScope ? : Object | null ) : void ;
    dispatchEvent (e : string | Object | null ) : boolean ;
    /**
     * Removes listeners from this object.  Classes that extend EventTarget may
     * need to override this method in order to remove references to DOM Elements
     * and additional listeners.
     */
    disposeInternal ( ) : void ;
    fireListeners < EVENTOBJ > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , capture : boolean , eventObject : EVENTOBJ ) : boolean ;
    getListener < SCOPE , EVENTOBJ > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : (a : EVENTOBJ ) => boolean | undefined , capture : boolean , opt_listenerScope ? : SCOPE ) : ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
    getListeners < EVENTOBJ > (type : string | ಠ_ಠ.clutz.goog.events.EventId < any > , capture : boolean ) : ಠ_ಠ.clutz.goog.events.ListenableKey [] ;
    /**
     * Returns the parent of this event target to use for bubbling.
     */
    getParentEventTarget ( ) : ಠ_ಠ.clutz.goog.events.EventTarget | null ;
    hasListener < EVENTOBJ > (opt_type ? : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , opt_capture ? : boolean ) : boolean ;
    listen < SCOPE , EVENTOBJ > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : (a : EVENTOBJ ) => boolean | undefined , opt_useCapture ? : boolean , opt_listenerScope ? : SCOPE ) : ಠ_ಠ.clutz.goog.events.ListenableKey ;
    listenOnce < SCOPE , EVENTOBJ > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : (a : EVENTOBJ ) => boolean | undefined , opt_useCapture ? : boolean , opt_listenerScope ? : SCOPE ) : ಠ_ಠ.clutz.goog.events.ListenableKey ;
    removeAllListeners (opt_type ? : string ) : number ;
    /**
     * Removes an event listener from the event target. The handler must be the
     * same object as the one added. If the handler has not been added then
     * nothing is done.
     * @param type The type of the event to listen for.
     * @param handler The function to handle the event. The handler can also be an object that implements the handleEvent method which takes the event object as argument.
     * @param opt_capture In DOM-compliant browsers, this determines whether the listener is fired during the capture or bubble phase of the event.
     * @param opt_handlerScope Object in whose scope to call the listener.
     */
    removeEventListener (type : string , handler : ( (a : any ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capture ? : boolean , opt_handlerScope ? : Object | null ) : void ;
    /**
     * Sets the parent of this event target to use for capture/bubble
     * mechanism.
     * @param parent Parent listenable (null if none).
     */
    setParentEventTarget (parent : ಠ_ಠ.clutz.goog.events.EventTarget | null ) : void ;
    /**
     * Sets the target to be used for {@code event.target} when firing
     * event. Mainly used for testing. For example, see
     * {@code goog.testing.events.mixinListenable}.
     * @param target The target.
     */
    setTargetForTesting (target : Object ) : void ;
    unlisten < SCOPE , EVENTOBJ > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : (a : EVENTOBJ ) => boolean | undefined , opt_useCapture ? : boolean , opt_listenerScope ? : SCOPE ) : boolean ;
    unlistenByKey (key : ಠ_ಠ.clutz.goog.events.ListenableKey ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.EventTarget'): typeof ಠ_ಠ.clutz.goog.events.EventTarget;
}
declare module 'goog:goog.events.EventTarget' {
  import alias = ಠ_ಠ.clutz.goog.events.EventTarget;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Constants for event names.
   */
  type EventType = string ;
  var EventType : {
    AFTERPRINT : EventType ,
    ANIMATIONEND : EventType ,
    ANIMATIONITERATION : EventType ,
    ANIMATIONSTART : EventType ,
    BEFORECOPY : EventType ,
    BEFORECUT : EventType ,
    BEFOREPASTE : EventType ,
    BEFOREPRINT : EventType ,
    BEFOREUNLOAD : EventType ,
    BLUR : EventType ,
    CANPLAY : EventType ,
    CANPLAYTHROUGH : EventType ,
    CHANGE : EventType ,
    CLICK : EventType ,
    COMPOSITIONEND : EventType ,
    COMPOSITIONSTART : EventType ,
    COMPOSITIONUPDATE : EventType ,
    CONNECT : EventType ,
    CONSOLEMESSAGE : EventType ,
    CONTEXTMENU : EventType ,
    COPY : EventType ,
    CUT : EventType ,
    DBLCLICK : EventType ,
    DEACTIVATE : EventType ,
    DOMATTRMODIFIED : EventType ,
    DOMCHARACTERDATAMODIFIED : EventType ,
    DOMCONTENTLOADED : EventType ,
    DOMNODEINSERTED : EventType ,
    DOMNODEINSERTEDINTODOCUMENT : EventType ,
    DOMNODEREMOVED : EventType ,
    DOMNODEREMOVEDFROMDOCUMENT : EventType ,
    DOMSUBTREEMODIFIED : EventType ,
    DRAG : EventType ,
    DRAGEND : EventType ,
    DRAGENTER : EventType ,
    DRAGLEAVE : EventType ,
    DRAGOVER : EventType ,
    DRAGSTART : EventType ,
    DROP : EventType ,
    DURATIONCHANGE : EventType ,
    EMPTIED : EventType ,
    ENDED : EventType ,
    ERROR : EventType ,
    EXIT : EventType ,
    FOCUS : EventType ,
    FOCUSIN : EventType ,
    FOCUSOUT : EventType ,
    GOTPOINTERCAPTURE : EventType ,
    HASHCHANGE : EventType ,
    HELP : EventType ,
    INPUT : EventType ,
    KEYDOWN : EventType ,
    KEYPRESS : EventType ,
    KEYUP : EventType ,
    LOAD : EventType ,
    LOADABORT : EventType ,
    LOADCOMMIT : EventType ,
    LOADEDDATA : EventType ,
    LOADEDMETADATA : EventType ,
    LOADREDIRECT : EventType ,
    LOADSTART : EventType ,
    LOADSTOP : EventType ,
    LOSECAPTURE : EventType ,
    LOSTPOINTERCAPTURE : EventType ,
    MESSAGE : EventType ,
    MOUSEDOWN : EventType ,
    MOUSEENTER : EventType ,
    MOUSELEAVE : EventType ,
    MOUSEMOVE : EventType ,
    MOUSEOUT : EventType ,
    MOUSEOVER : EventType ,
    MOUSEUP : EventType ,
    MSGESTURECHANGE : EventType ,
    MSGESTUREEND : EventType ,
    MSGESTUREHOLD : EventType ,
    MSGESTURESTART : EventType ,
    MSGESTURETAP : EventType ,
    MSGOTPOINTERCAPTURE : EventType ,
    MSINERTIASTART : EventType ,
    MSLOSTPOINTERCAPTURE : EventType ,
    MSPOINTERCANCEL : EventType ,
    MSPOINTERDOWN : EventType ,
    MSPOINTERENTER : EventType ,
    MSPOINTERHOVER : EventType ,
    MSPOINTERLEAVE : EventType ,
    MSPOINTERMOVE : EventType ,
    MSPOINTEROUT : EventType ,
    MSPOINTEROVER : EventType ,
    MSPOINTERUP : EventType ,
    OFFLINE : EventType ,
    ONLINE : EventType ,
    ORIENTATIONCHANGE : EventType ,
    PAGEHIDE : EventType ,
    PAGESHOW : EventType ,
    PASTE : EventType ,
    PAUSE : EventType ,
    PLAY : EventType ,
    PLAYING : EventType ,
    POINTERCANCEL : EventType ,
    POINTERDOWN : EventType ,
    POINTERENTER : EventType ,
    POINTERLEAVE : EventType ,
    POINTERMOVE : EventType ,
    POINTEROUT : EventType ,
    POINTEROVER : EventType ,
    POINTERUP : EventType ,
    POPSTATE : EventType ,
    PROPERTYCHANGE : EventType ,
    RATECHANGE : EventType ,
    READYSTATECHANGE : EventType ,
    RESET : EventType ,
    RESIZE : EventType ,
    RESPONSIVE : EventType ,
    RIGHTCLICK : EventType ,
    SCROLL : EventType ,
    SEEKED : EventType ,
    SEEKING : EventType ,
    SELECT : EventType ,
    SELECTSTART : EventType ,
    SIZECHANGED : EventType ,
    STALLED : EventType ,
    STORAGE : EventType ,
    SUBMIT : EventType ,
    SUSPEND : EventType ,
    TEXT : EventType ,
    TEXTINPUT : EventType ,
    TIMEUPDATE : EventType ,
    TOUCHCANCEL : EventType ,
    TOUCHEND : EventType ,
    TOUCHMOVE : EventType ,
    TOUCHSTART : EventType ,
    TRANSITIONEND : EventType ,
    UNLOAD : EventType ,
    UNRESPONSIVE : EventType ,
    VISIBILITYCHANGE : EventType ,
    VOLUMECHANGE : EventType ,
    WAITING : EventType ,
    WHEEL : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.EventType'): typeof ಠ_ಠ.clutz.goog.events.EventType;
}
declare module 'goog:goog.events.EventType' {
  import alias = ಠ_ಠ.clutz.goog.events.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Interface for event wrappers.
   */
  interface EventWrapper {
    /**
     * Adds an event listener using the wrapper on a DOM Node or an object that has
     * implemented {@link goog.events.EventTarget}. A listener can only be added
     * once to an object.
     * @param src The node to listen to events on.
     * @param listener Callback method, or an object with a handleEvent function.
     * @param opt_capt Whether to fire in capture phase (defaults to false).
     * @param opt_scope Element in whose scope to call the listener.
     * @param opt_eventHandler Event handler to add listener to.
     */
    listen (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , listener : ( (a : any ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capt ? : boolean , opt_scope ? : Object | null , opt_eventHandler ? : ಠ_ಠ.clutz.goog.events.EventHandler < any > | null ) : void ;
    /**
     * Removes an event listener added using goog.events.EventWrapper.listen.
     * @param src The node to remove listener from.
     * @param listener Callback method, or an object with a handleEvent function.
     * @param opt_capt Whether to fire in capture phase (defaults to false).
     * @param opt_scope Element in whose scope to call the listener.
     * @param opt_eventHandler Event handler to remove listener from.
     */
    unlisten (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , listener : ( (a : any ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capt ? : boolean , opt_scope ? : Object | null , opt_eventHandler ? : ಠ_ಠ.clutz.goog.events.EventHandler < any > | null ) : void ;
  }
}
declare module 'goog:goog.events.EventWrapper' {
  import alias = ಠ_ಠ.clutz.goog.events.EventWrapper;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A files drag and drop event detector. Gets an {@code element} as parameter
   * and fires {@code goog.events.FileDropHandler.EventType.DROP} event when files
   * are dropped in the {@code element}.
   */
  class FileDropHandler extends FileDropHandler_Instance {
  }
  class FileDropHandler_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * A files drag and drop event detector. Gets an {@code element} as parameter
     * and fires {@code goog.events.FileDropHandler.EventType.DROP} event when files
     * are dropped in the {@code element}.
     * @param element The element or document to listen on.
     * @param opt_preventDropOutside Whether to prevent a drop on the area outside the {@code element}. Default false.
     */
    constructor (element : Element | null | Document , opt_preventDropOutside ? : boolean ) ;
    disposeInternal ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.FileDropHandler'): typeof ಠ_ಠ.clutz.goog.events.FileDropHandler;
}
declare module 'goog:goog.events.FileDropHandler' {
  import alias = ಠ_ಠ.clutz.goog.events.FileDropHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.FileDropHandler {
  /**
   * The types of events fired by this class.
   */
  type EventType = string ;
  var EventType : {
    DROP : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.FileDropHandler.EventType'): typeof ಠ_ಠ.clutz.goog.events.FileDropHandler.EventType;
}
declare module 'goog:goog.events.FileDropHandler.EventType' {
  import alias = ಠ_ಠ.clutz.goog.events.FileDropHandler.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * This event handler allows you to catch focus events when descendants gain or
   * loses focus.
   */
  class FocusHandler extends FocusHandler_Instance {
  }
  class FocusHandler_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * This event handler allows you to catch focus events when descendants gain or
     * loses focus.
     * @param element The node to listen on.
     */
    constructor (element : Element | null | Document ) ;
    disposeInternal ( ) : void ;
    /**
     * This handles the underlying events and dispatches a new event.
     * @param e The underlying browser event.
     */
    handleEvent (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.FocusHandler'): typeof ಠ_ಠ.clutz.goog.events.FocusHandler;
}
declare module 'goog:goog.events.FocusHandler' {
  import alias = ಠ_ಠ.clutz.goog.events.FocusHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.FocusHandler {
  /**
   * Enum type for the events fired by the focus handler
   */
  type EventType = string ;
  var EventType : {
    FOCUSIN : EventType ,
    FOCUSOUT : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.FocusHandler.EventType'): typeof ಠ_ಠ.clutz.goog.events.FocusHandler.EventType;
}
declare module 'goog:goog.events.FocusHandler.EventType' {
  import alias = ಠ_ಠ.clutz.goog.events.FocusHandler.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Dispatches high-level events for IMEs.
   */
  class ImeHandler extends ImeHandler_Instance {
    /**
     * Whether to use the composition events.
     */
    static USES_COMPOSITION_EVENTS : boolean ;
  }
  class ImeHandler_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Dispatches high-level events for IMEs.
     * @param el The element to listen on.
     */
    constructor (el : Element | null ) ;
    disposeInternal ( ) : void ;
    isImeMode ( ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.ImeHandler'): typeof ಠ_ಠ.clutz.goog.events.ImeHandler;
}
declare module 'goog:goog.events.ImeHandler' {
  import alias = ಠ_ಠ.clutz.goog.events.ImeHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.ImeHandler {
  /**
   * An event fired by ImeHandler.
   */
  class Event extends Event_Instance {
  }
  class Event_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * An event fired by ImeHandler.
     * @param type The type.
     * @param reason The trigger for this event.
     */
    constructor (type : ಠ_ಠ.clutz.goog.events.ImeHandler.EventType , reason : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) ;
    /**
     * The event that triggered this.
     */
    reason : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.ImeHandler.Event'): typeof ಠ_ಠ.clutz.goog.events.ImeHandler.Event;
}
declare module 'goog:goog.events.ImeHandler.Event' {
  import alias = ಠ_ಠ.clutz.goog.events.ImeHandler.Event;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.ImeHandler {
  /**
   * Event types fired by ImeHandler. These events do not make any guarantees
   * about whether they were fired before or after the event in question.
   */
  type EventType = string ;
  var EventType : {
    END : EventType ,
    START : EventType ,
    UPDATE : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.ImeHandler.EventType'): typeof ಠ_ಠ.clutz.goog.events.ImeHandler.EventType;
}
declare module 'goog:goog.events.ImeHandler.EventType' {
  import alias = ಠ_ಠ.clutz.goog.events.ImeHandler.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * This event handler will dispatch events when the user types into a text
   * input, password input or a textarea
   */
  class InputHandler extends InputHandler_Instance {
  }
  class InputHandler_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * This event handler will dispatch events when the user types into a text
     * input, password input or a textarea
     * @param element The element that you want to listen for input events on.
     */
    constructor (element : Element | null ) ;
    disposeInternal ( ) : void ;
    /**
     * This handles the underlying events and dispatches a new event as needed.
     * @param e The underlying browser event.
     */
    handleEvent (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.InputHandler'): typeof ಠ_ಠ.clutz.goog.events.InputHandler;
}
declare module 'goog:goog.events.InputHandler' {
  import alias = ಠ_ಠ.clutz.goog.events.InputHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.InputHandler {
  /**
   * Enum type for the events fired by the input handler
   */
  type EventType = string ;
  var EventType : {
    INPUT : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.InputHandler.EventType'): typeof ಠ_ಠ.clutz.goog.events.InputHandler.EventType;
}
declare module 'goog:goog.events.InputHandler.EventType' {
  import alias = ಠ_ಠ.clutz.goog.events.InputHandler.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  type Key = number | ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
}
declare module 'goog:goog.events.Key' {
  import alias = ಠ_ಠ.clutz.goog.events.Key;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Key codes for common characters.
   *
   * This list is not localized and therefore some of the key codes are not
   * correct for non US keyboard layouts. See comments below.
   */
  type KeyCodes = number ;
  var KeyCodes : {
    A : KeyCodes ,
    ALT : KeyCodes ,
    APOSTROPHE : KeyCodes ,
    AT_SIGN : KeyCodes ,
    B : KeyCodes ,
    BACKSLASH : KeyCodes ,
    BACKSPACE : KeyCodes ,
    C : KeyCodes ,
    CAPS_LOCK : KeyCodes ,
    CLOSE_SQUARE_BRACKET : KeyCodes ,
    COMMA : KeyCodes ,
    CONTEXT_MENU : KeyCodes ,
    CTRL : KeyCodes ,
    D : KeyCodes ,
    DASH : KeyCodes ,
    DELETE : KeyCodes ,
    DOWN : KeyCodes ,
    E : KeyCodes ,
    EIGHT : KeyCodes ,
    END : KeyCodes ,
    ENTER : KeyCodes ,
    EQUALS : KeyCodes ,
    ESC : KeyCodes ,
    F : KeyCodes ,
    F1 : KeyCodes ,
    F10 : KeyCodes ,
    F11 : KeyCodes ,
    F12 : KeyCodes ,
    F2 : KeyCodes ,
    F3 : KeyCodes ,
    F4 : KeyCodes ,
    F5 : KeyCodes ,
    F6 : KeyCodes ,
    F7 : KeyCodes ,
    F8 : KeyCodes ,
    F9 : KeyCodes ,
    FF_DASH : KeyCodes ,
    FF_EQUALS : KeyCodes ,
    FF_SEMICOLON : KeyCodes ,
    FIRST_MEDIA_KEY : KeyCodes ,
    FIVE : KeyCodes ,
    FOUR : KeyCodes ,
    G : KeyCodes ,
    H : KeyCodes ,
    HOME : KeyCodes ,
    I : KeyCodes ,
    INSERT : KeyCodes ,
    J : KeyCodes ,
    K : KeyCodes ,
    L : KeyCodes ,
    LAST_MEDIA_KEY : KeyCodes ,
    LEFT : KeyCodes ,
    M : KeyCodes ,
    MAC_ENTER : KeyCodes ,
    MAC_FF_META : KeyCodes ,
    MAC_WK_CMD_LEFT : KeyCodes ,
    MAC_WK_CMD_RIGHT : KeyCodes ,
    META : KeyCodes ,
    N : KeyCodes ,
    NINE : KeyCodes ,
    NUMLOCK : KeyCodes ,
    NUM_CENTER : KeyCodes ,
    NUM_DIVISION : KeyCodes ,
    NUM_EIGHT : KeyCodes ,
    NUM_FIVE : KeyCodes ,
    NUM_FOUR : KeyCodes ,
    NUM_MINUS : KeyCodes ,
    NUM_MULTIPLY : KeyCodes ,
    NUM_NINE : KeyCodes ,
    NUM_ONE : KeyCodes ,
    NUM_PERIOD : KeyCodes ,
    NUM_PLUS : KeyCodes ,
    NUM_SEVEN : KeyCodes ,
    NUM_SIX : KeyCodes ,
    NUM_THREE : KeyCodes ,
    NUM_TWO : KeyCodes ,
    NUM_ZERO : KeyCodes ,
    O : KeyCodes ,
    ONE : KeyCodes ,
    OPEN_SQUARE_BRACKET : KeyCodes ,
    P : KeyCodes ,
    PAGE_DOWN : KeyCodes ,
    PAGE_UP : KeyCodes ,
    PAUSE : KeyCodes ,
    PERIOD : KeyCodes ,
    PHANTOM : KeyCodes ,
    PLUS_SIGN : KeyCodes ,
    PRINT_SCREEN : KeyCodes ,
    Q : KeyCodes ,
    QUESTION_MARK : KeyCodes ,
    R : KeyCodes ,
    RIGHT : KeyCodes ,
    S : KeyCodes ,
    SCROLL_LOCK : KeyCodes ,
    SEMICOLON : KeyCodes ,
    SEVEN : KeyCodes ,
    SHIFT : KeyCodes ,
    SINGLE_QUOTE : KeyCodes ,
    SIX : KeyCodes ,
    SLASH : KeyCodes ,
    SPACE : KeyCodes ,
    T : KeyCodes ,
    TAB : KeyCodes ,
    THREE : KeyCodes ,
    TILDE : KeyCodes ,
    TWO : KeyCodes ,
    U : KeyCodes ,
    UP : KeyCodes ,
    V : KeyCodes ,
    VK_NONAME : KeyCodes ,
    W : KeyCodes ,
    WIN_IME : KeyCodes ,
    WIN_KEY : KeyCodes ,
    WIN_KEY_FF_LINUX : KeyCodes ,
    WIN_KEY_RIGHT : KeyCodes ,
    X : KeyCodes ,
    Y : KeyCodes ,
    Z : KeyCodes ,
    ZERO : KeyCodes ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.KeyCodes'): typeof ಠ_ಠ.clutz.goog.events.KeyCodes;
}
declare module 'goog:goog.events.KeyCodes' {
  import alias = ಠ_ಠ.clutz.goog.events.KeyCodes;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * This class is used for the goog.events.KeyHandler.EventType.KEY event and
   * it overrides the key code with the fixed key code.
   */
  class KeyEvent extends KeyEvent_Instance {
  }
  class KeyEvent_Instance extends ಠ_ಠ.clutz.goog.events.BrowserEvent_Instance {
    /**
     * This class is used for the goog.events.KeyHandler.EventType.KEY event and
     * it overrides the key code with the fixed key code.
     * @param keyCode The adjusted key code.
     * @param charCode The unicode character code.
     * @param repeat Whether this event was generated by keyboard repeat.
     * @param browserEvent Browser event object.
     */
    constructor (keyCode : number , charCode : number , repeat : boolean , browserEvent : GlobalEvent | null ) ;
    altKey : boolean ;
    /**
     * Unicode character code.
     */
    charCode : number ;
    /**
     * Keycode of key press.
     */
    keyCode : number ;
    /**
     * True if this event was generated by keyboard auto-repeat (i.e., the user is
     * holding the key down.)
     */
    repeat : boolean ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.KeyEvent'): typeof ಠ_ಠ.clutz.goog.events.KeyEvent;
}
declare module 'goog:goog.events.KeyEvent' {
  import alias = ಠ_ಠ.clutz.goog.events.KeyEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A wrapper around an element that you want to listen to keyboard events on.
   */
  class KeyHandler extends KeyHandler_Instance {
  }
  class KeyHandler_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * A wrapper around an element that you want to listen to keyboard events on.
     * @param opt_element The element or document to listen on.
     * @param opt_capture Whether to listen for browser events in capture phase (defaults to false).
     */
    constructor (opt_element ? : Element | null | Document , opt_capture ? : boolean ) ;
    /**
     * Adds the proper key event listeners to the element.
     * @param element The element to listen on.
     * @param opt_capture Whether to listen for browser events in capture phase (defaults to false).
     */
    attach (element : Element | null | Document , opt_capture ? : boolean ) : void ;
    /**
     * Removes the listeners that may exist.
     */
    detach ( ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns the element listened on for the real keyboard events.
     */
    getElement ( ) : Element | null | Document ;
    /**
     * Handles the events on the element.
     * @param e The keyboard event sent from the browser.
     */
    handleEvent (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Resets the stored previous values. Needed to be called for webkit which will
     * not generate a key up for meta key operations. This should only be called
     * when having finished with repeat key possibilities.
     */
    resetState ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.KeyHandler'): typeof ಠ_ಠ.clutz.goog.events.KeyHandler;
}
declare module 'goog:goog.events.KeyHandler' {
  import alias = ಠ_ಠ.clutz.goog.events.KeyHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.KeyHandler {
  /**
   * Enum type for the events fired by the key handler
   */
  type EventType = string ;
  var EventType : {
    KEY : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.KeyHandler.EventType'): typeof ಠ_ಠ.clutz.goog.events.KeyHandler.EventType;
}
declare module 'goog:goog.events.KeyHandler.EventType' {
  import alias = ಠ_ಠ.clutz.goog.events.KeyHandler.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Key names for common characters. These should be used with keyup/keydown
   * events, since the .keyCode property on those is meant to indicate the
   * * physical key* the user held down on the keyboard. Hence the mapping uses
   * only the unshifted version of each key (e.g. no '#', since that's shift+3).
   * Keypress events on the other hand generate (mostly) ASCII codes since they
   * correspond to *characters* the user typed.
   *
   * For further reference: http://unixpapa.com/js/key.html
   *
   * This list is not localized and therefore some of the key codes are not
   * correct for non-US keyboard layouts.
   */
  type KeyNames = string ;
  var KeyNames : {
    100 : KeyNames ,
    101 : KeyNames ,
    102 : KeyNames ,
    103 : KeyNames ,
    104 : KeyNames ,
    105 : KeyNames ,
    106 : KeyNames ,
    107 : KeyNames ,
    109 : KeyNames ,
    110 : KeyNames ,
    111 : KeyNames ,
    112 : KeyNames ,
    113 : KeyNames ,
    114 : KeyNames ,
    115 : KeyNames ,
    116 : KeyNames ,
    117 : KeyNames ,
    118 : KeyNames ,
    119 : KeyNames ,
    120 : KeyNames ,
    121 : KeyNames ,
    122 : KeyNames ,
    123 : KeyNames ,
    13 : KeyNames ,
    16 : KeyNames ,
    17 : KeyNames ,
    18 : KeyNames ,
    186 : KeyNames ,
    187 : KeyNames ,
    188 : KeyNames ,
    189 : KeyNames ,
    19 : KeyNames ,
    190 : KeyNames ,
    191 : KeyNames ,
    192 : KeyNames ,
    20 : KeyNames ,
    219 : KeyNames ,
    220 : KeyNames ,
    221 : KeyNames ,
    222 : KeyNames ,
    224 : KeyNames ,
    27 : KeyNames ,
    32 : KeyNames ,
    33 : KeyNames ,
    34 : KeyNames ,
    35 : KeyNames ,
    36 : KeyNames ,
    37 : KeyNames ,
    38 : KeyNames ,
    39 : KeyNames ,
    40 : KeyNames ,
    45 : KeyNames ,
    46 : KeyNames ,
    48 : KeyNames ,
    49 : KeyNames ,
    50 : KeyNames ,
    51 : KeyNames ,
    52 : KeyNames ,
    53 : KeyNames ,
    54 : KeyNames ,
    55 : KeyNames ,
    56 : KeyNames ,
    57 : KeyNames ,
    59 : KeyNames ,
    61 : KeyNames ,
    65 : KeyNames ,
    66 : KeyNames ,
    67 : KeyNames ,
    68 : KeyNames ,
    69 : KeyNames ,
    70 : KeyNames ,
    71 : KeyNames ,
    72 : KeyNames ,
    73 : KeyNames ,
    74 : KeyNames ,
    75 : KeyNames ,
    76 : KeyNames ,
    77 : KeyNames ,
    78 : KeyNames ,
    79 : KeyNames ,
    8 : KeyNames ,
    80 : KeyNames ,
    81 : KeyNames ,
    82 : KeyNames ,
    83 : KeyNames ,
    84 : KeyNames ,
    85 : KeyNames ,
    86 : KeyNames ,
    87 : KeyNames ,
    88 : KeyNames ,
    89 : KeyNames ,
    9 : KeyNames ,
    90 : KeyNames ,
    93 : KeyNames ,
    96 : KeyNames ,
    97 : KeyNames ,
    98 : KeyNames ,
    99 : KeyNames ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.KeyNames'): typeof ಠ_ಠ.clutz.goog.events.KeyNames;
}
declare module 'goog:goog.events.KeyNames' {
  import alias = ಠ_ಠ.clutz.goog.events.KeyNames;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A listenable interface. A listenable is an object with the ability
   * to dispatch/broadcast events to "event listeners" registered via
   * listen/listenOnce.
   *
   * The interface allows for an event propagation mechanism similar
   * to one offered by native browser event targets, such as
   * capture/bubble mechanism, stopping propagation, and preventing
   * default actions. Capture/bubble mechanism depends on the ancestor
   * tree constructed via {@code #getParentEventTarget}; this tree
   * must be directed acyclic graph. The meaning of default action(s)
   * in preventDefault is specific to a particular use case.
   *
   * Implementations that do not support capture/bubble or can not have
   * a parent listenable can simply not implement any ability to set the
   * parent listenable (and have {@code #getParentEventTarget} return
   * null).
   *
   * Implementation of this class can be used with or independently from
   * goog.events.
   *
   * Implementation must call {@code #addImplementation(implClass)}.
   */
  interface Listenable {
    /**
     * Dispatches an event (or event like object) and calls all listeners
     * listening for events of this type. The type of the event is decided by the
     * type property on the event object.
     *
     * If any of the listeners returns false OR calls preventDefault then this
     * function will return false.  If one of the capture listeners calls
     * stopPropagation, then the bubble listeners won't fire.
     * @param e Event object.
     */
    dispatchEvent (a : string | Object | null ) : boolean ;
    /**
     * Fires all registered listeners in this listenable for the given
     * type and capture mode, passing them the given eventObject. This
     * does not perform actual capture/bubble. Only implementors of the
     * interface should be using this.
     * @param type The type of the listeners to fire.
     * @param capture The capture mode of the listeners to fire.
     * @param eventObject The event object to fire.
     */
    fireListeners < EVENTOBJ > (a : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , b : boolean , c : EVENTOBJ ) : boolean ;
    /**
     * Gets the goog.events.ListenableKey for the event or null if no such
     * listener is in use.
     * @param type The name of the event without the 'on' prefix.
     * @param listener The listener function to get.
     * @param capture Whether the listener is a capturing listener.
     * @param opt_listenerScope Object in whose scope to call the listener.
     */
    getListener < SCOPE , EVENTOBJ > (a : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , b : (a : EVENTOBJ ) => boolean | undefined , c : boolean , d ? : SCOPE ) : ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
    /**
     * Gets all listeners in this listenable for the given type and
     * capture mode.
     * @param type The type of the listeners to fire.
     * @param capture The capture mode of the listeners to fire.
     */
    getListeners < EVENTOBJ > (a : string | ಠ_ಠ.clutz.goog.events.EventId < any > , b : boolean ) : ಠ_ಠ.clutz.goog.events.ListenableKey [] ;
    /**
     * Returns the parent of this event target to use for capture/bubble
     * mechanism.
     *
     * NOTE(chrishenry): The name reflects the original implementation of
     * custom event target ({@code goog.events.EventTarget}). We decided
     * that changing the name is not worth it.
     */
    getParentEventTarget ( ) : ಠ_ಠ.clutz.goog.events.Listenable | null ;
    /**
     * Whether there is any active listeners matching the specified
     * signature. If either the type or capture parameters are
     * unspecified, the function will match on the remaining criteria.
     * @param opt_type Event type.
     * @param opt_capture Whether to check for capture or bubble listeners.
     */
    hasListener < EVENTOBJ > (a ? : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , b ? : boolean ) : boolean ;
    /**
     * Adds an event listener. A listener can only be added once to an
     * object and if it is added again the key for the listener is
     * returned. Note that if the existing listener is a one-off listener
     * (registered via listenOnce), it will no longer be a one-off
     * listener after a call to listen().
     * @param type The event type id.
     * @param listener Callback method.
     * @param opt_useCapture Whether to fire in capture phase (defaults to false).
     * @param opt_listenerScope Object in whose scope to call the listener.
     */
    listen < SCOPE , EVENTOBJ > (a : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , b : (a : EVENTOBJ ) => boolean | undefined , c ? : boolean , d ? : SCOPE ) : ಠ_ಠ.clutz.goog.events.ListenableKey ;
    /**
     * Adds an event listener that is removed automatically after the
     * listener fired once.
     *
     * If an existing listener already exists, listenOnce will do
     * nothing. In particular, if the listener was previously registered
     * via listen(), listenOnce() will not turn the listener into a
     * one-off listener. Similarly, if there is already an existing
     * one-off listener, listenOnce does not modify the listeners (it is
     * still a once listener).
     * @param type The event type id.
     * @param listener Callback method.
     * @param opt_useCapture Whether to fire in capture phase (defaults to false).
     * @param opt_listenerScope Object in whose scope to call the listener.
     */
    listenOnce < SCOPE , EVENTOBJ > (a : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , b : (a : EVENTOBJ ) => boolean | undefined , c ? : boolean , d ? : SCOPE ) : ಠ_ಠ.clutz.goog.events.ListenableKey ;
    /**
     * Removes all listeners from this listenable. If type is specified,
     * it will only remove listeners of the particular type. otherwise all
     * registered listeners will be removed.
     * @param opt_type Type of event to remove, default is to remove all types.
     */
    removeAllListeners (a ? : string ) : number ;
    /**
     * Removes an event listener which was added with listen() or listenOnce().
     * @param type The event type id.
     * @param listener Callback method.
     * @param opt_useCapture Whether to fire in capture phase (defaults to false).
     * @param opt_listenerScope Object in whose scope to call the listener.
     */
    unlisten < SCOPE , EVENTOBJ > (a : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , b : (a : EVENTOBJ ) => boolean | undefined , c ? : boolean , d ? : SCOPE ) : boolean ;
    /**
     * Removes an event listener which was added with listen() by the key
     * returned by listen().
     * @param key The key returned by listen() or listenOnce().
     */
    unlistenByKey (a : ಠ_ಠ.clutz.goog.events.ListenableKey ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.events.Listenable {
  var IMPLEMENTED_BY_PROP : string ;
  function addImplementation (cls : ( ...a : any [] ) => any ) : void ;
  function isImplementedBy (obj : Object | null ) : boolean ;
}
declare module 'goog:goog.events.Listenable' {
  import alias = ಠ_ಠ.clutz.goog.events.Listenable;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * An interface that describes a single registered listener.
   */
  interface ListenableKey {
    /**
     * Whether the listener works on capture phase.
     */
    capture : boolean ;
    /**
     * The 'this' object for the listener function's scope.
     */
    handler : Object | null | undefined ;
    /**
     * A globally unique number to identify the key.
     */
    key : number ;
    /**
     * The listener function.
     */
    listener : ( (a : any ) => any ) | { handleEvent : (a : any ) => any } | null ;
    /**
     * The source event target.
     */
    src : Object | null ;
    /**
     * The event type the listener is listening to.
     */
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.events.ListenableKey {
  function reserveKey ( ) : number ;
}
declare module 'goog:goog.events.ListenableKey' {
  import alias = ಠ_ಠ.clutz.goog.events.ListenableKey;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  type ListenableType = EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable ;
}
declare module 'goog:goog.events.ListenableType' {
  import alias = ಠ_ಠ.clutz.goog.events.ListenableType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Simple class that stores information about a listener
   */
  class Listener extends Listener_Instance {
    static ENABLE_MONITORING : boolean ;
  }
  class Listener_Instance implements ಠ_ಠ.clutz.goog.events.ListenableKey {
    private noStructuralTyping_: any;
    /**
     * Simple class that stores information about a listener
     * @param listener Callback function.
     * @param proxy Wrapper for the listener that patches the event.
     * @param src Source object for the event.
     * @param type Event type.
     * @param capture Whether in capture or bubble phase.
     * @param opt_handler Object in whose context to execute the callback.
     */
    constructor (listener : ( ...a : any [] ) => any , proxy : ( ( ...a : any [] ) => any ) | null , src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string , capture : boolean , opt_handler ? : Object | null ) ;
    /**
     * Whether to remove the listener after it has been called.
     */
    callOnce : boolean ;
    /**
     * Whether the listener is being called in the capture or bubble phase
     */
    capture : boolean ;
    /**
     * Optional object whose context to execute the listener in
     */
    handler : Object | null | undefined ;
    /**
     * The key of the listener.
     */
    key : number ;
    /**
     * Callback function.
     */
    listener : ( ( ...a : any [] ) => any ) | null ;
    /**
     * A wrapper over the original listener. This is used solely to
     * handle native browser events (it is used to simulate the capture
     * phase and to patch the event object).
     */
    proxy : ( ( ...a : any [] ) => any ) | null ;
    /**
     * Whether the listener has been removed.
     */
    removed : boolean ;
    /**
     * Object or node that callback is listening to
     */
    src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable ;
    /**
     * The event type.
     */
    type : string ;
    /**
     * If monitoring the goog.events.Listener instances is enabled, stores the
     * creation stack trace of the Disposable instance.
     */
    creationStack : string ;
    /**
     * Marks this listener as removed. This also remove references held by
     * this listener object (such as listener and event source).
     */
    markAsRemoved ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.Listener'): typeof ಠ_ಠ.clutz.goog.events.Listener;
}
declare module 'goog:goog.events.Listener' {
  import alias = ಠ_ಠ.clutz.goog.events.Listener;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Creates a new listener map.
   */
  class ListenerMap extends ListenerMap_Instance {
  }
  class ListenerMap_Instance {
    private noStructuralTyping_: any;
    /**
     * Creates a new listener map.
     * @param src The src object.
     */
    constructor (src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable ) ;
    /**
     * Maps of event type to an array of listeners.
     */
    listeners : { [ key: string ]: ಠ_ಠ.clutz.goog.events.Listener [] } ;
    src : EventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable ;
    /**
     * Adds an event listener. A listener can only be added once to an
     * object and if it is added again the key for the listener is
     * returned.
     *
     * Note that a one-off listener will not change an existing listener,
     * if any. On the other hand a normal listener will change existing
     * one-off listener to become a normal listener.
     * @param type The listener event type.
     * @param listener This listener callback method.
     * @param callOnce Whether the listener is a one-off listener.
     * @param opt_useCapture The capture mode of the listener.
     * @param opt_listenerScope Object in whose scope to call the listener.
     */
    add (type : string | ಠ_ಠ.clutz.goog.events.EventId < any > , listener : ( ...a : any [] ) => any , callOnce : boolean , opt_useCapture ? : boolean , opt_listenerScope ? : Object | null ) : ಠ_ಠ.clutz.goog.events.ListenableKey ;
    /**
     * Gets the goog.events.ListenableKey for the event or null if no such
     * listener is in use.
     * @param type The type of the listener to retrieve.
     * @param listener The listener function to get.
     * @param capture Whether the listener is a capturing listener.
     * @param opt_listenerScope Object in whose scope to call the listener.
     */
    getListener (type : string | ಠ_ಠ.clutz.goog.events.EventId < any > , listener : ( ...a : any [] ) => any , capture : boolean , opt_listenerScope ? : Object | null ) : ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
    getListenerCount ( ) : number ;
    /**
     * Gets all listeners that match the given type and capture mode. The
     * returned array is a copy (but the listener objects are not).
     * @param type The type of the listeners to retrieve.
     * @param capture The capture mode of the listeners to retrieve.
     */
    getListeners (type : string | ಠ_ಠ.clutz.goog.events.EventId < any > , capture : boolean ) : ಠ_ಠ.clutz.goog.events.ListenableKey [] ;
    getTypeCount ( ) : number ;
    /**
     * Whether there is a matching listener. If either the type or capture
     * parameters are unspecified, the function will match on the
     * remaining criteria.
     * @param opt_type The type of the listener.
     * @param opt_capture The capture mode of the listener.
     */
    hasListener (opt_type ? : string | ಠ_ಠ.clutz.goog.events.EventId < any > , opt_capture ? : boolean ) : boolean ;
    /**
     * Removes a matching listener.
     * @param type The listener event type.
     * @param listener This listener callback method.
     * @param opt_useCapture The capture mode of the listener.
     * @param opt_listenerScope Object in whose scope to call the listener.
     */
    remove (type : string | ಠ_ಠ.clutz.goog.events.EventId < any > , listener : ( ...a : any [] ) => any , opt_useCapture ? : boolean , opt_listenerScope ? : Object | null ) : boolean ;
    /**
     * Removes all listeners from this map. If opt_type is provided, only
     * listeners that match the given type are removed.
     * @param opt_type Type of event to remove.
     */
    removeAll (opt_type ? : string | ಠ_ಠ.clutz.goog.events.EventId < any > ) : number ;
    /**
     * Removes the given listener object.
     * @param listener The listener to remove.
     */
    removeByKey (listener : ಠ_ಠ.clutz.goog.events.ListenableKey ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.ListenerMap'): typeof ಠ_ಠ.clutz.goog.events.ListenerMap;
}
declare module 'goog:goog.events.ListenerMap' {
  import alias = ಠ_ಠ.clutz.goog.events.ListenerMap;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A base class for mouse wheel events. This is used with the
   * MouseWheelHandler.
   */
  class MouseWheelEvent extends MouseWheelEvent_Instance {
  }
  class MouseWheelEvent_Instance extends ಠ_ಠ.clutz.goog.events.BrowserEvent_Instance {
    /**
     * A base class for mouse wheel events. This is used with the
     * MouseWheelHandler.
     * @param detail The number of rows the user scrolled.
     * @param browserEvent Browser event object.
     * @param deltaX The number of rows the user scrolled in the X direction.
     * @param deltaY The number of rows the user scrolled in the Y direction.
     */
    constructor (detail : number , browserEvent : GlobalEvent | null , deltaX : number , deltaY : number ) ;
    /**
     * The number of "lines" scrolled in the X direction.
     *
     * Note that not all browsers provide enough information to distinguish
     * horizontal and vertical scroll events, so for these unsupported browsers,
     * we will always have a deltaX of 0, even if the user scrolled their mouse
     * wheel or trackpad sideways.
     *
     * Currently supported browsers are Webkit and Firefox 3.1 or later.
     */
    deltaX : number ;
    /**
     * The number of lines scrolled in the Y direction.
     */
    deltaY : number ;
    /**
     * The number of lines the user scrolled
     */
    detail : number ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.MouseWheelEvent'): typeof ಠ_ಠ.clutz.goog.events.MouseWheelEvent;
}
declare module 'goog:goog.events.MouseWheelEvent' {
  import alias = ಠ_ಠ.clutz.goog.events.MouseWheelEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * This event handler allows you to catch mouse wheel events in a consistent
   * manner.
   */
  class MouseWheelHandler extends MouseWheelHandler_Instance {
  }
  class MouseWheelHandler_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * This event handler allows you to catch mouse wheel events in a consistent
     * manner.
     * @param element The element to listen to the mouse wheel event on.
     * @param opt_capture Whether to handle the mouse wheel event in capture phase.
     */
    constructor (element : Element | null | Document , opt_capture ? : boolean ) ;
    disposeInternal ( ) : void ;
    /**
     * Handles the events on the element.
     * @param e The underlying browser event.
     */
    handleEvent (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    setMaxDeltaX (maxDeltaX : number ) : void ;
    setMaxDeltaY (maxDeltaY : number ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.MouseWheelHandler'): typeof ಠ_ಠ.clutz.goog.events.MouseWheelHandler;
}
declare module 'goog:goog.events.MouseWheelHandler' {
  import alias = ಠ_ಠ.clutz.goog.events.MouseWheelHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.MouseWheelHandler {
  /**
   * Enum type for the events fired by the mouse wheel handler.
   */
  type EventType = string ;
  var EventType : {
    MOUSEWHEEL : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.MouseWheelHandler.EventType'): typeof ಠ_ಠ.clutz.goog.events.MouseWheelHandler.EventType;
}
declare module 'goog:goog.events.MouseWheelHandler.EventType' {
  import alias = ಠ_ಠ.clutz.goog.events.MouseWheelHandler.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Basic object for detecting whether the online state changes.
   */
  class OnlineHandler extends OnlineHandler_Instance {
  }
  class OnlineHandler_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance implements ಠ_ಠ.clutz.goog.net.NetworkStatusMonitor {
    disposeInternal ( ) : void ;
    isOnline ( ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.OnlineHandler'): typeof ಠ_ಠ.clutz.goog.events.OnlineHandler;
}
declare module 'goog:goog.events.OnlineHandler' {
  import alias = ಠ_ಠ.clutz.goog.events.OnlineHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.OnlineHandler {
  /**
   * Enum for the events dispatched by the OnlineHandler.
   */
  type EventType = string ;
  var EventType : {
    OFFLINE : EventType ,
    ONLINE : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.OnlineHandler.EventType'): typeof ಠ_ಠ.clutz.goog.events.OnlineHandler.EventType;
}
declare module 'goog:goog.events.OnlineHandler.EventType' {
  import alias = ಠ_ಠ.clutz.goog.events.OnlineHandler.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A paste event detector. Gets an {@code element} as parameter and fires
   * {@code goog.events.PasteHandler.EventType.PASTE} events when text is
   * pasted in the {@code element}. Uses heuristics to detect paste events in FF2.
   * See more details of the heuristic on {@link #handleEvent_}.
   */
  class PasteHandler extends PasteHandler_Instance {
    /**
     * The mandatory delay we expect between two {@code input} events, used to
     * differentiated between non key paste events and key events.
     */
    static MANDATORY_MS_BETWEEN_INPUT_EVENTS_TIE_BREAKER : number ;
    /**
     * Whether current UA supoprts the native "paste" event type.
     */
    static SUPPORTS_NATIVE_PASTE_EVENT : boolean ;
  }
  class PasteHandler_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * A paste event detector. Gets an {@code element} as parameter and fires
     * {@code goog.events.PasteHandler.EventType.PASTE} events when text is
     * pasted in the {@code element}. Uses heuristics to detect paste events in FF2.
     * See more details of the heuristic on {@link #handleEvent_}.
     * @param element The textarea element we are listening on.
     */
    constructor (element : Element | null ) ;
    disposeInternal ( ) : void ;
    /**
     * Returns the event handler.
     */
    getEventHandler < T > ( ) : ಠ_ಠ.clutz.goog.events.EventHandler < T > | null ;
    /**
     * Returns the current state of the paste detection algorithm. Used mostly for
     * testing.
     */
    getState ( ) : ಠ_ಠ.clutz.goog.events.PasteHandler.State ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.PasteHandler'): typeof ಠ_ಠ.clutz.goog.events.PasteHandler;
}
declare module 'goog:goog.events.PasteHandler' {
  import alias = ಠ_ಠ.clutz.goog.events.PasteHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.PasteHandler {
  /**
   * The types of events fired by this class.
   */
  type EventType = string ;
  var EventType : {
    AFTER_PASTE : EventType ,
    PASTE : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.PasteHandler.EventType'): typeof ಠ_ಠ.clutz.goog.events.PasteHandler.EventType;
}
declare module 'goog:goog.events.PasteHandler.EventType' {
  import alias = ಠ_ಠ.clutz.goog.events.PasteHandler.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.PasteHandler {
  /**
   * The states that this class can be found, on the paste detection algorithm.
   */
  type State = string ;
  var State : {
    FOCUSED : State ,
    INIT : State ,
    TYPING : State ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.PasteHandler.State'): typeof ಠ_ಠ.clutz.goog.events.PasteHandler.State;
}
declare module 'goog:goog.events.PasteHandler.State' {
  import alias = ಠ_ಠ.clutz.goog.events.PasteHandler.State;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A common class for wheel events. This is used with the WheelHandler.
   */
  class WheelEvent extends WheelEvent_Instance {
  }
  class WheelEvent_Instance extends ಠ_ಠ.clutz.goog.events.BrowserEvent_Instance {
    /**
     * A common class for wheel events. This is used with the WheelHandler.
     * @param browserEvent Browser event object.
     * @param deltaMode The delta mode units of the wheel event.
     * @param deltaX The number of delta units the user in the X axis.
     * @param deltaY The number of delta units the user in the Y axis.
     * @param deltaZ The number of delta units the user in the Z axis.
     */
    constructor (browserEvent : GlobalEvent | null , deltaMode : ಠ_ಠ.clutz.goog.events.WheelEvent.DeltaMode , deltaX : number , deltaY : number , deltaZ : number ) ;
    /**
     * An enum corresponding to the units of this event.
     */
    deltaMode : ಠ_ಠ.clutz.goog.events.WheelEvent.DeltaMode ;
    /**
     * The number of delta units in the X axis.
     */
    deltaX : number ;
    /**
     * The number of delta units in the Y axis.
     */
    deltaY : number ;
    /**
     * The number of delta units in the Z axis.
     */
    deltaZ : number ;
    /**
     * The number of delta pixels in the X axis. Code that doesn't want to handle
     * different deltaMode units can just look here.
     */
    pixelDeltaX : number ;
    /**
     * The number of pixels in the Y axis. Code that doesn't want to
     * handle different deltaMode units can just look here.
     */
    pixelDeltaY : number ;
    /**
     * The number of pixels scrolled in the Z axis. Code that doesn't want to
     * handle different deltaMode units can just look here.
     */
    pixelDeltaZ : number ;
    type : ಠ_ಠ.clutz.goog.events.WheelEvent.EventType ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.events.WheelEvent {
  type DeltaMode = number ;
  var DeltaMode : {
    LINE : DeltaMode ,
    PAGE : DeltaMode ,
    PIXEL : DeltaMode ,
  };
  type EventType = string ;
  var EventType : {
    WHEEL : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.WheelEvent'): typeof ಠ_ಠ.clutz.goog.events.WheelEvent;
}
declare module 'goog:goog.events.WheelEvent' {
  import alias = ಠ_ಠ.clutz.goog.events.WheelEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * This event handler allows you to catch wheel events in a consistent manner.
   */
  class WheelHandler extends WheelHandler_Instance {
    /**
     * Returns the dom event type.
     */
    static getDomEventType ( ) : string ;
  }
  class WheelHandler_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * This event handler allows you to catch wheel events in a consistent manner.
     * @param element The element to listen to the wheel event on.
     * @param opt_capture Whether to handle the wheel event in capture phase.
     */
    constructor (element : Element | Document , opt_capture ? : boolean ) ;
    disposeInternal ( ) : void ;
    /**
     * Handles the events on the element.
     * @param e The underlying browser event.
     */
    handleEvent (e : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.WheelHandler'): typeof ಠ_ಠ.clutz.goog.events.WheelHandler;
}
declare module 'goog:goog.events.WheelHandler' {
  import alias = ಠ_ಠ.clutz.goog.events.WheelHandler;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Singleton instance of ActionEventWrapper_.
   */
  var actionEventWrapper : ಠ_ಠ.clutz.PrivateType | null ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.events.actionEventWrapper'): typeof ಠ_ಠ.clutz.goog.events.actionEventWrapper;
}
declare module 'goog:goog.events.actionEventWrapper' {
  import alias = ಠ_ಠ.clutz.goog.events.actionEventWrapper;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format {
  /**
   * Constant for the WBR replacement used by insertWordBreaks.  Safari requires
   * <wbr></wbr>, Opera needs the &shy; entity, though this will give a visible
   * hyphen at breaks.  IE8 uses a zero width space.
   * Other browsers just use <wbr>.
   */
  var WORD_BREAK_HTML : string ;
  /**
   * Formats a number of bytes in human readable form.
   * 54, 450K, 1.3M, 5G etc.
   * @param bytes The number of bytes to show.
   * @param opt_decimals The number of decimals to use.  Defaults to 2.
   */
  function fileSize (bytes : number , opt_decimals ? : number ) : string ;
  /**
   * Inserts word breaks into an HTML string at a given interval.
   *
   * This method is as aggressive as possible, using a full table of Unicode
   * characters where it is legal to insert word breaks; however, this table
   * comes at a 2.5k pre-gzip (~1k post-gzip) size cost.  Consider using
   * insertWordBreaksBasic to minimize the size impact.
   * @param str HTML to insert word breaks into.
   * @param opt_maxlen Maximum length after which to ensure there is a break.  Default is 10 characters.
   */
  function insertWordBreaks (str : string , opt_maxlen ? : number ) : string ;
  /**
   * Inserts word breaks into an HTML string at a given interval.
   *
   * This method is less aggressive than insertWordBreaks, only inserting
   * breaks next to punctuation and between Latin or Cyrillic characters.
   * However, this is good enough for the common case of URLs.  It also
   * works for all Latin and Cyrillic languages, plus CJK has no need for word
   * breaks.  When this method is used, goog.i18n.GraphemeBreak may be dead
   * code eliminated.
   * @param str HTML to insert word breaks into.
   * @param opt_maxlen Maximum length after which to ensure there is a break.  Default is 10 characters.
   */
  function insertWordBreaksBasic (str : string , opt_maxlen ? : number ) : string ;
  /**
   * Checks whether string value containing scaling units (K, M, G, T, P, m,
   * u, n) can be converted to a number.
   *
   * Where there is a decimal, there must be a digit to the left of the
   * decimal point.
   *
   * Negative numbers are valid.
   *
   * Examples:
   * 0, 1, 1.0, 10.4K, 2.3M, -0.3P, 1.2m
   * @param val String value to check.
   */
  function isConvertableScaledNumber (val : string ) : boolean ;
  /**
   * Converts number of bytes to string representation. Binary conversion.
   * Default is to return the additional 'B' suffix only for scales greater than
   * 1K, e.g. '10.5KB' to minimize confusion with counts that are scaled by powers
   * of 1000. Otherwise, suffix is empty string.
   * @param val Value to be converted.
   * @param opt_decimals The number of decimals to use.  Defaults to 2.
   * @param opt_suffix If true, include trailing 'B' in returned string.  Default is true.
   * @param opt_useSeparator If true, number and scale will be separated by a no break space. Default is false.
   */
  function numBytesToString (val : number , opt_decimals ? : number , opt_suffix ? : boolean , opt_useSeparator ? : boolean ) : string ;
  /**
   * Converts a numeric value to string representation. SI conversion.
   * @param val Value to be converted.
   * @param opt_decimals The number of decimals to use.  Defaults to 2.
   */
  function numericValueToString (val : number , opt_decimals ? : number ) : string ;
  /**
   * Converts a string to number of bytes, taking into account the units.
   * Binary conversion.
   * @param stringValue String to be converted to numeric value.
   */
  function stringToNumBytes (stringValue : string ) : number ;
  /**
   * Converts a string to numeric value, taking into account the units.
   * If string ends in 'B', use binary conversion.
   * @param stringValue String to be converted to numeric value.
   */
  function stringToNumericValue (stringValue : string ) : number ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.format'): typeof ಠ_ಠ.clutz.goog.format;
}
declare module 'goog:goog.format' {
  import alias = ಠ_ಠ.clutz.goog.format;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.format {
  /**
   * Formats an email address string for display, and allows for extraction of
   * the individual components of the address.
   */
  class EmailAddress extends EmailAddress_Instance {
    /**
     * Match string for characters that require display names to be quoted and are
     * not address separators.
     */
    static SPECIAL_CHARS : string ;
    static isAddressSeparator (ch : string ) : boolean ;
    /**
     * Checks if the provided string is a valid address spec (local@domain.com).
     * @param str The email address to check.
     */
    static isValidAddrSpec (str : string ) : boolean ;
    /**
     * Checks if the provided string is a valid email address. Supports both
     * simple email addresses (address specs) and addresses that contain display
     * names.
     * @param str The email address to check.
     */
    static isValidAddress (str : string ) : boolean ;
    /**
     * Checks if the provided string is a valid domain part (part after the '@') of
     * an email address.
     * @param str The domain part to check.
     */
    static isValidDomainPartSpec (str : string ) : boolean ;
    /**
     * Checks if the provided string is a valid local part (part before the '@') of
     * an email address.
     * @param str The local part to check.
     */
    static isValidLocalPartSpec (str : string ) : boolean ;
    /**
     * Parses an email address of the form "name" &lt;address&gt; into
     * an email address.
     * @param addr The address string.
     */
    static parse (addr : string ) : ಠ_ಠ.clutz.goog.format.EmailAddress ;
    /**
     * Parses an email address of the form "name" &lt;address&gt; ("name" is
     * optional) into an email address.
     * @param addr The address string.
     * @param ctor EmailAddress constructor to instantiate the output address.
     */
    static parseInternal (addr : string , ctor : { new (a ? : string , b ? : string ) : ಠ_ಠ.clutz.goog.format.EmailAddress } ) : ಠ_ಠ.clutz.goog.format.EmailAddress ;
    /**
     * Parses a string containing email addresses of the form
     * "name" &lt;address&gt; into an array of email addresses.
     * @param str The address list.
     */
    static parseList (str : string ) : ಠ_ಠ.clutz.goog.format.EmailAddress [] ;
    /**
     * Parse a string containing email addresses of the form
     * "name" &lt;address&gt; into an array of email addresses.
     * @param str The address list.
     * @param parser The parser to employ.
     * @param separatorChecker Accepts a character and returns whether it should be considered an address separator.
     */
    static parseListInternal (str : string , parser : (a : string ) => any , separatorChecker : (a : string ) => boolean ) : ಠ_ಠ.clutz.goog.format.EmailAddress [] ;
  }
  class EmailAddress_Instance {
    private noStructuralTyping_: any;
    /**
     * Formats an email address string for display, and allows for extraction of
     * the individual components of the address.
     * @param opt_address The email address.
     * @param opt_name The name associated with the email address.
     */
    constructor (opt_address ? : string , opt_name ? : string ) ;
    /**
     * The email address.
     */
    address : string ;
    /**
     * Get the email address.
     */
    getAddress ( ) : string ;
    /**
     * Get the name associated with the email address.
     */
    getName ( ) : string ;
    /**
     * Determines if the current object is a valid email address.
     */
    isValid ( ) : boolean ;
    /**
     * Set the email address.
     * @param address The email address.
     */
    setAddress (address : string ) : void ;
    /**
     * Set the name associated with the email address.
     * @param name The name to associate.
     */
    setName (name : string ) : void ;
    /**
     * Return the address in a standard format:
     * - remove extra spaces.
     * - Surround name with quotes if it contains special characters.
     */
    toString ( ) : string ;
    /**
     * Return the address in a standard format:
     * - remove extra spaces.
     * - Surround name with quotes if it contains special characters.
     * @param specialChars String that contains the characters that require the display name to be quoted.
     */
    toStringInternal (specialChars : string ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.format.EmailAddress'): typeof ಠ_ಠ.clutz.goog.format.EmailAddress;
}
declare module 'goog:goog.format.EmailAddress' {
  import alias = ಠ_ಠ.clutz.goog.format.EmailAddress;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format {
  /**
   * This class formats HTML to be more human-readable.
   * TODO(user): Add hierarchical indentation.
   */
  class HtmlPrettyPrinter extends HtmlPrettyPrinter_Instance {
    /**
     * Static utility function. See prototype #format.
     * @param html The HTML text to pretty print.
     */
    static format (html : string ) : string ;
  }
  class HtmlPrettyPrinter_Instance {
    private noStructuralTyping_: any;
    /**
     * This class formats HTML to be more human-readable.
     * TODO(user): Add hierarchical indentation.
     * @param opt_timeOutMillis Max # milliseconds to spend on #format. If this time is exceeded, return partially formatted. 0 or negative number indicates no timeout.
     */
    constructor (opt_timeOutMillis ? : number ) ;
    /**
     * Breaks up HTML so it's easily readable by the user.
     * @param html The HTML text to pretty print.
     */
    format (html : string ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.format.HtmlPrettyPrinter'): typeof ಠ_ಠ.clutz.goog.format.HtmlPrettyPrinter;
}
declare module 'goog:goog.format.HtmlPrettyPrinter' {
  import alias = ಠ_ಠ.clutz.goog.format.HtmlPrettyPrinter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format.HtmlPrettyPrinter {
  /**
   * This class is a buffer to which we push our output. It tracks line breaks to
   * make sure we don't add unnecessary ones.
   */
  class Buffer extends Buffer_Instance {
  }
  class Buffer_Instance {
    private noStructuralTyping_: any;
    /**
     * Tracks number of line breaks added.
     */
    breakCount : number ;
    /**
     * Append line break if we need one.
     */
    lineBreak ( ) : void ;
    /**
     * Adds token and necessary line breaks to output buffer.
     * @param breakBefore If true, add line break before token if necessary.
     * @param token Token to push.
     * @param breakAfter If true, add line break after token if necessary.
     */
    pushToken (breakBefore : boolean , token : string , breakAfter : boolean ) : void ;
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.format.HtmlPrettyPrinter.Buffer'): typeof ಠ_ಠ.clutz.goog.format.HtmlPrettyPrinter.Buffer;
}
declare module 'goog:goog.format.HtmlPrettyPrinter.Buffer' {
  import alias = ಠ_ಠ.clutz.goog.format.HtmlPrettyPrinter.Buffer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format {
  /**
   * Formats an email address string for display, and allows for extraction of
   * the individual components of the address.
   */
  class InternationalizedEmailAddress extends InternationalizedEmailAddress_Instance {
    static isAddressSeparator (ch : string ) : boolean ;
    /**
     * Checks if the provided string is a valid address spec (local@domain.com).
     * @param str The email address to check.
     */
    static isValidAddrSpec (str : string ) : boolean ;
    /**
     * Checks if the provided string is a valid email address. Supports both
     * simple email addresses (address specs) and addresses that contain display
     * names.
     * @param str The email address to check.
     */
    static isValidAddress (str : string ) : boolean ;
    /**
     * Checks if the provided string is a valid domain part (part after the '@') of
     * an EAI email address.
     * @param str The domain part to check.
     */
    static isValidDomainPartSpec (str : string ) : boolean ;
    /**
     * Checks if the provided string is a valid local part (part before the '@') of
     * an EAI email address.
     * @param str The local part to check.
     */
    static isValidLocalPartSpec (str : string ) : boolean ;
    /**
     * Parses an email address of the form "name" &lt;address&gt; into
     * an email address.
     * @param addr The address string.
     */
    static parse (addr : string ) : ಠ_ಠ.clutz.goog.format.EmailAddress ;
    /**
     * Parses a string containing email addresses of the form
     * "name" &lt;address&gt; into an array of email addresses.
     * @param str The address list.
     */
    static parseList (str : string ) : ಠ_ಠ.clutz.goog.format.EmailAddress [] ;
  }
  class InternationalizedEmailAddress_Instance extends ಠ_ಠ.clutz.goog.format.EmailAddress_Instance {
    /**
     * Formats an email address string for display, and allows for extraction of
     * the individual components of the address.
     * @param opt_address The email address.
     * @param opt_name The name associated with the email address.
     */
    constructor (opt_address ? : string , opt_name ? : string ) ;
    isValid ( ) : boolean ;
    /**
     * Return the address in a standard format:
     * - remove extra spaces.
     * - Surround name with quotes if it contains special characters.
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.format.InternationalizedEmailAddress'): typeof ಠ_ಠ.clutz.goog.format.InternationalizedEmailAddress;
}
declare module 'goog:goog.format.InternationalizedEmailAddress' {
  import alias = ಠ_ಠ.clutz.goog.format.InternationalizedEmailAddress;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format {
  /**
   * Formats a JSON object as a string, properly indented for display.  Supports
   * displaying the string as text or html.  Users can also specify their own
   * set of delimiters for different environments.  For example, the JSON object:
   *
   * <code>{"a": 1, "b": {"c": null, "d": true, "e": [1, 2]}}</code>
   *
   * Will be displayed like this:
   *
   * <code>{
   * "a": 1,
   * "b": {
   * "c": null,
   * "d": true,
   * "e": [
   * 1,
   * 2
   * ]
   * }
   * }</code>
   */
  class JsonPrettyPrinter extends JsonPrettyPrinter_Instance {
  }
  class JsonPrettyPrinter_Instance {
    private noStructuralTyping_: any;
    /**
     * Formats a JSON object as a string, properly indented for display.  Supports
     * displaying the string as text or html.  Users can also specify their own
     * set of delimiters for different environments.  For example, the JSON object:
     *
     * <code>{"a": 1, "b": {"c": null, "d": true, "e": [1, 2]}}</code>
     *
     * Will be displayed like this:
     *
     * <code>{
     * "a": 1,
     * "b": {
     * "c": null,
     * "d": true,
     * "e": [
     * 1,
     * 2
     * ]
     * }
     * }</code>
     * @param delimiters Container for the various strings to use to delimit objects, arrays, newlines, and other pieces of the output.
     */
    constructor (delimiters : ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter.TextDelimiters | null ) ;
    /**
     * Formats a JSON object as a string, properly indented for display.
     * @param json The object to pretty print. It could be a JSON object, a string representing a JSON object, or any other type.
     */
    format (json : any ) : string ;
    /**
     * Formats a JSON object as a SafeHtml, properly indented for display.
     * @param json The object to pretty print. It could be a JSON object, a string representing a JSON object, or any other type.
     */
    formatSafeHtml (json : any ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.format.JsonPrettyPrinter'): typeof ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter;
}
declare module 'goog:goog.format.JsonPrettyPrinter' {
  import alias = ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter {
  /**
   * A container for the delimiting characters used to display the JSON string
   * to an HTML <code>&lt;pre&gt;</code> or <code>&lt;code&gt;</code> element.
   * It escapes the names and values before they are added to the output.
   * Use this class together with goog.format.JsonPrettyPrinter#formatSafeHtml.
   */
  class SafeHtmlDelimiters extends SafeHtmlDelimiters_Instance {
  }
  class SafeHtmlDelimiters_Instance extends ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter.TextDelimiters_Instance {
    formatName (name : string ) : string | ಠ_ಠ.clutz.goog.html.SafeHtml ;
    formatValue (value : string , typeOf : string ) : string | ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Return a class name for the given type.
     * @param typeOf The type of the value.
     */
    getValueCssName (typeOf : string ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.format.JsonPrettyPrinter.SafeHtmlDelimiters'): typeof ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter.SafeHtmlDelimiters;
}
declare module 'goog:goog.format.JsonPrettyPrinter.SafeHtmlDelimiters' {
  import alias = ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter.SafeHtmlDelimiters;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter {
  /**
   * A container for the delimiting characters used to display the JSON string
   * to a text display.  Each delimiter is a publicly accessible property of
   * the object, which makes it easy to tweak delimiters to specific environments.
   */
  class TextDelimiters extends TextDelimiters_Instance {
  }
  class TextDelimiters_Instance {
    private noStructuralTyping_: any;
    /**
     * Represents the end of an array in the output.
     */
    arrayEnd : string ;
    /**
     * Represents the start of an array in the output.
     */
    arrayStart : string ;
    /**
     * Formats a property name before adding it to the output.
     * @param name The property name.
     */
    formatName (name : string ) : string | ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Formats a value before adding it to the output.
     * @param value The value.
     * @param typeOf The type of the value obtained by goog.typeOf.
     */
    formatValue (value : string , typeOf : string ) : string | ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Represents the number of spaces to indent each sub-property of the JSON.
     */
    indent : number ;
    /**
     * Represents a newline character in the output.  Used to begin a new line.
     */
    lineBreak : string | ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Represents the string used to separate property names from property values in
     * the output.
     */
    nameValueSeparator : string | ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Represents the end of an object in the output.
     */
    objectEnd : string ;
    /**
     * Represents the start of an object in the output.
     */
    objectStart : string ;
    /**
     * A string that's placed after a property name in the output.  Useful for
     * wrapping a property name in an html tag.
     */
    postName : string ;
    /**
     * A string that's placed after a property value in the output.  Useful for
     * wrapping a property value in an html tag.
     */
    postValue : string ;
    /**
     * A string that's placed before a property name in the output.  Useful for
     * wrapping a property name in an html tag.
     */
    preName : string ;
    /**
     * A string that's placed before a property value in the output.  Useful for
     * wrapping a property value in an html tag.
     */
    preValue : string ;
    /**
     * Represents the string used to separate properties in the output.
     */
    propertySeparator : string ;
    /**
     * Represents a space character in the output.  Used to indent properties a
     * certain number of spaces, and to separate property names from property
     * values.
     */
    space : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.format.JsonPrettyPrinter.TextDelimiters'): typeof ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter.TextDelimiters;
}
declare module 'goog:goog.format.JsonPrettyPrinter.TextDelimiters' {
  import alias = ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter.TextDelimiters;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * Converts a Blob or a File into a string. This should only be used when the
   * blob is known to be small.
   * @param blob The blob to convert.
   * @param opt_encoding The name of the encoding to use.
   */
  function blobToString (blob : Blob , opt_encoding ? : string ) : any ;
  /**
   * Checks whether this browser supports Object Urls. If not, calls to
   * createObjectUrl and revokeObjectUrl will result in an error.
   *
   * TODO(user): Update references to this method to use
   * goog.fs.url.browserSupportsObjectUrls instead.
   */
  function browserSupportsObjectUrls ( ) : boolean ;
  /**
   * Creates a blob URL for a blob object.
   * Throws an error if the browser does not support Object Urls.
   *
   * TODO(user): Update references to this method to use
   * goog.fs.url.createObjectUrl instead.
   * @param blob The object for which to create the URL.
   */
  function createObjectUrl (blob : Blob ) : string ;
  /**
   * Concatenates one or more values together and converts them to a Blob.
   * @param var_args The values that will make up the resulting blob.
   */
  function getBlob ( ...var_args : ( string | Blob | ArrayBuffer | undefined ) [] ) : Blob ;
  /**
   * Creates a blob with the given properties.
   * See https://developer.mozilla.org/en-US/docs/Web/API/Blob for more details.
   * @param parts The values that will make up the resulting blob.
   * @param opt_type The MIME type of the Blob.
   * @param opt_endings Specifies how strings containing newlines are to be written out.
   */
  function getBlobWithProperties (parts : ( string | Blob ) [] | null , opt_type ? : string , opt_endings ? : string ) : Blob ;
  /**
   * Returns a persistent FileSystem object. A persistent filesystem will never be
   * deleted without the user's or application's authorization.
   * @param size The size requested for the filesystem, in bytes.
   */
  function getPersistent (size : number ) : any ;
  /**
   * Returns a temporary FileSystem object. A temporary filesystem may be deleted
   * by the user agent at its discretion.
   * @param size The size requested for the filesystem, in bytes.
   */
  function getTemporary (size : number ) : any ;
  /**
   * Revokes a URL created by {@link goog.fs.createObjectUrl}.
   * Throws an error if the browser does not support Object Urls.
   *
   * TODO(user): Update references to this method to use
   * goog.fs.url.revokeObjectUrl instead.
   * @param url The URL to revoke.
   */
  function revokeObjectUrl (url : string ) : void ;
  /**
   * Slices the blob. The returned blob contains data from the start byte
   * (inclusive) till the end byte (exclusive). Negative indices can be used
   * to count bytes from the end of the blob (-1 == blob.size - 1). Indices
   * are always clamped to blob range. If end is omitted, all the data till
   * the end of the blob is taken.
   * @param blob The blob to be sliced.
   * @param start Index of the starting byte.
   * @param opt_end Index of the ending byte.
   */
  function sliceBlob (blob : Blob , start : number , opt_end ? : number ) : Blob | null ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs'): typeof ಠ_ಠ.clutz.goog.fs;
}
declare module 'goog:goog.fs' {
  import alias = ಠ_ಠ.clutz.goog.fs;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * A directory in a local FileSystem.
   */
  interface DirectoryEntry extends ಠ_ಠ.clutz.goog.fs.Entry {
    /**
     * Opens the directory for the specified path, creating the directory and any
     * intermediate directories as necessary.
     * @param path The directory path to create. May be absolute or relative to the current directory. The parent directory ".." and current directory "." are supported.
     */
    createPath (path : string ) : any ;
    /**
     * Get a directory within this directory.
     * @param path The path to the directory, relative to this directory.
     * @param opt_behavior The behavior for handling an existing directory, or the lack thereof.
     */
    getDirectory (path : string , opt_behavior ? : ಠ_ಠ.clutz.goog.fs.DirectoryEntry.Behavior ) : any ;
    /**
     * Get a file in the directory.
     * @param path The path to the file, relative to this directory.
     * @param opt_behavior The behavior for handling an existing file, or the lack thereof.
     */
    getFile (path : string , opt_behavior ? : ಠ_ಠ.clutz.goog.fs.DirectoryEntry.Behavior ) : any ;
    /**
     * Gets a list of all entries in this directory.
     */
    listDirectory ( ) : any ;
    /**
     * Removes this directory and all its contents.
     */
    removeRecursively ( ) : any ;
  }
}
declare module 'goog:goog.fs.DirectoryEntry' {
  import alias = ಠ_ಠ.clutz.goog.fs.DirectoryEntry;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs.DirectoryEntry {
  /**
   * Behaviors for getting files and directories.
   */
  type Behavior = number ;
  var Behavior : {
    CREATE : Behavior ,
    CREATE_EXCLUSIVE : Behavior ,
    DEFAULT : Behavior ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.DirectoryEntry.Behavior'): typeof ಠ_ಠ.clutz.goog.fs.DirectoryEntry.Behavior;
}
declare module 'goog:goog.fs.DirectoryEntry.Behavior' {
  import alias = ಠ_ಠ.clutz.goog.fs.DirectoryEntry.Behavior;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * A directory in a local FileSystem.
   *
   * This should not be instantiated directly. Instead, it should be accessed via
   * {@link goog.fs.FileSystem#getRoot} or
   * {@link goog.fs.DirectoryEntry#getDirectoryEntry}.
   */
  class DirectoryEntryImpl extends DirectoryEntryImpl_Instance {
  }
  class DirectoryEntryImpl_Instance extends ಠ_ಠ.clutz.goog.fs.EntryImpl_Instance implements ಠ_ಠ.clutz.goog.fs.DirectoryEntry {
    /**
     * A directory in a local FileSystem.
     *
     * This should not be instantiated directly. Instead, it should be accessed via
     * {@link goog.fs.FileSystem#getRoot} or
     * {@link goog.fs.DirectoryEntry#getDirectoryEntry}.
     * @param fs The wrapped filesystem.
     * @param dir The underlying DirectoryEntry object.
     */
    constructor (fs : ಠ_ಠ.clutz.goog.fs.FileSystem , dir : DirectoryEntry ) ;
    createPath (path : string ) : any ;
    getDirectory (path : string , opt_behavior ? : ಠ_ಠ.clutz.goog.fs.DirectoryEntry.Behavior ) : any ;
    getFile (path : string , opt_behavior ? : ಠ_ಠ.clutz.goog.fs.DirectoryEntry.Behavior ) : any ;
    listDirectory ( ) : any ;
    removeRecursively ( ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.DirectoryEntryImpl'): typeof ಠ_ಠ.clutz.goog.fs.DirectoryEntryImpl;
}
declare module 'goog:goog.fs.DirectoryEntryImpl' {
  import alias = ಠ_ಠ.clutz.goog.fs.DirectoryEntryImpl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * The interface for entries in the filesystem.
   */
  interface Entry {
    /**
     * Copy this entry to a new location.
     * @param parent The new parent directory.
     * @param opt_newName The name of the new entry. If omitted, the new entry has the same name as the original.
     */
    copyTo (parent : ಠ_ಠ.clutz.goog.fs.DirectoryEntry , opt_newName ? : string ) : any ;
    getFileSystem ( ) : ಠ_ಠ.clutz.goog.fs.FileSystem ;
    getFullPath ( ) : string ;
    /**
     * Retrieves the last modified date for this entry.
     */
    getLastModified ( ) : any ;
    /**
     * Retrieves the metadata for this entry.
     */
    getMetadata ( ) : any ;
    getName ( ) : string ;
    /**
     * Gets the parent directory.
     */
    getParent ( ) : any ;
    isDirectory ( ) : boolean ;
    isFile ( ) : boolean ;
    /**
     * Move this entry to a new location.
     * @param parent The new parent directory.
     * @param opt_newName The new name of the entry. If omitted, the entry retains its original name.
     */
    moveTo (parent : ಠ_ಠ.clutz.goog.fs.DirectoryEntry , opt_newName ? : string ) : any ;
    /**
     * Remove this entry.
     */
    remove ( ) : any ;
    /**
     * Get the URI for this file.
     * @param opt_mimeType The MIME type that will be served for the URI.
     */
    toUri (opt_mimeType ? : string ) : string ;
    /**
     * Get the URL for this file.
     * @param opt_mimeType The MIME type that will be served for the URL.
     */
    toUrl (opt_mimeType ? : string ) : string ;
    /**
     * Wrap an HTML5 entry object in an appropriate subclass instance.
     * @param entry The underlying Entry object.
     */
    wrapEntry (entry : Entry ) : ಠ_ಠ.clutz.goog.fs.Entry ;
  }
}
declare module 'goog:goog.fs.Entry' {
  import alias = ಠ_ಠ.clutz.goog.fs.Entry;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * Base class for concrete implementations of goog.fs.Entry.
   */
  class EntryImpl extends EntryImpl_Instance {
  }
  class EntryImpl_Instance implements ಠ_ಠ.clutz.goog.fs.Entry {
    private noStructuralTyping_: any;
    /**
     * Base class for concrete implementations of goog.fs.Entry.
     * @param fs The wrapped filesystem.
     * @param entry The underlying Entry object.
     */
    constructor (fs : ಠ_ಠ.clutz.goog.fs.FileSystem , entry : Entry ) ;
    copyTo (parent : ಠ_ಠ.clutz.goog.fs.DirectoryEntry , opt_newName ? : string ) : any ;
    getFileSystem ( ) : ಠ_ಠ.clutz.goog.fs.FileSystem ;
    getFullPath ( ) : string ;
    getLastModified ( ) : any ;
    getMetadata ( ) : any ;
    getName ( ) : string ;
    getParent ( ) : any ;
    isDirectory ( ) : boolean ;
    isFile ( ) : boolean ;
    moveTo (parent : ಠ_ಠ.clutz.goog.fs.DirectoryEntry , opt_newName ? : string ) : any ;
    remove ( ) : any ;
    toUri (opt_mimeType ? : string ) : string ;
    toUrl (opt_mimeType ? : string ) : string ;
    wrapEntry (entry : Entry ) : ಠ_ಠ.clutz.goog.fs.Entry ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.EntryImpl'): typeof ಠ_ಠ.clutz.goog.fs.EntryImpl;
}
declare module 'goog:goog.fs.EntryImpl' {
  import alias = ಠ_ಠ.clutz.goog.fs.EntryImpl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * A filesystem error. Since the filesystem API is asynchronous, stack traces
   * are less useful for identifying where errors come from, so this includes a
   * large amount of metadata in the message.
   */
  class Error extends Error_Instance {
  }
  class Error_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
    /**
     * A filesystem error. Since the filesystem API is asynchronous, stack traces
     * are less useful for identifying where errors come from, so this includes a
     * large amount of metadata in the message.
     * @param action The action being undertaken when the error was raised.
     */
    constructor (error : DOMError , action : string ) ;
    code : ಠ_ಠ.clutz.goog.fs.Error.ErrorCode ;
    name : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.fs.Error {
  type ErrorName = string ;
  var ErrorName : {
    ABORT : ErrorName ,
    ENCODING : ErrorName ,
    INVALID_MODIFICATION : ErrorName ,
    INVALID_STATE : ErrorName ,
    NOT_FOUND : ErrorName ,
    NOT_READABLE : ErrorName ,
    NO_MODIFICATION_ALLOWED : ErrorName ,
    PATH_EXISTS : ErrorName ,
    QUOTA_EXCEEDED : ErrorName ,
    SECURITY : ErrorName ,
    SYNTAX : ErrorName ,
    TYPE_MISMATCH : ErrorName ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.Error'): typeof ಠ_ಠ.clutz.goog.fs.Error;
}
declare module 'goog:goog.fs.Error' {
  import alias = ಠ_ಠ.clutz.goog.fs.Error;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs.Error {
  /**
   * Error codes for file errors.
   */
  type ErrorCode = number ;
  var ErrorCode : {
    ABORT : ErrorCode ,
    ENCODING : ErrorCode ,
    INVALID_MODIFICATION : ErrorCode ,
    INVALID_STATE : ErrorCode ,
    NOT_FOUND : ErrorCode ,
    NOT_READABLE : ErrorCode ,
    NO_MODIFICATION_ALLOWED : ErrorCode ,
    PATH_EXISTS : ErrorCode ,
    QUOTA_EXCEEDED : ErrorCode ,
    SECURITY : ErrorCode ,
    SYNTAX : ErrorCode ,
    TYPE_MISMATCH : ErrorCode ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.Error.ErrorCode'): typeof ಠ_ಠ.clutz.goog.fs.Error.ErrorCode;
}
declare module 'goog:goog.fs.Error.ErrorCode' {
  import alias = ಠ_ಠ.clutz.goog.fs.Error.ErrorCode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * A file in a local filesystem.
   */
  interface FileEntry extends ಠ_ಠ.clutz.goog.fs.Entry {
    /**
     * Create a writer for writing to the file.
     */
    createWriter ( ) : any ;
    /**
     * Get the file contents as a File blob.
     */
    file ( ) : any ;
  }
}
declare module 'goog:goog.fs.FileEntry' {
  import alias = ಠ_ಠ.clutz.goog.fs.FileEntry;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * A file in a local filesystem.
   *
   * This should not be instantiated directly. Instead, it should be accessed via
   * {@link goog.fs.DirectoryEntry#getFile}.
   */
  class FileEntryImpl extends FileEntryImpl_Instance {
  }
  class FileEntryImpl_Instance extends ಠ_ಠ.clutz.goog.fs.EntryImpl_Instance implements ಠ_ಠ.clutz.goog.fs.FileEntry {
    /**
     * A file in a local filesystem.
     *
     * This should not be instantiated directly. Instead, it should be accessed via
     * {@link goog.fs.DirectoryEntry#getFile}.
     * @param fs The wrapped filesystem.
     * @param file The underlying FileEntry object.
     */
    constructor (fs : ಠ_ಠ.clutz.goog.fs.FileSystem , file : FileEntry ) ;
    createWriter ( ) : any ;
    file ( ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.FileEntryImpl'): typeof ಠ_ಠ.clutz.goog.fs.FileEntryImpl;
}
declare module 'goog:goog.fs.FileEntryImpl' {
  import alias = ಠ_ಠ.clutz.goog.fs.FileEntryImpl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * An object for monitoring the reading of files. This emits ProgressEvents of
   * the types listed in {@link goog.fs.FileReader.EventType}.
   */
  class FileReader extends FileReader_Instance {
    /**
     * Reads a blob as an array buffer.
     * @param blob The blob to read.
     */
    static readAsArrayBuffer (blob : Blob ) : any ;
    /**
     * Reads a blob as a binary string.
     * @param blob The blob to read.
     */
    static readAsBinaryString (blob : Blob ) : any ;
    /**
     * Reads a blob as a data URL.
     * @param blob The blob to read.
     */
    static readAsDataUrl (blob : Blob ) : any ;
    /**
     * Reads a blob as text.
     * @param blob The blob to read.
     * @param opt_encoding The name of the encoding to use.
     */
    static readAsText (blob : Blob , opt_encoding ? : string ) : any ;
  }
  class FileReader_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Abort the reading of the file.
     */
    abort ( ) : void ;
    disposeInternal ( ) : void ;
    getError ( ) : ಠ_ಠ.clutz.goog.fs.Error | null ;
    getReadyState ( ) : ಠ_ಠ.clutz.goog.fs.FileReader.ReadyState ;
    getResult ( ) : any ;
    /**
     * Starts reading a blob as an array buffer.
     * @param blob The blob to read.
     */
    readAsArrayBuffer (blob : Blob ) : void ;
    /**
     * Starts reading a blob as a binary string.
     * @param blob The blob to read.
     */
    readAsBinaryString (blob : Blob ) : void ;
    /**
     * Starts reading a blob as a data URL.
     * @param blob The blob to read.
     */
    readAsDataUrl (blob : Blob ) : void ;
    /**
     * Starts reading a blob as text.
     * @param blob The blob to read.
     * @param opt_encoding The name of the encoding to use.
     */
    readAsText (blob : Blob , opt_encoding ? : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.FileReader'): typeof ಠ_ಠ.clutz.goog.fs.FileReader;
}
declare module 'goog:goog.fs.FileReader' {
  import alias = ಠ_ಠ.clutz.goog.fs.FileReader;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs.FileReader {
  /**
   * Events emitted by a FileReader.
   */
  type EventType = string ;
  var EventType : {
    ABORT : EventType ,
    ERROR : EventType ,
    LOAD : EventType ,
    LOAD_END : EventType ,
    LOAD_START : EventType ,
    PROGRESS : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.FileReader.EventType'): typeof ಠ_ಠ.clutz.goog.fs.FileReader.EventType;
}
declare module 'goog:goog.fs.FileReader.EventType' {
  import alias = ಠ_ಠ.clutz.goog.fs.FileReader.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs.FileReader {
  /**
   * Possible states for a FileReader.
   */
  type ReadyState = number ;
  var ReadyState : {
    DONE : ReadyState ,
    INIT : ReadyState ,
    LOADING : ReadyState ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.FileReader.ReadyState'): typeof ಠ_ಠ.clutz.goog.fs.FileReader.ReadyState;
}
declare module 'goog:goog.fs.FileReader.ReadyState' {
  import alias = ಠ_ಠ.clutz.goog.fs.FileReader.ReadyState;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * An object for monitoring the saving of files. This emits ProgressEvents of
   * the types listed in {@link goog.fs.FileSaver.EventType}.
   *
   * This should not be instantiated directly. Instead, its subclass
   * {@link goog.fs.FileWriter} should be accessed via
   * {@link goog.fs.FileEntry#createWriter}.
   */
  class FileSaver extends FileSaver_Instance {
  }
  class FileSaver_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * An object for monitoring the saving of files. This emits ProgressEvents of
     * the types listed in {@link goog.fs.FileSaver.EventType}.
     *
     * This should not be instantiated directly. Instead, its subclass
     * {@link goog.fs.FileWriter} should be accessed via
     * {@link goog.fs.FileEntry#createWriter}.
     * @param fileSaver The underlying FileSaver object.
     */
    constructor (fileSaver : FileSaver ) ;
    /**
     * Abort the writing of the file.
     */
    abort ( ) : void ;
    disposeInternal ( ) : void ;
    getError ( ) : ಠ_ಠ.clutz.goog.fs.Error | null ;
    getReadyState ( ) : ಠ_ಠ.clutz.goog.fs.FileSaver.ReadyState ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.FileSaver'): typeof ಠ_ಠ.clutz.goog.fs.FileSaver;
}
declare module 'goog:goog.fs.FileSaver' {
  import alias = ಠ_ಠ.clutz.goog.fs.FileSaver;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs.FileSaver {
  /**
   * Events emitted by a FileSaver.
   */
  type EventType = string ;
  var EventType : {
    ABORT : EventType ,
    ERROR : EventType ,
    PROGRESS : EventType ,
    WRITE : EventType ,
    WRITE_END : EventType ,
    WRITE_START : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.FileSaver.EventType'): typeof ಠ_ಠ.clutz.goog.fs.FileSaver.EventType;
}
declare module 'goog:goog.fs.FileSaver.EventType' {
  import alias = ಠ_ಠ.clutz.goog.fs.FileSaver.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs.FileSaver {
  /**
   * Possible states for a FileSaver.
   */
  type ReadyState = number ;
  var ReadyState : {
    DONE : ReadyState ,
    INIT : ReadyState ,
    WRITING : ReadyState ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.FileSaver.ReadyState'): typeof ಠ_ಠ.clutz.goog.fs.FileSaver.ReadyState;
}
declare module 'goog:goog.fs.FileSaver.ReadyState' {
  import alias = ಠ_ಠ.clutz.goog.fs.FileSaver.ReadyState;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * A local filesystem.
   */
  interface FileSystem {
    getName ( ) : string ;
    getRoot ( ) : ಠ_ಠ.clutz.goog.fs.DirectoryEntry ;
  }
}
declare module 'goog:goog.fs.FileSystem' {
  import alias = ಠ_ಠ.clutz.goog.fs.FileSystem;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * A local filesystem.
   *
   * This shouldn't be instantiated directly. Instead, it should be accessed via
   * {@link goog.fs.getTemporary} or {@link goog.fs.getPersistent}.
   */
  class FileSystemImpl extends FileSystemImpl_Instance {
  }
  class FileSystemImpl_Instance implements ಠ_ಠ.clutz.goog.fs.FileSystem {
    private noStructuralTyping_: any;
    /**
     * A local filesystem.
     *
     * This shouldn't be instantiated directly. Instead, it should be accessed via
     * {@link goog.fs.getTemporary} or {@link goog.fs.getPersistent}.
     * @param fs The underlying FileSystem object.
     */
    constructor (fs : FileSystem ) ;
    getBrowserFileSystem ( ) : FileSystem ;
    getName ( ) : string ;
    getRoot ( ) : ಠ_ಠ.clutz.goog.fs.DirectoryEntry ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.FileSystemImpl'): typeof ಠ_ಠ.clutz.goog.fs.FileSystemImpl;
}
declare module 'goog:goog.fs.FileSystemImpl' {
  import alias = ಠ_ಠ.clutz.goog.fs.FileSystemImpl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * An object for monitoring the saving of files, as well as other fine-grained
   * writing operations.
   *
   * This should not be instantiated directly. Instead, it should be accessed via
   * {@link goog.fs.FileEntry#createWriter}.
   */
  class FileWriter extends FileWriter_Instance {
  }
  class FileWriter_Instance extends ಠ_ಠ.clutz.goog.fs.FileSaver_Instance {
    /**
     * An object for monitoring the saving of files, as well as other fine-grained
     * writing operations.
     *
     * This should not be instantiated directly. Instead, it should be accessed via
     * {@link goog.fs.FileEntry#createWriter}.
     * @param writer The underlying FileWriter object.
     */
    constructor (writer : FileWriter ) ;
    getLength ( ) : number ;
    getPosition ( ) : number ;
    /**
     * Set the file position at which the next write will occur.
     * @param offset An absolute byte offset into the file.
     */
    seek (offset : number ) : void ;
    /**
     * Changes the length of the file to that specified.
     * @param size The new size of the file, in bytes.
     */
    truncate (size : number ) : void ;
    /**
     * Write data to the file.
     * @param blob The data to write.
     */
    write (blob : Blob ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.FileWriter'): typeof ಠ_ಠ.clutz.goog.fs.FileWriter;
}
declare module 'goog:goog.fs.FileWriter' {
  import alias = ಠ_ಠ.clutz.goog.fs.FileWriter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * A wrapper for the progress events emitted by the File APIs.
   */
  class ProgressEvent extends ProgressEvent_Instance {
  }
  class ProgressEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * A wrapper for the progress events emitted by the File APIs.
     * @param event The underlying event object.
     * @param target The file access object emitting the event.
     */
    constructor (event : ProgressEvent , target : Object ) ;
    getLoaded ( ) : number ;
    getTotal ( ) : number ;
    isLengthComputable ( ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.ProgressEvent'): typeof ಠ_ಠ.clutz.goog.fs.ProgressEvent;
}
declare module 'goog:goog.fs.ProgressEvent' {
  import alias = ಠ_ಠ.clutz.goog.fs.ProgressEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fs.url {
  type UrlObject_ = { createObjectURL : (a : Blob ) => string , revokeObjectURL : (a : string ) => undefined } ;
  /**
   * Checks whether this browser supports Object Urls. If not, calls to
   * createObjectUrl and revokeObjectUrl will result in an error.
   */
  function browserSupportsObjectUrls ( ) : boolean ;
  /**
   * Creates a blob URL for a blob object.
   * Throws an error if the browser does not support Object Urls.
   * @param blob The object for which to create the URL.
   */
  function createObjectUrl (blob : Blob ) : string ;
  /**
   * Revokes a URL created by {@link goog.fs.url.createObjectUrl}.
   * Throws an error if the browser does not support Object Urls.
   * @param url The URL to revoke.
   */
  function revokeObjectUrl (url : string ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fs.url'): typeof ಠ_ಠ.clutz.goog.fs.url;
}
declare module 'goog:goog.fs.url' {
  import alias = ಠ_ಠ.clutz.goog.fs.url;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.functions {
  var CACHE_RETURN_VALUE : boolean ;
  /**
   * Always returns false.
   */
  function FALSE ( ...a : any [] ) : boolean ;
  /**
   * Always returns NULL.
   */
  function NULL ( ...a : any [] ) : null ;
  /**
   * Always returns true.
   */
  function TRUE ( ...a : any [] ) : boolean ;
  /**
   * Creates a function that returns true if each of its components evaluates
   * to true. The components are evaluated in order, and the evaluation will be
   * short-circuited as soon as a function returns false.
   * For example, (goog.functions.and(f, g))(x) is equivalent to f(x) && g(x).
   * @param var_args A list of functions.
   */
  function and ( ...var_args : ( ( ( ...a : any [] ) => any ) | null | undefined ) [] ) : ( ...a : any [] ) => boolean ;
  /**
   * Gives a wrapper function that caches the return value of a parameterless
   * function when first called.
   *
   * When called for the first time, the given function is called and its
   * return value is cached (thus this is only appropriate for idempotent
   * functions).  Subsequent calls will return the cached return value. This
   * allows the evaluation of expensive functions to be delayed until first used.
   *
   * To cache the return values of functions with parameters, see goog.memoize.
   * @param fn A function to lazily evaluate.
   */
  function cacheReturnValue < T > (fn : ( ) => T ) : ( ) => T ;
  /**
   * Creates the composition of the functions passed in.
   * For example, (goog.functions.compose(f, g))(a) is equivalent to f(g(a)).
   * @param fn The final function.
   * @param var_args A list of functions.
   */
  function compose < T > (fn : ( ...a : any [] ) => T ,  ...var_args : ( ( ( ...a : any [] ) => any ) | null | undefined ) [] ) : ( ...a : any [] ) => T ;
  /**
   * Creates a function that always returns the same value.
   * @param retValue The value to return.
   */
  function constant < T > (retValue : T ) : ( ) => T ;
  /**
   * Generic factory function to construct an object given the constructor
   * and the arguments. Intended to be bound to create object factories.
   *
   * Example:
   *
   * var factory = goog.partial(goog.functions.create, Class);
   * @param constructor The constructor for the Object.
   * @param var_args The arguments to be passed to the constructor.
   */
  function create < T > (constructor : { new ( ...a : any [] ) : T } ,  ...var_args : any [] ) : T ;
  /**
   * Wraps a function to allow it to be called, at most, once for each sequence of
   * calls fired repeatedly so long as they are fired less than a specified
   * interval apart (in milliseconds). Whether it receives one signal or multiple,
   * it will always wait until a full interval has elapsed since the last signal
   * before performing the action, passing the arguments from the last call of the
   * debouncing decorator into the decorated function.
   *
   * This is particularly useful for bulking up repeated user actions (e.g. only
   * refreshing a view once a user finishes typing rather than updating with every
   * keystroke). For more stateful debouncing with support for pausing, resuming,
   * and canceling debounced actions, use {@code goog.async.Debouncer}.
   * @param f Function to call.
   * @param interval Interval over which to debounce. The function will only be called after the full interval has elapsed since the last call.
   * @param opt_scope Object in whose scope to call the function.
   */
  function debounce < SCOPE > (f : ( ...a : any [] ) => any , interval : number , opt_scope ? : SCOPE ) : ( ...a : any [] ) => undefined ;
  /**
   * Creates a function that returns whether its argument equals the given value.
   *
   * Example:
   * var key = goog.object.findKey(obj, goog.functions.equalTo('needle'));
   * @param value The value to compare to.
   * @param opt_useLooseComparison Whether to use a loose (==) comparison rather than a strict (===) one. Defaults to false.
   */
  function equalTo (value : any , opt_useLooseComparison ? : boolean ) : (a : any ) => boolean ;
  /**
   * Creates a function that always throws an error with the given message.
   * @param message The error message.
   */
  function error (message : string ) : ( ...a : any [] ) => any ;
  /**
   * Creates a function that throws the given object.
   * @param err An object to be thrown.
   */
  function fail (err : any ) : ( ...a : any [] ) => any ;
  /**
   * A simple function that returns the first argument of whatever is passed
   * into it.
   * @param opt_returnValue The single value that will be returned.
   * @param var_args Optional trailing arguments. These are ignored.
   */
  function identity < T > (opt_returnValue ? : T ,  ...var_args : any [] ) : T ;
  /**
   * Given a function, create a function that keeps opt_numArgs arguments and
   * silently discards all additional arguments.
   * @param f The original function.
   * @param opt_numArgs The number of arguments to keep. Defaults to 0.
   */
  function lock (f : ( ( ...a : any [] ) => any ) | null , opt_numArgs ? : number ) : ( ...a : any [] ) => any ;
  /**
   * Creates a function that returns the Boolean opposite of a provided function.
   * For example, (goog.functions.not(f))(x) is equivalent to !f(x).
   * @param f The original function.
   */
  function not (f : ( ...a : any [] ) => any ) : ( ...a : any [] ) => boolean ;
  /**
   * Creates a function that returns its nth argument.
   * @param n The position of the return argument.
   */
  function nth (n : number ) : ( ...a : any [] ) => any ;
  /**
   * Wraps a function to allow it to be called, at most, once. All
   * additional calls are no-ops.
   *
   * This is particularly useful for initialization functions
   * that should be called, at most, once.
   * @param f Function to call.
   */
  function once (f : ( ) => any ) : ( ) => undefined ;
  /**
   * Creates a function that returns true if any of its components evaluates
   * to true. The components are evaluated in order, and the evaluation will be
   * short-circuited as soon as a function returns true.
   * For example, (goog.functions.or(f, g))(x) is equivalent to f(x) || g(x).
   * @param var_args A list of functions.
   */
  function or ( ...var_args : ( ( ( ...a : any [] ) => any ) | null | undefined ) [] ) : ( ...a : any [] ) => boolean ;
  /**
   * Like goog.partial(), except that arguments are added after arguments to the
   * returned function.
   *
   * Usage:
   * function f(arg1, arg2, arg3, arg4) { ... }
   * var g = goog.functions.partialRight(f, arg3, arg4);
   * g(arg1, arg2);
   * @param fn A function to partially apply.
   * @param var_args Additional arguments that are partially applied to fn at the end.
   */
  function partialRight (fn : ( ...a : any [] ) => any ,  ...var_args : any [] ) : ( ...a : any [] ) => any ;
  /**
   * Creates a function that calls the functions passed in in sequence, and
   * returns the value of the last function. For example,
   * (goog.functions.sequence(f, g))(x) is equivalent to f(x),g(x).
   * @param var_args A list of functions.
   */
  function sequence ( ...var_args : ( ( ( ...a : any [] ) => any ) | null | undefined ) [] ) : ( ...a : any [] ) => any ;
  /**
   * Wraps a function to allow it to be called, at most, once per interval
   * (specified in milliseconds). If it is called multiple times while it is
   * waiting, it will only perform the action once at the end of the interval,
   * passing the arguments from the last call of the throttling decorator into the
   * decorated function.
   *
   * This is particularly useful for limiting repeated user requests (e.g.
   * preventing a user from spamming a server with frequent view refreshes). For
   * more stateful throttling with support for pausing, resuming, and canceling
   * throttled actions, use {@code goog.async.Throttle}.
   * @param f Function to call.
   * @param interval Interval over which to throttle. The function can only be called once per interval.
   * @param opt_scope Object in whose scope to call the function.
   */
  function throttle < SCOPE > (f : ( ...a : any [] ) => any , interval : number , opt_scope ? : SCOPE ) : ( ...a : any [] ) => undefined ;
  /**
   * Given a function, create a new function that swallows its return value
   * and replaces it with a new one.
   * @param f A function.
   * @param retValue A new return value.
   */
  function withReturnValue < T > (f : ( ( ...a : any [] ) => any ) | null , retValue : T ) : ( ...a : any [] ) => T ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.functions'): typeof ಠ_ಠ.clutz.goog.functions;
}
declare module 'goog:goog.functions' {
  import alias = ಠ_ಠ.clutz.goog.functions;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
}
declare module 'goog:goog.fx' {
  import alias = ಠ_ಠ.clutz.goog.fx;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Abstract class that provides reusable functionality for implementing drag
   * and drop functionality.
   *
   * This class also allows clients to define their own subtargeting function
   * so that drop areas can have finer granularity then a singe element. This is
   * accomplished by using a client provided function to map from element and
   * coordinates to a subregion id.
   *
   * This class can also be made aware of scrollable containers that contain
   * drop targets by calling addScrollableContainer. This will cause dnd to
   * take changing scroll positions into account while a drag is occurring.
   */
  class AbstractDragDrop extends AbstractDragDrop_Instance {
    /**
     * Constant for distance threshold, in pixels, an element has to be moved to
     * initiate a drag operation.
     */
    static initDragDistanceThreshold : number ;
  }
  class AbstractDragDrop_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * List of items that makes up the drag source or drop target.
     */
    items_ : ( ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) [] | null ;
    /**
     * Add item to drag object.
     * @param element Dom Node, or string representation of node id, to be used as drag source/drop target.
     */
    addItem (a : Element | null | string ) : any ;
    /**
     * Makes drag and drop aware of a target container that could scroll mid drag.
     * @param element The scroll container.
     */
    addScrollableContainer (element : Element | null ) : void ;
    /**
     * Associate drop target with drag element.
     * @param target Target to add.
     */
    addTarget (target : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop | null ) : void ;
    /**
     * Called after a drag operation has finished.
     * @param opt_dropTarget Target for successful drop.
     */
    afterEndDrag (opt_dropTarget ? : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) : void ;
    /**
     * Creates an element for the item being dragged.
     * @param sourceEl Drag source element.
     */
    createDragElement (sourceEl : Element | null ) : Element | null ;
    /**
     * Generates an element to follow the cursor during dragging, given a drag
     * source element.  The default behavior is simply to clone the source element,
     * but this may be overridden in subclasses.  This method is called by
     * {@code createDragElement()} before the drag class is added.
     * @param sourceEl Drag source element.
     */
    createDragElementInternal (sourceEl : Element | null ) : Element ;
    /**
     * Creates the Dragger for the drag element.
     * @param sourceEl Drag source element.
     * @param el the element created by createDragElement().
     * @param event Mouse down event for start of drag.
     */
    createDraggerFor (sourceEl : Element | null , el : Element | null , event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : ಠ_ಠ.clutz.goog.fx.Dragger ;
    /**
     * Called once a drag operation has finished. Removes event listeners and
     * elements.
     */
    disposeDrag ( ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Called when removing an item. Removes event listeners and classes.
     * @param item Item to dispose.
     */
    disposeItem (item : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) : void ;
    /**
     * Event handler that's used to stop drag. Fires a drop event if over a valid
     * target.
     * @param event Drag event.
     */
    endDrag (event : ಠ_ಠ.clutz.goog.fx.DragEvent | null ) : void ;
    /**
     * Returns the position for the drag element.
     * @param el Drag source element.
     * @param dragEl The dragged element created by createDragElement().
     * @param event Mouse down event for start of drag.
     */
    getDragElementPosition (el : Element | null , dragEl : Element | null , event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Returns the dragger object.
     */
    getDragger ( ) : ಠ_ಠ.clutz.goog.fx.Dragger | null ;
    /**
     * Calculates the position and dimension of a draggable element.
     * @param item Item that's being dragged.
     * @param element The element to calculate the box.
     */
    getElementBox (item : ಠ_ಠ.clutz.goog.fx.DragDropItem | null , element : Element | null ) : ಠ_ಠ.clutz.goog.math.Box ;
    /**
     * Get the position of a drag event.
     * @param event Drag event.
     */
    getEventPosition (event : ಠ_ಠ.clutz.goog.fx.DragEvent | null ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Gets the scroll distance as a coordinate object, using
     * the window of the current drag element's dom.
     */
    getScrollPos ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Initialize drag and drop functionality for sources/targets already added.
     * Sources/targets added after init has been called will initialize themselves
     * one by one.
     */
    init ( ) : void ;
    /**
     * Initializes a single item.
     * @param item Item to initialize.
     */
    initItem (item : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) : void ;
    /**
     * Whether the control has been initialized.
     */
    isInitialized ( ) : boolean ;
    /**
     * Checks whatever a given point is inside a given box.
     * @param x Cursor position on the x-axis.
     * @param y Cursor position on the y-axis.
     * @param box Box to check position against.
     */
    isInside (x : number , y : number , box : ಠ_ಠ.clutz.goog.math.Box | null ) : boolean ;
    /**
     * Starts a drag event for an item if the mouse button stays pressed and the
     * cursor moves a few pixels. Allows dragging of items without first having to
     * register them with addItem.
     * @param event Mouse down event.
     * @param item Item that's being dragged.
     */
    maybeStartDrag (event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null , item : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) : void ;
    /**
     * Recalculates the geometry of this source's drag targets.  Call this
     * if the position or visibility of a drag target has changed during
     * a drag, or if targets are added or removed.
     *
     * TODO(user): this is an expensive operation;  more efficient APIs
     * may be necessary.
     */
    recalculateDragTargets ( ) : void ;
    /**
     * Recalculates the current scroll positions of scrollable containers and
     * allocates targets. Call this if the position of a container changed or if
     * targets are added or removed.
     */
    recalculateScrollableContainers ( ) : void ;
    /**
     * Removes all scrollable containers.
     */
    removeAllScrollableContainers ( ) : void ;
    /**
     * Removes all items.
     */
    removeItems ( ) : void ;
    /**
     * Set class to add to source elements being dragged.
     * @param className Class to be added.  Must be a single, valid classname.
     */
    setDragClass (className : string ) : void ;
    /**
     * Sets the SCROLL event target to make drag element follow scrolling.
     * @param scrollTarget The element that dispatches SCROLL events.
     */
    setScrollTarget (scrollTarget : EventTarget | null ) : void ;
    /**
     * Set class to add to source elements.
     * @param className Class to be added.  Must be a single, valid classname.
     */
    setSourceClass (className : string ) : void ;
    /**
     * Set a function that provides subtargets. A subtargeting function
     * returns an arbitrary identifier for each subtarget of an element.
     * DnD code will generate additional drag over / out events when
     * switching from subtarget to subtarget. This is useful for instance
     * if you are interested if you are on the top half or the bottom half
     * of the element.
     * The provided function will be given the DragDropItem, box, x, y
     * box is the current window coordinates occupied by element
     * x, y is the mouse position in window coordinates
     * @param f The new subtarget function.
     */
    setSubtargetFunction (f : ( ( ...a : any [] ) => any ) | null ) : void ;
    /**
     * Set class to add to target elements.
     * @param className Class to be added.  Must be a single, valid classname.
     */
    setTargetClass (className : string ) : void ;
    /**
     * Event handler that's used to start drag.
     * @param event Mouse move event.
     * @param item Item that's being dragged.
     */
    startDrag (event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null , item : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.AbstractDragDrop'): typeof ಠ_ಠ.clutz.goog.fx.AbstractDragDrop;
}
declare module 'goog:goog.fx.AbstractDragDrop' {
  import alias = ಠ_ಠ.clutz.goog.fx.AbstractDragDrop;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.AbstractDragDrop.EventType {
  var DRAG : string ;
  var DRAGEND : string ;
  var DRAGOUT : string ;
  var DRAGOVER : string ;
  var DRAGSTART : string ;
  var DROP : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.AbstractDragDrop.EventType'): typeof ಠ_ಠ.clutz.goog.fx.AbstractDragDrop.EventType;
}
declare module 'goog:goog.fx.AbstractDragDrop.EventType' {
  import alias = ಠ_ಠ.clutz.goog.fx.AbstractDragDrop.EventType;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Constructor for an animation object.
   */
  class Animation extends Animation_Instance {
    static TIMEOUT : number ;
    static setAnimationWindow (animationWindow : Window | null ) : void ;
  }
  class Animation_Instance extends ಠ_ಠ.clutz.goog.fx.TransitionBase_Instance implements ಠ_ಠ.clutz.goog.fx.anim.Animated , ಠ_ಠ.clutz.goog.fx.Transition {
    /**
     * Constructor for an animation object.
     * @param start Array for start coordinates.
     * @param end Array for end coordinates.
     * @param duration Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (start : number [] | null , end : number [] | null , duration : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    /**
     * Current coordinate for animation.
     */
    coords : number [] | null ;
    /**
     * Duration of animation in milliseconds.
     */
    duration : number ;
    /**
     * End point.
     */
    endPoint : number [] | null ;
    endTime : number | null ;
    /**
     * Timestamp for when last frame was run.
     */
    lastFrame : number | null ;
    /**
     * Percent of the way through the animation.
     */
    progress : number ;
    /**
     * Start point.
     */
    startPoint : number [] | null ;
    startTime : number | null ;
    /**
     * Handles the actual iteration of the animation in a timeout
     * @param now The current time.
     */
    cycle (now : number ) : void ;
    /**
     * Stops an animation, fires a 'destroy' event and then removes all the event
     * handlers to clean up memory.
     */
    destroy ( ) : void ;
    dispatchAnimationEvent (type : string ) : void ;
    /**
     * Disposes of the animation.  Stops an animation, fires a 'destroy' event and
     * then removes all the event handlers to clean up memory.
     */
    disposeInternal ( ) : void ;
    /**
     * Sets whether the animation should use "right" rather than "left" to position
     * elements.  This is a temporary flag to allow clients to transition
     * to the new component at their convenience.  At some point "right" will be
     * used for RTL elements by default.
     * @param useRightPositioningForRtl True if "right" should be used for positioning, false if "left" should be used for positioning.
     */
    enableRightPositioningForRtl (useRightPositioningForRtl : boolean ) : void ;
    getProgress ( ) : number ;
    /**
     * Whether the animation should use "right" rather than "left" to position
     * elements.  This is a temporary flag to allow clients to transition
     * to the new component at their convenience.  At some point "right" will be
     * used for RTL elements by default.
     */
    isRightPositioningForRtlEnabled ( ) : boolean ;
    /**
     * Dispatches the ANIMATE event. Sub classes should override this instead
     * of listening to the event.
     */
    onAnimate ( ) : void ;
    onAnimationFrame (now : number ) : any ;
    /**
     * Dispatches the DESTROY event. Sub classes should override this instead
     * of listening to the event.
     */
    onDestroy ( ) : void ;
    /**
     * Pauses the animation (iff it's playing).
     */
    pause ( ) : void ;
    /**
     * Starts or resumes an animation.
     * @param opt_restart Whether to restart the animation from the beginning if it has been paused.
     */
    play (opt_restart ? : boolean ) : boolean ;
    /**
     * Sets the progress of the animation.
     * @param progress The new progress of the animation.
     */
    setProgress (progress : number ) : void ;
    /**
     * Stops the animation.
     * @param opt_gotoEnd If true the animation will move to the end coords.
     */
    stop (opt_gotoEnd ? : boolean ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.Animation'): typeof ಠ_ಠ.clutz.goog.fx.Animation;
}
declare module 'goog:goog.fx.Animation' {
  import alias = ಠ_ಠ.clutz.goog.fx.Animation;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.Animation {
  /**
   * Events fired by the animation.
   */
  type EventType = string ;
  var EventType : {
    ANIMATE : EventType ,
    BEGIN : EventType ,
    DESTROY : EventType ,
    END : EventType ,
    FINISH : EventType ,
    PAUSE : EventType ,
    PLAY : EventType ,
    RESUME : EventType ,
    STOP : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.Animation.EventType'): typeof ಠ_ಠ.clutz.goog.fx.Animation.EventType;
}
declare module 'goog:goog.fx.Animation.EventType' {
  import alias = ಠ_ಠ.clutz.goog.fx.Animation.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.Animation {
  /**
   * Enum for the possible states of an animation.
   */
  type State = number ;
  var State : {
    PAUSED : State ,
    PLAYING : State ,
    STOPPED : State ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.Animation.State'): typeof ಠ_ಠ.clutz.goog.fx.Animation.State;
}
declare module 'goog:goog.fx.Animation.State' {
  import alias = ಠ_ಠ.clutz.goog.fx.Animation.State;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Class for an animation event object.
   */
  class AnimationEvent extends AnimationEvent_Instance {
  }
  class AnimationEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * Class for an animation event object.
     * @param type Event type.
     * @param anim An animation object.
     */
    constructor (type : string , anim : ಠ_ಠ.clutz.goog.fx.Animation | null ) ;
    /**
     * The animation object.
     */
    anim : ಠ_ಠ.clutz.goog.fx.Animation | null ;
    /**
     * The current coordinates.
     */
    coords : number [] | null ;
    /**
     * The current duration.
     */
    duration : number ;
    /**
     * Frames per second so far.
     */
    fps : number ;
    /**
     * The current progress.
     */
    progress : number ;
    /**
     * The state of the animation.
     */
    state : number ;
    /**
     * The x coordinate.
     */
    x : number ;
    /**
     * The y coordinate.
     */
    y : number ;
    /**
     * The z coordinate.
     */
    z : number ;
    /**
     * Returns the coordinates as integers (rounded to nearest integer).
     */
    coordsAsInts ( ) : number [] ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.AnimationEvent'): typeof ಠ_ಠ.clutz.goog.fx.AnimationEvent;
}
declare module 'goog:goog.fx.AnimationEvent' {
  import alias = ಠ_ಠ.clutz.goog.fx.AnimationEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Constructor for AnimationParallelQueue object.
   */
  class AnimationParallelQueue extends AnimationParallelQueue_Instance {
  }
  class AnimationParallelQueue_Instance extends ಠ_ಠ.clutz.goog.fx.AnimationQueue_Instance {
    endTime : number | null ;
    startTime : number | null ;
    onAnimationFinish (e : ಠ_ಠ.clutz.goog.events.Event | null ) : any ;
    pause ( ) : void ;
    play (opt_restart ? : boolean ) : boolean ;
    stop (opt_gotoEnd ? : boolean ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.AnimationParallelQueue'): typeof ಠ_ಠ.clutz.goog.fx.AnimationParallelQueue;
}
declare module 'goog:goog.fx.AnimationParallelQueue' {
  import alias = ಠ_ಠ.clutz.goog.fx.AnimationParallelQueue;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Constructor for AnimationQueue object.
   */
  class AnimationQueue extends AnimationQueue_Instance {
  }
  class AnimationQueue_Instance extends ಠ_ಠ.clutz.goog.fx.TransitionBase_Instance {
    /**
     * An array holding all animations in the queue.
     */
    queue : ( ಠ_ಠ.clutz.goog.fx.TransitionBase | null ) [] | null ;
    /**
     * Pushes an Animation to the end of the queue.
     * @param animation The animation to add to the queue.
     */
    add (animation : ಠ_ಠ.clutz.goog.fx.TransitionBase | null ) : void ;
    /**
     * Disposes of the animations.
     */
    disposeInternal ( ) : void ;
    /**
     * Handles the event that an animation has finished.
     * @param e The finishing event.
     */
    onAnimationFinish (a : ಠ_ಠ.clutz.goog.events.Event | null ) : any ;
    /**
     * Removes an Animation from the queue.
     * @param animation The animation to remove.
     */
    remove (animation : ಠ_ಠ.clutz.goog.fx.Animation | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.AnimationQueue'): typeof ಠ_ಠ.clutz.goog.fx.AnimationQueue;
}
declare module 'goog:goog.fx.AnimationQueue' {
  import alias = ಠ_ಠ.clutz.goog.fx.AnimationQueue;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Constructor for AnimationSerialQueue object.
   */
  class AnimationSerialQueue extends AnimationSerialQueue_Instance {
  }
  class AnimationSerialQueue_Instance extends ಠ_ಠ.clutz.goog.fx.AnimationQueue_Instance {
    endTime : number | null ;
    startTime : number | null ;
    onAnimationFinish (e : ಠ_ಠ.clutz.goog.events.Event | null ) : any ;
    pause ( ) : void ;
    play (opt_restart ? : boolean ) : boolean ;
    stop (opt_gotoEnd ? : boolean ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.AnimationSerialQueue'): typeof ಠ_ಠ.clutz.goog.fx.AnimationSerialQueue;
}
declare module 'goog:goog.fx.AnimationSerialQueue' {
  import alias = ಠ_ಠ.clutz.goog.fx.AnimationSerialQueue;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * This animation class is used to animate a CSS sprite (moving a background
   * image).  This moves through a series of images in a single image sprite. By
   * default, the animation loops when done.  Looping can be disabled by setting
   * {@code opt_disableLoop} and results in the animation stopping on the last
   * image in the image sprite.  You should set up the {@code background-image}
   * and size in a CSS rule for the relevant element.
   */
  class CssSpriteAnimation extends CssSpriteAnimation_Instance {
  }
  class CssSpriteAnimation_Instance extends ಠ_ಠ.clutz.goog.fx.Animation_Instance {
    /**
     * This animation class is used to animate a CSS sprite (moving a background
     * image).  This moves through a series of images in a single image sprite. By
     * default, the animation loops when done.  Looping can be disabled by setting
     * {@code opt_disableLoop} and results in the animation stopping on the last
     * image in the image sprite.  You should set up the {@code background-image}
     * and size in a CSS rule for the relevant element.
     * @param element The HTML element to animate the background for.
     * @param size The size of one image in the image sprite.
     * @param box The box describing the layout of the sprites to use in the large image.  The sprites can be position horizontally or vertically and using a box here allows the implementation to know which way to go.
     * @param time The duration in milliseconds for one iteration of the animation.  For example, if the sprite contains 4 images and the duration is set to 400ms then each sprite will be displayed for 100ms.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.  This can be used to make certain frames be shown for a longer period of time.
     * @param opt_disableLoop Whether the animation should be halted after a single loop of the images in the sprite.
     */
    constructor (element : Element | null , size : ಠ_ಠ.clutz.goog.math.Size | null , box : ಠ_ಠ.clutz.goog.math.Box | null , time : number , opt_acc ? : (a : number ) => number , opt_disableLoop ? : boolean ) ;
    /**
     * Clears the background position style set directly on the element
     * by the animation. Allows to apply CSS styling for background position on the
     * same element when the sprite animation is not runniing.
     */
    clearSpritePosition ( ) : void ;
    disposeInternal ( ) : void ;
    onAnimate ( ) : void ;
    onFinish ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.CssSpriteAnimation'): typeof ಠ_ಠ.clutz.goog.fx.CssSpriteAnimation;
}
declare module 'goog:goog.fx.CssSpriteAnimation' {
  import alias = ಠ_ಠ.clutz.goog.fx.CssSpriteAnimation;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Drag/drop implementation for creating drag sources/drop targets consisting of
   * a single HTML Element.
   */
  class DragDrop extends DragDrop_Instance {
  }
  class DragDrop_Instance extends ಠ_ಠ.clutz.goog.fx.AbstractDragDrop_Instance {
    /**
     * Drag/drop implementation for creating drag sources/drop targets consisting of
     * a single HTML Element.
     * @param element Dom Node, or string representation of node id, to be used as drag source/drop target.
     * @param opt_data Data associated with the source/target.
     */
    constructor (element : Element | null | string , opt_data ? : Object | null ) ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.DragDrop'): typeof ಠ_ಠ.clutz.goog.fx.DragDrop;
}
declare module 'goog:goog.fx.DragDrop' {
  import alias = ಠ_ಠ.clutz.goog.fx.DragDrop;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Object representing a drag and drop event.
   */
  class DragDropEvent extends DragDropEvent_Instance {
  }
  class DragDropEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * Object representing a drag and drop event.
     * @param type Event type.
     * @param source Source drag drop object.
     * @param sourceItem Source item.
     * @param opt_target Target drag drop object.
     * @param opt_targetItem Target item.
     * @param opt_targetElement Target element.
     * @param opt_clientX X-Position relative to the screen.
     * @param opt_clientY Y-Position relative to the screen.
     * @param opt_x X-Position relative to the viewport.
     * @param opt_y Y-Position relative to the viewport.
     * @param opt_subtarget The currently active subtarget.
     */
    constructor (type : string , source : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop | null , sourceItem : ಠ_ಠ.clutz.goog.fx.DragDropItem | null , opt_target ? : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop | null , opt_targetItem ? : ಠ_ಠ.clutz.goog.fx.DragDropItem | null , opt_targetElement ? : Element | null , opt_clientX ? : number , opt_clientY ? : number , opt_x ? : number , opt_y ? : number , opt_subtarget ? : Object | null ) ;
    /**
     * X-Position relative to the screen.
     */
    clientX : number | undefined ;
    /**
     * Y-Position relative to the screen.
     */
    clientY : number | undefined ;
    /**
     * Reference to the source goog.fx.AbstractDragDrop object.
     */
    dragSource : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop | null ;
    /**
     * Reference to the source goog.fx.DragDropItem object.
     */
    dragSourceItem : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ;
    /**
     * Reference to the target goog.fx.AbstractDragDrop object.
     */
    dropTarget : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop | null | undefined ;
    /**
     * The actual element of the drop target that is the target for this event.
     */
    dropTargetElement : Element | null | undefined ;
    /**
     * Reference to the target goog.fx.DragDropItem object.
     */
    dropTargetItem : ಠ_ಠ.clutz.goog.fx.DragDropItem | null | undefined ;
    /**
     * The subtarget that is currently active if a subtargeting function
     * is supplied.
     */
    subtarget : Object | null | undefined ;
    /**
     * X-Position relative to the viewport.
     */
    viewportX : number | undefined ;
    /**
     * Y-Position relative to the viewport.
     */
    viewportY : number | undefined ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.DragDropEvent'): typeof ಠ_ಠ.clutz.goog.fx.DragDropEvent;
}
declare module 'goog:goog.fx.DragDropEvent' {
  import alias = ಠ_ಠ.clutz.goog.fx.DragDropEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Drag/drop implementation for creating drag sources/drop targets consisting of
   * multiple HTML Elements (items). All items share the same drop target(s) but
   * can be dragged individually.
   */
  class DragDropGroup extends DragDropGroup_Instance {
  }
  class DragDropGroup_Instance extends ಠ_ಠ.clutz.goog.fx.AbstractDragDrop_Instance {
    /**
     * Add DragDropItem to drag object.
     * @param item DragDropItem being added to the drag object.
     */
    addDragDropItem (item : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) : void ;
    /**
     * Add item to drag object.
     * @param element Dom Node, or string representation of node id, to be used as drag source/drop target.
     * @param opt_data Data associated with the source/target.
     */
    addItem (element : Element | null | string , opt_data ? : Object | null ) : any ;
    /**
     * Remove item from drag object.
     * @param element Dom Node, or string representation of node id, that was previously added with addItem().
     */
    removeItem (element : Element | null | string ) : void ;
    /**
     * Marks the supplied list of items as selected. A drag operation for any of the
     * selected items will affect all of them.
     * @param list List of items to select or null to clear selection. TODO(eae): Not yet implemented.
     */
    setSelection (list : ( ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) [] | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.DragDropGroup'): typeof ಠ_ಠ.clutz.goog.fx.DragDropGroup;
}
declare module 'goog:goog.fx.DragDropGroup' {
  import alias = ಠ_ಠ.clutz.goog.fx.DragDropGroup;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Class representing a source or target element for drag and drop operations.
   */
  class DragDropItem extends DragDropItem_Instance {
  }
  class DragDropItem_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Class representing a source or target element for drag and drop operations.
     * @param element Dom Node, or string representation of node id, to be used as drag source/drop target.
     * @param opt_data Data associated with the source/target.
     */
    constructor (element : Element | null | string , opt_data ? : Object | null ) ;
    /**
     * Data associated with element.
     */
    data : Object | null | undefined ;
    /**
     * Reference to drag source/target element
     */
    element : Element | null ;
    /**
     * Gets the element that is currently being dragged.
     */
    getCurrentDragElement ( ) : Element | null ;
    /**
     * Get the data associated with the source/target.
     */
    getData ( ) : Object | null | undefined ;
    /**
     * Gets the element that is actually draggable given that the given target was
     * attempted to be dragged. This should be overriden when the element that was
     * given actually contains many items that can be dragged. From the target, you
     * can determine what element should actually be dragged.
     * @param target The target that was attempted to be dragged.
     */
    getDraggableElement (target : Element | null ) : Element | null ;
    /**
     * Gets all the elements of this item that are potentially draggable/
     */
    getDraggableElements ( ) : ( Element | null ) [] ;
    /**
     * Sets the dragdrop to which this item belongs.
     * @param parent The parent dragdrop.
     */
    setParent (parent : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.DragDropItem'): typeof ಠ_ಠ.clutz.goog.fx.DragDropItem;
}
declare module 'goog:goog.fx.DragDropItem' {
  import alias = ಠ_ಠ.clutz.goog.fx.DragDropItem;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Object representing a drag event
   */
  class DragEvent extends DragEvent_Instance {
  }
  class DragEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * Object representing a drag event
     * @param type Event type.
     * @param dragobj Drag object initiating event.
     * @param clientX X-coordinate relative to the viewport.
     * @param clientY Y-coordinate relative to the viewport.
     * @param browserEvent The closure object representing the browser event that caused this drag event.
     * @param opt_actX Optional actual x for drag if it has been limited.
     * @param opt_actY Optional actual y for drag if it has been limited.
     * @param opt_dragCanceled Whether the drag has been canceled.
     */
    constructor (type : string , dragobj : ಠ_ಠ.clutz.goog.fx.Dragger | null , clientX : number , clientY : number , browserEvent : ಠ_ಠ.clutz.goog.events.BrowserEvent | null , opt_actX ? : number , opt_actY ? : number , opt_dragCanceled ? : boolean ) ;
    /**
     * The closure object representing the browser event that caused this drag
     * event.
     */
    browserEvent : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ;
    /**
     * X-coordinate relative to the viewport
     */
    clientX : number ;
    /**
     * Y-coordinate relative to the viewport
     */
    clientY : number ;
    /**
     * Whether drag was canceled with this event. Used to differentiate between
     * a legitimate drag END that can result in an action and a drag END which is
     * a result of a drag cancelation. For now it can happen 1) with drag END
     * event on FireFox when user drags the mouse out of the window, 2) with
     * drag END event on IE7 which is generated on MOUSEMOVE event when user
     * moves the mouse into the document after the mouse button has been
     * released, 3) when TOUCHCANCEL is raised instead of TOUCHEND (on touch
     * events).
     */
    dragCanceled : boolean ;
    /**
     * Reference to the drag object for this event
     */
    dragger : ಠ_ಠ.clutz.goog.fx.Dragger | null ;
    /**
     * The real x-position of the drag if it has been limited
     */
    left : number ;
    /**
     * The real y-position of the drag if it has been limited
     */
    top : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.DragEvent'): typeof ಠ_ಠ.clutz.goog.fx.DragEvent;
}
declare module 'goog:goog.fx.DragEvent' {
  import alias = ಠ_ಠ.clutz.goog.fx.DragEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Enum to indicate the direction that a drag list grows.
   */
  type DragListDirection = number ;
  var DragListDirection : {
    DOWN : DragListDirection ,
    LEFT : DragListDirection ,
    LEFT_2D : DragListDirection ,
    RIGHT : DragListDirection ,
    RIGHT_2D : DragListDirection ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.DragListDirection'): typeof ಠ_ಠ.clutz.goog.fx.DragListDirection;
}
declare module 'goog:goog.fx.DragListDirection' {
  import alias = ಠ_ಠ.clutz.goog.fx.DragListDirection;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * A class representing a group of one or more "drag lists" with items that can
   * be dragged within them and between them.
   *
   * Example usage:
   * var dragListGroup = new goog.fx.DragListGroup();
   * dragListGroup.setDragItemHandleHoverClass(className1, className2);
   * dragListGroup.setDraggerElClass(className3);
   * dragListGroup.addDragList(vertList, goog.fx.DragListDirection.DOWN);
   * dragListGroup.addDragList(horizList, goog.fx.DragListDirection.RIGHT);
   * dragListGroup.init();
   */
  class DragListGroup extends DragListGroup_Instance {
  }
  class DragListGroup_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Adds a drag list to this DragListGroup.
     * All calls to this method must happen before the call to init().
     * Remember that all child nodes (except text nodes) will be made draggable to
     * any other drag list in this group.
     * @param dragListElement Must be a container for a list of items that should all be made draggable.
     * @param growthDirection The direction that this drag list grows in (i.e. if an item is appended to the DOM, the list's bounding box expands in this direction).
     * @param opt_unused Unused argument.
     * @param opt_dragHoverClass CSS class to apply to this drag list when the draggerEl hovers over it during a drag action.  If present, must be a single, valid classname (not a string of space-separated classnames).
     */
    addDragList (dragListElement : Element | null , growthDirection : ಠ_ಠ.clutz.goog.fx.DragListDirection , opt_unused ? : boolean , opt_dragHoverClass ? : string ) : void ;
    /**
     * Adds a single item to the given drag list and sets up the drag listeners for
     * it.
     * If opt_index is specified the item is inserted at this index, otherwise the
     * item is added as the last child of the list.
     * @param list The drag list where to add item to.
     * @param item The new element to add.
     * @param opt_index Index where to insert the item in the list. If not specified item is inserted as the last child of list.
     */
    addItemToDragList (list : Element , item : Element , opt_index ? : number ) : void ;
    /**
     * Generates an element to follow the cursor during dragging, given a drag
     * source element.  The default behavior is simply to clone the source element,
     * but this may be overridden in subclasses.  This method is called by
     * {@code createDragElement()} before the drag class is added.
     * @param sourceEl Drag source element.
     */
    createDragElementInternal (sourceEl : Element | null ) : Element ;
    disposeInternal ( ) : void ;
    getHysteresis ( ) : number ;
    /**
     * Performs the initial setup to make all items in all lists draggable.
     */
    init ( ) : void ;
    /**
     * Inserts the currently dragged item in its new place.
     *
     * This method is used for insertion only when updateWhileDragging_ is false
     * (otherwise there is no need for that). In the basic implementation
     * the element is inserted before the currently hovered over item (this can
     * be changed by overriding the method in subclasses).
     */
    insertCurrHoverItem ( ) : void ;
    /**
     * Listens for drag events on the given drag item. This method is currently used
     * to initialize drag items.
     * @param dragItem the element to initialize. This element has to be in one of the drag lists.
     */
    listenForDragEvents (dragItem : Element | null ) : void ;
    /**
     * Caches the heights of each drag list and drag item, except for the current
     * drag item.
     */
    recacheListAndItemBounds ( ) : void ;
    /**
     * Sets a user-supplied CSS class to add to the current drag item (during a
     * drag action).
     *
     * If not set, the default behavior adds visibility:hidden to the current drag
     * item so that it is a block of empty space in the hover drag list (if any).
     * If this class is set by the user, then the default behavior does not happen
     * (unless, of course, the class also contains visibility:hidden).
     * @param var_args The CSS class or classes.
     */
    setCurrDragItemClass ( ...var_args : ( string | undefined ) [] ) : void ;
    /**
     * Sets a user-supplied CSS class to add to a drag item handle on hover (not
     * during a drag action).
     * @param var_args The CSS class or classes.
     */
    setDragItemHandleHoverClass ( ...var_args : ( string | undefined ) [] ) : void ;
    /**
     * Sets a user-supplied CSS class to add to a drag item on hover (not during a
     * drag action).
     * @param var_args The CSS class or classes.
     */
    setDragItemHoverClass ( ...var_args : ( string | undefined ) [] ) : void ;
    /**
     * Sets a user-supplied CSS class to add to the clone of the current drag item
     * that's actually being dragged around (during a drag action).
     * @param draggerElClass The CSS class.
     */
    setDraggerElClass (draggerElClass : string ) : void ;
    /**
     * Sets a user-supplied function used to get the "handle" element for a drag
     * item. The function must accept exactly one argument. The argument may be
     * any drag item element.
     *
     * If not set, the default implementation uses the whole drag item as the
     * handle.
     * @param getHandleForDragItemFn A function that, given any drag item, returns a reference to its "handle" element (which may be the drag item element itself).
     */
    setFunctionToGetHandleForDragItem (getHandleForDragItemFn : (a : Element | null ) => Element | null ) : void ;
    /**
     * Sets the distance the user has to drag the element before a drag operation
     * is started.
     * @param distance The number of pixels after which a mousedown and move is considered a drag.
     */
    setHysteresis (distance : number ) : void ;
    /**
     * Sets the property of the currDragItem that it is always displayed in the
     * list.
     */
    setIsCurrDragItemAlwaysDisplayed ( ) : void ;
    /**
     * Sets the private property updateWhileDragging_ to false. This disables the
     * update of the position of the currDragItem while dragging. It will only be
     * placed to its new location once the drag ends.
     */
    setNoUpdateWhileDragging ( ) : void ;
    /**
     * Updates the value of currHoverItem_.
     *
     * This method is used for insertion only when updateWhileDragging_ is false.
     * The below implementation is the basic one. This method can be extended by
     * a subclass to support changes to hovered item (eg: highlighting). Parametr
     * opt_draggerElCenter can be used for more sophisticated effects.
     * @param hoverNextItem element of the list that is hovered over.
     * @param opt_draggerElCenter current position of the dragged element.
     */
    updateCurrHoverItem (hoverNextItem : Element | null , opt_draggerElCenter ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.DragListGroup'): typeof ಠ_ಠ.clutz.goog.fx.DragListGroup;
}
declare module 'goog:goog.fx.DragListGroup' {
  import alias = ಠ_ಠ.clutz.goog.fx.DragListGroup;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.DragListGroup.EventType {
  var BEFOREDRAGEND : string ;
  var BEFOREDRAGMOVE : string ;
  var BEFOREDRAGSTART : string ;
  var DRAGEND : string ;
  var DRAGMOVE : string ;
  var DRAGSTART : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.DragListGroup.EventType'): typeof ಠ_ಠ.clutz.goog.fx.DragListGroup.EventType;
}
declare module 'goog:goog.fx.DragListGroup.EventType' {
  import alias = ಠ_ಠ.clutz.goog.fx.DragListGroup.EventType;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * The event object dispatched by DragListGroup.
   * The fields draggerElCenter, hoverList, and hoverNextItem are only available
   * for the BEFOREDRAGMOVE and DRAGMOVE events.
   */
  class DragListGroupEvent extends DragListGroupEvent_Instance {
  }
  class DragListGroupEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * The event object dispatched by DragListGroup.
     * The fields draggerElCenter, hoverList, and hoverNextItem are only available
     * for the BEFOREDRAGMOVE and DRAGMOVE events.
     * @param type The event type string.
     * @param dragListGroup A reference to the associated DragListGroup object.
     * @param event The event fired by the browser or fired by the dragger.
     * @param currDragItem The current drag item being moved.
     * @param draggerEl The clone of the current drag item that's actually being dragged around.
     * @param dragger The dragger object.
     * @param opt_draggerElCenter The current center position of the draggerEl.
     * @param opt_hoverList The current drag list that's being hovered over, or null if the center of draggerEl is outside of any drag lists. If not null and the drag action ends right now, then currDragItem will end up in this list.
     * @param opt_hoverNextItem The current next item in the hoverList that the draggerEl is hovering over. (I.e. If the drag action ends right now, then this item would become the next item after the new location of currDragItem.) May be null if not applicable or if currDragItem would be added to the end of hoverList.
     */
    constructor (type : string , dragListGroup : ಠ_ಠ.clutz.goog.fx.DragListGroup | null , event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null | ಠ_ಠ.clutz.goog.fx.DragEvent , currDragItem : Element | null , draggerEl : Element | null , dragger : ಠ_ಠ.clutz.goog.fx.Dragger | null , opt_draggerElCenter ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_hoverList ? : Element | null , opt_hoverNextItem ? : Element | null ) ;
    /**
     * The current drag item being move.
     */
    currDragItem : Element | null ;
    /**
     * A reference to the associated DragListGroup object.
     */
    dragListGroup : ಠ_ಠ.clutz.goog.fx.DragListGroup | null ;
    /**
     * The dragger object.
     */
    dragger : ಠ_ಠ.clutz.goog.fx.Dragger | null ;
    /**
     * The clone of the current drag item that's actually being dragged around.
     */
    draggerEl : Element | null ;
    /**
     * The current center position of the draggerEl.
     */
    draggerElCenter : ಠ_ಠ.clutz.goog.math.Coordinate | null | undefined ;
    /**
     * The event fired by the browser or fired by the dragger.
     */
    event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null | ಠ_ಠ.clutz.goog.fx.DragEvent ;
    /**
     * The current drag list that's being hovered over, or null if the center of
     * draggerEl is outside of any drag lists. (I.e. If not null and the drag
     * action ends right now, then currDragItem will end up in this list.)
     */
    hoverList : Element | null | undefined ;
    /**
     * The current next item in the hoverList that the draggerEl is hovering over.
     * (I.e. If the drag action ends right now, then this item would become the
     * next item after the new location of currDragItem.) May be null if not
     * applicable or if currDragItem would be added to the end of hoverList.
     */
    hoverNextItem : Element | null | undefined ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.DragListGroupEvent'): typeof ಠ_ಠ.clutz.goog.fx.DragListGroupEvent;
}
declare module 'goog:goog.fx.DragListGroupEvent' {
  import alias = ಠ_ಠ.clutz.goog.fx.DragListGroupEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * A scroll support class. Currently this class will automatically scroll
   * a scrollable container node and scroll it by a fixed amount at a timed
   * interval when the mouse is moved above or below the container or in vertical
   * margin areas. Intended for use in drag and drop. This could potentially be
   * made more general and could support horizontal scrolling.
   */
  class DragScrollSupport extends DragScrollSupport_Instance {
    /**
     * The suggested scrolling margin.
     */
    static MARGIN : number ;
  }
  class DragScrollSupport_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * A scroll support class. Currently this class will automatically scroll
     * a scrollable container node and scroll it by a fixed amount at a timed
     * interval when the mouse is moved above or below the container or in vertical
     * margin areas. Intended for use in drag and drop. This could potentially be
     * made more general and could support horizontal scrolling.
     * @param containerNode A container that can be scrolled.
     * @param opt_margin Optional margin to use while scrolling.
     * @param opt_externalMouseMoveTracking Whether mouse move events are tracked externally by the client object which calls the mouse move event handler, useful when events are generated for more than one source element and/or are not real mousemove events.
     */
    constructor (containerNode : Element | null , opt_margin ? : number , opt_externalMouseMoveTracking ? : boolean ) ;
    /**
     * Calculates scroll delta.
     * @param coordinate Current mouse pointer coordinate.
     * @param min The coordinate value below which scrolling up should be started.
     * @param rangeLength The length of the range in which scrolling should be disabled and above which scrolling down should be started.
     */
    calculateScrollDelta (coordinate : number , min : number , rangeLength : number ) : number ;
    disposeInternal ( ) : void ;
    /**
     * Handler for mouse moves events.
     * @param event Mouse move event.
     */
    onMouseMove (event : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Sets whether scrolling should be constrained to happen only when the cursor
     * is inside the container node.
     * NOTE: If a margin is not set, then it does not make sense to
     * contain the scroll, because in that case scroll will never be triggered.
     * @param constrain Whether scrolling should be constrained to happen only when the cursor is inside the container node.
     */
    setConstrainScroll (constrain : boolean ) : void ;
    /**
     * Sets whether horizontal scrolling is allowed.
     * @param scrolling Whether horizontal scrolling is allowed.
     */
    setHorizontalScrolling (scrolling : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.DragScrollSupport'): typeof ಠ_ಠ.clutz.goog.fx.DragScrollSupport;
}
declare module 'goog:goog.fx.DragScrollSupport' {
  import alias = ಠ_ಠ.clutz.goog.fx.DragScrollSupport;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * A class that allows mouse or touch-based dragging (moving) of an element
   */
  class Dragger extends Dragger_Instance {
    /**
     * Creates copy of node being dragged.  This is a utility function to be used
     * wherever it is inappropriate for the original source to follow the mouse
     * cursor itself.
     * @param sourceEl Element to copy.
     */
    static cloneNode (sourceEl : Element | null ) : Element ;
  }
  class Dragger_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * A class that allows mouse or touch-based dragging (moving) of an element
     * @param target The element that will be dragged.
     * @param opt_handle An optional handle to control the drag, if null the target is used.
     * @param opt_limits Object containing left, top, width, and height.
     */
    constructor (target : Element | null , opt_handle ? : Element | null , opt_limits ? : ಠ_ಠ.clutz.goog.math.Rect | null ) ;
    /**
     * Current x position of mouse or touch relative to viewport.
     */
    clientX : number ;
    /**
     * Current y position of mouse or touch relative to viewport.
     */
    clientY : number ;
    /**
     * Current x position of drag relative to target's parent.
     */
    deltaX : number ;
    /**
     * Current y position of drag relative to target's parent.
     */
    deltaY : number ;
    /**
     * Reference to the handler that initiates the drag.
     */
    handle : Element | null ;
    /**
     * Object representing the limits of the drag region.
     */
    limits : ಠ_ಠ.clutz.goog.math.Rect | null ;
    /**
     * The current page scroll value.
     */
    pageScroll : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    /**
     * Current x position of mouse or touch relative to screen. Deprecated because
     * it doesn't take into affect zoom level or pixel density.
     */
    screenX : number ;
    /**
     * Current y position of mouse or touch relative to screen. Deprecated because
     * it doesn't take into affect zoom level or pixel density.
     */
    screenY : number ;
    /**
     * The x position where the first mousedown or touchstart occurred.
     */
    startX : number ;
    /**
     * The y position where the first mousedown or touchstart occurred.
     */
    startY : number ;
    /**
     * Reference to drag target element.
     */
    target : Element | null ;
    /**
     * Overridable function for computing the initial position of the target
     * before dragging begins.
     */
    computeInitialPosition ( ) : void ;
    /**
     * Overridable function for handling the default action of the drag behaviour.
     * Normally this is simply moving the element to x,y though in some cases it
     * might be used to resize the layer.  This is basically a shortcut to
     * implementing a default ondrag event handler.
     * @param x X-coordinate for target element. In right-to-left, x this is the number of pixels the target should be moved to from the right.
     * @param y Y-coordinate for target element.
     */
    defaultAction (x : number , y : number ) : void ;
    disposeInternal ( ) : void ;
    doDrag (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null , x : number , y : number , dragFromScroll : boolean ) : void ;
    /**
     * Turns on/off true RTL behavior.  This should be called immediately after
     * construction.  This is a temporary flag to allow clients to transition
     * to the new component at their convenience.  At some point true will be the
     * default.
     * @param useRightPositioningForRtl True if "right" should be used for positioning, false if "left" should be used for positioning.
     */
    enableRightPositioningForRtl (useRightPositioningForRtl : boolean ) : void ;
    /**
     * Event handler that is used to end the drag.
     * @param e Event object.
     * @param opt_dragCanceled Whether the drag has been canceled.
     */
    endDrag (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null , opt_dragCanceled ? : boolean ) : void ;
    /**
     * Event handler that is used to end the drag by cancelling it.
     * @param e Event object.
     */
    endDragCancel (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    getEnabled ( ) : boolean ;
    /**
     * Returns the event handler, intended for subclass use.
     */
    getHandler < T > ( ) : ಠ_ಠ.clutz.goog.events.EventHandler < T > ;
    /**
     * Gets the distance the user has to drag the element before a drag operation is
     * started.
     */
    getHysteresis ( ) : number ;
    isDragging ( ) : boolean ;
    /**
     * Returns the 'real' x after limits are applied (allows for some
     * limits to be undefined).
     * @param x X-coordinate to limit.
     */
    limitX (x : number ) : number ;
    /**
     * Returns the 'real' y after limits are applied (allows for some
     * limits to be undefined).
     * @param y Y-coordinate to limit.
     */
    limitY (y : number ) : number ;
    /**
     * Enables cancelling of built-in IE drag events.
     * @param cancelIeDragStart Whether to enable cancelling of IE dragstart event.
     */
    setCancelIeDragStart (cancelIeDragStart : boolean ) : void ;
    /**
     * Set whether dragger is enabled
     * @param enabled Whether dragger is enabled.
     */
    setEnabled (enabled : boolean ) : void ;
    /**
     * Sets the distance the user has to drag the element before a drag operation is
     * started.
     * @param distance The number of pixels after which a mousedown and move is considered a drag.
     */
    setHysteresis (distance : number ) : void ;
    /**
     * Sets (or reset) the Drag limits after a Dragger is created.
     * @param limits Object containing left, top, width, height for new Dragger limits. If target is right-to-left and enableRightPositioningForRtl(true) is called, then rect is interpreted as right, top, width, and height.
     */
    setLimits (limits : ಠ_ಠ.clutz.goog.math.Rect | null ) : void ;
    /**
     * Set whether mousedown should be default prevented.
     * @param preventMouseDown Whether mousedown should be default prevented.
     */
    setPreventMouseDown (preventMouseDown : boolean ) : void ;
    /**
     * Sets the SCROLL event target to make drag element follow scrolling.
     * @param scrollTarget The event target that dispatches SCROLL events.
     */
    setScrollTarget (scrollTarget : EventTarget | null ) : void ;
    /**
     * Sets up event handlers when dragging starts.
     */
    setupDragHandlers ( ) : void ;
    /**
     * Event handler that is used to start the drag
     * @param e Event object.
     */
    startDrag (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.Dragger'): typeof ಠ_ಠ.clutz.goog.fx.Dragger;
}
declare module 'goog:goog.fx.Dragger' {
  import alias = ಠ_ಠ.clutz.goog.fx.Dragger;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.Dragger {
  /**
   * Constants for event names.
   */
  type EventType = string ;
  var EventType : {
    BEFOREDRAG : EventType ,
    DRAG : EventType ,
    EARLY_CANCEL : EventType ,
    END : EventType ,
    START : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.Dragger.EventType'): typeof ಠ_ಠ.clutz.goog.fx.Dragger.EventType;
}
declare module 'goog:goog.fx.Dragger.EventType' {
  import alias = ಠ_ಠ.clutz.goog.fx.Dragger.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * An interface for programmatic transition. Must extend
   * {@code goog.events.EventTarget}.
   */
  interface Transition {
    play ( ) : any ;
    stop ( ) : any ;
  }
}
declare module 'goog:goog.fx.Transition' {
  import alias = ಠ_ಠ.clutz.goog.fx.Transition;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.Transition {
  /**
   * Transition event types.
   */
  type EventType = string ;
  var EventType : {
    BEGIN : EventType ,
    END : EventType ,
    FINISH : EventType ,
    PAUSE : EventType ,
    PLAY : EventType ,
    RESUME : EventType ,
    STOP : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.Transition.EventType'): typeof ಠ_ಠ.clutz.goog.fx.Transition.EventType;
}
declare module 'goog:goog.fx.Transition.EventType' {
  import alias = ಠ_ಠ.clutz.goog.fx.Transition.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Constructor for a transition object.
   */
  class TransitionBase extends TransitionBase_Instance {
  }
  class TransitionBase_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance implements ಠ_ಠ.clutz.goog.fx.Transition {
    /**
     * Timestamp for when the animation finished or was stopped.
     */
    endTime : number | null ;
    /**
     * Timestamp for when the animation was started.
     */
    startTime : number | null ;
    /**
     * Dispatches an event object for the current animation.
     * @param type Event type that will be dispatched.
     */
    dispatchAnimationEvent (type : string ) : void ;
    /**
     * Returns the current state of the animation.
     */
    getStateInternal ( ) : ಠ_ಠ.clutz.goog.fx.TransitionBase.State ;
    isPaused ( ) : boolean ;
    isPlaying ( ) : boolean ;
    isStopped ( ) : boolean ;
    /**
     * Dispatches the BEGIN event. Sub classes should override this instead
     * of listening to the event, and call this instead of dispatching the event.
     */
    onBegin ( ) : void ;
    /**
     * Dispatches the END event. Sub classes should override this instead
     * of listening to the event, and call this instead of dispatching the event.
     */
    onEnd ( ) : void ;
    /**
     * Dispatches the FINISH event. Sub classes should override this instead
     * of listening to the event, and call this instead of dispatching the event.
     */
    onFinish ( ) : void ;
    /**
     * Dispatches the PAUSE event. Sub classes should override this instead
     * of listening to the event, and call this instead of dispatching the event.
     */
    onPause ( ) : void ;
    /**
     * Dispatches the PLAY event. Sub classes should override this instead
     * of listening to the event, and call this instead of dispatching the event.
     */
    onPlay ( ) : void ;
    /**
     * Dispatches the RESUME event. Sub classes should override this instead
     * of listening to the event, and call this instead of dispatching the event.
     */
    onResume ( ) : void ;
    /**
     * Dispatches the STOP event. Sub classes should override this instead
     * of listening to the event, and call this instead of dispatching the event.
     */
    onStop ( ) : void ;
    /**
     * Pauses the animation.
     */
    pause ( ...a : any [] ) : any ;
    /**
     * Plays the animation.
     * @param opt_restart Optional parameter to restart the animation.
     */
    play (a ? : boolean ) : boolean ;
    /**
     * Sets the current state of the animation to paused.
     */
    setStatePaused ( ) : void ;
    /**
     * Sets the current state of the animation to playing.
     */
    setStatePlaying ( ) : void ;
    /**
     * Sets the current state of the animation to stopped.
     */
    setStateStopped ( ) : void ;
    /**
     * Stops the animation.
     * @param opt_gotoEnd Optional boolean parameter to go the the end of the animation.
     */
    stop (a ? : boolean ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.TransitionBase'): typeof ಠ_ಠ.clutz.goog.fx.TransitionBase;
}
declare module 'goog:goog.fx.TransitionBase' {
  import alias = ಠ_ಠ.clutz.goog.fx.TransitionBase;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.TransitionBase {
  /**
   * Enum for the possible states of an animation.
   */
  type State = number ;
  var State : {
    PAUSED : State ,
    PLAYING : State ,
    STOPPED : State ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.TransitionBase.State'): typeof ಠ_ಠ.clutz.goog.fx.TransitionBase.State;
}
declare module 'goog:goog.fx.TransitionBase.State' {
  import alias = ಠ_ಠ.clutz.goog.fx.TransitionBase.State;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.anim {
  /**
   * Default wait timeout for animations (in milliseconds).  Only used for timed
   * animation, which uses a timer (setTimeout) to schedule animation.
   */
  var TIMEOUT : number ;
  /**
   * Registers an animation to be cycled on the global timer.
   * @param animation The animation to register.
   */
  function registerAnimation (animation : ಠ_ಠ.clutz.goog.fx.anim.Animated | null ) : void ;
  /**
   * Registers an animation window. This allows usage of the timing control API
   * for animations. Note that this window must be visible, as non-visible
   * windows can potentially stop animating. This window does not necessarily
   * need to be the window inside which animation occurs, but must remain visible.
   * See: https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame.
   * @param animationWindow The window in which to animate elements.
   */
  function setAnimationWindow (animationWindow : Window | null ) : void ;
  /**
   * Tears down this module. Useful for testing.
   */
  function tearDown ( ) : void ;
  /**
   * Removes an animation from the list of animations which are cycled on the
   * global timer.
   * @param animation The animation to unregister.
   */
  function unregisterAnimation (animation : ಠ_ಠ.clutz.goog.fx.anim.Animated | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.anim'): typeof ಠ_ಠ.clutz.goog.fx.anim;
}
declare module 'goog:goog.fx.anim' {
  import alias = ಠ_ಠ.clutz.goog.fx.anim;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.anim {
  /**
   * An interface for programatically animated objects. I.e. rendered in
   * javascript frame by frame.
   */
  interface Animated {
    /**
     * Function called when a frame is requested for the animation.
     * @param now Current time in milliseconds.
     */
    onAnimationFrame (a : number ) : any ;
  }
}
declare module 'goog:goog.fx.anim.Animated' {
  import alias = ಠ_ಠ.clutz.goog.fx.anim.Animated;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.css3 {
  /**
   * Creates a transition to fade the element.
   * @param element The element to fade.
   * @param duration Duration in seconds.
   * @param timing The CSS3 timing function.
   * @param startOpacity Starting opacity.
   * @param endOpacity Ending opacity.
   */
  function fade (element : Element | null , duration : number , timing : string , startOpacity : number , endOpacity : number ) : ಠ_ಠ.clutz.goog.fx.css3.Transition ;
  /**
   * Creates a transition to fade in the element.
   * @param element The element to fade in.
   * @param duration Duration in seconds.
   */
  function fadeIn (element : Element | null , duration : number ) : ಠ_ಠ.clutz.goog.fx.css3.Transition ;
  /**
   * Creates a transition to fade out the element.
   * @param element The element to fade out.
   * @param duration Duration in seconds.
   */
  function fadeOut (element : Element | null , duration : number ) : ಠ_ಠ.clutz.goog.fx.css3.Transition ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.css3'): typeof ಠ_ಠ.clutz.goog.fx.css3;
}
declare module 'goog:goog.fx.css3' {
  import alias = ಠ_ಠ.clutz.goog.fx.css3;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.css3 {
  /**
   * A class to handle targeted CSS3 transition. This class
   * handles common features required for targeted CSS3 transition.
   *
   * Browser that does not support CSS3 transition will still receive all
   * the events fired by the transition object, but will not have any transition
   * played. If the browser supports the final state as set in setFinalState
   * method, the element will ends in the final state.
   *
   * Transitioning multiple properties with the same setting is possible
   * by setting Css3Property's property to 'all'. Performing multiple
   * transitions can be done via setting multiple initialStyle,
   * finalStyle and transitions. Css3Property's delay can be used to
   * delay one of the transition. Here is an example for a transition
   * that expands on the width and then followed by the height:
   *
   * <pre>
   * var animation = new goog.fx.css3.Transition(
   * element,
   * duration,
   * {width: 10px, height: 10px},
   * {width: 100px, height: 100px},
   * [
   * {property: width, duration: 1, timing: 'ease-in', delay: 0},
   * {property: height, duration: 1, timing: 'ease-in', delay: 1}
   * ]
   * );
   * </pre>
   */
  class Transition extends Transition_Instance {
  }
  class Transition_Instance extends ಠ_ಠ.clutz.goog.fx.TransitionBase_Instance {
    /**
     * A class to handle targeted CSS3 transition. This class
     * handles common features required for targeted CSS3 transition.
     *
     * Browser that does not support CSS3 transition will still receive all
     * the events fired by the transition object, but will not have any transition
     * played. If the browser supports the final state as set in setFinalState
     * method, the element will ends in the final state.
     *
     * Transitioning multiple properties with the same setting is possible
     * by setting Css3Property's property to 'all'. Performing multiple
     * transitions can be done via setting multiple initialStyle,
     * finalStyle and transitions. Css3Property's delay can be used to
     * delay one of the transition. Here is an example for a transition
     * that expands on the width and then followed by the height:
     *
     * <pre>
     * var animation = new goog.fx.css3.Transition(
     * element,
     * duration,
     * {width: 10px, height: 10px},
     * {width: 100px, height: 100px},
     * [
     * {property: width, duration: 1, timing: 'ease-in', delay: 0},
     * {property: height, duration: 1, timing: 'ease-in', delay: 1}
     * ]
     * );
     * </pre>
     * @param element The element to be transitioned.
     * @param duration The duration of the transition in seconds. This should be the longest of all transitions.
     * @param initialStyle Initial style properties of the element before animating. Set using {@code goog.style.setStyle}.
     * @param finalStyle Final style properties of the element after animating. Set using {@code goog.style.setStyle}.
     * @param transitions A single CSS3 transition property or an array of it.
     */
    constructor (element : Element | null , duration : number , initialStyle : Object | null , finalStyle : Object | null , transitions : { delay : number , duration : number , property : string , timing : string } | string | ( { delay : number , duration : number , property : string , timing : string } | string ) [] | null ) ;
    endTime : number | null ;
    startTime : number | null ;
    disposeInternal ( ) : void ;
    /**
     * Pausing CSS3 Transitions in not supported.
     */
    pause ( ) : void ;
    play (a ? : boolean ) : boolean ;
    stop (a ? : boolean ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.css3.Transition'): typeof ಠ_ಠ.clutz.goog.fx.css3.Transition;
}
declare module 'goog:goog.fx.css3.Transition' {
  import alias = ಠ_ಠ.clutz.goog.fx.css3.Transition;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Fade elements background color from start color to the element's current
   * background color.
   *
   * Start should be a 3D array representing R,G,B
   * @param element Dom Node to be used in the animation.
   * @param start 3D Array for RGB of start color.
   * @param time Length of animation in milliseconds.
   * @param opt_eventHandler Optional event handler to use when listening for events.
   */
  function bgColorFadeIn (element : Element | null , start : number [] | null , time : number , opt_eventHandler ? : ಠ_ಠ.clutz.goog.events.EventHandler < any > | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom'): typeof ಠ_ಠ.clutz.goog.fx.dom;
}
declare module 'goog:goog.fx.dom' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Provides a transformation of an elements background-color.
   *
   * Start and End should be 3D arrays representing R,G,B
   */
  class BgColorTransform extends BgColorTransform_Instance {
  }
  class BgColorTransform_Instance extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
    /**
     * Provides a transformation of an elements background-color.
     *
     * Start and End should be 3D arrays representing R,G,B
     * @param element Dom Node to be used in the animation.
     * @param start 3D Array for RGB of start color.
     * @param end 3D Array for RGB of end color.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    /**
     * Animation event handler that will set the background-color of an element
     */
    setColor ( ) : void ;
    updateStyle ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.BgColorTransform'): typeof ಠ_ಠ.clutz.goog.fx.dom.BgColorTransform;
}
declare module 'goog:goog.fx.dom.BgColorTransform' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.BgColorTransform;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Provides a transformation of an elements color.
   */
  class ColorTransform extends ColorTransform_Instance {
  }
  class ColorTransform_Instance extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
    /**
     * Provides a transformation of an elements color.
     * @param element Dom Node to be used in the animation.
     * @param start 3D Array representing R,G,B.
     * @param end 3D Array representing R,G,B.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    /**
     * Animation event handler that will set the color of an element.
     */
    updateStyle ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.ColorTransform'): typeof ಠ_ಠ.clutz.goog.fx.dom.ColorTransform;
}
declare module 'goog:goog.fx.dom.ColorTransform' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.ColorTransform;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that fades the opacity of an element between two
   * limits.
   *
   * Start and End should be floats between 0 and 1
   */
  class Fade extends Fade_Instance {
  }
  class Fade_Instance extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
    /**
     * Creates an animation object that fades the opacity of an element between two
     * limits.
     *
     * Start and End should be floats between 0 and 1
     * @param element Dom Node to be used in the animation.
     * @param start 1D Array or Number with start opacity.
     * @param end 1D Array or Number for end opacity.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , start : number [] | null | number , end : number [] | null | number , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    /**
     * Animation event handler that will hide the element
     */
    hide ( ) : void ;
    onBegin ( ) : void ;
    onEnd ( ) : void ;
    /**
     * Animation event handler that will show the element.
     */
    show ( ) : void ;
    /**
     * Animation event handler that will set the opacity of an element.
     */
    updateStyle ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.Fade'): typeof ಠ_ಠ.clutz.goog.fx.dom.Fade;
}
declare module 'goog:goog.fx.dom.Fade' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.Fade;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Fades an element in from completely transparent to fully opacity.
   */
  class FadeIn extends FadeIn_Instance {
  }
  class FadeIn_Instance extends ಠ_ಠ.clutz.goog.fx.dom.Fade_Instance {
    /**
     * Fades an element in from completely transparent to fully opacity.
     * @param element Dom Node to be used in the animation.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.FadeIn'): typeof ಠ_ಠ.clutz.goog.fx.dom.FadeIn;
}
declare module 'goog:goog.fx.dom.FadeIn' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.FadeIn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Sets an element's display to be visible and then fades an element in from
   * completely transparent to fully opaque.
   */
  class FadeInAndShow extends FadeInAndShow_Instance {
  }
  class FadeInAndShow_Instance extends ಠ_ಠ.clutz.goog.fx.dom.Fade_Instance {
    /**
     * Sets an element's display to be visible and then fades an element in from
     * completely transparent to fully opaque.
     * @param element Dom Node to be used in the animation.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    onBegin ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.FadeInAndShow'): typeof ಠ_ಠ.clutz.goog.fx.dom.FadeInAndShow;
}
declare module 'goog:goog.fx.dom.FadeInAndShow' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.FadeInAndShow;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Fades an element out from full opacity to completely transparent.
   */
  class FadeOut extends FadeOut_Instance {
  }
  class FadeOut_Instance extends ಠ_ಠ.clutz.goog.fx.dom.Fade_Instance {
    /**
     * Fades an element out from full opacity to completely transparent.
     * @param element Dom Node to be used in the animation.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.FadeOut'): typeof ಠ_ಠ.clutz.goog.fx.dom.FadeOut;
}
declare module 'goog:goog.fx.dom.FadeOut' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.FadeOut;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Fades an element out from full opacity to completely transparent and then
   * sets the display to 'none'
   */
  class FadeOutAndHide extends FadeOutAndHide_Instance {
  }
  class FadeOutAndHide_Instance extends ಠ_ಠ.clutz.goog.fx.dom.Fade_Instance {
    /**
     * Fades an element out from full opacity to completely transparent and then
     * sets the display to 'none'
     * @param element Dom Node to be used in the animation.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    onBegin ( ) : void ;
    onEnd ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.FadeOutAndHide'): typeof ಠ_ಠ.clutz.goog.fx.dom.FadeOutAndHide;
}
declare module 'goog:goog.fx.dom.FadeOutAndHide' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.FadeOutAndHide;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Abstract class that provides reusable functionality for predefined animations
   * that manipulate a single DOM element
   */
  class PredefinedEffect extends PredefinedEffect_Instance {
  }
  class PredefinedEffect_Instance extends ಠ_ಠ.clutz.goog.fx.Animation_Instance {
    /**
     * Abstract class that provides reusable functionality for predefined animations
     * that manipulate a single DOM element
     * @param element Dom Node to be used in the animation.
     * @param start Array for start coordinates.
     * @param end Array for end coordinates.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    /**
     * DOM Node that will be used in the animation
     */
    element : Element | null ;
    /**
     * Whether the DOM element being manipulated is rendered right-to-left.
     */
    isRightToLeft ( ) : boolean ;
    onAnimate ( ) : void ;
    onBegin ( ) : void ;
    onEnd ( ) : void ;
    /**
     * Called to update the style of the element.
     */
    updateStyle ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.PredefinedEffect'): typeof ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect;
}
declare module 'goog:goog.fx.dom.PredefinedEffect' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that will resize an element between two widths
   * and heights.
   *
   * Start and End should be 2 dimensional arrays
   */
  class Resize extends Resize_Instance {
  }
  class Resize_Instance extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
    /**
     * Creates an animation object that will resize an element between two widths
     * and heights.
     *
     * Start and End should be 2 dimensional arrays
     * @param element Dom Node to be used in the animation.
     * @param start 2D array for start width and height.
     * @param end 2D array for end width and height.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    /**
     * Animation event handler that will resize an element by setting its width and
     * height.
     */
    updateStyle ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.Resize'): typeof ಠ_ಠ.clutz.goog.fx.dom.Resize;
}
declare module 'goog:goog.fx.dom.Resize' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.Resize;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that will resize an element between two heights
   *
   * Start and End should be numbers
   */
  class ResizeHeight extends ResizeHeight_Instance {
  }
  class ResizeHeight_Instance extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
    /**
     * Creates an animation object that will resize an element between two heights
     *
     * Start and End should be numbers
     * @param element Dom Node to be used in the animation.
     * @param start Start height.
     * @param end End height.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , start : number , end : number , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    /**
     * Animation event handler that will resize an element by setting its height.
     */
    updateStyle ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.ResizeHeight'): typeof ಠ_ಠ.clutz.goog.fx.dom.ResizeHeight;
}
declare module 'goog:goog.fx.dom.ResizeHeight' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.ResizeHeight;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that will resize an element between two widths
   *
   * Start and End should be numbers
   */
  class ResizeWidth extends ResizeWidth_Instance {
  }
  class ResizeWidth_Instance extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
    /**
     * Creates an animation object that will resize an element between two widths
     *
     * Start and End should be numbers
     * @param element Dom Node to be used in the animation.
     * @param start Start width.
     * @param end End width.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , start : number , end : number , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    /**
     * Animation event handler that will resize an element by setting its width.
     */
    updateStyle ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.ResizeWidth'): typeof ಠ_ಠ.clutz.goog.fx.dom.ResizeWidth;
}
declare module 'goog:goog.fx.dom.ResizeWidth' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.ResizeWidth;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that will scroll an element from A to B.
   *
   * Start and End should be 2 dimensional arrays
   */
  class Scroll extends Scroll_Instance {
  }
  class Scroll_Instance extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
    /**
     * Creates an animation object that will scroll an element from A to B.
     *
     * Start and End should be 2 dimensional arrays
     * @param element Dom Node to be used in the animation.
     * @param start 2D array for start scroll left and top.
     * @param end 2D array for end scroll left and top.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    /**
     * Animation event handler that will set the scroll position of an element.
     */
    updateStyle ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.Scroll'): typeof ಠ_ಠ.clutz.goog.fx.dom.Scroll;
}
declare module 'goog:goog.fx.dom.Scroll' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.Scroll;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that will slide an element from A to B.  (This
   * in effect automatically sets up the onanimate event for an Animation object)
   *
   * Start and End should be 2 dimensional arrays
   */
  class Slide extends Slide_Instance {
  }
  class Slide_Instance extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
    /**
     * Creates an animation object that will slide an element from A to B.  (This
     * in effect automatically sets up the onanimate event for an Animation object)
     *
     * Start and End should be 2 dimensional arrays
     * @param element Dom Node to be used in the animation.
     * @param start 2D array for start coordinates (X, Y).
     * @param end 2D array for end coordinates (X, Y).
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    updateStyle ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.Slide'): typeof ಠ_ಠ.clutz.goog.fx.dom.Slide;
}
declare module 'goog:goog.fx.dom.Slide' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.Slide;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Slides an element from its current position.
   */
  class SlideFrom extends SlideFrom_Instance {
  }
  class SlideFrom_Instance extends ಠ_ಠ.clutz.goog.fx.dom.Slide_Instance {
    /**
     * Slides an element from its current position.
     * @param element DOM node to be used in the animation.
     * @param end 2D array for end coordinates (X, Y).
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , end : number [] | null , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    startPoint : number [] | null ;
    onBegin ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.SlideFrom'): typeof ಠ_ಠ.clutz.goog.fx.dom.SlideFrom;
}
declare module 'goog:goog.fx.dom.SlideFrom' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.SlideFrom;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that will slide an element into its final size.
   * Requires that the element is absolutely positioned.
   */
  class Swipe extends Swipe_Instance {
  }
  class Swipe_Instance extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
    /**
     * Creates an animation object that will slide an element into its final size.
     * Requires that the element is absolutely positioned.
     * @param element Dom Node to be used in the animation.
     * @param start 2D array for start size (W, H).
     * @param end 2D array for end size (W, H).
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : Element | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : ( ( ...a : any [] ) => any ) | null ) ;
    /**
     * Animation event handler that will resize an element by setting its width,
     * height and clipping.
     */
    updateStyle ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.dom.Swipe'): typeof ಠ_ಠ.clutz.goog.fx.dom.Swipe;
}
declare module 'goog:goog.fx.dom.Swipe' {
  import alias = ಠ_ಠ.clutz.goog.fx.dom.Swipe;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.easing {
  /**
   * Ease in - Start slow and speed up.
   * @param t Input between 0 and 1.
   */
  function easeIn (t : number ) : number ;
  /**
   * Ease out - Start fastest and slows to a stop.
   * @param t Input between 0 and 1.
   */
  function easeOut (t : number ) : number ;
  /**
   * Ease out long - Start fastest and slows to a stop with a long ease.
   * @param t Input between 0 and 1.
   */
  function easeOutLong (t : number ) : number ;
  /**
   * Ease in and out - Start slow, speed up, then slow down.
   * @param t Input between 0 and 1.
   */
  function inAndOut (t : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.fx.easing'): typeof ಠ_ಠ.clutz.goog.fx.easing;
}
declare module 'goog:goog.fx.easing' {
  import alias = ಠ_ಠ.clutz.goog.fx.easing;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Returns an instance of goog.graphics.AbstractGraphics that knows how to draw
   * for the current platform (A factory for the proper Graphics implementation)
   * @param width The width in pixels.  Strings expressing percentages of parent with (e.g. '80%') are also accepted.
   * @param height The height in pixels.  Strings expressing percentages of parent with (e.g. '80%') are also accepted.
   * @param opt_coordWidth The optional coordinate width - if omitted or null, defaults to same as width.
   * @param opt_coordHeight The optional coordinate height - if omitted or null, defaults to same as height.
   * @param opt_domHelper The DOM helper object for the document we want to render in.
   */
  function createGraphics (width : string | number , height : string | number , opt_coordWidth ? : number | null , opt_coordHeight ? : number | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics ;
  /**
   * Returns an instance of goog.graphics.AbstractGraphics that knows how to draw
   * for the current platform (A factory for the proper Graphics implementation)
   * @param width The width in pixels.  Strings expressing percentages of parent with (e.g. '80%') are also accepted.
   * @param height The height in pixels.   Strings expressing percentages of parent with (e.g. '80%') are also accepted.
   * @param opt_coordWidth The optional coordinate width, defaults to same as width.
   * @param opt_coordHeight The optional coordinate height, defaults to same as height.
   * @param opt_domHelper The DOM helper object for the document we want to render in.
   */
  function createSimpleGraphics (width : string | number , height : string | number , opt_coordWidth ? : number | null , opt_coordHeight ? : number | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics ;
  /**
   * Static function to check if the current browser has Graphics support.
   */
  function isBrowserSupported ( ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics'): typeof ಠ_ಠ.clutz.goog.graphics;
}
declare module 'goog:goog.graphics' {
  import alias = ಠ_ಠ.clutz.goog.graphics;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Base class for the different graphics. You should never construct objects
   * of this class. Instead us goog.graphics.createGraphics
   */
  class AbstractGraphics extends AbstractGraphics_Instance {
  }
  class AbstractGraphics_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
    /**
     * Base class for the different graphics. You should never construct objects
     * of this class. Instead us goog.graphics.createGraphics
     * @param width The width in pixels or percent.
     * @param height The height in pixels or percent.
     * @param opt_coordWidth Optional coordinate system width - if omitted or null, defaults to same as width.
     * @param opt_coordHeight Optional coordinate system height - if omitted or null, defaults to same as height.
     * @param opt_domHelper The DOM helper object for the document we want to render in.
     */
    constructor (width : number | string , height : number | string , opt_coordWidth ? : number | null , opt_coordHeight ? : number | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Height of coordinate system in units.
     */
    coordHeight : number | null ;
    /**
     * Width of coordinate system in units.
     */
    coordWidth : number | null ;
    /**
     * Height of graphics in pixels or percentage points.
     */
    height : number | string ;
    /**
     * Width of graphics in pixels or percentage points.
     */
    width : number | string ;
    /**
     * The root level group element.
     */
    canvasElement : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ;
    /**
     * Remove all drawing elements from the graphics.
     */
    clear ( ...a : any [] ) : any ;
    /**
     * Left coordinate of the view box
     */
    coordLeft : number ;
    /**
     * Top coordinate of the view box
     */
    coordTop : number ;
    /**
     * Create an empty group of drawing elements.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    createGroup (a ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ;
    /**
     * Create an empty path.
     */
    createPath ( ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    /**
     * Draw a circle
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     * @param r Radius length.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawCircle (cx : number , cy : number , r : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.EllipseElement | null ;
    /**
     * Draw an ellipse
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     * @param rx Radius length for the x-axis.
     * @param ry Radius length for the y-axis.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawEllipse (a : number , b : number , c : number , d : number , e : ಠ_ಠ.clutz.goog.graphics.Stroke | null , f : ಠ_ಠ.clutz.goog.graphics.Fill | null , g ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.EllipseElement | null ;
    /**
     * Draw a path.
     * @param path The path object to draw.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawPath (a : ಠ_ಠ.clutz.goog.graphics.Path , b : ಠ_ಠ.clutz.goog.graphics.Stroke | null , c : ಠ_ಠ.clutz.goog.graphics.Fill | null , d ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.PathElement | null ;
    /**
     * Draw a rectangle
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawRect (a : number , b : number , c : number , d : number , e : ಠ_ಠ.clutz.goog.graphics.Stroke | null , f : ಠ_ಠ.clutz.goog.graphics.Fill | null , g ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.RectElement | null ;
    /**
     * Draw a text string within a rectangle (drawing is horizontal)
     * @param text The text to draw.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     * @param align Horizontal alignment: left (default), center, right.
     * @param vAlign Vertical alignment: top (default), center, bottom.
     * @param font Font describing the font properties.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawText (text : string , x : number , y : number , width : number , height : number , align : string , vAlign : string , font : ಠ_ಠ.clutz.goog.graphics.Font | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.TextElement | null ;
    /**
     * Draw a text string vertically centered on a given line.
     * @param text The text to draw.
     * @param x1 X coordinate of start of line.
     * @param y1 Y coordinate of start of line.
     * @param x2 X coordinate of end of line.
     * @param y2 Y coordinate of end of line.
     * @param align Horizontal alingnment: left (default), center, right.
     * @param font Font describing the font properties.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawTextOnLine (a : string , b : number , c : number , d : number , e : number , f : string , g : ಠ_ಠ.clutz.goog.graphics.Font | null , h : ಠ_ಠ.clutz.goog.graphics.Stroke | null , i : ಠ_ಠ.clutz.goog.graphics.Fill | null , j ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.TextElement | null ;
    getCanvasElement ( ) : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ;
    getCoordOrigin ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    getCoordSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
    getPixelScaleX ( ) : number ;
    getPixelScaleY ( ) : number ;
    getPixelSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
    getSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
    /**
     * Measure and return the width (in pixels) of a given text string.
     * Text measurement is needed to make sure a text can fit in the allocated
     * area. The way text length is measured is by writing it into a div that is
     * after the visible area, measure the div width, and immediately erase the
     * written value.
     * @param text The text string to measure.
     * @param font The font object describing the font style.
     */
    getTextWidth (a : string , b : ಠ_ಠ.clutz.goog.graphics.Font | null ) : number ;
    isDomClonable ( ) : boolean ;
    /**
     * Remove a single drawing element from the surface.  The default implementation
     * assumes a DOM based drawing surface.
     * @param element The element to remove.
     */
    removeElement (element : ಠ_ಠ.clutz.goog.graphics.Element | null ) : void ;
    /**
     * Stop preventing redraws.  If any redraws had been prevented, a redraw will
     * be done now.
     */
    resume ( ) : void ;
    /**
     * Changes the coordinate system position.
     * @param left The coordinate system left bound.
     * @param top The coordinate system top bound.
     */
    setCoordOrigin (a : number , b : number ) : any ;
    /**
     * Changes the coordinate size.
     * @param coordWidth The coordinate width.
     * @param coordHeight The coordinate height.
     */
    setCoordSize (coordWidth : number , coordHeight : number ) : void ;
    /**
     * Set the affine transform of an element.
     * @param element The element wrapper.
     * @param affineTransform The transformation applied to this element.
     */
    setElementAffineTransform (a : ಠ_ಠ.clutz.goog.graphics.Element , b : ಠ_ಠ.clutz.goog.graphics.AffineTransform ) : any ;
    /**
     * Sets the fill for the given element.
     * @param element The element wrapper.
     * @param fill The fill object.
     */
    setElementFill (a : ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement | null , b : ಠ_ಠ.clutz.goog.graphics.Fill | null ) : any ;
    /**
     * Sets the stroke for the given element.
     * @param element The element wrapper.
     * @param stroke The stroke object.
     */
    setElementStroke (a : ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement | null , b : ಠ_ಠ.clutz.goog.graphics.Stroke | null ) : any ;
    /**
     * Set the transformation of an element.
     *
     * If a more general affine transform is needed than this provides
     * (e.g. skew and scale) then use setElementAffineTransform.
     * @param element The element wrapper.
     * @param x The x coordinate of the translation transform.
     * @param y The y coordinate of the translation transform.
     * @param angle The angle of the rotation transform.
     * @param centerX The horizontal center of the rotation transform.
     * @param centerY The vertical center of the rotation transform.
     */
    setElementTransform (a : ಠ_ಠ.clutz.goog.graphics.Element | null , b : number , c : number , d : number , e : number , f : number ) : any ;
    /**
     * Change the size of the canvas.
     * @param pixelWidth The width in pixels.
     * @param pixelHeight The height in pixels.
     */
    setSize (a : number , b : number ) : any ;
    /**
     * Start preventing redraws - useful for chaining large numbers of changes
     * together.  Not guaranteed to do anything - i.e. only use this for
     * optimization of a single code path.
     */
    suspend ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.AbstractGraphics'): typeof ಠ_ಠ.clutz.goog.graphics.AbstractGraphics;
}
declare module 'goog:goog.graphics.AbstractGraphics' {
  import alias = ಠ_ಠ.clutz.goog.graphics.AbstractGraphics;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Creates a 2D affine transform. An affine transform performs a linear
   * mapping from 2D coordinates to other 2D coordinates that preserves the
   * "straightness" and "parallelness" of lines.
   *
   * Such a coordinate transformation can be represented by a 3 row by 3 column
   * matrix with an implied last row of [ 0 0 1 ]. This matrix transforms source
   * coordinates (x,y) into destination coordinates (x',y') by considering them
   * to be a column vector and multiplying the coordinate vector by the matrix
   * according to the following process:
   * <pre>
   * [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
   * [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
   * [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]
   * </pre>
   *
   * This class is optimized for speed and minimizes calculations based on its
   * knowledge of the underlying matrix (as opposed to say simply performing
   * matrix multiplication).
   */
  class AffineTransform extends AffineTransform_Instance {
    /**
     * Creates a transform representing a rotation transformation.
     * @param theta The angle of rotation measured in radians.
     * @param x The x coordinate of the anchor point.
     * @param y The y coordinate of the anchor point.
     */
    static getRotateInstance (theta : number , x : number , y : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Creates a transform representing a scaling transformation.
     * @param sx The x-axis scaling factor.
     * @param sy The y-axis scaling factor.
     */
    static getScaleInstance (sx : number , sy : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Creates a transform representing a shearing transformation.
     * @param shx The x-axis shear factor.
     * @param shy The y-axis shear factor.
     */
    static getShearInstance (shx : number , shy : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Creates a transform representing a translation transformation.
     * @param dx The distance to translate in the x direction.
     * @param dy The distance to translate in the y direction.
     */
    static getTranslateInstance (dx : number , dy : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
  }
  class AffineTransform_Instance {
    private noStructuralTyping_: any;
    /**
     * Creates a 2D affine transform. An affine transform performs a linear
     * mapping from 2D coordinates to other 2D coordinates that preserves the
     * "straightness" and "parallelness" of lines.
     *
     * Such a coordinate transformation can be represented by a 3 row by 3 column
     * matrix with an implied last row of [ 0 0 1 ]. This matrix transforms source
     * coordinates (x,y) into destination coordinates (x',y') by considering them
     * to be a column vector and multiplying the coordinate vector by the matrix
     * according to the following process:
     * <pre>
     * [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
     * [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
     * [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]
     * </pre>
     *
     * This class is optimized for speed and minimizes calculations based on its
     * knowledge of the underlying matrix (as opposed to say simply performing
     * matrix multiplication).
     * @param opt_m00 The m00 coordinate of the transform.
     * @param opt_m10 The m10 coordinate of the transform.
     * @param opt_m01 The m01 coordinate of the transform.
     * @param opt_m11 The m11 coordinate of the transform.
     * @param opt_m02 The m02 coordinate of the transform.
     * @param opt_m12 The m12 coordinate of the transform.
     */
    constructor (opt_m00 ? : number , opt_m10 ? : number , opt_m01 ? : number , opt_m11 ? : number , opt_m02 ? : number , opt_m12 ? : number ) ;
    m00_ : number ;
    m01_ : number ;
    m02_ : number ;
    m10_ : number ;
    m11_ : number ;
    m12_ : number ;
    clone ( ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Concatenates an affine transform to this transform.
     * @param tx The transform to concatenate.
     */
    concatenate (tx : ಠ_ಠ.clutz.goog.graphics.AffineTransform ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Sets this transform to be identical to the given transform.
     * @param tx The transform to copy.
     */
    copyFrom (tx : ಠ_ಠ.clutz.goog.graphics.AffineTransform ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    createInverse ( ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Compares two affine transforms for equality.
     * @param tx The other affine transform.
     */
    equals (tx : ಠ_ಠ.clutz.goog.graphics.AffineTransform | null ) : boolean ;
    getDeterminant ( ) : number ;
    getScaleX ( ) : number ;
    getScaleY ( ) : number ;
    getShearX ( ) : number ;
    getShearY ( ) : number ;
    getTranslateX ( ) : number ;
    getTranslateY ( ) : number ;
    isIdentity ( ) : boolean ;
    /**
     * Returns whether the transform is invertible. A transform is not invertible
     * if the determinant is 0 or any value is non-finite or NaN.
     */
    isInvertible ( ) : boolean ;
    /**
     * Pre-concatenates an affine transform to this transform.
     * @param tx The transform to preconcatenate.
     */
    preConcatenate (tx : ಠ_ಠ.clutz.goog.graphics.AffineTransform ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Pre-concatenates this transform with a rotation transformation around an
     * anchor point.
     * @param theta The angle of rotation measured in radians.
     * @param x The x coordinate of the anchor point.
     * @param y The y coordinate of the anchor point.
     */
    preRotate (theta : number , x : number , y : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Pre-concatenates this transform with a scaling transformation,
     * i.e. calculates the following matrix product:
     *
     * <pre>
     * [sx  0 0] [m00 m01 m02]
     * [ 0 sy 0] [m10 m11 m12]
     * [ 0  0 1] [  0   0   1]
     * </pre>
     * @param sx The x-axis scaling factor.
     * @param sy The y-axis scaling factor.
     */
    preScale (sx : number , sy : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Pre-concatenates this transform with a shear transformation.
     * i.e. calculates the following matrix product:
     *
     * <pre>
     * [  1 shx 0] [m00 m01 m02]
     * [shy   1 0] [m10 m11 m12]
     * [  0   0 1] [  0   0   1]
     * </pre>
     * @param shx The x shear factor.
     * @param shy The y shear factor.
     */
    preShear (shx : number , shy : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Pre-concatenates this transform with a translate transformation,
     * i.e. calculates the following matrix product:
     *
     * <pre>
     * [1 0 dx] [m00 m01 m02]
     * [0 1 dy] [m10 m11 m12]
     * [0 0  1] [  0   0   1]
     * </pre>
     * @param dx The distance to translate in the x direction.
     * @param dy The distance to translate in the y direction.
     */
    preTranslate (dx : number , dy : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Concatenates this transform with a rotation transformation around an anchor
     * point.
     * @param theta The angle of rotation measured in radians.
     * @param x The x coordinate of the anchor point.
     * @param y The y coordinate of the anchor point.
     */
    rotate (theta : number , x : number , y : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Concatenates this transform with a scaling transformation.
     * @param sx The x-axis scaling factor.
     * @param sy The y-axis scaling factor.
     */
    scale (sx : number , sy : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Sets this transform to a rotation transformation.
     * @param theta The angle of rotation measured in radians.
     * @param x The x coordinate of the anchor point.
     * @param y The y coordinate of the anchor point.
     */
    setToRotation (theta : number , x : number , y : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Sets this transform to a scaling transformation.
     * @param sx The x-axis scaling factor.
     * @param sy The y-axis scaling factor.
     */
    setToScale (sx : number , sy : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Sets this transform to a shearing transformation.
     * @param shx The x-axis shear factor.
     * @param shy The y-axis shear factor.
     */
    setToShear (shx : number , shy : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Sets this transform to a translation transformation.
     * @param dx The distance to translate in the x direction.
     * @param dy The distance to translate in the y direction.
     */
    setToTranslation (dx : number , dy : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Sets this transform to the matrix specified by the 6 values.
     * @param m00 The m00 coordinate of the transform.
     * @param m10 The m10 coordinate of the transform.
     * @param m01 The m01 coordinate of the transform.
     * @param m11 The m11 coordinate of the transform.
     * @param m02 The m02 coordinate of the transform.
     * @param m12 The m12 coordinate of the transform.
     */
    setTransform (m00 : number , m10 : number , m01 : number , m11 : number , m02 : number , m12 : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    /**
     * Concatenates this transform with a shear transformation.
     * @param shx The x shear factor.
     * @param shy The y shear factor.
     */
    shear (shx : number , shy : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    toString ( ) : string ;
    /**
     * Transforms an array of coordinates by this transform and stores the result
     * into a destination array.
     * @param src The array containing the source points as x, y value pairs.
     * @param srcOff The offset to the first point to be transformed.
     * @param dst The array into which to store the transformed point pairs.
     * @param dstOff The offset of the location of the first transformed point in the destination array.
     * @param numPts The number of points to transform.
     */
    transform (src : number [] , srcOff : number , dst : number [] , dstOff : number , numPts : number ) : void ;
    /**
     * Concatenates this transform with a translate transformation.
     * @param dx The distance to translate in the x direction.
     * @param dy The distance to translate in the y direction.
     */
    translate (dx : number , dy : number ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.AffineTransform'): typeof ಠ_ಠ.clutz.goog.graphics.AffineTransform;
}
declare module 'goog:goog.graphics.AffineTransform' {
  import alias = ಠ_ಠ.clutz.goog.graphics.AffineTransform;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for canvas ellipse elements.
   * This is an implementation of the goog.graphics.EllipseElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class CanvasEllipseElement extends CanvasEllipseElement_Instance {
  }
  class CanvasEllipseElement_Instance extends ಠ_ಠ.clutz.goog.graphics.EllipseElement_Instance {
    /**
     * Thin wrapper for canvas ellipse elements.
     * This is an implementation of the goog.graphics.EllipseElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     * @param rx Radius length for the x-axis.
     * @param ry Radius length for the y-axis.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.CanvasGraphics | null , cx : number , cy : number , rx : number , ry : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Draw the ellipse.  Should be treated as package scope.
     * @param ctx The context to draw the element in.
     */
    draw (ctx : CanvasRenderingContext2D | null ) : void ;
    /**
     * Update the center point of the ellipse.
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     */
    setCenter (cx : number , cy : number ) : any ;
    /**
     * Update the radius of the ellipse.
     * @param rx Center X coordinate.
     * @param ry Center Y coordinate.
     */
    setRadius (rx : number , ry : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.CanvasEllipseElement'): typeof ಠ_ಠ.clutz.goog.graphics.CanvasEllipseElement;
}
declare module 'goog:goog.graphics.CanvasEllipseElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.CanvasEllipseElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * A Graphics implementation for drawing using canvas.
   */
  class CanvasGraphics extends CanvasGraphics_Instance {
  }
  class CanvasGraphics_Instance extends ಠ_ಠ.clutz.goog.graphics.AbstractGraphics_Instance {
    /**
     * A Graphics implementation for drawing using canvas.
     * @param width The (non-zero) width in pixels.  Strings expressing percentages of parent with (e.g. '80%') are also accepted.
     * @param height The (non-zero) height in pixels.  Strings expressing percentages of parent with (e.g. '80%') are also accepted.
     * @param opt_coordWidth The coordinate width - if omitted or null, defaults to same as width.
     * @param opt_coordHeight The coordinate height - if omitted or null, defaults to same as height.
     * @param opt_domHelper The DOM helper object for the document we want to render in.
     */
    constructor (width : string | number , height : string | number , opt_coordWidth ? : number | null , opt_coordHeight ? : number | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * The main canvas element.
     */
    canvasElement : ಠ_ಠ.clutz.goog.graphics.CanvasGroupElement | null ;
    coordLeft : number ;
    coordTop : number ;
    height : number | string ;
    width : number | string ;
    /**
     * Append an element.
     * @param element The element to draw.
     * @param group The group to draw it in. If null or undefined, defaults to the root group.
     */
    append (element : ಠ_ಠ.clutz.goog.graphics.Element | null , group : ಠ_ಠ.clutz.goog.graphics.GroupElement | null | undefined ) : void ;
    /**
     * Remove all drawing elements from the graphics.
     */
    clear ( ) : void ;
    /**
     * Creates the DOM representation of the graphics area.
     */
    createDom ( ) : void ;
    /**
     * Create an empty group of drawing elements.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    createGroup (opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.CanvasGroupElement ;
    /**
     * Disposes of the component by removing event handlers, detacing DOM nodes from
     * the document body, and removing references to them.
     */
    disposeInternal ( ) : void ;
    /**
     * Draw an element, including any stroke or fill.
     * @param element The element to draw.
     */
    drawElement (element : ಠ_ಠ.clutz.goog.graphics.Element | null ) : void ;
    /**
     * Draw an ellipse.
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     * @param rx Radius length for the x-axis.
     * @param ry Radius length for the y-axis.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to.  If not specified, appends to the main canvas.
     */
    drawEllipse (cx : number , cy : number , rx : number , ry : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.EllipseElement ;
    /**
     * Draw an image.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param width Width of image.
     * @param height Height of image.
     * @param src Source of the image.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawImage (x : number , y : number , width : number , height : number , src : string , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.ImageElement ;
    /**
     * Draw a path.
     * @param path The path object to draw.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawPath (path : ಠ_ಠ.clutz.goog.graphics.Path , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.PathElement ;
    /**
     * Draw a rectangle.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawRect (x : number , y : number , width : number , height : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.RectElement ;
    /**
     * Draw a text string vertically centered on a given line.
     * @param text The text to draw.
     * @param x1 X coordinate of start of line.
     * @param y1 Y coordinate of start of line.
     * @param x2 X coordinate of end of line.
     * @param y2 Y coordinate of end of line.
     * @param align Horizontal alignment: left (default), center, right.
     * @param font Font describing the font properties.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawTextOnLine (text : string , x1 : number , y1 : number , x2 : number , y2 : number , align : string | null , font : ಠ_ಠ.clutz.goog.graphics.Font | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.TextElement ;
    enterDocument ( ) : void ;
    /**
     * Returns the drawing context.
     */
    getContext ( ) : Object | null ;
    getPixelSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
    /**
     * Measure and return the width (in pixels) of a given text string.
     * Text measurement is needed to make sure a text can fit in the allocated
     * area. The way text length is measured is by writing it into a div that is
     * after the visible area, measure the div width, and immediately erase the
     * written value.
     * @param text The text string to measure.
     * @param font The font object describing the font style.
     */
    getTextWidth (a : string , b : ಠ_ಠ.clutz.goog.graphics.Font | null ) : number ;
    isDrawable (group : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : boolean ;
    /**
     * Returns true if drawing to the given group means a redraw is required.
     * @param group The group to draw to.
     */
    isRedrawRequired (group : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : boolean ;
    /**
     * Pop an element transform off of the transform stack.
     */
    popElementTransform ( ) : void ;
    /**
     * Push an element transform on to the transform stack.
     * @param element The transformed element.
     */
    pushElementTransform (element : ಠ_ಠ.clutz.goog.graphics.Element | null ) : void ;
    /**
     * Redraw the entire canvas.
     */
    redraw ( ) : void ;
    /**
     * Removes an element from the Canvas.
     * @param elem the element to remove.
     */
    removeElement (elem : ಠ_ಠ.clutz.goog.graphics.Element | null ) : void ;
    /**
     * Reset the canvas.
     */
    reset ( ) : void ;
    /**
     * Stop preventing redraws.  If any redraws had been prevented, a redraw will
     * be done now.
     */
    resume ( ) : void ;
    /**
     * Changes the coordinate system position.
     * @param left The coordinate system left bound.
     * @param top The coordinate system top bound.
     */
    setCoordOrigin (left : number , top : number ) : any ;
    /**
     * Changes the coordinate size.
     * @param coordWidth The coordinate width.
     * @param coordHeight The coordinate height.
     */
    setCoordSize (coordWidth : number , coordHeight : number ) : void ;
    /**
     * Set the transformation of an element.
     *
     * Note that in this implementation this method just calls this.redraw()
     * and the affineTransform param is unused.
     * @param element The element wrapper.
     * @param affineTransform The transformation applied to this element.
     */
    setElementAffineTransform (element : ಠ_ಠ.clutz.goog.graphics.Element , affineTransform : ಠ_ಠ.clutz.goog.graphics.AffineTransform ) : any ;
    /**
     * Sets the fill for the given element.
     * @param element The element wrapper.
     * @param fill The fill object.
     */
    setElementFill (element : ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) : any ;
    /**
     * Sets the stroke for the given element.
     * @param element The element wrapper.
     * @param stroke The stroke object.
     */
    setElementStroke (element : ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null ) : any ;
    /**
     * Set the translation and rotation of an element.
     *
     * If a more general affine transform is needed than this provides
     * (e.g. skew and scale) then use setElementAffineTransform.
     * @param element The element wrapper.
     * @param x The x coordinate of the translation transform.
     * @param y The y coordinate of the translation transform.
     * @param angle The angle of the rotation transform.
     * @param centerX The horizontal center of the rotation transform.
     * @param centerY The vertical center of the rotation transform.
     */
    setElementTransform (element : ಠ_ಠ.clutz.goog.graphics.Element | null , x : number , y : number , angle : number , centerX : number , centerY : number ) : any ;
    /**
     * Change the size of the canvas.
     * @param pixelWidth The width in pixels.
     * @param pixelHeight The height in pixels.
     */
    setSize (pixelWidth : number , pixelHeight : number ) : any ;
    /**
     * Start preventing redraws - useful for chaining large numbers of changes
     * together.  Not guaranteed to do anything - i.e. only use this for
     * optimization of a single code path.
     */
    suspend ( ) : void ;
    /**
     * Update the size of the canvas.
     */
    updateSize ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.CanvasGraphics'): typeof ಠ_ಠ.clutz.goog.graphics.CanvasGraphics;
}
declare module 'goog:goog.graphics.CanvasGraphics' {
  import alias = ಠ_ಠ.clutz.goog.graphics.CanvasGraphics;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Object representing a group of objects in a canvas.
   * This is an implementation of the goog.graphics.GroupElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class CanvasGroupElement extends CanvasGroupElement_Instance {
  }
  class CanvasGroupElement_Instance extends ಠ_ಠ.clutz.goog.graphics.GroupElement_Instance {
    /**
     * Object representing a group of objects in a canvas.
     * This is an implementation of the goog.graphics.GroupElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param graphics The graphics creating this element.
     */
    constructor (graphics : ಠ_ಠ.clutz.goog.graphics.CanvasGraphics | null ) ;
    /**
     * Append a child to the group.  Does not draw it
     * @param element The child to append.
     */
    appendChild (element : ಠ_ಠ.clutz.goog.graphics.Element | null ) : void ;
    /**
     * Remove all drawing elements from the group.
     */
    clear ( ) : void ;
    /**
     * Draw the group.
     * @param ctx The context to draw the element in.
     */
    draw (ctx : CanvasRenderingContext2D | null ) : void ;
    /**
     * Removes an element from the group.
     * @param elem the element to remove.
     */
    removeElement (elem : ಠ_ಠ.clutz.goog.graphics.Element ) : void ;
    /**
     * Set the size of the group element.
     * @param width The width of the group element.
     * @param height The height of the group element.
     */
    setSize (width : number | string , height : number | string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.CanvasGroupElement'): typeof ಠ_ಠ.clutz.goog.graphics.CanvasGroupElement;
}
declare module 'goog:goog.graphics.CanvasGroupElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.CanvasGroupElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for canvas image elements.
   * This is an implementation of the goog.graphics.ImageElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class CanvasImageElement extends CanvasImageElement_Instance {
  }
  class CanvasImageElement_Instance extends ಠ_ಠ.clutz.goog.graphics.ImageElement_Instance {
    /**
     * Thin wrapper for canvas image elements.
     * This is an implementation of the goog.graphics.ImageElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param w Width of rectangle.
     * @param h Height of rectangle.
     * @param src Source of the image.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.CanvasGraphics | null , x : number , y : number , w : number , h : number , src : string ) ;
    /**
     * Draw the image.  Should be treated as package scope.
     * @param ctx The context to draw the element in.
     */
    draw (ctx : CanvasRenderingContext2D | null ) : void ;
    /**
     * Update the position of the image.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     */
    setPosition (x : number , y : number ) : any ;
    /**
     * Update the size of the image.
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     */
    setSize (width : number , height : number ) : any ;
    /**
     * Update the source of the image.
     * @param src Source of the image.
     */
    setSource (src : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.CanvasImageElement'): typeof ಠ_ಠ.clutz.goog.graphics.CanvasImageElement;
}
declare module 'goog:goog.graphics.CanvasImageElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.CanvasImageElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for canvas path elements.
   * This is an implementation of the goog.graphics.PathElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class CanvasPathElement extends CanvasPathElement_Instance {
  }
  class CanvasPathElement_Instance extends ಠ_ಠ.clutz.goog.graphics.PathElement_Instance {
    /**
     * Thin wrapper for canvas path elements.
     * This is an implementation of the goog.graphics.PathElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param path The path object to draw.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.CanvasGraphics | null , path : ಠ_ಠ.clutz.goog.graphics.Path , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Draw the path.  Should be treated as package scope.
     * @param ctx The context to draw the element in.
     */
    draw (ctx : CanvasRenderingContext2D | null ) : void ;
    /**
     * Update the underlying path.
     * @param path The path object to draw.
     */
    setPath (path : ಠ_ಠ.clutz.goog.graphics.Path ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.CanvasPathElement'): typeof ಠ_ಠ.clutz.goog.graphics.CanvasPathElement;
}
declare module 'goog:goog.graphics.CanvasPathElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.CanvasPathElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for canvas rectangle elements.
   * This is an implementation of the goog.graphics.RectElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class CanvasRectElement extends CanvasRectElement_Instance {
  }
  class CanvasRectElement_Instance extends ಠ_ಠ.clutz.goog.graphics.RectElement_Instance {
    /**
     * Thin wrapper for canvas rectangle elements.
     * This is an implementation of the goog.graphics.RectElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param w Width of rectangle.
     * @param h Height of rectangle.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.CanvasGraphics | null , x : number , y : number , w : number , h : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Draw the rectangle.  Should be treated as package scope.
     * @param ctx The context to draw the element in.
     */
    draw (ctx : CanvasRenderingContext2D | null ) : void ;
    /**
     * Update the position of the rectangle.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     */
    setPosition (x : number , y : number ) : any ;
    /**
     * Update the size of the rectangle.
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     */
    setSize (width : number , height : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.CanvasRectElement'): typeof ಠ_ಠ.clutz.goog.graphics.CanvasRectElement;
}
declare module 'goog:goog.graphics.CanvasRectElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.CanvasRectElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for canvas text elements.
   * This is an implementation of the goog.graphics.TextElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class CanvasTextElement extends CanvasTextElement_Instance {
  }
  class CanvasTextElement_Instance extends ಠ_ಠ.clutz.goog.graphics.TextElement_Instance {
    /**
     * Thin wrapper for canvas text elements.
     * This is an implementation of the goog.graphics.TextElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param graphics The graphics creating this element.
     * @param text The text to draw.
     * @param x1 X coordinate of start of line.
     * @param y1 Y coordinate of start of line.
     * @param x2 X coordinate of end of line.
     * @param y2 Y coordinate of end of line.
     * @param align Horizontal alignment: left (default), center, right.
     * @param font Font describing the font properties.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (graphics : ಠ_ಠ.clutz.goog.graphics.CanvasGraphics , text : string , x1 : number , y1 : number , x2 : number , y2 : number , align : string | null , font : ಠ_ಠ.clutz.goog.graphics.Font , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ;
    /**
     * Draw the text.  Should be treated as package scope.
     * @param ctx The context to draw the element in.
     */
    draw (ctx : CanvasRenderingContext2D | null ) : void ;
    /**
     * Sets the fill for this element.
     * @param fill The fill object.
     */
    setFill (fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) : void ;
    /**
     * Sets the stroke for this element.
     * @param stroke The stroke object.
     */
    setStroke (stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null ) : void ;
    /**
     * Update the displayed text of the element.
     * @param text The text to draw.
     */
    setText (text : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.CanvasTextElement'): typeof ಠ_ಠ.clutz.goog.graphics.CanvasTextElement;
}
declare module 'goog:goog.graphics.CanvasTextElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.CanvasTextElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Base class for a thin wrapper around the DOM element returned from
   * the different draw methods of the graphics.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class Element extends Element_Instance {
  }
  class Element_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Base class for a thin wrapper around the DOM element returned from
     * the different draw methods of the graphics.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null ) ;
    addEventListener (type : string , handler : ( (a : any ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capture ? : boolean , opt_handlerScope ? : Object | null ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns the underlying object.
     */
    getElement ( ) : Element | null ;
    /**
     * Returns the graphics.
     */
    getGraphics ( ) : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null ;
    getTransform ( ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    removeEventListener (type : string , handler : ( (a : any ) => any ) | { handleEvent : (a : any ) => any } | null , opt_capture ? : boolean , opt_handlerScope ? : Object | null ) : void ;
    /**
     * Set the affine transform of the element.
     * @param affineTransform The transformation applied to this element.
     */
    setTransform (affineTransform : ಠ_ಠ.clutz.goog.graphics.AffineTransform ) : void ;
    /**
     * Set the translation and rotation of the element.
     *
     * If a more general affine transform is needed than this provides
     * (e.g. skew and scale) then use setTransform.
     * @param x The x coordinate of the translation transform.
     * @param y The y coordinate of the translation transform.
     * @param rotate The angle of the rotation transform.
     * @param centerX The horizontal center of the rotation transform.
     * @param centerY The vertical center of the rotation transform.
     */
    setTransformation (x : number , y : number , rotate : number , centerX : number , centerY : number ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.Element'): typeof ಠ_ಠ.clutz.goog.graphics.Element;
}
declare module 'goog:goog.graphics.Element' {
  import alias = ಠ_ಠ.clutz.goog.graphics.Element;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Interface for a graphics ellipse element.
   * You should not construct objects from this constructor. The graphics
   * will return an implementation of this interface for you.
   */
  class EllipseElement extends EllipseElement_Instance {
  }
  class EllipseElement_Instance extends ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement_Instance {
    /**
     * Interface for a graphics ellipse element.
     * You should not construct objects from this constructor. The graphics
     * will return an implementation of this interface for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Update the center point of the ellipse.
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     */
    setCenter (a : number , b : number ) : any ;
    /**
     * Update the radius of the ellipse.
     * @param rx Radius length for the x-axis.
     * @param ry Radius length for the y-axis.
     */
    setRadius (a : number , b : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.EllipseElement'): typeof ಠ_ಠ.clutz.goog.graphics.EllipseElement;
}
declare module 'goog:goog.graphics.EllipseElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.EllipseElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Creates a fill object
   */
  class Fill extends Fill_Instance {
  }
  class Fill_Instance {
    private noStructuralTyping_: any;
    getColor1 ( ) : string ;
    getColor2 ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.Fill'): typeof ಠ_ಠ.clutz.goog.graphics.Fill;
}
declare module 'goog:goog.graphics.Fill' {
  import alias = ಠ_ಠ.clutz.goog.graphics.Fill;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * This class represents a font to be used with a renderer.
   */
  class Font extends Font_Instance {
  }
  class Font_Instance {
    private noStructuralTyping_: any;
    /**
     * This class represents a font to be used with a renderer.
     * @param size The font size.
     * @param family The font family.
     */
    constructor (size : number , family : string ) ;
    /**
     * The name of the font family to use, can be a comma separated string.
     */
    family : string ;
    /**
     * Font size.
     */
    size : number ;
    /**
     * Indication if text should be bolded
     */
    bold : boolean ;
    /**
     * Indication if text should be in italics
     */
    italic : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.Font'): typeof ಠ_ಠ.clutz.goog.graphics.Font;
}
declare module 'goog:goog.graphics.Font' {
  import alias = ಠ_ಠ.clutz.goog.graphics.Font;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Interface for a graphics group element.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class GroupElement extends GroupElement_Instance {
  }
  class GroupElement_Instance extends ಠ_ಠ.clutz.goog.graphics.Element_Instance {
    /**
     * Interface for a graphics group element.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null ) ;
    /**
     * Remove all drawing elements from the group.
     */
    clear ( ...a : any [] ) : any ;
    /**
     * Set the size of the group element.
     * @param width The width of the group element.
     * @param height The height of the group element.
     */
    setSize (a : number | string , b : number | string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.GroupElement'): typeof ಠ_ಠ.clutz.goog.graphics.GroupElement;
}
declare module 'goog:goog.graphics.GroupElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.GroupElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Interface for a graphics image element.
   * You should not construct objects from this constructor. Instead,
   * you should use {@code goog.graphics.Graphics.drawImage} and it
   * will return an implementation of this interface for you.
   */
  class ImageElement extends ImageElement_Instance {
  }
  class ImageElement_Instance extends ಠ_ಠ.clutz.goog.graphics.Element_Instance {
    /**
     * Interface for a graphics image element.
     * You should not construct objects from this constructor. Instead,
     * you should use {@code goog.graphics.Graphics.drawImage} and it
     * will return an implementation of this interface for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null ) ;
    /**
     * Update the position of the image.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     */
    setPosition (a : number , b : number ) : any ;
    /**
     * Update the size of the image.
     * @param width Width of image.
     * @param height Height of image.
     */
    setSize (a : number , b : number ) : any ;
    /**
     * Update the source of the image.
     * @param src Source of the image.
     */
    setSource (a : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.ImageElement'): typeof ಠ_ಠ.clutz.goog.graphics.ImageElement;
}
declare module 'goog:goog.graphics.ImageElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.ImageElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Creates an immutable linear gradient fill object.
   */
  class LinearGradient extends LinearGradient_Instance {
  }
  class LinearGradient_Instance extends ಠ_ಠ.clutz.goog.graphics.Fill_Instance {
    /**
     * Creates an immutable linear gradient fill object.
     * @param x1 Start X position of the gradient.
     * @param y1 Start Y position of the gradient.
     * @param x2 End X position of the gradient.
     * @param y2 End Y position of the gradient.
     * @param color1 Start color of the gradient.
     * @param color2 End color of the gradient.
     * @param opt_opacity1 Start opacity of the gradient, both or neither of opt_opacity1 and opt_opacity2 have to be set.
     * @param opt_opacity2 End opacity of the gradient.
     */
    constructor (x1 : number , y1 : number , x2 : number , y2 : number , color1 : string , color2 : string , opt_opacity1 ? : number | null , opt_opacity2 ? : number | null ) ;
    getColor1 ( ) : string ;
    getColor2 ( ) : string ;
    getOpacity1 ( ) : number | null ;
    getOpacity2 ( ) : number | null ;
    getX1 ( ) : number ;
    getX2 ( ) : number ;
    getY1 ( ) : number ;
    getY2 ( ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.LinearGradient'): typeof ಠ_ಠ.clutz.goog.graphics.LinearGradient;
}
declare module 'goog:goog.graphics.LinearGradient' {
  import alias = ಠ_ಠ.clutz.goog.graphics.LinearGradient;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Creates a path object. A path is a sequence of segments and may be open or
   * closed. Path uses the EVEN-ODD fill rule for determining the interior of the
   * path. A path must start with a moveTo command.
   *
   * A "simple" path does not contain any arcs and may be transformed using
   * the {@code transform} method.
   */
  class Path extends Path_Instance {
    /**
     * Creates a copy of the given path, replacing {@code arcTo} with
     * {@code arcToAsCurves}. The resulting path is simplified and can
     * be transformed.
     * @param src The path to simplify.
     */
    static createSimplifiedPath (src : ಠ_ಠ.clutz.goog.graphics.Path ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    /**
     * Returns the number of points for a segment type.
     * @param segment The segment type.
     */
    static getSegmentCount (segment : number ) : number ;
  }
  class Path_Instance {
    private noStructuralTyping_: any;
    /**
     * Appends another path to the end of this path.
     * @param path The path to append.
     */
    appendPath (path : ಠ_ಠ.clutz.goog.graphics.Path ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    /**
     * Adds a path command to draw an arc centered at the point {@code (cx, cy)}
     * with radius {@code rx} along the x-axis and {@code ry} along the y-axis from
     * {@code startAngle} through {@code extent} degrees. Positive rotation is in
     * the direction from positive x-axis to positive y-axis.
     * @param cx X coordinate of center of ellipse.
     * @param cy Y coordinate of center of ellipse.
     * @param rx Radius of ellipse on x axis.
     * @param ry Radius of ellipse on y axis.
     * @param fromAngle Starting angle measured in degrees from the positive x-axis.
     * @param extent The span of the arc in degrees.
     * @param connect If true, the starting point of the arc is connected to the current point.
     */
    arc (cx : number , cy : number , rx : number , ry : number , fromAngle : number , extent : number , connect : boolean ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    /**
     * Adds a path command to draw an arc starting at the path's current point,
     * with radius {@code rx} along the x-axis and {@code ry} along the y-axis from
     * {@code startAngle} through {@code extent} degrees. Positive rotation is in
     * the direction from positive x-axis to positive y-axis.
     *
     * This method makes the path non-simple.
     * @param rx Radius of ellipse on x axis.
     * @param ry Radius of ellipse on y axis.
     * @param fromAngle Starting angle measured in degrees from the positive x-axis.
     * @param extent The span of the arc in degrees.
     */
    arcTo (rx : number , ry : number , fromAngle : number , extent : number ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    /**
     * Same as {@code arcTo}, but approximates the arc using bezier curves.
     * .* As a result, this method does not affect the simplified status of this path.
     * The algorithm is adapted from {@code java.awt.geom.ArcIterator}.
     * @param rx Radius of ellipse on x axis.
     * @param ry Radius of ellipse on y axis.
     * @param fromAngle Starting angle measured in degrees from the positive x-axis.
     * @param extent The span of the arc in degrees.
     */
    arcToAsCurves (rx : number , ry : number , fromAngle : number , extent : number ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    /**
     * Clears the path.
     */
    clear ( ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    clone ( ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    /**
     * Adds a path command to close the path by connecting the
     * last point to the first point.
     */
    close ( ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    /**
     * Creates a transformed copy of this path. The path is simplified
     * {@see #createSimplifiedPath} prior to transformation.
     * @param tx The transformation to perform.
     */
    createTransformedPath (tx : ಠ_ಠ.clutz.goog.graphics.AffineTransform ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    /**
     * Adds points to the path by drawing cubic Bezier curves. Each curve is
     * specified using 3 points (6 coordinates) - two control points and the end
     * point of the curve.
     * @param var_args The coordinates specifying each curve in sets of 6 points: {@code [x1, y1]} the first control point, {@code [x2, y2]} the second control point and {@code [x, y]} the end point.
     */
    curveTo ( ...var_args : ( number | undefined ) [] ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    /**
     * Iterates over the path calling the supplied callback once for each path
     * segment. The arguments to the callback function are the segment type and
     * an array of its arguments.
     *
     * The {@code LINETO} and {@code CURVETO} arrays can contain multiple
     * segments of the same type. The number of segments is the length of the
     * array divided by the segment length (2 for lines, 6 for  curves).
     *
     * As a convenience the {@code ARCTO} segment also includes the end point as the
     * last two arguments: {@code rx, ry, fromAngle, extent, x, y}.
     * @param callback The function to call with each path segment.
     */
    forEachSegment (callback : (a : number , b : any [] | null ) => any ) : void ;
    /**
     * Returns the coordinates most recently added to the end of the path.
     */
    getCurrentPoint ( ) : number [] | null ;
    isEmpty ( ) : boolean ;
    /**
     * Returns true if this path contains no arcs. Simplified paths can be
     * created using {@code createSimplifiedPath}.
     */
    isSimple ( ) : boolean ;
    /**
     * Adds points to the path by drawing a straight line to each point.
     * @param var_args The coordinates of each destination point as x, y value pairs.
     */
    lineTo ( ...var_args : ( number | undefined ) [] ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    /**
     * Adds a point to the path by moving to the specified point. Repeated moveTo
     * commands are collapsed into a single moveTo.
     * @param x X coordinate of destination point.
     * @param y Y coordinate of destination point.
     */
    moveTo (x : number , y : number ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    /**
     * Transforms the path. Only simple paths are transformable. Attempting
     * to transform a non-simple path will throw an error.
     * @param tx The transformation to perform.
     */
    transform (tx : ಠ_ಠ.clutz.goog.graphics.AffineTransform ) : ಠ_ಠ.clutz.goog.graphics.Path ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.Path'): typeof ಠ_ಠ.clutz.goog.graphics.Path;
}
declare module 'goog:goog.graphics.Path' {
  import alias = ಠ_ಠ.clutz.goog.graphics.Path;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.Path {
  /**
   * Path segment types.
   */
  type Segment = number ;
  var Segment : {
    ARCTO : Segment ,
    CLOSE : Segment ,
    CURVETO : Segment ,
    LINETO : Segment ,
    MOVETO : Segment ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.Path.Segment'): typeof ಠ_ಠ.clutz.goog.graphics.Path.Segment;
}
declare module 'goog:goog.graphics.Path.Segment' {
  import alias = ಠ_ಠ.clutz.goog.graphics.Path.Segment;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Interface for a graphics path element.
   * You should not construct objects from this constructor. The graphics
   * will return an implementation of this interface for you.
   */
  class PathElement extends PathElement_Instance {
  }
  class PathElement_Instance extends ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement_Instance {
    /**
     * Interface for a graphics path element.
     * You should not construct objects from this constructor. The graphics
     * will return an implementation of this interface for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Update the underlying path.
     * @param path The path object to draw.
     */
    setPath (a : ಠ_ಠ.clutz.goog.graphics.Path ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.PathElement'): typeof ಠ_ಠ.clutz.goog.graphics.PathElement;
}
declare module 'goog:goog.graphics.PathElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.PathElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Interface for a graphics rectangle element.
   * You should not construct objects from this constructor. The graphics
   * will return an implementation of this interface for you.
   */
  class RectElement extends RectElement_Instance {
  }
  class RectElement_Instance extends ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement_Instance {
    /**
     * Interface for a graphics rectangle element.
     * You should not construct objects from this constructor. The graphics
     * will return an implementation of this interface for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Update the position of the rectangle.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     */
    setPosition (a : number , b : number ) : any ;
    /**
     * Update the size of the rectangle.
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     */
    setSize (a : number , b : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.RectElement'): typeof ಠ_ಠ.clutz.goog.graphics.RectElement;
}
declare module 'goog:goog.graphics.RectElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.RectElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Creates an immutable solid color fill object.
   */
  class SolidFill extends SolidFill_Instance {
  }
  class SolidFill_Instance extends ಠ_ಠ.clutz.goog.graphics.Fill_Instance {
    /**
     * Creates an immutable solid color fill object.
     * @param color The color of the background.
     * @param opt_opacity The opacity of the background fill. The value must be greater than or equal to zero (transparent) and less than or equal to 1 (opaque).
     */
    constructor (color : string , opt_opacity ? : number ) ;
    getColor ( ) : string ;
    getOpacity ( ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.SolidFill'): typeof ಠ_ಠ.clutz.goog.graphics.SolidFill;
}
declare module 'goog:goog.graphics.SolidFill' {
  import alias = ಠ_ಠ.clutz.goog.graphics.SolidFill;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Creates an immutable stroke object.
   */
  class Stroke extends Stroke_Instance {
  }
  class Stroke_Instance {
    private noStructuralTyping_: any;
    /**
     * Creates an immutable stroke object.
     * @param width The width of the stroke.
     * @param color The color of the stroke.
     * @param opt_opacity The opacity of the background fill. The value must be greater than or equal to zero (transparent) and less than or equal to 1 (opaque).
     */
    constructor (width : number | string , color : string , opt_opacity ? : number ) ;
    getColor ( ) : string ;
    getOpacity ( ) : number ;
    getWidth ( ) : number | string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.Stroke'): typeof ಠ_ಠ.clutz.goog.graphics.Stroke;
}
declare module 'goog:goog.graphics.Stroke' {
  import alias = ಠ_ಠ.clutz.goog.graphics.Stroke;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Interface for a graphics element with a stroke and fill.
   * This is the base interface for ellipse, rectangle and other
   * shape interfaces.
   * You should not construct objects from this constructor. The graphics
   * will return an implementation of this interface for you.
   */
  class StrokeAndFillElement extends StrokeAndFillElement_Instance {
  }
  class StrokeAndFillElement_Instance extends ಠ_ಠ.clutz.goog.graphics.Element_Instance {
    /**
     * Interface for a graphics element with a stroke and fill.
     * This is the base interface for ellipse, rectangle and other
     * shape interfaces.
     * You should not construct objects from this constructor. The graphics
     * will return an implementation of this interface for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * The latest fill applied to this element.
     */
    fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ;
    getFill ( ) : ಠ_ಠ.clutz.goog.graphics.Fill | null ;
    getStroke ( ) : ಠ_ಠ.clutz.goog.graphics.Stroke | null ;
    /**
     * Re-strokes the element to react to coordinate size changes.
     */
    reapplyStroke ( ) : void ;
    /**
     * Sets the fill for this element.
     * @param fill The fill object.
     */
    setFill (fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) : void ;
    /**
     * Sets the stroke for this element.
     * @param stroke The stroke object.
     */
    setStroke (stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.StrokeAndFillElement'): typeof ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement;
}
declare module 'goog:goog.graphics.StrokeAndFillElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for SVG ellipse elements.
   * This is an implementation of the goog.graphics.EllipseElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class SvgEllipseElement extends SvgEllipseElement_Instance {
  }
  class SvgEllipseElement_Instance extends ಠ_ಠ.clutz.goog.graphics.EllipseElement_Instance {
    /**
     * Thin wrapper for SVG ellipse elements.
     * This is an implementation of the goog.graphics.EllipseElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.SvgGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Update the center point of the ellipse.
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     */
    setCenter (cx : number , cy : number ) : any ;
    /**
     * Update the radius of the ellipse.
     * @param rx Radius length for the x-axis.
     * @param ry Radius length for the y-axis.
     */
    setRadius (rx : number , ry : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.SvgEllipseElement'): typeof ಠ_ಠ.clutz.goog.graphics.SvgEllipseElement;
}
declare module 'goog:goog.graphics.SvgEllipseElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.SvgEllipseElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * A Graphics implementation for drawing using SVG.
   */
  class SvgGraphics extends SvgGraphics_Instance {
    /**
     * Returns a string representation of a logical path suitable for use in
     * an SVG element.
     * @param path The logical path.
     */
    static getSvgPath (path : ಠ_ಠ.clutz.goog.graphics.Path | null ) : string ;
  }
  class SvgGraphics_Instance extends ಠ_ಠ.clutz.goog.graphics.AbstractGraphics_Instance {
    /**
     * A Graphics implementation for drawing using SVG.
     * @param width The width in pixels.  Strings expressing percentages of parent with (e.g. '80%') are also accepted.
     * @param height The height in pixels.  Strings expressing percentages of parent with (e.g. '80%') are also accepted.
     * @param opt_coordWidth The coordinate width - if omitted or null, defaults to same as width.
     * @param opt_coordHeight The coordinate height - if omitted or null, defaults to same as height.
     * @param opt_domHelper The DOM helper object for the document we want to render in.
     */
    constructor (width : string | number , height : string | number , opt_coordWidth ? : number | null , opt_coordHeight ? : number | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    canvasElement : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ;
    coordLeft : number ;
    coordTop : number ;
    /**
     * Adds a definition of an element to the global definitions.
     * @param defKey This is a key that should be unique in a way that if two definitions are equal the should have the same key.
     * @param defElement DOM element to add as a definition. It must have an id attribute set.
     */
    addDef (defKey : string , defElement : Element | null ) : string ;
    /**
     * Remove all drawing elements from the graphics.
     */
    clear ( ) : void ;
    /**
     * Creates the DOM representation of the graphics area.
     */
    createDom ( ) : void ;
    /**
     * Create an empty group of drawing elements.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    createGroup (opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.GroupElement ;
    /**
     * Disposes of the component by removing event handlers, detacing DOM nodes from
     * the document body, and removing references to them.
     */
    disposeInternal ( ) : void ;
    /**
     * Draw an ellipse.
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     * @param rx Radius length for the x-axis.
     * @param ry Radius length for the y-axis.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawEllipse (cx : number , cy : number , rx : number , ry : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.EllipseElement ;
    /**
     * Draw an image.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param width Width of the image.
     * @param height Height of the image.
     * @param src The source fo the image.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawImage (x : number , y : number , width : number , height : number , src : string , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.ImageElement ;
    /**
     * Draw a path.
     * @param path The path object to draw.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawPath (path : ಠ_ಠ.clutz.goog.graphics.Path , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.PathElement ;
    /**
     * Draw a rectangle.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawRect (x : number , y : number , width : number , height : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.RectElement ;
    /**
     * Draw a text string vertically centered on a given line.
     * @param text The text to draw.
     * @param x1 X coordinate of start of line.
     * @param y1 Y coordinate of start of line.
     * @param x2 X coordinate of end of line.
     * @param y2 Y coordinate of end of line.
     * @param align Horizontal alignment: left (default), center, right.
     * @param font Font describing the font properties.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawTextOnLine (text : string , x1 : number , y1 : number , x2 : number , y2 : number , align : string , font : ಠ_ಠ.clutz.goog.graphics.Font | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.TextElement ;
    enterDocument ( ) : void ;
    exitDocument ( ) : void ;
    /**
     * Returns the id of a definition element.
     * @param defKey This is a key that should be unique in a way that if two definitions are equal the should have the same key.
     */
    getDef (defKey : string ) : string | null ;
    getPixelSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
    /**
     * Measure and return the width (in pixels) of a given text string.
     * Text measurement is needed to make sure a text can fit in the allocated area.
     * The way text length is measured is by writing it into a div that is after
     * the visible area, measure the div width, and immediately erase the written
     * value.
     */
    getTextWidth (text : string , font : ಠ_ಠ.clutz.goog.graphics.Font | null ) : number ;
    isDomClonable ( ) : boolean ;
    /**
     * Removes a definition of an elemnt from the global definitions.
     * @param defKey This is a key that should be unique in a way that if two definitions are equal they should have the same key.
     */
    removeDef (defKey : string ) : void ;
    /**
     * Changes the coordinate system position.
     * @param left The coordinate system left bound.
     * @param top The coordinate system top bound.
     */
    setCoordOrigin (left : number , top : number ) : any ;
    /**
     * Changes the coordinate size.
     * @param coordWidth The coordinate width.
     * @param coordHeight The coordinate height.
     */
    setCoordSize (coordWidth : number , coordHeight : number ) : void ;
    /**
     * Set the transformation of an element.
     * @param element The element wrapper.
     * @param affineTransform The transformation applied to this element.
     */
    setElementAffineTransform (element : ಠ_ಠ.clutz.goog.graphics.Element | null , affineTransform : ಠ_ಠ.clutz.goog.graphics.AffineTransform ) : any ;
    /**
     * Sets properties to an SVG element. Used internally and by different
     * SVG elements.
     * @param element The svg element.
     * @param attributes Map of name-value pairs for attributes.
     */
    setElementAttributes (element : Element | null , attributes : Object | null ) : void ;
    /**
     * Sets the fill of the given element.
     * @param element The element wrapper.
     * @param fill The fill object.
     */
    setElementFill (element : ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) : any ;
    /**
     * Sets the stroke of the given element.
     * @param element The element wrapper.
     * @param stroke The stroke object.
     */
    setElementStroke (element : ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null ) : any ;
    /**
     * Set the translation and rotation of an element.
     *
     * If a more general affine transform is needed than this provides
     * (e.g. skew and scale) then use setElementAffineTransform.
     * @param element The element wrapper.
     * @param x The x coordinate of the translation transform.
     * @param y The y coordinate of the translation transform.
     * @param angle The angle of the rotation transform.
     * @param centerX The horizontal center of the rotation transform.
     * @param centerY The vertical center of the rotation transform.
     */
    setElementTransform (element : ಠ_ಠ.clutz.goog.graphics.Element | null , x : number , y : number , angle : number , centerX : number , centerY : number ) : any ;
    /**
     * Change the size of the canvas.
     * @param pixelWidth The width in pixels.
     * @param pixelHeight The height in pixels.
     */
    setSize (pixelWidth : number , pixelHeight : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.SvgGraphics'): typeof ಠ_ಠ.clutz.goog.graphics.SvgGraphics;
}
declare module 'goog:goog.graphics.SvgGraphics' {
  import alias = ಠ_ಠ.clutz.goog.graphics.SvgGraphics;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for SVG group elements.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class SvgGroupElement extends SvgGroupElement_Instance {
  }
  class SvgGroupElement_Instance extends ಠ_ಠ.clutz.goog.graphics.GroupElement_Instance {
    /**
     * Thin wrapper for SVG group elements.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.SvgGraphics | null ) ;
    /**
     * Remove all drawing elements from the group.
     */
    clear ( ) : void ;
    /**
     * Set the size of the group element.
     * @param width The width of the group element.
     * @param height The height of the group element.
     */
    setSize (width : number | string , height : number | string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.SvgGroupElement'): typeof ಠ_ಠ.clutz.goog.graphics.SvgGroupElement;
}
declare module 'goog:goog.graphics.SvgGroupElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.SvgGroupElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for SVG image elements.
   * This is an implementation of the goog.graphics.ImageElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class SvgImageElement extends SvgImageElement_Instance {
  }
  class SvgImageElement_Instance extends ಠ_ಠ.clutz.goog.graphics.ImageElement_Instance {
    /**
     * Thin wrapper for SVG image elements.
     * This is an implementation of the goog.graphics.ImageElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.SvgGraphics | null ) ;
    /**
     * Update the position of the image.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     */
    setPosition (x : number , y : number ) : any ;
    /**
     * Update the size of the image.
     * @param width Width of image.
     * @param height Height of image.
     */
    setSize (width : number , height : number ) : any ;
    /**
     * Update the source of the image.
     * @param src Source of the image.
     */
    setSource (src : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.SvgImageElement'): typeof ಠ_ಠ.clutz.goog.graphics.SvgImageElement;
}
declare module 'goog:goog.graphics.SvgImageElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.SvgImageElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for SVG path elements.
   * This is an implementation of the goog.graphics.PathElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class SvgPathElement extends SvgPathElement_Instance {
  }
  class SvgPathElement_Instance extends ಠ_ಠ.clutz.goog.graphics.PathElement_Instance {
    /**
     * Thin wrapper for SVG path elements.
     * This is an implementation of the goog.graphics.PathElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.SvgGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Update the underlying path.
     * @param path The path object to draw.
     */
    setPath (path : ಠ_ಠ.clutz.goog.graphics.Path ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.SvgPathElement'): typeof ಠ_ಠ.clutz.goog.graphics.SvgPathElement;
}
declare module 'goog:goog.graphics.SvgPathElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.SvgPathElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for SVG rectangle elements.
   * This is an implementation of the goog.graphics.RectElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class SvgRectElement extends SvgRectElement_Instance {
  }
  class SvgRectElement_Instance extends ಠ_ಠ.clutz.goog.graphics.RectElement_Instance {
    /**
     * Thin wrapper for SVG rectangle elements.
     * This is an implementation of the goog.graphics.RectElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.SvgGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Update the position of the rectangle.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     */
    setPosition (x : number , y : number ) : any ;
    /**
     * Update the size of the rectangle.
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     */
    setSize (width : number , height : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.SvgRectElement'): typeof ಠ_ಠ.clutz.goog.graphics.SvgRectElement;
}
declare module 'goog:goog.graphics.SvgRectElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.SvgRectElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for SVG text elements.
   * This is an implementation of the goog.graphics.TextElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class SvgTextElement extends SvgTextElement_Instance {
  }
  class SvgTextElement_Instance extends ಠ_ಠ.clutz.goog.graphics.TextElement_Instance {
    /**
     * Thin wrapper for SVG text elements.
     * This is an implementation of the goog.graphics.TextElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.SvgGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Update the displayed text of the element.
     * @param text The text to draw.
     */
    setText (text : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.SvgTextElement'): typeof ಠ_ಠ.clutz.goog.graphics.SvgTextElement;
}
declare module 'goog:goog.graphics.SvgTextElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.SvgTextElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Interface for a graphics text element.
   * You should not construct objects from this constructor. The graphics
   * will return an implementation of this interface for you.
   */
  class TextElement extends TextElement_Instance {
  }
  class TextElement_Instance extends ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement_Instance {
    /**
     * Interface for a graphics text element.
     * You should not construct objects from this constructor. The graphics
     * will return an implementation of this interface for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Update the displayed text of the element.
     * @param text The text to draw.
     */
    setText (a : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.TextElement'): typeof ಠ_ಠ.clutz.goog.graphics.TextElement;
}
declare module 'goog:goog.graphics.TextElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.TextElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for VML ellipse elements.
   * This is an implementation of the goog.graphics.EllipseElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class VmlEllipseElement extends VmlEllipseElement_Instance {
  }
  class VmlEllipseElement_Instance extends ಠ_ಠ.clutz.goog.graphics.EllipseElement_Instance {
    /**
     * Thin wrapper for VML ellipse elements.
     * This is an implementation of the goog.graphics.EllipseElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     * @param rx Radius length for the x-axis.
     * @param ry Radius length for the y-axis.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.VmlGraphics | null , cx : number , cy : number , rx : number , ry : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * X coordinate of the ellipse center.
     */
    cx : number ;
    /**
     * Y coordinate of the ellipse center.
     */
    cy : number ;
    id_ : string ;
    /**
     * Radius length for the x-axis.
     */
    rx : number ;
    /**
     * Radius length for the y-axis.
     */
    ry : number ;
    /**
     * Update the center point of the ellipse.
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     */
    setCenter (cx : number , cy : number ) : any ;
    /**
     * Update the radius of the ellipse.
     * @param rx Center X coordinate.
     * @param ry Center Y coordinate.
     */
    setRadius (rx : number , ry : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.VmlEllipseElement'): typeof ಠ_ಠ.clutz.goog.graphics.VmlEllipseElement;
}
declare module 'goog:goog.graphics.VmlEllipseElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.VmlEllipseElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * A Graphics implementation for drawing using VML.
   */
  class VmlGraphics extends VmlGraphics_Instance {
    /**
     * The coordinate multiplier to allow sub-pixel rendering
     */
    static COORD_MULTIPLIER : number ;
    /**
     * Returns a string representation of a logical path suitable for use in
     * a VML element.
     * @param path The logical path.
     */
    static getVmlPath (path : ಠ_ಠ.clutz.goog.graphics.Path | null ) : string ;
    /**
     * Sets an attribute on the given VML element, in the way best suited to the
     * current version of IE.  Should only be used in the goog.graphics package.
     * @param element The element to set an attribute on.
     * @param name The name of the attribute to set.
     * @param value The value to set it to.
     */
    static setAttribute (element : Element | null , name : string , value : string ) : void ;
    /**
     * Set top, left, width and height for an element.
     * This function is internal for the VML supporting classes, and
     * should not be used externally.
     * @param element DOM element.
     * @param left Left ccordinate in pixels.
     * @param top Top ccordinate in pixels.
     * @param width Width in pixels.
     * @param height Height in pixels.
     */
    static setPositionAndSize (element : Element | null , left : number , top : number , width : number , height : number ) : void ;
    /**
     * Converts the given size to a css size.  If it is a percentage, leaves it
     * alone.  Otherwise assumes px.
     * @param size The size to use.
     */
    static toCssSize (size : number | string ) : string ;
    /**
     * Multiplies positioning coordinates by COORD_MULTIPLIER to allow sub-pixel
     * coordinates.  Also adds a half pixel offset to match SVG.
     *
     * This function is internal for the VML supporting classes, and
     * should not be used externally.
     * @param number A position in pixels.
     */
    static toPosCoord (number : number | string ) : number ;
    /**
     * Add a "px" suffix to a number of pixels, and multiplies all coordinates by
     * COORD_MULTIPLIER to allow sub-pixel coordinates.
     *
     * This function is internal for the VML supporting classes, and
     * should not be used externally.
     * @param number A position in pixels.
     */
    static toPosPx (number : number | string ) : string ;
    /**
     * Multiplies the width or height coordinate by COORD_MULTIPLIER to allow
     * sub-pixel coordinates.
     *
     * This function is internal for the VML supporting classes, and
     * should not be used externally.
     * @param number A size in units.
     */
    static toSizeCoord (number : string | number ) : number ;
    /**
     * Add a "px" suffix to a number of pixels, and multiplies all coordinates by
     * COORD_MULTIPLIER to allow sub-pixel coordinates.
     *
     * This function is internal for the VML supporting classes, and
     * should not be used externally.
     * @param number A size in pixels.
     */
    static toSizePx (number : number | string ) : string ;
  }
  class VmlGraphics_Instance extends ಠ_ಠ.clutz.goog.graphics.AbstractGraphics_Instance {
    /**
     * A Graphics implementation for drawing using VML.
     * @param width The (non-zero) width in pixels.  Strings expressing percentages of parent with (e.g. '80%') are also accepted.
     * @param height The (non-zero) height in pixels.  Strings expressing percentages of parent with (e.g. '80%') are also accepted.
     * @param opt_coordWidth The coordinate width - if omitted or null, defaults to same as width.
     * @param opt_coordHeight The coordinate height - if omitted or null, defaults to same as height.
     * @param opt_domHelper The DOM helper object for the document we want to render in.
     */
    constructor (width : string | number , height : string | number , opt_coordWidth ? : number | null , opt_coordHeight ? : number | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    canvasElement : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ;
    coordLeft : number ;
    coordTop : number ;
    /**
     * Remove all drawing elements from the graphics.
     */
    clear ( ) : void ;
    /**
     * Creates the DOM representation of the graphics area.
     */
    createDom ( ) : void ;
    /**
     * Create an empty group of drawing elements.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    createGroup (opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.GroupElement ;
    /**
     * Creates a VML element. Used internally and by different VML classes.
     * @param tagName The type of element to create.
     */
    createVmlElement (tagName : string ) : Element ;
    /**
     * Disposes of the component by removing event handlers, detacing DOM nodes from
     * the document body, and removing references to them.
     */
    disposeInternal ( ) : void ;
    /**
     * Draw an ellipse.
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     * @param rx Radius length for the x-axis.
     * @param ry Radius length for the y-axis.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawEllipse (cx : number , cy : number , rx : number , ry : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.EllipseElement ;
    /**
     * Draw an image.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param width Width of image.
     * @param height Height of image.
     * @param src Source of the image.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawImage (x : number , y : number , width : number , height : number , src : string , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.ImageElement ;
    /**
     * Draw a path.
     * @param path The path object to draw.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawPath (path : ಠ_ಠ.clutz.goog.graphics.Path , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.PathElement ;
    /**
     * Draw a rectangle.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawRect (x : number , y : number , width : number , height : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.RectElement ;
    /**
     * Draw a text string vertically centered on a given line.
     * @param text The text to draw.
     * @param x1 X coordinate of start of line.
     * @param y1 Y coordinate of start of line.
     * @param x2 X coordinate of end of line.
     * @param y2 Y coordinate of end of line.
     * @param align Horizontal alignment: left (default), center, right.
     * @param font Font describing the font properties.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawTextOnLine (text : string , x1 : number , y1 : number , x2 : number , y2 : number , align : string | null , font : ಠ_ಠ.clutz.goog.graphics.Font | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.TextElement ;
    enterDocument ( ) : void ;
    getPixelSize ( ) : ಠ_ಠ.clutz.goog.math.Size ;
    /**
     * Measure and return the width (in pixels) of a given text string.
     * Text measurement is needed to make sure a text can fit in the allocated
     * area. The way text length is measured is by writing it into a div that is
     * after the visible area, measure the div width, and immediately erase the
     * written value.
     * @param text The text string to measure.
     * @param font The font object describing the font style.
     */
    getTextWidth (text : string , font : ಠ_ಠ.clutz.goog.graphics.Font | null ) : number ;
    /**
     * Returns the VML element with the given id that is a child of this graphics
     * object.
     * Should be considered package private, and not used externally.
     * @param id The element id to find.
     */
    getVmlElement (id : string ) : Element | null ;
    /**
     * Changes the coordinate system position.
     * @param left The coordinate system left bound.
     * @param top The coordinate system top bound.
     */
    setCoordOrigin (left : number , top : number ) : any ;
    /**
     * Changes the coordinate size.
     * @param coordWidth The coordinate width.
     * @param coordHeight The coordinate height.
     */
    setCoordSize (coordWidth : number , coordHeight : number ) : void ;
    /**
     * Set the transformation of an element.
     * @param element The element wrapper.
     * @param affineTransform The transformation applied to this element.
     */
    setElementAffineTransform (element : ಠ_ಠ.clutz.goog.graphics.Element , affineTransform : ಠ_ಠ.clutz.goog.graphics.AffineTransform ) : any ;
    /**
     * Sets the fill for the given element.
     * @param element The element wrapper.
     * @param fill The fill object.
     */
    setElementFill (element : ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) : any ;
    /**
     * Sets the stroke for the given element.
     * @param element The element wrapper.
     * @param stroke The stroke object.
     */
    setElementStroke (element : ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null ) : any ;
    /**
     * Set the translation and rotation of an element.
     *
     * If a more general affine transform is needed than this provides
     * (e.g. skew and scale) then use setElementAffineTransform.
     * @param element The element wrapper.
     * @param x The x coordinate of the translation transform.
     * @param y The y coordinate of the translation transform.
     * @param angle The angle of the rotation transform.
     * @param centerX The horizontal center of the rotation transform.
     * @param centerY The vertical center of the rotation transform.
     */
    setElementTransform (element : ಠ_ಠ.clutz.goog.graphics.Element | null , x : number , y : number , angle : number , centerX : number , centerY : number ) : any ;
    /**
     * Change the size of the canvas.
     * @param pixelWidth The width in pixels.
     * @param pixelHeight The height in pixels.
     */
    setSize (pixelWidth : number , pixelHeight : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.VmlGraphics'): typeof ಠ_ಠ.clutz.goog.graphics.VmlGraphics;
}
declare module 'goog:goog.graphics.VmlGraphics' {
  import alias = ಠ_ಠ.clutz.goog.graphics.VmlGraphics;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for VML group elements.
   * This is an implementation of the goog.graphics.GroupElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class VmlGroupElement extends VmlGroupElement_Instance {
  }
  class VmlGroupElement_Instance extends ಠ_ಠ.clutz.goog.graphics.GroupElement_Instance {
    /**
     * Thin wrapper for VML group elements.
     * This is an implementation of the goog.graphics.GroupElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.VmlGraphics | null ) ;
    id_ : string ;
    /**
     * Remove all drawing elements from the group.
     */
    clear ( ) : void ;
    /**
     * Set the size of the group element.
     * @param width The width of the group element.
     * @param height The height of the group element.
     */
    setSize (width : number | string , height : number | string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.VmlGroupElement'): typeof ಠ_ಠ.clutz.goog.graphics.VmlGroupElement;
}
declare module 'goog:goog.graphics.VmlGroupElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.VmlGroupElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for VML image elements.
   * This is an implementation of the goog.graphics.ImageElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class VmlImageElement extends VmlImageElement_Instance {
  }
  class VmlImageElement_Instance extends ಠ_ಠ.clutz.goog.graphics.ImageElement_Instance {
    /**
     * Thin wrapper for VML image elements.
     * This is an implementation of the goog.graphics.ImageElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.VmlGraphics | null ) ;
    id_ : string ;
    /**
     * Update the position of the image.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     */
    setPosition (x : number , y : number ) : any ;
    /**
     * Update the size of the image.
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     */
    setSize (width : number , height : number ) : any ;
    /**
     * Update the source of the image.
     * @param src Source of the image.
     */
    setSource (src : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.VmlImageElement'): typeof ಠ_ಠ.clutz.goog.graphics.VmlImageElement;
}
declare module 'goog:goog.graphics.VmlImageElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.VmlImageElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for VML path elements.
   * This is an implementation of the goog.graphics.PathElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class VmlPathElement extends VmlPathElement_Instance {
  }
  class VmlPathElement_Instance extends ಠ_ಠ.clutz.goog.graphics.PathElement_Instance {
    /**
     * Thin wrapper for VML path elements.
     * This is an implementation of the goog.graphics.PathElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.VmlGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    id_ : string ;
    /**
     * Update the underlying path.
     * @param path The path object to draw.
     */
    setPath (path : ಠ_ಠ.clutz.goog.graphics.Path ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.VmlPathElement'): typeof ಠ_ಠ.clutz.goog.graphics.VmlPathElement;
}
declare module 'goog:goog.graphics.VmlPathElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.VmlPathElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for VML rectangle elements.
   * This is an implementation of the goog.graphics.RectElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class VmlRectElement extends VmlRectElement_Instance {
  }
  class VmlRectElement_Instance extends ಠ_ಠ.clutz.goog.graphics.RectElement_Instance {
    /**
     * Thin wrapper for VML rectangle elements.
     * This is an implementation of the goog.graphics.RectElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.VmlGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    id_ : string ;
    /**
     * Update the position of the rectangle.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     */
    setPosition (x : number , y : number ) : any ;
    /**
     * Update the size of the rectangle.
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     */
    setSize (width : number , height : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.VmlRectElement'): typeof ಠ_ಠ.clutz.goog.graphics.VmlRectElement;
}
declare module 'goog:goog.graphics.VmlRectElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.VmlRectElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for VML text elements.
   * This is an implementation of the goog.graphics.TextElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class VmlTextElement extends VmlTextElement_Instance {
  }
  class VmlTextElement_Instance extends ಠ_ಠ.clutz.goog.graphics.TextElement_Instance {
    /**
     * Thin wrapper for VML text elements.
     * This is an implementation of the goog.graphics.TextElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : Element | null , graphics : ಠ_ಠ.clutz.goog.graphics.VmlGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    id_ : string ;
    /**
     * Update the displayed text of the element.
     * @param text The text to draw.
     */
    setText (text : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.VmlTextElement'): typeof ಠ_ಠ.clutz.goog.graphics.VmlTextElement;
}
declare module 'goog:goog.graphics.VmlTextElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.VmlTextElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
}
declare module 'goog:goog.graphics.ext' {
  import alias = ಠ_ಠ.clutz.goog.graphics.ext;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
  /**
   * Base class for a wrapper around the goog.graphics wrapper that enables
   * more advanced functionality.
   */
  class Element extends Element_Instance {
  }
  class Element_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Base class for a wrapper around the goog.graphics wrapper that enables
     * more advanced functionality.
     * @param group Parent for this element.
     * @param wrapper The thin wrapper to wrap.
     */
    constructor (group : ಠ_ಠ.clutz.goog.graphics.ext.Group | null , wrapper : ಠ_ಠ.clutz.goog.graphics.Element | null ) ;
    /**
     * Overridable function for subclass specific parent dependency.
     */
    checkParentDependent ( ) : boolean ;
    disposeInternal ( ) : void ;
    getBottom ( ) : number ;
    getCenter ( ) : number ;
    getGraphics ( ) : ಠ_ಠ.clutz.goog.graphics.ext.Element | null ;
    /**
     * Returns the graphics implementation.
     */
    getGraphicsImplementation ( ) : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null ;
    getHeight ( ) : number ;
    getLeft ( ) : number ;
    getMaxX ( ) : number ;
    getMaxY ( ) : number ;
    getMiddle ( ) : number ;
    getMinHeight ( ) : number ;
    getMinWidth ( ) : number ;
    getParent ( ) : ಠ_ಠ.clutz.goog.graphics.ext.Group | null | undefined ;
    getPixelScaleX ( ) : number ;
    getPixelScaleY ( ) : number ;
    getRight ( ) : number ;
    getRotation ( ) : number ;
    getTop ( ) : number ;
    getWidth ( ) : number ;
    getWrapper ( ) : ಠ_ಠ.clutz.goog.graphics.Element | null ;
    /**
     * Returns whether this element's bounds depend on its parents.
     *
     * This function should be treated as if it has package scope.
     */
    isParentDependent ( ) : boolean ;
    isPendingTransform ( ) : boolean ;
    /**
     * Called by the parent when the parent has transformed.
     *
     * Should be treated as package scope.
     */
    parentTransform ( ) : void ;
    /**
     * Overridable function for subclass specific reset.
     */
    redraw ( ) : void ;
    /**
     * Reset the element.  This is called when the element changes size, or when
     * the coordinate system changes in a way that would affect pixel based
     * rendering
     */
    reset ( ) : void ;
    /**
     * Sets the bottom coordinate of the element.  Overwrites any previous value of
     * top, middle, or bottom for this element.
     * @param bottom The bottom coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setBottom (bottom : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Shortcut for setting the left, top, width, and height.
     * @param left The left coordinate.
     * @param top The top coordinate.
     * @param width The new width value.
     * @param height The new height value.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setBounds (left : string | number , top : string | number , width : string | number , height : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the center coordinate of the element.  Overwrites any previous value of
     * left, center, or right for this element.
     * @param center The center coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setCenter (center : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the height of the element.
     * @param height The new height value.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setHeight (height : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the left coordinate of the element.  Overwrites any previous value of
     * left, center, or right for this element.
     * @param left The left coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setLeft (left : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the middle coordinate of the element.  Overwrites any previous value of
     * top, middle, or bottom for this element
     * @param middle The middle coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setMiddle (middle : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the minimum height of the element.
     * @param minHeight The minimum height of the element.
     */
    setMinHeight (minHeight : string | number ) : void ;
    /**
     * Sets the minimum width of the element.
     * @param minWidth The minimum width of the element.
     */
    setMinWidth (minWidth : string | number ) : void ;
    /**
     * Shortcut for setting the left and top position.
     * @param left The left coordinate.
     * @param top The top coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setPosition (left : string | number , top : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the right coordinate of the element.  Overwrites any previous value of
     * left, center, or right for this element.
     * @param right The right coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setRight (right : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Set the rotation of this element.
     * @param angle The angle of rotation, in degrees.
     */
    setRotation (angle : number ) : void ;
    /**
     * Shortcut for setting the width and height.
     * @param width The new width value.
     * @param height The new height value.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setSize (width : string | number , height : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the top coordinate of the element.  Overwrites any previous value of
     * top, middle, or bottom for this element.
     * @param top The top coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setTop (top : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the width of the element.
     * @param width The new width value.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setWidth (width : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Performs a pending transform.
     */
    transform ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.ext.Element'): typeof ಠ_ಠ.clutz.goog.graphics.ext.Element;
}
declare module 'goog:goog.graphics.ext.Element' {
  import alias = ಠ_ಠ.clutz.goog.graphics.ext.Element;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
  /**
   * Wrapper for a graphics ellipse element.
   */
  class Ellipse extends Ellipse_Instance {
  }
  class Ellipse_Instance extends ಠ_ಠ.clutz.goog.graphics.ext.StrokeAndFillElement_Instance {
    /**
     * Wrapper for a graphics ellipse element.
     * @param group Parent for this element.
     */
    constructor (group : ಠ_ಠ.clutz.goog.graphics.ext.Group | null ) ;
    /**
     * Redraw the ellipse.  Called when the coordinate system is changed.
     */
    redraw ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.ext.Ellipse'): typeof ಠ_ಠ.clutz.goog.graphics.ext.Ellipse;
}
declare module 'goog:goog.graphics.ext.Ellipse' {
  import alias = ಠ_ಠ.clutz.goog.graphics.ext.Ellipse;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
  /**
   * Wrapper for a graphics surface.
   */
  class Graphics extends Graphics_Instance {
  }
  class Graphics_Instance extends ಠ_ಠ.clutz.goog.graphics.ext.Group_Instance {
    /**
     * Wrapper for a graphics surface.
     * @param width The width in pixels.  Strings expressing percentages of parent with (e.g. '80%') are also accepted.
     * @param height The height in pixels.  Strings expressing percentages of parent with (e.g. '80%') are also accepted.
     * @param opt_coordWidth The coordinate width - if omitted or null, defaults to same as width.
     * @param opt_coordHeight The coordinate height. - if omitted or null, defaults to same as height.
     * @param opt_domHelper The DOM helper object for the document we want to render in.
     * @param opt_isSimple Flag used to indicate the graphics object will be drawn to in a single pass, and the fastest implementation for this scenario should be favored.  NOTE: Setting to true may result in degradation of text support.
     */
    constructor (width : string | number , height : string | number , opt_coordWidth ? : number | null , opt_coordHeight ? : number | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_isSimple ? : boolean ) ;
    getCoordOrigin ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    getCoordSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
    getElement ( ) : Element | null ;
    getHeight ( ) : number ;
    getImplementation ( ) : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null ;
    getPixelScaleX ( ) : number ;
    getPixelScaleY ( ) : number ;
    getPixelSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
    getWidth ( ) : number ;
    /**
     * Called from the parent class, this method resets any pre-computed positions
     * and sizes.
     */
    redraw ( ) : void ;
    /**
     * Renders the underlying graphics.
     * @param parentElement Parent element to render the component into.
     */
    render (parentElement : Element | null ) : void ;
    /**
     * Changes the coordinate system position.
     * @param left The coordinate system left bound.
     * @param top The coordinate system top bound.
     */
    setCoordOrigin (left : number , top : number ) : void ;
    /**
     * Changes the coordinate size.
     * @param coordWidth The coordinate width.
     * @param coordHeight The coordinate height.
     */
    setCoordSize (coordWidth : number , coordHeight : number ) : void ;
    /**
     * Change the size of the canvas.
     * @param pixelWidth The width in pixels.
     * @param pixelHeight The height in pixels.
     */
    setPixelSize (pixelWidth : number , pixelHeight : number ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.ext.Graphics'): typeof ಠ_ಠ.clutz.goog.graphics.ext.Graphics;
}
declare module 'goog:goog.graphics.ext.Graphics' {
  import alias = ಠ_ಠ.clutz.goog.graphics.ext.Graphics;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
  /**
   * Wrapper for a graphics group.
   */
  class Group extends Group_Instance {
  }
  class Group_Instance extends ಠ_ಠ.clutz.goog.graphics.ext.Element_Instance {
    /**
     * Wrapper for a graphics group.
     * @param group Parent for this element. Can be null if this is a Graphics instance.
     * @param opt_wrapper The thin wrapper to wrap. If omitted, a new group will be created. Must be included when group is null.
     */
    constructor (group : ಠ_ಠ.clutz.goog.graphics.ext.Group | null , opt_wrapper ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) ;
    /**
     * Add an element to the group.  This should be treated as package local, as
     * it is called by the draw* methods.
     * @param element The element to add.
     * @param opt_chain Whether this addition is part of a longer set of element additions.
     */
    addChild (element : ಠ_ಠ.clutz.goog.graphics.ext.Element , opt_chain ? : boolean ) : void ;
    /**
     * Remove all drawing elements from the group.
     */
    clear ( ) : void ;
    /**
     * Calls the given function on each of this component's children in order.  If
     * {@code opt_obj} is provided, it will be used as the 'this' object in the
     * function when called.  The function should take two arguments:  the child
     * component and its 0-based index.  The return value is ignored.
     * @param f The function to call for every child component; should take 2 arguments (the child and its index).
     * @param opt_obj Used as the 'this' object in f when called.
     */
    forEachChild (f : ( ( ...a : any [] ) => any ) | null , opt_obj ? : Object | null ) : void ;
    getCoordinateHeight ( ) : number ;
    getCoordinateWidth ( ) : number ;
    getWrapper ( ) : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ;
    /**
     * Called from the parent class, this method resets any pre-computed positions
     * and sizes.
     */
    redraw ( ) : void ;
    /**
     * Remove an element from the group.
     * @param element The element to remove.
     */
    removeChild (element : ಠ_ಠ.clutz.goog.graphics.ext.Element | null ) : void ;
    /**
     * Reset the element.
     */
    reset ( ) : void ;
    /**
     * Transform the children that need to be transformed.
     */
    transformChildren ( ) : void ;
    /**
     * As part of the reset process, update child elements.
     */
    updateChildren ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.ext.Group'): typeof ಠ_ಠ.clutz.goog.graphics.ext.Group;
}
declare module 'goog:goog.graphics.ext.Group' {
  import alias = ಠ_ಠ.clutz.goog.graphics.ext.Group;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
  /**
   * Wrapper for a graphics image element.
   */
  class Image extends Image_Instance {
  }
  class Image_Instance extends ಠ_ಠ.clutz.goog.graphics.ext.Element_Instance {
    /**
     * Wrapper for a graphics image element.
     * @param group Parent for this element.
     * @param src The path to the image to display.
     */
    constructor (group : ಠ_ಠ.clutz.goog.graphics.ext.Group | null , src : string ) ;
    /**
     * Redraw the image.  Called when the coordinate system is changed.
     */
    redraw ( ) : void ;
    /**
     * Update the source of the image.
     * @param src Source of the image.
     */
    setSource (src : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.ext.Image'): typeof ಠ_ಠ.clutz.goog.graphics.ext.Image;
}
declare module 'goog:goog.graphics.ext.Image' {
  import alias = ಠ_ಠ.clutz.goog.graphics.ext.Image;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
  /**
   * Creates a path object
   */
  class Path extends Path_Instance {
  }
  class Path_Instance extends ಠ_ಠ.clutz.goog.graphics.Path_Instance {
    /**
     * Clones the path.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.graphics.ext.Path ;
    getBoundingBox ( ) : ಠ_ಠ.clutz.goog.math.Rect | null ;
    /**
     * Modify the bounding box of the path.  This may cause the path to be
     * simplified (i.e. arcs converted to curves) as a side-effect.
     * @param deltaX How far to translate the x coordinates.
     * @param deltaY How far to translate the y coordinates.
     * @param xFactor After translation, all x coordinates are multiplied by this number.
     * @param yFactor After translation, all y coordinates are multiplied by this number.
     */
    modifyBounds (deltaX : number , deltaY : number , xFactor : number , yFactor : number ) : ಠ_ಠ.clutz.goog.graphics.ext.Path ;
    /**
     * Transforms the path. Only simple paths are transformable. Attempting
     * to transform a non-simple path will throw an error.
     * @param tx The transformation to perform.
     */
    transform (tx : ಠ_ಠ.clutz.goog.graphics.AffineTransform ) : ಠ_ಠ.clutz.goog.graphics.ext.Path ;
    /**
     * Set the precomputed bounds.
     * @param bounds The bounds to use, or set to null to clear and recompute on the next call to getBoundingBox.
     */
    useBoundingBox (bounds : ಠ_ಠ.clutz.goog.math.Rect | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.ext.Path'): typeof ಠ_ಠ.clutz.goog.graphics.ext.Path;
}
declare module 'goog:goog.graphics.ext.Path' {
  import alias = ಠ_ಠ.clutz.goog.graphics.ext.Path;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
  /**
   * Wrapper for a graphics rectangle element.
   */
  class Rectangle extends Rectangle_Instance {
  }
  class Rectangle_Instance extends ಠ_ಠ.clutz.goog.graphics.ext.StrokeAndFillElement_Instance {
    /**
     * Wrapper for a graphics rectangle element.
     * @param group Parent for this element.
     */
    constructor (group : ಠ_ಠ.clutz.goog.graphics.ext.Group | null ) ;
    /**
     * Redraw the rectangle.  Called when the coordinate system is changed.
     */
    redraw ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.ext.Rectangle'): typeof ಠ_ಠ.clutz.goog.graphics.ext.Rectangle;
}
declare module 'goog:goog.graphics.ext.Rectangle' {
  import alias = ಠ_ಠ.clutz.goog.graphics.ext.Rectangle;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
  /**
   * Wrapper for a graphics shape element.
   */
  class Shape extends Shape_Instance {
  }
  class Shape_Instance extends ಠ_ಠ.clutz.goog.graphics.ext.StrokeAndFillElement_Instance {
    /**
     * Wrapper for a graphics shape element.
     * @param group Parent for this element.
     * @param path The path to draw.
     * @param opt_autoSize Optional flag to specify the path should automatically resize to fit the element.  Defaults to false.
     */
    constructor (group : ಠ_ಠ.clutz.goog.graphics.ext.Group | null , path : ಠ_ಠ.clutz.goog.graphics.ext.Path , opt_autoSize ? : boolean ) ;
    checkParentDependent ( ) : boolean ;
    /**
     * Get the path drawn by this shape.
     */
    getPath ( ) : ಠ_ಠ.clutz.goog.graphics.Path | null ;
    /**
     * Redraw the ellipse.  Called when the coordinate system is changed.
     */
    redraw ( ) : void ;
    /**
     * Set the path to draw.
     * @param path The path to draw.
     */
    setPath (path : ಠ_ಠ.clutz.goog.graphics.ext.Path | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.ext.Shape'): typeof ಠ_ಠ.clutz.goog.graphics.ext.Shape;
}
declare module 'goog:goog.graphics.ext.Shape' {
  import alias = ಠ_ಠ.clutz.goog.graphics.ext.Shape;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
  /**
   * Interface for a graphics element that has a stroke and fill.
   * This is the base interface for ellipse, rectangle and other
   * shape interfaces.
   * You should not construct objects from this constructor. Use a subclass.
   */
  class StrokeAndFillElement extends StrokeAndFillElement_Instance {
  }
  class StrokeAndFillElement_Instance extends ಠ_ಠ.clutz.goog.graphics.ext.Element_Instance {
    /**
     * Interface for a graphics element that has a stroke and fill.
     * This is the base interface for ellipse, rectangle and other
     * shape interfaces.
     * You should not construct objects from this constructor. Use a subclass.
     * @param group Parent for this element.
     * @param wrapper The thin wrapper to wrap.
     */
    constructor (group : ಠ_ಠ.clutz.goog.graphics.ext.Group | null , wrapper : ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement | null ) ;
    /**
     * Redraw the rectangle.  Called when the coordinate system is changed.
     */
    redraw ( ) : void ;
    /**
     * Sets the fill for this element.
     * @param fill The fill object.
     */
    setFill (fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) : void ;
    /**
     * Sets the stroke for this element.
     * @param stroke The stroke object.
     */
    setStroke (stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.ext.StrokeAndFillElement'): typeof ಠ_ಠ.clutz.goog.graphics.ext.StrokeAndFillElement;
}
declare module 'goog:goog.graphics.ext.StrokeAndFillElement' {
  import alias = ಠ_ಠ.clutz.goog.graphics.ext.StrokeAndFillElement;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext.coordinates {
  /**
   * Returns the value of the given expression in the given context.
   *
   * Should be treated as package scope.
   * @param coord The coordinate to convert.
   * @param size The size of the parent element.
   * @param scale The ratio of pixels to units.
   */
  function computeValue (coord : string | number , size : number , scale : number ) : number ;
  /**
   * Converts the given coordinate to a number value in units.
   *
   * Should be treated as package scope.
   * @param coord The coordinate to retrieve the value for.
   * @param forMaximum Whether we are computing the largest value this coordinate would be in a parent of no size.  The container size in this case should be set to the size of the current element.
   * @param containerSize The unit value of the size of the container of this element.  Should be set to the minimum width of this element if forMaximum is true.
   * @param scale The ratio of pixels to units.
   * @param opt_cache Optional (but highly recommend) object to store cached computations in.  The calling class should manage clearing out the cache when the scale or containerSize changes.
   */
  function getValue (coord : string | number , forMaximum : boolean | undefined , containerSize : number , scale : number , opt_cache ? : Object | null ) : number ;
  /**
   * Determines if the given coordinate is special - i.e. not just a number.
   * @param coord The coordinate to test.
   */
  function isSpecial (coord : string | number | null ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.ext.coordinates'): typeof ಠ_ಠ.clutz.goog.graphics.ext.coordinates;
}
declare module 'goog:goog.graphics.ext.coordinates' {
  import alias = ಠ_ಠ.clutz.goog.graphics.ext.coordinates;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.paths {
  /**
   * Defines an arrow.
   * @param a Point A.
   * @param b Point B.
   * @param aHead The size of the arrow head at point A. 0 omits the head.
   * @param bHead The size of the arrow head at point B. 0 omits the head.
   */
  function createArrow (a : ಠ_ಠ.clutz.goog.math.Coordinate | null , b : ಠ_ಠ.clutz.goog.math.Coordinate | null , aHead : number | null , bHead : number | null ) : ಠ_ಠ.clutz.goog.graphics.Path ;
  /**
   * Defines a regular n-gon by specifing the center, a vertex, and the total
   * number of vertices.
   * @param center The center point.
   * @param vertex The vertex, which implicitly defines a radius as well.
   * @param n The number of vertices.
   */
  function createRegularNGon (center : ಠ_ಠ.clutz.goog.math.Coordinate | null , vertex : ಠ_ಠ.clutz.goog.math.Coordinate | null , n : number ) : ಠ_ಠ.clutz.goog.graphics.Path ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.graphics.paths'): typeof ಠ_ಠ.clutz.goog.graphics.paths;
}
declare module 'goog:goog.graphics.paths' {
  import alias = ಠ_ಠ.clutz.goog.graphics.paths;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.history {
  /**
   * Event object dispatched after the history state has changed.
   */
  class Event extends Event_Instance {
  }
  class Event_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * Event object dispatched after the history state has changed.
     * @param token The string identifying the new history state.
     * @param isNavigation True if the event was triggered by a browser action, such as forward or back, clicking on a link, editing the URL, or calling {@code window.history.(go|back|forward)}. False if the token has been changed by a {@code setToken} or {@code replaceToken} call.
     */
    constructor (token : string , isNavigation : boolean ) ;
    /**
     * Whether the event was triggered by browser navigation.
     */
    isNavigation : boolean ;
    /**
     * The current history state.
     */
    token : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.history.Event'): typeof ಠ_ಠ.clutz.goog.history.Event;
}
declare module 'goog:goog.history.Event' {
  import alias = ಠ_ಠ.clutz.goog.history.Event;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.history {
  /**
   * Event types for goog.history.
   */
  type EventType = string ;
  var EventType : {
    NAVIGATE : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.history.EventType'): typeof ಠ_ಠ.clutz.goog.history.EventType;
}
declare module 'goog:goog.history.EventType' {
  import alias = ಠ_ಠ.clutz.goog.history.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.history {
  /**
   * An implementation compatible with goog.History that uses the HTML5
   * history APIs.
   */
  class Html5History extends Html5History_Instance {
    /**
     * Returns whether Html5History is supported.
     * @param opt_win Optional window to check.
     */
    static isSupported (opt_win ? : Window | null ) : boolean ;
  }
  class Html5History_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * An implementation compatible with goog.History that uses the HTML5
     * history APIs.
     * @param opt_win The window to listen/dispatch history events on.
     * @param opt_transformer The token transformer that is used to create URL from the token when storing token without using hash fragment.
     */
    constructor (opt_win ? : Window | null , opt_transformer ? : ಠ_ಠ.clutz.goog.history.Html5History.TokenTransformer | null ) ;
    disposeInternal ( ) : void ;
    /**
     * Gets the path prefix.
     */
    getPathPrefix ( ) : string ;
    /**
     * Returns the current token.
     */
    getToken ( ) : string ;
    /**
     * Replaces the current history state without affecting the rest of the history
     * stack.
     * @param token The history state identifier.
     * @param opt_title Optional title to associate with history entry.
     */
    replaceToken (token : string , opt_title ? : string ) : void ;
    /**
     * Starts or stops the History.  When enabled, the History object
     * will immediately fire an event for the current location. The caller can set
     * up event listeners between the call to the constructor and the call to
     * setEnabled.
     * @param enable Whether to enable history.
     */
    setEnabled (enable : boolean ) : void ;
    /**
     * Sets the path prefix to use if storing tokens in the path. The path
     * prefix should start and end with slash.
     * @param pathPrefix Sets the path prefix.
     */
    setPathPrefix (pathPrefix : string ) : void ;
    /**
     * Sets the history state.
     * @param token The history state identifier.
     * @param opt_title Optional title to associate with history entry.
     */
    setToken (token : string , opt_title ? : string ) : void ;
    /**
     * Sets whether to use the fragment to store tokens.
     * @param useFragment Whether to use the fragment.
     */
    setUseFragment (useFragment : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.history.Html5History'): typeof ಠ_ಠ.clutz.goog.history.Html5History;
}
declare module 'goog:goog.history.Html5History' {
  import alias = ಠ_ಠ.clutz.goog.history.Html5History;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.history.Html5History {
  /**
   * A token transformer that can create a URL from a history
   * token. This is used by {@code goog.history.Html5History} to create
   * URL when storing token without the hash fragment.
   *
   * Given a {@code window.location} object containing the location
   * created by {@code createUrl}, the token transformer allows
   * retrieval of the token back via {@code retrieveToken}.
   */
  interface TokenTransformer {
    /**
     * Creates a URL to be pushed into HTML5 history stack when storing
     * token without using hash fragment.
     * @param token The history token.
     * @param pathPrefix The path prefix to use when storing token in a path; always begin with a slash.
     * @param location The {@code window.location} object. Treat this object as read-only.
     */
    createUrl (token : string , pathPrefix : string , location : Location | null ) : string ;
    /**
     * Retrieves a history token given the path prefix and
     * {@code window.location} object.
     * @param pathPrefix The path prefix to use when storing token in a path; always begin with a slash.
     * @param location The {@code window.location} object. Treat this object as read-only.
     */
    retrieveToken (pathPrefix : string , location : Location | null ) : string ;
  }
}
declare module 'goog:goog.history.Html5History.TokenTransformer' {
  import alias = ಠ_ಠ.clutz.goog.history.Html5History.TokenTransformer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
  /**
   * A string that is safe to use in HTML context in DOM APIs and HTML documents.
   *
   * A SafeHtml is a string-like object that carries the security type contract
   * that its value as a string will not cause untrusted script execution when
   * evaluated as HTML in a browser.
   *
   * Values of this type are guaranteed to be safe to use in HTML contexts,
   * such as, assignment to the innerHTML DOM property, or interpolation into
   * a HTML template in HTML PC_DATA context, in the sense that the use will not
   * result in a Cross-Site-Scripting vulnerability.
   *
   * Instances of this type must be created via the factory methods
   * ({@code goog.html.SafeHtml.create}, {@code goog.html.SafeHtml.htmlEscape}),
   * etc and not by invoking its constructor.  The constructor intentionally
   * takes no parameters and the type is immutable; hence only a default instance
   * corresponding to the empty string can be obtained via constructor invocation.
   */
  class SafeHtml extends SafeHtml_Instance {
    /**
     * A SafeHtml instance corresponding to the <br> tag.
     */
    static BR : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * A SafeHtml instance corresponding to the HTML doctype: "<!DOCTYPE html>".
     */
    static DOCTYPE_HTML : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * A SafeHtml instance corresponding to the empty string.
     */
    static EMPTY : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Checks if the user agent supports sandboxed iframes.
     */
    static canUseSandboxIframe ( ) : boolean ;
    static combineAttributes (fixedAttributes : { [ key: string ]: string } , defaultAttributes : { [ key: string ]: string } , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap } | null ) : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap } ;
    /**
     * Creates a new SafeHtml object by concatenating values.
     * @param var_args Values to concatenate.
     */
    static concat ( ...var_args : ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] | undefined ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a new SafeHtml object with known directionality by concatenating the
     * values.
     * @param dir Directionality.
     * @param var_args Elements of array arguments would be processed recursively.
     */
    static concatWithDir (dir : ಠ_ಠ.clutz.goog.i18n.bidi.Dir ,  ...var_args : ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] | undefined ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml content consisting of a tag with optional attributes and
     * optional content.
     *
     * For convenience tag names and attribute names are accepted as regular
     * strings, instead of goog.string.Const. Nevertheless, you should not pass
     * user-controlled values to these parameters. Note that these parameters are
     * syntactically validated at runtime, and invalid values will result in
     * an exception.
     *
     * Example usage:
     *
     * goog.html.SafeHtml.create('br');
     * goog.html.SafeHtml.create('div', {'class': 'a'});
     * goog.html.SafeHtml.create('p', {}, 'a');
     * goog.html.SafeHtml.create('p', {}, goog.html.SafeHtml.create('br'));
     *
     * goog.html.SafeHtml.create('span', {
     * 'style': {'margin': '0'}
     * });
     *
     * To guarantee SafeHtml's type contract is upheld there are restrictions on
     * attribute values and tag names.
     *
     * - For attributes which contain script code (on*), a goog.string.Const is
     * required.
     * - For attributes which contain style (style), a goog.html.SafeStyle or a
     * goog.html.SafeStyle.PropertyMap is required.
     * - For attributes which are interpreted as URLs (e.g. src, href) a
     * goog.html.SafeUrl, goog.string.Const or string is required. If a string
     * is passed, it will be sanitized with SafeUrl.sanitize().
     * - For tags which can load code or set security relevant page metadata,
     * more specific goog.html.SafeHtml.create*() functions must be used. Tags
     * which are not supported by this function are applet, base, embed, iframe,
     * link, math, object, script, style, svg, and template.
     * @param tagName The name of the tag. Only tag names consisting of [a-zA-Z0-9-] are allowed. Tag names documented above are disallowed.
     * @param opt_attributes Mapping from attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
     * @param opt_content Content to HTML-escape and put inside the tag. This must be empty for void tags like <br>. Array elements are concatenated.
     */
    static create (tagName : string , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap } | null , opt_content ? : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml representing an iframe tag.
     *
     * This by default restricts the iframe as much as possible by setting the
     * sandbox attribute to the empty string. If the iframe requires less
     * restrictions, set the sandbox attribute as tight as possible, but do not rely
     * on the sandbox as a security feature because it is not supported by older
     * browsers. If a sandbox is essential to security (e.g. for third-party
     * frames), use createSandboxIframe which checks for browser support.
     * @param opt_src The value of the src attribute. If null or undefined src will not be set.
     * @param opt_srcdoc The value of the srcdoc attribute. If null or undefined srcdoc will not be set.
     * @param opt_attributes Mapping from attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
     * @param opt_content Content to HTML-escape and put inside the tag. Array elements are concatenated.
     */
    static createIframe (opt_src ? : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl | null , opt_srcdoc ? : ಠ_ಠ.clutz.goog.html.SafeHtml | null , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap } | null , opt_content ? : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml representing a meta refresh tag.
     * @param url Where to redirect. If a string is passed, it will be sanitized with SafeUrl.sanitize().
     * @param opt_secs Number of seconds until the page should be reloaded. Will be set to 0 if unspecified.
     */
    static createMetaRefresh (url : ಠ_ಠ.clutz.goog.html.SafeUrl | string , opt_secs ? : number ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Package-internal utility method to create SafeHtml instances.
     * @param html The string to initialize the SafeHtml object with.
     * @param dir The directionality of the SafeHtml to be constructed, or null if unknown.
     */
    static createSafeHtmlSecurityPrivateDoNotAccessOrElse (html : string , dir : ಠ_ಠ.clutz.goog.i18n.bidi.Dir | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Like create() but does not restrict which tags can be constructed.
     * @param tagName Tag name. Set or validated by caller.
     */
    static createSafeHtmlTagSecurityPrivateDoNotAccessOrElse (tagName : string , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap } | null , opt_content ? : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml representing a sandboxed iframe tag.
     *
     * The sandbox attribute is enforced in its most restrictive mode, an empty
     * string. Consequently, the security requirements for the src and srcdoc
     * attributes are relaxed compared to SafeHtml.createIframe. This function
     * will throw on browsers that do not support the sandbox attribute, as
     * determined by SafeHtml.canUseSandboxIframe.
     *
     * The SafeHtml returned by this function can trigger downloads with no
     * user interaction on Chrome (though only a few, further attempts are blocked).
     * Firefox and IE will block all downloads from the sandbox.
     * @param opt_src The value of the src attribute. If null or undefined src will not be set.
     * @param opt_srcdoc The value of the srcdoc attribute. If null or undefined srcdoc will not be set. Will not be sanitized.
     * @param opt_attributes Mapping from attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
     * @param opt_content Content to HTML-escape and put inside the tag. Array elements are concatenated.
     */
    static createSandboxIframe (opt_src ? : string | ಠ_ಠ.clutz.goog.html.SafeUrl , opt_srcdoc ? : string , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap } , opt_content ? : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml representing a script tag with the src attribute.
     * @param src The value of the src attribute.
     * @param opt_attributes Mapping from attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
     */
    static createScriptSrc (src : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap } | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml representing a style tag. The type attribute is set
     * to "text/css".
     * @param styleSheet Content to put inside the tag. Array elements are concatenated.
     * @param opt_attributes Mapping from attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
     */
    static createStyle (styleSheet : ಠ_ಠ.clutz.goog.html.SafeStyleSheet | ಠ_ಠ.clutz.goog.html.SafeStyleSheet [] , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap } | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml content with known directionality consisting of a tag with
     * optional attributes and optional content.
     * @param dir Directionality.
     */
    static createWithDir (dir : ಠ_ಠ.clutz.goog.i18n.bidi.Dir , tagName : string , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap } | null , opt_content ? : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Coerces an arbitrary object into a SafeHtml object.
     *
     * If {@code textOrHtml} is already of type {@code goog.html.SafeHtml}, the same
     * object is returned. Otherwise, {@code textOrHtml} is coerced to string, and
     * HTML-escaped. If {@code textOrHtml} is of a type that implements
     * {@code goog.i18n.bidi.DirectionalString}, its directionality, if known, is
     * preserved.
     * @param textOrHtml The text or SafeHtml to coerce.
     */
    static from (a : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Returns HTML-escaped text as a SafeHtml object.
     *
     * If text is of a type that implements
     * {@code goog.i18n.bidi.DirectionalString}, the directionality of the new
     * {@code SafeHtml} object is set to {@code text}'s directionality, if known.
     * Otherwise, the directionality of the resulting SafeHtml is unknown (i.e.,
     * {@code null}).
     * @param textOrHtml The text to escape. If the parameter is of type SafeHtml it is returned directly (no escaping is done).
     */
    static htmlEscape (textOrHtml : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Returns HTML-escaped text as a SafeHtml object, with newlines changed to
     * &lt;br&gt;.
     * @param textOrHtml The text to escape. If the parameter is of type SafeHtml it is returned directly (no escaping is done).
     */
    static htmlEscapePreservingNewlines (textOrHtml : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Returns HTML-escaped text as a SafeHtml object, with newlines changed to
     * &lt;br&gt; and escaping whitespace to preserve spatial formatting. Character
     * entity #160 is used to make it safer for XML.
     * @param textOrHtml The text to escape. If the parameter is of type SafeHtml it is returned directly (no escaping is done).
     */
    static htmlEscapePreservingNewlinesAndSpaces (textOrHtml : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a string with attributes to insert after tagName.
     */
    static stringifyAttributes (tagName : string , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap } | null ) : string ;
    /**
     * Performs a runtime check that the provided object is indeed a SafeHtml
     * object, and returns its value.
     * @param safeHtml The object to extract from.
     */
    static unwrap (safeHtml : ಠ_ಠ.clutz.goog.html.SafeHtml ) : string ;
    /**
     * Verifies if the tag name is valid and if it doesn't change the context.
     * E.g. STRONG is fine but SCRIPT throws because it changes context. See
     * goog.html.SafeHtml.create for an explanation of allowed tags.
     */
    static verifyTagName (tagName : string ) : void ;
  }
  class SafeHtml_Instance implements ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString , ಠ_ಠ.clutz.goog.string.TypedString {
    private noStructuralTyping_: any;
    getDirection ( ) : ಠ_ಠ.clutz.goog.i18n.bidi.Dir | null ;
    /**
     * Returns this SafeHtml's value as string.
     *
     * IMPORTANT: In code where it is security relevant that an object's type is
     * indeed {@code SafeHtml}, use {@code goog.html.SafeHtml.unwrap} instead of
     * this method. If in doubt, assume that it's security relevant. In particular,
     * note that goog.html functions which return a goog.html type do not guarantee
     * that the returned instance is of the right type. For example:
     *
     * <pre>
     * var fakeSafeHtml = new String('fake');
     * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
     * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
     * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
     * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
     * // instanceof goog.html.SafeHtml.
     * </pre>
     */
    getTypedStringValue ( ) : string ;
    implementsGoogI18nBidiDirectionalString : boolean ;
    implementsGoogStringTypedString : boolean ;
    /**
     * Returns a debug string-representation of this value.
     *
     * To obtain the actual string value wrapped in a SafeHtml, use
     * {@code goog.html.SafeHtml.unwrap}.
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.html.SafeHtml {
  type AttributeValue = string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.SafeHtml'): typeof ಠ_ಠ.clutz.goog.html.SafeHtml;
}
declare module 'goog:goog.html.SafeHtml' {
  import alias = ಠ_ಠ.clutz.goog.html.SafeHtml;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
  /**
   * Formatter producing SafeHtml from a plain text format and HTML fragments.
   *
   * Example usage:
   *
   * var formatter = new goog.html.SafeHtmlFormatter();
   * var safeHtml = formatter.format(
   * formatter.startTag('b') +
   * 'User input:' +
   * formatter.endTag('b') +
   * ' ' +
   * formatter.text(userInput));
   *
   * The most common usage is with goog.getMsg:
   *
   * var MSG_USER_INPUT = goog.getMsg(
   * '{$startLink}Learn more{$endLink} about {$userInput}', {
   * 'startLink': formatter.startTag('a', {'href': url}),
   * 'endLink': formatter.endTag('a'),
   * 'userInput': formatter.text(userInput)
   * });
   * var safeHtml = formatter.format(MSG_USER_INPUT);
   *
   * The formatting string should be constant with all variables processed by
   * formatter.text().
   */
  class SafeHtmlFormatter extends SafeHtmlFormatter_Instance {
  }
  class SafeHtmlFormatter_Instance {
    private noStructuralTyping_: any;
    /**
     * Saves an end tag and returns its marker.
     */
    endTag (tagName : string ) : string ;
    /**
     * Formats a plain text string with markers holding HTML fragments to SafeHtml.
     * @param format Plain text format, will be HTML-escaped.
     */
    format (format : string ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Saves SafeHtml and returns its marker.
     */
    safeHtml (safeHtml : ಠ_ಠ.clutz.goog.html.SafeHtml ) : string ;
    /**
     * Saves a start tag and returns its marker.
     * @param opt_attributes Mapping from attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
     */
    startTag (tagName : string , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap } | null ) : string ;
    /**
     * Escapes a text, saves it and returns its marker.
     *
     * Wrapping any user input to .text() prevents the attacker with access to
     * the random number generator to duplicate tags used elsewhere in the format.
     */
    text (text : string ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.html.SafeHtmlFormatter {
  type Replacement = { attributes ? : string , endTag ? : string , html ? : string , startTag ? : string } | null ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.SafeHtmlFormatter'): typeof ಠ_ಠ.clutz.goog.html.SafeHtmlFormatter;
}
declare module 'goog:goog.html.SafeHtmlFormatter' {
  import alias = ಠ_ಠ.clutz.goog.html.SafeHtmlFormatter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
  /**
   * A string-like object which represents JavaScript code and that carries the
   * security type contract that its value, as a string, will not cause execution
   * of unconstrained attacker controlled code (XSS) when evaluated as JavaScript
   * in a browser.
   *
   * Instances of this type must be created via the factory method
   * {@code goog.html.SafeScript.fromConstant} and not by invoking its
   * constructor. The constructor intentionally takes no parameters and the type
   * is immutable; hence only a default instance corresponding to the empty string
   * can be obtained via constructor invocation.
   *
   * A SafeScript's string representation can safely be interpolated as the
   * content of a script element within HTML. The SafeScript string should not be
   * escaped before interpolation.
   *
   * Note that the SafeScript might contain text that is attacker-controlled but
   * that text should have been interpolated with appropriate escaping,
   * sanitization and/or validation into the right location in the script, such
   * that it is highly constrained in its effect (for example, it had to match a
   * set of whitelisted words).
   *
   * A SafeScript can be constructed via security-reviewed unchecked
   * conversions. In this case producers of SafeScript must ensure themselves that
   * the SafeScript does not contain unsafe script. Note in particular that
   * {@code &lt;} is dangerous, even when inside JavaScript strings, and so should
   * always be forbidden or JavaScript escaped in user controlled input. For
   * example, if {@code &lt;/script&gt;&lt;script&gt;evil&lt;/script&gt;"} were
   * interpolated inside a JavaScript string, it would break out of the context
   * of the original script element and {@code evil} would execute. Also note
   * that within an HTML script (raw text) element, HTML character references,
   * such as "&lt;" are not allowed. See
   * http://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements.
   */
  class SafeScript extends SafeScript_Instance {
    /**
     * A SafeScript instance corresponding to the empty string.
     */
    static EMPTY : ಠ_ಠ.clutz.goog.html.SafeScript ;
    /**
     * Package-internal utility method to create SafeScript instances.
     * @param script The string to initialize the SafeScript object with.
     */
    static createSafeScriptSecurityPrivateDoNotAccessOrElse (script : string ) : ಠ_ಠ.clutz.goog.html.SafeScript ;
    /**
     * Creates a SafeScript object from a compile-time constant string.
     * @param script A compile-time-constant string from which to create a SafeScript.
     */
    static fromConstant (script : ಠ_ಠ.clutz.goog.string.Const ) : ಠ_ಠ.clutz.goog.html.SafeScript ;
    /**
     * Performs a runtime check that the provided object is indeed a
     * SafeScript object, and returns its value.
     * @param safeScript The object to extract from.
     */
    static unwrap (safeScript : ಠ_ಠ.clutz.goog.html.SafeScript ) : string ;
  }
  class SafeScript_Instance implements ಠ_ಠ.clutz.goog.string.TypedString {
    private noStructuralTyping_: any;
    /**
     * Returns this SafeScript's value as a string.
     *
     * IMPORTANT: In code where it is security relevant that an object's type is
     * indeed {@code SafeScript}, use {@code goog.html.SafeScript.unwrap} instead of
     * this method. If in doubt, assume that it's security relevant. In particular,
     * note that goog.html functions which return a goog.html type do not guarantee
     * the returned instance is of the right type. For example:
     *
     * <pre>
     * var fakeSafeHtml = new String('fake');
     * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
     * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
     * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
     * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
     * // instanceof goog.html.SafeHtml.
     * </pre>
     */
    getTypedStringValue ( ) : string ;
    implementsGoogStringTypedString : boolean ;
    /**
     * Returns a debug string-representation of this value.
     *
     * To obtain the actual string value wrapped in a SafeScript, use
     * {@code goog.html.SafeScript.unwrap}.
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.SafeScript'): typeof ಠ_ಠ.clutz.goog.html.SafeScript;
}
declare module 'goog:goog.html.SafeScript' {
  import alias = ಠ_ಠ.clutz.goog.html.SafeScript;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
  /**
   * A string-like object which represents a sequence of CSS declarations
   * ({@code propertyName1: propertyvalue1; propertyName2: propertyValue2; ...})
   * and that carries the security type contract that its value, as a string,
   * will not cause untrusted script execution (XSS) when evaluated as CSS in a
   * browser.
   *
   * Instances of this type must be created via the factory methods
   * ({@code goog.html.SafeStyle.create} or
   * {@code goog.html.SafeStyle.fromConstant}) and not by invoking its
   * constructor. The constructor intentionally takes no parameters and the type
   * is immutable; hence only a default instance corresponding to the empty string
   * can be obtained via constructor invocation.
   *
   * A SafeStyle's string representation ({@link #getTypedStringValue()}) can
   * safely:
   * <ul>
   * <li>Be interpolated as the entire content of a *quoted* HTML style
   * attribute, or before already existing properties. The SafeStyle string
   * * must be HTML-attribute-escaped* (where " and ' are escaped) before
   * interpolation.
   * <li>Be interpolated as the entire content of a {}-wrapped block within a
   * stylesheet, or before already existing properties. The SafeStyle string
   * should not be escaped before interpolation. SafeStyle's contract also
   * guarantees that the string will not be able to introduce new properties
   * or elide existing ones.
   * <li>Be assigned to the style property of a DOM node. The SafeStyle string
   * should not be escaped before being assigned to the property.
   * </ul>
   *
   * A SafeStyle may never contain literal angle brackets. Otherwise, it could
   * be unsafe to place a SafeStyle into a &lt;style&gt; tag (where it can't
   * be HTML escaped). For example, if the SafeStyle containing
   * "{@code font: 'foo &lt;style/&gt;&lt;script&gt;evil&lt;/script&gt;'}" were
   * interpolated within a &lt;style&gt; tag, this would then break out of the
   * style context into HTML.
   *
   * A SafeStyle may contain literal single or double quotes, and as such the
   * entire style string must be escaped when used in a style attribute (if
   * this were not the case, the string could contain a matching quote that
   * would escape from the style attribute).
   *
   * Values of this type must be composable, i.e. for any two values
   * {@code style1} and {@code style2} of this type,
   * {@code goog.html.SafeStyle.unwrap(style1) +
   * goog.html.SafeStyle.unwrap(style2)} must itself be a value that satisfies
   * the SafeStyle type constraint. This requirement implies that for any value
   * {@code style} of this type, {@code goog.html.SafeStyle.unwrap(style)} must
   * not end in a "property value" or "property name" context. For example,
   * a value of {@code background:url("} or {@code font-} would not satisfy the
   * SafeStyle contract. This is because concatenating such strings with a
   * second value that itself does not contain unsafe CSS can result in an
   * overall string that does. For example, if {@code javascript:evil())"} is
   * appended to {@code background:url("}, the resulting string may result in
   * the execution of a malicious script.
   *
   * TODO(user): Consider whether we should implement UTF-8 interchange
   * validity checks and blacklisting of newlines (including Unicode ones) and
   * other whitespace characters (\t, \f). Document here if so and also update
   * SafeStyle.fromConstant().
   *
   * The following example values comply with this type's contract:
   * <ul>
   * <li><pre>width: 1em;</pre>
   * <li><pre>height:1em;</pre>
   * <li><pre>width: 1em;height: 1em;</pre>
   * <li><pre>background:url('http://url');</pre>
   * </ul>
   * In addition, the empty string is safe for use in a CSS attribute.
   *
   * The following example values do NOT comply with this type's contract:
   * <ul>
   * <li><pre>background: red</pre> (missing a trailing semi-colon)
   * <li><pre>background:</pre> (missing a value and a trailing semi-colon)
   * <li><pre>1em</pre> (missing an attribute name, which provides context for
   * the value)
   * </ul>
   */
  class SafeStyle extends SafeStyle_Instance {
    /**
     * A SafeStyle instance corresponding to the empty string.
     */
    static EMPTY : ಠ_ಠ.clutz.goog.html.SafeStyle ;
    /**
     * The innocuous string generated by goog.html.SafeUrl.create when passed
     * an unsafe value.
     */
    static INNOCUOUS_STRING : string ;
    /**
     * Creates a new SafeStyle object by concatenating the values.
     * @param var_args SafeStyles to concatenate.
     */
    static concat ( ...var_args : ( ಠ_ಠ.clutz.goog.html.SafeStyle | ಠ_ಠ.clutz.goog.html.SafeStyle [] | undefined ) [] ) : ಠ_ಠ.clutz.goog.html.SafeStyle ;
    /**
     * Creates a new SafeStyle object from the properties specified in the map.
     * @param map Mapping of property names to their values, for example {'margin': '1px'}. Names must consist of [-_a-zA-Z0-9]. Values might be strings consisting of [-,.'"%_!# a-zA-Z0-9], where " and ' must be properly balanced. Other values must be wrapped in goog.string.Const. Null value causes skipping the property.
     */
    static create (map : ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap ) : ಠ_ಠ.clutz.goog.html.SafeStyle ;
    /**
     * Package-internal utility method to create SafeStyle instances.
     * @param style The string to initialize the SafeStyle object with.
     */
    static createSafeStyleSecurityPrivateDoNotAccessOrElse (style : string ) : ಠ_ಠ.clutz.goog.html.SafeStyle ;
    /**
     * Creates a SafeStyle object from a compile-time constant string.
     *
     * {@code style} should be in the format
     * {@code name: value; [name: value; ...]} and must not have any < or >
     * characters in it. This is so that SafeStyle's contract is preserved,
     * allowing the SafeStyle to correctly be interpreted as a sequence of CSS
     * declarations and without affecting the syntactic structure of any
     * surrounding CSS and HTML.
     *
     * This method performs basic sanity checks on the format of {@code style}
     * but does not constrain the format of {@code name} and {@code value}, except
     * for disallowing tag characters.
     * @param style A compile-time-constant string from which to create a SafeStyle.
     */
    static fromConstant (style : ಠ_ಠ.clutz.goog.string.Const ) : ಠ_ಠ.clutz.goog.html.SafeStyle ;
    /**
     * Performs a runtime check that the provided object is indeed a
     * SafeStyle object, and returns its value.
     * @param safeStyle The object to extract from.
     */
    static unwrap (safeStyle : ಠ_ಠ.clutz.goog.html.SafeStyle ) : string ;
  }
  class SafeStyle_Instance implements ಠ_ಠ.clutz.goog.string.TypedString {
    private noStructuralTyping_: any;
    /**
     * Returns this SafeStyle's value as a string.
     *
     * IMPORTANT: In code where it is security relevant that an object's type is
     * indeed {@code SafeStyle}, use {@code goog.html.SafeStyle.unwrap} instead of
     * this method. If in doubt, assume that it's security relevant. In particular,
     * note that goog.html functions which return a goog.html type do not guarantee
     * the returned instance is of the right type. For example:
     *
     * <pre>
     * var fakeSafeHtml = new String('fake');
     * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
     * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
     * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
     * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
     * // instanceof goog.html.SafeHtml.
     * </pre>
     */
    getTypedStringValue ( ) : string ;
    implementsGoogStringTypedString : boolean ;
    /**
     * Returns a debug string-representation of this value.
     *
     * To obtain the actual string value wrapped in a SafeStyle, use
     * {@code goog.html.SafeStyle.unwrap}.
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.html.SafeStyle {
  type PropertyMap = { [ key: string ]: ಠ_ಠ.clutz.goog.string.Const | null | string } ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.SafeStyle'): typeof ಠ_ಠ.clutz.goog.html.SafeStyle;
}
declare module 'goog:goog.html.SafeStyle' {
  import alias = ಠ_ಠ.clutz.goog.html.SafeStyle;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
  /**
   * A string-like object which represents a CSS style sheet and that carries the
   * security type contract that its value, as a string, will not cause untrusted
   * script execution (XSS) when evaluated as CSS in a browser.
   *
   * Instances of this type must be created via the factory method
   * {@code goog.html.SafeStyleSheet.fromConstant} and not by invoking its
   * constructor. The constructor intentionally takes no parameters and the type
   * is immutable; hence only a default instance corresponding to the empty string
   * can be obtained via constructor invocation.
   *
   * A SafeStyleSheet's string representation can safely be interpolated as the
   * content of a style element within HTML. The SafeStyleSheet string should
   * not be escaped before interpolation.
   *
   * Values of this type must be composable, i.e. for any two values
   * {@code styleSheet1} and {@code styleSheet2} of this type,
   * {@code goog.html.SafeStyleSheet.unwrap(styleSheet1) +
   * goog.html.SafeStyleSheet.unwrap(styleSheet2)} must itself be a value that
   * satisfies the SafeStyleSheet type constraint. This requirement implies that
   * for any value {@code styleSheet} of this type,
   * {@code goog.html.SafeStyleSheet.unwrap(styleSheet1)} must end in
   * "beginning of rule" context.
   *
   * A SafeStyleSheet can be constructed via security-reviewed unchecked
   * conversions. In this case producers of SafeStyleSheet must ensure themselves
   * that the SafeStyleSheet does not contain unsafe script. Note in particular
   * that {@code &lt;} is dangerous, even when inside CSS strings, and so should
   * always be forbidden or CSS-escaped in user controlled input. For example, if
   * {@code &lt;/style&gt;&lt;script&gt;evil&lt;/script&gt;"} were interpolated
   * inside a CSS string, it would break out of the context of the original
   * style element and {@code evil} would execute. Also note that within an HTML
   * style (raw text) element, HTML character references, such as
   * {@code &amp;lt;}, are not allowed. See
   *
   * http://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements
   * (similar considerations apply to the style element).
   */
  class SafeStyleSheet extends SafeStyleSheet_Instance {
    /**
     * A SafeStyleSheet instance corresponding to the empty string.
     */
    static EMPTY : ಠ_ಠ.clutz.goog.html.SafeStyleSheet ;
    /**
     * Creates a new SafeStyleSheet object by concatenating values.
     * @param var_args Values to concatenate.
     */
    static concat ( ...var_args : ( ಠ_ಠ.clutz.goog.html.SafeStyleSheet | ಠ_ಠ.clutz.goog.html.SafeStyleSheet [] | undefined ) [] ) : ಠ_ಠ.clutz.goog.html.SafeStyleSheet ;
    /**
     * Package-internal utility method to create SafeStyleSheet instances.
     * @param styleSheet The string to initialize the SafeStyleSheet object with.
     */
    static createSafeStyleSheetSecurityPrivateDoNotAccessOrElse (styleSheet : string ) : ಠ_ಠ.clutz.goog.html.SafeStyleSheet ;
    /**
     * Creates a SafeStyleSheet object from a compile-time constant string.
     *
     * {@code styleSheet} must not have any &lt; characters in it, so that
     * the syntactic structure of the surrounding HTML is not affected.
     * @param styleSheet A compile-time-constant string from which to create a SafeStyleSheet.
     */
    static fromConstant (styleSheet : ಠ_ಠ.clutz.goog.string.Const ) : ಠ_ಠ.clutz.goog.html.SafeStyleSheet ;
    /**
     * Performs a runtime check that the provided object is indeed a
     * SafeStyleSheet object, and returns its value.
     * @param safeStyleSheet The object to extract from.
     */
    static unwrap (safeStyleSheet : ಠ_ಠ.clutz.goog.html.SafeStyleSheet ) : string ;
  }
  class SafeStyleSheet_Instance implements ಠ_ಠ.clutz.goog.string.TypedString {
    private noStructuralTyping_: any;
    /**
     * Returns this SafeStyleSheet's value as a string.
     *
     * IMPORTANT: In code where it is security relevant that an object's type is
     * indeed {@code SafeStyleSheet}, use {@code goog.html.SafeStyleSheet.unwrap}
     * instead of this method. If in doubt, assume that it's security relevant. In
     * particular, note that goog.html functions which return a goog.html type do
     * not guarantee the returned instance is of the right type. For example:
     *
     * <pre>
     * var fakeSafeHtml = new String('fake');
     * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
     * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
     * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
     * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
     * // instanceof goog.html.SafeHtml.
     * </pre>
     */
    getTypedStringValue ( ) : string ;
    implementsGoogStringTypedString : boolean ;
    /**
     * Returns a debug string-representation of this value.
     *
     * To obtain the actual string value wrapped in a SafeStyleSheet, use
     * {@code goog.html.SafeStyleSheet.unwrap}.
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.SafeStyleSheet'): typeof ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
}
declare module 'goog:goog.html.SafeStyleSheet' {
  import alias = ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
  /**
   * A string that is safe to use in URL context in DOM APIs and HTML documents.
   *
   * A SafeUrl is a string-like object that carries the security type contract
   * that its value as a string will not cause untrusted script execution
   * when evaluated as a hyperlink URL in a browser.
   *
   * Values of this type are guaranteed to be safe to use in URL/hyperlink
   * contexts, such as, assignment to URL-valued DOM properties, or
   * interpolation into a HTML template in URL context (e.g., inside a href
   * attribute), in the sense that the use will not result in a
   * Cross-Site-Scripting vulnerability.
   *
   * Note that, as documented in {@code goog.html.SafeUrl.unwrap}, this type's
   * contract does not guarantee that instances are safe to interpolate into HTML
   * without appropriate escaping.
   *
   * Note also that this type's contract does not imply any guarantees regarding
   * the resource the URL refers to.  In particular, SafeUrls are <b>not</b>
   * safe to use in a context where the referred-to resource is interpreted as
   * trusted code, e.g., as the src of a script tag.
   *
   * Instances of this type must be created via the factory methods
   * ({@code goog.html.SafeUrl.fromConstant}, {@code goog.html.SafeUrl.sanitize}),
   * etc and not by invoking its constructor.  The constructor intentionally
   * takes no parameters and the type is immutable; hence only a default instance
   * corresponding to the empty string can be obtained via constructor invocation.
   */
  class SafeUrl extends SafeUrl_Instance {
    /**
     * A SafeUrl corresponding to the special about:blank url.
     */
    static ABOUT_BLANK : ಠ_ಠ.clutz.goog.html.SafeUrl ;
    /**
     * The innocuous string generated by goog.html.SafeUrl.sanitize when passed
     * an unsafe URL.
     *
     * about:invalid is registered in
     * http://www.w3.org/TR/css3-values/#about-invalid.
     * http://tools.ietf.org/html/rfc6694#section-2.2.1 permits about URLs to
     * contain a fragment, which is not to be considered when determining if an
     * about URL is well-known.
     *
     * Using about:invalid seems preferable to using a fixed data URL, since
     * browsers might choose to not report CSP violations on it, as legitimate
     * CSS function calls to attr() can result in this URL being produced. It is
     * also a standard URL which matches exactly the semantics we need:
     * "The about:invalid URI references a non-existent document with a generic
     * error condition. It can be used when a URI is necessary, but the default
     * value shouldn't be resolveable as any type of document".
     */
    static INNOCUOUS_STRING : string ;
    /**
     * Package-internal utility method to create SafeUrl instances.
     * @param url The string to initialize the SafeUrl object with.
     */
    static createSafeUrlSecurityPrivateDoNotAccessOrElse (url : string ) : ಠ_ಠ.clutz.goog.html.SafeUrl ;
    /**
     * Creates a SafeUrl wrapping a blob URL for the given {@code blob}.
     *
     * The blob URL is created with {@code URL.createObjectURL}. If the MIME type
     * for {@code blob} is not of a known safe image or video MIME type, then the
     * SafeUrl will wrap {@link #INNOCUOUS_STRING}.
     */
    static fromBlob (blob : Blob ) : ಠ_ಠ.clutz.goog.html.SafeUrl ;
    /**
     * Creates a SafeUrl object from a compile-time constant string.
     *
     * Compile-time constant strings are inherently program-controlled and hence
     * trusted.
     * @param url A compile-time-constant string from which to create a SafeUrl.
     */
    static fromConstant (url : ಠ_ಠ.clutz.goog.string.Const ) : ಠ_ಠ.clutz.goog.html.SafeUrl ;
    /**
     * Creates a SafeUrl wrapping a data: URL, after validating it matches a
     * known-safe image or video MIME type.
     * @param dataUrl A valid base64 data URL with one of the whitelisted image or video MIME types.
     */
    static fromDataUrl (dataUrl : string ) : ಠ_ಠ.clutz.goog.html.SafeUrl ;
    /**
     * Creates a SafeUrl wrapping a tel: URL.
     * @param telUrl A tel URL.
     */
    static fromTelUrl (telUrl : string ) : ಠ_ಠ.clutz.goog.html.SafeUrl ;
    /**
     * Creates a SafeUrl object from {@code url}. If {@code url} is a
     * goog.html.SafeUrl then it is simply returned. Otherwise the input string is
     * validated to match a pattern of commonly used safe URLs.
     *
     * {@code url} may be a URL with the http, https, mailto or ftp scheme,
     * or a relative URL (i.e., a URL without a scheme; specifically, a
     * scheme-relative, absolute-path-relative, or path-relative URL).
     * @param url The URL to validate.
     */
    static sanitize (url : string | ಠ_ಠ.clutz.goog.string.TypedString ) : ಠ_ಠ.clutz.goog.html.SafeUrl ;
    /**
     * Performs a runtime check that the provided object is indeed a SafeUrl
     * object, and returns its value.
     *
     * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the
     * behavior of  browsers when interpreting URLs. Values of SafeUrl objects MUST
     * be appropriately escaped before embedding in a HTML document. Note that the
     * required escaping is context-sensitive (e.g. a different escaping is
     * required for embedding a URL in a style property within a style
     * attribute, as opposed to embedding in a href attribute).
     * @param safeUrl The object to extract from.
     */
    static unwrap (safeUrl : ಠ_ಠ.clutz.goog.html.SafeUrl ) : string ;
  }
  class SafeUrl_Instance implements ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString , ಠ_ಠ.clutz.goog.string.TypedString {
    private noStructuralTyping_: any;
    /**
     * Returns this URLs directionality, which is always {@code LTR}.
     */
    getDirection ( ) : ಠ_ಠ.clutz.goog.i18n.bidi.Dir | null ;
    /**
     * Returns this SafeUrl's value a string.
     *
     * IMPORTANT: In code where it is security relevant that an object's type is
     * indeed {@code SafeUrl}, use {@code goog.html.SafeUrl.unwrap} instead of this
     * method. If in doubt, assume that it's security relevant. In particular, note
     * that goog.html functions which return a goog.html type do not guarantee that
     * the returned instance is of the right type. For example:
     *
     * <pre>
     * var fakeSafeHtml = new String('fake');
     * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
     * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
     * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
     * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof
     * // goog.html.SafeHtml.
     * </pre>
     *
     * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the
     * behavior of browsers when interpreting URLs. Values of SafeUrl objects MUST
     * be appropriately escaped before embedding in a HTML document. Note that the
     * required escaping is context-sensitive (e.g. a different escaping is
     * required for embedding a URL in a style property within a style
     * attribute, as opposed to embedding in a href attribute).
     */
    getTypedStringValue ( ) : string ;
    implementsGoogI18nBidiDirectionalString : boolean ;
    implementsGoogStringTypedString : boolean ;
    /**
     * Returns a debug string-representation of this value.
     *
     * To obtain the actual string value wrapped in a SafeUrl, use
     * {@code goog.html.SafeUrl.unwrap}.
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.SafeUrl'): typeof ಠ_ಠ.clutz.goog.html.SafeUrl;
}
declare module 'goog:goog.html.SafeUrl' {
  import alias = ಠ_ಠ.clutz.goog.html.SafeUrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
  /**
   * A URL which is under application control and from which script, CSS, and
   * other resources that represent executable code, can be fetched.
   *
   * Given that the URL can only be constructed from strings under application
   * control and is used to load resources, bugs resulting in a malformed URL
   * should not have a security impact and are likely to be easily detectable
   * during testing. Given the wide number of non-RFC compliant URLs in use,
   * stricter validation could prevent some applications from being able to use
   * this type.
   *
   * Instances of this type must be created via the factory method,
   * ({@code goog.html.TrustedResourceUrl.fromConstant}), and not by invoking its
   * constructor. The constructor intentionally takes no parameters and the type
   * is immutable; hence only a default instance corresponding to the empty
   * string can be obtained via constructor invocation.
   */
  class TrustedResourceUrl extends TrustedResourceUrl_Instance {
    /**
     * Package-internal utility method to create TrustedResourceUrl instances.
     * @param url The string to initialize the TrustedResourceUrl object with.
     */
    static createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse (url : string ) : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ;
    /**
     * Creates a TrustedResourceUrl object from a compile-time constant string.
     *
     * Compile-time constant strings are inherently program-controlled and hence
     * trusted.
     * @param url A compile-time-constant string from which to create a TrustedResourceUrl.
     */
    static fromConstant (url : ಠ_ಠ.clutz.goog.string.Const ) : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ;
    /**
     * Creates a TrustedResourceUrl object from a compile-time constant strings.
     *
     * Compile-time constant strings are inherently program-controlled and hence
     * trusted.
     * @param parts Compile-time-constant strings from which to create a TrustedResourceUrl.
     */
    static fromConstants (parts : ಠ_ಠ.clutz.goog.string.Const [] ) : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ;
    /**
     * Performs a runtime check that the provided object is indeed a
     * TrustedResourceUrl object, and returns its value.
     * @param trustedResourceUrl The object to extract from.
     */
    static unwrap (trustedResourceUrl : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ) : string ;
  }
  class TrustedResourceUrl_Instance implements ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString , ಠ_ಠ.clutz.goog.string.TypedString {
    private noStructuralTyping_: any;
    /**
     * Returns this URLs directionality, which is always {@code LTR}.
     */
    getDirection ( ) : ಠ_ಠ.clutz.goog.i18n.bidi.Dir | null ;
    /**
     * Returns this TrustedResourceUrl's value as a string.
     *
     * IMPORTANT: In code where it is security relevant that an object's type is
     * indeed {@code TrustedResourceUrl}, use
     * {@code goog.html.TrustedResourceUrl.unwrap} instead of this method. If in
     * doubt, assume that it's security relevant. In particular, note that
     * goog.html functions which return a goog.html type do not guarantee that
     * the returned instance is of the right type. For example:
     *
     * <pre>
     * var fakeSafeHtml = new String('fake');
     * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
     * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
     * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
     * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof
     * // goog.html.SafeHtml.
     * </pre>
     */
    getTypedStringValue ( ) : string ;
    implementsGoogI18nBidiDirectionalString : boolean ;
    implementsGoogStringTypedString : boolean ;
    /**
     * Returns a debug string-representation of this value.
     *
     * To obtain the actual string value wrapped in a TrustedResourceUrl, use
     * {@code goog.html.TrustedResourceUrl.unwrap}.
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.TrustedResourceUrl'): typeof ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
}
declare module 'goog:goog.html.TrustedResourceUrl' {
  import alias = ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.flash {
  function combineParams (defaultParams : { [ key: string ]: string | ಠ_ಠ.clutz.goog.string.TypedString } , opt_params ? : { [ key: string ]: string } | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml [] ;
  function createEmbed (src : any , opt_attributes : any ) : any ;
  function createObject (data : any , opt_params : any , opt_attributes : any ) : any ;
  function createObjectForOldIe (movie : any , opt_params : any , opt_attributes : any ) : any ;
  /**
   * Checks that keys are not present as keys in maps.
   * @param keys Keys that must not be present, lower-case.
   * @param opt_attributes Optional attributes passed to create*().
   * @param opt_params Optional params passed to createObject*().
   */
  function verifyKeysNotInMaps (keys : string [] , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap } | null , opt_params ? : { [ key: string ]: string } | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.flash'): typeof ಠ_ಠ.clutz.goog.html.flash;
}
declare module 'goog:goog.html.flash' {
  import alias = ಠ_ಠ.clutz.goog.html.flash;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.legacyconversions {
  /**
   * Performs an "unchecked conversion" from string to SafeHtml for legacy API
   * purposes.
   *
   * Please read fileoverview documentation before using.
   * @param html A string to be converted to SafeHtml.
   */
  function safeHtmlFromString (html : string ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
  /**
   * Performs an "unchecked conversion" from string to SafeStyle for legacy API
   * purposes.
   *
   * Please read fileoverview documentation before using.
   * @param style A string to be converted to SafeStyle.
   */
  function safeStyleFromString (style : string ) : ಠ_ಠ.clutz.goog.html.SafeStyle ;
  /**
   * Performs an "unchecked conversion" from string to SafeStyleSheet for legacy
   * API purposes.
   *
   * Please read fileoverview documentation before using.
   * @param styleSheet A string to be converted to SafeStyleSheet.
   */
  function safeStyleSheetFromString (styleSheet : string ) : ಠ_ಠ.clutz.goog.html.SafeStyleSheet ;
  /**
   * Performs an "unchecked conversion" from string to SafeUrl for legacy API
   * purposes.
   *
   * Please read fileoverview documentation before using.
   * @param url A string to be converted to SafeUrl.
   */
  function safeUrlFromString (url : string ) : ಠ_ಠ.clutz.goog.html.SafeUrl ;
  /**
   * Sets a function that will be called every time a legacy conversion is
   * performed. The function is called with no parameters but it can use
   * goog.debug.getStacktrace to get a stacktrace.
   * @param callback Error callback as defined above.
   */
  function setReportCallback (callback : ( ) => undefined ) : void ;
  /**
   * Performs an "unchecked conversion" from string to TrustedResourceUrl for
   * legacy API purposes.
   *
   * Please read fileoverview documentation before using.
   * @param url A string to be converted to TrustedResourceUrl.
   */
  function trustedResourceUrlFromString (url : string ) : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.legacyconversions'): typeof ಠ_ಠ.clutz.goog.html.legacyconversions;
}
declare module 'goog:goog.html.legacyconversions' {
  import alias = ಠ_ಠ.clutz.goog.html.legacyconversions;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer.AttributeWhitelist {
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* ABBR because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* ACCEPT because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* ACCESSKEY because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* ALIGN because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* ALT because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* AUTOCOMPLETE because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* AXIS because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* BGCOLOR because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* BORDER because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* CELLPADDING because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* CELLSPACING because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* CHAR because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* CHAROFF because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* CHECKED because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* CLEAR because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* COLOR because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* COLS because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* COLSPAN because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* COMPACT because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* COORDS because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* DATETIME because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* DIR because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* DISABLED because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* ENCTYPE because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* FACE because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* FRAME because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* HEIGHT because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* HREFLANG because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* HSPACE because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* ISMAP because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* LABEL because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* LANG because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* MAXLENGTH because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* METHOD because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* MULTIPLE because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* NOHREF because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* NOSHADE because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* NOWRAP because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* READONLY because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* REL because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* REV because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* ROWS because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* ROWSPAN because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* RULES because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* SCOPE because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* SELECTED because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* SHAPE because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* SIZE because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* SPAN because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* START because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* SUMMARY because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* TABINDEX because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* TITLE because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* TYPE because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* VALIGN because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* VALUE because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* VSPACE because it is not a valid symbol.
  //!! skipping property goog.html.sanitizer.AttributeWhitelist.* WIDTH because it is not a valid symbol.
}
declare module 'goog:goog.html.sanitizer.AttributeWhitelist' {
  import alias = ಠ_ಠ.clutz.goog.html.sanitizer.AttributeWhitelist;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer.CssSanitizer {
  /**
   * Sanitizes an inline style attribute. Short-hand attributes are expanded to
   * their individual elements. Note: The sanitizer does not output vendor
   * prefixed styles.
   * @param cssStyle A CSS style object.
   * @param opt_uriRewriter A URI rewriter that returns an unwrapped goog.html.SafeUrl.
   */
  function sanitizeInlineStyle (cssStyle : CSSStyleDeclaration | null , opt_uriRewriter ? : (a : string , b : string ) => any ) : string | null ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.sanitizer.CssSanitizer'): typeof ಠ_ಠ.clutz.goog.html.sanitizer.CssSanitizer;
}
declare module 'goog:goog.html.sanitizer.CssSanitizer' {
  import alias = ಠ_ಠ.clutz.goog.html.sanitizer.CssSanitizer;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer {
  /**
   * Creates an HTML sanitizer.
   */
  class HtmlSanitizer extends HtmlSanitizer_Instance {
    /**
     * Static function to sanitize a string. Simply creates a new instance of the
     * sanitizer with default options and uses this to sanitize.
     */
    static sanitize (unsanitizedHtml : string ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
  }
  class HtmlSanitizer_Instance {
    private noStructuralTyping_: any;
    /**
     * Creates an HTML sanitizer.
     */
    constructor (opt_builder ? : ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder ) ;
    /**
     * Causes the browser to parse the DOM tree of a given HTML string, then walks
     * the tree. For each element, it creates a new sanitized version, applies
     * sanitized attributes, and returns a SafeHtml object representing the
     * sanitized tree.
     */
    sanitize (unsanitizedHtml : string | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Causes the browser to parse the DOM tree of a given HTML string, then walks
     * the tree. For each element, it creates a new sanitized version, applies
     * sanitized attributes, and returns a sanitized NodeList.
     */
    sanitizeToDomNode (unsanitizedHtml : string | null ) : Element ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.sanitizer.HtmlSanitizer'): typeof ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer;
}
declare module 'goog:goog.html.sanitizer.HtmlSanitizer' {
  import alias = ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer {
  /**
   * A builder class for the Html Sanitizer. All methods except build return this.
   */
  class Builder extends Builder_Instance {
  }
  class Builder_Instance {
    private noStructuralTyping_: any;
    /**
     * Allows inline CSS styles.
     */
    allowCssStyles ( ) : ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder ;
    /**
     * Allow specified data attributes.
     */
    allowDataAttributes (dataAttributeWhitelist : string [] ) : ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder ;
    /**
     * Allow form tags in the HTML. Without this all form tags and content will be
     * dropped.
     */
    allowFormTag ( ) : ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder ;
    /**
     * Build and return a goog.html.sanitizer.HtmlSanitizer object.
     */
    build ( ) : ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer ;
    /**
     * Allows only the provided whitelist of tags. Tags still need to be in the
     * TagWhitelist to be allowed.
     * <p>
     * DIV tags are ALWAYS ALLOWED as part of the mechanism required to preserve
     * the HTML tree structure (when removing non-blacklisted tags and
     * non-whitelisted tags).
     */
    onlyAllowTags (tagWhitelist : string [] ) : ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder ;
    /**
     * Sets a custom name policy.
     */
    withCustomNamePolicy (customNamePolicy : ಠ_ಠ.clutz.PrivateType ) : ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder ;
    /**
     * Sets a custom network URL policy.
     */
    withCustomNetworkRequestUrlPolicy (customNetworkReqUrlPolicy : (a : string , b ? : ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerPolicyHints ) => ಠ_ಠ.clutz.goog.html.SafeUrl | null ) : ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder ;
    /**
     * Sets a custom token policy.
     */
    withCustomTokenPolicy (customTokenPolicy : ಠ_ಠ.clutz.PrivateType ) : ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder ;
    /**
     * Sets a custom non-network URL policy.
     */
    withCustomUrlPolicy (customUrlPolicy : (a : string , b ? : ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerPolicyHints ) => ಠ_ಠ.clutz.goog.html.SafeUrl | null ) : ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.sanitizer.HtmlSanitizer.Builder'): typeof ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
}
declare module 'goog:goog.html.sanitizer.HtmlSanitizer.Builder' {
  import alias = ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer {
  /**
   * Type for a policy function.
   */
  type HtmlSanitizerPolicy = ಠ_ಠ.clutz.PrivateType ;
}
declare module 'goog:goog.html.sanitizer.HtmlSanitizerPolicy' {
  import alias = ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerPolicy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer {
  /**
   * Type for optional context objects to the policy handler functions.
   */
  type HtmlSanitizerPolicyContext = { cssStyle ? : CSSStyleDeclaration | null } ;
}
declare module 'goog:goog.html.sanitizer.HtmlSanitizerPolicyContext' {
  import alias = ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerPolicyContext;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer {
  /**
   * Type for optional hints to policy handler functions.
   */
  type HtmlSanitizerPolicyHints = { attributeName ? : string , cssProperty ? : string , tagName ? : string } ;
}
declare module 'goog:goog.html.sanitizer.HtmlSanitizerPolicyHints' {
  import alias = ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerPolicyHints;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer.TagBlacklist {
  var APPLET : boolean ;
  var AUDIO : boolean ;
  var BASE : boolean ;
  var BGSOUND : boolean ;
  var EMBED : boolean ;
  var IFRAME : boolean ;
  var ISINDEX : boolean ;
  var KEYGEN : boolean ;
  var LAYER : boolean ;
  var LINK : boolean ;
  var META : boolean ;
  var OBJECT : boolean ;
  var SCRIPT : boolean ;
  var STYLE : boolean ;
  var SVG : boolean ;
  var TEMPLATE : boolean ;
  var VIDEO : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.sanitizer.TagBlacklist'): typeof ಠ_ಠ.clutz.goog.html.sanitizer.TagBlacklist;
}
declare module 'goog:goog.html.sanitizer.TagBlacklist' {
  import alias = ಠ_ಠ.clutz.goog.html.sanitizer.TagBlacklist;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer.TagWhitelist {
  var A : boolean ;
  var ABBR : boolean ;
  var ACRONYM : boolean ;
  var ADDRESS : boolean ;
  var AREA : boolean ;
  var ARTICLE : boolean ;
  var ASIDE : boolean ;
  var B : boolean ;
  var BDI : boolean ;
  var BDO : boolean ;
  var BIG : boolean ;
  var BLOCKQUOTE : boolean ;
  var BR : boolean ;
  var BUTTON : boolean ;
  var CAPTION : boolean ;
  var CENTER : boolean ;
  var CITE : boolean ;
  var CODE : boolean ;
  var COL : boolean ;
  var COLGROUP : boolean ;
  var COMMAND : boolean ;
  var DATA : boolean ;
  var DATALIST : boolean ;
  var DD : boolean ;
  var DEL : boolean ;
  var DETAILS : boolean ;
  var DFN : boolean ;
  var DIALOG : boolean ;
  var DIR : boolean ;
  var DIV : boolean ;
  var DL : boolean ;
  var DT : boolean ;
  var EM : boolean ;
  var FIELDSET : boolean ;
  var FIGCAPTION : boolean ;
  var FIGURE : boolean ;
  var FONT : boolean ;
  var FOOTER : boolean ;
  var FORM : boolean ;
  var H1 : boolean ;
  var H2 : boolean ;
  var H3 : boolean ;
  var H4 : boolean ;
  var H5 : boolean ;
  var H6 : boolean ;
  var HEADER : boolean ;
  var HGROUP : boolean ;
  var HR : boolean ;
  var I : boolean ;
  var IMG : boolean ;
  var INPUT : boolean ;
  var INS : boolean ;
  var KBD : boolean ;
  var KEYGEN : boolean ;
  var LABEL : boolean ;
  var LEGEND : boolean ;
  var LI : boolean ;
  var MAIN : boolean ;
  var MAP : boolean ;
  var MARK : boolean ;
  var MENU : boolean ;
  var METER : boolean ;
  var NAV : boolean ;
  var NOSCRIPT : boolean ;
  var OL : boolean ;
  var OPTGROUP : boolean ;
  var OPTION : boolean ;
  var OUTPUT : boolean ;
  var P : boolean ;
  var PRE : boolean ;
  var PROGRESS : boolean ;
  var Q : boolean ;
  var S : boolean ;
  var SAMP : boolean ;
  var SECTION : boolean ;
  var SELECT : boolean ;
  var SMALL : boolean ;
  var SOURCE : boolean ;
  var SPAN : boolean ;
  var STRIKE : boolean ;
  var STRONG : boolean ;
  var SUB : boolean ;
  var SUMMARY : boolean ;
  var SUP : boolean ;
  var TABLE : boolean ;
  var TBODY : boolean ;
  var TD : boolean ;
  var TEXTAREA : boolean ;
  var TFOOT : boolean ;
  var TH : boolean ;
  var THEAD : boolean ;
  var TIME : boolean ;
  var TR : boolean ;
  var TRACK : boolean ;
  var TT : boolean ;
  var U : boolean ;
  var UL : boolean ;
  var VAR : boolean ;
  var WBR : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.sanitizer.TagWhitelist'): typeof ಠ_ಠ.clutz.goog.html.sanitizer.TagWhitelist;
}
declare module 'goog:goog.html.sanitizer.TagWhitelist' {
  import alias = ಠ_ಠ.clutz.goog.html.sanitizer.TagWhitelist;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.silverlight {
  /**
   * Creates a SafeHtml representing an object tag, for loading Silverlight files.
   *
   * The following attributes are set to these fixed values:
   * - data: data:application/x-silverlight-2,
   * - type: application/x-silverlight-2
   * - typemustmatch: "" (the empty string, meaning true for a boolean attribute)
   * @param source The value of the source param.
   * @param opt_params Mapping used to generate child param tags. Each tag has a name and value attribute, as defined in mapping. Only names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the param tag to be omitted.
   * @param opt_attributes Mapping from other attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
   */
  function createObject (source : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl , opt_params ? : { [ key: string ]: string } | null , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap } | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.silverlight'): typeof ಠ_ಠ.clutz.goog.html.silverlight;
}
declare module 'goog:goog.html.silverlight' {
  import alias = ಠ_ಠ.clutz.goog.html.silverlight;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.uncheckedconversions {
  /**
   * Performs an "unchecked conversion" to SafeHtml from a plain string that is
   * known to satisfy the SafeHtml type contract.
   *
   * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure
   * that the value of {@code html} satisfies the SafeHtml type contract in all
   * possible program states.
   * @param justification A constant string explaining why this use of this method is safe. May include a security review ticket number.
   * @param html A string that is claimed to adhere to the SafeHtml contract.
   * @param opt_dir The optional directionality of the SafeHtml to be constructed. A null or undefined value signifies an unknown directionality.
   */
  function safeHtmlFromStringKnownToSatisfyTypeContract (justification : ಠ_ಠ.clutz.goog.string.Const , html : string , opt_dir ? : ಠ_ಠ.clutz.goog.i18n.bidi.Dir | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
  /**
   * Performs an "unchecked conversion" to SafeScript from a plain string that is
   * known to satisfy the SafeScript type contract.
   *
   * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure
   * that the value of {@code script} satisfies the SafeScript type contract in
   * all possible program states.
   * @param justification A constant string explaining why this use of this method is safe. May include a security review ticket number.
   * @param script The string to wrap as a SafeScript.
   */
  function safeScriptFromStringKnownToSatisfyTypeContract (justification : ಠ_ಠ.clutz.goog.string.Const , script : string ) : ಠ_ಠ.clutz.goog.html.SafeScript ;
  /**
   * Performs an "unchecked conversion" to SafeStyle from a plain string that is
   * known to satisfy the SafeStyle type contract.
   *
   * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure
   * that the value of {@code style} satisfies the SafeUrl type contract in all
   * possible program states.
   * @param justification A constant string explaining why this use of this method is safe. May include a security review ticket number.
   * @param style The string to wrap as a SafeStyle.
   */
  function safeStyleFromStringKnownToSatisfyTypeContract (justification : ಠ_ಠ.clutz.goog.string.Const , style : string ) : ಠ_ಠ.clutz.goog.html.SafeStyle ;
  /**
   * Performs an "unchecked conversion" to SafeStyleSheet from a plain string
   * that is known to satisfy the SafeStyleSheet type contract.
   *
   * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure
   * that the value of {@code styleSheet} satisfies the SafeUrl type contract in
   * all possible program states.
   * @param justification A constant string explaining why this use of this method is safe. May include a security review ticket number.
   * @param styleSheet The string to wrap as a SafeStyleSheet.
   */
  function safeStyleSheetFromStringKnownToSatisfyTypeContract (justification : ಠ_ಠ.clutz.goog.string.Const , styleSheet : string ) : ಠ_ಠ.clutz.goog.html.SafeStyleSheet ;
  /**
   * Performs an "unchecked conversion" to SafeUrl from a plain string that is
   * known to satisfy the SafeUrl type contract.
   *
   * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure
   * that the value of {@code url} satisfies the SafeUrl type contract in all
   * possible program states.
   * @param justification A constant string explaining why this use of this method is safe. May include a security review ticket number.
   * @param url The string to wrap as a SafeUrl.
   */
  function safeUrlFromStringKnownToSatisfyTypeContract (justification : ಠ_ಠ.clutz.goog.string.Const , url : string ) : ಠ_ಠ.clutz.goog.html.SafeUrl ;
  /**
   * Performs an "unchecked conversion" to TrustedResourceUrl from a plain string
   * that is known to satisfy the TrustedResourceUrl type contract.
   *
   * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure
   * that the value of {@code url} satisfies the TrustedResourceUrl type contract
   * in all possible program states.
   * @param justification A constant string explaining why this use of this method is safe. May include a security review ticket number.
   * @param url The string to wrap as a TrustedResourceUrl.
   */
  function trustedResourceUrlFromStringKnownToSatisfyTypeContract (justification : ಠ_ಠ.clutz.goog.string.Const , url : string ) : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.uncheckedconversions'): typeof ಠ_ಠ.clutz.goog.html.uncheckedconversions;
}
declare module 'goog:goog.html.uncheckedconversions' {
  import alias = ಠ_ಠ.clutz.goog.html.uncheckedconversions;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.utils {
  /**
   * Extracts plain text from HTML.
   *
   * This behaves similarly to extracting textContent from a hypothetical DOM
   * element containing the specified HTML.  Block-level elements such as div are
   * surrounded with whitespace, but inline elements are not.  Span is treated as
   * a block level element because it is often used as a container.  Breaking
   * spaces are compressed and trimmed.
   * @param value The input HTML to have tags removed.
   */
  function stripHtmlTags (value : string ) : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.html.utils'): typeof ಠ_ಠ.clutz.goog.html.utils;
}
declare module 'goog:goog.html.utils' {
  import alias = ಠ_ಠ.clutz.goog.html.utils;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Utility class for formatting text for display in a potentially
   * opposite-directionality context without garbling. Provides the following
   * functionality:
   *
   * 1. BiDi Wrapping
   * When text in one language is mixed into a document in another, opposite-
   * directionality language, e.g. when an English business name is embedded in a
   * Hebrew web page, both the inserted string and the text following it may be
   * displayed incorrectly unless the inserted string is explicitly separated
   * from the surrounding text in a "wrapper" that declares its directionality at
   * the start and then resets it back at the end. This wrapping can be done in
   * HTML mark-up (e.g. a 'span dir="rtl"' tag) or - only in contexts where
   * mark-up can not be used - in Unicode BiDi formatting codes (LRE|RLE and PDF).
   * Providing such wrapping services is the basic purpose of the BiDi formatter.
   *
   * 2. Directionality estimation
   * How does one know whether a string about to be inserted into surrounding
   * text has the same directionality? Well, in many cases, one knows that this
   * must be the case when writing the code doing the insertion, e.g. when a
   * localized message is inserted into a localized page. In such cases there is
   * no need to involve the BiDi formatter at all. In the remaining cases, e.g.
   * when the string is user-entered or comes from a database, the language of
   * the string (and thus its directionality) is not known a priori, and must be
   * estimated at run-time. The BiDi formatter does this automatically.
   *
   * 3. Escaping
   * When wrapping plain text - i.e. text that is not already HTML or HTML-
   * escaped - in HTML mark-up, the text must first be HTML-escaped to prevent XSS
   * attacks and other nasty business. This of course is always true, but the
   * escaping can not be done after the string has already been wrapped in
   * mark-up, so the BiDi formatter also serves as a last chance and includes
   * escaping services.
   *
   * Thus, in a single call, the formatter will escape the input string as
   * specified, determine its directionality, and wrap it as necessary. It is
   * then up to the caller to insert the return value in the output.
   *
   * See http://wiki/Main/TemplatesAndBiDi for more information.
   */
  class BidiFormatter extends BidiFormatter_Instance {
  }
  class BidiFormatter_Instance {
    private noStructuralTyping_: any;
    /**
     * Utility class for formatting text for display in a potentially
     * opposite-directionality context without garbling. Provides the following
     * functionality:
     *
     * 1. BiDi Wrapping
     * When text in one language is mixed into a document in another, opposite-
     * directionality language, e.g. when an English business name is embedded in a
     * Hebrew web page, both the inserted string and the text following it may be
     * displayed incorrectly unless the inserted string is explicitly separated
     * from the surrounding text in a "wrapper" that declares its directionality at
     * the start and then resets it back at the end. This wrapping can be done in
     * HTML mark-up (e.g. a 'span dir="rtl"' tag) or - only in contexts where
     * mark-up can not be used - in Unicode BiDi formatting codes (LRE|RLE and PDF).
     * Providing such wrapping services is the basic purpose of the BiDi formatter.
     *
     * 2. Directionality estimation
     * How does one know whether a string about to be inserted into surrounding
     * text has the same directionality? Well, in many cases, one knows that this
     * must be the case when writing the code doing the insertion, e.g. when a
     * localized message is inserted into a localized page. In such cases there is
     * no need to involve the BiDi formatter at all. In the remaining cases, e.g.
     * when the string is user-entered or comes from a database, the language of
     * the string (and thus its directionality) is not known a priori, and must be
     * estimated at run-time. The BiDi formatter does this automatically.
     *
     * 3. Escaping
     * When wrapping plain text - i.e. text that is not already HTML or HTML-
     * escaped - in HTML mark-up, the text must first be HTML-escaped to prevent XSS
     * attacks and other nasty business. This of course is always true, but the
     * escaping can not be done after the string has already been wrapped in
     * mark-up, so the BiDi formatter also serves as a last chance and includes
     * escaping services.
     *
     * Thus, in a single call, the formatter will escape the input string as
     * specified, determine its directionality, and wrap it as necessary. It is
     * then up to the caller to insert the return value in the output.
     *
     * See http://wiki/Main/TemplatesAndBiDi for more information.
     * @param contextDir The context directionality, in one of the following formats: 1. A goog.i18n.bidi.Dir constant. NEUTRAL is treated the same as null, i.e. unknown, for backward compatibility with legacy calls. 2. A number (positive = LTR, negative = RTL, 0 = unknown). 3. A boolean (true = RTL, false = LTR). 4. A null for unknown directionality.
     * @param opt_alwaysSpan Whether {@link #spanWrap} should always use a 'span' tag, even when the input directionality is neutral or matches the context, so that the DOM structure of the output does not depend on the combination of directionalities. Default: false.
     */
    constructor (contextDir : number | boolean | null , opt_alwaysSpan ? : boolean ) ;
    /**
     * Returns 'dir="ltr"' or 'dir="rtl"', depending on {@code str}'s estimated
     * directionality, if it is not the same as the context directionality.
     * Otherwise, returns the empty string.
     * @param str Text whose directionality is to be estimated.
     * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped. Default: false.
     */
    dirAttr (str : string , opt_isHtml ? : boolean ) : string ;
    /**
     * Returns "rtl" if {@code str}'s estimated directionality is RTL, and "ltr" if
     * it is LTR. In case it's NEUTRAL, returns "rtl" if the context directionality
     * is RTL, and "ltr" otherwise.
     * Needed for GXP, which can't handle dirAttr.
     * Example use case:
     * &lt;td expr:dir='bidiFormatter.dirAttrValue(foo)'&gt;
     * &lt;gxp:eval expr='foo'&gt;
     * &lt;/td&gt;
     * @param str Text whose directionality is to be estimated.
     * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped. Default: false.
     */
    dirAttrValue (str : string , opt_isHtml ? : boolean ) : string ;
    /**
     * Returns 'left' for RTL context directionality. Otherwise (LTR or neutral /
     * unknown context directionality) returns 'right'.
     */
    endEdge ( ) : string ;
    /**
     * Returns the directionality of input argument {@code str}.
     * Identical to {@link goog.i18n.bidi.estimateDirection}.
     * @param str The input text.
     * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped. Default: false.
     */
    estimateDirection (a : string , b ? : boolean ) : ಠ_ಠ.clutz.goog.i18n.bidi.Dir ;
    getAlwaysSpan ( ) : boolean ;
    getContextDir ( ) : ಠ_ಠ.clutz.goog.i18n.bidi.Dir | null ;
    /**
     * Returns 'dir="ltr"' or 'dir="rtl"', depending on the given directionality, if
     * it is not the same as the context directionality. Otherwise, returns the
     * empty string.
     * @param dir A directionality.
     */
    knownDirAttr (dir : ಠ_ಠ.clutz.goog.i18n.bidi.Dir ) : string ;
    /**
     * Returns "rtl" if the given directionality is RTL, and "ltr" if it is LTR. In
     * case it's NEUTRAL, returns "rtl" if the context directionality is RTL, and
     * "ltr" otherwise.
     * @param dir A directionality.
     */
    knownDirAttrValue (dir : ಠ_ಠ.clutz.goog.i18n.bidi.Dir ) : string ;
    /**
     * Returns the Unicode BiDi mark matching the context directionality (LRM for
     * LTR context directionality, RLM for RTL context directionality), or the
     * empty string for neutral / unknown context directionality.
     */
    mark ( ) : string ;
    /**
     * Returns a Unicode BiDi mark matching the context directionality (LRM or RLM)
     * if the directionality or the exit directionality of {@code str} are opposite
     * to the context directionality. Otherwise returns the empty string.
     * @param str The input text.
     * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped. Default: false.
     */
    markAfter (str : string , opt_isHtml ? : boolean ) : string ;
    /**
     * Returns a Unicode BiDi mark matching the context directionality (LRM or RLM)
     * if the given directionality or the exit directionality of {@code str} are
     * opposite to the context directionality. Otherwise returns the empty string.
     * @param dir {@code str}'s overall directionality, or null if unknown and needs to be estimated.
     * @param str The input text.
     * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped. Default: false.
     */
    markAfterKnownDir (dir : ಠ_ಠ.clutz.goog.i18n.bidi.Dir | null , str : string , opt_isHtml ? : boolean ) : string ;
    setAlwaysSpan (alwaysSpan : boolean ) : void ;
    setContextDir (contextDir : number | boolean | null ) : void ;
    /**
     * Formats a string of unknown directionality for use in HTML output of the
     * context directionality, so an opposite-directionality string is neither
     * garbled nor garbles what follows it.
     * The algorithm: estimates the directionality of input argument {@code html}.
     * In case its directionality doesn't match the context directionality, wraps it
     * with a 'span' tag and adds a "dir" attribute (either 'dir="rtl"' or
     * 'dir="ltr"'). If setAlwaysSpan(true) was used, the input is always wrapped
     * with 'span', skipping just the dir attribute when it's not needed.
     *
     * If {@code opt_dirReset}, and if the overall directionality or the exit
     * directionality of {@code str} are opposite to the context directionality, a
     * trailing unicode BiDi mark matching the context directionality is appened
     * (LRM or RLM).
     * @param html The input HTML.
     * @param opt_dirReset Whether to append a trailing unicode bidi mark matching the context directionality, when needed, to prevent the possible garbling of whatever may follow {@code html}. Default: true.
     */
    spanWrapSafeHtml (html : ಠ_ಠ.clutz.goog.html.SafeHtml , opt_dirReset ? : boolean ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Formats a string of given directionality for use in HTML output of the
     * context directionality, so an opposite-directionality string is neither
     * garbled nor garbles what follows it.
     * The algorithm: If {@code dir} doesn't match the context directionality, wraps
     * {@code html} with a 'span' tag and adds a "dir" attribute (either 'dir="rtl"'
     * or 'dir="ltr"'). If setAlwaysSpan(true) was used, the input is always wrapped
     * with 'span', skipping just the dir attribute when it's not needed.
     *
     * If {@code opt_dirReset}, and if {@code dir} or the exit directionality of
     * {@code html} are opposite to the context directionality, a trailing unicode
     * BiDi mark matching the context directionality is appened (LRM or RLM).
     * @param dir {@code html}'s overall directionality, or null if unknown and needs to be estimated.
     * @param html The input HTML.
     * @param opt_dirReset Whether to append a trailing unicode bidi mark matching the context directionality, when needed, to prevent the possible garbling of whatever may follow {@code html}. Default: true.
     */
    spanWrapSafeHtmlWithKnownDir (dir : ಠ_ಠ.clutz.goog.i18n.bidi.Dir | null , html : ಠ_ಠ.clutz.goog.html.SafeHtml , opt_dirReset ? : boolean ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Returns 'right' for RTL context directionality. Otherwise (LTR or neutral /
     * unknown context directionality) returns 'left'.
     */
    startEdge ( ) : string ;
    /**
     * Formats a string of unknown directionality for use in plain-text output of
     * the context directionality, so an opposite-directionality string is neither
     * garbled nor garbles what follows it.
     * As opposed to {@link #spanWrap}, this makes use of unicode BiDi formatting
     * characters. In HTML, its *only* valid use is inside of elements that do not
     * allow mark-up, e.g. an 'option' tag.
     * The algorithm: estimates the directionality of input argument {@code str}.
     * In case it doesn't match  the context directionality, wraps it with Unicode
     * BiDi formatting characters: RLE{@code str}PDF for RTL text, and
     * LRE{@code str}PDF for LTR text.
     *
     * If {@code opt_dirReset}, and if the overall directionality or the exit
     * directionality of {@code str} are opposite to the context directionality, a
     * trailing unicode BiDi mark matching the context directionality is appended
     * (LRM or RLM).
     *
     * Does *not* do HTML-escaping regardless of the value of {@code opt_isHtml}.
     * The return value can be HTML-escaped as necessary.
     * @param str The input text.
     * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped. Default: false.
     * @param opt_dirReset Whether to append a trailing unicode bidi mark matching the context directionality, when needed, to prevent the possible garbling of whatever may follow {@code str}. Default: true.
     */
    unicodeWrap (str : string , opt_isHtml ? : boolean , opt_dirReset ? : boolean ) : string ;
    /**
     * Formats a string of given directionality for use in plain-text output of the
     * context directionality, so an opposite-directionality string is neither
     * garbled nor garbles what follows it.
     * As opposed to {@link #spanWrapWithKnownDir}, makes use of unicode BiDi
     * formatting characters. In HTML, its *only* valid use is inside of elements
     * that do not allow mark-up, e.g. an 'option' tag.
     * The algorithm: If {@code dir} doesn't match the context directionality, wraps
     * {@code str} with Unicode BiDi formatting characters: RLE{@code str}PDF for
     * RTL text, and LRE{@code str}PDF for LTR text.
     *
     * If {@code opt_dirReset}, and if the overall directionality or the exit
     * directionality of {@code str} are opposite to the context directionality, a
     * trailing unicode BiDi mark matching the context directionality is appended
     * (LRM or RLM).
     *
     * Does *not* do HTML-escaping regardless of the value of {@code opt_isHtml}.
     * The return value can be HTML-escaped as necessary.
     * @param dir {@code str}'s overall directionality, or null if unknown and needs to be estimated.
     * @param str The input text.
     * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped. Default: false.
     * @param opt_dirReset Whether to append a trailing unicode bidi mark matching the context directionality, when needed, to prevent the possible garbling of whatever may follow {@code str}. Default: true.
     */
    unicodeWrapWithKnownDir (dir : ಠ_ಠ.clutz.goog.i18n.bidi.Dir | null , str : string , opt_isHtml ? : boolean , opt_dirReset ? : boolean ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.BidiFormatter'): typeof ಠ_ಠ.clutz.goog.i18n.BidiFormatter;
}
declare module 'goog:goog.i18n.BidiFormatter' {
  import alias = ಠ_ಠ.clutz.goog.i18n.BidiFormatter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Class to decompress base88 compressed character list.
   */
  class CharListDecompressor extends CharListDecompressor_Instance {
  }
  class CharListDecompressor_Instance {
    private noStructuralTyping_: any;
    /**
     * Gets the list of characters specified in the given string by base 88 scheme.
     * @param str The string encoding character list.
     */
    toCharList (str : string ) : string [] ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.CharListDecompressor'): typeof ಠ_ಠ.clutz.goog.i18n.CharListDecompressor;
}
declare module 'goog:goog.i18n.CharListDecompressor' {
  import alias = ಠ_ಠ.clutz.goog.i18n.CharListDecompressor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Object holding two level character organization and character listing.
   */
  class CharPickerData extends CharPickerData_Instance {
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_AFRICAN_SCRIPTS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_AMERICAN_SCRIPTS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_EMOJI : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_FORMAT_WHITESPACE : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_HANGUL : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_HAN_10_STROKE_RADICALS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_HAN_11_17_STROKE_RADICALS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_HAN_1_STROKE_RADICALS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_HAN_2_STROKE_RADICALS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_HAN_3_STROKE_RADICALS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_HAN_4_STROKE_RADICALS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_HAN_5_STROKE_RADICALS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_HAN_6_STROKE_RADICALS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_HAN_7_STROKE_RADICALS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_HAN_8_STROKE_RADICALS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_HAN_9_STROKE_RADICALS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_HAN_OTHER : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_LATIN : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_MIDDLE_EASTERN_SCRIPTS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_MODIFIER : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_NUMBER : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_OTHER_EAST_ASIAN_SCRIPTS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_OTHER_EUROPEAN_SCRIPTS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_PUNCTUATION : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_SOUTHEAST_ASIAN_SCRIPTS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_SOUTH_ASIAN_SCRIPTS : string [] ;
    /**
     * List of characters in base88 encoding scheme. Each base88 encoded
     * charater string represents corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    static CHARLIST_OF_SYMBOL : string [] ;
    static MSG_CP_AFRICAN_SCRIPTS : string ;
    static MSG_CP_AMERICAN_SCRIPTS : string ;
    static MSG_CP_ANIMALS_PLANTS_AND_FOOD : string ;
    static MSG_CP_ARABIC : string ;
    static MSG_CP_ARMENIAN : string ;
    static MSG_CP_ARROWS : string ;
    static MSG_CP_ASCII_BASED : string ;
    static MSG_CP_AVESTAN : string ;
    static MSG_CP_BALINESE : string ;
    static MSG_CP_BAMUM : string ;
    static MSG_CP_BATAK : string ;
    static MSG_CP_BENGALI : string ;
    static MSG_CP_BOPOMOFO : string ;
    static MSG_CP_BRAHMI : string ;
    static MSG_CP_BRAILLE : string ;
    static MSG_CP_BUGINESE : string ;
    static MSG_CP_BUHID : string ;
    static MSG_CP_CANADIAN_ABORIGINAL : string ;
    static MSG_CP_CARIAN : string ;
    static MSG_CP_CHAKMA : string ;
    static MSG_CP_CHAM : string ;
    static MSG_CP_CHEROKEE : string ;
    static MSG_CP_CJK_STROKES : string ;
    static MSG_CP_COMMON : string ;
    static MSG_CP_COMPATIBILITY : string ;
    static MSG_CP_CONTROL_PICTURES : string ;
    static MSG_CP_COPTIC : string ;
    static MSG_CP_CUNEIFORM : string ;
    static MSG_CP_CURRENCY : string ;
    static MSG_CP_CYPRIOT : string ;
    static MSG_CP_CYRILLIC : string ;
    static MSG_CP_DASH_CONNECTOR : string ;
    static MSG_CP_DECIMAL : string ;
    static MSG_CP_DESERET : string ;
    static MSG_CP_DEVANAGARI : string ;
    static MSG_CP_EGYPTIAN_HIEROGLYPHS : string ;
    static MSG_CP_EMOJI : string ;
    static MSG_CP_EMOTICONS : string ;
    static MSG_CP_ENCLOSED : string ;
    static MSG_CP_ENCLOSED_DOTTED : string ;
    static MSG_CP_ENCLOSING : string ;
    static MSG_CP_ETHIOPIC : string ;
    static MSG_CP_FLIPPED_MIRRORED : string ;
    static MSG_CP_FORMAT : string ;
    static MSG_CP_FORMAT_WHITESPACE : string ;
    static MSG_CP_FRACTIONS_RELATED : string ;
    static MSG_CP_GAME_PIECES : string ;
    static MSG_CP_GENDER_AND_GENEALOGICAL : string ;
    static MSG_CP_GEOMETRIC_SHAPES : string ;
    static MSG_CP_GEORGIAN : string ;
    static MSG_CP_GLAGOLITIC : string ;
    static MSG_CP_GOTHIC : string ;
    static MSG_CP_GREEK : string ;
    static MSG_CP_GUJARATI : string ;
    static MSG_CP_GURMUKHI : string ;
    static MSG_CP_HANGUL : string ;
    static MSG_CP_HANUNOO : string ;
    static MSG_CP_HAN_10_STROKE_RADICALS : string ;
    static MSG_CP_HAN_11_17_STROKE_RADICALS : string ;
    static MSG_CP_HAN_1_STROKE_RADICALS : string ;
    static MSG_CP_HAN_2_STROKE_RADICALS : string ;
    static MSG_CP_HAN_3_STROKE_RADICALS : string ;
    static MSG_CP_HAN_4_STROKE_RADICALS : string ;
    static MSG_CP_HAN_5_STROKE_RADICALS : string ;
    static MSG_CP_HAN_6_STROKE_RADICALS : string ;
    static MSG_CP_HAN_7_STROKE_RADICALS : string ;
    static MSG_CP_HAN_8_STROKE_RADICALS : string ;
    static MSG_CP_HAN_9_STROKE_RADICALS : string ;
    static MSG_CP_HAN_OTHER : string ;
    static MSG_CP_HEBREW : string ;
    static MSG_CP_HIRAGANA : string ;
    static MSG_CP_HISTORIC : string ;
    static MSG_CP_IDEOGRAPHIC_DESCRIPTION : string ;
    static MSG_CP_IMPERIAL_ARAMAIC : string ;
    static MSG_CP_INSCRIPTIONAL_PAHLAVI : string ;
    static MSG_CP_INSCRIPTIONAL_PARTHIAN : string ;
    static MSG_CP_JAVANESE : string ;
    static MSG_CP_KAITHI : string ;
    static MSG_CP_KANNADA : string ;
    static MSG_CP_KATAKANA : string ;
    static MSG_CP_KAYAH_LI : string ;
    static MSG_CP_KEYBOARD_AND_UI : string ;
    static MSG_CP_KHAROSHTHI : string ;
    static MSG_CP_KHMER : string ;
    static MSG_CP_LAO : string ;
    static MSG_CP_LATIN : string ;
    static MSG_CP_LATIN_1_SUPPLEMENT : string ;
    static MSG_CP_LEPCHA : string ;
    static MSG_CP_LESS_COMMON : string ;
    static MSG_CP_LIMBU : string ;
    static MSG_CP_LINEAR_B : string ;
    static MSG_CP_LISU : string ;
    static MSG_CP_LYCIAN : string ;
    static MSG_CP_LYDIAN : string ;
    static MSG_CP_MALAYALAM : string ;
    static MSG_CP_MANDAIC : string ;
    static MSG_CP_MARKS : string ;
    static MSG_CP_MATH : string ;
    static MSG_CP_MATH_ALPHANUMERIC : string ;
    static MSG_CP_MEETEI_MAYEK : string ;
    static MSG_CP_MEROITIC_CURSIVE : string ;
    static MSG_CP_MEROITIC_HIEROGLYPHS : string ;
    static MSG_CP_MIAO : string ;
    static MSG_CP_MIDDLE_EASTERN_SCRIPTS : string ;
    static MSG_CP_MISCELLANEOUS : string ;
    static MSG_CP_MODIFIER : string ;
    static MSG_CP_MONGOLIAN : string ;
    static MSG_CP_MUSICAL : string ;
    static MSG_CP_MYANMAR : string ;
    static MSG_CP_NEW_TAI_LUE : string ;
    static MSG_CP_NKO : string ;
    static MSG_CP_NONSPACING : string ;
    static MSG_CP_NUMBER : string ;
    static MSG_CP_OBJECTS : string ;
    static MSG_CP_OGHAM : string ;
    static MSG_CP_OLD_ITALIC : string ;
    static MSG_CP_OLD_PERSIAN : string ;
    static MSG_CP_OLD_SOUTH_ARABIAN : string ;
    static MSG_CP_OLD_TURKIC : string ;
    static MSG_CP_OL_CHIKI : string ;
    static MSG_CP_ORIYA : string ;
    static MSG_CP_OSMANYA : string ;
    static MSG_CP_OTHER : string ;
    static MSG_CP_OTHER_EAST_ASIAN_SCRIPTS : string ;
    static MSG_CP_OTHER_EUROPEAN_SCRIPTS : string ;
    static MSG_CP_PAIRED : string ;
    static MSG_CP_PEOPLE_AND_EMOTIONS : string ;
    static MSG_CP_PHAGS_PA : string ;
    static MSG_CP_PHOENICIAN : string ;
    static MSG_CP_PHONETICS_IPA : string ;
    static MSG_CP_PHONETICS_X_IPA : string ;
    static MSG_CP_PUNCTUATION : string ;
    static MSG_CP_REJANG : string ;
    static MSG_CP_RUNIC : string ;
    static MSG_CP_SAMARITAN : string ;
    static MSG_CP_SAURASHTRA : string ;
    static MSG_CP_SHARADA : string ;
    static MSG_CP_SHAVIAN : string ;
    static MSG_CP_SINHALA : string ;
    static MSG_CP_SORA_SOMPENG : string ;
    static MSG_CP_SOUTHEAST_ASIAN_SCRIPTS : string ;
    static MSG_CP_SOUTH_ASIAN_SCRIPTS : string ;
    static MSG_CP_SPACING : string ;
    static MSG_CP_SPORTS_CELEBRATIONS_AND_ACTIVITIES : string ;
    static MSG_CP_STARS_ASTERISKS : string ;
    static MSG_CP_SUBSCRIPT : string ;
    static MSG_CP_SUNDANESE : string ;
    static MSG_CP_SUPERSCRIPT : string ;
    static MSG_CP_SYLOTI_NAGRI : string ;
    static MSG_CP_SYMBOL : string ;
    static MSG_CP_SYMBOLS : string ;
    static MSG_CP_SYRIAC : string ;
    static MSG_CP_TAGALOG : string ;
    static MSG_CP_TAGBANWA : string ;
    static MSG_CP_TAI_LE : string ;
    static MSG_CP_TAI_THAM : string ;
    static MSG_CP_TAI_VIET : string ;
    static MSG_CP_TAKRI : string ;
    static MSG_CP_TAMIL : string ;
    static MSG_CP_TECHNICAL : string ;
    static MSG_CP_TELUGU : string ;
    static MSG_CP_THAANA : string ;
    static MSG_CP_THAI : string ;
    static MSG_CP_TIBETAN : string ;
    static MSG_CP_TIFINAGH : string ;
    static MSG_CP_TRANSPORT_AND_MAP : string ;
    static MSG_CP_TRANSPORT_MAPS_AND_SIGNAGE : string ;
    static MSG_CP_UGARITIC : string ;
    static MSG_CP_VAI : string ;
    static MSG_CP_VARIATION_SELECTOR : string ;
    static MSG_CP_WEATHER_AND_ASTROLOGICAL : string ;
    static MSG_CP_WEATHER_SCENES_AND_ZODIAC_SIGNS : string ;
    static MSG_CP_WHITESPACE : string ;
    static MSG_CP_YI : string ;
    static MSG_CP_YIJING_TAI_XUAN_JING : string ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_AFRICAN_SCRIPTS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_AMERICAN_SCRIPTS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_EMOJI : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_FORMAT_WHITESPACE : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_HANGUL : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_HAN_10_STROKE_RADICALS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_HAN_11_17_STROKE_RADICALS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_HAN_1_STROKE_RADICALS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_HAN_2_STROKE_RADICALS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_HAN_3_STROKE_RADICALS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_HAN_4_STROKE_RADICALS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_HAN_5_STROKE_RADICALS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_HAN_6_STROKE_RADICALS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_HAN_7_STROKE_RADICALS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_HAN_8_STROKE_RADICALS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_HAN_9_STROKE_RADICALS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_HAN_OTHER : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_LATIN : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_MIDDLE_EASTERN_SCRIPTS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_MODIFIER : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_NUMBER : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_OTHER_EAST_ASIAN_SCRIPTS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_OTHER_EUROPEAN_SCRIPTS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_PUNCTUATION : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_SOUTHEAST_ASIAN_SCRIPTS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_SOUTH_ASIAN_SCRIPTS : string [] ;
    /**
     * Names of subcategories. Each message this array is the
     * name for the corresponding subcategory specified in
     * {@code goog.i18n.CharPickerData.subcategories}.
     */
    static SUBCATEGORY_NAMES_OF_SYMBOL : string [] ;
  }
  class CharPickerData_Instance {
    private noStructuralTyping_: any;
    /**
     * Top catagory names of character organization.
     */
    categories : string [] ;
    /**
     * Character lists in base88 encoding scheme. Each subarray is a list of
     * base88 encoded charater strings representing corresponding subcategory
     * specified in {@code goog.i18n.CharPickerData.categories}. Encoding
     * scheme is described in {@code goog.i18n.CharListDecompressor}.
     */
    charList : string [] [] ;
    /**
     * Subcategory names. Each subarray in this array is a list of subcategory
     * names for the corresponding category specified in
     * {@code goog.i18n.CharPickerData.categories}.
     */
    subcategories : string [] [] ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.CharPickerData'): typeof ಠ_ಠ.clutz.goog.i18n.CharPickerData;
}
declare module 'goog:goog.i18n.CharPickerData' {
  import alias = ಠ_ಠ.clutz.goog.i18n.CharPickerData;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Construct a DateTimeFormat object based on current locale.
   */
  class DateTimeFormat extends DateTimeFormat_Instance {
    static isEnforceAsciiDigits ( ) : boolean ;
    /**
     * Localizes a string potentially containing numbers, replacing ASCII digits
     * with native digits if specified so by the locale. Leaves other characters.
     * @param input the string to be localized, using ASCII digits.
     * @param opt_dateTimeSymbols Optional symbols to use rather than the global symbols.
     */
    static localizeNumbers (input : number | string , opt_dateTimeSymbols ? : Object ) : string ;
    /**
     * Sets if the usage of Ascii digits in formatting should be enforced in
     * formatted date/time even for locales where native digits are indicated.
     * Also sets whether to remove RLM unicode control characters when using
     * standard enumerated patterns (they exist e.g. in standard d/M/y for Arabic).
     * Production code should call this once before any {@code DateTimeFormat}
     * object is instantiated.
     * Caveats:
     * * Enforcing ASCII digits affects all future formatting by new or existing
     * {@code DateTimeFormat} objects.
     * * Removal of RLM characters only applies to {@code DateTimeFormat} objects
     * instantiated after this call.
     * @param enforceAsciiDigits Whether Ascii digits should be enforced.
     */
    static setEnforceAsciiDigits (enforceAsciiDigits : boolean ) : void ;
  }
  class DateTimeFormat_Instance {
    private noStructuralTyping_: any;
    /**
     * Construct a DateTimeFormat object based on current locale.
     * @param pattern pattern specification or pattern type.
     * @param opt_dateTimeSymbols Optional symbols to use for this instance rather than the global symbols.
     */
    constructor (pattern : string | number , opt_dateTimeSymbols ? : Object ) ;
    patternParts_ : any [] ;
    /**
     * Format the given date object according to preset pattern and current locale.
     * @param date The Date object that is being formatted.
     * @param opt_timeZone optional, if specified, time related fields will be formatted based on its setting. When this field is not specified, "undefined" will be pass around and those function that really need time zone service will create a default one.
     */
    format (date : Date | null | ಠ_ಠ.clutz.goog.date.Date , opt_timeZone ? : ಠ_ಠ.clutz.goog.i18n.TimeZone | null ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.DateTimeFormat'): typeof ಠ_ಠ.clutz.goog.i18n.DateTimeFormat;
}
declare module 'goog:goog.i18n.DateTimeFormat' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeFormat;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.DateTimeFormat {
  /**
   * Enum to identify predefined Date/Time format pattern.
   */
  type Format = number ;
  var Format : {
    FULL_DATE : Format ,
    FULL_DATETIME : Format ,
    FULL_TIME : Format ,
    LONG_DATE : Format ,
    LONG_DATETIME : Format ,
    LONG_TIME : Format ,
    MEDIUM_DATE : Format ,
    MEDIUM_DATETIME : Format ,
    MEDIUM_TIME : Format ,
    SHORT_DATE : Format ,
    SHORT_DATETIME : Format ,
    SHORT_TIME : Format ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.DateTimeFormat.Format'): typeof ಠ_ಠ.clutz.goog.i18n.DateTimeFormat.Format;
}
declare module 'goog:goog.i18n.DateTimeFormat.Format' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeFormat.Format;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Construct a DateTimeParse based on current locale.
   */
  class DateTimeParse extends DateTimeParse_Instance {
    /**
     * Number of years prior to now that the century used to
     * disambiguate two digit years will begin
     */
    static ambiguousYearCenturyStart : number ;
  }
  class DateTimeParse_Instance {
    private noStructuralTyping_: any;
    /**
     * Construct a DateTimeParse based on current locale.
     * @param pattern pattern specification or pattern type.
     * @param opt_dateTimeSymbols Optional symbols to use for this instance rather than the global symbols.
     */
    constructor (pattern : string | number , opt_dateTimeSymbols ? : Object ) ;
    patternParts_ : any [] ;
    /**
     * Parse the given string and fill info into date object. This version does
     * not validate the input.
     * @param text The string being parsed.
     * @param date The Date object to hold the parsed date.
     * @param opt_start The position from where parse should begin.
     */
    parse (text : string , date : Date | null | ಠ_ಠ.clutz.goog.date.Date , opt_start ? : number ) : number ;
    /**
     * Parse the given string and fill info into date object. This version will
     * validate the input and make sure it is a validate date/time.
     * @param text The string being parsed.
     * @param date The Date object to hold the parsed date.
     * @param opt_start The position from where parse should begin.
     */
    strictParse (text : string , date : Date | null | ಠ_ಠ.clutz.goog.date.Date , opt_start ? : number ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.DateTimeParse'): typeof ಠ_ಠ.clutz.goog.i18n.DateTimeParse;
}
declare module 'goog:goog.i18n.DateTimeParse' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeParse;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns : any;
}
declare module 'goog:goog.i18n.DateTimePatterns' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatternsExt : Object ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.DateTimePatternsExt'): typeof ಠ_ಠ.clutz.goog.i18n.DateTimePatternsExt;
}
declare module 'goog:goog.i18n.DateTimePatternsExt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatternsExt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_af : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_af' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_af;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_af_NA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_af_NA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_af_NA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_af_ZA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_af_ZA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_af_ZA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_agq : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_agq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_agq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_agq_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_agq_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_agq_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ak : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ak' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ak;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ak_GH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ak_GH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ak_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_am : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_am' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_am;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_am_ET : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_am_ET' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_am_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_001 : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_AE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_AE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_AE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_BH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_BH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_BH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_DJ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_DJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_DJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_DZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_DZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_DZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_EG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_EG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_EG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_EH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_EH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_EH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_ER : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_ER' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_ER;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_IL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_IL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_IL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_IQ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_IQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_JO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_JO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_JO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_KM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_KM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_KM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_KW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_KW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_KW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_LB : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_LB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_LB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_LY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_LY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_LY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_MA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_MR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_MR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_MR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_OM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_OM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_OM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_PS : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_PS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_PS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_QA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_QA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_QA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_SA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_SA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_SA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_SD : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_SD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_SD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_SO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_SO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_SO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_SS : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_SS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_SS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_SY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_SY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_SY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_TD : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_TD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_TD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_TN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_TN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_TN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_XB : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_XB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_XB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ar_YE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ar_YE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ar_YE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_as : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_as' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_as;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_as_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_as_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_as_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_asa : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_asa' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_asa;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_asa_TZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_asa_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_asa_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ast : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ast' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ast;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ast_ES : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ast_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ast_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_az : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_az' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_az;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_az_Cyrl : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_az_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_az_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_az_Cyrl_AZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_az_Cyrl_AZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_az_Cyrl_AZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_az_Latn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_az_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_az_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_az_Latn_AZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_az_Latn_AZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_az_Latn_AZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bas : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bas' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bas;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bas_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bas_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bas_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_be : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_be' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_be;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_be_BY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_be_BY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_be_BY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bem : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bem' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bem;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bem_ZM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bem_ZM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bem_ZM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bez : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bez' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bez;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bez_TZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bez_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bez_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bg : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bg_BG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bg_BG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bg_BG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bm : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bm' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bm;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bm_ML : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bm_ML' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bm_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bn_BD : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bn_BD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bn_BD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bn_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bn_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bn_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bo : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bo_CN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bo_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bo_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bo_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bo_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bo_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_br : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_br' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_br;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_br_FR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_br_FR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_br_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_brx : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_brx' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_brx;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_brx_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_brx_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_brx_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bs : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bs' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bs;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bs_Cyrl : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bs_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bs_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bs_Cyrl_BA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bs_Cyrl_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bs_Cyrl_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bs_Latn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bs_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bs_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_bs_Latn_BA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_bs_Latn_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_bs_Latn_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ca : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ca' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ca;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ca_AD : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ca_AD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ca_AD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ca_ES : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ca_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ca_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ca_FR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ca_FR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ca_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ca_IT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ca_IT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ca_IT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ce : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ce' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ce;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ce_RU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ce_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ce_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_cgg : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_cgg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_cgg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_cgg_UG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_cgg_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_cgg_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_chr : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_chr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_chr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_chr_US : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_chr_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_chr_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_cs : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_cs' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_cs;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_cs_CZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_cs_CZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_cs_CZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_cy : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_cy' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_cy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_cy_GB : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_cy_GB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_cy_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_da : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_da' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_da;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_da_DK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_da_DK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_da_DK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_da_GL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_da_GL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_da_GL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_dav : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_dav' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_dav;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_dav_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_dav_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_dav_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_de : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_de' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_de;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_de_AT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_de_AT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_de_AT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_de_BE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_de_BE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_de_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_de_CH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_de_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_de_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_de_DE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_de_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_de_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_de_LI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_de_LI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_de_LI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_de_LU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_de_LU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_de_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_dje : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_dje' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_dje;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_dje_NE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_dje_NE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_dje_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_dsb : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_dsb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_dsb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_dsb_DE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_dsb_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_dsb_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_dua : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_dua' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_dua;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_dua_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_dua_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_dua_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_dyo : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_dyo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_dyo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_dyo_SN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_dyo_SN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_dyo_SN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_dz : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_dz' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_dz;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_dz_BT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_dz_BT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_dz_BT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ebu : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ebu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ebu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ebu_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ebu_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ebu_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ee : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ee' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ee;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ee_GH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ee_GH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ee_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ee_TG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ee_TG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ee_TG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_el : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_el' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_el;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_el_CY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_el_CY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_el_CY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_el_GR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_el_GR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_el_GR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_001 : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_150 : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_150' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_150;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_AG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_AG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_AG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_AI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_AI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_AI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_AS : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_AS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_AS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_AT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_AT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_AT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_AU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_AU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_AU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_BB : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_BB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_BB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_BE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_BE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_BI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_BI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_BI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_BM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_BM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_BM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_BS : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_BS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_BS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_BW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_BW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_BW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_BZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_BZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_BZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_CA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_CA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_CA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_CC : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_CC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_CC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_CH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_CK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_CK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_CK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_CX : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_CX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_CX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_CY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_CY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_CY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_DE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_DG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_DG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_DG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_DK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_DK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_DK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_DM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_DM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_DM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_ER : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_ER' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_ER;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_FI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_FJ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_FJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_FJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_FK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_FK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_FK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_FM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_FM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_FM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_GB : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_GB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_GD : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_GD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_GD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_GG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_GG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_GG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_GH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_GH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_GI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_GI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_GI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_GM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_GM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_GM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_GU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_GU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_GU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_GY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_GY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_GY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_HK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_IE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_IE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_IE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_IL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_IL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_IL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_IM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_IM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_IM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_IO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_IO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_IO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_JE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_JE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_JE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_JM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_JM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_JM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_KI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_KI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_KI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_KN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_KN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_KN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_KY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_KY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_KY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_LC : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_LC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_LC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_LR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_LR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_LR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_LS : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_LS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_LS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_MG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_MG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_MG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_MH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_MH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_MH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_MO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_MO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_MP : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_MP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_MP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_MS : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_MS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_MS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_MT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_MT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_MT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_MU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_MU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_MU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_MW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_MW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_MW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_MY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_MY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_MY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_NA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_NA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_NA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_NF : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_NF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_NF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_NG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_NG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_NL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_NL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_NL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_NR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_NR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_NR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_NU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_NU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_NU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_NZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_NZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_NZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_PG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_PG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_PG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_PH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_PH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_PH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_PK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_PK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_PK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_PN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_PN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_PN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_PR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_PR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_PR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_PW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_PW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_PW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_RW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_RW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_RW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_SB : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_SB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_SB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_SC : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_SC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_SC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_SD : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_SD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_SD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_SE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_SE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_SE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_SG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_SG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_SH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_SH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_SH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_SI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_SI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_SI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_SL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_SL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_SL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_SS : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_SS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_SS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_SX : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_SX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_SX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_SZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_SZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_SZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_TC : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_TC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_TC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_TK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_TK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_TK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_TO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_TO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_TO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_TT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_TT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_TT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_TV : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_TV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_TV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_TZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_UG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_UM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_UM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_UM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_US : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_US_POSIX : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_US_POSIX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_US_POSIX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_VC : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_VC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_VC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_VG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_VG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_VG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_VI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_VI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_VI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_VU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_VU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_VU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_WS : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_WS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_WS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_XA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_XA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_XA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_ZA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_ZA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_ZA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_ZM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_ZM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_ZM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_en_ZW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_en_ZW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_en_ZW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_eo : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_eo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_eo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_419 : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_419' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_419;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_AR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_AR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_AR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_BO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_BO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_BO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_CL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_CL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_CL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_CO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_CO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_CO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_CR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_CR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_CR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_CU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_CU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_CU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_DO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_DO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_DO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_EA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_EA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_EA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_EC : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_EC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_EC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_ES : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_GQ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_GQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_GQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_GT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_GT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_GT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_HN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_HN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_HN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_IC : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_IC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_IC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_MX : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_MX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_MX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_NI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_NI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_NI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_PA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_PA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_PA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_PE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_PE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_PE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_PH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_PH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_PH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_PR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_PR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_PR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_PY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_PY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_PY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_SV : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_SV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_SV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_US : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_UY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_UY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_UY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_es_VE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_es_VE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_es_VE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_et : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_et' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_et;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_et_EE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_et_EE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_et_EE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_eu : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_eu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_eu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_eu_ES : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_eu_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_eu_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ewo : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ewo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ewo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ewo_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ewo_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ewo_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fa : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fa' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fa;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fa_AF : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fa_AF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fa_AF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fa_IR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fa_IR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fa_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ff : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ff' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ff;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ff_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ff_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ff_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ff_GN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ff_GN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ff_GN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ff_MR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ff_MR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ff_MR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ff_SN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ff_SN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ff_SN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fi : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fi_FI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fi_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fi_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fil : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fil' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fil;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fil_PH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fil_PH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fil_PH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fo : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fo_DK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fo_DK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fo_DK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fo_FO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fo_FO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fo_FO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_BE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_BE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_BF : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_BF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_BF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_BI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_BI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_BI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_BJ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_BJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_BJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_BL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_BL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_BL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_CA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_CA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_CA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_CD : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_CD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_CF : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_CF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_CF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_CG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_CG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_CG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_CH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_CI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_CI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_CI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_DJ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_DJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_DJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_DZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_DZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_DZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_FR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_FR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_GA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_GA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_GA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_GF : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_GF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_GF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_GN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_GN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_GN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_GP : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_GP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_GP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_GQ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_GQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_GQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_HT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_HT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_HT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_KM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_KM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_KM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_LU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_LU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_MA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_MC : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_MC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_MC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_MF : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_MF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_MF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_MG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_MG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_MG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_ML : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_ML' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_MQ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_MQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_MQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_MR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_MR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_MR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_MU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_MU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_MU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_NC : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_NC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_NC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_NE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_NE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_PF : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_PF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_PF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_PM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_PM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_PM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_RE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_RE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_RE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_RW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_RW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_RW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_SC : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_SC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_SC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_SN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_SN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_SN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_SY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_SY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_SY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_TD : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_TD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_TD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_TG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_TG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_TG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_TN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_TN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_TN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_VU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_VU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_VU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_WF : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_WF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_WF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fr_YT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fr_YT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fr_YT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fur : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fur' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fur;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fur_IT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fur_IT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fur_IT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fy : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fy' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_fy_NL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_fy_NL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_fy_NL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ga : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ga' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ga;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ga_IE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ga_IE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ga_IE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_gd : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_gd' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_gd;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_gd_GB : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_gd_GB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_gd_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_gl : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_gl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_gl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_gl_ES : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_gl_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_gl_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_gsw : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_gsw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_gsw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_gsw_CH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_gsw_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_gsw_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_gsw_FR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_gsw_FR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_gsw_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_gsw_LI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_gsw_LI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_gsw_LI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_gu : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_gu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_gu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_gu_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_gu_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_gu_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_guz : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_guz' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_guz;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_guz_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_guz_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_guz_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_gv : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_gv' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_gv;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_gv_IM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_gv_IM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_gv_IM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ha : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ha' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ha;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ha_GH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ha_GH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ha_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ha_NE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ha_NE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ha_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ha_NG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ha_NG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ha_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_haw : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_haw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_haw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_haw_US : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_haw_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_haw_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_he : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_he' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_he;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_he_IL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_he_IL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_he_IL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_hi : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_hi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_hi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_hi_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_hi_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_hi_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_hr : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_hr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_hr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_hr_BA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_hr_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_hr_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_hr_HR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_hr_HR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_hr_HR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_hsb : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_hsb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_hsb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_hsb_DE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_hsb_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_hsb_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_hu : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_hu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_hu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_hu_HU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_hu_HU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_hu_HU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_hy : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_hy' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_hy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_hy_AM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_hy_AM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_hy_AM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_id : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_id' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_id;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_id_ID : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_id_ID' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_id_ID;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ig : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ig' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ig;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ig_NG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ig_NG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ig_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ii : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ii' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ii;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ii_CN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ii_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ii_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_in : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_in' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_in;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_is : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_is' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_is;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_is_IS : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_is_IS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_is_IS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_it : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_it' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_it;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_it_CH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_it_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_it_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_it_IT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_it_IT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_it_IT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_it_SM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_it_SM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_it_SM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_iw : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_iw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_iw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ja : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ja' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ja;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ja_JP : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ja_JP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ja_JP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_jgo : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_jgo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_jgo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_jgo_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_jgo_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_jgo_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_jmc : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_jmc' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_jmc;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_jmc_TZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_jmc_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_jmc_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ka : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ka' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ka;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ka_GE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ka_GE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ka_GE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kab : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kab' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kab_DZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kab_DZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kab_DZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kam : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kam' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kam;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kam_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kam_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kam_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kde : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kde' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kde;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kde_TZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kde_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kde_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kea : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kea' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kea;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kea_CV : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kea_CV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kea_CV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_khq : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_khq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_khq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_khq_ML : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_khq_ML' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_khq_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ki : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ki' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ki;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ki_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ki_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ki_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kk : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kk_KZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kk_KZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kk_KZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kkj : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kkj' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kkj;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kkj_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kkj_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kkj_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kl : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kl_GL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kl_GL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kl_GL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kln : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kln' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kln;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kln_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kln_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kln_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_km : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_km' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_km;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_km_KH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_km_KH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_km_KH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kn_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kn_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kn_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ko : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ko' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ko;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ko_KP : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ko_KP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ko_KP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ko_KR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ko_KR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ko_KR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kok : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kok' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kok;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kok_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kok_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kok_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ks : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ks' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ks;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ks_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ks_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ks_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ksb : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ksb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ksb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ksb_TZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ksb_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ksb_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ksf : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ksf' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ksf;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ksf_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ksf_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ksf_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ksh : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ksh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ksh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ksh_DE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ksh_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ksh_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kw : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_kw_GB : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_kw_GB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_kw_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ky : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ky' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ky;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ky_KG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ky_KG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ky_KG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lag : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lag' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lag;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lag_TZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lag_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lag_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lb : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lb_LU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lb_LU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lb_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lg : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lg_UG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lg_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lg_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lkt : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lkt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lkt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lkt_US : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lkt_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lkt_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ln : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ln' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ln;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ln_AO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ln_AO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ln_AO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ln_CD : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ln_CD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ln_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ln_CF : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ln_CF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ln_CF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ln_CG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ln_CG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ln_CG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lo : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lo_LA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lo_LA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lo_LA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lrc : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lrc' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lrc;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lrc_IQ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lrc_IQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lrc_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lrc_IR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lrc_IR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lrc_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lt : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lt_LT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lt_LT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lt_LT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lu : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lu_CD : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lu_CD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lu_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_luo : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_luo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_luo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_luo_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_luo_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_luo_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_luy : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_luy' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_luy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_luy_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_luy_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_luy_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lv : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lv' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lv;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_lv_LV : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_lv_LV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_lv_LV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mas : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mas' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mas;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mas_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mas_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mas_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mas_TZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mas_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mas_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mer : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mer' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mer_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mer_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mer_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mfe : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mfe' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mfe;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mfe_MU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mfe_MU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mfe_MU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mg : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mg_MG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mg_MG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mg_MG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mgh : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mgh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mgh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mgh_MZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mgh_MZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mgh_MZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mgo : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mgo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mgo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mgo_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mgo_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mgo_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mk : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mk_MK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mk_MK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mk_MK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ml : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ml' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ml;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ml_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ml_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ml_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mn_MN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mn_MN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mn_MN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mo : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mr : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mr_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mr_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mr_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ms : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ms' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ms;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ms_BN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ms_BN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ms_BN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ms_MY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ms_MY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ms_MY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ms_SG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ms_SG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ms_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mt : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mt_MT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mt_MT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mt_MT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mua : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mua' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mua;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mua_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mua_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mua_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_my : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_my' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_my;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_my_MM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_my_MM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_my_MM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mzn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mzn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mzn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_mzn_IR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_mzn_IR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_mzn_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_naq : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_naq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_naq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_naq_NA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_naq_NA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_naq_NA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nb : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nb_NO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nb_NO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nb_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nb_SJ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nb_SJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nb_SJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nd : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nd' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nd;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nd_ZW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nd_ZW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nd_ZW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ne : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ne' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ne;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ne_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ne_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ne_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ne_NP : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ne_NP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ne_NP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nl : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nl_AW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nl_AW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nl_AW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nl_BE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nl_BE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nl_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nl_BQ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nl_BQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nl_BQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nl_CW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nl_CW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nl_CW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nl_NL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nl_NL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nl_NL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nl_SR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nl_SR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nl_SR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nl_SX : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nl_SX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nl_SX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nmg : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nmg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nmg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nmg_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nmg_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nmg_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nn_NO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nn_NO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nn_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nnh : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nnh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nnh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nnh_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nnh_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nnh_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_no : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_no' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_no;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_no_NO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_no_NO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_no_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nus : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nus' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nus;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nus_SS : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nus_SS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nus_SS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nyn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nyn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nyn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_nyn_UG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_nyn_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_nyn_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_om : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_om' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_om;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_om_ET : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_om_ET' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_om_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_om_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_om_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_om_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_or : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_or' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_or;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_or_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_or_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_or_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_os : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_os' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_os;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_os_GE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_os_GE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_os_GE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_os_RU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_os_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_os_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pa : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pa' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pa;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pa_Arab : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pa_Arab' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pa_Arab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pa_Arab_PK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pa_Arab_PK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pa_Arab_PK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pa_Guru : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pa_Guru' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pa_Guru;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pa_Guru_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pa_Guru_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pa_Guru_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pl : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pl_PL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pl_PL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pl_PL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ps : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ps' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ps;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ps_AF : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ps_AF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ps_AF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pt : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pt_AO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pt_AO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pt_AO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pt_BR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pt_BR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pt_BR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pt_CV : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pt_CV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pt_CV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pt_GW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pt_GW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pt_GW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pt_MO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pt_MO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pt_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pt_MZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pt_MZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pt_MZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pt_PT : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pt_PT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pt_PT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pt_ST : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pt_ST' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pt_ST;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_pt_TL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_pt_TL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_pt_TL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_qu : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_qu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_qu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_qu_BO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_qu_BO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_qu_BO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_qu_EC : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_qu_EC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_qu_EC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_qu_PE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_qu_PE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_qu_PE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_rm : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_rm' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_rm;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_rm_CH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_rm_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_rm_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_rn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_rn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_rn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_rn_BI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_rn_BI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_rn_BI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ro : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ro' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ro;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ro_MD : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ro_MD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ro_MD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ro_RO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ro_RO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ro_RO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_rof : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_rof' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_rof;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_rof_TZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_rof_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_rof_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ru : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ru' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ru;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ru_BY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ru_BY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ru_BY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ru_KG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ru_KG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ru_KG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ru_KZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ru_KZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ru_KZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ru_MD : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ru_MD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ru_MD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ru_RU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ru_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ru_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ru_UA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ru_UA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ru_UA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_rw : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_rw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_rw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_rw_RW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_rw_RW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_rw_RW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_rwk : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_rwk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_rwk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_rwk_TZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_rwk_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_rwk_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sah : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sah' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sah;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sah_RU : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sah_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sah_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_saq : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_saq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_saq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_saq_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_saq_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_saq_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sbp : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sbp' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sbp;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sbp_TZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sbp_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sbp_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_se : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_se' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_se;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_se_FI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_se_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_se_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_se_NO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_se_NO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_se_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_se_SE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_se_SE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_se_SE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_seh : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_seh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_seh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_seh_MZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_seh_MZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_seh_MZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ses : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ses' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ses;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ses_ML : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ses_ML' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ses_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sg : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sg_CF : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sg_CF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sg_CF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sh : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_shi : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_shi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_shi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_shi_Latn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_shi_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_shi_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_shi_Latn_MA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_shi_Latn_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_shi_Latn_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_shi_Tfng : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_shi_Tfng' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_shi_Tfng;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_shi_Tfng_MA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_shi_Tfng_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_shi_Tfng_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_si : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_si' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_si;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_si_LK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_si_LK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_si_LK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sk : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sk_SK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sk_SK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sk_SK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sl : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sl_SI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sl_SI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sl_SI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_smn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_smn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_smn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_smn_FI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_smn_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_smn_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sn_ZW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sn_ZW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sn_ZW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_so : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_so' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_so;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_so_DJ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_so_DJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_so_DJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_so_ET : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_so_ET' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_so_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_so_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_so_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_so_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_so_SO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_so_SO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_so_SO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sq : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sq_AL : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sq_AL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sq_AL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sq_MK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sq_MK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sq_MK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sq_XK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sq_XK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sq_XK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sr : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sr_Cyrl : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sr_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sr_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sr_Cyrl_BA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sr_Cyrl_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sr_Cyrl_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sr_Cyrl_ME : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sr_Cyrl_ME' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sr_Cyrl_ME;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sr_Cyrl_RS : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sr_Cyrl_RS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sr_Cyrl_RS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sr_Cyrl_XK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sr_Cyrl_XK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sr_Cyrl_XK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sr_Latn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sr_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sr_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sr_Latn_BA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sr_Latn_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sr_Latn_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sr_Latn_ME : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sr_Latn_ME' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sr_Latn_ME;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sr_Latn_RS : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sr_Latn_RS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sr_Latn_RS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sr_Latn_XK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sr_Latn_XK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sr_Latn_XK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sv : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sv' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sv;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sv_AX : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sv_AX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sv_AX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sv_FI : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sv_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sv_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sv_SE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sv_SE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sv_SE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sw : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sw_CD : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sw_CD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sw_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sw_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sw_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sw_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sw_TZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sw_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sw_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_sw_UG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_sw_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_sw_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ta : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ta' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ta;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ta_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ta_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ta_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ta_LK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ta_LK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ta_LK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ta_MY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ta_MY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ta_MY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ta_SG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ta_SG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ta_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_te : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_te' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_te;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_te_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_te_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_te_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_teo : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_teo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_teo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_teo_KE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_teo_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_teo_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_teo_UG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_teo_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_teo_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_th : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_th' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_th;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_th_TH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_th_TH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_th_TH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ti : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ti' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ti;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ti_ER : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ti_ER' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ti_ER;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ti_ET : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ti_ET' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ti_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_tl : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_tl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_tl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_to : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_to' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_to;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_to_TO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_to_TO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_to_TO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_tr : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_tr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_tr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_tr_CY : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_tr_CY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_tr_CY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_tr_TR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_tr_TR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_tr_TR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_twq : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_twq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_twq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_twq_NE : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_twq_NE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_twq_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_tzm : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_tzm' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_tzm;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_tzm_MA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_tzm_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_tzm_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ug : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ug' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ug;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ug_CN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ug_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ug_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_uk : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_uk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_uk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_uk_UA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_uk_UA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_uk_UA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ur : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ur' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ur;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ur_IN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ur_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ur_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_ur_PK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_ur_PK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_ur_PK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_uz : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_uz' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_uz;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_uz_Arab : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_uz_Arab' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_uz_Arab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_uz_Arab_AF : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_uz_Arab_AF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_uz_Arab_AF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_uz_Cyrl : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_uz_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_uz_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_uz_Cyrl_UZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_uz_Cyrl_UZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_uz_Cyrl_UZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_uz_Latn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_uz_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_uz_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_uz_Latn_UZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_uz_Latn_UZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_uz_Latn_UZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_vai : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_vai' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_vai;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_vai_Latn : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_vai_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_vai_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_vai_Latn_LR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_vai_Latn_LR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_vai_Latn_LR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_vai_Vaii : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_vai_Vaii' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_vai_Vaii;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_vai_Vaii_LR : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_vai_Vaii_LR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_vai_Vaii_LR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_vi : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_vi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_vi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_vi_VN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_vi_VN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_vi_VN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_vun : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_vun' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_vun;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_vun_TZ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_vun_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_vun_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_wae : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_wae' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_wae;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_wae_CH : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_wae_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_wae_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_xog : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_xog' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_xog;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_xog_UG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_xog_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_xog_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_yav : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_yav' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_yav;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_yav_CM : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_yav_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_yav_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_yi : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_yi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_yi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_yi_001 : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_yi_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_yi_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_yo : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_yo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_yo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_yo_BJ : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_yo_BJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_yo_BJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_yo_NG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_yo_NG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_yo_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_yue : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_yue' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_yue;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_yue_HK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_yue_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_yue_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zgh : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zgh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zgh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zgh_MA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zgh_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zgh_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zh : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zh_CN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zh_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zh_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zh_HK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zh_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zh_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zh_Hans : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zh_Hans' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zh_Hans;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zh_Hans_CN : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zh_Hans_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zh_Hans_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zh_Hans_HK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zh_Hans_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zh_Hans_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zh_Hans_MO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zh_Hans_MO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zh_Hans_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zh_Hans_SG : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zh_Hans_SG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zh_Hans_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zh_Hant : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zh_Hant' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zh_Hant;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zh_Hant_HK : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zh_Hant_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zh_Hant_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zh_Hant_MO : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zh_Hant_MO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zh_Hant_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zh_Hant_TW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zh_Hant_TW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zh_Hant_TW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zh_TW : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zh_TW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zh_TW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zu : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimePatterns_zu_ZA : any;
}
declare module 'goog:goog.i18n.DateTimePatterns_zu_ZA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimePatterns_zu_ZA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols : ಠ_ಠ.clutz.goog.i18n.DateTimeSymbolsType ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.DateTimeSymbols'): typeof ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols;
}
declare module 'goog:goog.i18n.DateTimeSymbols' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbolsExt : Object ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.DateTimeSymbolsExt'): typeof ಠ_ಠ.clutz.goog.i18n.DateTimeSymbolsExt;
}
declare module 'goog:goog.i18n.DateTimeSymbolsExt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbolsExt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  interface DateTimeSymbolsType {
    AMPMS : string [] ;
    DATEFORMATS : string [] ;
    DATETIMEFORMATS : string [] ;
    ERANAMES : string [] ;
    ERAS : string [] ;
    FIRSTDAYOFWEEK : number ;
    FIRSTWEEKCUTOFFDAY : number ;
    MONTHS : string [] ;
    NARROWMONTHS : string [] ;
    NARROWWEEKDAYS : string [] ;
    QUARTERS : string [] ;
    SHORTMONTHS : string [] ;
    SHORTQUARTERS : string [] ;
    SHORTWEEKDAYS : string [] ;
    STANDALONEMONTHS : string [] ;
    STANDALONENARROWMONTHS : string [] ;
    STANDALONENARROWWEEKDAYS : string [] ;
    STANDALONESHORTMONTHS : string [] ;
    STANDALONESHORTWEEKDAYS : string [] ;
    STANDALONEWEEKDAYS : string [] ;
    TIMEFORMATS : string [] ;
    WEEKDAYS : string [] ;
    WEEKENDRANGE : number [] ;
    ZERODIGIT : number | undefined ;
  }
}
declare module 'goog:goog.i18n.DateTimeSymbolsType' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbolsType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_af : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_af' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_af;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_af_NA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_af_NA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_af_NA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_af_ZA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_af_ZA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_af_ZA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_agq : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_agq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_agq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_agq_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_agq_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_agq_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ak : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ak' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ak;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ak_GH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ak_GH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ak_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_am : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_am' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_am;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_am_ET : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_am_ET' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_am_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_001 : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_AE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_AE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_AE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_BH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_BH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_BH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_DJ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_DJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_DJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_DZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_DZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_DZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_EG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_EG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_EG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_EH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_EH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_EH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_ER : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_ER' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_ER;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_IL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_IL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_IL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_IQ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_IQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_JO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_JO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_JO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_KM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_KM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_KM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_KW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_KW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_KW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_LB : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_LB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_LB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_LY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_LY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_LY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_MA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_MR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_MR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_MR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_OM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_OM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_OM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_PS : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_PS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_PS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_QA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_QA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_QA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_SA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_SA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_SA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_SD : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_SD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_SD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_SO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_SO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_SO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_SS : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_SS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_SS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_SY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_SY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_SY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_TD : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_TD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_TD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_TN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_TN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_TN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_XB : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_XB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_XB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ar_YE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ar_YE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ar_YE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_as : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_as' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_as;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_as_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_as_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_as_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_asa : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_asa' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_asa;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_asa_TZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_asa_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_asa_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ast : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ast' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ast;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ast_ES : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ast_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ast_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_az : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_az' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_az;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_az_Cyrl : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_az_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_az_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_az_Cyrl_AZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_az_Cyrl_AZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_az_Cyrl_AZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_az_Latn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_az_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_az_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_az_Latn_AZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_az_Latn_AZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_az_Latn_AZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bas : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bas' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bas;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bas_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bas_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bas_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_be : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_be' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_be;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_be_BY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_be_BY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_be_BY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bem : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bem' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bem;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bem_ZM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bem_ZM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bem_ZM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bez : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bez' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bez;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bez_TZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bez_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bez_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bg : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bg_BG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bg_BG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bg_BG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bm : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bm' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bm;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bm_ML : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bm_ML' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bm_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bn_BD : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bn_BD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bn_BD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bn_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bn_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bn_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bo : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bo_CN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bo_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bo_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bo_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bo_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bo_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_br : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_br' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_br;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_br_FR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_br_FR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_br_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_brx : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_brx' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_brx;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_brx_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_brx_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_brx_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bs : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bs' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bs;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bs_Cyrl : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bs_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bs_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bs_Cyrl_BA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bs_Cyrl_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bs_Cyrl_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bs_Latn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bs_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bs_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_bs_Latn_BA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_bs_Latn_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_bs_Latn_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ca : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ca' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ca;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ca_AD : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ca_AD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ca_AD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ca_ES : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ca_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ca_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ca_ES_VALENCIA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ca_ES_VALENCIA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ca_ES_VALENCIA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ca_FR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ca_FR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ca_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ca_IT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ca_IT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ca_IT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ce : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ce' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ce;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ce_RU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ce_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ce_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_cgg : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_cgg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_cgg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_cgg_UG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_cgg_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_cgg_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_chr : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_chr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_chr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_chr_US : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_chr_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_chr_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ckb : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ckb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ckb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ckb_Arab : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ckb_Arab' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ckb_Arab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ckb_Arab_IQ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ckb_Arab_IQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ckb_Arab_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ckb_Arab_IR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ckb_Arab_IR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ckb_Arab_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ckb_IQ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ckb_IQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ckb_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ckb_IR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ckb_IR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ckb_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ckb_Latn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ckb_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ckb_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ckb_Latn_IQ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ckb_Latn_IQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ckb_Latn_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_cs : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_cs' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_cs;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_cs_CZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_cs_CZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_cs_CZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_cu : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_cu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_cu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_cu_RU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_cu_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_cu_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_cy : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_cy' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_cy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_cy_GB : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_cy_GB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_cy_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_da : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_da' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_da;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_da_DK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_da_DK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_da_DK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_da_GL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_da_GL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_da_GL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_dav : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_dav' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_dav;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_dav_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_dav_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_dav_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_de : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_de' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_de;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_de_AT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_de_AT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_de_AT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_de_BE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_de_BE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_de_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_de_CH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_de_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_de_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_de_DE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_de_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_de_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_de_LI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_de_LI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_de_LI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_de_LU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_de_LU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_de_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_dje : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_dje' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_dje;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_dje_NE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_dje_NE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_dje_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_dsb : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_dsb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_dsb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_dsb_DE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_dsb_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_dsb_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_dua : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_dua' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_dua;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_dua_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_dua_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_dua_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_dyo : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_dyo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_dyo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_dyo_SN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_dyo_SN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_dyo_SN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_dz : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_dz' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_dz;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_dz_BT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_dz_BT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_dz_BT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ebu : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ebu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ebu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ebu_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ebu_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ebu_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ee : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ee' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ee;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ee_GH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ee_GH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ee_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ee_TG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ee_TG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ee_TG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_el : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_el' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_el;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_el_CY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_el_CY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_el_CY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_el_GR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_el_GR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_el_GR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_001 : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_150 : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_150' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_150;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_AG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_AG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_AG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_AI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_AI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_AI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_AS : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_AS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_AS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_AT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_AT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_AT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_AU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_AU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_AU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_BB : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_BB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_BB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_BE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_BE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_BI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_BI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_BI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_BM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_BM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_BM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_BS : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_BS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_BS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_BW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_BW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_BW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_BZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_BZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_BZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_CA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_CA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_CA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_CC : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_CC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_CC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_CH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_CK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_CK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_CK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_CX : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_CX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_CX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_CY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_CY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_CY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_DE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_DG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_DG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_DG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_DK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_DK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_DK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_DM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_DM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_DM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_ER : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_ER' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_ER;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_FI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_FJ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_FJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_FJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_FK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_FK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_FK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_FM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_FM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_FM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_GB : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_GB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_GD : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_GD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_GD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_GG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_GG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_GG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_GH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_GH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_GI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_GI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_GI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_GM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_GM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_GM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_GU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_GU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_GU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_GY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_GY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_GY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_HK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_IE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_IE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_IE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_IL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_IL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_IL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_IM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_IM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_IM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_IO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_IO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_IO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_ISO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_ISO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_ISO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_JE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_JE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_JE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_JM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_JM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_JM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_KI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_KI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_KI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_KN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_KN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_KN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_KY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_KY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_KY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_LC : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_LC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_LC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_LR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_LR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_LR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_LS : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_LS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_LS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_MG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_MG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_MG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_MH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_MH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_MH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_MO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_MO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_MP : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_MP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_MP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_MS : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_MS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_MS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_MT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_MT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_MT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_MU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_MU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_MU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_MW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_MW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_MW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_MY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_MY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_MY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_NA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_NA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_NA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_NF : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_NF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_NF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_NG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_NG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_NL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_NL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_NL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_NR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_NR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_NR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_NU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_NU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_NU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_NZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_NZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_NZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_PG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_PG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_PG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_PH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_PH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_PH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_PK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_PK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_PK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_PN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_PN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_PN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_PR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_PR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_PR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_PW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_PW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_PW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_RW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_RW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_RW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_SB : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_SB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_SB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_SC : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_SC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_SC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_SD : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_SD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_SD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_SE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_SE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_SE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_SG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_SG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_SH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_SH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_SH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_SI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_SI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_SI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_SL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_SL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_SL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_SS : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_SS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_SS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_SX : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_SX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_SX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_SZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_SZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_SZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_TC : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_TC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_TC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_TK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_TK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_TK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_TO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_TO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_TO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_TT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_TT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_TT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_TV : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_TV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_TV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_TZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_UG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_UM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_UM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_UM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_US : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_VC : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_VC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_VC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_VG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_VG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_VG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_VI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_VI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_VI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_VU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_VU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_VU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_WS : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_WS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_WS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_XA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_XA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_XA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_ZA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_ZA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_ZA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_ZM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_ZM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_ZM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_en_ZW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_en_ZW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_en_ZW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_eo : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_eo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_eo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_eo_001 : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_eo_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_eo_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_419 : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_419' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_419;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_AR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_AR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_AR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_BO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_BO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_BO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_BR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_BR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_BR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_CL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_CL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_CL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_CO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_CO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_CO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_CR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_CR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_CR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_CU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_CU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_CU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_DO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_DO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_DO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_EA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_EA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_EA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_EC : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_EC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_EC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_ES : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_GQ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_GQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_GQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_GT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_GT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_GT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_HN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_HN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_HN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_IC : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_IC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_IC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_MX : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_MX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_MX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_NI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_NI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_NI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_PA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_PA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_PA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_PE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_PE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_PE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_PH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_PH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_PH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_PR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_PR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_PR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_PY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_PY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_PY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_SV : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_SV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_SV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_US : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_UY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_UY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_UY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_es_VE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_es_VE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_es_VE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_et : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_et' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_et;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_et_EE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_et_EE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_et_EE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_eu : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_eu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_eu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_eu_ES : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_eu_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_eu_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ewo : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ewo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ewo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ewo_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ewo_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ewo_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fa : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fa' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fa;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fa_AF : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fa_AF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fa_AF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fa_IR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fa_IR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fa_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ff : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ff' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ff;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ff_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ff_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ff_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ff_GN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ff_GN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ff_GN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ff_MR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ff_MR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ff_MR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ff_SN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ff_SN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ff_SN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fi : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fi_FI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fi_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fi_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fil : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fil' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fil;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fil_PH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fil_PH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fil_PH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fo : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fo_DK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fo_DK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fo_DK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fo_FO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fo_FO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fo_FO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_BE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_BE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_BF : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_BF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_BF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_BI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_BI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_BI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_BJ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_BJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_BJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_BL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_BL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_BL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_CA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_CA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_CA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_CD : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_CD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_CF : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_CF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_CF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_CG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_CG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_CG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_CH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_CI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_CI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_CI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_DJ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_DJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_DJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_DZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_DZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_DZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_FR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_FR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_GA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_GA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_GA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_GF : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_GF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_GF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_GN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_GN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_GN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_GP : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_GP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_GP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_GQ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_GQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_GQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_HT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_HT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_HT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_KM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_KM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_KM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_LU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_LU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_MA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_MC : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_MC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_MC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_MF : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_MF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_MF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_MG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_MG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_MG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_ML : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_ML' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_MQ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_MQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_MQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_MR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_MR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_MR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_MU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_MU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_MU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_NC : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_NC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_NC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_NE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_NE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_PF : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_PF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_PF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_PM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_PM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_PM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_RE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_RE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_RE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_RW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_RW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_RW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_SC : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_SC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_SC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_SN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_SN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_SN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_SY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_SY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_SY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_TD : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_TD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_TD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_TG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_TG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_TG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_TN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_TN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_TN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_VU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_VU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_VU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_WF : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_WF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_WF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fr_YT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fr_YT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fr_YT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fur : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fur' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fur;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fur_IT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fur_IT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fur_IT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fy : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fy' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_fy_NL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_fy_NL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_fy_NL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ga : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ga' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ga;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ga_IE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ga_IE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ga_IE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_gd : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_gd' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_gd;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_gd_GB : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_gd_GB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_gd_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_gl : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_gl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_gl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_gl_ES : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_gl_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_gl_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_gsw : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_gsw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_gsw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_gsw_CH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_gsw_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_gsw_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_gsw_FR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_gsw_FR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_gsw_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_gsw_LI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_gsw_LI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_gsw_LI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_gu : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_gu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_gu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_gu_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_gu_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_gu_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_guz : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_guz' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_guz;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_guz_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_guz_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_guz_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_gv : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_gv' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_gv;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_gv_IM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_gv_IM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_gv_IM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ha : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ha' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ha;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ha_GH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ha_GH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ha_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ha_NE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ha_NE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ha_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ha_NG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ha_NG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ha_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_haw : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_haw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_haw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_haw_US : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_haw_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_haw_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_he : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_he' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_he;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_he_IL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_he_IL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_he_IL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_hi : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_hi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_hi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_hi_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_hi_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_hi_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_hr : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_hr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_hr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_hr_BA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_hr_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_hr_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_hr_HR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_hr_HR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_hr_HR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_hsb : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_hsb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_hsb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_hsb_DE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_hsb_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_hsb_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_hu : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_hu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_hu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_hu_HU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_hu_HU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_hu_HU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_hy : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_hy' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_hy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_hy_AM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_hy_AM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_hy_AM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_id : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_id' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_id;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_id_ID : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_id_ID' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_id_ID;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ig : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ig' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ig;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ig_NG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ig_NG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ig_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ii : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ii' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ii;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ii_CN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ii_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ii_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_in : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_in' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_in;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_is : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_is' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_is;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_is_IS : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_is_IS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_is_IS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_it : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_it' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_it;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_it_CH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_it_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_it_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_it_IT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_it_IT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_it_IT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_it_SM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_it_SM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_it_SM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_iw : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_iw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_iw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ja : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ja' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ja;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ja_JP : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ja_JP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ja_JP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_jgo : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_jgo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_jgo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_jgo_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_jgo_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_jgo_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_jmc : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_jmc' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_jmc;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_jmc_TZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_jmc_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_jmc_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ka : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ka' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ka;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ka_GE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ka_GE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ka_GE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kab : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kab' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kab_DZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kab_DZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kab_DZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kam : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kam' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kam;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kam_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kam_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kam_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kde : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kde' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kde;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kde_TZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kde_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kde_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kea : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kea' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kea;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kea_CV : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kea_CV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kea_CV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_khq : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_khq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_khq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_khq_ML : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_khq_ML' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_khq_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ki : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ki' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ki;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ki_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ki_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ki_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kk : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kk_KZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kk_KZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kk_KZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kkj : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kkj' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kkj;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kkj_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kkj_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kkj_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kl : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kl_GL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kl_GL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kl_GL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kln : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kln' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kln;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kln_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kln_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kln_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_km : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_km' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_km;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_km_KH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_km_KH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_km_KH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kn_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kn_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kn_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ko : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ko' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ko;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ko_KP : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ko_KP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ko_KP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ko_KR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ko_KR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ko_KR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kok : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kok' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kok;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kok_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kok_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kok_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ks : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ks' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ks;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ks_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ks_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ks_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ksb : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ksb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ksb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ksb_TZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ksb_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ksb_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ksf : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ksf' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ksf;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ksf_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ksf_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ksf_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ksh : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ksh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ksh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ksh_DE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ksh_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ksh_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kw : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_kw_GB : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_kw_GB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_kw_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ky : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ky' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ky;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ky_KG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ky_KG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ky_KG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lag : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lag' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lag;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lag_TZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lag_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lag_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lb : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lb_LU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lb_LU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lb_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lg : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lg_UG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lg_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lg_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lkt : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lkt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lkt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lkt_US : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lkt_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lkt_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ln : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ln' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ln;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ln_AO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ln_AO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ln_AO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ln_CD : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ln_CD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ln_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ln_CF : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ln_CF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ln_CF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ln_CG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ln_CG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ln_CG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lo : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lo_LA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lo_LA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lo_LA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lrc : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lrc' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lrc;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lrc_IQ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lrc_IQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lrc_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lrc_IR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lrc_IR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lrc_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lt : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lt_LT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lt_LT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lt_LT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lu : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lu_CD : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lu_CD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lu_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_luo : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_luo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_luo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_luo_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_luo_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_luo_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_luy : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_luy' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_luy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_luy_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_luy_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_luy_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lv : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lv' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lv;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_lv_LV : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_lv_LV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_lv_LV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mas : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mas' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mas;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mas_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mas_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mas_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mas_TZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mas_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mas_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mer : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mer' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mer_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mer_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mer_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mfe : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mfe' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mfe;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mfe_MU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mfe_MU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mfe_MU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mg : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mg_MG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mg_MG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mg_MG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mgh : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mgh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mgh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mgh_MZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mgh_MZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mgh_MZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mgo : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mgo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mgo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mgo_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mgo_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mgo_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mk : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mk_MK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mk_MK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mk_MK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ml : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ml' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ml;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ml_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ml_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ml_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mn_MN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mn_MN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mn_MN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mr : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mr_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mr_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mr_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ms : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ms' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ms;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ms_BN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ms_BN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ms_BN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ms_MY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ms_MY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ms_MY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ms_SG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ms_SG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ms_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mt : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mt_MT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mt_MT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mt_MT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mua : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mua' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mua;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mua_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mua_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mua_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_my : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_my' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_my;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_my_MM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_my_MM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_my_MM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mzn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mzn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mzn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_mzn_IR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_mzn_IR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_mzn_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_naq : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_naq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_naq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_naq_NA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_naq_NA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_naq_NA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nb : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nb_NO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nb_NO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nb_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nb_SJ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nb_SJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nb_SJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nd : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nd' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nd;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nd_ZW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nd_ZW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nd_ZW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ne : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ne' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ne;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ne_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ne_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ne_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ne_NP : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ne_NP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ne_NP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nl : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nl_AW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nl_AW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nl_AW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nl_BE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nl_BE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nl_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nl_BQ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nl_BQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nl_BQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nl_CW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nl_CW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nl_CW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nl_NL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nl_NL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nl_NL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nl_SR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nl_SR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nl_SR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nl_SX : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nl_SX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nl_SX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nmg : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nmg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nmg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nmg_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nmg_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nmg_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nn_NO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nn_NO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nn_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nnh : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nnh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nnh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nnh_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nnh_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nnh_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_no : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_no' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_no;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_no_NO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_no_NO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_no_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nus : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nus' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nus;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nus_SS : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nus_SS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nus_SS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nyn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nyn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nyn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_nyn_UG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_nyn_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_nyn_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_om : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_om' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_om;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_om_ET : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_om_ET' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_om_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_om_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_om_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_om_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_or : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_or' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_or;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_or_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_or_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_or_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_os : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_os' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_os;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_os_GE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_os_GE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_os_GE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_os_RU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_os_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_os_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pa : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pa' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pa;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pa_Arab : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pa_Arab' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pa_Arab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pa_Arab_PK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pa_Arab_PK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pa_Arab_PK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pa_Guru : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pa_Guru' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pa_Guru;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pa_Guru_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pa_Guru_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pa_Guru_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pl : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pl_PL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pl_PL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pl_PL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_prg : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_prg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_prg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_prg_001 : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_prg_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_prg_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ps : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ps' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ps;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ps_AF : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ps_AF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ps_AF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pt : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pt_AO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pt_AO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pt_AO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pt_BR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pt_BR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pt_BR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pt_CH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pt_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pt_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pt_CV : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pt_CV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pt_CV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pt_GQ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pt_GQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pt_GQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pt_GW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pt_GW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pt_GW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pt_LU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pt_LU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pt_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pt_MO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pt_MO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pt_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pt_MZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pt_MZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pt_MZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pt_PT : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pt_PT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pt_PT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pt_ST : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pt_ST' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pt_ST;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_pt_TL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_pt_TL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_pt_TL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_qu : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_qu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_qu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_qu_BO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_qu_BO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_qu_BO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_qu_EC : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_qu_EC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_qu_EC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_qu_PE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_qu_PE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_qu_PE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_rm : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_rm' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_rm;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_rm_CH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_rm_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_rm_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_rn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_rn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_rn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_rn_BI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_rn_BI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_rn_BI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ro : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ro' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ro;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ro_MD : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ro_MD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ro_MD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ro_RO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ro_RO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ro_RO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_rof : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_rof' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_rof;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_rof_TZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_rof_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_rof_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ru : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ru' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ru;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ru_BY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ru_BY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ru_BY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ru_KG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ru_KG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ru_KG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ru_KZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ru_KZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ru_KZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ru_MD : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ru_MD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ru_MD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ru_RU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ru_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ru_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ru_UA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ru_UA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ru_UA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_rw : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_rw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_rw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_rw_RW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_rw_RW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_rw_RW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_rwk : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_rwk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_rwk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_rwk_TZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_rwk_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_rwk_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sah : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sah' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sah;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sah_RU : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sah_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sah_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_saq : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_saq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_saq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_saq_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_saq_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_saq_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sbp : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sbp' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sbp;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sbp_TZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sbp_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sbp_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_se : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_se' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_se;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_se_FI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_se_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_se_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_se_NO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_se_NO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_se_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_se_SE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_se_SE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_se_SE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_seh : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_seh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_seh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_seh_MZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_seh_MZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_seh_MZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ses : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ses' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ses;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ses_ML : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ses_ML' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ses_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sg : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sg_CF : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sg_CF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sg_CF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_shi : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_shi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_shi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_shi_Latn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_shi_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_shi_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_shi_Latn_MA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_shi_Latn_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_shi_Latn_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_shi_Tfng : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_shi_Tfng' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_shi_Tfng;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_shi_Tfng_MA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_shi_Tfng_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_shi_Tfng_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_si : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_si' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_si;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_si_LK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_si_LK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_si_LK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sk : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sk_SK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sk_SK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sk_SK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sl : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sl_SI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sl_SI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sl_SI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_smn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_smn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_smn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_smn_FI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_smn_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_smn_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sn_ZW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sn_ZW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sn_ZW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_so : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_so' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_so;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_so_DJ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_so_DJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_so_DJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_so_ET : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_so_ET' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_so_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_so_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_so_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_so_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_so_SO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_so_SO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_so_SO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sq : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sq_AL : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sq_AL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sq_AL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sq_MK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sq_MK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sq_MK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sq_XK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sq_XK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sq_XK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sr : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sr_Cyrl : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sr_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sr_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sr_Cyrl_BA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sr_Cyrl_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sr_Cyrl_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sr_Cyrl_ME : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sr_Cyrl_ME' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sr_Cyrl_ME;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sr_Cyrl_RS : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sr_Cyrl_RS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sr_Cyrl_RS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sr_Cyrl_XK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sr_Cyrl_XK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sr_Cyrl_XK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sr_Latn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sr_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sr_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sr_Latn_BA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sr_Latn_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sr_Latn_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sr_Latn_ME : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sr_Latn_ME' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sr_Latn_ME;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sr_Latn_RS : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sr_Latn_RS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sr_Latn_RS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sr_Latn_XK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sr_Latn_XK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sr_Latn_XK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sv : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sv' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sv;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sv_AX : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sv_AX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sv_AX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sv_FI : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sv_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sv_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sv_SE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sv_SE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sv_SE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sw : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sw_CD : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sw_CD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sw_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sw_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sw_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sw_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sw_TZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sw_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sw_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_sw_UG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_sw_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_sw_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ta : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ta' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ta;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ta_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ta_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ta_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ta_LK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ta_LK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ta_LK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ta_MY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ta_MY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ta_MY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ta_SG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ta_SG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ta_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_te : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_te' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_te;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_te_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_te_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_te_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_teo : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_teo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_teo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_teo_KE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_teo_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_teo_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_teo_UG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_teo_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_teo_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_th : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_th' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_th;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_th_TH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_th_TH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_th_TH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ti : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ti' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ti;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ti_ER : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ti_ER' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ti_ER;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ti_ET : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ti_ET' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ti_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_tk : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_tk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_tk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_tk_TM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_tk_TM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_tk_TM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_tl : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_tl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_tl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_to : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_to' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_to;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_to_TO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_to_TO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_to_TO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_tr : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_tr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_tr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_tr_CY : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_tr_CY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_tr_CY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_tr_TR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_tr_TR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_tr_TR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_twq : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_twq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_twq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_twq_NE : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_twq_NE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_twq_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_tzm : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_tzm' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_tzm;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_tzm_MA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_tzm_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_tzm_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ug : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ug' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ug;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ug_CN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ug_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ug_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_uk : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_uk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_uk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_uk_UA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_uk_UA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_uk_UA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ur : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ur' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ur;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ur_IN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ur_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ur_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_ur_PK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_ur_PK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_ur_PK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_uz : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_uz' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_uz;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_uz_Arab : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_uz_Arab' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_uz_Arab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_uz_Arab_AF : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_uz_Arab_AF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_uz_Arab_AF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_uz_Cyrl : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_uz_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_uz_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_uz_Cyrl_UZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_uz_Cyrl_UZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_uz_Cyrl_UZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_uz_Latn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_uz_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_uz_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_uz_Latn_UZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_uz_Latn_UZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_uz_Latn_UZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_vai : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_vai' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_vai;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_vai_Latn : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_vai_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_vai_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_vai_Latn_LR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_vai_Latn_LR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_vai_Latn_LR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_vai_Vaii : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_vai_Vaii' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_vai_Vaii;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_vai_Vaii_LR : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_vai_Vaii_LR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_vai_Vaii_LR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_vi : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_vi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_vi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_vi_VN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_vi_VN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_vi_VN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_vo : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_vo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_vo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_vo_001 : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_vo_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_vo_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_vun : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_vun' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_vun;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_vun_TZ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_vun_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_vun_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_wae : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_wae' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_wae;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_wae_CH : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_wae_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_wae_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_xog : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_xog' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_xog;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_xog_UG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_xog_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_xog_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_yav : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_yav' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_yav;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_yav_CM : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_yav_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_yav_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_yi : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_yi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_yi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_yi_001 : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_yi_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_yi_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_yo : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_yo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_yo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_yo_BJ : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_yo_BJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_yo_BJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_yo_NG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_yo_NG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_yo_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_yue : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_yue' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_yue;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_yue_HK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_yue_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_yue_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zgh : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zgh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zgh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zgh_MA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zgh_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zgh_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zh : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zh_CN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zh_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zh_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zh_HK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zh_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zh_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zh_Hans : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zh_Hans' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zh_Hans;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zh_Hans_CN : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zh_Hans_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zh_Hans_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zh_Hans_HK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zh_Hans_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zh_Hans_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zh_Hans_MO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zh_Hans_MO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zh_Hans_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zh_Hans_SG : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zh_Hans_SG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zh_Hans_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zh_Hant : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zh_Hant' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zh_Hant;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zh_Hant_HK : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zh_Hant_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zh_Hant_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zh_Hant_MO : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zh_Hant_MO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zh_Hant_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zh_Hant_TW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zh_Hant_TW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zh_Hant_TW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zh_TW : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zh_TW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zh_TW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zu : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var DateTimeSymbols_zu_ZA : any;
}
declare module 'goog:goog.i18n.DateTimeSymbols_zu_ZA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeSymbols_zu_ZA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.GraphemeBreak {
  /**
   * There are two kinds of grapheme clusters: 1) Legacy 2)Extended. This method
   * is to check for both using a boolean flag to switch between them.
   * @param a The code point value of the first character.
   * @param b The code point value of the second character.
   * @param opt_extended If true, indicates extended grapheme cluster; If false, indicates legacy cluster.
   */
  function hasGraphemeBreak (a : number , b : number , opt_extended ? : boolean ) : boolean ;
  /**
   * Enum for all Grapheme Cluster Break properties.
   * These enums directly corresponds to Grapheme_Cluster_Break property values
   * mentioned in http://unicode.org/reports/tr29 table 2. VIRAMA and
   * INDIC_CONSONANT are for the Virama × Base tailoring mentioned in the notes.
   *
   * CR and LF are moved to the bottom of the list because they occur only once
   * and so good candidates to take 2 decimal digit values.
   */
  type property = number ;
  var property : {
    ANY : property ,
    CONTROL : property ,
    CR : property ,
    EXTEND : property ,
    INDIC_CONSONANT : property ,
    L : property ,
    LF : property ,
    LV : property ,
    LVT : property ,
    PREPEND : property ,
    REGIONAL_INDICATOR : property ,
    SPACING_MARK : property ,
    T : property ,
    V : property ,
    VIRAMA : property ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.GraphemeBreak'): typeof ಠ_ಠ.clutz.goog.i18n.GraphemeBreak;
}
declare module 'goog:goog.i18n.GraphemeBreak' {
  import alias = ಠ_ಠ.clutz.goog.i18n.GraphemeBreak;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Constructor of MessageFormat.
   */
  class MessageFormat extends MessageFormat_Instance {
  }
  class MessageFormat_Instance {
    private noStructuralTyping_: any;
    /**
     * Constructor of MessageFormat.
     * @param pattern The pattern we parse and apply positional parameters to.
     */
    constructor (pattern : string ) ;
    /**
     * Formats a message, treating '#' with special meaning representing
     * the number (plural_variable - offset).
     * @param namedParameters Parameters that either influence the formatting or are used as actual data. I.e. in call to fmt.format({'NUM_PEOPLE': 5, 'NAME': 'Angela'}), object {'NUM_PEOPLE': 5, 'NAME': 'Angela'} holds positional parameters. 1st parameter could mean 5 people, which could influence plural format, and 2nd parameter is just a data to be printed out in proper position.
     */
    format (namedParameters : Object ) : string ;
    /**
     * Formats a message, treating '#' as literary character.
     * @param namedParameters Parameters that either influence the formatting or are used as actual data. I.e. in call to fmt.format({'NUM_PEOPLE': 5, 'NAME': 'Angela'}), object {'NUM_PEOPLE': 5, 'NAME': 'Angela'} holds positional parameters. 1st parameter could mean 5 people, which could influence plural format, and 2nd parameter is just a data to be printed out in proper position.
     */
    formatIgnoringPound (namedParameters : Object ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.i18n.MessageFormat {
  type TypeVal_ = { type : ಠ_ಠ.clutz.PrivateType , value : any } ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.MessageFormat'): typeof ಠ_ಠ.clutz.goog.i18n.MessageFormat;
}
declare module 'goog:goog.i18n.MessageFormat' {
  import alias = ಠ_ಠ.clutz.goog.i18n.MessageFormat;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Constructor of NumberFormat.
   */
  class NumberFormat extends NumberFormat_Instance {
    /**
     * Return if Ascii digits is enforced.
     */
    static isEnforceAsciiDigits ( ) : boolean ;
    /**
     * Set if the usage of Ascii digits in formatting should be enforced.
     * @param doEnforce Boolean value about if Ascii digits should be enforced.
     */
    static setEnforceAsciiDigits (doEnforce : boolean ) : void ;
  }
  class NumberFormat_Instance {
    private noStructuralTyping_: any;
    /**
     * Constructor of NumberFormat.
     * @param pattern The number that indicates a predefined number format pattern.
     * @param opt_currency Optional international currency code. This determines the currency code/symbol used in format/parse. If not given, the currency code for current locale will be used.
     * @param opt_currencyStyle currency style, value defined in goog.i18n.NumberFormat.CurrencyStyle.
     */
    constructor (pattern : number | string , opt_currency ? : string , opt_currencyStyle ? : number ) ;
    /**
     * Formats a Number to produce a string.
     * @param number The Number to be formatted.
     */
    format (number : number ) : string ;
    /**
     * Gets the number on which compact formatting is currently based, or null if
     * no such number is set. See setBaseFormatting() for more information.
     */
    getBaseFormatting ( ) : number | null ;
    /**
     * Gets number of significant digits to show. Only fractions will be rounded.
     */
    getSignificantDigits ( ) : number ;
    /**
     * Checks if the currency symbol comes before the value ($12) or after (12$)
     * Handy for applications that need to have separate UI fields for the currency
     * value and symbol, especially for input: Price: [USD] [123.45]
     * The currency symbol might be a combo box, or a label.
     */
    isCurrencyCodeBeforeValue ( ) : boolean ;
    /**
     * Parses text string to produce a Number.
     *
     * This method attempts to parse text starting from position "opt_pos" if it
     * is given. Otherwise the parse will start from the beginning of the text.
     * When opt_pos presents, opt_pos will be updated to the character next to where
     * parsing stops after the call. If an error occurs, opt_pos won't be updated.
     * @param text The string to be parsed.
     * @param opt_pos Position to pass in and get back.
     */
    parse (text : string , opt_pos ? : number [] | null ) : number ;
    /**
     * Sets a number to base the formatting on when compact style formatting is
     * used. If this is null, the formatting should be based only on the number to
     * be formatting.
     *
     * This base formatting number can be used to format the target number as
     * another number would be formatted. For example, 100,000 is normally formatted
     * as "100K" in the COMPACT_SHORT format. To instead format it as '0.1M', the
     * base number could be set to 1,000,000 in order to force all numbers to be
     * formatted in millions. Similarly, 1,000,000,000 would normally be formatted
     * as '1B' and setting the base formatting number to 1,000,000, would cause it
     * to be formatted instead as '1,000M'.
     * @param baseFormattingNumber The number to base formatting on, or null if formatting should not be based on another number.
     */
    setBaseFormatting (baseFormattingNumber : number | null ) : ಠ_ಠ.clutz.goog.i18n.NumberFormat ;
    /**
     * Sets maximum number of fraction digits.
     * @param max the maximum.
     */
    setMaximumFractionDigits (max : number ) : ಠ_ಠ.clutz.goog.i18n.NumberFormat ;
    /**
     * Sets minimum number of fraction digits.
     * @param min the minimum.
     */
    setMinimumFractionDigits (min : number ) : ಠ_ಠ.clutz.goog.i18n.NumberFormat ;
    /**
     * Sets whether trailing fraction zeros should be shown when significantDigits_
     * is positive. If this is true and significantDigits_ is 2, 1 will be formatted
     * as '1.0'.
     * @param showTrailingZeros Whether trailing zeros should be shown.
     */
    setShowTrailingZeros (showTrailingZeros : boolean ) : ಠ_ಠ.clutz.goog.i18n.NumberFormat ;
    /**
     * Sets number of significant digits to show. Only fractions will be rounded.
     * @param number The number of significant digits to include.
     */
    setSignificantDigits (number : number ) : ಠ_ಠ.clutz.goog.i18n.NumberFormat ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.i18n.NumberFormat {
  type CompactNumberUnit = { divisorBase : number , prefix : string , suffix : string } ;
  type CompactStyle = number ;
  var CompactStyle : {
    LONG : CompactStyle ,
    NONE : CompactStyle ,
    SHORT : CompactStyle ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormat'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormat;
}
declare module 'goog:goog.i18n.NumberFormat' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormat;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.NumberFormat {
  /**
   * Currency styles.
   */
  type CurrencyStyle = number ;
  var CurrencyStyle : {
    GLOBAL : CurrencyStyle ,
    LOCAL : CurrencyStyle ,
    PORTABLE : CurrencyStyle ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormat.CurrencyStyle'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormat.CurrencyStyle;
}
declare module 'goog:goog.i18n.NumberFormat.CurrencyStyle' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormat.CurrencyStyle;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.NumberFormat {
  /**
   * Standard number formatting patterns.
   */
  type Format = number ;
  var Format : {
    COMPACT_LONG : Format ,
    COMPACT_SHORT : Format ,
    CURRENCY : Format ,
    DECIMAL : Format ,
    PERCENT : Format ,
    SCIENTIFIC : Format ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormat.Format'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormat.Format;
}
declare module 'goog:goog.i18n.NumberFormat.Format' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormat.Format;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var NumberFormatSymbols : any;
}
declare module 'goog:goog.i18n.NumberFormatSymbols' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  var NumberFormatSymbolsExt : Object ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbolsExt'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbolsExt;
}
declare module 'goog:goog.i18n.NumberFormatSymbolsExt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbolsExt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale af.
   */
  type NumberFormatSymbols_af = string ;
  var NumberFormatSymbols_af : {
    CURRENCY_PATTERN : NumberFormatSymbols_af ,
    DECIMAL_PATTERN : NumberFormatSymbols_af ,
    DECIMAL_SEP : NumberFormatSymbols_af ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_af ,
    EXP_SYMBOL : NumberFormatSymbols_af ,
    GROUP_SEP : NumberFormatSymbols_af ,
    INFINITY : NumberFormatSymbols_af ,
    MINUS_SIGN : NumberFormatSymbols_af ,
    NAN : NumberFormatSymbols_af ,
    PERCENT : NumberFormatSymbols_af ,
    PERCENT_PATTERN : NumberFormatSymbols_af ,
    PERMILL : NumberFormatSymbols_af ,
    PLUS_SIGN : NumberFormatSymbols_af ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_af ,
    ZERO_DIGIT : NumberFormatSymbols_af ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_af'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_af;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_af' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_af;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale af_NA.
   */
  type NumberFormatSymbols_af_NA = string ;
  var NumberFormatSymbols_af_NA : {
    CURRENCY_PATTERN : NumberFormatSymbols_af_NA ,
    DECIMAL_PATTERN : NumberFormatSymbols_af_NA ,
    DECIMAL_SEP : NumberFormatSymbols_af_NA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_af_NA ,
    EXP_SYMBOL : NumberFormatSymbols_af_NA ,
    GROUP_SEP : NumberFormatSymbols_af_NA ,
    INFINITY : NumberFormatSymbols_af_NA ,
    MINUS_SIGN : NumberFormatSymbols_af_NA ,
    NAN : NumberFormatSymbols_af_NA ,
    PERCENT : NumberFormatSymbols_af_NA ,
    PERCENT_PATTERN : NumberFormatSymbols_af_NA ,
    PERMILL : NumberFormatSymbols_af_NA ,
    PLUS_SIGN : NumberFormatSymbols_af_NA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_af_NA ,
    ZERO_DIGIT : NumberFormatSymbols_af_NA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_af_NA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_af_NA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_af_NA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_af_NA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale af_ZA.
   */
  type NumberFormatSymbols_af_ZA = string ;
  var NumberFormatSymbols_af_ZA : {
    CURRENCY_PATTERN : NumberFormatSymbols_af_ZA ,
    DECIMAL_PATTERN : NumberFormatSymbols_af_ZA ,
    DECIMAL_SEP : NumberFormatSymbols_af_ZA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_af_ZA ,
    EXP_SYMBOL : NumberFormatSymbols_af_ZA ,
    GROUP_SEP : NumberFormatSymbols_af_ZA ,
    INFINITY : NumberFormatSymbols_af_ZA ,
    MINUS_SIGN : NumberFormatSymbols_af_ZA ,
    NAN : NumberFormatSymbols_af_ZA ,
    PERCENT : NumberFormatSymbols_af_ZA ,
    PERCENT_PATTERN : NumberFormatSymbols_af_ZA ,
    PERMILL : NumberFormatSymbols_af_ZA ,
    PLUS_SIGN : NumberFormatSymbols_af_ZA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_af_ZA ,
    ZERO_DIGIT : NumberFormatSymbols_af_ZA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_af_ZA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_af_ZA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_af_ZA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_af_ZA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale agq.
   */
  type NumberFormatSymbols_agq = string ;
  var NumberFormatSymbols_agq : {
    CURRENCY_PATTERN : NumberFormatSymbols_agq ,
    DECIMAL_PATTERN : NumberFormatSymbols_agq ,
    DECIMAL_SEP : NumberFormatSymbols_agq ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_agq ,
    EXP_SYMBOL : NumberFormatSymbols_agq ,
    GROUP_SEP : NumberFormatSymbols_agq ,
    INFINITY : NumberFormatSymbols_agq ,
    MINUS_SIGN : NumberFormatSymbols_agq ,
    NAN : NumberFormatSymbols_agq ,
    PERCENT : NumberFormatSymbols_agq ,
    PERCENT_PATTERN : NumberFormatSymbols_agq ,
    PERMILL : NumberFormatSymbols_agq ,
    PLUS_SIGN : NumberFormatSymbols_agq ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_agq ,
    ZERO_DIGIT : NumberFormatSymbols_agq ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_agq'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_agq;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_agq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_agq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale agq_CM.
   */
  type NumberFormatSymbols_agq_CM = string ;
  var NumberFormatSymbols_agq_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_agq_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_agq_CM ,
    DECIMAL_SEP : NumberFormatSymbols_agq_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_agq_CM ,
    EXP_SYMBOL : NumberFormatSymbols_agq_CM ,
    GROUP_SEP : NumberFormatSymbols_agq_CM ,
    INFINITY : NumberFormatSymbols_agq_CM ,
    MINUS_SIGN : NumberFormatSymbols_agq_CM ,
    NAN : NumberFormatSymbols_agq_CM ,
    PERCENT : NumberFormatSymbols_agq_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_agq_CM ,
    PERMILL : NumberFormatSymbols_agq_CM ,
    PLUS_SIGN : NumberFormatSymbols_agq_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_agq_CM ,
    ZERO_DIGIT : NumberFormatSymbols_agq_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_agq_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_agq_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_agq_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_agq_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ak.
   */
  type NumberFormatSymbols_ak = string ;
  var NumberFormatSymbols_ak : {
    CURRENCY_PATTERN : NumberFormatSymbols_ak ,
    DECIMAL_PATTERN : NumberFormatSymbols_ak ,
    DECIMAL_SEP : NumberFormatSymbols_ak ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ak ,
    EXP_SYMBOL : NumberFormatSymbols_ak ,
    GROUP_SEP : NumberFormatSymbols_ak ,
    INFINITY : NumberFormatSymbols_ak ,
    MINUS_SIGN : NumberFormatSymbols_ak ,
    NAN : NumberFormatSymbols_ak ,
    PERCENT : NumberFormatSymbols_ak ,
    PERCENT_PATTERN : NumberFormatSymbols_ak ,
    PERMILL : NumberFormatSymbols_ak ,
    PLUS_SIGN : NumberFormatSymbols_ak ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ak ,
    ZERO_DIGIT : NumberFormatSymbols_ak ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ak'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ak;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ak' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ak;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ak_GH.
   */
  type NumberFormatSymbols_ak_GH = string ;
  var NumberFormatSymbols_ak_GH : {
    CURRENCY_PATTERN : NumberFormatSymbols_ak_GH ,
    DECIMAL_PATTERN : NumberFormatSymbols_ak_GH ,
    DECIMAL_SEP : NumberFormatSymbols_ak_GH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ak_GH ,
    EXP_SYMBOL : NumberFormatSymbols_ak_GH ,
    GROUP_SEP : NumberFormatSymbols_ak_GH ,
    INFINITY : NumberFormatSymbols_ak_GH ,
    MINUS_SIGN : NumberFormatSymbols_ak_GH ,
    NAN : NumberFormatSymbols_ak_GH ,
    PERCENT : NumberFormatSymbols_ak_GH ,
    PERCENT_PATTERN : NumberFormatSymbols_ak_GH ,
    PERMILL : NumberFormatSymbols_ak_GH ,
    PLUS_SIGN : NumberFormatSymbols_ak_GH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ak_GH ,
    ZERO_DIGIT : NumberFormatSymbols_ak_GH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ak_GH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ak_GH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ak_GH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ak_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale am.
   */
  type NumberFormatSymbols_am = string ;
  var NumberFormatSymbols_am : {
    CURRENCY_PATTERN : NumberFormatSymbols_am ,
    DECIMAL_PATTERN : NumberFormatSymbols_am ,
    DECIMAL_SEP : NumberFormatSymbols_am ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_am ,
    EXP_SYMBOL : NumberFormatSymbols_am ,
    GROUP_SEP : NumberFormatSymbols_am ,
    INFINITY : NumberFormatSymbols_am ,
    MINUS_SIGN : NumberFormatSymbols_am ,
    NAN : NumberFormatSymbols_am ,
    PERCENT : NumberFormatSymbols_am ,
    PERCENT_PATTERN : NumberFormatSymbols_am ,
    PERMILL : NumberFormatSymbols_am ,
    PLUS_SIGN : NumberFormatSymbols_am ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_am ,
    ZERO_DIGIT : NumberFormatSymbols_am ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_am'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_am;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_am' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_am;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale am_ET.
   */
  type NumberFormatSymbols_am_ET = string ;
  var NumberFormatSymbols_am_ET : {
    CURRENCY_PATTERN : NumberFormatSymbols_am_ET ,
    DECIMAL_PATTERN : NumberFormatSymbols_am_ET ,
    DECIMAL_SEP : NumberFormatSymbols_am_ET ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_am_ET ,
    EXP_SYMBOL : NumberFormatSymbols_am_ET ,
    GROUP_SEP : NumberFormatSymbols_am_ET ,
    INFINITY : NumberFormatSymbols_am_ET ,
    MINUS_SIGN : NumberFormatSymbols_am_ET ,
    NAN : NumberFormatSymbols_am_ET ,
    PERCENT : NumberFormatSymbols_am_ET ,
    PERCENT_PATTERN : NumberFormatSymbols_am_ET ,
    PERMILL : NumberFormatSymbols_am_ET ,
    PLUS_SIGN : NumberFormatSymbols_am_ET ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_am_ET ,
    ZERO_DIGIT : NumberFormatSymbols_am_ET ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_am_ET'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_am_ET;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_am_ET' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_am_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar.
   */
  type NumberFormatSymbols_ar = string ;
  var NumberFormatSymbols_ar : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar ,
    DECIMAL_SEP : NumberFormatSymbols_ar ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar ,
    EXP_SYMBOL : NumberFormatSymbols_ar ,
    GROUP_SEP : NumberFormatSymbols_ar ,
    INFINITY : NumberFormatSymbols_ar ,
    MINUS_SIGN : NumberFormatSymbols_ar ,
    NAN : NumberFormatSymbols_ar ,
    PERCENT : NumberFormatSymbols_ar ,
    PERCENT_PATTERN : NumberFormatSymbols_ar ,
    PERMILL : NumberFormatSymbols_ar ,
    PLUS_SIGN : NumberFormatSymbols_ar ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar ,
    ZERO_DIGIT : NumberFormatSymbols_ar ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_001.
   */
  type NumberFormatSymbols_ar_001 = string ;
  var NumberFormatSymbols_ar_001 : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_001 ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_001 ,
    DECIMAL_SEP : NumberFormatSymbols_ar_001 ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_001 ,
    EXP_SYMBOL : NumberFormatSymbols_ar_001 ,
    GROUP_SEP : NumberFormatSymbols_ar_001 ,
    INFINITY : NumberFormatSymbols_ar_001 ,
    MINUS_SIGN : NumberFormatSymbols_ar_001 ,
    NAN : NumberFormatSymbols_ar_001 ,
    PERCENT : NumberFormatSymbols_ar_001 ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_001 ,
    PERMILL : NumberFormatSymbols_ar_001 ,
    PLUS_SIGN : NumberFormatSymbols_ar_001 ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_001 ,
    ZERO_DIGIT : NumberFormatSymbols_ar_001 ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_001'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_001;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_AE.
   */
  type NumberFormatSymbols_ar_AE = string ;
  var NumberFormatSymbols_ar_AE : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_AE ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_AE ,
    DECIMAL_SEP : NumberFormatSymbols_ar_AE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_AE ,
    EXP_SYMBOL : NumberFormatSymbols_ar_AE ,
    GROUP_SEP : NumberFormatSymbols_ar_AE ,
    INFINITY : NumberFormatSymbols_ar_AE ,
    MINUS_SIGN : NumberFormatSymbols_ar_AE ,
    NAN : NumberFormatSymbols_ar_AE ,
    PERCENT : NumberFormatSymbols_ar_AE ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_AE ,
    PERMILL : NumberFormatSymbols_ar_AE ,
    PLUS_SIGN : NumberFormatSymbols_ar_AE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_AE ,
    ZERO_DIGIT : NumberFormatSymbols_ar_AE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_AE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_AE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_AE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_AE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_BH.
   */
  type NumberFormatSymbols_ar_BH = string ;
  var NumberFormatSymbols_ar_BH : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_BH ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_BH ,
    DECIMAL_SEP : NumberFormatSymbols_ar_BH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_BH ,
    EXP_SYMBOL : NumberFormatSymbols_ar_BH ,
    GROUP_SEP : NumberFormatSymbols_ar_BH ,
    INFINITY : NumberFormatSymbols_ar_BH ,
    MINUS_SIGN : NumberFormatSymbols_ar_BH ,
    NAN : NumberFormatSymbols_ar_BH ,
    PERCENT : NumberFormatSymbols_ar_BH ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_BH ,
    PERMILL : NumberFormatSymbols_ar_BH ,
    PLUS_SIGN : NumberFormatSymbols_ar_BH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_BH ,
    ZERO_DIGIT : NumberFormatSymbols_ar_BH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_BH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_BH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_BH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_BH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_DJ.
   */
  type NumberFormatSymbols_ar_DJ = string ;
  var NumberFormatSymbols_ar_DJ : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_DJ ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_DJ ,
    DECIMAL_SEP : NumberFormatSymbols_ar_DJ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_DJ ,
    EXP_SYMBOL : NumberFormatSymbols_ar_DJ ,
    GROUP_SEP : NumberFormatSymbols_ar_DJ ,
    INFINITY : NumberFormatSymbols_ar_DJ ,
    MINUS_SIGN : NumberFormatSymbols_ar_DJ ,
    NAN : NumberFormatSymbols_ar_DJ ,
    PERCENT : NumberFormatSymbols_ar_DJ ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_DJ ,
    PERMILL : NumberFormatSymbols_ar_DJ ,
    PLUS_SIGN : NumberFormatSymbols_ar_DJ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_DJ ,
    ZERO_DIGIT : NumberFormatSymbols_ar_DJ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_DJ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_DJ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_DJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_DJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_DZ.
   */
  type NumberFormatSymbols_ar_DZ = string ;
  var NumberFormatSymbols_ar_DZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_DZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_DZ ,
    DECIMAL_SEP : NumberFormatSymbols_ar_DZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_DZ ,
    EXP_SYMBOL : NumberFormatSymbols_ar_DZ ,
    GROUP_SEP : NumberFormatSymbols_ar_DZ ,
    INFINITY : NumberFormatSymbols_ar_DZ ,
    MINUS_SIGN : NumberFormatSymbols_ar_DZ ,
    NAN : NumberFormatSymbols_ar_DZ ,
    PERCENT : NumberFormatSymbols_ar_DZ ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_DZ ,
    PERMILL : NumberFormatSymbols_ar_DZ ,
    PLUS_SIGN : NumberFormatSymbols_ar_DZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_DZ ,
    ZERO_DIGIT : NumberFormatSymbols_ar_DZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_DZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_DZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_DZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_DZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_EG.
   */
  type NumberFormatSymbols_ar_EG = string ;
  var NumberFormatSymbols_ar_EG : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_EG ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_EG ,
    DECIMAL_SEP : NumberFormatSymbols_ar_EG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_EG ,
    EXP_SYMBOL : NumberFormatSymbols_ar_EG ,
    GROUP_SEP : NumberFormatSymbols_ar_EG ,
    INFINITY : NumberFormatSymbols_ar_EG ,
    MINUS_SIGN : NumberFormatSymbols_ar_EG ,
    NAN : NumberFormatSymbols_ar_EG ,
    PERCENT : NumberFormatSymbols_ar_EG ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_EG ,
    PERMILL : NumberFormatSymbols_ar_EG ,
    PLUS_SIGN : NumberFormatSymbols_ar_EG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_EG ,
    ZERO_DIGIT : NumberFormatSymbols_ar_EG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_EG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_EG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_EG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_EG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_EH.
   */
  type NumberFormatSymbols_ar_EH = string ;
  var NumberFormatSymbols_ar_EH : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_EH ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_EH ,
    DECIMAL_SEP : NumberFormatSymbols_ar_EH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_EH ,
    EXP_SYMBOL : NumberFormatSymbols_ar_EH ,
    GROUP_SEP : NumberFormatSymbols_ar_EH ,
    INFINITY : NumberFormatSymbols_ar_EH ,
    MINUS_SIGN : NumberFormatSymbols_ar_EH ,
    NAN : NumberFormatSymbols_ar_EH ,
    PERCENT : NumberFormatSymbols_ar_EH ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_EH ,
    PERMILL : NumberFormatSymbols_ar_EH ,
    PLUS_SIGN : NumberFormatSymbols_ar_EH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_EH ,
    ZERO_DIGIT : NumberFormatSymbols_ar_EH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_EH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_EH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_EH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_EH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_ER.
   */
  type NumberFormatSymbols_ar_ER = string ;
  var NumberFormatSymbols_ar_ER : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_ER ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_ER ,
    DECIMAL_SEP : NumberFormatSymbols_ar_ER ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_ER ,
    EXP_SYMBOL : NumberFormatSymbols_ar_ER ,
    GROUP_SEP : NumberFormatSymbols_ar_ER ,
    INFINITY : NumberFormatSymbols_ar_ER ,
    MINUS_SIGN : NumberFormatSymbols_ar_ER ,
    NAN : NumberFormatSymbols_ar_ER ,
    PERCENT : NumberFormatSymbols_ar_ER ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_ER ,
    PERMILL : NumberFormatSymbols_ar_ER ,
    PLUS_SIGN : NumberFormatSymbols_ar_ER ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_ER ,
    ZERO_DIGIT : NumberFormatSymbols_ar_ER ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_ER'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_ER;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_ER' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_ER;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_IL.
   */
  type NumberFormatSymbols_ar_IL = string ;
  var NumberFormatSymbols_ar_IL : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_IL ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_IL ,
    DECIMAL_SEP : NumberFormatSymbols_ar_IL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_IL ,
    EXP_SYMBOL : NumberFormatSymbols_ar_IL ,
    GROUP_SEP : NumberFormatSymbols_ar_IL ,
    INFINITY : NumberFormatSymbols_ar_IL ,
    MINUS_SIGN : NumberFormatSymbols_ar_IL ,
    NAN : NumberFormatSymbols_ar_IL ,
    PERCENT : NumberFormatSymbols_ar_IL ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_IL ,
    PERMILL : NumberFormatSymbols_ar_IL ,
    PLUS_SIGN : NumberFormatSymbols_ar_IL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_IL ,
    ZERO_DIGIT : NumberFormatSymbols_ar_IL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_IL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_IL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_IL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_IL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_IQ.
   */
  type NumberFormatSymbols_ar_IQ = string ;
  var NumberFormatSymbols_ar_IQ : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_IQ ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_IQ ,
    DECIMAL_SEP : NumberFormatSymbols_ar_IQ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_IQ ,
    EXP_SYMBOL : NumberFormatSymbols_ar_IQ ,
    GROUP_SEP : NumberFormatSymbols_ar_IQ ,
    INFINITY : NumberFormatSymbols_ar_IQ ,
    MINUS_SIGN : NumberFormatSymbols_ar_IQ ,
    NAN : NumberFormatSymbols_ar_IQ ,
    PERCENT : NumberFormatSymbols_ar_IQ ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_IQ ,
    PERMILL : NumberFormatSymbols_ar_IQ ,
    PLUS_SIGN : NumberFormatSymbols_ar_IQ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_IQ ,
    ZERO_DIGIT : NumberFormatSymbols_ar_IQ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_IQ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_IQ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_IQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_JO.
   */
  type NumberFormatSymbols_ar_JO = string ;
  var NumberFormatSymbols_ar_JO : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_JO ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_JO ,
    DECIMAL_SEP : NumberFormatSymbols_ar_JO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_JO ,
    EXP_SYMBOL : NumberFormatSymbols_ar_JO ,
    GROUP_SEP : NumberFormatSymbols_ar_JO ,
    INFINITY : NumberFormatSymbols_ar_JO ,
    MINUS_SIGN : NumberFormatSymbols_ar_JO ,
    NAN : NumberFormatSymbols_ar_JO ,
    PERCENT : NumberFormatSymbols_ar_JO ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_JO ,
    PERMILL : NumberFormatSymbols_ar_JO ,
    PLUS_SIGN : NumberFormatSymbols_ar_JO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_JO ,
    ZERO_DIGIT : NumberFormatSymbols_ar_JO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_JO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_JO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_JO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_JO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_KM.
   */
  type NumberFormatSymbols_ar_KM = string ;
  var NumberFormatSymbols_ar_KM : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_KM ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_KM ,
    DECIMAL_SEP : NumberFormatSymbols_ar_KM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_KM ,
    EXP_SYMBOL : NumberFormatSymbols_ar_KM ,
    GROUP_SEP : NumberFormatSymbols_ar_KM ,
    INFINITY : NumberFormatSymbols_ar_KM ,
    MINUS_SIGN : NumberFormatSymbols_ar_KM ,
    NAN : NumberFormatSymbols_ar_KM ,
    PERCENT : NumberFormatSymbols_ar_KM ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_KM ,
    PERMILL : NumberFormatSymbols_ar_KM ,
    PLUS_SIGN : NumberFormatSymbols_ar_KM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_KM ,
    ZERO_DIGIT : NumberFormatSymbols_ar_KM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_KM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_KM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_KM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_KM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_KW.
   */
  type NumberFormatSymbols_ar_KW = string ;
  var NumberFormatSymbols_ar_KW : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_KW ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_KW ,
    DECIMAL_SEP : NumberFormatSymbols_ar_KW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_KW ,
    EXP_SYMBOL : NumberFormatSymbols_ar_KW ,
    GROUP_SEP : NumberFormatSymbols_ar_KW ,
    INFINITY : NumberFormatSymbols_ar_KW ,
    MINUS_SIGN : NumberFormatSymbols_ar_KW ,
    NAN : NumberFormatSymbols_ar_KW ,
    PERCENT : NumberFormatSymbols_ar_KW ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_KW ,
    PERMILL : NumberFormatSymbols_ar_KW ,
    PLUS_SIGN : NumberFormatSymbols_ar_KW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_KW ,
    ZERO_DIGIT : NumberFormatSymbols_ar_KW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_KW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_KW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_KW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_KW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_LB.
   */
  type NumberFormatSymbols_ar_LB = string ;
  var NumberFormatSymbols_ar_LB : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_LB ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_LB ,
    DECIMAL_SEP : NumberFormatSymbols_ar_LB ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_LB ,
    EXP_SYMBOL : NumberFormatSymbols_ar_LB ,
    GROUP_SEP : NumberFormatSymbols_ar_LB ,
    INFINITY : NumberFormatSymbols_ar_LB ,
    MINUS_SIGN : NumberFormatSymbols_ar_LB ,
    NAN : NumberFormatSymbols_ar_LB ,
    PERCENT : NumberFormatSymbols_ar_LB ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_LB ,
    PERMILL : NumberFormatSymbols_ar_LB ,
    PLUS_SIGN : NumberFormatSymbols_ar_LB ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_LB ,
    ZERO_DIGIT : NumberFormatSymbols_ar_LB ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_LB'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_LB;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_LB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_LB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_LY.
   */
  type NumberFormatSymbols_ar_LY = string ;
  var NumberFormatSymbols_ar_LY : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_LY ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_LY ,
    DECIMAL_SEP : NumberFormatSymbols_ar_LY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_LY ,
    EXP_SYMBOL : NumberFormatSymbols_ar_LY ,
    GROUP_SEP : NumberFormatSymbols_ar_LY ,
    INFINITY : NumberFormatSymbols_ar_LY ,
    MINUS_SIGN : NumberFormatSymbols_ar_LY ,
    NAN : NumberFormatSymbols_ar_LY ,
    PERCENT : NumberFormatSymbols_ar_LY ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_LY ,
    PERMILL : NumberFormatSymbols_ar_LY ,
    PLUS_SIGN : NumberFormatSymbols_ar_LY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_LY ,
    ZERO_DIGIT : NumberFormatSymbols_ar_LY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_LY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_LY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_LY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_LY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_MA.
   */
  type NumberFormatSymbols_ar_MA = string ;
  var NumberFormatSymbols_ar_MA : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_MA ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_MA ,
    DECIMAL_SEP : NumberFormatSymbols_ar_MA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_MA ,
    EXP_SYMBOL : NumberFormatSymbols_ar_MA ,
    GROUP_SEP : NumberFormatSymbols_ar_MA ,
    INFINITY : NumberFormatSymbols_ar_MA ,
    MINUS_SIGN : NumberFormatSymbols_ar_MA ,
    NAN : NumberFormatSymbols_ar_MA ,
    PERCENT : NumberFormatSymbols_ar_MA ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_MA ,
    PERMILL : NumberFormatSymbols_ar_MA ,
    PLUS_SIGN : NumberFormatSymbols_ar_MA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_MA ,
    ZERO_DIGIT : NumberFormatSymbols_ar_MA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_MA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_MA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_MR.
   */
  type NumberFormatSymbols_ar_MR = string ;
  var NumberFormatSymbols_ar_MR : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_MR ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_MR ,
    DECIMAL_SEP : NumberFormatSymbols_ar_MR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_MR ,
    EXP_SYMBOL : NumberFormatSymbols_ar_MR ,
    GROUP_SEP : NumberFormatSymbols_ar_MR ,
    INFINITY : NumberFormatSymbols_ar_MR ,
    MINUS_SIGN : NumberFormatSymbols_ar_MR ,
    NAN : NumberFormatSymbols_ar_MR ,
    PERCENT : NumberFormatSymbols_ar_MR ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_MR ,
    PERMILL : NumberFormatSymbols_ar_MR ,
    PLUS_SIGN : NumberFormatSymbols_ar_MR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_MR ,
    ZERO_DIGIT : NumberFormatSymbols_ar_MR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_MR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_MR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_MR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_MR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_OM.
   */
  type NumberFormatSymbols_ar_OM = string ;
  var NumberFormatSymbols_ar_OM : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_OM ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_OM ,
    DECIMAL_SEP : NumberFormatSymbols_ar_OM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_OM ,
    EXP_SYMBOL : NumberFormatSymbols_ar_OM ,
    GROUP_SEP : NumberFormatSymbols_ar_OM ,
    INFINITY : NumberFormatSymbols_ar_OM ,
    MINUS_SIGN : NumberFormatSymbols_ar_OM ,
    NAN : NumberFormatSymbols_ar_OM ,
    PERCENT : NumberFormatSymbols_ar_OM ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_OM ,
    PERMILL : NumberFormatSymbols_ar_OM ,
    PLUS_SIGN : NumberFormatSymbols_ar_OM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_OM ,
    ZERO_DIGIT : NumberFormatSymbols_ar_OM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_OM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_OM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_OM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_OM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_PS.
   */
  type NumberFormatSymbols_ar_PS = string ;
  var NumberFormatSymbols_ar_PS : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_PS ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_PS ,
    DECIMAL_SEP : NumberFormatSymbols_ar_PS ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_PS ,
    EXP_SYMBOL : NumberFormatSymbols_ar_PS ,
    GROUP_SEP : NumberFormatSymbols_ar_PS ,
    INFINITY : NumberFormatSymbols_ar_PS ,
    MINUS_SIGN : NumberFormatSymbols_ar_PS ,
    NAN : NumberFormatSymbols_ar_PS ,
    PERCENT : NumberFormatSymbols_ar_PS ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_PS ,
    PERMILL : NumberFormatSymbols_ar_PS ,
    PLUS_SIGN : NumberFormatSymbols_ar_PS ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_PS ,
    ZERO_DIGIT : NumberFormatSymbols_ar_PS ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_PS'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_PS;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_PS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_PS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_QA.
   */
  type NumberFormatSymbols_ar_QA = string ;
  var NumberFormatSymbols_ar_QA : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_QA ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_QA ,
    DECIMAL_SEP : NumberFormatSymbols_ar_QA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_QA ,
    EXP_SYMBOL : NumberFormatSymbols_ar_QA ,
    GROUP_SEP : NumberFormatSymbols_ar_QA ,
    INFINITY : NumberFormatSymbols_ar_QA ,
    MINUS_SIGN : NumberFormatSymbols_ar_QA ,
    NAN : NumberFormatSymbols_ar_QA ,
    PERCENT : NumberFormatSymbols_ar_QA ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_QA ,
    PERMILL : NumberFormatSymbols_ar_QA ,
    PLUS_SIGN : NumberFormatSymbols_ar_QA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_QA ,
    ZERO_DIGIT : NumberFormatSymbols_ar_QA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_QA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_QA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_QA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_QA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_SA.
   */
  type NumberFormatSymbols_ar_SA = string ;
  var NumberFormatSymbols_ar_SA : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_SA ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_SA ,
    DECIMAL_SEP : NumberFormatSymbols_ar_SA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_SA ,
    EXP_SYMBOL : NumberFormatSymbols_ar_SA ,
    GROUP_SEP : NumberFormatSymbols_ar_SA ,
    INFINITY : NumberFormatSymbols_ar_SA ,
    MINUS_SIGN : NumberFormatSymbols_ar_SA ,
    NAN : NumberFormatSymbols_ar_SA ,
    PERCENT : NumberFormatSymbols_ar_SA ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_SA ,
    PERMILL : NumberFormatSymbols_ar_SA ,
    PLUS_SIGN : NumberFormatSymbols_ar_SA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_SA ,
    ZERO_DIGIT : NumberFormatSymbols_ar_SA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_SA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_SA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_SA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_SA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_SD.
   */
  type NumberFormatSymbols_ar_SD = string ;
  var NumberFormatSymbols_ar_SD : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_SD ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_SD ,
    DECIMAL_SEP : NumberFormatSymbols_ar_SD ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_SD ,
    EXP_SYMBOL : NumberFormatSymbols_ar_SD ,
    GROUP_SEP : NumberFormatSymbols_ar_SD ,
    INFINITY : NumberFormatSymbols_ar_SD ,
    MINUS_SIGN : NumberFormatSymbols_ar_SD ,
    NAN : NumberFormatSymbols_ar_SD ,
    PERCENT : NumberFormatSymbols_ar_SD ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_SD ,
    PERMILL : NumberFormatSymbols_ar_SD ,
    PLUS_SIGN : NumberFormatSymbols_ar_SD ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_SD ,
    ZERO_DIGIT : NumberFormatSymbols_ar_SD ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_SD'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_SD;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_SD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_SD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_SO.
   */
  type NumberFormatSymbols_ar_SO = string ;
  var NumberFormatSymbols_ar_SO : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_SO ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_SO ,
    DECIMAL_SEP : NumberFormatSymbols_ar_SO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_SO ,
    EXP_SYMBOL : NumberFormatSymbols_ar_SO ,
    GROUP_SEP : NumberFormatSymbols_ar_SO ,
    INFINITY : NumberFormatSymbols_ar_SO ,
    MINUS_SIGN : NumberFormatSymbols_ar_SO ,
    NAN : NumberFormatSymbols_ar_SO ,
    PERCENT : NumberFormatSymbols_ar_SO ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_SO ,
    PERMILL : NumberFormatSymbols_ar_SO ,
    PLUS_SIGN : NumberFormatSymbols_ar_SO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_SO ,
    ZERO_DIGIT : NumberFormatSymbols_ar_SO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_SO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_SO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_SO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_SO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_SS.
   */
  type NumberFormatSymbols_ar_SS = string ;
  var NumberFormatSymbols_ar_SS : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_SS ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_SS ,
    DECIMAL_SEP : NumberFormatSymbols_ar_SS ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_SS ,
    EXP_SYMBOL : NumberFormatSymbols_ar_SS ,
    GROUP_SEP : NumberFormatSymbols_ar_SS ,
    INFINITY : NumberFormatSymbols_ar_SS ,
    MINUS_SIGN : NumberFormatSymbols_ar_SS ,
    NAN : NumberFormatSymbols_ar_SS ,
    PERCENT : NumberFormatSymbols_ar_SS ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_SS ,
    PERMILL : NumberFormatSymbols_ar_SS ,
    PLUS_SIGN : NumberFormatSymbols_ar_SS ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_SS ,
    ZERO_DIGIT : NumberFormatSymbols_ar_SS ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_SS'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_SS;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_SS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_SS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_SY.
   */
  type NumberFormatSymbols_ar_SY = string ;
  var NumberFormatSymbols_ar_SY : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_SY ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_SY ,
    DECIMAL_SEP : NumberFormatSymbols_ar_SY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_SY ,
    EXP_SYMBOL : NumberFormatSymbols_ar_SY ,
    GROUP_SEP : NumberFormatSymbols_ar_SY ,
    INFINITY : NumberFormatSymbols_ar_SY ,
    MINUS_SIGN : NumberFormatSymbols_ar_SY ,
    NAN : NumberFormatSymbols_ar_SY ,
    PERCENT : NumberFormatSymbols_ar_SY ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_SY ,
    PERMILL : NumberFormatSymbols_ar_SY ,
    PLUS_SIGN : NumberFormatSymbols_ar_SY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_SY ,
    ZERO_DIGIT : NumberFormatSymbols_ar_SY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_SY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_SY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_SY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_SY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_TD.
   */
  type NumberFormatSymbols_ar_TD = string ;
  var NumberFormatSymbols_ar_TD : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_TD ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_TD ,
    DECIMAL_SEP : NumberFormatSymbols_ar_TD ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_TD ,
    EXP_SYMBOL : NumberFormatSymbols_ar_TD ,
    GROUP_SEP : NumberFormatSymbols_ar_TD ,
    INFINITY : NumberFormatSymbols_ar_TD ,
    MINUS_SIGN : NumberFormatSymbols_ar_TD ,
    NAN : NumberFormatSymbols_ar_TD ,
    PERCENT : NumberFormatSymbols_ar_TD ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_TD ,
    PERMILL : NumberFormatSymbols_ar_TD ,
    PLUS_SIGN : NumberFormatSymbols_ar_TD ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_TD ,
    ZERO_DIGIT : NumberFormatSymbols_ar_TD ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_TD'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_TD;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_TD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_TD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_TN.
   */
  type NumberFormatSymbols_ar_TN = string ;
  var NumberFormatSymbols_ar_TN : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_TN ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_TN ,
    DECIMAL_SEP : NumberFormatSymbols_ar_TN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_TN ,
    EXP_SYMBOL : NumberFormatSymbols_ar_TN ,
    GROUP_SEP : NumberFormatSymbols_ar_TN ,
    INFINITY : NumberFormatSymbols_ar_TN ,
    MINUS_SIGN : NumberFormatSymbols_ar_TN ,
    NAN : NumberFormatSymbols_ar_TN ,
    PERCENT : NumberFormatSymbols_ar_TN ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_TN ,
    PERMILL : NumberFormatSymbols_ar_TN ,
    PLUS_SIGN : NumberFormatSymbols_ar_TN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_TN ,
    ZERO_DIGIT : NumberFormatSymbols_ar_TN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_TN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_TN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_TN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_TN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_XB.
   */
  type NumberFormatSymbols_ar_XB = string ;
  var NumberFormatSymbols_ar_XB : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_XB ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_XB ,
    DECIMAL_SEP : NumberFormatSymbols_ar_XB ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_XB ,
    EXP_SYMBOL : NumberFormatSymbols_ar_XB ,
    GROUP_SEP : NumberFormatSymbols_ar_XB ,
    INFINITY : NumberFormatSymbols_ar_XB ,
    MINUS_SIGN : NumberFormatSymbols_ar_XB ,
    NAN : NumberFormatSymbols_ar_XB ,
    PERCENT : NumberFormatSymbols_ar_XB ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_XB ,
    PERMILL : NumberFormatSymbols_ar_XB ,
    PLUS_SIGN : NumberFormatSymbols_ar_XB ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_XB ,
    ZERO_DIGIT : NumberFormatSymbols_ar_XB ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_XB'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_XB;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_XB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_XB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ar_YE.
   */
  type NumberFormatSymbols_ar_YE = string ;
  var NumberFormatSymbols_ar_YE : {
    CURRENCY_PATTERN : NumberFormatSymbols_ar_YE ,
    DECIMAL_PATTERN : NumberFormatSymbols_ar_YE ,
    DECIMAL_SEP : NumberFormatSymbols_ar_YE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ar_YE ,
    EXP_SYMBOL : NumberFormatSymbols_ar_YE ,
    GROUP_SEP : NumberFormatSymbols_ar_YE ,
    INFINITY : NumberFormatSymbols_ar_YE ,
    MINUS_SIGN : NumberFormatSymbols_ar_YE ,
    NAN : NumberFormatSymbols_ar_YE ,
    PERCENT : NumberFormatSymbols_ar_YE ,
    PERCENT_PATTERN : NumberFormatSymbols_ar_YE ,
    PERMILL : NumberFormatSymbols_ar_YE ,
    PLUS_SIGN : NumberFormatSymbols_ar_YE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ar_YE ,
    ZERO_DIGIT : NumberFormatSymbols_ar_YE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ar_YE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_YE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ar_YE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ar_YE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale as.
   */
  type NumberFormatSymbols_as = string ;
  var NumberFormatSymbols_as : {
    CURRENCY_PATTERN : NumberFormatSymbols_as ,
    DECIMAL_PATTERN : NumberFormatSymbols_as ,
    DECIMAL_SEP : NumberFormatSymbols_as ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_as ,
    EXP_SYMBOL : NumberFormatSymbols_as ,
    GROUP_SEP : NumberFormatSymbols_as ,
    INFINITY : NumberFormatSymbols_as ,
    MINUS_SIGN : NumberFormatSymbols_as ,
    NAN : NumberFormatSymbols_as ,
    PERCENT : NumberFormatSymbols_as ,
    PERCENT_PATTERN : NumberFormatSymbols_as ,
    PERMILL : NumberFormatSymbols_as ,
    PLUS_SIGN : NumberFormatSymbols_as ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_as ,
    ZERO_DIGIT : NumberFormatSymbols_as ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_as'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_as;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_as' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_as;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale as_IN.
   */
  type NumberFormatSymbols_as_IN = string ;
  var NumberFormatSymbols_as_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_as_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_as_IN ,
    DECIMAL_SEP : NumberFormatSymbols_as_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_as_IN ,
    EXP_SYMBOL : NumberFormatSymbols_as_IN ,
    GROUP_SEP : NumberFormatSymbols_as_IN ,
    INFINITY : NumberFormatSymbols_as_IN ,
    MINUS_SIGN : NumberFormatSymbols_as_IN ,
    NAN : NumberFormatSymbols_as_IN ,
    PERCENT : NumberFormatSymbols_as_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_as_IN ,
    PERMILL : NumberFormatSymbols_as_IN ,
    PLUS_SIGN : NumberFormatSymbols_as_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_as_IN ,
    ZERO_DIGIT : NumberFormatSymbols_as_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_as_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_as_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_as_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_as_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale asa.
   */
  type NumberFormatSymbols_asa = string ;
  var NumberFormatSymbols_asa : {
    CURRENCY_PATTERN : NumberFormatSymbols_asa ,
    DECIMAL_PATTERN : NumberFormatSymbols_asa ,
    DECIMAL_SEP : NumberFormatSymbols_asa ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_asa ,
    EXP_SYMBOL : NumberFormatSymbols_asa ,
    GROUP_SEP : NumberFormatSymbols_asa ,
    INFINITY : NumberFormatSymbols_asa ,
    MINUS_SIGN : NumberFormatSymbols_asa ,
    NAN : NumberFormatSymbols_asa ,
    PERCENT : NumberFormatSymbols_asa ,
    PERCENT_PATTERN : NumberFormatSymbols_asa ,
    PERMILL : NumberFormatSymbols_asa ,
    PLUS_SIGN : NumberFormatSymbols_asa ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_asa ,
    ZERO_DIGIT : NumberFormatSymbols_asa ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_asa'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_asa;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_asa' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_asa;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale asa_TZ.
   */
  type NumberFormatSymbols_asa_TZ = string ;
  var NumberFormatSymbols_asa_TZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_asa_TZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_asa_TZ ,
    DECIMAL_SEP : NumberFormatSymbols_asa_TZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_asa_TZ ,
    EXP_SYMBOL : NumberFormatSymbols_asa_TZ ,
    GROUP_SEP : NumberFormatSymbols_asa_TZ ,
    INFINITY : NumberFormatSymbols_asa_TZ ,
    MINUS_SIGN : NumberFormatSymbols_asa_TZ ,
    NAN : NumberFormatSymbols_asa_TZ ,
    PERCENT : NumberFormatSymbols_asa_TZ ,
    PERCENT_PATTERN : NumberFormatSymbols_asa_TZ ,
    PERMILL : NumberFormatSymbols_asa_TZ ,
    PLUS_SIGN : NumberFormatSymbols_asa_TZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_asa_TZ ,
    ZERO_DIGIT : NumberFormatSymbols_asa_TZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_asa_TZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_asa_TZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_asa_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_asa_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ast.
   */
  type NumberFormatSymbols_ast = string ;
  var NumberFormatSymbols_ast : {
    CURRENCY_PATTERN : NumberFormatSymbols_ast ,
    DECIMAL_PATTERN : NumberFormatSymbols_ast ,
    DECIMAL_SEP : NumberFormatSymbols_ast ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ast ,
    EXP_SYMBOL : NumberFormatSymbols_ast ,
    GROUP_SEP : NumberFormatSymbols_ast ,
    INFINITY : NumberFormatSymbols_ast ,
    MINUS_SIGN : NumberFormatSymbols_ast ,
    NAN : NumberFormatSymbols_ast ,
    PERCENT : NumberFormatSymbols_ast ,
    PERCENT_PATTERN : NumberFormatSymbols_ast ,
    PERMILL : NumberFormatSymbols_ast ,
    PLUS_SIGN : NumberFormatSymbols_ast ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ast ,
    ZERO_DIGIT : NumberFormatSymbols_ast ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ast'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ast;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ast' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ast;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ast_ES.
   */
  type NumberFormatSymbols_ast_ES = string ;
  var NumberFormatSymbols_ast_ES : {
    CURRENCY_PATTERN : NumberFormatSymbols_ast_ES ,
    DECIMAL_PATTERN : NumberFormatSymbols_ast_ES ,
    DECIMAL_SEP : NumberFormatSymbols_ast_ES ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ast_ES ,
    EXP_SYMBOL : NumberFormatSymbols_ast_ES ,
    GROUP_SEP : NumberFormatSymbols_ast_ES ,
    INFINITY : NumberFormatSymbols_ast_ES ,
    MINUS_SIGN : NumberFormatSymbols_ast_ES ,
    NAN : NumberFormatSymbols_ast_ES ,
    PERCENT : NumberFormatSymbols_ast_ES ,
    PERCENT_PATTERN : NumberFormatSymbols_ast_ES ,
    PERMILL : NumberFormatSymbols_ast_ES ,
    PLUS_SIGN : NumberFormatSymbols_ast_ES ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ast_ES ,
    ZERO_DIGIT : NumberFormatSymbols_ast_ES ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ast_ES'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ast_ES;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ast_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ast_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale az.
   */
  type NumberFormatSymbols_az = string ;
  var NumberFormatSymbols_az : {
    CURRENCY_PATTERN : NumberFormatSymbols_az ,
    DECIMAL_PATTERN : NumberFormatSymbols_az ,
    DECIMAL_SEP : NumberFormatSymbols_az ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_az ,
    EXP_SYMBOL : NumberFormatSymbols_az ,
    GROUP_SEP : NumberFormatSymbols_az ,
    INFINITY : NumberFormatSymbols_az ,
    MINUS_SIGN : NumberFormatSymbols_az ,
    NAN : NumberFormatSymbols_az ,
    PERCENT : NumberFormatSymbols_az ,
    PERCENT_PATTERN : NumberFormatSymbols_az ,
    PERMILL : NumberFormatSymbols_az ,
    PLUS_SIGN : NumberFormatSymbols_az ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_az ,
    ZERO_DIGIT : NumberFormatSymbols_az ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_az'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_az;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_az' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_az;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale az_Cyrl.
   */
  type NumberFormatSymbols_az_Cyrl = string ;
  var NumberFormatSymbols_az_Cyrl : {
    CURRENCY_PATTERN : NumberFormatSymbols_az_Cyrl ,
    DECIMAL_PATTERN : NumberFormatSymbols_az_Cyrl ,
    DECIMAL_SEP : NumberFormatSymbols_az_Cyrl ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_az_Cyrl ,
    EXP_SYMBOL : NumberFormatSymbols_az_Cyrl ,
    GROUP_SEP : NumberFormatSymbols_az_Cyrl ,
    INFINITY : NumberFormatSymbols_az_Cyrl ,
    MINUS_SIGN : NumberFormatSymbols_az_Cyrl ,
    NAN : NumberFormatSymbols_az_Cyrl ,
    PERCENT : NumberFormatSymbols_az_Cyrl ,
    PERCENT_PATTERN : NumberFormatSymbols_az_Cyrl ,
    PERMILL : NumberFormatSymbols_az_Cyrl ,
    PLUS_SIGN : NumberFormatSymbols_az_Cyrl ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_az_Cyrl ,
    ZERO_DIGIT : NumberFormatSymbols_az_Cyrl ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_az_Cyrl'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_az_Cyrl;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_az_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_az_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale az_Cyrl_AZ.
   */
  type NumberFormatSymbols_az_Cyrl_AZ = string ;
  var NumberFormatSymbols_az_Cyrl_AZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_az_Cyrl_AZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_az_Cyrl_AZ ,
    DECIMAL_SEP : NumberFormatSymbols_az_Cyrl_AZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_az_Cyrl_AZ ,
    EXP_SYMBOL : NumberFormatSymbols_az_Cyrl_AZ ,
    GROUP_SEP : NumberFormatSymbols_az_Cyrl_AZ ,
    INFINITY : NumberFormatSymbols_az_Cyrl_AZ ,
    MINUS_SIGN : NumberFormatSymbols_az_Cyrl_AZ ,
    NAN : NumberFormatSymbols_az_Cyrl_AZ ,
    PERCENT : NumberFormatSymbols_az_Cyrl_AZ ,
    PERCENT_PATTERN : NumberFormatSymbols_az_Cyrl_AZ ,
    PERMILL : NumberFormatSymbols_az_Cyrl_AZ ,
    PLUS_SIGN : NumberFormatSymbols_az_Cyrl_AZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_az_Cyrl_AZ ,
    ZERO_DIGIT : NumberFormatSymbols_az_Cyrl_AZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_az_Cyrl_AZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_az_Cyrl_AZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_az_Cyrl_AZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_az_Cyrl_AZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale az_Latn.
   */
  type NumberFormatSymbols_az_Latn = string ;
  var NumberFormatSymbols_az_Latn : {
    CURRENCY_PATTERN : NumberFormatSymbols_az_Latn ,
    DECIMAL_PATTERN : NumberFormatSymbols_az_Latn ,
    DECIMAL_SEP : NumberFormatSymbols_az_Latn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_az_Latn ,
    EXP_SYMBOL : NumberFormatSymbols_az_Latn ,
    GROUP_SEP : NumberFormatSymbols_az_Latn ,
    INFINITY : NumberFormatSymbols_az_Latn ,
    MINUS_SIGN : NumberFormatSymbols_az_Latn ,
    NAN : NumberFormatSymbols_az_Latn ,
    PERCENT : NumberFormatSymbols_az_Latn ,
    PERCENT_PATTERN : NumberFormatSymbols_az_Latn ,
    PERMILL : NumberFormatSymbols_az_Latn ,
    PLUS_SIGN : NumberFormatSymbols_az_Latn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_az_Latn ,
    ZERO_DIGIT : NumberFormatSymbols_az_Latn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_az_Latn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_az_Latn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_az_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_az_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale az_Latn_AZ.
   */
  type NumberFormatSymbols_az_Latn_AZ = string ;
  var NumberFormatSymbols_az_Latn_AZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_az_Latn_AZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_az_Latn_AZ ,
    DECIMAL_SEP : NumberFormatSymbols_az_Latn_AZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_az_Latn_AZ ,
    EXP_SYMBOL : NumberFormatSymbols_az_Latn_AZ ,
    GROUP_SEP : NumberFormatSymbols_az_Latn_AZ ,
    INFINITY : NumberFormatSymbols_az_Latn_AZ ,
    MINUS_SIGN : NumberFormatSymbols_az_Latn_AZ ,
    NAN : NumberFormatSymbols_az_Latn_AZ ,
    PERCENT : NumberFormatSymbols_az_Latn_AZ ,
    PERCENT_PATTERN : NumberFormatSymbols_az_Latn_AZ ,
    PERMILL : NumberFormatSymbols_az_Latn_AZ ,
    PLUS_SIGN : NumberFormatSymbols_az_Latn_AZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_az_Latn_AZ ,
    ZERO_DIGIT : NumberFormatSymbols_az_Latn_AZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_az_Latn_AZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_az_Latn_AZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_az_Latn_AZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_az_Latn_AZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bas.
   */
  type NumberFormatSymbols_bas = string ;
  var NumberFormatSymbols_bas : {
    CURRENCY_PATTERN : NumberFormatSymbols_bas ,
    DECIMAL_PATTERN : NumberFormatSymbols_bas ,
    DECIMAL_SEP : NumberFormatSymbols_bas ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bas ,
    EXP_SYMBOL : NumberFormatSymbols_bas ,
    GROUP_SEP : NumberFormatSymbols_bas ,
    INFINITY : NumberFormatSymbols_bas ,
    MINUS_SIGN : NumberFormatSymbols_bas ,
    NAN : NumberFormatSymbols_bas ,
    PERCENT : NumberFormatSymbols_bas ,
    PERCENT_PATTERN : NumberFormatSymbols_bas ,
    PERMILL : NumberFormatSymbols_bas ,
    PLUS_SIGN : NumberFormatSymbols_bas ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bas ,
    ZERO_DIGIT : NumberFormatSymbols_bas ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bas'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bas;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bas' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bas;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bas_CM.
   */
  type NumberFormatSymbols_bas_CM = string ;
  var NumberFormatSymbols_bas_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_bas_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_bas_CM ,
    DECIMAL_SEP : NumberFormatSymbols_bas_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bas_CM ,
    EXP_SYMBOL : NumberFormatSymbols_bas_CM ,
    GROUP_SEP : NumberFormatSymbols_bas_CM ,
    INFINITY : NumberFormatSymbols_bas_CM ,
    MINUS_SIGN : NumberFormatSymbols_bas_CM ,
    NAN : NumberFormatSymbols_bas_CM ,
    PERCENT : NumberFormatSymbols_bas_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_bas_CM ,
    PERMILL : NumberFormatSymbols_bas_CM ,
    PLUS_SIGN : NumberFormatSymbols_bas_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bas_CM ,
    ZERO_DIGIT : NumberFormatSymbols_bas_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bas_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bas_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bas_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bas_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale be.
   */
  type NumberFormatSymbols_be = string ;
  var NumberFormatSymbols_be : {
    CURRENCY_PATTERN : NumberFormatSymbols_be ,
    DECIMAL_PATTERN : NumberFormatSymbols_be ,
    DECIMAL_SEP : NumberFormatSymbols_be ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_be ,
    EXP_SYMBOL : NumberFormatSymbols_be ,
    GROUP_SEP : NumberFormatSymbols_be ,
    INFINITY : NumberFormatSymbols_be ,
    MINUS_SIGN : NumberFormatSymbols_be ,
    NAN : NumberFormatSymbols_be ,
    PERCENT : NumberFormatSymbols_be ,
    PERCENT_PATTERN : NumberFormatSymbols_be ,
    PERMILL : NumberFormatSymbols_be ,
    PLUS_SIGN : NumberFormatSymbols_be ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_be ,
    ZERO_DIGIT : NumberFormatSymbols_be ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_be'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_be;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_be' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_be;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale be_BY.
   */
  type NumberFormatSymbols_be_BY = string ;
  var NumberFormatSymbols_be_BY : {
    CURRENCY_PATTERN : NumberFormatSymbols_be_BY ,
    DECIMAL_PATTERN : NumberFormatSymbols_be_BY ,
    DECIMAL_SEP : NumberFormatSymbols_be_BY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_be_BY ,
    EXP_SYMBOL : NumberFormatSymbols_be_BY ,
    GROUP_SEP : NumberFormatSymbols_be_BY ,
    INFINITY : NumberFormatSymbols_be_BY ,
    MINUS_SIGN : NumberFormatSymbols_be_BY ,
    NAN : NumberFormatSymbols_be_BY ,
    PERCENT : NumberFormatSymbols_be_BY ,
    PERCENT_PATTERN : NumberFormatSymbols_be_BY ,
    PERMILL : NumberFormatSymbols_be_BY ,
    PLUS_SIGN : NumberFormatSymbols_be_BY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_be_BY ,
    ZERO_DIGIT : NumberFormatSymbols_be_BY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_be_BY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_be_BY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_be_BY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_be_BY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bem.
   */
  type NumberFormatSymbols_bem = string ;
  var NumberFormatSymbols_bem : {
    CURRENCY_PATTERN : NumberFormatSymbols_bem ,
    DECIMAL_PATTERN : NumberFormatSymbols_bem ,
    DECIMAL_SEP : NumberFormatSymbols_bem ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bem ,
    EXP_SYMBOL : NumberFormatSymbols_bem ,
    GROUP_SEP : NumberFormatSymbols_bem ,
    INFINITY : NumberFormatSymbols_bem ,
    MINUS_SIGN : NumberFormatSymbols_bem ,
    NAN : NumberFormatSymbols_bem ,
    PERCENT : NumberFormatSymbols_bem ,
    PERCENT_PATTERN : NumberFormatSymbols_bem ,
    PERMILL : NumberFormatSymbols_bem ,
    PLUS_SIGN : NumberFormatSymbols_bem ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bem ,
    ZERO_DIGIT : NumberFormatSymbols_bem ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bem'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bem;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bem' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bem;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bem_ZM.
   */
  type NumberFormatSymbols_bem_ZM = string ;
  var NumberFormatSymbols_bem_ZM : {
    CURRENCY_PATTERN : NumberFormatSymbols_bem_ZM ,
    DECIMAL_PATTERN : NumberFormatSymbols_bem_ZM ,
    DECIMAL_SEP : NumberFormatSymbols_bem_ZM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bem_ZM ,
    EXP_SYMBOL : NumberFormatSymbols_bem_ZM ,
    GROUP_SEP : NumberFormatSymbols_bem_ZM ,
    INFINITY : NumberFormatSymbols_bem_ZM ,
    MINUS_SIGN : NumberFormatSymbols_bem_ZM ,
    NAN : NumberFormatSymbols_bem_ZM ,
    PERCENT : NumberFormatSymbols_bem_ZM ,
    PERCENT_PATTERN : NumberFormatSymbols_bem_ZM ,
    PERMILL : NumberFormatSymbols_bem_ZM ,
    PLUS_SIGN : NumberFormatSymbols_bem_ZM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bem_ZM ,
    ZERO_DIGIT : NumberFormatSymbols_bem_ZM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bem_ZM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bem_ZM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bem_ZM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bem_ZM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bez.
   */
  type NumberFormatSymbols_bez = string ;
  var NumberFormatSymbols_bez : {
    CURRENCY_PATTERN : NumberFormatSymbols_bez ,
    DECIMAL_PATTERN : NumberFormatSymbols_bez ,
    DECIMAL_SEP : NumberFormatSymbols_bez ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bez ,
    EXP_SYMBOL : NumberFormatSymbols_bez ,
    GROUP_SEP : NumberFormatSymbols_bez ,
    INFINITY : NumberFormatSymbols_bez ,
    MINUS_SIGN : NumberFormatSymbols_bez ,
    NAN : NumberFormatSymbols_bez ,
    PERCENT : NumberFormatSymbols_bez ,
    PERCENT_PATTERN : NumberFormatSymbols_bez ,
    PERMILL : NumberFormatSymbols_bez ,
    PLUS_SIGN : NumberFormatSymbols_bez ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bez ,
    ZERO_DIGIT : NumberFormatSymbols_bez ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bez'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bez;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bez' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bez;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bez_TZ.
   */
  type NumberFormatSymbols_bez_TZ = string ;
  var NumberFormatSymbols_bez_TZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_bez_TZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_bez_TZ ,
    DECIMAL_SEP : NumberFormatSymbols_bez_TZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bez_TZ ,
    EXP_SYMBOL : NumberFormatSymbols_bez_TZ ,
    GROUP_SEP : NumberFormatSymbols_bez_TZ ,
    INFINITY : NumberFormatSymbols_bez_TZ ,
    MINUS_SIGN : NumberFormatSymbols_bez_TZ ,
    NAN : NumberFormatSymbols_bez_TZ ,
    PERCENT : NumberFormatSymbols_bez_TZ ,
    PERCENT_PATTERN : NumberFormatSymbols_bez_TZ ,
    PERMILL : NumberFormatSymbols_bez_TZ ,
    PLUS_SIGN : NumberFormatSymbols_bez_TZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bez_TZ ,
    ZERO_DIGIT : NumberFormatSymbols_bez_TZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bez_TZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bez_TZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bez_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bez_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bg.
   */
  type NumberFormatSymbols_bg = string ;
  var NumberFormatSymbols_bg : {
    CURRENCY_PATTERN : NumberFormatSymbols_bg ,
    DECIMAL_PATTERN : NumberFormatSymbols_bg ,
    DECIMAL_SEP : NumberFormatSymbols_bg ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bg ,
    EXP_SYMBOL : NumberFormatSymbols_bg ,
    GROUP_SEP : NumberFormatSymbols_bg ,
    INFINITY : NumberFormatSymbols_bg ,
    MINUS_SIGN : NumberFormatSymbols_bg ,
    NAN : NumberFormatSymbols_bg ,
    PERCENT : NumberFormatSymbols_bg ,
    PERCENT_PATTERN : NumberFormatSymbols_bg ,
    PERMILL : NumberFormatSymbols_bg ,
    PLUS_SIGN : NumberFormatSymbols_bg ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bg ,
    ZERO_DIGIT : NumberFormatSymbols_bg ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bg'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bg;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bg_BG.
   */
  type NumberFormatSymbols_bg_BG = string ;
  var NumberFormatSymbols_bg_BG : {
    CURRENCY_PATTERN : NumberFormatSymbols_bg_BG ,
    DECIMAL_PATTERN : NumberFormatSymbols_bg_BG ,
    DECIMAL_SEP : NumberFormatSymbols_bg_BG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bg_BG ,
    EXP_SYMBOL : NumberFormatSymbols_bg_BG ,
    GROUP_SEP : NumberFormatSymbols_bg_BG ,
    INFINITY : NumberFormatSymbols_bg_BG ,
    MINUS_SIGN : NumberFormatSymbols_bg_BG ,
    NAN : NumberFormatSymbols_bg_BG ,
    PERCENT : NumberFormatSymbols_bg_BG ,
    PERCENT_PATTERN : NumberFormatSymbols_bg_BG ,
    PERMILL : NumberFormatSymbols_bg_BG ,
    PLUS_SIGN : NumberFormatSymbols_bg_BG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bg_BG ,
    ZERO_DIGIT : NumberFormatSymbols_bg_BG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bg_BG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bg_BG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bg_BG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bg_BG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bm.
   */
  type NumberFormatSymbols_bm = string ;
  var NumberFormatSymbols_bm : {
    CURRENCY_PATTERN : NumberFormatSymbols_bm ,
    DECIMAL_PATTERN : NumberFormatSymbols_bm ,
    DECIMAL_SEP : NumberFormatSymbols_bm ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bm ,
    EXP_SYMBOL : NumberFormatSymbols_bm ,
    GROUP_SEP : NumberFormatSymbols_bm ,
    INFINITY : NumberFormatSymbols_bm ,
    MINUS_SIGN : NumberFormatSymbols_bm ,
    NAN : NumberFormatSymbols_bm ,
    PERCENT : NumberFormatSymbols_bm ,
    PERCENT_PATTERN : NumberFormatSymbols_bm ,
    PERMILL : NumberFormatSymbols_bm ,
    PLUS_SIGN : NumberFormatSymbols_bm ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bm ,
    ZERO_DIGIT : NumberFormatSymbols_bm ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bm'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bm;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bm' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bm;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bm_ML.
   */
  type NumberFormatSymbols_bm_ML = string ;
  var NumberFormatSymbols_bm_ML : {
    CURRENCY_PATTERN : NumberFormatSymbols_bm_ML ,
    DECIMAL_PATTERN : NumberFormatSymbols_bm_ML ,
    DECIMAL_SEP : NumberFormatSymbols_bm_ML ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bm_ML ,
    EXP_SYMBOL : NumberFormatSymbols_bm_ML ,
    GROUP_SEP : NumberFormatSymbols_bm_ML ,
    INFINITY : NumberFormatSymbols_bm_ML ,
    MINUS_SIGN : NumberFormatSymbols_bm_ML ,
    NAN : NumberFormatSymbols_bm_ML ,
    PERCENT : NumberFormatSymbols_bm_ML ,
    PERCENT_PATTERN : NumberFormatSymbols_bm_ML ,
    PERMILL : NumberFormatSymbols_bm_ML ,
    PLUS_SIGN : NumberFormatSymbols_bm_ML ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bm_ML ,
    ZERO_DIGIT : NumberFormatSymbols_bm_ML ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bm_ML'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bm_ML;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bm_ML' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bm_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bn.
   */
  type NumberFormatSymbols_bn = string ;
  var NumberFormatSymbols_bn : {
    CURRENCY_PATTERN : NumberFormatSymbols_bn ,
    DECIMAL_PATTERN : NumberFormatSymbols_bn ,
    DECIMAL_SEP : NumberFormatSymbols_bn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bn ,
    EXP_SYMBOL : NumberFormatSymbols_bn ,
    GROUP_SEP : NumberFormatSymbols_bn ,
    INFINITY : NumberFormatSymbols_bn ,
    MINUS_SIGN : NumberFormatSymbols_bn ,
    NAN : NumberFormatSymbols_bn ,
    PERCENT : NumberFormatSymbols_bn ,
    PERCENT_PATTERN : NumberFormatSymbols_bn ,
    PERMILL : NumberFormatSymbols_bn ,
    PLUS_SIGN : NumberFormatSymbols_bn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bn ,
    ZERO_DIGIT : NumberFormatSymbols_bn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bn_BD.
   */
  type NumberFormatSymbols_bn_BD = string ;
  var NumberFormatSymbols_bn_BD : {
    CURRENCY_PATTERN : NumberFormatSymbols_bn_BD ,
    DECIMAL_PATTERN : NumberFormatSymbols_bn_BD ,
    DECIMAL_SEP : NumberFormatSymbols_bn_BD ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bn_BD ,
    EXP_SYMBOL : NumberFormatSymbols_bn_BD ,
    GROUP_SEP : NumberFormatSymbols_bn_BD ,
    INFINITY : NumberFormatSymbols_bn_BD ,
    MINUS_SIGN : NumberFormatSymbols_bn_BD ,
    NAN : NumberFormatSymbols_bn_BD ,
    PERCENT : NumberFormatSymbols_bn_BD ,
    PERCENT_PATTERN : NumberFormatSymbols_bn_BD ,
    PERMILL : NumberFormatSymbols_bn_BD ,
    PLUS_SIGN : NumberFormatSymbols_bn_BD ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bn_BD ,
    ZERO_DIGIT : NumberFormatSymbols_bn_BD ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bn_BD'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bn_BD;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bn_BD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bn_BD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bn_IN.
   */
  type NumberFormatSymbols_bn_IN = string ;
  var NumberFormatSymbols_bn_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_bn_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_bn_IN ,
    DECIMAL_SEP : NumberFormatSymbols_bn_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bn_IN ,
    EXP_SYMBOL : NumberFormatSymbols_bn_IN ,
    GROUP_SEP : NumberFormatSymbols_bn_IN ,
    INFINITY : NumberFormatSymbols_bn_IN ,
    MINUS_SIGN : NumberFormatSymbols_bn_IN ,
    NAN : NumberFormatSymbols_bn_IN ,
    PERCENT : NumberFormatSymbols_bn_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_bn_IN ,
    PERMILL : NumberFormatSymbols_bn_IN ,
    PLUS_SIGN : NumberFormatSymbols_bn_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bn_IN ,
    ZERO_DIGIT : NumberFormatSymbols_bn_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bn_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bn_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bn_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bn_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bo.
   */
  type NumberFormatSymbols_bo = string ;
  var NumberFormatSymbols_bo : {
    CURRENCY_PATTERN : NumberFormatSymbols_bo ,
    DECIMAL_PATTERN : NumberFormatSymbols_bo ,
    DECIMAL_SEP : NumberFormatSymbols_bo ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bo ,
    EXP_SYMBOL : NumberFormatSymbols_bo ,
    GROUP_SEP : NumberFormatSymbols_bo ,
    INFINITY : NumberFormatSymbols_bo ,
    MINUS_SIGN : NumberFormatSymbols_bo ,
    NAN : NumberFormatSymbols_bo ,
    PERCENT : NumberFormatSymbols_bo ,
    PERCENT_PATTERN : NumberFormatSymbols_bo ,
    PERMILL : NumberFormatSymbols_bo ,
    PLUS_SIGN : NumberFormatSymbols_bo ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bo ,
    ZERO_DIGIT : NumberFormatSymbols_bo ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bo'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bo;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bo_CN.
   */
  type NumberFormatSymbols_bo_CN = string ;
  var NumberFormatSymbols_bo_CN : {
    CURRENCY_PATTERN : NumberFormatSymbols_bo_CN ,
    DECIMAL_PATTERN : NumberFormatSymbols_bo_CN ,
    DECIMAL_SEP : NumberFormatSymbols_bo_CN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bo_CN ,
    EXP_SYMBOL : NumberFormatSymbols_bo_CN ,
    GROUP_SEP : NumberFormatSymbols_bo_CN ,
    INFINITY : NumberFormatSymbols_bo_CN ,
    MINUS_SIGN : NumberFormatSymbols_bo_CN ,
    NAN : NumberFormatSymbols_bo_CN ,
    PERCENT : NumberFormatSymbols_bo_CN ,
    PERCENT_PATTERN : NumberFormatSymbols_bo_CN ,
    PERMILL : NumberFormatSymbols_bo_CN ,
    PLUS_SIGN : NumberFormatSymbols_bo_CN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bo_CN ,
    ZERO_DIGIT : NumberFormatSymbols_bo_CN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bo_CN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bo_CN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bo_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bo_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bo_IN.
   */
  type NumberFormatSymbols_bo_IN = string ;
  var NumberFormatSymbols_bo_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_bo_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_bo_IN ,
    DECIMAL_SEP : NumberFormatSymbols_bo_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bo_IN ,
    EXP_SYMBOL : NumberFormatSymbols_bo_IN ,
    GROUP_SEP : NumberFormatSymbols_bo_IN ,
    INFINITY : NumberFormatSymbols_bo_IN ,
    MINUS_SIGN : NumberFormatSymbols_bo_IN ,
    NAN : NumberFormatSymbols_bo_IN ,
    PERCENT : NumberFormatSymbols_bo_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_bo_IN ,
    PERMILL : NumberFormatSymbols_bo_IN ,
    PLUS_SIGN : NumberFormatSymbols_bo_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bo_IN ,
    ZERO_DIGIT : NumberFormatSymbols_bo_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bo_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bo_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bo_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bo_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale br.
   */
  type NumberFormatSymbols_br = string ;
  var NumberFormatSymbols_br : {
    CURRENCY_PATTERN : NumberFormatSymbols_br ,
    DECIMAL_PATTERN : NumberFormatSymbols_br ,
    DECIMAL_SEP : NumberFormatSymbols_br ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_br ,
    EXP_SYMBOL : NumberFormatSymbols_br ,
    GROUP_SEP : NumberFormatSymbols_br ,
    INFINITY : NumberFormatSymbols_br ,
    MINUS_SIGN : NumberFormatSymbols_br ,
    NAN : NumberFormatSymbols_br ,
    PERCENT : NumberFormatSymbols_br ,
    PERCENT_PATTERN : NumberFormatSymbols_br ,
    PERMILL : NumberFormatSymbols_br ,
    PLUS_SIGN : NumberFormatSymbols_br ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_br ,
    ZERO_DIGIT : NumberFormatSymbols_br ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_br'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_br;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_br' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_br;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale br_FR.
   */
  type NumberFormatSymbols_br_FR = string ;
  var NumberFormatSymbols_br_FR : {
    CURRENCY_PATTERN : NumberFormatSymbols_br_FR ,
    DECIMAL_PATTERN : NumberFormatSymbols_br_FR ,
    DECIMAL_SEP : NumberFormatSymbols_br_FR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_br_FR ,
    EXP_SYMBOL : NumberFormatSymbols_br_FR ,
    GROUP_SEP : NumberFormatSymbols_br_FR ,
    INFINITY : NumberFormatSymbols_br_FR ,
    MINUS_SIGN : NumberFormatSymbols_br_FR ,
    NAN : NumberFormatSymbols_br_FR ,
    PERCENT : NumberFormatSymbols_br_FR ,
    PERCENT_PATTERN : NumberFormatSymbols_br_FR ,
    PERMILL : NumberFormatSymbols_br_FR ,
    PLUS_SIGN : NumberFormatSymbols_br_FR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_br_FR ,
    ZERO_DIGIT : NumberFormatSymbols_br_FR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_br_FR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_br_FR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_br_FR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_br_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale brx.
   */
  type NumberFormatSymbols_brx = string ;
  var NumberFormatSymbols_brx : {
    CURRENCY_PATTERN : NumberFormatSymbols_brx ,
    DECIMAL_PATTERN : NumberFormatSymbols_brx ,
    DECIMAL_SEP : NumberFormatSymbols_brx ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_brx ,
    EXP_SYMBOL : NumberFormatSymbols_brx ,
    GROUP_SEP : NumberFormatSymbols_brx ,
    INFINITY : NumberFormatSymbols_brx ,
    MINUS_SIGN : NumberFormatSymbols_brx ,
    NAN : NumberFormatSymbols_brx ,
    PERCENT : NumberFormatSymbols_brx ,
    PERCENT_PATTERN : NumberFormatSymbols_brx ,
    PERMILL : NumberFormatSymbols_brx ,
    PLUS_SIGN : NumberFormatSymbols_brx ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_brx ,
    ZERO_DIGIT : NumberFormatSymbols_brx ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_brx'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_brx;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_brx' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_brx;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale brx_IN.
   */
  type NumberFormatSymbols_brx_IN = string ;
  var NumberFormatSymbols_brx_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_brx_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_brx_IN ,
    DECIMAL_SEP : NumberFormatSymbols_brx_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_brx_IN ,
    EXP_SYMBOL : NumberFormatSymbols_brx_IN ,
    GROUP_SEP : NumberFormatSymbols_brx_IN ,
    INFINITY : NumberFormatSymbols_brx_IN ,
    MINUS_SIGN : NumberFormatSymbols_brx_IN ,
    NAN : NumberFormatSymbols_brx_IN ,
    PERCENT : NumberFormatSymbols_brx_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_brx_IN ,
    PERMILL : NumberFormatSymbols_brx_IN ,
    PLUS_SIGN : NumberFormatSymbols_brx_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_brx_IN ,
    ZERO_DIGIT : NumberFormatSymbols_brx_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_brx_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_brx_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_brx_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_brx_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bs.
   */
  type NumberFormatSymbols_bs = string ;
  var NumberFormatSymbols_bs : {
    CURRENCY_PATTERN : NumberFormatSymbols_bs ,
    DECIMAL_PATTERN : NumberFormatSymbols_bs ,
    DECIMAL_SEP : NumberFormatSymbols_bs ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bs ,
    EXP_SYMBOL : NumberFormatSymbols_bs ,
    GROUP_SEP : NumberFormatSymbols_bs ,
    INFINITY : NumberFormatSymbols_bs ,
    MINUS_SIGN : NumberFormatSymbols_bs ,
    NAN : NumberFormatSymbols_bs ,
    PERCENT : NumberFormatSymbols_bs ,
    PERCENT_PATTERN : NumberFormatSymbols_bs ,
    PERMILL : NumberFormatSymbols_bs ,
    PLUS_SIGN : NumberFormatSymbols_bs ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bs ,
    ZERO_DIGIT : NumberFormatSymbols_bs ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bs'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bs;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bs' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bs;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bs_Cyrl.
   */
  type NumberFormatSymbols_bs_Cyrl = string ;
  var NumberFormatSymbols_bs_Cyrl : {
    CURRENCY_PATTERN : NumberFormatSymbols_bs_Cyrl ,
    DECIMAL_PATTERN : NumberFormatSymbols_bs_Cyrl ,
    DECIMAL_SEP : NumberFormatSymbols_bs_Cyrl ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bs_Cyrl ,
    EXP_SYMBOL : NumberFormatSymbols_bs_Cyrl ,
    GROUP_SEP : NumberFormatSymbols_bs_Cyrl ,
    INFINITY : NumberFormatSymbols_bs_Cyrl ,
    MINUS_SIGN : NumberFormatSymbols_bs_Cyrl ,
    NAN : NumberFormatSymbols_bs_Cyrl ,
    PERCENT : NumberFormatSymbols_bs_Cyrl ,
    PERCENT_PATTERN : NumberFormatSymbols_bs_Cyrl ,
    PERMILL : NumberFormatSymbols_bs_Cyrl ,
    PLUS_SIGN : NumberFormatSymbols_bs_Cyrl ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bs_Cyrl ,
    ZERO_DIGIT : NumberFormatSymbols_bs_Cyrl ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bs_Cyrl'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bs_Cyrl;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bs_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bs_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bs_Cyrl_BA.
   */
  type NumberFormatSymbols_bs_Cyrl_BA = string ;
  var NumberFormatSymbols_bs_Cyrl_BA : {
    CURRENCY_PATTERN : NumberFormatSymbols_bs_Cyrl_BA ,
    DECIMAL_PATTERN : NumberFormatSymbols_bs_Cyrl_BA ,
    DECIMAL_SEP : NumberFormatSymbols_bs_Cyrl_BA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bs_Cyrl_BA ,
    EXP_SYMBOL : NumberFormatSymbols_bs_Cyrl_BA ,
    GROUP_SEP : NumberFormatSymbols_bs_Cyrl_BA ,
    INFINITY : NumberFormatSymbols_bs_Cyrl_BA ,
    MINUS_SIGN : NumberFormatSymbols_bs_Cyrl_BA ,
    NAN : NumberFormatSymbols_bs_Cyrl_BA ,
    PERCENT : NumberFormatSymbols_bs_Cyrl_BA ,
    PERCENT_PATTERN : NumberFormatSymbols_bs_Cyrl_BA ,
    PERMILL : NumberFormatSymbols_bs_Cyrl_BA ,
    PLUS_SIGN : NumberFormatSymbols_bs_Cyrl_BA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bs_Cyrl_BA ,
    ZERO_DIGIT : NumberFormatSymbols_bs_Cyrl_BA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bs_Cyrl_BA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bs_Cyrl_BA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bs_Cyrl_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bs_Cyrl_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bs_Latn.
   */
  type NumberFormatSymbols_bs_Latn = string ;
  var NumberFormatSymbols_bs_Latn : {
    CURRENCY_PATTERN : NumberFormatSymbols_bs_Latn ,
    DECIMAL_PATTERN : NumberFormatSymbols_bs_Latn ,
    DECIMAL_SEP : NumberFormatSymbols_bs_Latn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bs_Latn ,
    EXP_SYMBOL : NumberFormatSymbols_bs_Latn ,
    GROUP_SEP : NumberFormatSymbols_bs_Latn ,
    INFINITY : NumberFormatSymbols_bs_Latn ,
    MINUS_SIGN : NumberFormatSymbols_bs_Latn ,
    NAN : NumberFormatSymbols_bs_Latn ,
    PERCENT : NumberFormatSymbols_bs_Latn ,
    PERCENT_PATTERN : NumberFormatSymbols_bs_Latn ,
    PERMILL : NumberFormatSymbols_bs_Latn ,
    PLUS_SIGN : NumberFormatSymbols_bs_Latn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bs_Latn ,
    ZERO_DIGIT : NumberFormatSymbols_bs_Latn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bs_Latn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bs_Latn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bs_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bs_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale bs_Latn_BA.
   */
  type NumberFormatSymbols_bs_Latn_BA = string ;
  var NumberFormatSymbols_bs_Latn_BA : {
    CURRENCY_PATTERN : NumberFormatSymbols_bs_Latn_BA ,
    DECIMAL_PATTERN : NumberFormatSymbols_bs_Latn_BA ,
    DECIMAL_SEP : NumberFormatSymbols_bs_Latn_BA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_bs_Latn_BA ,
    EXP_SYMBOL : NumberFormatSymbols_bs_Latn_BA ,
    GROUP_SEP : NumberFormatSymbols_bs_Latn_BA ,
    INFINITY : NumberFormatSymbols_bs_Latn_BA ,
    MINUS_SIGN : NumberFormatSymbols_bs_Latn_BA ,
    NAN : NumberFormatSymbols_bs_Latn_BA ,
    PERCENT : NumberFormatSymbols_bs_Latn_BA ,
    PERCENT_PATTERN : NumberFormatSymbols_bs_Latn_BA ,
    PERMILL : NumberFormatSymbols_bs_Latn_BA ,
    PLUS_SIGN : NumberFormatSymbols_bs_Latn_BA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_bs_Latn_BA ,
    ZERO_DIGIT : NumberFormatSymbols_bs_Latn_BA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_bs_Latn_BA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bs_Latn_BA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_bs_Latn_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_bs_Latn_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ca.
   */
  type NumberFormatSymbols_ca = string ;
  var NumberFormatSymbols_ca : {
    CURRENCY_PATTERN : NumberFormatSymbols_ca ,
    DECIMAL_PATTERN : NumberFormatSymbols_ca ,
    DECIMAL_SEP : NumberFormatSymbols_ca ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ca ,
    EXP_SYMBOL : NumberFormatSymbols_ca ,
    GROUP_SEP : NumberFormatSymbols_ca ,
    INFINITY : NumberFormatSymbols_ca ,
    MINUS_SIGN : NumberFormatSymbols_ca ,
    NAN : NumberFormatSymbols_ca ,
    PERCENT : NumberFormatSymbols_ca ,
    PERCENT_PATTERN : NumberFormatSymbols_ca ,
    PERMILL : NumberFormatSymbols_ca ,
    PLUS_SIGN : NumberFormatSymbols_ca ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ca ,
    ZERO_DIGIT : NumberFormatSymbols_ca ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ca'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ca;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ca' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ca;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ca_AD.
   */
  type NumberFormatSymbols_ca_AD = string ;
  var NumberFormatSymbols_ca_AD : {
    CURRENCY_PATTERN : NumberFormatSymbols_ca_AD ,
    DECIMAL_PATTERN : NumberFormatSymbols_ca_AD ,
    DECIMAL_SEP : NumberFormatSymbols_ca_AD ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ca_AD ,
    EXP_SYMBOL : NumberFormatSymbols_ca_AD ,
    GROUP_SEP : NumberFormatSymbols_ca_AD ,
    INFINITY : NumberFormatSymbols_ca_AD ,
    MINUS_SIGN : NumberFormatSymbols_ca_AD ,
    NAN : NumberFormatSymbols_ca_AD ,
    PERCENT : NumberFormatSymbols_ca_AD ,
    PERCENT_PATTERN : NumberFormatSymbols_ca_AD ,
    PERMILL : NumberFormatSymbols_ca_AD ,
    PLUS_SIGN : NumberFormatSymbols_ca_AD ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ca_AD ,
    ZERO_DIGIT : NumberFormatSymbols_ca_AD ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ca_AD'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ca_AD;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ca_AD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ca_AD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ca_ES.
   */
  type NumberFormatSymbols_ca_ES = string ;
  var NumberFormatSymbols_ca_ES : {
    CURRENCY_PATTERN : NumberFormatSymbols_ca_ES ,
    DECIMAL_PATTERN : NumberFormatSymbols_ca_ES ,
    DECIMAL_SEP : NumberFormatSymbols_ca_ES ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ca_ES ,
    EXP_SYMBOL : NumberFormatSymbols_ca_ES ,
    GROUP_SEP : NumberFormatSymbols_ca_ES ,
    INFINITY : NumberFormatSymbols_ca_ES ,
    MINUS_SIGN : NumberFormatSymbols_ca_ES ,
    NAN : NumberFormatSymbols_ca_ES ,
    PERCENT : NumberFormatSymbols_ca_ES ,
    PERCENT_PATTERN : NumberFormatSymbols_ca_ES ,
    PERMILL : NumberFormatSymbols_ca_ES ,
    PLUS_SIGN : NumberFormatSymbols_ca_ES ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ca_ES ,
    ZERO_DIGIT : NumberFormatSymbols_ca_ES ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ca_ES'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ca_ES;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ca_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ca_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ca_ES_VALENCIA.
   */
  type NumberFormatSymbols_ca_ES_VALENCIA = string ;
  var NumberFormatSymbols_ca_ES_VALENCIA : {
    CURRENCY_PATTERN : NumberFormatSymbols_ca_ES_VALENCIA ,
    DECIMAL_PATTERN : NumberFormatSymbols_ca_ES_VALENCIA ,
    DECIMAL_SEP : NumberFormatSymbols_ca_ES_VALENCIA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ca_ES_VALENCIA ,
    EXP_SYMBOL : NumberFormatSymbols_ca_ES_VALENCIA ,
    GROUP_SEP : NumberFormatSymbols_ca_ES_VALENCIA ,
    INFINITY : NumberFormatSymbols_ca_ES_VALENCIA ,
    MINUS_SIGN : NumberFormatSymbols_ca_ES_VALENCIA ,
    NAN : NumberFormatSymbols_ca_ES_VALENCIA ,
    PERCENT : NumberFormatSymbols_ca_ES_VALENCIA ,
    PERCENT_PATTERN : NumberFormatSymbols_ca_ES_VALENCIA ,
    PERMILL : NumberFormatSymbols_ca_ES_VALENCIA ,
    PLUS_SIGN : NumberFormatSymbols_ca_ES_VALENCIA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ca_ES_VALENCIA ,
    ZERO_DIGIT : NumberFormatSymbols_ca_ES_VALENCIA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ca_ES_VALENCIA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ca_ES_VALENCIA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ca_ES_VALENCIA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ca_ES_VALENCIA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ca_FR.
   */
  type NumberFormatSymbols_ca_FR = string ;
  var NumberFormatSymbols_ca_FR : {
    CURRENCY_PATTERN : NumberFormatSymbols_ca_FR ,
    DECIMAL_PATTERN : NumberFormatSymbols_ca_FR ,
    DECIMAL_SEP : NumberFormatSymbols_ca_FR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ca_FR ,
    EXP_SYMBOL : NumberFormatSymbols_ca_FR ,
    GROUP_SEP : NumberFormatSymbols_ca_FR ,
    INFINITY : NumberFormatSymbols_ca_FR ,
    MINUS_SIGN : NumberFormatSymbols_ca_FR ,
    NAN : NumberFormatSymbols_ca_FR ,
    PERCENT : NumberFormatSymbols_ca_FR ,
    PERCENT_PATTERN : NumberFormatSymbols_ca_FR ,
    PERMILL : NumberFormatSymbols_ca_FR ,
    PLUS_SIGN : NumberFormatSymbols_ca_FR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ca_FR ,
    ZERO_DIGIT : NumberFormatSymbols_ca_FR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ca_FR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ca_FR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ca_FR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ca_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ca_IT.
   */
  type NumberFormatSymbols_ca_IT = string ;
  var NumberFormatSymbols_ca_IT : {
    CURRENCY_PATTERN : NumberFormatSymbols_ca_IT ,
    DECIMAL_PATTERN : NumberFormatSymbols_ca_IT ,
    DECIMAL_SEP : NumberFormatSymbols_ca_IT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ca_IT ,
    EXP_SYMBOL : NumberFormatSymbols_ca_IT ,
    GROUP_SEP : NumberFormatSymbols_ca_IT ,
    INFINITY : NumberFormatSymbols_ca_IT ,
    MINUS_SIGN : NumberFormatSymbols_ca_IT ,
    NAN : NumberFormatSymbols_ca_IT ,
    PERCENT : NumberFormatSymbols_ca_IT ,
    PERCENT_PATTERN : NumberFormatSymbols_ca_IT ,
    PERMILL : NumberFormatSymbols_ca_IT ,
    PLUS_SIGN : NumberFormatSymbols_ca_IT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ca_IT ,
    ZERO_DIGIT : NumberFormatSymbols_ca_IT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ca_IT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ca_IT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ca_IT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ca_IT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ce.
   */
  type NumberFormatSymbols_ce = string ;
  var NumberFormatSymbols_ce : {
    CURRENCY_PATTERN : NumberFormatSymbols_ce ,
    DECIMAL_PATTERN : NumberFormatSymbols_ce ,
    DECIMAL_SEP : NumberFormatSymbols_ce ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ce ,
    EXP_SYMBOL : NumberFormatSymbols_ce ,
    GROUP_SEP : NumberFormatSymbols_ce ,
    INFINITY : NumberFormatSymbols_ce ,
    MINUS_SIGN : NumberFormatSymbols_ce ,
    NAN : NumberFormatSymbols_ce ,
    PERCENT : NumberFormatSymbols_ce ,
    PERCENT_PATTERN : NumberFormatSymbols_ce ,
    PERMILL : NumberFormatSymbols_ce ,
    PLUS_SIGN : NumberFormatSymbols_ce ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ce ,
    ZERO_DIGIT : NumberFormatSymbols_ce ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ce'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ce;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ce' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ce;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ce_RU.
   */
  type NumberFormatSymbols_ce_RU = string ;
  var NumberFormatSymbols_ce_RU : {
    CURRENCY_PATTERN : NumberFormatSymbols_ce_RU ,
    DECIMAL_PATTERN : NumberFormatSymbols_ce_RU ,
    DECIMAL_SEP : NumberFormatSymbols_ce_RU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ce_RU ,
    EXP_SYMBOL : NumberFormatSymbols_ce_RU ,
    GROUP_SEP : NumberFormatSymbols_ce_RU ,
    INFINITY : NumberFormatSymbols_ce_RU ,
    MINUS_SIGN : NumberFormatSymbols_ce_RU ,
    NAN : NumberFormatSymbols_ce_RU ,
    PERCENT : NumberFormatSymbols_ce_RU ,
    PERCENT_PATTERN : NumberFormatSymbols_ce_RU ,
    PERMILL : NumberFormatSymbols_ce_RU ,
    PLUS_SIGN : NumberFormatSymbols_ce_RU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ce_RU ,
    ZERO_DIGIT : NumberFormatSymbols_ce_RU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ce_RU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ce_RU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ce_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ce_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale cgg.
   */
  type NumberFormatSymbols_cgg = string ;
  var NumberFormatSymbols_cgg : {
    CURRENCY_PATTERN : NumberFormatSymbols_cgg ,
    DECIMAL_PATTERN : NumberFormatSymbols_cgg ,
    DECIMAL_SEP : NumberFormatSymbols_cgg ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_cgg ,
    EXP_SYMBOL : NumberFormatSymbols_cgg ,
    GROUP_SEP : NumberFormatSymbols_cgg ,
    INFINITY : NumberFormatSymbols_cgg ,
    MINUS_SIGN : NumberFormatSymbols_cgg ,
    NAN : NumberFormatSymbols_cgg ,
    PERCENT : NumberFormatSymbols_cgg ,
    PERCENT_PATTERN : NumberFormatSymbols_cgg ,
    PERMILL : NumberFormatSymbols_cgg ,
    PLUS_SIGN : NumberFormatSymbols_cgg ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_cgg ,
    ZERO_DIGIT : NumberFormatSymbols_cgg ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_cgg'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cgg;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_cgg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cgg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale cgg_UG.
   */
  type NumberFormatSymbols_cgg_UG = string ;
  var NumberFormatSymbols_cgg_UG : {
    CURRENCY_PATTERN : NumberFormatSymbols_cgg_UG ,
    DECIMAL_PATTERN : NumberFormatSymbols_cgg_UG ,
    DECIMAL_SEP : NumberFormatSymbols_cgg_UG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_cgg_UG ,
    EXP_SYMBOL : NumberFormatSymbols_cgg_UG ,
    GROUP_SEP : NumberFormatSymbols_cgg_UG ,
    INFINITY : NumberFormatSymbols_cgg_UG ,
    MINUS_SIGN : NumberFormatSymbols_cgg_UG ,
    NAN : NumberFormatSymbols_cgg_UG ,
    PERCENT : NumberFormatSymbols_cgg_UG ,
    PERCENT_PATTERN : NumberFormatSymbols_cgg_UG ,
    PERMILL : NumberFormatSymbols_cgg_UG ,
    PLUS_SIGN : NumberFormatSymbols_cgg_UG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_cgg_UG ,
    ZERO_DIGIT : NumberFormatSymbols_cgg_UG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_cgg_UG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cgg_UG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_cgg_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cgg_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale chr.
   */
  type NumberFormatSymbols_chr = string ;
  var NumberFormatSymbols_chr : {
    CURRENCY_PATTERN : NumberFormatSymbols_chr ,
    DECIMAL_PATTERN : NumberFormatSymbols_chr ,
    DECIMAL_SEP : NumberFormatSymbols_chr ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_chr ,
    EXP_SYMBOL : NumberFormatSymbols_chr ,
    GROUP_SEP : NumberFormatSymbols_chr ,
    INFINITY : NumberFormatSymbols_chr ,
    MINUS_SIGN : NumberFormatSymbols_chr ,
    NAN : NumberFormatSymbols_chr ,
    PERCENT : NumberFormatSymbols_chr ,
    PERCENT_PATTERN : NumberFormatSymbols_chr ,
    PERMILL : NumberFormatSymbols_chr ,
    PLUS_SIGN : NumberFormatSymbols_chr ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_chr ,
    ZERO_DIGIT : NumberFormatSymbols_chr ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_chr'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_chr;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_chr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_chr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale chr_US.
   */
  type NumberFormatSymbols_chr_US = string ;
  var NumberFormatSymbols_chr_US : {
    CURRENCY_PATTERN : NumberFormatSymbols_chr_US ,
    DECIMAL_PATTERN : NumberFormatSymbols_chr_US ,
    DECIMAL_SEP : NumberFormatSymbols_chr_US ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_chr_US ,
    EXP_SYMBOL : NumberFormatSymbols_chr_US ,
    GROUP_SEP : NumberFormatSymbols_chr_US ,
    INFINITY : NumberFormatSymbols_chr_US ,
    MINUS_SIGN : NumberFormatSymbols_chr_US ,
    NAN : NumberFormatSymbols_chr_US ,
    PERCENT : NumberFormatSymbols_chr_US ,
    PERCENT_PATTERN : NumberFormatSymbols_chr_US ,
    PERMILL : NumberFormatSymbols_chr_US ,
    PLUS_SIGN : NumberFormatSymbols_chr_US ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_chr_US ,
    ZERO_DIGIT : NumberFormatSymbols_chr_US ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_chr_US'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_chr_US;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_chr_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_chr_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ckb.
   */
  type NumberFormatSymbols_ckb = string ;
  var NumberFormatSymbols_ckb : {
    CURRENCY_PATTERN : NumberFormatSymbols_ckb ,
    DECIMAL_PATTERN : NumberFormatSymbols_ckb ,
    DECIMAL_SEP : NumberFormatSymbols_ckb ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ckb ,
    EXP_SYMBOL : NumberFormatSymbols_ckb ,
    GROUP_SEP : NumberFormatSymbols_ckb ,
    INFINITY : NumberFormatSymbols_ckb ,
    MINUS_SIGN : NumberFormatSymbols_ckb ,
    NAN : NumberFormatSymbols_ckb ,
    PERCENT : NumberFormatSymbols_ckb ,
    PERCENT_PATTERN : NumberFormatSymbols_ckb ,
    PERMILL : NumberFormatSymbols_ckb ,
    PLUS_SIGN : NumberFormatSymbols_ckb ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ckb ,
    ZERO_DIGIT : NumberFormatSymbols_ckb ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ckb'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ckb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ckb_Arab.
   */
  type NumberFormatSymbols_ckb_Arab = string ;
  var NumberFormatSymbols_ckb_Arab : {
    CURRENCY_PATTERN : NumberFormatSymbols_ckb_Arab ,
    DECIMAL_PATTERN : NumberFormatSymbols_ckb_Arab ,
    DECIMAL_SEP : NumberFormatSymbols_ckb_Arab ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ckb_Arab ,
    EXP_SYMBOL : NumberFormatSymbols_ckb_Arab ,
    GROUP_SEP : NumberFormatSymbols_ckb_Arab ,
    INFINITY : NumberFormatSymbols_ckb_Arab ,
    MINUS_SIGN : NumberFormatSymbols_ckb_Arab ,
    NAN : NumberFormatSymbols_ckb_Arab ,
    PERCENT : NumberFormatSymbols_ckb_Arab ,
    PERCENT_PATTERN : NumberFormatSymbols_ckb_Arab ,
    PERMILL : NumberFormatSymbols_ckb_Arab ,
    PLUS_SIGN : NumberFormatSymbols_ckb_Arab ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ckb_Arab ,
    ZERO_DIGIT : NumberFormatSymbols_ckb_Arab ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ckb_Arab'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_Arab;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ckb_Arab' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_Arab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ckb_Arab_IQ.
   */
  type NumberFormatSymbols_ckb_Arab_IQ = string ;
  var NumberFormatSymbols_ckb_Arab_IQ : {
    CURRENCY_PATTERN : NumberFormatSymbols_ckb_Arab_IQ ,
    DECIMAL_PATTERN : NumberFormatSymbols_ckb_Arab_IQ ,
    DECIMAL_SEP : NumberFormatSymbols_ckb_Arab_IQ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ckb_Arab_IQ ,
    EXP_SYMBOL : NumberFormatSymbols_ckb_Arab_IQ ,
    GROUP_SEP : NumberFormatSymbols_ckb_Arab_IQ ,
    INFINITY : NumberFormatSymbols_ckb_Arab_IQ ,
    MINUS_SIGN : NumberFormatSymbols_ckb_Arab_IQ ,
    NAN : NumberFormatSymbols_ckb_Arab_IQ ,
    PERCENT : NumberFormatSymbols_ckb_Arab_IQ ,
    PERCENT_PATTERN : NumberFormatSymbols_ckb_Arab_IQ ,
    PERMILL : NumberFormatSymbols_ckb_Arab_IQ ,
    PLUS_SIGN : NumberFormatSymbols_ckb_Arab_IQ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ckb_Arab_IQ ,
    ZERO_DIGIT : NumberFormatSymbols_ckb_Arab_IQ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ckb_Arab_IQ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_Arab_IQ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ckb_Arab_IQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_Arab_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ckb_Arab_IR.
   */
  type NumberFormatSymbols_ckb_Arab_IR = string ;
  var NumberFormatSymbols_ckb_Arab_IR : {
    CURRENCY_PATTERN : NumberFormatSymbols_ckb_Arab_IR ,
    DECIMAL_PATTERN : NumberFormatSymbols_ckb_Arab_IR ,
    DECIMAL_SEP : NumberFormatSymbols_ckb_Arab_IR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ckb_Arab_IR ,
    EXP_SYMBOL : NumberFormatSymbols_ckb_Arab_IR ,
    GROUP_SEP : NumberFormatSymbols_ckb_Arab_IR ,
    INFINITY : NumberFormatSymbols_ckb_Arab_IR ,
    MINUS_SIGN : NumberFormatSymbols_ckb_Arab_IR ,
    NAN : NumberFormatSymbols_ckb_Arab_IR ,
    PERCENT : NumberFormatSymbols_ckb_Arab_IR ,
    PERCENT_PATTERN : NumberFormatSymbols_ckb_Arab_IR ,
    PERMILL : NumberFormatSymbols_ckb_Arab_IR ,
    PLUS_SIGN : NumberFormatSymbols_ckb_Arab_IR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ckb_Arab_IR ,
    ZERO_DIGIT : NumberFormatSymbols_ckb_Arab_IR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ckb_Arab_IR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_Arab_IR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ckb_Arab_IR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_Arab_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ckb_IQ.
   */
  type NumberFormatSymbols_ckb_IQ = string ;
  var NumberFormatSymbols_ckb_IQ : {
    CURRENCY_PATTERN : NumberFormatSymbols_ckb_IQ ,
    DECIMAL_PATTERN : NumberFormatSymbols_ckb_IQ ,
    DECIMAL_SEP : NumberFormatSymbols_ckb_IQ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ckb_IQ ,
    EXP_SYMBOL : NumberFormatSymbols_ckb_IQ ,
    GROUP_SEP : NumberFormatSymbols_ckb_IQ ,
    INFINITY : NumberFormatSymbols_ckb_IQ ,
    MINUS_SIGN : NumberFormatSymbols_ckb_IQ ,
    NAN : NumberFormatSymbols_ckb_IQ ,
    PERCENT : NumberFormatSymbols_ckb_IQ ,
    PERCENT_PATTERN : NumberFormatSymbols_ckb_IQ ,
    PERMILL : NumberFormatSymbols_ckb_IQ ,
    PLUS_SIGN : NumberFormatSymbols_ckb_IQ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ckb_IQ ,
    ZERO_DIGIT : NumberFormatSymbols_ckb_IQ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ckb_IQ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_IQ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ckb_IQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ckb_IR.
   */
  type NumberFormatSymbols_ckb_IR = string ;
  var NumberFormatSymbols_ckb_IR : {
    CURRENCY_PATTERN : NumberFormatSymbols_ckb_IR ,
    DECIMAL_PATTERN : NumberFormatSymbols_ckb_IR ,
    DECIMAL_SEP : NumberFormatSymbols_ckb_IR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ckb_IR ,
    EXP_SYMBOL : NumberFormatSymbols_ckb_IR ,
    GROUP_SEP : NumberFormatSymbols_ckb_IR ,
    INFINITY : NumberFormatSymbols_ckb_IR ,
    MINUS_SIGN : NumberFormatSymbols_ckb_IR ,
    NAN : NumberFormatSymbols_ckb_IR ,
    PERCENT : NumberFormatSymbols_ckb_IR ,
    PERCENT_PATTERN : NumberFormatSymbols_ckb_IR ,
    PERMILL : NumberFormatSymbols_ckb_IR ,
    PLUS_SIGN : NumberFormatSymbols_ckb_IR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ckb_IR ,
    ZERO_DIGIT : NumberFormatSymbols_ckb_IR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ckb_IR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_IR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ckb_IR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ckb_Latn.
   */
  type NumberFormatSymbols_ckb_Latn = string ;
  var NumberFormatSymbols_ckb_Latn : {
    CURRENCY_PATTERN : NumberFormatSymbols_ckb_Latn ,
    DECIMAL_PATTERN : NumberFormatSymbols_ckb_Latn ,
    DECIMAL_SEP : NumberFormatSymbols_ckb_Latn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ckb_Latn ,
    EXP_SYMBOL : NumberFormatSymbols_ckb_Latn ,
    GROUP_SEP : NumberFormatSymbols_ckb_Latn ,
    INFINITY : NumberFormatSymbols_ckb_Latn ,
    MINUS_SIGN : NumberFormatSymbols_ckb_Latn ,
    NAN : NumberFormatSymbols_ckb_Latn ,
    PERCENT : NumberFormatSymbols_ckb_Latn ,
    PERCENT_PATTERN : NumberFormatSymbols_ckb_Latn ,
    PERMILL : NumberFormatSymbols_ckb_Latn ,
    PLUS_SIGN : NumberFormatSymbols_ckb_Latn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ckb_Latn ,
    ZERO_DIGIT : NumberFormatSymbols_ckb_Latn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ckb_Latn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_Latn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ckb_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ckb_Latn_IQ.
   */
  type NumberFormatSymbols_ckb_Latn_IQ = string ;
  var NumberFormatSymbols_ckb_Latn_IQ : {
    CURRENCY_PATTERN : NumberFormatSymbols_ckb_Latn_IQ ,
    DECIMAL_PATTERN : NumberFormatSymbols_ckb_Latn_IQ ,
    DECIMAL_SEP : NumberFormatSymbols_ckb_Latn_IQ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ckb_Latn_IQ ,
    EXP_SYMBOL : NumberFormatSymbols_ckb_Latn_IQ ,
    GROUP_SEP : NumberFormatSymbols_ckb_Latn_IQ ,
    INFINITY : NumberFormatSymbols_ckb_Latn_IQ ,
    MINUS_SIGN : NumberFormatSymbols_ckb_Latn_IQ ,
    NAN : NumberFormatSymbols_ckb_Latn_IQ ,
    PERCENT : NumberFormatSymbols_ckb_Latn_IQ ,
    PERCENT_PATTERN : NumberFormatSymbols_ckb_Latn_IQ ,
    PERMILL : NumberFormatSymbols_ckb_Latn_IQ ,
    PLUS_SIGN : NumberFormatSymbols_ckb_Latn_IQ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ckb_Latn_IQ ,
    ZERO_DIGIT : NumberFormatSymbols_ckb_Latn_IQ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ckb_Latn_IQ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_Latn_IQ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ckb_Latn_IQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ckb_Latn_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale cs.
   */
  type NumberFormatSymbols_cs = string ;
  var NumberFormatSymbols_cs : {
    CURRENCY_PATTERN : NumberFormatSymbols_cs ,
    DECIMAL_PATTERN : NumberFormatSymbols_cs ,
    DECIMAL_SEP : NumberFormatSymbols_cs ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_cs ,
    EXP_SYMBOL : NumberFormatSymbols_cs ,
    GROUP_SEP : NumberFormatSymbols_cs ,
    INFINITY : NumberFormatSymbols_cs ,
    MINUS_SIGN : NumberFormatSymbols_cs ,
    NAN : NumberFormatSymbols_cs ,
    PERCENT : NumberFormatSymbols_cs ,
    PERCENT_PATTERN : NumberFormatSymbols_cs ,
    PERMILL : NumberFormatSymbols_cs ,
    PLUS_SIGN : NumberFormatSymbols_cs ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_cs ,
    ZERO_DIGIT : NumberFormatSymbols_cs ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_cs'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cs;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_cs' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cs;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale cs_CZ.
   */
  type NumberFormatSymbols_cs_CZ = string ;
  var NumberFormatSymbols_cs_CZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_cs_CZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_cs_CZ ,
    DECIMAL_SEP : NumberFormatSymbols_cs_CZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_cs_CZ ,
    EXP_SYMBOL : NumberFormatSymbols_cs_CZ ,
    GROUP_SEP : NumberFormatSymbols_cs_CZ ,
    INFINITY : NumberFormatSymbols_cs_CZ ,
    MINUS_SIGN : NumberFormatSymbols_cs_CZ ,
    NAN : NumberFormatSymbols_cs_CZ ,
    PERCENT : NumberFormatSymbols_cs_CZ ,
    PERCENT_PATTERN : NumberFormatSymbols_cs_CZ ,
    PERMILL : NumberFormatSymbols_cs_CZ ,
    PLUS_SIGN : NumberFormatSymbols_cs_CZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_cs_CZ ,
    ZERO_DIGIT : NumberFormatSymbols_cs_CZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_cs_CZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cs_CZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_cs_CZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cs_CZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale cu.
   */
  type NumberFormatSymbols_cu = string ;
  var NumberFormatSymbols_cu : {
    CURRENCY_PATTERN : NumberFormatSymbols_cu ,
    DECIMAL_PATTERN : NumberFormatSymbols_cu ,
    DECIMAL_SEP : NumberFormatSymbols_cu ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_cu ,
    EXP_SYMBOL : NumberFormatSymbols_cu ,
    GROUP_SEP : NumberFormatSymbols_cu ,
    INFINITY : NumberFormatSymbols_cu ,
    MINUS_SIGN : NumberFormatSymbols_cu ,
    NAN : NumberFormatSymbols_cu ,
    PERCENT : NumberFormatSymbols_cu ,
    PERCENT_PATTERN : NumberFormatSymbols_cu ,
    PERMILL : NumberFormatSymbols_cu ,
    PLUS_SIGN : NumberFormatSymbols_cu ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_cu ,
    ZERO_DIGIT : NumberFormatSymbols_cu ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_cu'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cu;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_cu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale cu_RU.
   */
  type NumberFormatSymbols_cu_RU = string ;
  var NumberFormatSymbols_cu_RU : {
    CURRENCY_PATTERN : NumberFormatSymbols_cu_RU ,
    DECIMAL_PATTERN : NumberFormatSymbols_cu_RU ,
    DECIMAL_SEP : NumberFormatSymbols_cu_RU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_cu_RU ,
    EXP_SYMBOL : NumberFormatSymbols_cu_RU ,
    GROUP_SEP : NumberFormatSymbols_cu_RU ,
    INFINITY : NumberFormatSymbols_cu_RU ,
    MINUS_SIGN : NumberFormatSymbols_cu_RU ,
    NAN : NumberFormatSymbols_cu_RU ,
    PERCENT : NumberFormatSymbols_cu_RU ,
    PERCENT_PATTERN : NumberFormatSymbols_cu_RU ,
    PERMILL : NumberFormatSymbols_cu_RU ,
    PLUS_SIGN : NumberFormatSymbols_cu_RU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_cu_RU ,
    ZERO_DIGIT : NumberFormatSymbols_cu_RU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_cu_RU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cu_RU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_cu_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cu_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale cy.
   */
  type NumberFormatSymbols_cy = string ;
  var NumberFormatSymbols_cy : {
    CURRENCY_PATTERN : NumberFormatSymbols_cy ,
    DECIMAL_PATTERN : NumberFormatSymbols_cy ,
    DECIMAL_SEP : NumberFormatSymbols_cy ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_cy ,
    EXP_SYMBOL : NumberFormatSymbols_cy ,
    GROUP_SEP : NumberFormatSymbols_cy ,
    INFINITY : NumberFormatSymbols_cy ,
    MINUS_SIGN : NumberFormatSymbols_cy ,
    NAN : NumberFormatSymbols_cy ,
    PERCENT : NumberFormatSymbols_cy ,
    PERCENT_PATTERN : NumberFormatSymbols_cy ,
    PERMILL : NumberFormatSymbols_cy ,
    PLUS_SIGN : NumberFormatSymbols_cy ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_cy ,
    ZERO_DIGIT : NumberFormatSymbols_cy ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_cy'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cy;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_cy' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale cy_GB.
   */
  type NumberFormatSymbols_cy_GB = string ;
  var NumberFormatSymbols_cy_GB : {
    CURRENCY_PATTERN : NumberFormatSymbols_cy_GB ,
    DECIMAL_PATTERN : NumberFormatSymbols_cy_GB ,
    DECIMAL_SEP : NumberFormatSymbols_cy_GB ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_cy_GB ,
    EXP_SYMBOL : NumberFormatSymbols_cy_GB ,
    GROUP_SEP : NumberFormatSymbols_cy_GB ,
    INFINITY : NumberFormatSymbols_cy_GB ,
    MINUS_SIGN : NumberFormatSymbols_cy_GB ,
    NAN : NumberFormatSymbols_cy_GB ,
    PERCENT : NumberFormatSymbols_cy_GB ,
    PERCENT_PATTERN : NumberFormatSymbols_cy_GB ,
    PERMILL : NumberFormatSymbols_cy_GB ,
    PLUS_SIGN : NumberFormatSymbols_cy_GB ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_cy_GB ,
    ZERO_DIGIT : NumberFormatSymbols_cy_GB ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_cy_GB'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cy_GB;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_cy_GB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_cy_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale da.
   */
  type NumberFormatSymbols_da = string ;
  var NumberFormatSymbols_da : {
    CURRENCY_PATTERN : NumberFormatSymbols_da ,
    DECIMAL_PATTERN : NumberFormatSymbols_da ,
    DECIMAL_SEP : NumberFormatSymbols_da ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_da ,
    EXP_SYMBOL : NumberFormatSymbols_da ,
    GROUP_SEP : NumberFormatSymbols_da ,
    INFINITY : NumberFormatSymbols_da ,
    MINUS_SIGN : NumberFormatSymbols_da ,
    NAN : NumberFormatSymbols_da ,
    PERCENT : NumberFormatSymbols_da ,
    PERCENT_PATTERN : NumberFormatSymbols_da ,
    PERMILL : NumberFormatSymbols_da ,
    PLUS_SIGN : NumberFormatSymbols_da ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_da ,
    ZERO_DIGIT : NumberFormatSymbols_da ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_da'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_da;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_da' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_da;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale da_DK.
   */
  type NumberFormatSymbols_da_DK = string ;
  var NumberFormatSymbols_da_DK : {
    CURRENCY_PATTERN : NumberFormatSymbols_da_DK ,
    DECIMAL_PATTERN : NumberFormatSymbols_da_DK ,
    DECIMAL_SEP : NumberFormatSymbols_da_DK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_da_DK ,
    EXP_SYMBOL : NumberFormatSymbols_da_DK ,
    GROUP_SEP : NumberFormatSymbols_da_DK ,
    INFINITY : NumberFormatSymbols_da_DK ,
    MINUS_SIGN : NumberFormatSymbols_da_DK ,
    NAN : NumberFormatSymbols_da_DK ,
    PERCENT : NumberFormatSymbols_da_DK ,
    PERCENT_PATTERN : NumberFormatSymbols_da_DK ,
    PERMILL : NumberFormatSymbols_da_DK ,
    PLUS_SIGN : NumberFormatSymbols_da_DK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_da_DK ,
    ZERO_DIGIT : NumberFormatSymbols_da_DK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_da_DK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_da_DK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_da_DK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_da_DK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale da_GL.
   */
  type NumberFormatSymbols_da_GL = string ;
  var NumberFormatSymbols_da_GL : {
    CURRENCY_PATTERN : NumberFormatSymbols_da_GL ,
    DECIMAL_PATTERN : NumberFormatSymbols_da_GL ,
    DECIMAL_SEP : NumberFormatSymbols_da_GL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_da_GL ,
    EXP_SYMBOL : NumberFormatSymbols_da_GL ,
    GROUP_SEP : NumberFormatSymbols_da_GL ,
    INFINITY : NumberFormatSymbols_da_GL ,
    MINUS_SIGN : NumberFormatSymbols_da_GL ,
    NAN : NumberFormatSymbols_da_GL ,
    PERCENT : NumberFormatSymbols_da_GL ,
    PERCENT_PATTERN : NumberFormatSymbols_da_GL ,
    PERMILL : NumberFormatSymbols_da_GL ,
    PLUS_SIGN : NumberFormatSymbols_da_GL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_da_GL ,
    ZERO_DIGIT : NumberFormatSymbols_da_GL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_da_GL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_da_GL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_da_GL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_da_GL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale dav.
   */
  type NumberFormatSymbols_dav = string ;
  var NumberFormatSymbols_dav : {
    CURRENCY_PATTERN : NumberFormatSymbols_dav ,
    DECIMAL_PATTERN : NumberFormatSymbols_dav ,
    DECIMAL_SEP : NumberFormatSymbols_dav ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_dav ,
    EXP_SYMBOL : NumberFormatSymbols_dav ,
    GROUP_SEP : NumberFormatSymbols_dav ,
    INFINITY : NumberFormatSymbols_dav ,
    MINUS_SIGN : NumberFormatSymbols_dav ,
    NAN : NumberFormatSymbols_dav ,
    PERCENT : NumberFormatSymbols_dav ,
    PERCENT_PATTERN : NumberFormatSymbols_dav ,
    PERMILL : NumberFormatSymbols_dav ,
    PLUS_SIGN : NumberFormatSymbols_dav ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_dav ,
    ZERO_DIGIT : NumberFormatSymbols_dav ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_dav'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dav;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_dav' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dav;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale dav_KE.
   */
  type NumberFormatSymbols_dav_KE = string ;
  var NumberFormatSymbols_dav_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_dav_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_dav_KE ,
    DECIMAL_SEP : NumberFormatSymbols_dav_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_dav_KE ,
    EXP_SYMBOL : NumberFormatSymbols_dav_KE ,
    GROUP_SEP : NumberFormatSymbols_dav_KE ,
    INFINITY : NumberFormatSymbols_dav_KE ,
    MINUS_SIGN : NumberFormatSymbols_dav_KE ,
    NAN : NumberFormatSymbols_dav_KE ,
    PERCENT : NumberFormatSymbols_dav_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_dav_KE ,
    PERMILL : NumberFormatSymbols_dav_KE ,
    PLUS_SIGN : NumberFormatSymbols_dav_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_dav_KE ,
    ZERO_DIGIT : NumberFormatSymbols_dav_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_dav_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dav_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_dav_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dav_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale de.
   */
  type NumberFormatSymbols_de = string ;
  var NumberFormatSymbols_de : {
    CURRENCY_PATTERN : NumberFormatSymbols_de ,
    DECIMAL_PATTERN : NumberFormatSymbols_de ,
    DECIMAL_SEP : NumberFormatSymbols_de ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_de ,
    EXP_SYMBOL : NumberFormatSymbols_de ,
    GROUP_SEP : NumberFormatSymbols_de ,
    INFINITY : NumberFormatSymbols_de ,
    MINUS_SIGN : NumberFormatSymbols_de ,
    NAN : NumberFormatSymbols_de ,
    PERCENT : NumberFormatSymbols_de ,
    PERCENT_PATTERN : NumberFormatSymbols_de ,
    PERMILL : NumberFormatSymbols_de ,
    PLUS_SIGN : NumberFormatSymbols_de ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_de ,
    ZERO_DIGIT : NumberFormatSymbols_de ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_de'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_de' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale de_AT.
   */
  type NumberFormatSymbols_de_AT = string ;
  var NumberFormatSymbols_de_AT : {
    CURRENCY_PATTERN : NumberFormatSymbols_de_AT ,
    DECIMAL_PATTERN : NumberFormatSymbols_de_AT ,
    DECIMAL_SEP : NumberFormatSymbols_de_AT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_de_AT ,
    EXP_SYMBOL : NumberFormatSymbols_de_AT ,
    GROUP_SEP : NumberFormatSymbols_de_AT ,
    INFINITY : NumberFormatSymbols_de_AT ,
    MINUS_SIGN : NumberFormatSymbols_de_AT ,
    NAN : NumberFormatSymbols_de_AT ,
    PERCENT : NumberFormatSymbols_de_AT ,
    PERCENT_PATTERN : NumberFormatSymbols_de_AT ,
    PERMILL : NumberFormatSymbols_de_AT ,
    PLUS_SIGN : NumberFormatSymbols_de_AT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_de_AT ,
    ZERO_DIGIT : NumberFormatSymbols_de_AT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_de_AT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de_AT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_de_AT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de_AT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale de_BE.
   */
  type NumberFormatSymbols_de_BE = string ;
  var NumberFormatSymbols_de_BE : {
    CURRENCY_PATTERN : NumberFormatSymbols_de_BE ,
    DECIMAL_PATTERN : NumberFormatSymbols_de_BE ,
    DECIMAL_SEP : NumberFormatSymbols_de_BE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_de_BE ,
    EXP_SYMBOL : NumberFormatSymbols_de_BE ,
    GROUP_SEP : NumberFormatSymbols_de_BE ,
    INFINITY : NumberFormatSymbols_de_BE ,
    MINUS_SIGN : NumberFormatSymbols_de_BE ,
    NAN : NumberFormatSymbols_de_BE ,
    PERCENT : NumberFormatSymbols_de_BE ,
    PERCENT_PATTERN : NumberFormatSymbols_de_BE ,
    PERMILL : NumberFormatSymbols_de_BE ,
    PLUS_SIGN : NumberFormatSymbols_de_BE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_de_BE ,
    ZERO_DIGIT : NumberFormatSymbols_de_BE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_de_BE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de_BE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_de_BE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale de_CH.
   */
  type NumberFormatSymbols_de_CH = string ;
  var NumberFormatSymbols_de_CH : {
    CURRENCY_PATTERN : NumberFormatSymbols_de_CH ,
    DECIMAL_PATTERN : NumberFormatSymbols_de_CH ,
    DECIMAL_SEP : NumberFormatSymbols_de_CH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_de_CH ,
    EXP_SYMBOL : NumberFormatSymbols_de_CH ,
    GROUP_SEP : NumberFormatSymbols_de_CH ,
    INFINITY : NumberFormatSymbols_de_CH ,
    MINUS_SIGN : NumberFormatSymbols_de_CH ,
    NAN : NumberFormatSymbols_de_CH ,
    PERCENT : NumberFormatSymbols_de_CH ,
    PERCENT_PATTERN : NumberFormatSymbols_de_CH ,
    PERMILL : NumberFormatSymbols_de_CH ,
    PLUS_SIGN : NumberFormatSymbols_de_CH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_de_CH ,
    ZERO_DIGIT : NumberFormatSymbols_de_CH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_de_CH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de_CH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_de_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale de_DE.
   */
  type NumberFormatSymbols_de_DE = string ;
  var NumberFormatSymbols_de_DE : {
    CURRENCY_PATTERN : NumberFormatSymbols_de_DE ,
    DECIMAL_PATTERN : NumberFormatSymbols_de_DE ,
    DECIMAL_SEP : NumberFormatSymbols_de_DE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_de_DE ,
    EXP_SYMBOL : NumberFormatSymbols_de_DE ,
    GROUP_SEP : NumberFormatSymbols_de_DE ,
    INFINITY : NumberFormatSymbols_de_DE ,
    MINUS_SIGN : NumberFormatSymbols_de_DE ,
    NAN : NumberFormatSymbols_de_DE ,
    PERCENT : NumberFormatSymbols_de_DE ,
    PERCENT_PATTERN : NumberFormatSymbols_de_DE ,
    PERMILL : NumberFormatSymbols_de_DE ,
    PLUS_SIGN : NumberFormatSymbols_de_DE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_de_DE ,
    ZERO_DIGIT : NumberFormatSymbols_de_DE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_de_DE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de_DE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_de_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale de_LI.
   */
  type NumberFormatSymbols_de_LI = string ;
  var NumberFormatSymbols_de_LI : {
    CURRENCY_PATTERN : NumberFormatSymbols_de_LI ,
    DECIMAL_PATTERN : NumberFormatSymbols_de_LI ,
    DECIMAL_SEP : NumberFormatSymbols_de_LI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_de_LI ,
    EXP_SYMBOL : NumberFormatSymbols_de_LI ,
    GROUP_SEP : NumberFormatSymbols_de_LI ,
    INFINITY : NumberFormatSymbols_de_LI ,
    MINUS_SIGN : NumberFormatSymbols_de_LI ,
    NAN : NumberFormatSymbols_de_LI ,
    PERCENT : NumberFormatSymbols_de_LI ,
    PERCENT_PATTERN : NumberFormatSymbols_de_LI ,
    PERMILL : NumberFormatSymbols_de_LI ,
    PLUS_SIGN : NumberFormatSymbols_de_LI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_de_LI ,
    ZERO_DIGIT : NumberFormatSymbols_de_LI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_de_LI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de_LI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_de_LI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de_LI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale de_LU.
   */
  type NumberFormatSymbols_de_LU = string ;
  var NumberFormatSymbols_de_LU : {
    CURRENCY_PATTERN : NumberFormatSymbols_de_LU ,
    DECIMAL_PATTERN : NumberFormatSymbols_de_LU ,
    DECIMAL_SEP : NumberFormatSymbols_de_LU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_de_LU ,
    EXP_SYMBOL : NumberFormatSymbols_de_LU ,
    GROUP_SEP : NumberFormatSymbols_de_LU ,
    INFINITY : NumberFormatSymbols_de_LU ,
    MINUS_SIGN : NumberFormatSymbols_de_LU ,
    NAN : NumberFormatSymbols_de_LU ,
    PERCENT : NumberFormatSymbols_de_LU ,
    PERCENT_PATTERN : NumberFormatSymbols_de_LU ,
    PERMILL : NumberFormatSymbols_de_LU ,
    PLUS_SIGN : NumberFormatSymbols_de_LU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_de_LU ,
    ZERO_DIGIT : NumberFormatSymbols_de_LU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_de_LU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de_LU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_de_LU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_de_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale dje.
   */
  type NumberFormatSymbols_dje = string ;
  var NumberFormatSymbols_dje : {
    CURRENCY_PATTERN : NumberFormatSymbols_dje ,
    DECIMAL_PATTERN : NumberFormatSymbols_dje ,
    DECIMAL_SEP : NumberFormatSymbols_dje ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_dje ,
    EXP_SYMBOL : NumberFormatSymbols_dje ,
    GROUP_SEP : NumberFormatSymbols_dje ,
    INFINITY : NumberFormatSymbols_dje ,
    MINUS_SIGN : NumberFormatSymbols_dje ,
    NAN : NumberFormatSymbols_dje ,
    PERCENT : NumberFormatSymbols_dje ,
    PERCENT_PATTERN : NumberFormatSymbols_dje ,
    PERMILL : NumberFormatSymbols_dje ,
    PLUS_SIGN : NumberFormatSymbols_dje ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_dje ,
    ZERO_DIGIT : NumberFormatSymbols_dje ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_dje'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dje;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_dje' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dje;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale dje_NE.
   */
  type NumberFormatSymbols_dje_NE = string ;
  var NumberFormatSymbols_dje_NE : {
    CURRENCY_PATTERN : NumberFormatSymbols_dje_NE ,
    DECIMAL_PATTERN : NumberFormatSymbols_dje_NE ,
    DECIMAL_SEP : NumberFormatSymbols_dje_NE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_dje_NE ,
    EXP_SYMBOL : NumberFormatSymbols_dje_NE ,
    GROUP_SEP : NumberFormatSymbols_dje_NE ,
    INFINITY : NumberFormatSymbols_dje_NE ,
    MINUS_SIGN : NumberFormatSymbols_dje_NE ,
    NAN : NumberFormatSymbols_dje_NE ,
    PERCENT : NumberFormatSymbols_dje_NE ,
    PERCENT_PATTERN : NumberFormatSymbols_dje_NE ,
    PERMILL : NumberFormatSymbols_dje_NE ,
    PLUS_SIGN : NumberFormatSymbols_dje_NE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_dje_NE ,
    ZERO_DIGIT : NumberFormatSymbols_dje_NE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_dje_NE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dje_NE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_dje_NE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dje_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale dsb.
   */
  type NumberFormatSymbols_dsb = string ;
  var NumberFormatSymbols_dsb : {
    CURRENCY_PATTERN : NumberFormatSymbols_dsb ,
    DECIMAL_PATTERN : NumberFormatSymbols_dsb ,
    DECIMAL_SEP : NumberFormatSymbols_dsb ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_dsb ,
    EXP_SYMBOL : NumberFormatSymbols_dsb ,
    GROUP_SEP : NumberFormatSymbols_dsb ,
    INFINITY : NumberFormatSymbols_dsb ,
    MINUS_SIGN : NumberFormatSymbols_dsb ,
    NAN : NumberFormatSymbols_dsb ,
    PERCENT : NumberFormatSymbols_dsb ,
    PERCENT_PATTERN : NumberFormatSymbols_dsb ,
    PERMILL : NumberFormatSymbols_dsb ,
    PLUS_SIGN : NumberFormatSymbols_dsb ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_dsb ,
    ZERO_DIGIT : NumberFormatSymbols_dsb ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_dsb'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dsb;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_dsb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dsb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale dsb_DE.
   */
  type NumberFormatSymbols_dsb_DE = string ;
  var NumberFormatSymbols_dsb_DE : {
    CURRENCY_PATTERN : NumberFormatSymbols_dsb_DE ,
    DECIMAL_PATTERN : NumberFormatSymbols_dsb_DE ,
    DECIMAL_SEP : NumberFormatSymbols_dsb_DE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_dsb_DE ,
    EXP_SYMBOL : NumberFormatSymbols_dsb_DE ,
    GROUP_SEP : NumberFormatSymbols_dsb_DE ,
    INFINITY : NumberFormatSymbols_dsb_DE ,
    MINUS_SIGN : NumberFormatSymbols_dsb_DE ,
    NAN : NumberFormatSymbols_dsb_DE ,
    PERCENT : NumberFormatSymbols_dsb_DE ,
    PERCENT_PATTERN : NumberFormatSymbols_dsb_DE ,
    PERMILL : NumberFormatSymbols_dsb_DE ,
    PLUS_SIGN : NumberFormatSymbols_dsb_DE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_dsb_DE ,
    ZERO_DIGIT : NumberFormatSymbols_dsb_DE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_dsb_DE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dsb_DE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_dsb_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dsb_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale dua.
   */
  type NumberFormatSymbols_dua = string ;
  var NumberFormatSymbols_dua : {
    CURRENCY_PATTERN : NumberFormatSymbols_dua ,
    DECIMAL_PATTERN : NumberFormatSymbols_dua ,
    DECIMAL_SEP : NumberFormatSymbols_dua ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_dua ,
    EXP_SYMBOL : NumberFormatSymbols_dua ,
    GROUP_SEP : NumberFormatSymbols_dua ,
    INFINITY : NumberFormatSymbols_dua ,
    MINUS_SIGN : NumberFormatSymbols_dua ,
    NAN : NumberFormatSymbols_dua ,
    PERCENT : NumberFormatSymbols_dua ,
    PERCENT_PATTERN : NumberFormatSymbols_dua ,
    PERMILL : NumberFormatSymbols_dua ,
    PLUS_SIGN : NumberFormatSymbols_dua ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_dua ,
    ZERO_DIGIT : NumberFormatSymbols_dua ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_dua'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dua;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_dua' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dua;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale dua_CM.
   */
  type NumberFormatSymbols_dua_CM = string ;
  var NumberFormatSymbols_dua_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_dua_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_dua_CM ,
    DECIMAL_SEP : NumberFormatSymbols_dua_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_dua_CM ,
    EXP_SYMBOL : NumberFormatSymbols_dua_CM ,
    GROUP_SEP : NumberFormatSymbols_dua_CM ,
    INFINITY : NumberFormatSymbols_dua_CM ,
    MINUS_SIGN : NumberFormatSymbols_dua_CM ,
    NAN : NumberFormatSymbols_dua_CM ,
    PERCENT : NumberFormatSymbols_dua_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_dua_CM ,
    PERMILL : NumberFormatSymbols_dua_CM ,
    PLUS_SIGN : NumberFormatSymbols_dua_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_dua_CM ,
    ZERO_DIGIT : NumberFormatSymbols_dua_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_dua_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dua_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_dua_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dua_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale dyo.
   */
  type NumberFormatSymbols_dyo = string ;
  var NumberFormatSymbols_dyo : {
    CURRENCY_PATTERN : NumberFormatSymbols_dyo ,
    DECIMAL_PATTERN : NumberFormatSymbols_dyo ,
    DECIMAL_SEP : NumberFormatSymbols_dyo ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_dyo ,
    EXP_SYMBOL : NumberFormatSymbols_dyo ,
    GROUP_SEP : NumberFormatSymbols_dyo ,
    INFINITY : NumberFormatSymbols_dyo ,
    MINUS_SIGN : NumberFormatSymbols_dyo ,
    NAN : NumberFormatSymbols_dyo ,
    PERCENT : NumberFormatSymbols_dyo ,
    PERCENT_PATTERN : NumberFormatSymbols_dyo ,
    PERMILL : NumberFormatSymbols_dyo ,
    PLUS_SIGN : NumberFormatSymbols_dyo ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_dyo ,
    ZERO_DIGIT : NumberFormatSymbols_dyo ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_dyo'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dyo;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_dyo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dyo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale dyo_SN.
   */
  type NumberFormatSymbols_dyo_SN = string ;
  var NumberFormatSymbols_dyo_SN : {
    CURRENCY_PATTERN : NumberFormatSymbols_dyo_SN ,
    DECIMAL_PATTERN : NumberFormatSymbols_dyo_SN ,
    DECIMAL_SEP : NumberFormatSymbols_dyo_SN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_dyo_SN ,
    EXP_SYMBOL : NumberFormatSymbols_dyo_SN ,
    GROUP_SEP : NumberFormatSymbols_dyo_SN ,
    INFINITY : NumberFormatSymbols_dyo_SN ,
    MINUS_SIGN : NumberFormatSymbols_dyo_SN ,
    NAN : NumberFormatSymbols_dyo_SN ,
    PERCENT : NumberFormatSymbols_dyo_SN ,
    PERCENT_PATTERN : NumberFormatSymbols_dyo_SN ,
    PERMILL : NumberFormatSymbols_dyo_SN ,
    PLUS_SIGN : NumberFormatSymbols_dyo_SN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_dyo_SN ,
    ZERO_DIGIT : NumberFormatSymbols_dyo_SN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_dyo_SN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dyo_SN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_dyo_SN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dyo_SN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale dz.
   */
  type NumberFormatSymbols_dz = string ;
  var NumberFormatSymbols_dz : {
    CURRENCY_PATTERN : NumberFormatSymbols_dz ,
    DECIMAL_PATTERN : NumberFormatSymbols_dz ,
    DECIMAL_SEP : NumberFormatSymbols_dz ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_dz ,
    EXP_SYMBOL : NumberFormatSymbols_dz ,
    GROUP_SEP : NumberFormatSymbols_dz ,
    INFINITY : NumberFormatSymbols_dz ,
    MINUS_SIGN : NumberFormatSymbols_dz ,
    NAN : NumberFormatSymbols_dz ,
    PERCENT : NumberFormatSymbols_dz ,
    PERCENT_PATTERN : NumberFormatSymbols_dz ,
    PERMILL : NumberFormatSymbols_dz ,
    PLUS_SIGN : NumberFormatSymbols_dz ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_dz ,
    ZERO_DIGIT : NumberFormatSymbols_dz ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_dz'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dz;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_dz' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dz;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale dz_BT.
   */
  type NumberFormatSymbols_dz_BT = string ;
  var NumberFormatSymbols_dz_BT : {
    CURRENCY_PATTERN : NumberFormatSymbols_dz_BT ,
    DECIMAL_PATTERN : NumberFormatSymbols_dz_BT ,
    DECIMAL_SEP : NumberFormatSymbols_dz_BT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_dz_BT ,
    EXP_SYMBOL : NumberFormatSymbols_dz_BT ,
    GROUP_SEP : NumberFormatSymbols_dz_BT ,
    INFINITY : NumberFormatSymbols_dz_BT ,
    MINUS_SIGN : NumberFormatSymbols_dz_BT ,
    NAN : NumberFormatSymbols_dz_BT ,
    PERCENT : NumberFormatSymbols_dz_BT ,
    PERCENT_PATTERN : NumberFormatSymbols_dz_BT ,
    PERMILL : NumberFormatSymbols_dz_BT ,
    PLUS_SIGN : NumberFormatSymbols_dz_BT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_dz_BT ,
    ZERO_DIGIT : NumberFormatSymbols_dz_BT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_dz_BT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dz_BT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_dz_BT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_dz_BT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ebu.
   */
  type NumberFormatSymbols_ebu = string ;
  var NumberFormatSymbols_ebu : {
    CURRENCY_PATTERN : NumberFormatSymbols_ebu ,
    DECIMAL_PATTERN : NumberFormatSymbols_ebu ,
    DECIMAL_SEP : NumberFormatSymbols_ebu ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ebu ,
    EXP_SYMBOL : NumberFormatSymbols_ebu ,
    GROUP_SEP : NumberFormatSymbols_ebu ,
    INFINITY : NumberFormatSymbols_ebu ,
    MINUS_SIGN : NumberFormatSymbols_ebu ,
    NAN : NumberFormatSymbols_ebu ,
    PERCENT : NumberFormatSymbols_ebu ,
    PERCENT_PATTERN : NumberFormatSymbols_ebu ,
    PERMILL : NumberFormatSymbols_ebu ,
    PLUS_SIGN : NumberFormatSymbols_ebu ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ebu ,
    ZERO_DIGIT : NumberFormatSymbols_ebu ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ebu'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ebu;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ebu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ebu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ebu_KE.
   */
  type NumberFormatSymbols_ebu_KE = string ;
  var NumberFormatSymbols_ebu_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_ebu_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_ebu_KE ,
    DECIMAL_SEP : NumberFormatSymbols_ebu_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ebu_KE ,
    EXP_SYMBOL : NumberFormatSymbols_ebu_KE ,
    GROUP_SEP : NumberFormatSymbols_ebu_KE ,
    INFINITY : NumberFormatSymbols_ebu_KE ,
    MINUS_SIGN : NumberFormatSymbols_ebu_KE ,
    NAN : NumberFormatSymbols_ebu_KE ,
    PERCENT : NumberFormatSymbols_ebu_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_ebu_KE ,
    PERMILL : NumberFormatSymbols_ebu_KE ,
    PLUS_SIGN : NumberFormatSymbols_ebu_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ebu_KE ,
    ZERO_DIGIT : NumberFormatSymbols_ebu_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ebu_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ebu_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ebu_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ebu_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ee.
   */
  type NumberFormatSymbols_ee = string ;
  var NumberFormatSymbols_ee : {
    CURRENCY_PATTERN : NumberFormatSymbols_ee ,
    DECIMAL_PATTERN : NumberFormatSymbols_ee ,
    DECIMAL_SEP : NumberFormatSymbols_ee ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ee ,
    EXP_SYMBOL : NumberFormatSymbols_ee ,
    GROUP_SEP : NumberFormatSymbols_ee ,
    INFINITY : NumberFormatSymbols_ee ,
    MINUS_SIGN : NumberFormatSymbols_ee ,
    NAN : NumberFormatSymbols_ee ,
    PERCENT : NumberFormatSymbols_ee ,
    PERCENT_PATTERN : NumberFormatSymbols_ee ,
    PERMILL : NumberFormatSymbols_ee ,
    PLUS_SIGN : NumberFormatSymbols_ee ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ee ,
    ZERO_DIGIT : NumberFormatSymbols_ee ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ee'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ee;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ee' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ee;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ee_GH.
   */
  type NumberFormatSymbols_ee_GH = string ;
  var NumberFormatSymbols_ee_GH : {
    CURRENCY_PATTERN : NumberFormatSymbols_ee_GH ,
    DECIMAL_PATTERN : NumberFormatSymbols_ee_GH ,
    DECIMAL_SEP : NumberFormatSymbols_ee_GH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ee_GH ,
    EXP_SYMBOL : NumberFormatSymbols_ee_GH ,
    GROUP_SEP : NumberFormatSymbols_ee_GH ,
    INFINITY : NumberFormatSymbols_ee_GH ,
    MINUS_SIGN : NumberFormatSymbols_ee_GH ,
    NAN : NumberFormatSymbols_ee_GH ,
    PERCENT : NumberFormatSymbols_ee_GH ,
    PERCENT_PATTERN : NumberFormatSymbols_ee_GH ,
    PERMILL : NumberFormatSymbols_ee_GH ,
    PLUS_SIGN : NumberFormatSymbols_ee_GH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ee_GH ,
    ZERO_DIGIT : NumberFormatSymbols_ee_GH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ee_GH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ee_GH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ee_GH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ee_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ee_TG.
   */
  type NumberFormatSymbols_ee_TG = string ;
  var NumberFormatSymbols_ee_TG : {
    CURRENCY_PATTERN : NumberFormatSymbols_ee_TG ,
    DECIMAL_PATTERN : NumberFormatSymbols_ee_TG ,
    DECIMAL_SEP : NumberFormatSymbols_ee_TG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ee_TG ,
    EXP_SYMBOL : NumberFormatSymbols_ee_TG ,
    GROUP_SEP : NumberFormatSymbols_ee_TG ,
    INFINITY : NumberFormatSymbols_ee_TG ,
    MINUS_SIGN : NumberFormatSymbols_ee_TG ,
    NAN : NumberFormatSymbols_ee_TG ,
    PERCENT : NumberFormatSymbols_ee_TG ,
    PERCENT_PATTERN : NumberFormatSymbols_ee_TG ,
    PERMILL : NumberFormatSymbols_ee_TG ,
    PLUS_SIGN : NumberFormatSymbols_ee_TG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ee_TG ,
    ZERO_DIGIT : NumberFormatSymbols_ee_TG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ee_TG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ee_TG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ee_TG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ee_TG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale el.
   */
  type NumberFormatSymbols_el = string ;
  var NumberFormatSymbols_el : {
    CURRENCY_PATTERN : NumberFormatSymbols_el ,
    DECIMAL_PATTERN : NumberFormatSymbols_el ,
    DECIMAL_SEP : NumberFormatSymbols_el ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_el ,
    EXP_SYMBOL : NumberFormatSymbols_el ,
    GROUP_SEP : NumberFormatSymbols_el ,
    INFINITY : NumberFormatSymbols_el ,
    MINUS_SIGN : NumberFormatSymbols_el ,
    NAN : NumberFormatSymbols_el ,
    PERCENT : NumberFormatSymbols_el ,
    PERCENT_PATTERN : NumberFormatSymbols_el ,
    PERMILL : NumberFormatSymbols_el ,
    PLUS_SIGN : NumberFormatSymbols_el ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_el ,
    ZERO_DIGIT : NumberFormatSymbols_el ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_el'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_el;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_el' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_el;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale el_CY.
   */
  type NumberFormatSymbols_el_CY = string ;
  var NumberFormatSymbols_el_CY : {
    CURRENCY_PATTERN : NumberFormatSymbols_el_CY ,
    DECIMAL_PATTERN : NumberFormatSymbols_el_CY ,
    DECIMAL_SEP : NumberFormatSymbols_el_CY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_el_CY ,
    EXP_SYMBOL : NumberFormatSymbols_el_CY ,
    GROUP_SEP : NumberFormatSymbols_el_CY ,
    INFINITY : NumberFormatSymbols_el_CY ,
    MINUS_SIGN : NumberFormatSymbols_el_CY ,
    NAN : NumberFormatSymbols_el_CY ,
    PERCENT : NumberFormatSymbols_el_CY ,
    PERCENT_PATTERN : NumberFormatSymbols_el_CY ,
    PERMILL : NumberFormatSymbols_el_CY ,
    PLUS_SIGN : NumberFormatSymbols_el_CY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_el_CY ,
    ZERO_DIGIT : NumberFormatSymbols_el_CY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_el_CY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_el_CY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_el_CY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_el_CY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale el_GR.
   */
  type NumberFormatSymbols_el_GR = string ;
  var NumberFormatSymbols_el_GR : {
    CURRENCY_PATTERN : NumberFormatSymbols_el_GR ,
    DECIMAL_PATTERN : NumberFormatSymbols_el_GR ,
    DECIMAL_SEP : NumberFormatSymbols_el_GR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_el_GR ,
    EXP_SYMBOL : NumberFormatSymbols_el_GR ,
    GROUP_SEP : NumberFormatSymbols_el_GR ,
    INFINITY : NumberFormatSymbols_el_GR ,
    MINUS_SIGN : NumberFormatSymbols_el_GR ,
    NAN : NumberFormatSymbols_el_GR ,
    PERCENT : NumberFormatSymbols_el_GR ,
    PERCENT_PATTERN : NumberFormatSymbols_el_GR ,
    PERMILL : NumberFormatSymbols_el_GR ,
    PLUS_SIGN : NumberFormatSymbols_el_GR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_el_GR ,
    ZERO_DIGIT : NumberFormatSymbols_el_GR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_el_GR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_el_GR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_el_GR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_el_GR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en.
   */
  type NumberFormatSymbols_en = string ;
  var NumberFormatSymbols_en : {
    CURRENCY_PATTERN : NumberFormatSymbols_en ,
    DECIMAL_PATTERN : NumberFormatSymbols_en ,
    DECIMAL_SEP : NumberFormatSymbols_en ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en ,
    EXP_SYMBOL : NumberFormatSymbols_en ,
    GROUP_SEP : NumberFormatSymbols_en ,
    INFINITY : NumberFormatSymbols_en ,
    MINUS_SIGN : NumberFormatSymbols_en ,
    NAN : NumberFormatSymbols_en ,
    PERCENT : NumberFormatSymbols_en ,
    PERCENT_PATTERN : NumberFormatSymbols_en ,
    PERMILL : NumberFormatSymbols_en ,
    PLUS_SIGN : NumberFormatSymbols_en ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en ,
    ZERO_DIGIT : NumberFormatSymbols_en ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_001.
   */
  type NumberFormatSymbols_en_001 = string ;
  var NumberFormatSymbols_en_001 : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_001 ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_001 ,
    DECIMAL_SEP : NumberFormatSymbols_en_001 ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_001 ,
    EXP_SYMBOL : NumberFormatSymbols_en_001 ,
    GROUP_SEP : NumberFormatSymbols_en_001 ,
    INFINITY : NumberFormatSymbols_en_001 ,
    MINUS_SIGN : NumberFormatSymbols_en_001 ,
    NAN : NumberFormatSymbols_en_001 ,
    PERCENT : NumberFormatSymbols_en_001 ,
    PERCENT_PATTERN : NumberFormatSymbols_en_001 ,
    PERMILL : NumberFormatSymbols_en_001 ,
    PLUS_SIGN : NumberFormatSymbols_en_001 ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_001 ,
    ZERO_DIGIT : NumberFormatSymbols_en_001 ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_001'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_001;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_150.
   */
  type NumberFormatSymbols_en_150 = string ;
  var NumberFormatSymbols_en_150 : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_150 ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_150 ,
    DECIMAL_SEP : NumberFormatSymbols_en_150 ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_150 ,
    EXP_SYMBOL : NumberFormatSymbols_en_150 ,
    GROUP_SEP : NumberFormatSymbols_en_150 ,
    INFINITY : NumberFormatSymbols_en_150 ,
    MINUS_SIGN : NumberFormatSymbols_en_150 ,
    NAN : NumberFormatSymbols_en_150 ,
    PERCENT : NumberFormatSymbols_en_150 ,
    PERCENT_PATTERN : NumberFormatSymbols_en_150 ,
    PERMILL : NumberFormatSymbols_en_150 ,
    PLUS_SIGN : NumberFormatSymbols_en_150 ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_150 ,
    ZERO_DIGIT : NumberFormatSymbols_en_150 ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_150'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_150;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_150' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_150;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_AG.
   */
  type NumberFormatSymbols_en_AG = string ;
  var NumberFormatSymbols_en_AG : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_AG ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_AG ,
    DECIMAL_SEP : NumberFormatSymbols_en_AG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_AG ,
    EXP_SYMBOL : NumberFormatSymbols_en_AG ,
    GROUP_SEP : NumberFormatSymbols_en_AG ,
    INFINITY : NumberFormatSymbols_en_AG ,
    MINUS_SIGN : NumberFormatSymbols_en_AG ,
    NAN : NumberFormatSymbols_en_AG ,
    PERCENT : NumberFormatSymbols_en_AG ,
    PERCENT_PATTERN : NumberFormatSymbols_en_AG ,
    PERMILL : NumberFormatSymbols_en_AG ,
    PLUS_SIGN : NumberFormatSymbols_en_AG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_AG ,
    ZERO_DIGIT : NumberFormatSymbols_en_AG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_AG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_AG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_AG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_AG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_AI.
   */
  type NumberFormatSymbols_en_AI = string ;
  var NumberFormatSymbols_en_AI : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_AI ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_AI ,
    DECIMAL_SEP : NumberFormatSymbols_en_AI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_AI ,
    EXP_SYMBOL : NumberFormatSymbols_en_AI ,
    GROUP_SEP : NumberFormatSymbols_en_AI ,
    INFINITY : NumberFormatSymbols_en_AI ,
    MINUS_SIGN : NumberFormatSymbols_en_AI ,
    NAN : NumberFormatSymbols_en_AI ,
    PERCENT : NumberFormatSymbols_en_AI ,
    PERCENT_PATTERN : NumberFormatSymbols_en_AI ,
    PERMILL : NumberFormatSymbols_en_AI ,
    PLUS_SIGN : NumberFormatSymbols_en_AI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_AI ,
    ZERO_DIGIT : NumberFormatSymbols_en_AI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_AI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_AI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_AI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_AI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_AS.
   */
  type NumberFormatSymbols_en_AS = string ;
  var NumberFormatSymbols_en_AS : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_AS ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_AS ,
    DECIMAL_SEP : NumberFormatSymbols_en_AS ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_AS ,
    EXP_SYMBOL : NumberFormatSymbols_en_AS ,
    GROUP_SEP : NumberFormatSymbols_en_AS ,
    INFINITY : NumberFormatSymbols_en_AS ,
    MINUS_SIGN : NumberFormatSymbols_en_AS ,
    NAN : NumberFormatSymbols_en_AS ,
    PERCENT : NumberFormatSymbols_en_AS ,
    PERCENT_PATTERN : NumberFormatSymbols_en_AS ,
    PERMILL : NumberFormatSymbols_en_AS ,
    PLUS_SIGN : NumberFormatSymbols_en_AS ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_AS ,
    ZERO_DIGIT : NumberFormatSymbols_en_AS ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_AS'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_AS;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_AS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_AS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_AT.
   */
  type NumberFormatSymbols_en_AT = string ;
  var NumberFormatSymbols_en_AT : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_AT ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_AT ,
    DECIMAL_SEP : NumberFormatSymbols_en_AT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_AT ,
    EXP_SYMBOL : NumberFormatSymbols_en_AT ,
    GROUP_SEP : NumberFormatSymbols_en_AT ,
    INFINITY : NumberFormatSymbols_en_AT ,
    MINUS_SIGN : NumberFormatSymbols_en_AT ,
    NAN : NumberFormatSymbols_en_AT ,
    PERCENT : NumberFormatSymbols_en_AT ,
    PERCENT_PATTERN : NumberFormatSymbols_en_AT ,
    PERMILL : NumberFormatSymbols_en_AT ,
    PLUS_SIGN : NumberFormatSymbols_en_AT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_AT ,
    ZERO_DIGIT : NumberFormatSymbols_en_AT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_AT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_AT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_AT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_AT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_AU.
   */
  type NumberFormatSymbols_en_AU = string ;
  var NumberFormatSymbols_en_AU : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_AU ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_AU ,
    DECIMAL_SEP : NumberFormatSymbols_en_AU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_AU ,
    EXP_SYMBOL : NumberFormatSymbols_en_AU ,
    GROUP_SEP : NumberFormatSymbols_en_AU ,
    INFINITY : NumberFormatSymbols_en_AU ,
    MINUS_SIGN : NumberFormatSymbols_en_AU ,
    NAN : NumberFormatSymbols_en_AU ,
    PERCENT : NumberFormatSymbols_en_AU ,
    PERCENT_PATTERN : NumberFormatSymbols_en_AU ,
    PERMILL : NumberFormatSymbols_en_AU ,
    PLUS_SIGN : NumberFormatSymbols_en_AU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_AU ,
    ZERO_DIGIT : NumberFormatSymbols_en_AU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_AU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_AU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_AU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_AU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_BB.
   */
  type NumberFormatSymbols_en_BB = string ;
  var NumberFormatSymbols_en_BB : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_BB ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_BB ,
    DECIMAL_SEP : NumberFormatSymbols_en_BB ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_BB ,
    EXP_SYMBOL : NumberFormatSymbols_en_BB ,
    GROUP_SEP : NumberFormatSymbols_en_BB ,
    INFINITY : NumberFormatSymbols_en_BB ,
    MINUS_SIGN : NumberFormatSymbols_en_BB ,
    NAN : NumberFormatSymbols_en_BB ,
    PERCENT : NumberFormatSymbols_en_BB ,
    PERCENT_PATTERN : NumberFormatSymbols_en_BB ,
    PERMILL : NumberFormatSymbols_en_BB ,
    PLUS_SIGN : NumberFormatSymbols_en_BB ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_BB ,
    ZERO_DIGIT : NumberFormatSymbols_en_BB ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_BB'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BB;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_BB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_BE.
   */
  type NumberFormatSymbols_en_BE = string ;
  var NumberFormatSymbols_en_BE : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_BE ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_BE ,
    DECIMAL_SEP : NumberFormatSymbols_en_BE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_BE ,
    EXP_SYMBOL : NumberFormatSymbols_en_BE ,
    GROUP_SEP : NumberFormatSymbols_en_BE ,
    INFINITY : NumberFormatSymbols_en_BE ,
    MINUS_SIGN : NumberFormatSymbols_en_BE ,
    NAN : NumberFormatSymbols_en_BE ,
    PERCENT : NumberFormatSymbols_en_BE ,
    PERCENT_PATTERN : NumberFormatSymbols_en_BE ,
    PERMILL : NumberFormatSymbols_en_BE ,
    PLUS_SIGN : NumberFormatSymbols_en_BE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_BE ,
    ZERO_DIGIT : NumberFormatSymbols_en_BE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_BE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_BE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_BI.
   */
  type NumberFormatSymbols_en_BI = string ;
  var NumberFormatSymbols_en_BI : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_BI ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_BI ,
    DECIMAL_SEP : NumberFormatSymbols_en_BI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_BI ,
    EXP_SYMBOL : NumberFormatSymbols_en_BI ,
    GROUP_SEP : NumberFormatSymbols_en_BI ,
    INFINITY : NumberFormatSymbols_en_BI ,
    MINUS_SIGN : NumberFormatSymbols_en_BI ,
    NAN : NumberFormatSymbols_en_BI ,
    PERCENT : NumberFormatSymbols_en_BI ,
    PERCENT_PATTERN : NumberFormatSymbols_en_BI ,
    PERMILL : NumberFormatSymbols_en_BI ,
    PLUS_SIGN : NumberFormatSymbols_en_BI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_BI ,
    ZERO_DIGIT : NumberFormatSymbols_en_BI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_BI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_BI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_BM.
   */
  type NumberFormatSymbols_en_BM = string ;
  var NumberFormatSymbols_en_BM : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_BM ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_BM ,
    DECIMAL_SEP : NumberFormatSymbols_en_BM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_BM ,
    EXP_SYMBOL : NumberFormatSymbols_en_BM ,
    GROUP_SEP : NumberFormatSymbols_en_BM ,
    INFINITY : NumberFormatSymbols_en_BM ,
    MINUS_SIGN : NumberFormatSymbols_en_BM ,
    NAN : NumberFormatSymbols_en_BM ,
    PERCENT : NumberFormatSymbols_en_BM ,
    PERCENT_PATTERN : NumberFormatSymbols_en_BM ,
    PERMILL : NumberFormatSymbols_en_BM ,
    PLUS_SIGN : NumberFormatSymbols_en_BM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_BM ,
    ZERO_DIGIT : NumberFormatSymbols_en_BM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_BM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_BM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_BS.
   */
  type NumberFormatSymbols_en_BS = string ;
  var NumberFormatSymbols_en_BS : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_BS ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_BS ,
    DECIMAL_SEP : NumberFormatSymbols_en_BS ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_BS ,
    EXP_SYMBOL : NumberFormatSymbols_en_BS ,
    GROUP_SEP : NumberFormatSymbols_en_BS ,
    INFINITY : NumberFormatSymbols_en_BS ,
    MINUS_SIGN : NumberFormatSymbols_en_BS ,
    NAN : NumberFormatSymbols_en_BS ,
    PERCENT : NumberFormatSymbols_en_BS ,
    PERCENT_PATTERN : NumberFormatSymbols_en_BS ,
    PERMILL : NumberFormatSymbols_en_BS ,
    PLUS_SIGN : NumberFormatSymbols_en_BS ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_BS ,
    ZERO_DIGIT : NumberFormatSymbols_en_BS ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_BS'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BS;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_BS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_BW.
   */
  type NumberFormatSymbols_en_BW = string ;
  var NumberFormatSymbols_en_BW : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_BW ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_BW ,
    DECIMAL_SEP : NumberFormatSymbols_en_BW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_BW ,
    EXP_SYMBOL : NumberFormatSymbols_en_BW ,
    GROUP_SEP : NumberFormatSymbols_en_BW ,
    INFINITY : NumberFormatSymbols_en_BW ,
    MINUS_SIGN : NumberFormatSymbols_en_BW ,
    NAN : NumberFormatSymbols_en_BW ,
    PERCENT : NumberFormatSymbols_en_BW ,
    PERCENT_PATTERN : NumberFormatSymbols_en_BW ,
    PERMILL : NumberFormatSymbols_en_BW ,
    PLUS_SIGN : NumberFormatSymbols_en_BW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_BW ,
    ZERO_DIGIT : NumberFormatSymbols_en_BW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_BW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_BW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_BZ.
   */
  type NumberFormatSymbols_en_BZ = string ;
  var NumberFormatSymbols_en_BZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_BZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_BZ ,
    DECIMAL_SEP : NumberFormatSymbols_en_BZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_BZ ,
    EXP_SYMBOL : NumberFormatSymbols_en_BZ ,
    GROUP_SEP : NumberFormatSymbols_en_BZ ,
    INFINITY : NumberFormatSymbols_en_BZ ,
    MINUS_SIGN : NumberFormatSymbols_en_BZ ,
    NAN : NumberFormatSymbols_en_BZ ,
    PERCENT : NumberFormatSymbols_en_BZ ,
    PERCENT_PATTERN : NumberFormatSymbols_en_BZ ,
    PERMILL : NumberFormatSymbols_en_BZ ,
    PLUS_SIGN : NumberFormatSymbols_en_BZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_BZ ,
    ZERO_DIGIT : NumberFormatSymbols_en_BZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_BZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_BZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_BZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_CA.
   */
  type NumberFormatSymbols_en_CA = string ;
  var NumberFormatSymbols_en_CA : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_CA ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_CA ,
    DECIMAL_SEP : NumberFormatSymbols_en_CA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_CA ,
    EXP_SYMBOL : NumberFormatSymbols_en_CA ,
    GROUP_SEP : NumberFormatSymbols_en_CA ,
    INFINITY : NumberFormatSymbols_en_CA ,
    MINUS_SIGN : NumberFormatSymbols_en_CA ,
    NAN : NumberFormatSymbols_en_CA ,
    PERCENT : NumberFormatSymbols_en_CA ,
    PERCENT_PATTERN : NumberFormatSymbols_en_CA ,
    PERMILL : NumberFormatSymbols_en_CA ,
    PLUS_SIGN : NumberFormatSymbols_en_CA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_CA ,
    ZERO_DIGIT : NumberFormatSymbols_en_CA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_CA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_CA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_CC.
   */
  type NumberFormatSymbols_en_CC = string ;
  var NumberFormatSymbols_en_CC : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_CC ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_CC ,
    DECIMAL_SEP : NumberFormatSymbols_en_CC ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_CC ,
    EXP_SYMBOL : NumberFormatSymbols_en_CC ,
    GROUP_SEP : NumberFormatSymbols_en_CC ,
    INFINITY : NumberFormatSymbols_en_CC ,
    MINUS_SIGN : NumberFormatSymbols_en_CC ,
    NAN : NumberFormatSymbols_en_CC ,
    PERCENT : NumberFormatSymbols_en_CC ,
    PERCENT_PATTERN : NumberFormatSymbols_en_CC ,
    PERMILL : NumberFormatSymbols_en_CC ,
    PLUS_SIGN : NumberFormatSymbols_en_CC ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_CC ,
    ZERO_DIGIT : NumberFormatSymbols_en_CC ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_CC'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CC;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_CC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_CH.
   */
  type NumberFormatSymbols_en_CH = string ;
  var NumberFormatSymbols_en_CH : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_CH ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_CH ,
    DECIMAL_SEP : NumberFormatSymbols_en_CH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_CH ,
    EXP_SYMBOL : NumberFormatSymbols_en_CH ,
    GROUP_SEP : NumberFormatSymbols_en_CH ,
    INFINITY : NumberFormatSymbols_en_CH ,
    MINUS_SIGN : NumberFormatSymbols_en_CH ,
    NAN : NumberFormatSymbols_en_CH ,
    PERCENT : NumberFormatSymbols_en_CH ,
    PERCENT_PATTERN : NumberFormatSymbols_en_CH ,
    PERMILL : NumberFormatSymbols_en_CH ,
    PLUS_SIGN : NumberFormatSymbols_en_CH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_CH ,
    ZERO_DIGIT : NumberFormatSymbols_en_CH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_CH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_CK.
   */
  type NumberFormatSymbols_en_CK = string ;
  var NumberFormatSymbols_en_CK : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_CK ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_CK ,
    DECIMAL_SEP : NumberFormatSymbols_en_CK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_CK ,
    EXP_SYMBOL : NumberFormatSymbols_en_CK ,
    GROUP_SEP : NumberFormatSymbols_en_CK ,
    INFINITY : NumberFormatSymbols_en_CK ,
    MINUS_SIGN : NumberFormatSymbols_en_CK ,
    NAN : NumberFormatSymbols_en_CK ,
    PERCENT : NumberFormatSymbols_en_CK ,
    PERCENT_PATTERN : NumberFormatSymbols_en_CK ,
    PERMILL : NumberFormatSymbols_en_CK ,
    PLUS_SIGN : NumberFormatSymbols_en_CK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_CK ,
    ZERO_DIGIT : NumberFormatSymbols_en_CK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_CK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_CK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_CM.
   */
  type NumberFormatSymbols_en_CM = string ;
  var NumberFormatSymbols_en_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_CM ,
    DECIMAL_SEP : NumberFormatSymbols_en_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_CM ,
    EXP_SYMBOL : NumberFormatSymbols_en_CM ,
    GROUP_SEP : NumberFormatSymbols_en_CM ,
    INFINITY : NumberFormatSymbols_en_CM ,
    MINUS_SIGN : NumberFormatSymbols_en_CM ,
    NAN : NumberFormatSymbols_en_CM ,
    PERCENT : NumberFormatSymbols_en_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_en_CM ,
    PERMILL : NumberFormatSymbols_en_CM ,
    PLUS_SIGN : NumberFormatSymbols_en_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_CM ,
    ZERO_DIGIT : NumberFormatSymbols_en_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_CX.
   */
  type NumberFormatSymbols_en_CX = string ;
  var NumberFormatSymbols_en_CX : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_CX ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_CX ,
    DECIMAL_SEP : NumberFormatSymbols_en_CX ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_CX ,
    EXP_SYMBOL : NumberFormatSymbols_en_CX ,
    GROUP_SEP : NumberFormatSymbols_en_CX ,
    INFINITY : NumberFormatSymbols_en_CX ,
    MINUS_SIGN : NumberFormatSymbols_en_CX ,
    NAN : NumberFormatSymbols_en_CX ,
    PERCENT : NumberFormatSymbols_en_CX ,
    PERCENT_PATTERN : NumberFormatSymbols_en_CX ,
    PERMILL : NumberFormatSymbols_en_CX ,
    PLUS_SIGN : NumberFormatSymbols_en_CX ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_CX ,
    ZERO_DIGIT : NumberFormatSymbols_en_CX ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_CX'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CX;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_CX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_CY.
   */
  type NumberFormatSymbols_en_CY = string ;
  var NumberFormatSymbols_en_CY : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_CY ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_CY ,
    DECIMAL_SEP : NumberFormatSymbols_en_CY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_CY ,
    EXP_SYMBOL : NumberFormatSymbols_en_CY ,
    GROUP_SEP : NumberFormatSymbols_en_CY ,
    INFINITY : NumberFormatSymbols_en_CY ,
    MINUS_SIGN : NumberFormatSymbols_en_CY ,
    NAN : NumberFormatSymbols_en_CY ,
    PERCENT : NumberFormatSymbols_en_CY ,
    PERCENT_PATTERN : NumberFormatSymbols_en_CY ,
    PERMILL : NumberFormatSymbols_en_CY ,
    PLUS_SIGN : NumberFormatSymbols_en_CY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_CY ,
    ZERO_DIGIT : NumberFormatSymbols_en_CY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_CY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_CY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_CY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_DE.
   */
  type NumberFormatSymbols_en_DE = string ;
  var NumberFormatSymbols_en_DE : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_DE ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_DE ,
    DECIMAL_SEP : NumberFormatSymbols_en_DE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_DE ,
    EXP_SYMBOL : NumberFormatSymbols_en_DE ,
    GROUP_SEP : NumberFormatSymbols_en_DE ,
    INFINITY : NumberFormatSymbols_en_DE ,
    MINUS_SIGN : NumberFormatSymbols_en_DE ,
    NAN : NumberFormatSymbols_en_DE ,
    PERCENT : NumberFormatSymbols_en_DE ,
    PERCENT_PATTERN : NumberFormatSymbols_en_DE ,
    PERMILL : NumberFormatSymbols_en_DE ,
    PLUS_SIGN : NumberFormatSymbols_en_DE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_DE ,
    ZERO_DIGIT : NumberFormatSymbols_en_DE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_DE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_DE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_DG.
   */
  type NumberFormatSymbols_en_DG = string ;
  var NumberFormatSymbols_en_DG : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_DG ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_DG ,
    DECIMAL_SEP : NumberFormatSymbols_en_DG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_DG ,
    EXP_SYMBOL : NumberFormatSymbols_en_DG ,
    GROUP_SEP : NumberFormatSymbols_en_DG ,
    INFINITY : NumberFormatSymbols_en_DG ,
    MINUS_SIGN : NumberFormatSymbols_en_DG ,
    NAN : NumberFormatSymbols_en_DG ,
    PERCENT : NumberFormatSymbols_en_DG ,
    PERCENT_PATTERN : NumberFormatSymbols_en_DG ,
    PERMILL : NumberFormatSymbols_en_DG ,
    PLUS_SIGN : NumberFormatSymbols_en_DG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_DG ,
    ZERO_DIGIT : NumberFormatSymbols_en_DG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_DG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_DG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_DG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_DG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_DK.
   */
  type NumberFormatSymbols_en_DK = string ;
  var NumberFormatSymbols_en_DK : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_DK ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_DK ,
    DECIMAL_SEP : NumberFormatSymbols_en_DK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_DK ,
    EXP_SYMBOL : NumberFormatSymbols_en_DK ,
    GROUP_SEP : NumberFormatSymbols_en_DK ,
    INFINITY : NumberFormatSymbols_en_DK ,
    MINUS_SIGN : NumberFormatSymbols_en_DK ,
    NAN : NumberFormatSymbols_en_DK ,
    PERCENT : NumberFormatSymbols_en_DK ,
    PERCENT_PATTERN : NumberFormatSymbols_en_DK ,
    PERMILL : NumberFormatSymbols_en_DK ,
    PLUS_SIGN : NumberFormatSymbols_en_DK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_DK ,
    ZERO_DIGIT : NumberFormatSymbols_en_DK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_DK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_DK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_DK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_DK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_DM.
   */
  type NumberFormatSymbols_en_DM = string ;
  var NumberFormatSymbols_en_DM : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_DM ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_DM ,
    DECIMAL_SEP : NumberFormatSymbols_en_DM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_DM ,
    EXP_SYMBOL : NumberFormatSymbols_en_DM ,
    GROUP_SEP : NumberFormatSymbols_en_DM ,
    INFINITY : NumberFormatSymbols_en_DM ,
    MINUS_SIGN : NumberFormatSymbols_en_DM ,
    NAN : NumberFormatSymbols_en_DM ,
    PERCENT : NumberFormatSymbols_en_DM ,
    PERCENT_PATTERN : NumberFormatSymbols_en_DM ,
    PERMILL : NumberFormatSymbols_en_DM ,
    PLUS_SIGN : NumberFormatSymbols_en_DM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_DM ,
    ZERO_DIGIT : NumberFormatSymbols_en_DM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_DM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_DM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_DM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_DM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_ER.
   */
  type NumberFormatSymbols_en_ER = string ;
  var NumberFormatSymbols_en_ER : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_ER ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_ER ,
    DECIMAL_SEP : NumberFormatSymbols_en_ER ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_ER ,
    EXP_SYMBOL : NumberFormatSymbols_en_ER ,
    GROUP_SEP : NumberFormatSymbols_en_ER ,
    INFINITY : NumberFormatSymbols_en_ER ,
    MINUS_SIGN : NumberFormatSymbols_en_ER ,
    NAN : NumberFormatSymbols_en_ER ,
    PERCENT : NumberFormatSymbols_en_ER ,
    PERCENT_PATTERN : NumberFormatSymbols_en_ER ,
    PERMILL : NumberFormatSymbols_en_ER ,
    PLUS_SIGN : NumberFormatSymbols_en_ER ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_ER ,
    ZERO_DIGIT : NumberFormatSymbols_en_ER ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_ER'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_ER;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_ER' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_ER;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_FI.
   */
  type NumberFormatSymbols_en_FI = string ;
  var NumberFormatSymbols_en_FI : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_FI ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_FI ,
    DECIMAL_SEP : NumberFormatSymbols_en_FI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_FI ,
    EXP_SYMBOL : NumberFormatSymbols_en_FI ,
    GROUP_SEP : NumberFormatSymbols_en_FI ,
    INFINITY : NumberFormatSymbols_en_FI ,
    MINUS_SIGN : NumberFormatSymbols_en_FI ,
    NAN : NumberFormatSymbols_en_FI ,
    PERCENT : NumberFormatSymbols_en_FI ,
    PERCENT_PATTERN : NumberFormatSymbols_en_FI ,
    PERMILL : NumberFormatSymbols_en_FI ,
    PLUS_SIGN : NumberFormatSymbols_en_FI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_FI ,
    ZERO_DIGIT : NumberFormatSymbols_en_FI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_FI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_FI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_FJ.
   */
  type NumberFormatSymbols_en_FJ = string ;
  var NumberFormatSymbols_en_FJ : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_FJ ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_FJ ,
    DECIMAL_SEP : NumberFormatSymbols_en_FJ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_FJ ,
    EXP_SYMBOL : NumberFormatSymbols_en_FJ ,
    GROUP_SEP : NumberFormatSymbols_en_FJ ,
    INFINITY : NumberFormatSymbols_en_FJ ,
    MINUS_SIGN : NumberFormatSymbols_en_FJ ,
    NAN : NumberFormatSymbols_en_FJ ,
    PERCENT : NumberFormatSymbols_en_FJ ,
    PERCENT_PATTERN : NumberFormatSymbols_en_FJ ,
    PERMILL : NumberFormatSymbols_en_FJ ,
    PLUS_SIGN : NumberFormatSymbols_en_FJ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_FJ ,
    ZERO_DIGIT : NumberFormatSymbols_en_FJ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_FJ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_FJ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_FJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_FJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_FK.
   */
  type NumberFormatSymbols_en_FK = string ;
  var NumberFormatSymbols_en_FK : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_FK ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_FK ,
    DECIMAL_SEP : NumberFormatSymbols_en_FK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_FK ,
    EXP_SYMBOL : NumberFormatSymbols_en_FK ,
    GROUP_SEP : NumberFormatSymbols_en_FK ,
    INFINITY : NumberFormatSymbols_en_FK ,
    MINUS_SIGN : NumberFormatSymbols_en_FK ,
    NAN : NumberFormatSymbols_en_FK ,
    PERCENT : NumberFormatSymbols_en_FK ,
    PERCENT_PATTERN : NumberFormatSymbols_en_FK ,
    PERMILL : NumberFormatSymbols_en_FK ,
    PLUS_SIGN : NumberFormatSymbols_en_FK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_FK ,
    ZERO_DIGIT : NumberFormatSymbols_en_FK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_FK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_FK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_FK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_FK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_FM.
   */
  type NumberFormatSymbols_en_FM = string ;
  var NumberFormatSymbols_en_FM : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_FM ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_FM ,
    DECIMAL_SEP : NumberFormatSymbols_en_FM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_FM ,
    EXP_SYMBOL : NumberFormatSymbols_en_FM ,
    GROUP_SEP : NumberFormatSymbols_en_FM ,
    INFINITY : NumberFormatSymbols_en_FM ,
    MINUS_SIGN : NumberFormatSymbols_en_FM ,
    NAN : NumberFormatSymbols_en_FM ,
    PERCENT : NumberFormatSymbols_en_FM ,
    PERCENT_PATTERN : NumberFormatSymbols_en_FM ,
    PERMILL : NumberFormatSymbols_en_FM ,
    PLUS_SIGN : NumberFormatSymbols_en_FM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_FM ,
    ZERO_DIGIT : NumberFormatSymbols_en_FM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_FM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_FM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_FM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_FM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_GB.
   */
  type NumberFormatSymbols_en_GB = string ;
  var NumberFormatSymbols_en_GB : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_GB ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_GB ,
    DECIMAL_SEP : NumberFormatSymbols_en_GB ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_GB ,
    EXP_SYMBOL : NumberFormatSymbols_en_GB ,
    GROUP_SEP : NumberFormatSymbols_en_GB ,
    INFINITY : NumberFormatSymbols_en_GB ,
    MINUS_SIGN : NumberFormatSymbols_en_GB ,
    NAN : NumberFormatSymbols_en_GB ,
    PERCENT : NumberFormatSymbols_en_GB ,
    PERCENT_PATTERN : NumberFormatSymbols_en_GB ,
    PERMILL : NumberFormatSymbols_en_GB ,
    PLUS_SIGN : NumberFormatSymbols_en_GB ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_GB ,
    ZERO_DIGIT : NumberFormatSymbols_en_GB ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_GB'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GB;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_GB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_GD.
   */
  type NumberFormatSymbols_en_GD = string ;
  var NumberFormatSymbols_en_GD : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_GD ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_GD ,
    DECIMAL_SEP : NumberFormatSymbols_en_GD ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_GD ,
    EXP_SYMBOL : NumberFormatSymbols_en_GD ,
    GROUP_SEP : NumberFormatSymbols_en_GD ,
    INFINITY : NumberFormatSymbols_en_GD ,
    MINUS_SIGN : NumberFormatSymbols_en_GD ,
    NAN : NumberFormatSymbols_en_GD ,
    PERCENT : NumberFormatSymbols_en_GD ,
    PERCENT_PATTERN : NumberFormatSymbols_en_GD ,
    PERMILL : NumberFormatSymbols_en_GD ,
    PLUS_SIGN : NumberFormatSymbols_en_GD ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_GD ,
    ZERO_DIGIT : NumberFormatSymbols_en_GD ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_GD'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GD;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_GD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_GG.
   */
  type NumberFormatSymbols_en_GG = string ;
  var NumberFormatSymbols_en_GG : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_GG ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_GG ,
    DECIMAL_SEP : NumberFormatSymbols_en_GG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_GG ,
    EXP_SYMBOL : NumberFormatSymbols_en_GG ,
    GROUP_SEP : NumberFormatSymbols_en_GG ,
    INFINITY : NumberFormatSymbols_en_GG ,
    MINUS_SIGN : NumberFormatSymbols_en_GG ,
    NAN : NumberFormatSymbols_en_GG ,
    PERCENT : NumberFormatSymbols_en_GG ,
    PERCENT_PATTERN : NumberFormatSymbols_en_GG ,
    PERMILL : NumberFormatSymbols_en_GG ,
    PLUS_SIGN : NumberFormatSymbols_en_GG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_GG ,
    ZERO_DIGIT : NumberFormatSymbols_en_GG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_GG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_GG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_GH.
   */
  type NumberFormatSymbols_en_GH = string ;
  var NumberFormatSymbols_en_GH : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_GH ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_GH ,
    DECIMAL_SEP : NumberFormatSymbols_en_GH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_GH ,
    EXP_SYMBOL : NumberFormatSymbols_en_GH ,
    GROUP_SEP : NumberFormatSymbols_en_GH ,
    INFINITY : NumberFormatSymbols_en_GH ,
    MINUS_SIGN : NumberFormatSymbols_en_GH ,
    NAN : NumberFormatSymbols_en_GH ,
    PERCENT : NumberFormatSymbols_en_GH ,
    PERCENT_PATTERN : NumberFormatSymbols_en_GH ,
    PERMILL : NumberFormatSymbols_en_GH ,
    PLUS_SIGN : NumberFormatSymbols_en_GH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_GH ,
    ZERO_DIGIT : NumberFormatSymbols_en_GH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_GH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_GH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_GI.
   */
  type NumberFormatSymbols_en_GI = string ;
  var NumberFormatSymbols_en_GI : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_GI ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_GI ,
    DECIMAL_SEP : NumberFormatSymbols_en_GI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_GI ,
    EXP_SYMBOL : NumberFormatSymbols_en_GI ,
    GROUP_SEP : NumberFormatSymbols_en_GI ,
    INFINITY : NumberFormatSymbols_en_GI ,
    MINUS_SIGN : NumberFormatSymbols_en_GI ,
    NAN : NumberFormatSymbols_en_GI ,
    PERCENT : NumberFormatSymbols_en_GI ,
    PERCENT_PATTERN : NumberFormatSymbols_en_GI ,
    PERMILL : NumberFormatSymbols_en_GI ,
    PLUS_SIGN : NumberFormatSymbols_en_GI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_GI ,
    ZERO_DIGIT : NumberFormatSymbols_en_GI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_GI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_GI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_GM.
   */
  type NumberFormatSymbols_en_GM = string ;
  var NumberFormatSymbols_en_GM : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_GM ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_GM ,
    DECIMAL_SEP : NumberFormatSymbols_en_GM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_GM ,
    EXP_SYMBOL : NumberFormatSymbols_en_GM ,
    GROUP_SEP : NumberFormatSymbols_en_GM ,
    INFINITY : NumberFormatSymbols_en_GM ,
    MINUS_SIGN : NumberFormatSymbols_en_GM ,
    NAN : NumberFormatSymbols_en_GM ,
    PERCENT : NumberFormatSymbols_en_GM ,
    PERCENT_PATTERN : NumberFormatSymbols_en_GM ,
    PERMILL : NumberFormatSymbols_en_GM ,
    PLUS_SIGN : NumberFormatSymbols_en_GM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_GM ,
    ZERO_DIGIT : NumberFormatSymbols_en_GM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_GM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_GM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_GU.
   */
  type NumberFormatSymbols_en_GU = string ;
  var NumberFormatSymbols_en_GU : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_GU ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_GU ,
    DECIMAL_SEP : NumberFormatSymbols_en_GU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_GU ,
    EXP_SYMBOL : NumberFormatSymbols_en_GU ,
    GROUP_SEP : NumberFormatSymbols_en_GU ,
    INFINITY : NumberFormatSymbols_en_GU ,
    MINUS_SIGN : NumberFormatSymbols_en_GU ,
    NAN : NumberFormatSymbols_en_GU ,
    PERCENT : NumberFormatSymbols_en_GU ,
    PERCENT_PATTERN : NumberFormatSymbols_en_GU ,
    PERMILL : NumberFormatSymbols_en_GU ,
    PLUS_SIGN : NumberFormatSymbols_en_GU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_GU ,
    ZERO_DIGIT : NumberFormatSymbols_en_GU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_GU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_GU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_GY.
   */
  type NumberFormatSymbols_en_GY = string ;
  var NumberFormatSymbols_en_GY : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_GY ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_GY ,
    DECIMAL_SEP : NumberFormatSymbols_en_GY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_GY ,
    EXP_SYMBOL : NumberFormatSymbols_en_GY ,
    GROUP_SEP : NumberFormatSymbols_en_GY ,
    INFINITY : NumberFormatSymbols_en_GY ,
    MINUS_SIGN : NumberFormatSymbols_en_GY ,
    NAN : NumberFormatSymbols_en_GY ,
    PERCENT : NumberFormatSymbols_en_GY ,
    PERCENT_PATTERN : NumberFormatSymbols_en_GY ,
    PERMILL : NumberFormatSymbols_en_GY ,
    PLUS_SIGN : NumberFormatSymbols_en_GY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_GY ,
    ZERO_DIGIT : NumberFormatSymbols_en_GY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_GY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_GY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_GY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_HK.
   */
  type NumberFormatSymbols_en_HK = string ;
  var NumberFormatSymbols_en_HK : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_HK ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_HK ,
    DECIMAL_SEP : NumberFormatSymbols_en_HK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_HK ,
    EXP_SYMBOL : NumberFormatSymbols_en_HK ,
    GROUP_SEP : NumberFormatSymbols_en_HK ,
    INFINITY : NumberFormatSymbols_en_HK ,
    MINUS_SIGN : NumberFormatSymbols_en_HK ,
    NAN : NumberFormatSymbols_en_HK ,
    PERCENT : NumberFormatSymbols_en_HK ,
    PERCENT_PATTERN : NumberFormatSymbols_en_HK ,
    PERMILL : NumberFormatSymbols_en_HK ,
    PLUS_SIGN : NumberFormatSymbols_en_HK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_HK ,
    ZERO_DIGIT : NumberFormatSymbols_en_HK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_HK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_HK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_IE.
   */
  type NumberFormatSymbols_en_IE = string ;
  var NumberFormatSymbols_en_IE : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_IE ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_IE ,
    DECIMAL_SEP : NumberFormatSymbols_en_IE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_IE ,
    EXP_SYMBOL : NumberFormatSymbols_en_IE ,
    GROUP_SEP : NumberFormatSymbols_en_IE ,
    INFINITY : NumberFormatSymbols_en_IE ,
    MINUS_SIGN : NumberFormatSymbols_en_IE ,
    NAN : NumberFormatSymbols_en_IE ,
    PERCENT : NumberFormatSymbols_en_IE ,
    PERCENT_PATTERN : NumberFormatSymbols_en_IE ,
    PERMILL : NumberFormatSymbols_en_IE ,
    PLUS_SIGN : NumberFormatSymbols_en_IE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_IE ,
    ZERO_DIGIT : NumberFormatSymbols_en_IE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_IE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_IE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_IE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_IE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_IL.
   */
  type NumberFormatSymbols_en_IL = string ;
  var NumberFormatSymbols_en_IL : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_IL ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_IL ,
    DECIMAL_SEP : NumberFormatSymbols_en_IL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_IL ,
    EXP_SYMBOL : NumberFormatSymbols_en_IL ,
    GROUP_SEP : NumberFormatSymbols_en_IL ,
    INFINITY : NumberFormatSymbols_en_IL ,
    MINUS_SIGN : NumberFormatSymbols_en_IL ,
    NAN : NumberFormatSymbols_en_IL ,
    PERCENT : NumberFormatSymbols_en_IL ,
    PERCENT_PATTERN : NumberFormatSymbols_en_IL ,
    PERMILL : NumberFormatSymbols_en_IL ,
    PLUS_SIGN : NumberFormatSymbols_en_IL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_IL ,
    ZERO_DIGIT : NumberFormatSymbols_en_IL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_IL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_IL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_IL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_IL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_IM.
   */
  type NumberFormatSymbols_en_IM = string ;
  var NumberFormatSymbols_en_IM : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_IM ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_IM ,
    DECIMAL_SEP : NumberFormatSymbols_en_IM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_IM ,
    EXP_SYMBOL : NumberFormatSymbols_en_IM ,
    GROUP_SEP : NumberFormatSymbols_en_IM ,
    INFINITY : NumberFormatSymbols_en_IM ,
    MINUS_SIGN : NumberFormatSymbols_en_IM ,
    NAN : NumberFormatSymbols_en_IM ,
    PERCENT : NumberFormatSymbols_en_IM ,
    PERCENT_PATTERN : NumberFormatSymbols_en_IM ,
    PERMILL : NumberFormatSymbols_en_IM ,
    PLUS_SIGN : NumberFormatSymbols_en_IM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_IM ,
    ZERO_DIGIT : NumberFormatSymbols_en_IM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_IM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_IM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_IM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_IM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_IN.
   */
  type NumberFormatSymbols_en_IN = string ;
  var NumberFormatSymbols_en_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_IN ,
    DECIMAL_SEP : NumberFormatSymbols_en_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_IN ,
    EXP_SYMBOL : NumberFormatSymbols_en_IN ,
    GROUP_SEP : NumberFormatSymbols_en_IN ,
    INFINITY : NumberFormatSymbols_en_IN ,
    MINUS_SIGN : NumberFormatSymbols_en_IN ,
    NAN : NumberFormatSymbols_en_IN ,
    PERCENT : NumberFormatSymbols_en_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_en_IN ,
    PERMILL : NumberFormatSymbols_en_IN ,
    PLUS_SIGN : NumberFormatSymbols_en_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_IN ,
    ZERO_DIGIT : NumberFormatSymbols_en_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_IO.
   */
  type NumberFormatSymbols_en_IO = string ;
  var NumberFormatSymbols_en_IO : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_IO ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_IO ,
    DECIMAL_SEP : NumberFormatSymbols_en_IO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_IO ,
    EXP_SYMBOL : NumberFormatSymbols_en_IO ,
    GROUP_SEP : NumberFormatSymbols_en_IO ,
    INFINITY : NumberFormatSymbols_en_IO ,
    MINUS_SIGN : NumberFormatSymbols_en_IO ,
    NAN : NumberFormatSymbols_en_IO ,
    PERCENT : NumberFormatSymbols_en_IO ,
    PERCENT_PATTERN : NumberFormatSymbols_en_IO ,
    PERMILL : NumberFormatSymbols_en_IO ,
    PLUS_SIGN : NumberFormatSymbols_en_IO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_IO ,
    ZERO_DIGIT : NumberFormatSymbols_en_IO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_IO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_IO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_IO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_IO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_JE.
   */
  type NumberFormatSymbols_en_JE = string ;
  var NumberFormatSymbols_en_JE : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_JE ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_JE ,
    DECIMAL_SEP : NumberFormatSymbols_en_JE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_JE ,
    EXP_SYMBOL : NumberFormatSymbols_en_JE ,
    GROUP_SEP : NumberFormatSymbols_en_JE ,
    INFINITY : NumberFormatSymbols_en_JE ,
    MINUS_SIGN : NumberFormatSymbols_en_JE ,
    NAN : NumberFormatSymbols_en_JE ,
    PERCENT : NumberFormatSymbols_en_JE ,
    PERCENT_PATTERN : NumberFormatSymbols_en_JE ,
    PERMILL : NumberFormatSymbols_en_JE ,
    PLUS_SIGN : NumberFormatSymbols_en_JE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_JE ,
    ZERO_DIGIT : NumberFormatSymbols_en_JE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_JE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_JE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_JE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_JE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_JM.
   */
  type NumberFormatSymbols_en_JM = string ;
  var NumberFormatSymbols_en_JM : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_JM ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_JM ,
    DECIMAL_SEP : NumberFormatSymbols_en_JM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_JM ,
    EXP_SYMBOL : NumberFormatSymbols_en_JM ,
    GROUP_SEP : NumberFormatSymbols_en_JM ,
    INFINITY : NumberFormatSymbols_en_JM ,
    MINUS_SIGN : NumberFormatSymbols_en_JM ,
    NAN : NumberFormatSymbols_en_JM ,
    PERCENT : NumberFormatSymbols_en_JM ,
    PERCENT_PATTERN : NumberFormatSymbols_en_JM ,
    PERMILL : NumberFormatSymbols_en_JM ,
    PLUS_SIGN : NumberFormatSymbols_en_JM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_JM ,
    ZERO_DIGIT : NumberFormatSymbols_en_JM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_JM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_JM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_JM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_JM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_KE.
   */
  type NumberFormatSymbols_en_KE = string ;
  var NumberFormatSymbols_en_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_KE ,
    DECIMAL_SEP : NumberFormatSymbols_en_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_KE ,
    EXP_SYMBOL : NumberFormatSymbols_en_KE ,
    GROUP_SEP : NumberFormatSymbols_en_KE ,
    INFINITY : NumberFormatSymbols_en_KE ,
    MINUS_SIGN : NumberFormatSymbols_en_KE ,
    NAN : NumberFormatSymbols_en_KE ,
    PERCENT : NumberFormatSymbols_en_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_en_KE ,
    PERMILL : NumberFormatSymbols_en_KE ,
    PLUS_SIGN : NumberFormatSymbols_en_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_KE ,
    ZERO_DIGIT : NumberFormatSymbols_en_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_KI.
   */
  type NumberFormatSymbols_en_KI = string ;
  var NumberFormatSymbols_en_KI : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_KI ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_KI ,
    DECIMAL_SEP : NumberFormatSymbols_en_KI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_KI ,
    EXP_SYMBOL : NumberFormatSymbols_en_KI ,
    GROUP_SEP : NumberFormatSymbols_en_KI ,
    INFINITY : NumberFormatSymbols_en_KI ,
    MINUS_SIGN : NumberFormatSymbols_en_KI ,
    NAN : NumberFormatSymbols_en_KI ,
    PERCENT : NumberFormatSymbols_en_KI ,
    PERCENT_PATTERN : NumberFormatSymbols_en_KI ,
    PERMILL : NumberFormatSymbols_en_KI ,
    PLUS_SIGN : NumberFormatSymbols_en_KI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_KI ,
    ZERO_DIGIT : NumberFormatSymbols_en_KI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_KI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_KI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_KI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_KI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_KN.
   */
  type NumberFormatSymbols_en_KN = string ;
  var NumberFormatSymbols_en_KN : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_KN ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_KN ,
    DECIMAL_SEP : NumberFormatSymbols_en_KN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_KN ,
    EXP_SYMBOL : NumberFormatSymbols_en_KN ,
    GROUP_SEP : NumberFormatSymbols_en_KN ,
    INFINITY : NumberFormatSymbols_en_KN ,
    MINUS_SIGN : NumberFormatSymbols_en_KN ,
    NAN : NumberFormatSymbols_en_KN ,
    PERCENT : NumberFormatSymbols_en_KN ,
    PERCENT_PATTERN : NumberFormatSymbols_en_KN ,
    PERMILL : NumberFormatSymbols_en_KN ,
    PLUS_SIGN : NumberFormatSymbols_en_KN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_KN ,
    ZERO_DIGIT : NumberFormatSymbols_en_KN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_KN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_KN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_KN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_KN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_KY.
   */
  type NumberFormatSymbols_en_KY = string ;
  var NumberFormatSymbols_en_KY : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_KY ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_KY ,
    DECIMAL_SEP : NumberFormatSymbols_en_KY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_KY ,
    EXP_SYMBOL : NumberFormatSymbols_en_KY ,
    GROUP_SEP : NumberFormatSymbols_en_KY ,
    INFINITY : NumberFormatSymbols_en_KY ,
    MINUS_SIGN : NumberFormatSymbols_en_KY ,
    NAN : NumberFormatSymbols_en_KY ,
    PERCENT : NumberFormatSymbols_en_KY ,
    PERCENT_PATTERN : NumberFormatSymbols_en_KY ,
    PERMILL : NumberFormatSymbols_en_KY ,
    PLUS_SIGN : NumberFormatSymbols_en_KY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_KY ,
    ZERO_DIGIT : NumberFormatSymbols_en_KY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_KY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_KY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_KY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_KY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_LC.
   */
  type NumberFormatSymbols_en_LC = string ;
  var NumberFormatSymbols_en_LC : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_LC ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_LC ,
    DECIMAL_SEP : NumberFormatSymbols_en_LC ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_LC ,
    EXP_SYMBOL : NumberFormatSymbols_en_LC ,
    GROUP_SEP : NumberFormatSymbols_en_LC ,
    INFINITY : NumberFormatSymbols_en_LC ,
    MINUS_SIGN : NumberFormatSymbols_en_LC ,
    NAN : NumberFormatSymbols_en_LC ,
    PERCENT : NumberFormatSymbols_en_LC ,
    PERCENT_PATTERN : NumberFormatSymbols_en_LC ,
    PERMILL : NumberFormatSymbols_en_LC ,
    PLUS_SIGN : NumberFormatSymbols_en_LC ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_LC ,
    ZERO_DIGIT : NumberFormatSymbols_en_LC ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_LC'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_LC;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_LC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_LC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_LR.
   */
  type NumberFormatSymbols_en_LR = string ;
  var NumberFormatSymbols_en_LR : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_LR ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_LR ,
    DECIMAL_SEP : NumberFormatSymbols_en_LR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_LR ,
    EXP_SYMBOL : NumberFormatSymbols_en_LR ,
    GROUP_SEP : NumberFormatSymbols_en_LR ,
    INFINITY : NumberFormatSymbols_en_LR ,
    MINUS_SIGN : NumberFormatSymbols_en_LR ,
    NAN : NumberFormatSymbols_en_LR ,
    PERCENT : NumberFormatSymbols_en_LR ,
    PERCENT_PATTERN : NumberFormatSymbols_en_LR ,
    PERMILL : NumberFormatSymbols_en_LR ,
    PLUS_SIGN : NumberFormatSymbols_en_LR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_LR ,
    ZERO_DIGIT : NumberFormatSymbols_en_LR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_LR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_LR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_LR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_LR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_LS.
   */
  type NumberFormatSymbols_en_LS = string ;
  var NumberFormatSymbols_en_LS : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_LS ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_LS ,
    DECIMAL_SEP : NumberFormatSymbols_en_LS ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_LS ,
    EXP_SYMBOL : NumberFormatSymbols_en_LS ,
    GROUP_SEP : NumberFormatSymbols_en_LS ,
    INFINITY : NumberFormatSymbols_en_LS ,
    MINUS_SIGN : NumberFormatSymbols_en_LS ,
    NAN : NumberFormatSymbols_en_LS ,
    PERCENT : NumberFormatSymbols_en_LS ,
    PERCENT_PATTERN : NumberFormatSymbols_en_LS ,
    PERMILL : NumberFormatSymbols_en_LS ,
    PLUS_SIGN : NumberFormatSymbols_en_LS ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_LS ,
    ZERO_DIGIT : NumberFormatSymbols_en_LS ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_LS'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_LS;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_LS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_LS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_MG.
   */
  type NumberFormatSymbols_en_MG = string ;
  var NumberFormatSymbols_en_MG : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_MG ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_MG ,
    DECIMAL_SEP : NumberFormatSymbols_en_MG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_MG ,
    EXP_SYMBOL : NumberFormatSymbols_en_MG ,
    GROUP_SEP : NumberFormatSymbols_en_MG ,
    INFINITY : NumberFormatSymbols_en_MG ,
    MINUS_SIGN : NumberFormatSymbols_en_MG ,
    NAN : NumberFormatSymbols_en_MG ,
    PERCENT : NumberFormatSymbols_en_MG ,
    PERCENT_PATTERN : NumberFormatSymbols_en_MG ,
    PERMILL : NumberFormatSymbols_en_MG ,
    PLUS_SIGN : NumberFormatSymbols_en_MG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_MG ,
    ZERO_DIGIT : NumberFormatSymbols_en_MG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_MG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_MG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_MH.
   */
  type NumberFormatSymbols_en_MH = string ;
  var NumberFormatSymbols_en_MH : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_MH ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_MH ,
    DECIMAL_SEP : NumberFormatSymbols_en_MH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_MH ,
    EXP_SYMBOL : NumberFormatSymbols_en_MH ,
    GROUP_SEP : NumberFormatSymbols_en_MH ,
    INFINITY : NumberFormatSymbols_en_MH ,
    MINUS_SIGN : NumberFormatSymbols_en_MH ,
    NAN : NumberFormatSymbols_en_MH ,
    PERCENT : NumberFormatSymbols_en_MH ,
    PERCENT_PATTERN : NumberFormatSymbols_en_MH ,
    PERMILL : NumberFormatSymbols_en_MH ,
    PLUS_SIGN : NumberFormatSymbols_en_MH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_MH ,
    ZERO_DIGIT : NumberFormatSymbols_en_MH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_MH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_MH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_MO.
   */
  type NumberFormatSymbols_en_MO = string ;
  var NumberFormatSymbols_en_MO : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_MO ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_MO ,
    DECIMAL_SEP : NumberFormatSymbols_en_MO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_MO ,
    EXP_SYMBOL : NumberFormatSymbols_en_MO ,
    GROUP_SEP : NumberFormatSymbols_en_MO ,
    INFINITY : NumberFormatSymbols_en_MO ,
    MINUS_SIGN : NumberFormatSymbols_en_MO ,
    NAN : NumberFormatSymbols_en_MO ,
    PERCENT : NumberFormatSymbols_en_MO ,
    PERCENT_PATTERN : NumberFormatSymbols_en_MO ,
    PERMILL : NumberFormatSymbols_en_MO ,
    PLUS_SIGN : NumberFormatSymbols_en_MO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_MO ,
    ZERO_DIGIT : NumberFormatSymbols_en_MO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_MO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_MO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_MP.
   */
  type NumberFormatSymbols_en_MP = string ;
  var NumberFormatSymbols_en_MP : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_MP ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_MP ,
    DECIMAL_SEP : NumberFormatSymbols_en_MP ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_MP ,
    EXP_SYMBOL : NumberFormatSymbols_en_MP ,
    GROUP_SEP : NumberFormatSymbols_en_MP ,
    INFINITY : NumberFormatSymbols_en_MP ,
    MINUS_SIGN : NumberFormatSymbols_en_MP ,
    NAN : NumberFormatSymbols_en_MP ,
    PERCENT : NumberFormatSymbols_en_MP ,
    PERCENT_PATTERN : NumberFormatSymbols_en_MP ,
    PERMILL : NumberFormatSymbols_en_MP ,
    PLUS_SIGN : NumberFormatSymbols_en_MP ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_MP ,
    ZERO_DIGIT : NumberFormatSymbols_en_MP ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_MP'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MP;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_MP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_MS.
   */
  type NumberFormatSymbols_en_MS = string ;
  var NumberFormatSymbols_en_MS : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_MS ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_MS ,
    DECIMAL_SEP : NumberFormatSymbols_en_MS ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_MS ,
    EXP_SYMBOL : NumberFormatSymbols_en_MS ,
    GROUP_SEP : NumberFormatSymbols_en_MS ,
    INFINITY : NumberFormatSymbols_en_MS ,
    MINUS_SIGN : NumberFormatSymbols_en_MS ,
    NAN : NumberFormatSymbols_en_MS ,
    PERCENT : NumberFormatSymbols_en_MS ,
    PERCENT_PATTERN : NumberFormatSymbols_en_MS ,
    PERMILL : NumberFormatSymbols_en_MS ,
    PLUS_SIGN : NumberFormatSymbols_en_MS ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_MS ,
    ZERO_DIGIT : NumberFormatSymbols_en_MS ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_MS'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MS;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_MS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_MT.
   */
  type NumberFormatSymbols_en_MT = string ;
  var NumberFormatSymbols_en_MT : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_MT ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_MT ,
    DECIMAL_SEP : NumberFormatSymbols_en_MT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_MT ,
    EXP_SYMBOL : NumberFormatSymbols_en_MT ,
    GROUP_SEP : NumberFormatSymbols_en_MT ,
    INFINITY : NumberFormatSymbols_en_MT ,
    MINUS_SIGN : NumberFormatSymbols_en_MT ,
    NAN : NumberFormatSymbols_en_MT ,
    PERCENT : NumberFormatSymbols_en_MT ,
    PERCENT_PATTERN : NumberFormatSymbols_en_MT ,
    PERMILL : NumberFormatSymbols_en_MT ,
    PLUS_SIGN : NumberFormatSymbols_en_MT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_MT ,
    ZERO_DIGIT : NumberFormatSymbols_en_MT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_MT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_MT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_MU.
   */
  type NumberFormatSymbols_en_MU = string ;
  var NumberFormatSymbols_en_MU : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_MU ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_MU ,
    DECIMAL_SEP : NumberFormatSymbols_en_MU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_MU ,
    EXP_SYMBOL : NumberFormatSymbols_en_MU ,
    GROUP_SEP : NumberFormatSymbols_en_MU ,
    INFINITY : NumberFormatSymbols_en_MU ,
    MINUS_SIGN : NumberFormatSymbols_en_MU ,
    NAN : NumberFormatSymbols_en_MU ,
    PERCENT : NumberFormatSymbols_en_MU ,
    PERCENT_PATTERN : NumberFormatSymbols_en_MU ,
    PERMILL : NumberFormatSymbols_en_MU ,
    PLUS_SIGN : NumberFormatSymbols_en_MU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_MU ,
    ZERO_DIGIT : NumberFormatSymbols_en_MU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_MU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_MU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_MW.
   */
  type NumberFormatSymbols_en_MW = string ;
  var NumberFormatSymbols_en_MW : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_MW ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_MW ,
    DECIMAL_SEP : NumberFormatSymbols_en_MW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_MW ,
    EXP_SYMBOL : NumberFormatSymbols_en_MW ,
    GROUP_SEP : NumberFormatSymbols_en_MW ,
    INFINITY : NumberFormatSymbols_en_MW ,
    MINUS_SIGN : NumberFormatSymbols_en_MW ,
    NAN : NumberFormatSymbols_en_MW ,
    PERCENT : NumberFormatSymbols_en_MW ,
    PERCENT_PATTERN : NumberFormatSymbols_en_MW ,
    PERMILL : NumberFormatSymbols_en_MW ,
    PLUS_SIGN : NumberFormatSymbols_en_MW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_MW ,
    ZERO_DIGIT : NumberFormatSymbols_en_MW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_MW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_MW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_MY.
   */
  type NumberFormatSymbols_en_MY = string ;
  var NumberFormatSymbols_en_MY : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_MY ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_MY ,
    DECIMAL_SEP : NumberFormatSymbols_en_MY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_MY ,
    EXP_SYMBOL : NumberFormatSymbols_en_MY ,
    GROUP_SEP : NumberFormatSymbols_en_MY ,
    INFINITY : NumberFormatSymbols_en_MY ,
    MINUS_SIGN : NumberFormatSymbols_en_MY ,
    NAN : NumberFormatSymbols_en_MY ,
    PERCENT : NumberFormatSymbols_en_MY ,
    PERCENT_PATTERN : NumberFormatSymbols_en_MY ,
    PERMILL : NumberFormatSymbols_en_MY ,
    PLUS_SIGN : NumberFormatSymbols_en_MY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_MY ,
    ZERO_DIGIT : NumberFormatSymbols_en_MY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_MY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_MY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_MY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_NA.
   */
  type NumberFormatSymbols_en_NA = string ;
  var NumberFormatSymbols_en_NA : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_NA ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_NA ,
    DECIMAL_SEP : NumberFormatSymbols_en_NA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_NA ,
    EXP_SYMBOL : NumberFormatSymbols_en_NA ,
    GROUP_SEP : NumberFormatSymbols_en_NA ,
    INFINITY : NumberFormatSymbols_en_NA ,
    MINUS_SIGN : NumberFormatSymbols_en_NA ,
    NAN : NumberFormatSymbols_en_NA ,
    PERCENT : NumberFormatSymbols_en_NA ,
    PERCENT_PATTERN : NumberFormatSymbols_en_NA ,
    PERMILL : NumberFormatSymbols_en_NA ,
    PLUS_SIGN : NumberFormatSymbols_en_NA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_NA ,
    ZERO_DIGIT : NumberFormatSymbols_en_NA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_NA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_NA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_NF.
   */
  type NumberFormatSymbols_en_NF = string ;
  var NumberFormatSymbols_en_NF : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_NF ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_NF ,
    DECIMAL_SEP : NumberFormatSymbols_en_NF ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_NF ,
    EXP_SYMBOL : NumberFormatSymbols_en_NF ,
    GROUP_SEP : NumberFormatSymbols_en_NF ,
    INFINITY : NumberFormatSymbols_en_NF ,
    MINUS_SIGN : NumberFormatSymbols_en_NF ,
    NAN : NumberFormatSymbols_en_NF ,
    PERCENT : NumberFormatSymbols_en_NF ,
    PERCENT_PATTERN : NumberFormatSymbols_en_NF ,
    PERMILL : NumberFormatSymbols_en_NF ,
    PLUS_SIGN : NumberFormatSymbols_en_NF ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_NF ,
    ZERO_DIGIT : NumberFormatSymbols_en_NF ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_NF'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NF;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_NF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_NG.
   */
  type NumberFormatSymbols_en_NG = string ;
  var NumberFormatSymbols_en_NG : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_NG ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_NG ,
    DECIMAL_SEP : NumberFormatSymbols_en_NG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_NG ,
    EXP_SYMBOL : NumberFormatSymbols_en_NG ,
    GROUP_SEP : NumberFormatSymbols_en_NG ,
    INFINITY : NumberFormatSymbols_en_NG ,
    MINUS_SIGN : NumberFormatSymbols_en_NG ,
    NAN : NumberFormatSymbols_en_NG ,
    PERCENT : NumberFormatSymbols_en_NG ,
    PERCENT_PATTERN : NumberFormatSymbols_en_NG ,
    PERMILL : NumberFormatSymbols_en_NG ,
    PLUS_SIGN : NumberFormatSymbols_en_NG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_NG ,
    ZERO_DIGIT : NumberFormatSymbols_en_NG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_NG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_NG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_NL.
   */
  type NumberFormatSymbols_en_NL = string ;
  var NumberFormatSymbols_en_NL : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_NL ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_NL ,
    DECIMAL_SEP : NumberFormatSymbols_en_NL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_NL ,
    EXP_SYMBOL : NumberFormatSymbols_en_NL ,
    GROUP_SEP : NumberFormatSymbols_en_NL ,
    INFINITY : NumberFormatSymbols_en_NL ,
    MINUS_SIGN : NumberFormatSymbols_en_NL ,
    NAN : NumberFormatSymbols_en_NL ,
    PERCENT : NumberFormatSymbols_en_NL ,
    PERCENT_PATTERN : NumberFormatSymbols_en_NL ,
    PERMILL : NumberFormatSymbols_en_NL ,
    PLUS_SIGN : NumberFormatSymbols_en_NL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_NL ,
    ZERO_DIGIT : NumberFormatSymbols_en_NL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_NL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_NL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_NR.
   */
  type NumberFormatSymbols_en_NR = string ;
  var NumberFormatSymbols_en_NR : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_NR ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_NR ,
    DECIMAL_SEP : NumberFormatSymbols_en_NR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_NR ,
    EXP_SYMBOL : NumberFormatSymbols_en_NR ,
    GROUP_SEP : NumberFormatSymbols_en_NR ,
    INFINITY : NumberFormatSymbols_en_NR ,
    MINUS_SIGN : NumberFormatSymbols_en_NR ,
    NAN : NumberFormatSymbols_en_NR ,
    PERCENT : NumberFormatSymbols_en_NR ,
    PERCENT_PATTERN : NumberFormatSymbols_en_NR ,
    PERMILL : NumberFormatSymbols_en_NR ,
    PLUS_SIGN : NumberFormatSymbols_en_NR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_NR ,
    ZERO_DIGIT : NumberFormatSymbols_en_NR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_NR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_NR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_NU.
   */
  type NumberFormatSymbols_en_NU = string ;
  var NumberFormatSymbols_en_NU : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_NU ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_NU ,
    DECIMAL_SEP : NumberFormatSymbols_en_NU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_NU ,
    EXP_SYMBOL : NumberFormatSymbols_en_NU ,
    GROUP_SEP : NumberFormatSymbols_en_NU ,
    INFINITY : NumberFormatSymbols_en_NU ,
    MINUS_SIGN : NumberFormatSymbols_en_NU ,
    NAN : NumberFormatSymbols_en_NU ,
    PERCENT : NumberFormatSymbols_en_NU ,
    PERCENT_PATTERN : NumberFormatSymbols_en_NU ,
    PERMILL : NumberFormatSymbols_en_NU ,
    PLUS_SIGN : NumberFormatSymbols_en_NU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_NU ,
    ZERO_DIGIT : NumberFormatSymbols_en_NU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_NU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_NU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_NZ.
   */
  type NumberFormatSymbols_en_NZ = string ;
  var NumberFormatSymbols_en_NZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_NZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_NZ ,
    DECIMAL_SEP : NumberFormatSymbols_en_NZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_NZ ,
    EXP_SYMBOL : NumberFormatSymbols_en_NZ ,
    GROUP_SEP : NumberFormatSymbols_en_NZ ,
    INFINITY : NumberFormatSymbols_en_NZ ,
    MINUS_SIGN : NumberFormatSymbols_en_NZ ,
    NAN : NumberFormatSymbols_en_NZ ,
    PERCENT : NumberFormatSymbols_en_NZ ,
    PERCENT_PATTERN : NumberFormatSymbols_en_NZ ,
    PERMILL : NumberFormatSymbols_en_NZ ,
    PLUS_SIGN : NumberFormatSymbols_en_NZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_NZ ,
    ZERO_DIGIT : NumberFormatSymbols_en_NZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_NZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_NZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_NZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_PG.
   */
  type NumberFormatSymbols_en_PG = string ;
  var NumberFormatSymbols_en_PG : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_PG ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_PG ,
    DECIMAL_SEP : NumberFormatSymbols_en_PG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_PG ,
    EXP_SYMBOL : NumberFormatSymbols_en_PG ,
    GROUP_SEP : NumberFormatSymbols_en_PG ,
    INFINITY : NumberFormatSymbols_en_PG ,
    MINUS_SIGN : NumberFormatSymbols_en_PG ,
    NAN : NumberFormatSymbols_en_PG ,
    PERCENT : NumberFormatSymbols_en_PG ,
    PERCENT_PATTERN : NumberFormatSymbols_en_PG ,
    PERMILL : NumberFormatSymbols_en_PG ,
    PLUS_SIGN : NumberFormatSymbols_en_PG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_PG ,
    ZERO_DIGIT : NumberFormatSymbols_en_PG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_PG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_PG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_PG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_PG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_PH.
   */
  type NumberFormatSymbols_en_PH = string ;
  var NumberFormatSymbols_en_PH : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_PH ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_PH ,
    DECIMAL_SEP : NumberFormatSymbols_en_PH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_PH ,
    EXP_SYMBOL : NumberFormatSymbols_en_PH ,
    GROUP_SEP : NumberFormatSymbols_en_PH ,
    INFINITY : NumberFormatSymbols_en_PH ,
    MINUS_SIGN : NumberFormatSymbols_en_PH ,
    NAN : NumberFormatSymbols_en_PH ,
    PERCENT : NumberFormatSymbols_en_PH ,
    PERCENT_PATTERN : NumberFormatSymbols_en_PH ,
    PERMILL : NumberFormatSymbols_en_PH ,
    PLUS_SIGN : NumberFormatSymbols_en_PH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_PH ,
    ZERO_DIGIT : NumberFormatSymbols_en_PH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_PH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_PH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_PH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_PH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_PK.
   */
  type NumberFormatSymbols_en_PK = string ;
  var NumberFormatSymbols_en_PK : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_PK ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_PK ,
    DECIMAL_SEP : NumberFormatSymbols_en_PK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_PK ,
    EXP_SYMBOL : NumberFormatSymbols_en_PK ,
    GROUP_SEP : NumberFormatSymbols_en_PK ,
    INFINITY : NumberFormatSymbols_en_PK ,
    MINUS_SIGN : NumberFormatSymbols_en_PK ,
    NAN : NumberFormatSymbols_en_PK ,
    PERCENT : NumberFormatSymbols_en_PK ,
    PERCENT_PATTERN : NumberFormatSymbols_en_PK ,
    PERMILL : NumberFormatSymbols_en_PK ,
    PLUS_SIGN : NumberFormatSymbols_en_PK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_PK ,
    ZERO_DIGIT : NumberFormatSymbols_en_PK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_PK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_PK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_PK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_PK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_PN.
   */
  type NumberFormatSymbols_en_PN = string ;
  var NumberFormatSymbols_en_PN : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_PN ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_PN ,
    DECIMAL_SEP : NumberFormatSymbols_en_PN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_PN ,
    EXP_SYMBOL : NumberFormatSymbols_en_PN ,
    GROUP_SEP : NumberFormatSymbols_en_PN ,
    INFINITY : NumberFormatSymbols_en_PN ,
    MINUS_SIGN : NumberFormatSymbols_en_PN ,
    NAN : NumberFormatSymbols_en_PN ,
    PERCENT : NumberFormatSymbols_en_PN ,
    PERCENT_PATTERN : NumberFormatSymbols_en_PN ,
    PERMILL : NumberFormatSymbols_en_PN ,
    PLUS_SIGN : NumberFormatSymbols_en_PN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_PN ,
    ZERO_DIGIT : NumberFormatSymbols_en_PN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_PN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_PN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_PN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_PN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_PR.
   */
  type NumberFormatSymbols_en_PR = string ;
  var NumberFormatSymbols_en_PR : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_PR ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_PR ,
    DECIMAL_SEP : NumberFormatSymbols_en_PR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_PR ,
    EXP_SYMBOL : NumberFormatSymbols_en_PR ,
    GROUP_SEP : NumberFormatSymbols_en_PR ,
    INFINITY : NumberFormatSymbols_en_PR ,
    MINUS_SIGN : NumberFormatSymbols_en_PR ,
    NAN : NumberFormatSymbols_en_PR ,
    PERCENT : NumberFormatSymbols_en_PR ,
    PERCENT_PATTERN : NumberFormatSymbols_en_PR ,
    PERMILL : NumberFormatSymbols_en_PR ,
    PLUS_SIGN : NumberFormatSymbols_en_PR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_PR ,
    ZERO_DIGIT : NumberFormatSymbols_en_PR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_PR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_PR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_PR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_PR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_PW.
   */
  type NumberFormatSymbols_en_PW = string ;
  var NumberFormatSymbols_en_PW : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_PW ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_PW ,
    DECIMAL_SEP : NumberFormatSymbols_en_PW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_PW ,
    EXP_SYMBOL : NumberFormatSymbols_en_PW ,
    GROUP_SEP : NumberFormatSymbols_en_PW ,
    INFINITY : NumberFormatSymbols_en_PW ,
    MINUS_SIGN : NumberFormatSymbols_en_PW ,
    NAN : NumberFormatSymbols_en_PW ,
    PERCENT : NumberFormatSymbols_en_PW ,
    PERCENT_PATTERN : NumberFormatSymbols_en_PW ,
    PERMILL : NumberFormatSymbols_en_PW ,
    PLUS_SIGN : NumberFormatSymbols_en_PW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_PW ,
    ZERO_DIGIT : NumberFormatSymbols_en_PW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_PW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_PW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_PW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_PW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_RW.
   */
  type NumberFormatSymbols_en_RW = string ;
  var NumberFormatSymbols_en_RW : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_RW ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_RW ,
    DECIMAL_SEP : NumberFormatSymbols_en_RW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_RW ,
    EXP_SYMBOL : NumberFormatSymbols_en_RW ,
    GROUP_SEP : NumberFormatSymbols_en_RW ,
    INFINITY : NumberFormatSymbols_en_RW ,
    MINUS_SIGN : NumberFormatSymbols_en_RW ,
    NAN : NumberFormatSymbols_en_RW ,
    PERCENT : NumberFormatSymbols_en_RW ,
    PERCENT_PATTERN : NumberFormatSymbols_en_RW ,
    PERMILL : NumberFormatSymbols_en_RW ,
    PLUS_SIGN : NumberFormatSymbols_en_RW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_RW ,
    ZERO_DIGIT : NumberFormatSymbols_en_RW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_RW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_RW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_RW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_RW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_SB.
   */
  type NumberFormatSymbols_en_SB = string ;
  var NumberFormatSymbols_en_SB : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_SB ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_SB ,
    DECIMAL_SEP : NumberFormatSymbols_en_SB ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_SB ,
    EXP_SYMBOL : NumberFormatSymbols_en_SB ,
    GROUP_SEP : NumberFormatSymbols_en_SB ,
    INFINITY : NumberFormatSymbols_en_SB ,
    MINUS_SIGN : NumberFormatSymbols_en_SB ,
    NAN : NumberFormatSymbols_en_SB ,
    PERCENT : NumberFormatSymbols_en_SB ,
    PERCENT_PATTERN : NumberFormatSymbols_en_SB ,
    PERMILL : NumberFormatSymbols_en_SB ,
    PLUS_SIGN : NumberFormatSymbols_en_SB ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_SB ,
    ZERO_DIGIT : NumberFormatSymbols_en_SB ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_SB'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SB;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_SB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_SC.
   */
  type NumberFormatSymbols_en_SC = string ;
  var NumberFormatSymbols_en_SC : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_SC ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_SC ,
    DECIMAL_SEP : NumberFormatSymbols_en_SC ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_SC ,
    EXP_SYMBOL : NumberFormatSymbols_en_SC ,
    GROUP_SEP : NumberFormatSymbols_en_SC ,
    INFINITY : NumberFormatSymbols_en_SC ,
    MINUS_SIGN : NumberFormatSymbols_en_SC ,
    NAN : NumberFormatSymbols_en_SC ,
    PERCENT : NumberFormatSymbols_en_SC ,
    PERCENT_PATTERN : NumberFormatSymbols_en_SC ,
    PERMILL : NumberFormatSymbols_en_SC ,
    PLUS_SIGN : NumberFormatSymbols_en_SC ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_SC ,
    ZERO_DIGIT : NumberFormatSymbols_en_SC ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_SC'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SC;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_SC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_SD.
   */
  type NumberFormatSymbols_en_SD = string ;
  var NumberFormatSymbols_en_SD : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_SD ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_SD ,
    DECIMAL_SEP : NumberFormatSymbols_en_SD ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_SD ,
    EXP_SYMBOL : NumberFormatSymbols_en_SD ,
    GROUP_SEP : NumberFormatSymbols_en_SD ,
    INFINITY : NumberFormatSymbols_en_SD ,
    MINUS_SIGN : NumberFormatSymbols_en_SD ,
    NAN : NumberFormatSymbols_en_SD ,
    PERCENT : NumberFormatSymbols_en_SD ,
    PERCENT_PATTERN : NumberFormatSymbols_en_SD ,
    PERMILL : NumberFormatSymbols_en_SD ,
    PLUS_SIGN : NumberFormatSymbols_en_SD ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_SD ,
    ZERO_DIGIT : NumberFormatSymbols_en_SD ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_SD'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SD;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_SD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_SE.
   */
  type NumberFormatSymbols_en_SE = string ;
  var NumberFormatSymbols_en_SE : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_SE ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_SE ,
    DECIMAL_SEP : NumberFormatSymbols_en_SE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_SE ,
    EXP_SYMBOL : NumberFormatSymbols_en_SE ,
    GROUP_SEP : NumberFormatSymbols_en_SE ,
    INFINITY : NumberFormatSymbols_en_SE ,
    MINUS_SIGN : NumberFormatSymbols_en_SE ,
    NAN : NumberFormatSymbols_en_SE ,
    PERCENT : NumberFormatSymbols_en_SE ,
    PERCENT_PATTERN : NumberFormatSymbols_en_SE ,
    PERMILL : NumberFormatSymbols_en_SE ,
    PLUS_SIGN : NumberFormatSymbols_en_SE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_SE ,
    ZERO_DIGIT : NumberFormatSymbols_en_SE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_SE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_SE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_SG.
   */
  type NumberFormatSymbols_en_SG = string ;
  var NumberFormatSymbols_en_SG : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_SG ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_SG ,
    DECIMAL_SEP : NumberFormatSymbols_en_SG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_SG ,
    EXP_SYMBOL : NumberFormatSymbols_en_SG ,
    GROUP_SEP : NumberFormatSymbols_en_SG ,
    INFINITY : NumberFormatSymbols_en_SG ,
    MINUS_SIGN : NumberFormatSymbols_en_SG ,
    NAN : NumberFormatSymbols_en_SG ,
    PERCENT : NumberFormatSymbols_en_SG ,
    PERCENT_PATTERN : NumberFormatSymbols_en_SG ,
    PERMILL : NumberFormatSymbols_en_SG ,
    PLUS_SIGN : NumberFormatSymbols_en_SG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_SG ,
    ZERO_DIGIT : NumberFormatSymbols_en_SG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_SG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_SG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_SH.
   */
  type NumberFormatSymbols_en_SH = string ;
  var NumberFormatSymbols_en_SH : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_SH ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_SH ,
    DECIMAL_SEP : NumberFormatSymbols_en_SH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_SH ,
    EXP_SYMBOL : NumberFormatSymbols_en_SH ,
    GROUP_SEP : NumberFormatSymbols_en_SH ,
    INFINITY : NumberFormatSymbols_en_SH ,
    MINUS_SIGN : NumberFormatSymbols_en_SH ,
    NAN : NumberFormatSymbols_en_SH ,
    PERCENT : NumberFormatSymbols_en_SH ,
    PERCENT_PATTERN : NumberFormatSymbols_en_SH ,
    PERMILL : NumberFormatSymbols_en_SH ,
    PLUS_SIGN : NumberFormatSymbols_en_SH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_SH ,
    ZERO_DIGIT : NumberFormatSymbols_en_SH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_SH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_SH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_SI.
   */
  type NumberFormatSymbols_en_SI = string ;
  var NumberFormatSymbols_en_SI : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_SI ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_SI ,
    DECIMAL_SEP : NumberFormatSymbols_en_SI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_SI ,
    EXP_SYMBOL : NumberFormatSymbols_en_SI ,
    GROUP_SEP : NumberFormatSymbols_en_SI ,
    INFINITY : NumberFormatSymbols_en_SI ,
    MINUS_SIGN : NumberFormatSymbols_en_SI ,
    NAN : NumberFormatSymbols_en_SI ,
    PERCENT : NumberFormatSymbols_en_SI ,
    PERCENT_PATTERN : NumberFormatSymbols_en_SI ,
    PERMILL : NumberFormatSymbols_en_SI ,
    PLUS_SIGN : NumberFormatSymbols_en_SI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_SI ,
    ZERO_DIGIT : NumberFormatSymbols_en_SI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_SI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_SI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_SL.
   */
  type NumberFormatSymbols_en_SL = string ;
  var NumberFormatSymbols_en_SL : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_SL ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_SL ,
    DECIMAL_SEP : NumberFormatSymbols_en_SL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_SL ,
    EXP_SYMBOL : NumberFormatSymbols_en_SL ,
    GROUP_SEP : NumberFormatSymbols_en_SL ,
    INFINITY : NumberFormatSymbols_en_SL ,
    MINUS_SIGN : NumberFormatSymbols_en_SL ,
    NAN : NumberFormatSymbols_en_SL ,
    PERCENT : NumberFormatSymbols_en_SL ,
    PERCENT_PATTERN : NumberFormatSymbols_en_SL ,
    PERMILL : NumberFormatSymbols_en_SL ,
    PLUS_SIGN : NumberFormatSymbols_en_SL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_SL ,
    ZERO_DIGIT : NumberFormatSymbols_en_SL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_SL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_SL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_SS.
   */
  type NumberFormatSymbols_en_SS = string ;
  var NumberFormatSymbols_en_SS : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_SS ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_SS ,
    DECIMAL_SEP : NumberFormatSymbols_en_SS ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_SS ,
    EXP_SYMBOL : NumberFormatSymbols_en_SS ,
    GROUP_SEP : NumberFormatSymbols_en_SS ,
    INFINITY : NumberFormatSymbols_en_SS ,
    MINUS_SIGN : NumberFormatSymbols_en_SS ,
    NAN : NumberFormatSymbols_en_SS ,
    PERCENT : NumberFormatSymbols_en_SS ,
    PERCENT_PATTERN : NumberFormatSymbols_en_SS ,
    PERMILL : NumberFormatSymbols_en_SS ,
    PLUS_SIGN : NumberFormatSymbols_en_SS ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_SS ,
    ZERO_DIGIT : NumberFormatSymbols_en_SS ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_SS'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SS;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_SS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_SX.
   */
  type NumberFormatSymbols_en_SX = string ;
  var NumberFormatSymbols_en_SX : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_SX ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_SX ,
    DECIMAL_SEP : NumberFormatSymbols_en_SX ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_SX ,
    EXP_SYMBOL : NumberFormatSymbols_en_SX ,
    GROUP_SEP : NumberFormatSymbols_en_SX ,
    INFINITY : NumberFormatSymbols_en_SX ,
    MINUS_SIGN : NumberFormatSymbols_en_SX ,
    NAN : NumberFormatSymbols_en_SX ,
    PERCENT : NumberFormatSymbols_en_SX ,
    PERCENT_PATTERN : NumberFormatSymbols_en_SX ,
    PERMILL : NumberFormatSymbols_en_SX ,
    PLUS_SIGN : NumberFormatSymbols_en_SX ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_SX ,
    ZERO_DIGIT : NumberFormatSymbols_en_SX ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_SX'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SX;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_SX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_SZ.
   */
  type NumberFormatSymbols_en_SZ = string ;
  var NumberFormatSymbols_en_SZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_SZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_SZ ,
    DECIMAL_SEP : NumberFormatSymbols_en_SZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_SZ ,
    EXP_SYMBOL : NumberFormatSymbols_en_SZ ,
    GROUP_SEP : NumberFormatSymbols_en_SZ ,
    INFINITY : NumberFormatSymbols_en_SZ ,
    MINUS_SIGN : NumberFormatSymbols_en_SZ ,
    NAN : NumberFormatSymbols_en_SZ ,
    PERCENT : NumberFormatSymbols_en_SZ ,
    PERCENT_PATTERN : NumberFormatSymbols_en_SZ ,
    PERMILL : NumberFormatSymbols_en_SZ ,
    PLUS_SIGN : NumberFormatSymbols_en_SZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_SZ ,
    ZERO_DIGIT : NumberFormatSymbols_en_SZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_SZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_SZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_SZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_TC.
   */
  type NumberFormatSymbols_en_TC = string ;
  var NumberFormatSymbols_en_TC : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_TC ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_TC ,
    DECIMAL_SEP : NumberFormatSymbols_en_TC ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_TC ,
    EXP_SYMBOL : NumberFormatSymbols_en_TC ,
    GROUP_SEP : NumberFormatSymbols_en_TC ,
    INFINITY : NumberFormatSymbols_en_TC ,
    MINUS_SIGN : NumberFormatSymbols_en_TC ,
    NAN : NumberFormatSymbols_en_TC ,
    PERCENT : NumberFormatSymbols_en_TC ,
    PERCENT_PATTERN : NumberFormatSymbols_en_TC ,
    PERMILL : NumberFormatSymbols_en_TC ,
    PLUS_SIGN : NumberFormatSymbols_en_TC ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_TC ,
    ZERO_DIGIT : NumberFormatSymbols_en_TC ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_TC'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_TC;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_TC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_TC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_TK.
   */
  type NumberFormatSymbols_en_TK = string ;
  var NumberFormatSymbols_en_TK : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_TK ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_TK ,
    DECIMAL_SEP : NumberFormatSymbols_en_TK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_TK ,
    EXP_SYMBOL : NumberFormatSymbols_en_TK ,
    GROUP_SEP : NumberFormatSymbols_en_TK ,
    INFINITY : NumberFormatSymbols_en_TK ,
    MINUS_SIGN : NumberFormatSymbols_en_TK ,
    NAN : NumberFormatSymbols_en_TK ,
    PERCENT : NumberFormatSymbols_en_TK ,
    PERCENT_PATTERN : NumberFormatSymbols_en_TK ,
    PERMILL : NumberFormatSymbols_en_TK ,
    PLUS_SIGN : NumberFormatSymbols_en_TK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_TK ,
    ZERO_DIGIT : NumberFormatSymbols_en_TK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_TK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_TK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_TK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_TK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_TO.
   */
  type NumberFormatSymbols_en_TO = string ;
  var NumberFormatSymbols_en_TO : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_TO ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_TO ,
    DECIMAL_SEP : NumberFormatSymbols_en_TO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_TO ,
    EXP_SYMBOL : NumberFormatSymbols_en_TO ,
    GROUP_SEP : NumberFormatSymbols_en_TO ,
    INFINITY : NumberFormatSymbols_en_TO ,
    MINUS_SIGN : NumberFormatSymbols_en_TO ,
    NAN : NumberFormatSymbols_en_TO ,
    PERCENT : NumberFormatSymbols_en_TO ,
    PERCENT_PATTERN : NumberFormatSymbols_en_TO ,
    PERMILL : NumberFormatSymbols_en_TO ,
    PLUS_SIGN : NumberFormatSymbols_en_TO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_TO ,
    ZERO_DIGIT : NumberFormatSymbols_en_TO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_TO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_TO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_TO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_TO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_TT.
   */
  type NumberFormatSymbols_en_TT = string ;
  var NumberFormatSymbols_en_TT : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_TT ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_TT ,
    DECIMAL_SEP : NumberFormatSymbols_en_TT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_TT ,
    EXP_SYMBOL : NumberFormatSymbols_en_TT ,
    GROUP_SEP : NumberFormatSymbols_en_TT ,
    INFINITY : NumberFormatSymbols_en_TT ,
    MINUS_SIGN : NumberFormatSymbols_en_TT ,
    NAN : NumberFormatSymbols_en_TT ,
    PERCENT : NumberFormatSymbols_en_TT ,
    PERCENT_PATTERN : NumberFormatSymbols_en_TT ,
    PERMILL : NumberFormatSymbols_en_TT ,
    PLUS_SIGN : NumberFormatSymbols_en_TT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_TT ,
    ZERO_DIGIT : NumberFormatSymbols_en_TT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_TT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_TT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_TT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_TT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_TV.
   */
  type NumberFormatSymbols_en_TV = string ;
  var NumberFormatSymbols_en_TV : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_TV ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_TV ,
    DECIMAL_SEP : NumberFormatSymbols_en_TV ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_TV ,
    EXP_SYMBOL : NumberFormatSymbols_en_TV ,
    GROUP_SEP : NumberFormatSymbols_en_TV ,
    INFINITY : NumberFormatSymbols_en_TV ,
    MINUS_SIGN : NumberFormatSymbols_en_TV ,
    NAN : NumberFormatSymbols_en_TV ,
    PERCENT : NumberFormatSymbols_en_TV ,
    PERCENT_PATTERN : NumberFormatSymbols_en_TV ,
    PERMILL : NumberFormatSymbols_en_TV ,
    PLUS_SIGN : NumberFormatSymbols_en_TV ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_TV ,
    ZERO_DIGIT : NumberFormatSymbols_en_TV ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_TV'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_TV;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_TV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_TV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_TZ.
   */
  type NumberFormatSymbols_en_TZ = string ;
  var NumberFormatSymbols_en_TZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_TZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_TZ ,
    DECIMAL_SEP : NumberFormatSymbols_en_TZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_TZ ,
    EXP_SYMBOL : NumberFormatSymbols_en_TZ ,
    GROUP_SEP : NumberFormatSymbols_en_TZ ,
    INFINITY : NumberFormatSymbols_en_TZ ,
    MINUS_SIGN : NumberFormatSymbols_en_TZ ,
    NAN : NumberFormatSymbols_en_TZ ,
    PERCENT : NumberFormatSymbols_en_TZ ,
    PERCENT_PATTERN : NumberFormatSymbols_en_TZ ,
    PERMILL : NumberFormatSymbols_en_TZ ,
    PLUS_SIGN : NumberFormatSymbols_en_TZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_TZ ,
    ZERO_DIGIT : NumberFormatSymbols_en_TZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_TZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_TZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_UG.
   */
  type NumberFormatSymbols_en_UG = string ;
  var NumberFormatSymbols_en_UG : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_UG ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_UG ,
    DECIMAL_SEP : NumberFormatSymbols_en_UG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_UG ,
    EXP_SYMBOL : NumberFormatSymbols_en_UG ,
    GROUP_SEP : NumberFormatSymbols_en_UG ,
    INFINITY : NumberFormatSymbols_en_UG ,
    MINUS_SIGN : NumberFormatSymbols_en_UG ,
    NAN : NumberFormatSymbols_en_UG ,
    PERCENT : NumberFormatSymbols_en_UG ,
    PERCENT_PATTERN : NumberFormatSymbols_en_UG ,
    PERMILL : NumberFormatSymbols_en_UG ,
    PLUS_SIGN : NumberFormatSymbols_en_UG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_UG ,
    ZERO_DIGIT : NumberFormatSymbols_en_UG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_UG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_UG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_UM.
   */
  type NumberFormatSymbols_en_UM = string ;
  var NumberFormatSymbols_en_UM : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_UM ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_UM ,
    DECIMAL_SEP : NumberFormatSymbols_en_UM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_UM ,
    EXP_SYMBOL : NumberFormatSymbols_en_UM ,
    GROUP_SEP : NumberFormatSymbols_en_UM ,
    INFINITY : NumberFormatSymbols_en_UM ,
    MINUS_SIGN : NumberFormatSymbols_en_UM ,
    NAN : NumberFormatSymbols_en_UM ,
    PERCENT : NumberFormatSymbols_en_UM ,
    PERCENT_PATTERN : NumberFormatSymbols_en_UM ,
    PERMILL : NumberFormatSymbols_en_UM ,
    PLUS_SIGN : NumberFormatSymbols_en_UM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_UM ,
    ZERO_DIGIT : NumberFormatSymbols_en_UM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_UM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_UM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_UM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_UM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_US.
   */
  type NumberFormatSymbols_en_US = string ;
  var NumberFormatSymbols_en_US : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_US ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_US ,
    DECIMAL_SEP : NumberFormatSymbols_en_US ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_US ,
    EXP_SYMBOL : NumberFormatSymbols_en_US ,
    GROUP_SEP : NumberFormatSymbols_en_US ,
    INFINITY : NumberFormatSymbols_en_US ,
    MINUS_SIGN : NumberFormatSymbols_en_US ,
    NAN : NumberFormatSymbols_en_US ,
    PERCENT : NumberFormatSymbols_en_US ,
    PERCENT_PATTERN : NumberFormatSymbols_en_US ,
    PERMILL : NumberFormatSymbols_en_US ,
    PLUS_SIGN : NumberFormatSymbols_en_US ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_US ,
    ZERO_DIGIT : NumberFormatSymbols_en_US ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_US'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_US;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_VC.
   */
  type NumberFormatSymbols_en_VC = string ;
  var NumberFormatSymbols_en_VC : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_VC ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_VC ,
    DECIMAL_SEP : NumberFormatSymbols_en_VC ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_VC ,
    EXP_SYMBOL : NumberFormatSymbols_en_VC ,
    GROUP_SEP : NumberFormatSymbols_en_VC ,
    INFINITY : NumberFormatSymbols_en_VC ,
    MINUS_SIGN : NumberFormatSymbols_en_VC ,
    NAN : NumberFormatSymbols_en_VC ,
    PERCENT : NumberFormatSymbols_en_VC ,
    PERCENT_PATTERN : NumberFormatSymbols_en_VC ,
    PERMILL : NumberFormatSymbols_en_VC ,
    PLUS_SIGN : NumberFormatSymbols_en_VC ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_VC ,
    ZERO_DIGIT : NumberFormatSymbols_en_VC ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_VC'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_VC;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_VC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_VC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_VG.
   */
  type NumberFormatSymbols_en_VG = string ;
  var NumberFormatSymbols_en_VG : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_VG ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_VG ,
    DECIMAL_SEP : NumberFormatSymbols_en_VG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_VG ,
    EXP_SYMBOL : NumberFormatSymbols_en_VG ,
    GROUP_SEP : NumberFormatSymbols_en_VG ,
    INFINITY : NumberFormatSymbols_en_VG ,
    MINUS_SIGN : NumberFormatSymbols_en_VG ,
    NAN : NumberFormatSymbols_en_VG ,
    PERCENT : NumberFormatSymbols_en_VG ,
    PERCENT_PATTERN : NumberFormatSymbols_en_VG ,
    PERMILL : NumberFormatSymbols_en_VG ,
    PLUS_SIGN : NumberFormatSymbols_en_VG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_VG ,
    ZERO_DIGIT : NumberFormatSymbols_en_VG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_VG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_VG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_VG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_VG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_VI.
   */
  type NumberFormatSymbols_en_VI = string ;
  var NumberFormatSymbols_en_VI : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_VI ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_VI ,
    DECIMAL_SEP : NumberFormatSymbols_en_VI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_VI ,
    EXP_SYMBOL : NumberFormatSymbols_en_VI ,
    GROUP_SEP : NumberFormatSymbols_en_VI ,
    INFINITY : NumberFormatSymbols_en_VI ,
    MINUS_SIGN : NumberFormatSymbols_en_VI ,
    NAN : NumberFormatSymbols_en_VI ,
    PERCENT : NumberFormatSymbols_en_VI ,
    PERCENT_PATTERN : NumberFormatSymbols_en_VI ,
    PERMILL : NumberFormatSymbols_en_VI ,
    PLUS_SIGN : NumberFormatSymbols_en_VI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_VI ,
    ZERO_DIGIT : NumberFormatSymbols_en_VI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_VI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_VI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_VI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_VI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_VU.
   */
  type NumberFormatSymbols_en_VU = string ;
  var NumberFormatSymbols_en_VU : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_VU ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_VU ,
    DECIMAL_SEP : NumberFormatSymbols_en_VU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_VU ,
    EXP_SYMBOL : NumberFormatSymbols_en_VU ,
    GROUP_SEP : NumberFormatSymbols_en_VU ,
    INFINITY : NumberFormatSymbols_en_VU ,
    MINUS_SIGN : NumberFormatSymbols_en_VU ,
    NAN : NumberFormatSymbols_en_VU ,
    PERCENT : NumberFormatSymbols_en_VU ,
    PERCENT_PATTERN : NumberFormatSymbols_en_VU ,
    PERMILL : NumberFormatSymbols_en_VU ,
    PLUS_SIGN : NumberFormatSymbols_en_VU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_VU ,
    ZERO_DIGIT : NumberFormatSymbols_en_VU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_VU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_VU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_VU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_VU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_WS.
   */
  type NumberFormatSymbols_en_WS = string ;
  var NumberFormatSymbols_en_WS : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_WS ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_WS ,
    DECIMAL_SEP : NumberFormatSymbols_en_WS ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_WS ,
    EXP_SYMBOL : NumberFormatSymbols_en_WS ,
    GROUP_SEP : NumberFormatSymbols_en_WS ,
    INFINITY : NumberFormatSymbols_en_WS ,
    MINUS_SIGN : NumberFormatSymbols_en_WS ,
    NAN : NumberFormatSymbols_en_WS ,
    PERCENT : NumberFormatSymbols_en_WS ,
    PERCENT_PATTERN : NumberFormatSymbols_en_WS ,
    PERMILL : NumberFormatSymbols_en_WS ,
    PLUS_SIGN : NumberFormatSymbols_en_WS ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_WS ,
    ZERO_DIGIT : NumberFormatSymbols_en_WS ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_WS'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_WS;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_WS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_WS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_XA.
   */
  type NumberFormatSymbols_en_XA = string ;
  var NumberFormatSymbols_en_XA : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_XA ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_XA ,
    DECIMAL_SEP : NumberFormatSymbols_en_XA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_XA ,
    EXP_SYMBOL : NumberFormatSymbols_en_XA ,
    GROUP_SEP : NumberFormatSymbols_en_XA ,
    INFINITY : NumberFormatSymbols_en_XA ,
    MINUS_SIGN : NumberFormatSymbols_en_XA ,
    NAN : NumberFormatSymbols_en_XA ,
    PERCENT : NumberFormatSymbols_en_XA ,
    PERCENT_PATTERN : NumberFormatSymbols_en_XA ,
    PERMILL : NumberFormatSymbols_en_XA ,
    PLUS_SIGN : NumberFormatSymbols_en_XA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_XA ,
    ZERO_DIGIT : NumberFormatSymbols_en_XA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_XA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_XA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_XA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_XA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_ZA.
   */
  type NumberFormatSymbols_en_ZA = string ;
  var NumberFormatSymbols_en_ZA : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_ZA ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_ZA ,
    DECIMAL_SEP : NumberFormatSymbols_en_ZA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_ZA ,
    EXP_SYMBOL : NumberFormatSymbols_en_ZA ,
    GROUP_SEP : NumberFormatSymbols_en_ZA ,
    INFINITY : NumberFormatSymbols_en_ZA ,
    MINUS_SIGN : NumberFormatSymbols_en_ZA ,
    NAN : NumberFormatSymbols_en_ZA ,
    PERCENT : NumberFormatSymbols_en_ZA ,
    PERCENT_PATTERN : NumberFormatSymbols_en_ZA ,
    PERMILL : NumberFormatSymbols_en_ZA ,
    PLUS_SIGN : NumberFormatSymbols_en_ZA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_ZA ,
    ZERO_DIGIT : NumberFormatSymbols_en_ZA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_ZA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_ZA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_ZA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_ZA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_ZM.
   */
  type NumberFormatSymbols_en_ZM = string ;
  var NumberFormatSymbols_en_ZM : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_ZM ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_ZM ,
    DECIMAL_SEP : NumberFormatSymbols_en_ZM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_ZM ,
    EXP_SYMBOL : NumberFormatSymbols_en_ZM ,
    GROUP_SEP : NumberFormatSymbols_en_ZM ,
    INFINITY : NumberFormatSymbols_en_ZM ,
    MINUS_SIGN : NumberFormatSymbols_en_ZM ,
    NAN : NumberFormatSymbols_en_ZM ,
    PERCENT : NumberFormatSymbols_en_ZM ,
    PERCENT_PATTERN : NumberFormatSymbols_en_ZM ,
    PERMILL : NumberFormatSymbols_en_ZM ,
    PLUS_SIGN : NumberFormatSymbols_en_ZM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_ZM ,
    ZERO_DIGIT : NumberFormatSymbols_en_ZM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_ZM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_ZM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_ZM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_ZM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale en_ZW.
   */
  type NumberFormatSymbols_en_ZW = string ;
  var NumberFormatSymbols_en_ZW : {
    CURRENCY_PATTERN : NumberFormatSymbols_en_ZW ,
    DECIMAL_PATTERN : NumberFormatSymbols_en_ZW ,
    DECIMAL_SEP : NumberFormatSymbols_en_ZW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_en_ZW ,
    EXP_SYMBOL : NumberFormatSymbols_en_ZW ,
    GROUP_SEP : NumberFormatSymbols_en_ZW ,
    INFINITY : NumberFormatSymbols_en_ZW ,
    MINUS_SIGN : NumberFormatSymbols_en_ZW ,
    NAN : NumberFormatSymbols_en_ZW ,
    PERCENT : NumberFormatSymbols_en_ZW ,
    PERCENT_PATTERN : NumberFormatSymbols_en_ZW ,
    PERMILL : NumberFormatSymbols_en_ZW ,
    PLUS_SIGN : NumberFormatSymbols_en_ZW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_en_ZW ,
    ZERO_DIGIT : NumberFormatSymbols_en_ZW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_en_ZW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_ZW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_en_ZW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_en_ZW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale eo.
   */
  type NumberFormatSymbols_eo = string ;
  var NumberFormatSymbols_eo : {
    CURRENCY_PATTERN : NumberFormatSymbols_eo ,
    DECIMAL_PATTERN : NumberFormatSymbols_eo ,
    DECIMAL_SEP : NumberFormatSymbols_eo ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_eo ,
    EXP_SYMBOL : NumberFormatSymbols_eo ,
    GROUP_SEP : NumberFormatSymbols_eo ,
    INFINITY : NumberFormatSymbols_eo ,
    MINUS_SIGN : NumberFormatSymbols_eo ,
    NAN : NumberFormatSymbols_eo ,
    PERCENT : NumberFormatSymbols_eo ,
    PERCENT_PATTERN : NumberFormatSymbols_eo ,
    PERMILL : NumberFormatSymbols_eo ,
    PLUS_SIGN : NumberFormatSymbols_eo ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_eo ,
    ZERO_DIGIT : NumberFormatSymbols_eo ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_eo'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_eo;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_eo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_eo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale eo_001.
   */
  type NumberFormatSymbols_eo_001 = string ;
  var NumberFormatSymbols_eo_001 : {
    CURRENCY_PATTERN : NumberFormatSymbols_eo_001 ,
    DECIMAL_PATTERN : NumberFormatSymbols_eo_001 ,
    DECIMAL_SEP : NumberFormatSymbols_eo_001 ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_eo_001 ,
    EXP_SYMBOL : NumberFormatSymbols_eo_001 ,
    GROUP_SEP : NumberFormatSymbols_eo_001 ,
    INFINITY : NumberFormatSymbols_eo_001 ,
    MINUS_SIGN : NumberFormatSymbols_eo_001 ,
    NAN : NumberFormatSymbols_eo_001 ,
    PERCENT : NumberFormatSymbols_eo_001 ,
    PERCENT_PATTERN : NumberFormatSymbols_eo_001 ,
    PERMILL : NumberFormatSymbols_eo_001 ,
    PLUS_SIGN : NumberFormatSymbols_eo_001 ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_eo_001 ,
    ZERO_DIGIT : NumberFormatSymbols_eo_001 ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_eo_001'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_eo_001;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_eo_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_eo_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es.
   */
  type NumberFormatSymbols_es = string ;
  var NumberFormatSymbols_es : {
    CURRENCY_PATTERN : NumberFormatSymbols_es ,
    DECIMAL_PATTERN : NumberFormatSymbols_es ,
    DECIMAL_SEP : NumberFormatSymbols_es ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es ,
    EXP_SYMBOL : NumberFormatSymbols_es ,
    GROUP_SEP : NumberFormatSymbols_es ,
    INFINITY : NumberFormatSymbols_es ,
    MINUS_SIGN : NumberFormatSymbols_es ,
    NAN : NumberFormatSymbols_es ,
    PERCENT : NumberFormatSymbols_es ,
    PERCENT_PATTERN : NumberFormatSymbols_es ,
    PERMILL : NumberFormatSymbols_es ,
    PLUS_SIGN : NumberFormatSymbols_es ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es ,
    ZERO_DIGIT : NumberFormatSymbols_es ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_419.
   */
  type NumberFormatSymbols_es_419 = string ;
  var NumberFormatSymbols_es_419 : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_419 ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_419 ,
    DECIMAL_SEP : NumberFormatSymbols_es_419 ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_419 ,
    EXP_SYMBOL : NumberFormatSymbols_es_419 ,
    GROUP_SEP : NumberFormatSymbols_es_419 ,
    INFINITY : NumberFormatSymbols_es_419 ,
    MINUS_SIGN : NumberFormatSymbols_es_419 ,
    NAN : NumberFormatSymbols_es_419 ,
    PERCENT : NumberFormatSymbols_es_419 ,
    PERCENT_PATTERN : NumberFormatSymbols_es_419 ,
    PERMILL : NumberFormatSymbols_es_419 ,
    PLUS_SIGN : NumberFormatSymbols_es_419 ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_419 ,
    ZERO_DIGIT : NumberFormatSymbols_es_419 ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_419'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_419;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_419' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_419;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_AR.
   */
  type NumberFormatSymbols_es_AR = string ;
  var NumberFormatSymbols_es_AR : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_AR ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_AR ,
    DECIMAL_SEP : NumberFormatSymbols_es_AR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_AR ,
    EXP_SYMBOL : NumberFormatSymbols_es_AR ,
    GROUP_SEP : NumberFormatSymbols_es_AR ,
    INFINITY : NumberFormatSymbols_es_AR ,
    MINUS_SIGN : NumberFormatSymbols_es_AR ,
    NAN : NumberFormatSymbols_es_AR ,
    PERCENT : NumberFormatSymbols_es_AR ,
    PERCENT_PATTERN : NumberFormatSymbols_es_AR ,
    PERMILL : NumberFormatSymbols_es_AR ,
    PLUS_SIGN : NumberFormatSymbols_es_AR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_AR ,
    ZERO_DIGIT : NumberFormatSymbols_es_AR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_AR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_AR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_AR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_AR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_BO.
   */
  type NumberFormatSymbols_es_BO = string ;
  var NumberFormatSymbols_es_BO : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_BO ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_BO ,
    DECIMAL_SEP : NumberFormatSymbols_es_BO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_BO ,
    EXP_SYMBOL : NumberFormatSymbols_es_BO ,
    GROUP_SEP : NumberFormatSymbols_es_BO ,
    INFINITY : NumberFormatSymbols_es_BO ,
    MINUS_SIGN : NumberFormatSymbols_es_BO ,
    NAN : NumberFormatSymbols_es_BO ,
    PERCENT : NumberFormatSymbols_es_BO ,
    PERCENT_PATTERN : NumberFormatSymbols_es_BO ,
    PERMILL : NumberFormatSymbols_es_BO ,
    PLUS_SIGN : NumberFormatSymbols_es_BO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_BO ,
    ZERO_DIGIT : NumberFormatSymbols_es_BO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_BO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_BO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_BO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_BO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_BR.
   */
  type NumberFormatSymbols_es_BR = string ;
  var NumberFormatSymbols_es_BR : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_BR ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_BR ,
    DECIMAL_SEP : NumberFormatSymbols_es_BR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_BR ,
    EXP_SYMBOL : NumberFormatSymbols_es_BR ,
    GROUP_SEP : NumberFormatSymbols_es_BR ,
    INFINITY : NumberFormatSymbols_es_BR ,
    MINUS_SIGN : NumberFormatSymbols_es_BR ,
    NAN : NumberFormatSymbols_es_BR ,
    PERCENT : NumberFormatSymbols_es_BR ,
    PERCENT_PATTERN : NumberFormatSymbols_es_BR ,
    PERMILL : NumberFormatSymbols_es_BR ,
    PLUS_SIGN : NumberFormatSymbols_es_BR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_BR ,
    ZERO_DIGIT : NumberFormatSymbols_es_BR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_BR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_BR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_BR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_BR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_CL.
   */
  type NumberFormatSymbols_es_CL = string ;
  var NumberFormatSymbols_es_CL : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_CL ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_CL ,
    DECIMAL_SEP : NumberFormatSymbols_es_CL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_CL ,
    EXP_SYMBOL : NumberFormatSymbols_es_CL ,
    GROUP_SEP : NumberFormatSymbols_es_CL ,
    INFINITY : NumberFormatSymbols_es_CL ,
    MINUS_SIGN : NumberFormatSymbols_es_CL ,
    NAN : NumberFormatSymbols_es_CL ,
    PERCENT : NumberFormatSymbols_es_CL ,
    PERCENT_PATTERN : NumberFormatSymbols_es_CL ,
    PERMILL : NumberFormatSymbols_es_CL ,
    PLUS_SIGN : NumberFormatSymbols_es_CL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_CL ,
    ZERO_DIGIT : NumberFormatSymbols_es_CL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_CL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_CL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_CL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_CL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_CO.
   */
  type NumberFormatSymbols_es_CO = string ;
  var NumberFormatSymbols_es_CO : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_CO ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_CO ,
    DECIMAL_SEP : NumberFormatSymbols_es_CO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_CO ,
    EXP_SYMBOL : NumberFormatSymbols_es_CO ,
    GROUP_SEP : NumberFormatSymbols_es_CO ,
    INFINITY : NumberFormatSymbols_es_CO ,
    MINUS_SIGN : NumberFormatSymbols_es_CO ,
    NAN : NumberFormatSymbols_es_CO ,
    PERCENT : NumberFormatSymbols_es_CO ,
    PERCENT_PATTERN : NumberFormatSymbols_es_CO ,
    PERMILL : NumberFormatSymbols_es_CO ,
    PLUS_SIGN : NumberFormatSymbols_es_CO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_CO ,
    ZERO_DIGIT : NumberFormatSymbols_es_CO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_CO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_CO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_CO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_CO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_CR.
   */
  type NumberFormatSymbols_es_CR = string ;
  var NumberFormatSymbols_es_CR : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_CR ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_CR ,
    DECIMAL_SEP : NumberFormatSymbols_es_CR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_CR ,
    EXP_SYMBOL : NumberFormatSymbols_es_CR ,
    GROUP_SEP : NumberFormatSymbols_es_CR ,
    INFINITY : NumberFormatSymbols_es_CR ,
    MINUS_SIGN : NumberFormatSymbols_es_CR ,
    NAN : NumberFormatSymbols_es_CR ,
    PERCENT : NumberFormatSymbols_es_CR ,
    PERCENT_PATTERN : NumberFormatSymbols_es_CR ,
    PERMILL : NumberFormatSymbols_es_CR ,
    PLUS_SIGN : NumberFormatSymbols_es_CR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_CR ,
    ZERO_DIGIT : NumberFormatSymbols_es_CR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_CR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_CR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_CR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_CR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_CU.
   */
  type NumberFormatSymbols_es_CU = string ;
  var NumberFormatSymbols_es_CU : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_CU ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_CU ,
    DECIMAL_SEP : NumberFormatSymbols_es_CU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_CU ,
    EXP_SYMBOL : NumberFormatSymbols_es_CU ,
    GROUP_SEP : NumberFormatSymbols_es_CU ,
    INFINITY : NumberFormatSymbols_es_CU ,
    MINUS_SIGN : NumberFormatSymbols_es_CU ,
    NAN : NumberFormatSymbols_es_CU ,
    PERCENT : NumberFormatSymbols_es_CU ,
    PERCENT_PATTERN : NumberFormatSymbols_es_CU ,
    PERMILL : NumberFormatSymbols_es_CU ,
    PLUS_SIGN : NumberFormatSymbols_es_CU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_CU ,
    ZERO_DIGIT : NumberFormatSymbols_es_CU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_CU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_CU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_CU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_CU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_DO.
   */
  type NumberFormatSymbols_es_DO = string ;
  var NumberFormatSymbols_es_DO : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_DO ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_DO ,
    DECIMAL_SEP : NumberFormatSymbols_es_DO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_DO ,
    EXP_SYMBOL : NumberFormatSymbols_es_DO ,
    GROUP_SEP : NumberFormatSymbols_es_DO ,
    INFINITY : NumberFormatSymbols_es_DO ,
    MINUS_SIGN : NumberFormatSymbols_es_DO ,
    NAN : NumberFormatSymbols_es_DO ,
    PERCENT : NumberFormatSymbols_es_DO ,
    PERCENT_PATTERN : NumberFormatSymbols_es_DO ,
    PERMILL : NumberFormatSymbols_es_DO ,
    PLUS_SIGN : NumberFormatSymbols_es_DO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_DO ,
    ZERO_DIGIT : NumberFormatSymbols_es_DO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_DO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_DO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_DO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_DO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_EA.
   */
  type NumberFormatSymbols_es_EA = string ;
  var NumberFormatSymbols_es_EA : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_EA ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_EA ,
    DECIMAL_SEP : NumberFormatSymbols_es_EA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_EA ,
    EXP_SYMBOL : NumberFormatSymbols_es_EA ,
    GROUP_SEP : NumberFormatSymbols_es_EA ,
    INFINITY : NumberFormatSymbols_es_EA ,
    MINUS_SIGN : NumberFormatSymbols_es_EA ,
    NAN : NumberFormatSymbols_es_EA ,
    PERCENT : NumberFormatSymbols_es_EA ,
    PERCENT_PATTERN : NumberFormatSymbols_es_EA ,
    PERMILL : NumberFormatSymbols_es_EA ,
    PLUS_SIGN : NumberFormatSymbols_es_EA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_EA ,
    ZERO_DIGIT : NumberFormatSymbols_es_EA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_EA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_EA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_EA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_EA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_EC.
   */
  type NumberFormatSymbols_es_EC = string ;
  var NumberFormatSymbols_es_EC : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_EC ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_EC ,
    DECIMAL_SEP : NumberFormatSymbols_es_EC ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_EC ,
    EXP_SYMBOL : NumberFormatSymbols_es_EC ,
    GROUP_SEP : NumberFormatSymbols_es_EC ,
    INFINITY : NumberFormatSymbols_es_EC ,
    MINUS_SIGN : NumberFormatSymbols_es_EC ,
    NAN : NumberFormatSymbols_es_EC ,
    PERCENT : NumberFormatSymbols_es_EC ,
    PERCENT_PATTERN : NumberFormatSymbols_es_EC ,
    PERMILL : NumberFormatSymbols_es_EC ,
    PLUS_SIGN : NumberFormatSymbols_es_EC ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_EC ,
    ZERO_DIGIT : NumberFormatSymbols_es_EC ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_EC'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_EC;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_EC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_EC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_ES.
   */
  type NumberFormatSymbols_es_ES = string ;
  var NumberFormatSymbols_es_ES : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_ES ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_ES ,
    DECIMAL_SEP : NumberFormatSymbols_es_ES ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_ES ,
    EXP_SYMBOL : NumberFormatSymbols_es_ES ,
    GROUP_SEP : NumberFormatSymbols_es_ES ,
    INFINITY : NumberFormatSymbols_es_ES ,
    MINUS_SIGN : NumberFormatSymbols_es_ES ,
    NAN : NumberFormatSymbols_es_ES ,
    PERCENT : NumberFormatSymbols_es_ES ,
    PERCENT_PATTERN : NumberFormatSymbols_es_ES ,
    PERMILL : NumberFormatSymbols_es_ES ,
    PLUS_SIGN : NumberFormatSymbols_es_ES ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_ES ,
    ZERO_DIGIT : NumberFormatSymbols_es_ES ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_ES'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_ES;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_GQ.
   */
  type NumberFormatSymbols_es_GQ = string ;
  var NumberFormatSymbols_es_GQ : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_GQ ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_GQ ,
    DECIMAL_SEP : NumberFormatSymbols_es_GQ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_GQ ,
    EXP_SYMBOL : NumberFormatSymbols_es_GQ ,
    GROUP_SEP : NumberFormatSymbols_es_GQ ,
    INFINITY : NumberFormatSymbols_es_GQ ,
    MINUS_SIGN : NumberFormatSymbols_es_GQ ,
    NAN : NumberFormatSymbols_es_GQ ,
    PERCENT : NumberFormatSymbols_es_GQ ,
    PERCENT_PATTERN : NumberFormatSymbols_es_GQ ,
    PERMILL : NumberFormatSymbols_es_GQ ,
    PLUS_SIGN : NumberFormatSymbols_es_GQ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_GQ ,
    ZERO_DIGIT : NumberFormatSymbols_es_GQ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_GQ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_GQ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_GQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_GQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_GT.
   */
  type NumberFormatSymbols_es_GT = string ;
  var NumberFormatSymbols_es_GT : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_GT ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_GT ,
    DECIMAL_SEP : NumberFormatSymbols_es_GT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_GT ,
    EXP_SYMBOL : NumberFormatSymbols_es_GT ,
    GROUP_SEP : NumberFormatSymbols_es_GT ,
    INFINITY : NumberFormatSymbols_es_GT ,
    MINUS_SIGN : NumberFormatSymbols_es_GT ,
    NAN : NumberFormatSymbols_es_GT ,
    PERCENT : NumberFormatSymbols_es_GT ,
    PERCENT_PATTERN : NumberFormatSymbols_es_GT ,
    PERMILL : NumberFormatSymbols_es_GT ,
    PLUS_SIGN : NumberFormatSymbols_es_GT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_GT ,
    ZERO_DIGIT : NumberFormatSymbols_es_GT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_GT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_GT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_GT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_GT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_HN.
   */
  type NumberFormatSymbols_es_HN = string ;
  var NumberFormatSymbols_es_HN : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_HN ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_HN ,
    DECIMAL_SEP : NumberFormatSymbols_es_HN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_HN ,
    EXP_SYMBOL : NumberFormatSymbols_es_HN ,
    GROUP_SEP : NumberFormatSymbols_es_HN ,
    INFINITY : NumberFormatSymbols_es_HN ,
    MINUS_SIGN : NumberFormatSymbols_es_HN ,
    NAN : NumberFormatSymbols_es_HN ,
    PERCENT : NumberFormatSymbols_es_HN ,
    PERCENT_PATTERN : NumberFormatSymbols_es_HN ,
    PERMILL : NumberFormatSymbols_es_HN ,
    PLUS_SIGN : NumberFormatSymbols_es_HN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_HN ,
    ZERO_DIGIT : NumberFormatSymbols_es_HN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_HN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_HN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_HN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_HN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_IC.
   */
  type NumberFormatSymbols_es_IC = string ;
  var NumberFormatSymbols_es_IC : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_IC ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_IC ,
    DECIMAL_SEP : NumberFormatSymbols_es_IC ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_IC ,
    EXP_SYMBOL : NumberFormatSymbols_es_IC ,
    GROUP_SEP : NumberFormatSymbols_es_IC ,
    INFINITY : NumberFormatSymbols_es_IC ,
    MINUS_SIGN : NumberFormatSymbols_es_IC ,
    NAN : NumberFormatSymbols_es_IC ,
    PERCENT : NumberFormatSymbols_es_IC ,
    PERCENT_PATTERN : NumberFormatSymbols_es_IC ,
    PERMILL : NumberFormatSymbols_es_IC ,
    PLUS_SIGN : NumberFormatSymbols_es_IC ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_IC ,
    ZERO_DIGIT : NumberFormatSymbols_es_IC ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_IC'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_IC;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_IC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_IC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_MX.
   */
  type NumberFormatSymbols_es_MX = string ;
  var NumberFormatSymbols_es_MX : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_MX ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_MX ,
    DECIMAL_SEP : NumberFormatSymbols_es_MX ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_MX ,
    EXP_SYMBOL : NumberFormatSymbols_es_MX ,
    GROUP_SEP : NumberFormatSymbols_es_MX ,
    INFINITY : NumberFormatSymbols_es_MX ,
    MINUS_SIGN : NumberFormatSymbols_es_MX ,
    NAN : NumberFormatSymbols_es_MX ,
    PERCENT : NumberFormatSymbols_es_MX ,
    PERCENT_PATTERN : NumberFormatSymbols_es_MX ,
    PERMILL : NumberFormatSymbols_es_MX ,
    PLUS_SIGN : NumberFormatSymbols_es_MX ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_MX ,
    ZERO_DIGIT : NumberFormatSymbols_es_MX ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_MX'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_MX;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_MX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_MX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_NI.
   */
  type NumberFormatSymbols_es_NI = string ;
  var NumberFormatSymbols_es_NI : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_NI ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_NI ,
    DECIMAL_SEP : NumberFormatSymbols_es_NI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_NI ,
    EXP_SYMBOL : NumberFormatSymbols_es_NI ,
    GROUP_SEP : NumberFormatSymbols_es_NI ,
    INFINITY : NumberFormatSymbols_es_NI ,
    MINUS_SIGN : NumberFormatSymbols_es_NI ,
    NAN : NumberFormatSymbols_es_NI ,
    PERCENT : NumberFormatSymbols_es_NI ,
    PERCENT_PATTERN : NumberFormatSymbols_es_NI ,
    PERMILL : NumberFormatSymbols_es_NI ,
    PLUS_SIGN : NumberFormatSymbols_es_NI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_NI ,
    ZERO_DIGIT : NumberFormatSymbols_es_NI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_NI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_NI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_NI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_NI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_PA.
   */
  type NumberFormatSymbols_es_PA = string ;
  var NumberFormatSymbols_es_PA : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_PA ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_PA ,
    DECIMAL_SEP : NumberFormatSymbols_es_PA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_PA ,
    EXP_SYMBOL : NumberFormatSymbols_es_PA ,
    GROUP_SEP : NumberFormatSymbols_es_PA ,
    INFINITY : NumberFormatSymbols_es_PA ,
    MINUS_SIGN : NumberFormatSymbols_es_PA ,
    NAN : NumberFormatSymbols_es_PA ,
    PERCENT : NumberFormatSymbols_es_PA ,
    PERCENT_PATTERN : NumberFormatSymbols_es_PA ,
    PERMILL : NumberFormatSymbols_es_PA ,
    PLUS_SIGN : NumberFormatSymbols_es_PA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_PA ,
    ZERO_DIGIT : NumberFormatSymbols_es_PA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_PA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_PA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_PA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_PA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_PE.
   */
  type NumberFormatSymbols_es_PE = string ;
  var NumberFormatSymbols_es_PE : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_PE ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_PE ,
    DECIMAL_SEP : NumberFormatSymbols_es_PE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_PE ,
    EXP_SYMBOL : NumberFormatSymbols_es_PE ,
    GROUP_SEP : NumberFormatSymbols_es_PE ,
    INFINITY : NumberFormatSymbols_es_PE ,
    MINUS_SIGN : NumberFormatSymbols_es_PE ,
    NAN : NumberFormatSymbols_es_PE ,
    PERCENT : NumberFormatSymbols_es_PE ,
    PERCENT_PATTERN : NumberFormatSymbols_es_PE ,
    PERMILL : NumberFormatSymbols_es_PE ,
    PLUS_SIGN : NumberFormatSymbols_es_PE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_PE ,
    ZERO_DIGIT : NumberFormatSymbols_es_PE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_PE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_PE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_PE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_PE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_PH.
   */
  type NumberFormatSymbols_es_PH = string ;
  var NumberFormatSymbols_es_PH : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_PH ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_PH ,
    DECIMAL_SEP : NumberFormatSymbols_es_PH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_PH ,
    EXP_SYMBOL : NumberFormatSymbols_es_PH ,
    GROUP_SEP : NumberFormatSymbols_es_PH ,
    INFINITY : NumberFormatSymbols_es_PH ,
    MINUS_SIGN : NumberFormatSymbols_es_PH ,
    NAN : NumberFormatSymbols_es_PH ,
    PERCENT : NumberFormatSymbols_es_PH ,
    PERCENT_PATTERN : NumberFormatSymbols_es_PH ,
    PERMILL : NumberFormatSymbols_es_PH ,
    PLUS_SIGN : NumberFormatSymbols_es_PH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_PH ,
    ZERO_DIGIT : NumberFormatSymbols_es_PH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_PH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_PH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_PH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_PH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_PR.
   */
  type NumberFormatSymbols_es_PR = string ;
  var NumberFormatSymbols_es_PR : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_PR ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_PR ,
    DECIMAL_SEP : NumberFormatSymbols_es_PR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_PR ,
    EXP_SYMBOL : NumberFormatSymbols_es_PR ,
    GROUP_SEP : NumberFormatSymbols_es_PR ,
    INFINITY : NumberFormatSymbols_es_PR ,
    MINUS_SIGN : NumberFormatSymbols_es_PR ,
    NAN : NumberFormatSymbols_es_PR ,
    PERCENT : NumberFormatSymbols_es_PR ,
    PERCENT_PATTERN : NumberFormatSymbols_es_PR ,
    PERMILL : NumberFormatSymbols_es_PR ,
    PLUS_SIGN : NumberFormatSymbols_es_PR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_PR ,
    ZERO_DIGIT : NumberFormatSymbols_es_PR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_PR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_PR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_PR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_PR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_PY.
   */
  type NumberFormatSymbols_es_PY = string ;
  var NumberFormatSymbols_es_PY : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_PY ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_PY ,
    DECIMAL_SEP : NumberFormatSymbols_es_PY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_PY ,
    EXP_SYMBOL : NumberFormatSymbols_es_PY ,
    GROUP_SEP : NumberFormatSymbols_es_PY ,
    INFINITY : NumberFormatSymbols_es_PY ,
    MINUS_SIGN : NumberFormatSymbols_es_PY ,
    NAN : NumberFormatSymbols_es_PY ,
    PERCENT : NumberFormatSymbols_es_PY ,
    PERCENT_PATTERN : NumberFormatSymbols_es_PY ,
    PERMILL : NumberFormatSymbols_es_PY ,
    PLUS_SIGN : NumberFormatSymbols_es_PY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_PY ,
    ZERO_DIGIT : NumberFormatSymbols_es_PY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_PY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_PY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_PY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_PY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_SV.
   */
  type NumberFormatSymbols_es_SV = string ;
  var NumberFormatSymbols_es_SV : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_SV ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_SV ,
    DECIMAL_SEP : NumberFormatSymbols_es_SV ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_SV ,
    EXP_SYMBOL : NumberFormatSymbols_es_SV ,
    GROUP_SEP : NumberFormatSymbols_es_SV ,
    INFINITY : NumberFormatSymbols_es_SV ,
    MINUS_SIGN : NumberFormatSymbols_es_SV ,
    NAN : NumberFormatSymbols_es_SV ,
    PERCENT : NumberFormatSymbols_es_SV ,
    PERCENT_PATTERN : NumberFormatSymbols_es_SV ,
    PERMILL : NumberFormatSymbols_es_SV ,
    PLUS_SIGN : NumberFormatSymbols_es_SV ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_SV ,
    ZERO_DIGIT : NumberFormatSymbols_es_SV ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_SV'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_SV;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_SV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_SV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_US.
   */
  type NumberFormatSymbols_es_US = string ;
  var NumberFormatSymbols_es_US : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_US ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_US ,
    DECIMAL_SEP : NumberFormatSymbols_es_US ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_US ,
    EXP_SYMBOL : NumberFormatSymbols_es_US ,
    GROUP_SEP : NumberFormatSymbols_es_US ,
    INFINITY : NumberFormatSymbols_es_US ,
    MINUS_SIGN : NumberFormatSymbols_es_US ,
    NAN : NumberFormatSymbols_es_US ,
    PERCENT : NumberFormatSymbols_es_US ,
    PERCENT_PATTERN : NumberFormatSymbols_es_US ,
    PERMILL : NumberFormatSymbols_es_US ,
    PLUS_SIGN : NumberFormatSymbols_es_US ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_US ,
    ZERO_DIGIT : NumberFormatSymbols_es_US ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_US'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_US;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_UY.
   */
  type NumberFormatSymbols_es_UY = string ;
  var NumberFormatSymbols_es_UY : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_UY ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_UY ,
    DECIMAL_SEP : NumberFormatSymbols_es_UY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_UY ,
    EXP_SYMBOL : NumberFormatSymbols_es_UY ,
    GROUP_SEP : NumberFormatSymbols_es_UY ,
    INFINITY : NumberFormatSymbols_es_UY ,
    MINUS_SIGN : NumberFormatSymbols_es_UY ,
    NAN : NumberFormatSymbols_es_UY ,
    PERCENT : NumberFormatSymbols_es_UY ,
    PERCENT_PATTERN : NumberFormatSymbols_es_UY ,
    PERMILL : NumberFormatSymbols_es_UY ,
    PLUS_SIGN : NumberFormatSymbols_es_UY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_UY ,
    ZERO_DIGIT : NumberFormatSymbols_es_UY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_UY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_UY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_UY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_UY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale es_VE.
   */
  type NumberFormatSymbols_es_VE = string ;
  var NumberFormatSymbols_es_VE : {
    CURRENCY_PATTERN : NumberFormatSymbols_es_VE ,
    DECIMAL_PATTERN : NumberFormatSymbols_es_VE ,
    DECIMAL_SEP : NumberFormatSymbols_es_VE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_es_VE ,
    EXP_SYMBOL : NumberFormatSymbols_es_VE ,
    GROUP_SEP : NumberFormatSymbols_es_VE ,
    INFINITY : NumberFormatSymbols_es_VE ,
    MINUS_SIGN : NumberFormatSymbols_es_VE ,
    NAN : NumberFormatSymbols_es_VE ,
    PERCENT : NumberFormatSymbols_es_VE ,
    PERCENT_PATTERN : NumberFormatSymbols_es_VE ,
    PERMILL : NumberFormatSymbols_es_VE ,
    PLUS_SIGN : NumberFormatSymbols_es_VE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_es_VE ,
    ZERO_DIGIT : NumberFormatSymbols_es_VE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_es_VE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_VE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_es_VE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_es_VE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale et.
   */
  type NumberFormatSymbols_et = string ;
  var NumberFormatSymbols_et : {
    CURRENCY_PATTERN : NumberFormatSymbols_et ,
    DECIMAL_PATTERN : NumberFormatSymbols_et ,
    DECIMAL_SEP : NumberFormatSymbols_et ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_et ,
    EXP_SYMBOL : NumberFormatSymbols_et ,
    GROUP_SEP : NumberFormatSymbols_et ,
    INFINITY : NumberFormatSymbols_et ,
    MINUS_SIGN : NumberFormatSymbols_et ,
    NAN : NumberFormatSymbols_et ,
    PERCENT : NumberFormatSymbols_et ,
    PERCENT_PATTERN : NumberFormatSymbols_et ,
    PERMILL : NumberFormatSymbols_et ,
    PLUS_SIGN : NumberFormatSymbols_et ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_et ,
    ZERO_DIGIT : NumberFormatSymbols_et ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_et'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_et;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_et' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_et;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale et_EE.
   */
  type NumberFormatSymbols_et_EE = string ;
  var NumberFormatSymbols_et_EE : {
    CURRENCY_PATTERN : NumberFormatSymbols_et_EE ,
    DECIMAL_PATTERN : NumberFormatSymbols_et_EE ,
    DECIMAL_SEP : NumberFormatSymbols_et_EE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_et_EE ,
    EXP_SYMBOL : NumberFormatSymbols_et_EE ,
    GROUP_SEP : NumberFormatSymbols_et_EE ,
    INFINITY : NumberFormatSymbols_et_EE ,
    MINUS_SIGN : NumberFormatSymbols_et_EE ,
    NAN : NumberFormatSymbols_et_EE ,
    PERCENT : NumberFormatSymbols_et_EE ,
    PERCENT_PATTERN : NumberFormatSymbols_et_EE ,
    PERMILL : NumberFormatSymbols_et_EE ,
    PLUS_SIGN : NumberFormatSymbols_et_EE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_et_EE ,
    ZERO_DIGIT : NumberFormatSymbols_et_EE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_et_EE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_et_EE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_et_EE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_et_EE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale eu.
   */
  type NumberFormatSymbols_eu = string ;
  var NumberFormatSymbols_eu : {
    CURRENCY_PATTERN : NumberFormatSymbols_eu ,
    DECIMAL_PATTERN : NumberFormatSymbols_eu ,
    DECIMAL_SEP : NumberFormatSymbols_eu ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_eu ,
    EXP_SYMBOL : NumberFormatSymbols_eu ,
    GROUP_SEP : NumberFormatSymbols_eu ,
    INFINITY : NumberFormatSymbols_eu ,
    MINUS_SIGN : NumberFormatSymbols_eu ,
    NAN : NumberFormatSymbols_eu ,
    PERCENT : NumberFormatSymbols_eu ,
    PERCENT_PATTERN : NumberFormatSymbols_eu ,
    PERMILL : NumberFormatSymbols_eu ,
    PLUS_SIGN : NumberFormatSymbols_eu ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_eu ,
    ZERO_DIGIT : NumberFormatSymbols_eu ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_eu'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_eu;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_eu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_eu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale eu_ES.
   */
  type NumberFormatSymbols_eu_ES = string ;
  var NumberFormatSymbols_eu_ES : {
    CURRENCY_PATTERN : NumberFormatSymbols_eu_ES ,
    DECIMAL_PATTERN : NumberFormatSymbols_eu_ES ,
    DECIMAL_SEP : NumberFormatSymbols_eu_ES ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_eu_ES ,
    EXP_SYMBOL : NumberFormatSymbols_eu_ES ,
    GROUP_SEP : NumberFormatSymbols_eu_ES ,
    INFINITY : NumberFormatSymbols_eu_ES ,
    MINUS_SIGN : NumberFormatSymbols_eu_ES ,
    NAN : NumberFormatSymbols_eu_ES ,
    PERCENT : NumberFormatSymbols_eu_ES ,
    PERCENT_PATTERN : NumberFormatSymbols_eu_ES ,
    PERMILL : NumberFormatSymbols_eu_ES ,
    PLUS_SIGN : NumberFormatSymbols_eu_ES ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_eu_ES ,
    ZERO_DIGIT : NumberFormatSymbols_eu_ES ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_eu_ES'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_eu_ES;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_eu_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_eu_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ewo.
   */
  type NumberFormatSymbols_ewo = string ;
  var NumberFormatSymbols_ewo : {
    CURRENCY_PATTERN : NumberFormatSymbols_ewo ,
    DECIMAL_PATTERN : NumberFormatSymbols_ewo ,
    DECIMAL_SEP : NumberFormatSymbols_ewo ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ewo ,
    EXP_SYMBOL : NumberFormatSymbols_ewo ,
    GROUP_SEP : NumberFormatSymbols_ewo ,
    INFINITY : NumberFormatSymbols_ewo ,
    MINUS_SIGN : NumberFormatSymbols_ewo ,
    NAN : NumberFormatSymbols_ewo ,
    PERCENT : NumberFormatSymbols_ewo ,
    PERCENT_PATTERN : NumberFormatSymbols_ewo ,
    PERMILL : NumberFormatSymbols_ewo ,
    PLUS_SIGN : NumberFormatSymbols_ewo ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ewo ,
    ZERO_DIGIT : NumberFormatSymbols_ewo ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ewo'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ewo;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ewo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ewo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ewo_CM.
   */
  type NumberFormatSymbols_ewo_CM = string ;
  var NumberFormatSymbols_ewo_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_ewo_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_ewo_CM ,
    DECIMAL_SEP : NumberFormatSymbols_ewo_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ewo_CM ,
    EXP_SYMBOL : NumberFormatSymbols_ewo_CM ,
    GROUP_SEP : NumberFormatSymbols_ewo_CM ,
    INFINITY : NumberFormatSymbols_ewo_CM ,
    MINUS_SIGN : NumberFormatSymbols_ewo_CM ,
    NAN : NumberFormatSymbols_ewo_CM ,
    PERCENT : NumberFormatSymbols_ewo_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_ewo_CM ,
    PERMILL : NumberFormatSymbols_ewo_CM ,
    PLUS_SIGN : NumberFormatSymbols_ewo_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ewo_CM ,
    ZERO_DIGIT : NumberFormatSymbols_ewo_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ewo_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ewo_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ewo_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ewo_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fa.
   */
  type NumberFormatSymbols_fa = string ;
  var NumberFormatSymbols_fa : {
    CURRENCY_PATTERN : NumberFormatSymbols_fa ,
    DECIMAL_PATTERN : NumberFormatSymbols_fa ,
    DECIMAL_SEP : NumberFormatSymbols_fa ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fa ,
    EXP_SYMBOL : NumberFormatSymbols_fa ,
    GROUP_SEP : NumberFormatSymbols_fa ,
    INFINITY : NumberFormatSymbols_fa ,
    MINUS_SIGN : NumberFormatSymbols_fa ,
    NAN : NumberFormatSymbols_fa ,
    PERCENT : NumberFormatSymbols_fa ,
    PERCENT_PATTERN : NumberFormatSymbols_fa ,
    PERMILL : NumberFormatSymbols_fa ,
    PLUS_SIGN : NumberFormatSymbols_fa ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fa ,
    ZERO_DIGIT : NumberFormatSymbols_fa ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fa'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fa;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fa' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fa;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fa_AF.
   */
  type NumberFormatSymbols_fa_AF = string ;
  var NumberFormatSymbols_fa_AF : {
    CURRENCY_PATTERN : NumberFormatSymbols_fa_AF ,
    DECIMAL_PATTERN : NumberFormatSymbols_fa_AF ,
    DECIMAL_SEP : NumberFormatSymbols_fa_AF ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fa_AF ,
    EXP_SYMBOL : NumberFormatSymbols_fa_AF ,
    GROUP_SEP : NumberFormatSymbols_fa_AF ,
    INFINITY : NumberFormatSymbols_fa_AF ,
    MINUS_SIGN : NumberFormatSymbols_fa_AF ,
    NAN : NumberFormatSymbols_fa_AF ,
    PERCENT : NumberFormatSymbols_fa_AF ,
    PERCENT_PATTERN : NumberFormatSymbols_fa_AF ,
    PERMILL : NumberFormatSymbols_fa_AF ,
    PLUS_SIGN : NumberFormatSymbols_fa_AF ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fa_AF ,
    ZERO_DIGIT : NumberFormatSymbols_fa_AF ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fa_AF'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fa_AF;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fa_AF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fa_AF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fa_IR.
   */
  type NumberFormatSymbols_fa_IR = string ;
  var NumberFormatSymbols_fa_IR : {
    CURRENCY_PATTERN : NumberFormatSymbols_fa_IR ,
    DECIMAL_PATTERN : NumberFormatSymbols_fa_IR ,
    DECIMAL_SEP : NumberFormatSymbols_fa_IR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fa_IR ,
    EXP_SYMBOL : NumberFormatSymbols_fa_IR ,
    GROUP_SEP : NumberFormatSymbols_fa_IR ,
    INFINITY : NumberFormatSymbols_fa_IR ,
    MINUS_SIGN : NumberFormatSymbols_fa_IR ,
    NAN : NumberFormatSymbols_fa_IR ,
    PERCENT : NumberFormatSymbols_fa_IR ,
    PERCENT_PATTERN : NumberFormatSymbols_fa_IR ,
    PERMILL : NumberFormatSymbols_fa_IR ,
    PLUS_SIGN : NumberFormatSymbols_fa_IR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fa_IR ,
    ZERO_DIGIT : NumberFormatSymbols_fa_IR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fa_IR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fa_IR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fa_IR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fa_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ff.
   */
  type NumberFormatSymbols_ff = string ;
  var NumberFormatSymbols_ff : {
    CURRENCY_PATTERN : NumberFormatSymbols_ff ,
    DECIMAL_PATTERN : NumberFormatSymbols_ff ,
    DECIMAL_SEP : NumberFormatSymbols_ff ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ff ,
    EXP_SYMBOL : NumberFormatSymbols_ff ,
    GROUP_SEP : NumberFormatSymbols_ff ,
    INFINITY : NumberFormatSymbols_ff ,
    MINUS_SIGN : NumberFormatSymbols_ff ,
    NAN : NumberFormatSymbols_ff ,
    PERCENT : NumberFormatSymbols_ff ,
    PERCENT_PATTERN : NumberFormatSymbols_ff ,
    PERMILL : NumberFormatSymbols_ff ,
    PLUS_SIGN : NumberFormatSymbols_ff ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ff ,
    ZERO_DIGIT : NumberFormatSymbols_ff ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ff'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ff;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ff' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ff;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ff_CM.
   */
  type NumberFormatSymbols_ff_CM = string ;
  var NumberFormatSymbols_ff_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_ff_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_ff_CM ,
    DECIMAL_SEP : NumberFormatSymbols_ff_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ff_CM ,
    EXP_SYMBOL : NumberFormatSymbols_ff_CM ,
    GROUP_SEP : NumberFormatSymbols_ff_CM ,
    INFINITY : NumberFormatSymbols_ff_CM ,
    MINUS_SIGN : NumberFormatSymbols_ff_CM ,
    NAN : NumberFormatSymbols_ff_CM ,
    PERCENT : NumberFormatSymbols_ff_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_ff_CM ,
    PERMILL : NumberFormatSymbols_ff_CM ,
    PLUS_SIGN : NumberFormatSymbols_ff_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ff_CM ,
    ZERO_DIGIT : NumberFormatSymbols_ff_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ff_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ff_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ff_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ff_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ff_GN.
   */
  type NumberFormatSymbols_ff_GN = string ;
  var NumberFormatSymbols_ff_GN : {
    CURRENCY_PATTERN : NumberFormatSymbols_ff_GN ,
    DECIMAL_PATTERN : NumberFormatSymbols_ff_GN ,
    DECIMAL_SEP : NumberFormatSymbols_ff_GN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ff_GN ,
    EXP_SYMBOL : NumberFormatSymbols_ff_GN ,
    GROUP_SEP : NumberFormatSymbols_ff_GN ,
    INFINITY : NumberFormatSymbols_ff_GN ,
    MINUS_SIGN : NumberFormatSymbols_ff_GN ,
    NAN : NumberFormatSymbols_ff_GN ,
    PERCENT : NumberFormatSymbols_ff_GN ,
    PERCENT_PATTERN : NumberFormatSymbols_ff_GN ,
    PERMILL : NumberFormatSymbols_ff_GN ,
    PLUS_SIGN : NumberFormatSymbols_ff_GN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ff_GN ,
    ZERO_DIGIT : NumberFormatSymbols_ff_GN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ff_GN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ff_GN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ff_GN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ff_GN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ff_MR.
   */
  type NumberFormatSymbols_ff_MR = string ;
  var NumberFormatSymbols_ff_MR : {
    CURRENCY_PATTERN : NumberFormatSymbols_ff_MR ,
    DECIMAL_PATTERN : NumberFormatSymbols_ff_MR ,
    DECIMAL_SEP : NumberFormatSymbols_ff_MR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ff_MR ,
    EXP_SYMBOL : NumberFormatSymbols_ff_MR ,
    GROUP_SEP : NumberFormatSymbols_ff_MR ,
    INFINITY : NumberFormatSymbols_ff_MR ,
    MINUS_SIGN : NumberFormatSymbols_ff_MR ,
    NAN : NumberFormatSymbols_ff_MR ,
    PERCENT : NumberFormatSymbols_ff_MR ,
    PERCENT_PATTERN : NumberFormatSymbols_ff_MR ,
    PERMILL : NumberFormatSymbols_ff_MR ,
    PLUS_SIGN : NumberFormatSymbols_ff_MR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ff_MR ,
    ZERO_DIGIT : NumberFormatSymbols_ff_MR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ff_MR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ff_MR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ff_MR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ff_MR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ff_SN.
   */
  type NumberFormatSymbols_ff_SN = string ;
  var NumberFormatSymbols_ff_SN : {
    CURRENCY_PATTERN : NumberFormatSymbols_ff_SN ,
    DECIMAL_PATTERN : NumberFormatSymbols_ff_SN ,
    DECIMAL_SEP : NumberFormatSymbols_ff_SN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ff_SN ,
    EXP_SYMBOL : NumberFormatSymbols_ff_SN ,
    GROUP_SEP : NumberFormatSymbols_ff_SN ,
    INFINITY : NumberFormatSymbols_ff_SN ,
    MINUS_SIGN : NumberFormatSymbols_ff_SN ,
    NAN : NumberFormatSymbols_ff_SN ,
    PERCENT : NumberFormatSymbols_ff_SN ,
    PERCENT_PATTERN : NumberFormatSymbols_ff_SN ,
    PERMILL : NumberFormatSymbols_ff_SN ,
    PLUS_SIGN : NumberFormatSymbols_ff_SN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ff_SN ,
    ZERO_DIGIT : NumberFormatSymbols_ff_SN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ff_SN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ff_SN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ff_SN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ff_SN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fi.
   */
  type NumberFormatSymbols_fi = string ;
  var NumberFormatSymbols_fi : {
    CURRENCY_PATTERN : NumberFormatSymbols_fi ,
    DECIMAL_PATTERN : NumberFormatSymbols_fi ,
    DECIMAL_SEP : NumberFormatSymbols_fi ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fi ,
    EXP_SYMBOL : NumberFormatSymbols_fi ,
    GROUP_SEP : NumberFormatSymbols_fi ,
    INFINITY : NumberFormatSymbols_fi ,
    MINUS_SIGN : NumberFormatSymbols_fi ,
    NAN : NumberFormatSymbols_fi ,
    PERCENT : NumberFormatSymbols_fi ,
    PERCENT_PATTERN : NumberFormatSymbols_fi ,
    PERMILL : NumberFormatSymbols_fi ,
    PLUS_SIGN : NumberFormatSymbols_fi ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fi ,
    ZERO_DIGIT : NumberFormatSymbols_fi ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fi'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fi;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fi_FI.
   */
  type NumberFormatSymbols_fi_FI = string ;
  var NumberFormatSymbols_fi_FI : {
    CURRENCY_PATTERN : NumberFormatSymbols_fi_FI ,
    DECIMAL_PATTERN : NumberFormatSymbols_fi_FI ,
    DECIMAL_SEP : NumberFormatSymbols_fi_FI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fi_FI ,
    EXP_SYMBOL : NumberFormatSymbols_fi_FI ,
    GROUP_SEP : NumberFormatSymbols_fi_FI ,
    INFINITY : NumberFormatSymbols_fi_FI ,
    MINUS_SIGN : NumberFormatSymbols_fi_FI ,
    NAN : NumberFormatSymbols_fi_FI ,
    PERCENT : NumberFormatSymbols_fi_FI ,
    PERCENT_PATTERN : NumberFormatSymbols_fi_FI ,
    PERMILL : NumberFormatSymbols_fi_FI ,
    PLUS_SIGN : NumberFormatSymbols_fi_FI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fi_FI ,
    ZERO_DIGIT : NumberFormatSymbols_fi_FI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fi_FI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fi_FI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fi_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fi_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fil.
   */
  type NumberFormatSymbols_fil = string ;
  var NumberFormatSymbols_fil : {
    CURRENCY_PATTERN : NumberFormatSymbols_fil ,
    DECIMAL_PATTERN : NumberFormatSymbols_fil ,
    DECIMAL_SEP : NumberFormatSymbols_fil ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fil ,
    EXP_SYMBOL : NumberFormatSymbols_fil ,
    GROUP_SEP : NumberFormatSymbols_fil ,
    INFINITY : NumberFormatSymbols_fil ,
    MINUS_SIGN : NumberFormatSymbols_fil ,
    NAN : NumberFormatSymbols_fil ,
    PERCENT : NumberFormatSymbols_fil ,
    PERCENT_PATTERN : NumberFormatSymbols_fil ,
    PERMILL : NumberFormatSymbols_fil ,
    PLUS_SIGN : NumberFormatSymbols_fil ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fil ,
    ZERO_DIGIT : NumberFormatSymbols_fil ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fil'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fil;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fil' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fil;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fil_PH.
   */
  type NumberFormatSymbols_fil_PH = string ;
  var NumberFormatSymbols_fil_PH : {
    CURRENCY_PATTERN : NumberFormatSymbols_fil_PH ,
    DECIMAL_PATTERN : NumberFormatSymbols_fil_PH ,
    DECIMAL_SEP : NumberFormatSymbols_fil_PH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fil_PH ,
    EXP_SYMBOL : NumberFormatSymbols_fil_PH ,
    GROUP_SEP : NumberFormatSymbols_fil_PH ,
    INFINITY : NumberFormatSymbols_fil_PH ,
    MINUS_SIGN : NumberFormatSymbols_fil_PH ,
    NAN : NumberFormatSymbols_fil_PH ,
    PERCENT : NumberFormatSymbols_fil_PH ,
    PERCENT_PATTERN : NumberFormatSymbols_fil_PH ,
    PERMILL : NumberFormatSymbols_fil_PH ,
    PLUS_SIGN : NumberFormatSymbols_fil_PH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fil_PH ,
    ZERO_DIGIT : NumberFormatSymbols_fil_PH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fil_PH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fil_PH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fil_PH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fil_PH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fo.
   */
  type NumberFormatSymbols_fo = string ;
  var NumberFormatSymbols_fo : {
    CURRENCY_PATTERN : NumberFormatSymbols_fo ,
    DECIMAL_PATTERN : NumberFormatSymbols_fo ,
    DECIMAL_SEP : NumberFormatSymbols_fo ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fo ,
    EXP_SYMBOL : NumberFormatSymbols_fo ,
    GROUP_SEP : NumberFormatSymbols_fo ,
    INFINITY : NumberFormatSymbols_fo ,
    MINUS_SIGN : NumberFormatSymbols_fo ,
    NAN : NumberFormatSymbols_fo ,
    PERCENT : NumberFormatSymbols_fo ,
    PERCENT_PATTERN : NumberFormatSymbols_fo ,
    PERMILL : NumberFormatSymbols_fo ,
    PLUS_SIGN : NumberFormatSymbols_fo ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fo ,
    ZERO_DIGIT : NumberFormatSymbols_fo ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fo'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fo;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fo_DK.
   */
  type NumberFormatSymbols_fo_DK = string ;
  var NumberFormatSymbols_fo_DK : {
    CURRENCY_PATTERN : NumberFormatSymbols_fo_DK ,
    DECIMAL_PATTERN : NumberFormatSymbols_fo_DK ,
    DECIMAL_SEP : NumberFormatSymbols_fo_DK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fo_DK ,
    EXP_SYMBOL : NumberFormatSymbols_fo_DK ,
    GROUP_SEP : NumberFormatSymbols_fo_DK ,
    INFINITY : NumberFormatSymbols_fo_DK ,
    MINUS_SIGN : NumberFormatSymbols_fo_DK ,
    NAN : NumberFormatSymbols_fo_DK ,
    PERCENT : NumberFormatSymbols_fo_DK ,
    PERCENT_PATTERN : NumberFormatSymbols_fo_DK ,
    PERMILL : NumberFormatSymbols_fo_DK ,
    PLUS_SIGN : NumberFormatSymbols_fo_DK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fo_DK ,
    ZERO_DIGIT : NumberFormatSymbols_fo_DK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fo_DK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fo_DK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fo_DK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fo_DK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fo_FO.
   */
  type NumberFormatSymbols_fo_FO = string ;
  var NumberFormatSymbols_fo_FO : {
    CURRENCY_PATTERN : NumberFormatSymbols_fo_FO ,
    DECIMAL_PATTERN : NumberFormatSymbols_fo_FO ,
    DECIMAL_SEP : NumberFormatSymbols_fo_FO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fo_FO ,
    EXP_SYMBOL : NumberFormatSymbols_fo_FO ,
    GROUP_SEP : NumberFormatSymbols_fo_FO ,
    INFINITY : NumberFormatSymbols_fo_FO ,
    MINUS_SIGN : NumberFormatSymbols_fo_FO ,
    NAN : NumberFormatSymbols_fo_FO ,
    PERCENT : NumberFormatSymbols_fo_FO ,
    PERCENT_PATTERN : NumberFormatSymbols_fo_FO ,
    PERMILL : NumberFormatSymbols_fo_FO ,
    PLUS_SIGN : NumberFormatSymbols_fo_FO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fo_FO ,
    ZERO_DIGIT : NumberFormatSymbols_fo_FO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fo_FO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fo_FO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fo_FO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fo_FO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr.
   */
  type NumberFormatSymbols_fr = string ;
  var NumberFormatSymbols_fr : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr ,
    DECIMAL_SEP : NumberFormatSymbols_fr ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr ,
    EXP_SYMBOL : NumberFormatSymbols_fr ,
    GROUP_SEP : NumberFormatSymbols_fr ,
    INFINITY : NumberFormatSymbols_fr ,
    MINUS_SIGN : NumberFormatSymbols_fr ,
    NAN : NumberFormatSymbols_fr ,
    PERCENT : NumberFormatSymbols_fr ,
    PERCENT_PATTERN : NumberFormatSymbols_fr ,
    PERMILL : NumberFormatSymbols_fr ,
    PLUS_SIGN : NumberFormatSymbols_fr ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr ,
    ZERO_DIGIT : NumberFormatSymbols_fr ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_BE.
   */
  type NumberFormatSymbols_fr_BE = string ;
  var NumberFormatSymbols_fr_BE : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_BE ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_BE ,
    DECIMAL_SEP : NumberFormatSymbols_fr_BE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_BE ,
    EXP_SYMBOL : NumberFormatSymbols_fr_BE ,
    GROUP_SEP : NumberFormatSymbols_fr_BE ,
    INFINITY : NumberFormatSymbols_fr_BE ,
    MINUS_SIGN : NumberFormatSymbols_fr_BE ,
    NAN : NumberFormatSymbols_fr_BE ,
    PERCENT : NumberFormatSymbols_fr_BE ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_BE ,
    PERMILL : NumberFormatSymbols_fr_BE ,
    PLUS_SIGN : NumberFormatSymbols_fr_BE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_BE ,
    ZERO_DIGIT : NumberFormatSymbols_fr_BE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_BE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_BE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_BE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_BF.
   */
  type NumberFormatSymbols_fr_BF = string ;
  var NumberFormatSymbols_fr_BF : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_BF ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_BF ,
    DECIMAL_SEP : NumberFormatSymbols_fr_BF ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_BF ,
    EXP_SYMBOL : NumberFormatSymbols_fr_BF ,
    GROUP_SEP : NumberFormatSymbols_fr_BF ,
    INFINITY : NumberFormatSymbols_fr_BF ,
    MINUS_SIGN : NumberFormatSymbols_fr_BF ,
    NAN : NumberFormatSymbols_fr_BF ,
    PERCENT : NumberFormatSymbols_fr_BF ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_BF ,
    PERMILL : NumberFormatSymbols_fr_BF ,
    PLUS_SIGN : NumberFormatSymbols_fr_BF ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_BF ,
    ZERO_DIGIT : NumberFormatSymbols_fr_BF ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_BF'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_BF;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_BF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_BF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_BI.
   */
  type NumberFormatSymbols_fr_BI = string ;
  var NumberFormatSymbols_fr_BI : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_BI ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_BI ,
    DECIMAL_SEP : NumberFormatSymbols_fr_BI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_BI ,
    EXP_SYMBOL : NumberFormatSymbols_fr_BI ,
    GROUP_SEP : NumberFormatSymbols_fr_BI ,
    INFINITY : NumberFormatSymbols_fr_BI ,
    MINUS_SIGN : NumberFormatSymbols_fr_BI ,
    NAN : NumberFormatSymbols_fr_BI ,
    PERCENT : NumberFormatSymbols_fr_BI ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_BI ,
    PERMILL : NumberFormatSymbols_fr_BI ,
    PLUS_SIGN : NumberFormatSymbols_fr_BI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_BI ,
    ZERO_DIGIT : NumberFormatSymbols_fr_BI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_BI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_BI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_BI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_BI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_BJ.
   */
  type NumberFormatSymbols_fr_BJ = string ;
  var NumberFormatSymbols_fr_BJ : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_BJ ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_BJ ,
    DECIMAL_SEP : NumberFormatSymbols_fr_BJ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_BJ ,
    EXP_SYMBOL : NumberFormatSymbols_fr_BJ ,
    GROUP_SEP : NumberFormatSymbols_fr_BJ ,
    INFINITY : NumberFormatSymbols_fr_BJ ,
    MINUS_SIGN : NumberFormatSymbols_fr_BJ ,
    NAN : NumberFormatSymbols_fr_BJ ,
    PERCENT : NumberFormatSymbols_fr_BJ ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_BJ ,
    PERMILL : NumberFormatSymbols_fr_BJ ,
    PLUS_SIGN : NumberFormatSymbols_fr_BJ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_BJ ,
    ZERO_DIGIT : NumberFormatSymbols_fr_BJ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_BJ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_BJ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_BJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_BJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_BL.
   */
  type NumberFormatSymbols_fr_BL = string ;
  var NumberFormatSymbols_fr_BL : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_BL ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_BL ,
    DECIMAL_SEP : NumberFormatSymbols_fr_BL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_BL ,
    EXP_SYMBOL : NumberFormatSymbols_fr_BL ,
    GROUP_SEP : NumberFormatSymbols_fr_BL ,
    INFINITY : NumberFormatSymbols_fr_BL ,
    MINUS_SIGN : NumberFormatSymbols_fr_BL ,
    NAN : NumberFormatSymbols_fr_BL ,
    PERCENT : NumberFormatSymbols_fr_BL ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_BL ,
    PERMILL : NumberFormatSymbols_fr_BL ,
    PLUS_SIGN : NumberFormatSymbols_fr_BL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_BL ,
    ZERO_DIGIT : NumberFormatSymbols_fr_BL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_BL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_BL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_BL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_BL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_CA.
   */
  type NumberFormatSymbols_fr_CA = string ;
  var NumberFormatSymbols_fr_CA : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_CA ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_CA ,
    DECIMAL_SEP : NumberFormatSymbols_fr_CA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_CA ,
    EXP_SYMBOL : NumberFormatSymbols_fr_CA ,
    GROUP_SEP : NumberFormatSymbols_fr_CA ,
    INFINITY : NumberFormatSymbols_fr_CA ,
    MINUS_SIGN : NumberFormatSymbols_fr_CA ,
    NAN : NumberFormatSymbols_fr_CA ,
    PERCENT : NumberFormatSymbols_fr_CA ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_CA ,
    PERMILL : NumberFormatSymbols_fr_CA ,
    PLUS_SIGN : NumberFormatSymbols_fr_CA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_CA ,
    ZERO_DIGIT : NumberFormatSymbols_fr_CA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_CA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_CA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_CD.
   */
  type NumberFormatSymbols_fr_CD = string ;
  var NumberFormatSymbols_fr_CD : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_CD ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_CD ,
    DECIMAL_SEP : NumberFormatSymbols_fr_CD ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_CD ,
    EXP_SYMBOL : NumberFormatSymbols_fr_CD ,
    GROUP_SEP : NumberFormatSymbols_fr_CD ,
    INFINITY : NumberFormatSymbols_fr_CD ,
    MINUS_SIGN : NumberFormatSymbols_fr_CD ,
    NAN : NumberFormatSymbols_fr_CD ,
    PERCENT : NumberFormatSymbols_fr_CD ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_CD ,
    PERMILL : NumberFormatSymbols_fr_CD ,
    PLUS_SIGN : NumberFormatSymbols_fr_CD ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_CD ,
    ZERO_DIGIT : NumberFormatSymbols_fr_CD ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_CD'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CD;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_CD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_CF.
   */
  type NumberFormatSymbols_fr_CF = string ;
  var NumberFormatSymbols_fr_CF : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_CF ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_CF ,
    DECIMAL_SEP : NumberFormatSymbols_fr_CF ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_CF ,
    EXP_SYMBOL : NumberFormatSymbols_fr_CF ,
    GROUP_SEP : NumberFormatSymbols_fr_CF ,
    INFINITY : NumberFormatSymbols_fr_CF ,
    MINUS_SIGN : NumberFormatSymbols_fr_CF ,
    NAN : NumberFormatSymbols_fr_CF ,
    PERCENT : NumberFormatSymbols_fr_CF ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_CF ,
    PERMILL : NumberFormatSymbols_fr_CF ,
    PLUS_SIGN : NumberFormatSymbols_fr_CF ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_CF ,
    ZERO_DIGIT : NumberFormatSymbols_fr_CF ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_CF'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CF;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_CF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_CG.
   */
  type NumberFormatSymbols_fr_CG = string ;
  var NumberFormatSymbols_fr_CG : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_CG ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_CG ,
    DECIMAL_SEP : NumberFormatSymbols_fr_CG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_CG ,
    EXP_SYMBOL : NumberFormatSymbols_fr_CG ,
    GROUP_SEP : NumberFormatSymbols_fr_CG ,
    INFINITY : NumberFormatSymbols_fr_CG ,
    MINUS_SIGN : NumberFormatSymbols_fr_CG ,
    NAN : NumberFormatSymbols_fr_CG ,
    PERCENT : NumberFormatSymbols_fr_CG ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_CG ,
    PERMILL : NumberFormatSymbols_fr_CG ,
    PLUS_SIGN : NumberFormatSymbols_fr_CG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_CG ,
    ZERO_DIGIT : NumberFormatSymbols_fr_CG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_CG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_CG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_CH.
   */
  type NumberFormatSymbols_fr_CH = string ;
  var NumberFormatSymbols_fr_CH : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_CH ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_CH ,
    DECIMAL_SEP : NumberFormatSymbols_fr_CH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_CH ,
    EXP_SYMBOL : NumberFormatSymbols_fr_CH ,
    GROUP_SEP : NumberFormatSymbols_fr_CH ,
    INFINITY : NumberFormatSymbols_fr_CH ,
    MINUS_SIGN : NumberFormatSymbols_fr_CH ,
    NAN : NumberFormatSymbols_fr_CH ,
    PERCENT : NumberFormatSymbols_fr_CH ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_CH ,
    PERMILL : NumberFormatSymbols_fr_CH ,
    PLUS_SIGN : NumberFormatSymbols_fr_CH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_CH ,
    ZERO_DIGIT : NumberFormatSymbols_fr_CH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_CH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_CI.
   */
  type NumberFormatSymbols_fr_CI = string ;
  var NumberFormatSymbols_fr_CI : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_CI ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_CI ,
    DECIMAL_SEP : NumberFormatSymbols_fr_CI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_CI ,
    EXP_SYMBOL : NumberFormatSymbols_fr_CI ,
    GROUP_SEP : NumberFormatSymbols_fr_CI ,
    INFINITY : NumberFormatSymbols_fr_CI ,
    MINUS_SIGN : NumberFormatSymbols_fr_CI ,
    NAN : NumberFormatSymbols_fr_CI ,
    PERCENT : NumberFormatSymbols_fr_CI ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_CI ,
    PERMILL : NumberFormatSymbols_fr_CI ,
    PLUS_SIGN : NumberFormatSymbols_fr_CI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_CI ,
    ZERO_DIGIT : NumberFormatSymbols_fr_CI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_CI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_CI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_CM.
   */
  type NumberFormatSymbols_fr_CM = string ;
  var NumberFormatSymbols_fr_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_CM ,
    DECIMAL_SEP : NumberFormatSymbols_fr_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_CM ,
    EXP_SYMBOL : NumberFormatSymbols_fr_CM ,
    GROUP_SEP : NumberFormatSymbols_fr_CM ,
    INFINITY : NumberFormatSymbols_fr_CM ,
    MINUS_SIGN : NumberFormatSymbols_fr_CM ,
    NAN : NumberFormatSymbols_fr_CM ,
    PERCENT : NumberFormatSymbols_fr_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_CM ,
    PERMILL : NumberFormatSymbols_fr_CM ,
    PLUS_SIGN : NumberFormatSymbols_fr_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_CM ,
    ZERO_DIGIT : NumberFormatSymbols_fr_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_DJ.
   */
  type NumberFormatSymbols_fr_DJ = string ;
  var NumberFormatSymbols_fr_DJ : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_DJ ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_DJ ,
    DECIMAL_SEP : NumberFormatSymbols_fr_DJ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_DJ ,
    EXP_SYMBOL : NumberFormatSymbols_fr_DJ ,
    GROUP_SEP : NumberFormatSymbols_fr_DJ ,
    INFINITY : NumberFormatSymbols_fr_DJ ,
    MINUS_SIGN : NumberFormatSymbols_fr_DJ ,
    NAN : NumberFormatSymbols_fr_DJ ,
    PERCENT : NumberFormatSymbols_fr_DJ ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_DJ ,
    PERMILL : NumberFormatSymbols_fr_DJ ,
    PLUS_SIGN : NumberFormatSymbols_fr_DJ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_DJ ,
    ZERO_DIGIT : NumberFormatSymbols_fr_DJ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_DJ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_DJ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_DJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_DJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_DZ.
   */
  type NumberFormatSymbols_fr_DZ = string ;
  var NumberFormatSymbols_fr_DZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_DZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_DZ ,
    DECIMAL_SEP : NumberFormatSymbols_fr_DZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_DZ ,
    EXP_SYMBOL : NumberFormatSymbols_fr_DZ ,
    GROUP_SEP : NumberFormatSymbols_fr_DZ ,
    INFINITY : NumberFormatSymbols_fr_DZ ,
    MINUS_SIGN : NumberFormatSymbols_fr_DZ ,
    NAN : NumberFormatSymbols_fr_DZ ,
    PERCENT : NumberFormatSymbols_fr_DZ ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_DZ ,
    PERMILL : NumberFormatSymbols_fr_DZ ,
    PLUS_SIGN : NumberFormatSymbols_fr_DZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_DZ ,
    ZERO_DIGIT : NumberFormatSymbols_fr_DZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_DZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_DZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_DZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_DZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_FR.
   */
  type NumberFormatSymbols_fr_FR = string ;
  var NumberFormatSymbols_fr_FR : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_FR ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_FR ,
    DECIMAL_SEP : NumberFormatSymbols_fr_FR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_FR ,
    EXP_SYMBOL : NumberFormatSymbols_fr_FR ,
    GROUP_SEP : NumberFormatSymbols_fr_FR ,
    INFINITY : NumberFormatSymbols_fr_FR ,
    MINUS_SIGN : NumberFormatSymbols_fr_FR ,
    NAN : NumberFormatSymbols_fr_FR ,
    PERCENT : NumberFormatSymbols_fr_FR ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_FR ,
    PERMILL : NumberFormatSymbols_fr_FR ,
    PLUS_SIGN : NumberFormatSymbols_fr_FR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_FR ,
    ZERO_DIGIT : NumberFormatSymbols_fr_FR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_FR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_FR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_FR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_GA.
   */
  type NumberFormatSymbols_fr_GA = string ;
  var NumberFormatSymbols_fr_GA : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_GA ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_GA ,
    DECIMAL_SEP : NumberFormatSymbols_fr_GA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_GA ,
    EXP_SYMBOL : NumberFormatSymbols_fr_GA ,
    GROUP_SEP : NumberFormatSymbols_fr_GA ,
    INFINITY : NumberFormatSymbols_fr_GA ,
    MINUS_SIGN : NumberFormatSymbols_fr_GA ,
    NAN : NumberFormatSymbols_fr_GA ,
    PERCENT : NumberFormatSymbols_fr_GA ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_GA ,
    PERMILL : NumberFormatSymbols_fr_GA ,
    PLUS_SIGN : NumberFormatSymbols_fr_GA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_GA ,
    ZERO_DIGIT : NumberFormatSymbols_fr_GA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_GA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_GA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_GA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_GA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_GF.
   */
  type NumberFormatSymbols_fr_GF = string ;
  var NumberFormatSymbols_fr_GF : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_GF ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_GF ,
    DECIMAL_SEP : NumberFormatSymbols_fr_GF ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_GF ,
    EXP_SYMBOL : NumberFormatSymbols_fr_GF ,
    GROUP_SEP : NumberFormatSymbols_fr_GF ,
    INFINITY : NumberFormatSymbols_fr_GF ,
    MINUS_SIGN : NumberFormatSymbols_fr_GF ,
    NAN : NumberFormatSymbols_fr_GF ,
    PERCENT : NumberFormatSymbols_fr_GF ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_GF ,
    PERMILL : NumberFormatSymbols_fr_GF ,
    PLUS_SIGN : NumberFormatSymbols_fr_GF ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_GF ,
    ZERO_DIGIT : NumberFormatSymbols_fr_GF ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_GF'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_GF;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_GF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_GF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_GN.
   */
  type NumberFormatSymbols_fr_GN = string ;
  var NumberFormatSymbols_fr_GN : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_GN ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_GN ,
    DECIMAL_SEP : NumberFormatSymbols_fr_GN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_GN ,
    EXP_SYMBOL : NumberFormatSymbols_fr_GN ,
    GROUP_SEP : NumberFormatSymbols_fr_GN ,
    INFINITY : NumberFormatSymbols_fr_GN ,
    MINUS_SIGN : NumberFormatSymbols_fr_GN ,
    NAN : NumberFormatSymbols_fr_GN ,
    PERCENT : NumberFormatSymbols_fr_GN ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_GN ,
    PERMILL : NumberFormatSymbols_fr_GN ,
    PLUS_SIGN : NumberFormatSymbols_fr_GN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_GN ,
    ZERO_DIGIT : NumberFormatSymbols_fr_GN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_GN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_GN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_GN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_GN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_GP.
   */
  type NumberFormatSymbols_fr_GP = string ;
  var NumberFormatSymbols_fr_GP : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_GP ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_GP ,
    DECIMAL_SEP : NumberFormatSymbols_fr_GP ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_GP ,
    EXP_SYMBOL : NumberFormatSymbols_fr_GP ,
    GROUP_SEP : NumberFormatSymbols_fr_GP ,
    INFINITY : NumberFormatSymbols_fr_GP ,
    MINUS_SIGN : NumberFormatSymbols_fr_GP ,
    NAN : NumberFormatSymbols_fr_GP ,
    PERCENT : NumberFormatSymbols_fr_GP ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_GP ,
    PERMILL : NumberFormatSymbols_fr_GP ,
    PLUS_SIGN : NumberFormatSymbols_fr_GP ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_GP ,
    ZERO_DIGIT : NumberFormatSymbols_fr_GP ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_GP'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_GP;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_GP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_GP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_GQ.
   */
  type NumberFormatSymbols_fr_GQ = string ;
  var NumberFormatSymbols_fr_GQ : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_GQ ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_GQ ,
    DECIMAL_SEP : NumberFormatSymbols_fr_GQ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_GQ ,
    EXP_SYMBOL : NumberFormatSymbols_fr_GQ ,
    GROUP_SEP : NumberFormatSymbols_fr_GQ ,
    INFINITY : NumberFormatSymbols_fr_GQ ,
    MINUS_SIGN : NumberFormatSymbols_fr_GQ ,
    NAN : NumberFormatSymbols_fr_GQ ,
    PERCENT : NumberFormatSymbols_fr_GQ ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_GQ ,
    PERMILL : NumberFormatSymbols_fr_GQ ,
    PLUS_SIGN : NumberFormatSymbols_fr_GQ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_GQ ,
    ZERO_DIGIT : NumberFormatSymbols_fr_GQ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_GQ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_GQ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_GQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_GQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_HT.
   */
  type NumberFormatSymbols_fr_HT = string ;
  var NumberFormatSymbols_fr_HT : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_HT ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_HT ,
    DECIMAL_SEP : NumberFormatSymbols_fr_HT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_HT ,
    EXP_SYMBOL : NumberFormatSymbols_fr_HT ,
    GROUP_SEP : NumberFormatSymbols_fr_HT ,
    INFINITY : NumberFormatSymbols_fr_HT ,
    MINUS_SIGN : NumberFormatSymbols_fr_HT ,
    NAN : NumberFormatSymbols_fr_HT ,
    PERCENT : NumberFormatSymbols_fr_HT ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_HT ,
    PERMILL : NumberFormatSymbols_fr_HT ,
    PLUS_SIGN : NumberFormatSymbols_fr_HT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_HT ,
    ZERO_DIGIT : NumberFormatSymbols_fr_HT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_HT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_HT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_HT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_HT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_KM.
   */
  type NumberFormatSymbols_fr_KM = string ;
  var NumberFormatSymbols_fr_KM : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_KM ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_KM ,
    DECIMAL_SEP : NumberFormatSymbols_fr_KM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_KM ,
    EXP_SYMBOL : NumberFormatSymbols_fr_KM ,
    GROUP_SEP : NumberFormatSymbols_fr_KM ,
    INFINITY : NumberFormatSymbols_fr_KM ,
    MINUS_SIGN : NumberFormatSymbols_fr_KM ,
    NAN : NumberFormatSymbols_fr_KM ,
    PERCENT : NumberFormatSymbols_fr_KM ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_KM ,
    PERMILL : NumberFormatSymbols_fr_KM ,
    PLUS_SIGN : NumberFormatSymbols_fr_KM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_KM ,
    ZERO_DIGIT : NumberFormatSymbols_fr_KM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_KM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_KM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_KM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_KM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_LU.
   */
  type NumberFormatSymbols_fr_LU = string ;
  var NumberFormatSymbols_fr_LU : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_LU ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_LU ,
    DECIMAL_SEP : NumberFormatSymbols_fr_LU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_LU ,
    EXP_SYMBOL : NumberFormatSymbols_fr_LU ,
    GROUP_SEP : NumberFormatSymbols_fr_LU ,
    INFINITY : NumberFormatSymbols_fr_LU ,
    MINUS_SIGN : NumberFormatSymbols_fr_LU ,
    NAN : NumberFormatSymbols_fr_LU ,
    PERCENT : NumberFormatSymbols_fr_LU ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_LU ,
    PERMILL : NumberFormatSymbols_fr_LU ,
    PLUS_SIGN : NumberFormatSymbols_fr_LU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_LU ,
    ZERO_DIGIT : NumberFormatSymbols_fr_LU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_LU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_LU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_LU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_MA.
   */
  type NumberFormatSymbols_fr_MA = string ;
  var NumberFormatSymbols_fr_MA : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_MA ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_MA ,
    DECIMAL_SEP : NumberFormatSymbols_fr_MA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_MA ,
    EXP_SYMBOL : NumberFormatSymbols_fr_MA ,
    GROUP_SEP : NumberFormatSymbols_fr_MA ,
    INFINITY : NumberFormatSymbols_fr_MA ,
    MINUS_SIGN : NumberFormatSymbols_fr_MA ,
    NAN : NumberFormatSymbols_fr_MA ,
    PERCENT : NumberFormatSymbols_fr_MA ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_MA ,
    PERMILL : NumberFormatSymbols_fr_MA ,
    PLUS_SIGN : NumberFormatSymbols_fr_MA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_MA ,
    ZERO_DIGIT : NumberFormatSymbols_fr_MA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_MA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_MC.
   */
  type NumberFormatSymbols_fr_MC = string ;
  var NumberFormatSymbols_fr_MC : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_MC ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_MC ,
    DECIMAL_SEP : NumberFormatSymbols_fr_MC ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_MC ,
    EXP_SYMBOL : NumberFormatSymbols_fr_MC ,
    GROUP_SEP : NumberFormatSymbols_fr_MC ,
    INFINITY : NumberFormatSymbols_fr_MC ,
    MINUS_SIGN : NumberFormatSymbols_fr_MC ,
    NAN : NumberFormatSymbols_fr_MC ,
    PERCENT : NumberFormatSymbols_fr_MC ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_MC ,
    PERMILL : NumberFormatSymbols_fr_MC ,
    PLUS_SIGN : NumberFormatSymbols_fr_MC ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_MC ,
    ZERO_DIGIT : NumberFormatSymbols_fr_MC ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_MC'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MC;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_MC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_MF.
   */
  type NumberFormatSymbols_fr_MF = string ;
  var NumberFormatSymbols_fr_MF : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_MF ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_MF ,
    DECIMAL_SEP : NumberFormatSymbols_fr_MF ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_MF ,
    EXP_SYMBOL : NumberFormatSymbols_fr_MF ,
    GROUP_SEP : NumberFormatSymbols_fr_MF ,
    INFINITY : NumberFormatSymbols_fr_MF ,
    MINUS_SIGN : NumberFormatSymbols_fr_MF ,
    NAN : NumberFormatSymbols_fr_MF ,
    PERCENT : NumberFormatSymbols_fr_MF ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_MF ,
    PERMILL : NumberFormatSymbols_fr_MF ,
    PLUS_SIGN : NumberFormatSymbols_fr_MF ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_MF ,
    ZERO_DIGIT : NumberFormatSymbols_fr_MF ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_MF'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MF;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_MF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_MG.
   */
  type NumberFormatSymbols_fr_MG = string ;
  var NumberFormatSymbols_fr_MG : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_MG ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_MG ,
    DECIMAL_SEP : NumberFormatSymbols_fr_MG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_MG ,
    EXP_SYMBOL : NumberFormatSymbols_fr_MG ,
    GROUP_SEP : NumberFormatSymbols_fr_MG ,
    INFINITY : NumberFormatSymbols_fr_MG ,
    MINUS_SIGN : NumberFormatSymbols_fr_MG ,
    NAN : NumberFormatSymbols_fr_MG ,
    PERCENT : NumberFormatSymbols_fr_MG ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_MG ,
    PERMILL : NumberFormatSymbols_fr_MG ,
    PLUS_SIGN : NumberFormatSymbols_fr_MG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_MG ,
    ZERO_DIGIT : NumberFormatSymbols_fr_MG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_MG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_MG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_ML.
   */
  type NumberFormatSymbols_fr_ML = string ;
  var NumberFormatSymbols_fr_ML : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_ML ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_ML ,
    DECIMAL_SEP : NumberFormatSymbols_fr_ML ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_ML ,
    EXP_SYMBOL : NumberFormatSymbols_fr_ML ,
    GROUP_SEP : NumberFormatSymbols_fr_ML ,
    INFINITY : NumberFormatSymbols_fr_ML ,
    MINUS_SIGN : NumberFormatSymbols_fr_ML ,
    NAN : NumberFormatSymbols_fr_ML ,
    PERCENT : NumberFormatSymbols_fr_ML ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_ML ,
    PERMILL : NumberFormatSymbols_fr_ML ,
    PLUS_SIGN : NumberFormatSymbols_fr_ML ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_ML ,
    ZERO_DIGIT : NumberFormatSymbols_fr_ML ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_ML'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_ML;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_ML' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_MQ.
   */
  type NumberFormatSymbols_fr_MQ = string ;
  var NumberFormatSymbols_fr_MQ : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_MQ ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_MQ ,
    DECIMAL_SEP : NumberFormatSymbols_fr_MQ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_MQ ,
    EXP_SYMBOL : NumberFormatSymbols_fr_MQ ,
    GROUP_SEP : NumberFormatSymbols_fr_MQ ,
    INFINITY : NumberFormatSymbols_fr_MQ ,
    MINUS_SIGN : NumberFormatSymbols_fr_MQ ,
    NAN : NumberFormatSymbols_fr_MQ ,
    PERCENT : NumberFormatSymbols_fr_MQ ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_MQ ,
    PERMILL : NumberFormatSymbols_fr_MQ ,
    PLUS_SIGN : NumberFormatSymbols_fr_MQ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_MQ ,
    ZERO_DIGIT : NumberFormatSymbols_fr_MQ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_MQ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MQ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_MQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_MR.
   */
  type NumberFormatSymbols_fr_MR = string ;
  var NumberFormatSymbols_fr_MR : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_MR ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_MR ,
    DECIMAL_SEP : NumberFormatSymbols_fr_MR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_MR ,
    EXP_SYMBOL : NumberFormatSymbols_fr_MR ,
    GROUP_SEP : NumberFormatSymbols_fr_MR ,
    INFINITY : NumberFormatSymbols_fr_MR ,
    MINUS_SIGN : NumberFormatSymbols_fr_MR ,
    NAN : NumberFormatSymbols_fr_MR ,
    PERCENT : NumberFormatSymbols_fr_MR ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_MR ,
    PERMILL : NumberFormatSymbols_fr_MR ,
    PLUS_SIGN : NumberFormatSymbols_fr_MR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_MR ,
    ZERO_DIGIT : NumberFormatSymbols_fr_MR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_MR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_MR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_MU.
   */
  type NumberFormatSymbols_fr_MU = string ;
  var NumberFormatSymbols_fr_MU : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_MU ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_MU ,
    DECIMAL_SEP : NumberFormatSymbols_fr_MU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_MU ,
    EXP_SYMBOL : NumberFormatSymbols_fr_MU ,
    GROUP_SEP : NumberFormatSymbols_fr_MU ,
    INFINITY : NumberFormatSymbols_fr_MU ,
    MINUS_SIGN : NumberFormatSymbols_fr_MU ,
    NAN : NumberFormatSymbols_fr_MU ,
    PERCENT : NumberFormatSymbols_fr_MU ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_MU ,
    PERMILL : NumberFormatSymbols_fr_MU ,
    PLUS_SIGN : NumberFormatSymbols_fr_MU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_MU ,
    ZERO_DIGIT : NumberFormatSymbols_fr_MU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_MU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_MU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_MU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_NC.
   */
  type NumberFormatSymbols_fr_NC = string ;
  var NumberFormatSymbols_fr_NC : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_NC ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_NC ,
    DECIMAL_SEP : NumberFormatSymbols_fr_NC ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_NC ,
    EXP_SYMBOL : NumberFormatSymbols_fr_NC ,
    GROUP_SEP : NumberFormatSymbols_fr_NC ,
    INFINITY : NumberFormatSymbols_fr_NC ,
    MINUS_SIGN : NumberFormatSymbols_fr_NC ,
    NAN : NumberFormatSymbols_fr_NC ,
    PERCENT : NumberFormatSymbols_fr_NC ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_NC ,
    PERMILL : NumberFormatSymbols_fr_NC ,
    PLUS_SIGN : NumberFormatSymbols_fr_NC ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_NC ,
    ZERO_DIGIT : NumberFormatSymbols_fr_NC ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_NC'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_NC;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_NC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_NC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_NE.
   */
  type NumberFormatSymbols_fr_NE = string ;
  var NumberFormatSymbols_fr_NE : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_NE ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_NE ,
    DECIMAL_SEP : NumberFormatSymbols_fr_NE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_NE ,
    EXP_SYMBOL : NumberFormatSymbols_fr_NE ,
    GROUP_SEP : NumberFormatSymbols_fr_NE ,
    INFINITY : NumberFormatSymbols_fr_NE ,
    MINUS_SIGN : NumberFormatSymbols_fr_NE ,
    NAN : NumberFormatSymbols_fr_NE ,
    PERCENT : NumberFormatSymbols_fr_NE ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_NE ,
    PERMILL : NumberFormatSymbols_fr_NE ,
    PLUS_SIGN : NumberFormatSymbols_fr_NE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_NE ,
    ZERO_DIGIT : NumberFormatSymbols_fr_NE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_NE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_NE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_NE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_PF.
   */
  type NumberFormatSymbols_fr_PF = string ;
  var NumberFormatSymbols_fr_PF : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_PF ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_PF ,
    DECIMAL_SEP : NumberFormatSymbols_fr_PF ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_PF ,
    EXP_SYMBOL : NumberFormatSymbols_fr_PF ,
    GROUP_SEP : NumberFormatSymbols_fr_PF ,
    INFINITY : NumberFormatSymbols_fr_PF ,
    MINUS_SIGN : NumberFormatSymbols_fr_PF ,
    NAN : NumberFormatSymbols_fr_PF ,
    PERCENT : NumberFormatSymbols_fr_PF ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_PF ,
    PERMILL : NumberFormatSymbols_fr_PF ,
    PLUS_SIGN : NumberFormatSymbols_fr_PF ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_PF ,
    ZERO_DIGIT : NumberFormatSymbols_fr_PF ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_PF'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_PF;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_PF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_PF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_PM.
   */
  type NumberFormatSymbols_fr_PM = string ;
  var NumberFormatSymbols_fr_PM : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_PM ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_PM ,
    DECIMAL_SEP : NumberFormatSymbols_fr_PM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_PM ,
    EXP_SYMBOL : NumberFormatSymbols_fr_PM ,
    GROUP_SEP : NumberFormatSymbols_fr_PM ,
    INFINITY : NumberFormatSymbols_fr_PM ,
    MINUS_SIGN : NumberFormatSymbols_fr_PM ,
    NAN : NumberFormatSymbols_fr_PM ,
    PERCENT : NumberFormatSymbols_fr_PM ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_PM ,
    PERMILL : NumberFormatSymbols_fr_PM ,
    PLUS_SIGN : NumberFormatSymbols_fr_PM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_PM ,
    ZERO_DIGIT : NumberFormatSymbols_fr_PM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_PM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_PM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_PM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_PM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_RE.
   */
  type NumberFormatSymbols_fr_RE = string ;
  var NumberFormatSymbols_fr_RE : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_RE ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_RE ,
    DECIMAL_SEP : NumberFormatSymbols_fr_RE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_RE ,
    EXP_SYMBOL : NumberFormatSymbols_fr_RE ,
    GROUP_SEP : NumberFormatSymbols_fr_RE ,
    INFINITY : NumberFormatSymbols_fr_RE ,
    MINUS_SIGN : NumberFormatSymbols_fr_RE ,
    NAN : NumberFormatSymbols_fr_RE ,
    PERCENT : NumberFormatSymbols_fr_RE ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_RE ,
    PERMILL : NumberFormatSymbols_fr_RE ,
    PLUS_SIGN : NumberFormatSymbols_fr_RE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_RE ,
    ZERO_DIGIT : NumberFormatSymbols_fr_RE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_RE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_RE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_RE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_RE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_RW.
   */
  type NumberFormatSymbols_fr_RW = string ;
  var NumberFormatSymbols_fr_RW : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_RW ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_RW ,
    DECIMAL_SEP : NumberFormatSymbols_fr_RW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_RW ,
    EXP_SYMBOL : NumberFormatSymbols_fr_RW ,
    GROUP_SEP : NumberFormatSymbols_fr_RW ,
    INFINITY : NumberFormatSymbols_fr_RW ,
    MINUS_SIGN : NumberFormatSymbols_fr_RW ,
    NAN : NumberFormatSymbols_fr_RW ,
    PERCENT : NumberFormatSymbols_fr_RW ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_RW ,
    PERMILL : NumberFormatSymbols_fr_RW ,
    PLUS_SIGN : NumberFormatSymbols_fr_RW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_RW ,
    ZERO_DIGIT : NumberFormatSymbols_fr_RW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_RW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_RW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_RW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_RW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_SC.
   */
  type NumberFormatSymbols_fr_SC = string ;
  var NumberFormatSymbols_fr_SC : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_SC ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_SC ,
    DECIMAL_SEP : NumberFormatSymbols_fr_SC ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_SC ,
    EXP_SYMBOL : NumberFormatSymbols_fr_SC ,
    GROUP_SEP : NumberFormatSymbols_fr_SC ,
    INFINITY : NumberFormatSymbols_fr_SC ,
    MINUS_SIGN : NumberFormatSymbols_fr_SC ,
    NAN : NumberFormatSymbols_fr_SC ,
    PERCENT : NumberFormatSymbols_fr_SC ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_SC ,
    PERMILL : NumberFormatSymbols_fr_SC ,
    PLUS_SIGN : NumberFormatSymbols_fr_SC ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_SC ,
    ZERO_DIGIT : NumberFormatSymbols_fr_SC ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_SC'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_SC;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_SC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_SC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_SN.
   */
  type NumberFormatSymbols_fr_SN = string ;
  var NumberFormatSymbols_fr_SN : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_SN ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_SN ,
    DECIMAL_SEP : NumberFormatSymbols_fr_SN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_SN ,
    EXP_SYMBOL : NumberFormatSymbols_fr_SN ,
    GROUP_SEP : NumberFormatSymbols_fr_SN ,
    INFINITY : NumberFormatSymbols_fr_SN ,
    MINUS_SIGN : NumberFormatSymbols_fr_SN ,
    NAN : NumberFormatSymbols_fr_SN ,
    PERCENT : NumberFormatSymbols_fr_SN ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_SN ,
    PERMILL : NumberFormatSymbols_fr_SN ,
    PLUS_SIGN : NumberFormatSymbols_fr_SN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_SN ,
    ZERO_DIGIT : NumberFormatSymbols_fr_SN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_SN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_SN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_SN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_SN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_SY.
   */
  type NumberFormatSymbols_fr_SY = string ;
  var NumberFormatSymbols_fr_SY : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_SY ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_SY ,
    DECIMAL_SEP : NumberFormatSymbols_fr_SY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_SY ,
    EXP_SYMBOL : NumberFormatSymbols_fr_SY ,
    GROUP_SEP : NumberFormatSymbols_fr_SY ,
    INFINITY : NumberFormatSymbols_fr_SY ,
    MINUS_SIGN : NumberFormatSymbols_fr_SY ,
    NAN : NumberFormatSymbols_fr_SY ,
    PERCENT : NumberFormatSymbols_fr_SY ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_SY ,
    PERMILL : NumberFormatSymbols_fr_SY ,
    PLUS_SIGN : NumberFormatSymbols_fr_SY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_SY ,
    ZERO_DIGIT : NumberFormatSymbols_fr_SY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_SY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_SY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_SY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_SY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_TD.
   */
  type NumberFormatSymbols_fr_TD = string ;
  var NumberFormatSymbols_fr_TD : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_TD ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_TD ,
    DECIMAL_SEP : NumberFormatSymbols_fr_TD ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_TD ,
    EXP_SYMBOL : NumberFormatSymbols_fr_TD ,
    GROUP_SEP : NumberFormatSymbols_fr_TD ,
    INFINITY : NumberFormatSymbols_fr_TD ,
    MINUS_SIGN : NumberFormatSymbols_fr_TD ,
    NAN : NumberFormatSymbols_fr_TD ,
    PERCENT : NumberFormatSymbols_fr_TD ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_TD ,
    PERMILL : NumberFormatSymbols_fr_TD ,
    PLUS_SIGN : NumberFormatSymbols_fr_TD ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_TD ,
    ZERO_DIGIT : NumberFormatSymbols_fr_TD ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_TD'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_TD;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_TD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_TD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_TG.
   */
  type NumberFormatSymbols_fr_TG = string ;
  var NumberFormatSymbols_fr_TG : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_TG ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_TG ,
    DECIMAL_SEP : NumberFormatSymbols_fr_TG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_TG ,
    EXP_SYMBOL : NumberFormatSymbols_fr_TG ,
    GROUP_SEP : NumberFormatSymbols_fr_TG ,
    INFINITY : NumberFormatSymbols_fr_TG ,
    MINUS_SIGN : NumberFormatSymbols_fr_TG ,
    NAN : NumberFormatSymbols_fr_TG ,
    PERCENT : NumberFormatSymbols_fr_TG ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_TG ,
    PERMILL : NumberFormatSymbols_fr_TG ,
    PLUS_SIGN : NumberFormatSymbols_fr_TG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_TG ,
    ZERO_DIGIT : NumberFormatSymbols_fr_TG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_TG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_TG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_TG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_TG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_TN.
   */
  type NumberFormatSymbols_fr_TN = string ;
  var NumberFormatSymbols_fr_TN : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_TN ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_TN ,
    DECIMAL_SEP : NumberFormatSymbols_fr_TN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_TN ,
    EXP_SYMBOL : NumberFormatSymbols_fr_TN ,
    GROUP_SEP : NumberFormatSymbols_fr_TN ,
    INFINITY : NumberFormatSymbols_fr_TN ,
    MINUS_SIGN : NumberFormatSymbols_fr_TN ,
    NAN : NumberFormatSymbols_fr_TN ,
    PERCENT : NumberFormatSymbols_fr_TN ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_TN ,
    PERMILL : NumberFormatSymbols_fr_TN ,
    PLUS_SIGN : NumberFormatSymbols_fr_TN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_TN ,
    ZERO_DIGIT : NumberFormatSymbols_fr_TN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_TN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_TN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_TN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_TN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_VU.
   */
  type NumberFormatSymbols_fr_VU = string ;
  var NumberFormatSymbols_fr_VU : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_VU ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_VU ,
    DECIMAL_SEP : NumberFormatSymbols_fr_VU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_VU ,
    EXP_SYMBOL : NumberFormatSymbols_fr_VU ,
    GROUP_SEP : NumberFormatSymbols_fr_VU ,
    INFINITY : NumberFormatSymbols_fr_VU ,
    MINUS_SIGN : NumberFormatSymbols_fr_VU ,
    NAN : NumberFormatSymbols_fr_VU ,
    PERCENT : NumberFormatSymbols_fr_VU ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_VU ,
    PERMILL : NumberFormatSymbols_fr_VU ,
    PLUS_SIGN : NumberFormatSymbols_fr_VU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_VU ,
    ZERO_DIGIT : NumberFormatSymbols_fr_VU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_VU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_VU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_VU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_VU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_WF.
   */
  type NumberFormatSymbols_fr_WF = string ;
  var NumberFormatSymbols_fr_WF : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_WF ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_WF ,
    DECIMAL_SEP : NumberFormatSymbols_fr_WF ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_WF ,
    EXP_SYMBOL : NumberFormatSymbols_fr_WF ,
    GROUP_SEP : NumberFormatSymbols_fr_WF ,
    INFINITY : NumberFormatSymbols_fr_WF ,
    MINUS_SIGN : NumberFormatSymbols_fr_WF ,
    NAN : NumberFormatSymbols_fr_WF ,
    PERCENT : NumberFormatSymbols_fr_WF ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_WF ,
    PERMILL : NumberFormatSymbols_fr_WF ,
    PLUS_SIGN : NumberFormatSymbols_fr_WF ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_WF ,
    ZERO_DIGIT : NumberFormatSymbols_fr_WF ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_WF'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_WF;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_WF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_WF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fr_YT.
   */
  type NumberFormatSymbols_fr_YT = string ;
  var NumberFormatSymbols_fr_YT : {
    CURRENCY_PATTERN : NumberFormatSymbols_fr_YT ,
    DECIMAL_PATTERN : NumberFormatSymbols_fr_YT ,
    DECIMAL_SEP : NumberFormatSymbols_fr_YT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fr_YT ,
    EXP_SYMBOL : NumberFormatSymbols_fr_YT ,
    GROUP_SEP : NumberFormatSymbols_fr_YT ,
    INFINITY : NumberFormatSymbols_fr_YT ,
    MINUS_SIGN : NumberFormatSymbols_fr_YT ,
    NAN : NumberFormatSymbols_fr_YT ,
    PERCENT : NumberFormatSymbols_fr_YT ,
    PERCENT_PATTERN : NumberFormatSymbols_fr_YT ,
    PERMILL : NumberFormatSymbols_fr_YT ,
    PLUS_SIGN : NumberFormatSymbols_fr_YT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fr_YT ,
    ZERO_DIGIT : NumberFormatSymbols_fr_YT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fr_YT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_YT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fr_YT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fr_YT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fur.
   */
  type NumberFormatSymbols_fur = string ;
  var NumberFormatSymbols_fur : {
    CURRENCY_PATTERN : NumberFormatSymbols_fur ,
    DECIMAL_PATTERN : NumberFormatSymbols_fur ,
    DECIMAL_SEP : NumberFormatSymbols_fur ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fur ,
    EXP_SYMBOL : NumberFormatSymbols_fur ,
    GROUP_SEP : NumberFormatSymbols_fur ,
    INFINITY : NumberFormatSymbols_fur ,
    MINUS_SIGN : NumberFormatSymbols_fur ,
    NAN : NumberFormatSymbols_fur ,
    PERCENT : NumberFormatSymbols_fur ,
    PERCENT_PATTERN : NumberFormatSymbols_fur ,
    PERMILL : NumberFormatSymbols_fur ,
    PLUS_SIGN : NumberFormatSymbols_fur ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fur ,
    ZERO_DIGIT : NumberFormatSymbols_fur ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fur'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fur;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fur' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fur;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fur_IT.
   */
  type NumberFormatSymbols_fur_IT = string ;
  var NumberFormatSymbols_fur_IT : {
    CURRENCY_PATTERN : NumberFormatSymbols_fur_IT ,
    DECIMAL_PATTERN : NumberFormatSymbols_fur_IT ,
    DECIMAL_SEP : NumberFormatSymbols_fur_IT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fur_IT ,
    EXP_SYMBOL : NumberFormatSymbols_fur_IT ,
    GROUP_SEP : NumberFormatSymbols_fur_IT ,
    INFINITY : NumberFormatSymbols_fur_IT ,
    MINUS_SIGN : NumberFormatSymbols_fur_IT ,
    NAN : NumberFormatSymbols_fur_IT ,
    PERCENT : NumberFormatSymbols_fur_IT ,
    PERCENT_PATTERN : NumberFormatSymbols_fur_IT ,
    PERMILL : NumberFormatSymbols_fur_IT ,
    PLUS_SIGN : NumberFormatSymbols_fur_IT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fur_IT ,
    ZERO_DIGIT : NumberFormatSymbols_fur_IT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fur_IT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fur_IT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fur_IT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fur_IT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fy.
   */
  type NumberFormatSymbols_fy = string ;
  var NumberFormatSymbols_fy : {
    CURRENCY_PATTERN : NumberFormatSymbols_fy ,
    DECIMAL_PATTERN : NumberFormatSymbols_fy ,
    DECIMAL_SEP : NumberFormatSymbols_fy ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fy ,
    EXP_SYMBOL : NumberFormatSymbols_fy ,
    GROUP_SEP : NumberFormatSymbols_fy ,
    INFINITY : NumberFormatSymbols_fy ,
    MINUS_SIGN : NumberFormatSymbols_fy ,
    NAN : NumberFormatSymbols_fy ,
    PERCENT : NumberFormatSymbols_fy ,
    PERCENT_PATTERN : NumberFormatSymbols_fy ,
    PERMILL : NumberFormatSymbols_fy ,
    PLUS_SIGN : NumberFormatSymbols_fy ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fy ,
    ZERO_DIGIT : NumberFormatSymbols_fy ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fy'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fy;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fy' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale fy_NL.
   */
  type NumberFormatSymbols_fy_NL = string ;
  var NumberFormatSymbols_fy_NL : {
    CURRENCY_PATTERN : NumberFormatSymbols_fy_NL ,
    DECIMAL_PATTERN : NumberFormatSymbols_fy_NL ,
    DECIMAL_SEP : NumberFormatSymbols_fy_NL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_fy_NL ,
    EXP_SYMBOL : NumberFormatSymbols_fy_NL ,
    GROUP_SEP : NumberFormatSymbols_fy_NL ,
    INFINITY : NumberFormatSymbols_fy_NL ,
    MINUS_SIGN : NumberFormatSymbols_fy_NL ,
    NAN : NumberFormatSymbols_fy_NL ,
    PERCENT : NumberFormatSymbols_fy_NL ,
    PERCENT_PATTERN : NumberFormatSymbols_fy_NL ,
    PERMILL : NumberFormatSymbols_fy_NL ,
    PLUS_SIGN : NumberFormatSymbols_fy_NL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_fy_NL ,
    ZERO_DIGIT : NumberFormatSymbols_fy_NL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_fy_NL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fy_NL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_fy_NL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_fy_NL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ga.
   */
  type NumberFormatSymbols_ga = string ;
  var NumberFormatSymbols_ga : {
    CURRENCY_PATTERN : NumberFormatSymbols_ga ,
    DECIMAL_PATTERN : NumberFormatSymbols_ga ,
    DECIMAL_SEP : NumberFormatSymbols_ga ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ga ,
    EXP_SYMBOL : NumberFormatSymbols_ga ,
    GROUP_SEP : NumberFormatSymbols_ga ,
    INFINITY : NumberFormatSymbols_ga ,
    MINUS_SIGN : NumberFormatSymbols_ga ,
    NAN : NumberFormatSymbols_ga ,
    PERCENT : NumberFormatSymbols_ga ,
    PERCENT_PATTERN : NumberFormatSymbols_ga ,
    PERMILL : NumberFormatSymbols_ga ,
    PLUS_SIGN : NumberFormatSymbols_ga ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ga ,
    ZERO_DIGIT : NumberFormatSymbols_ga ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ga'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ga;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ga' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ga;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ga_IE.
   */
  type NumberFormatSymbols_ga_IE = string ;
  var NumberFormatSymbols_ga_IE : {
    CURRENCY_PATTERN : NumberFormatSymbols_ga_IE ,
    DECIMAL_PATTERN : NumberFormatSymbols_ga_IE ,
    DECIMAL_SEP : NumberFormatSymbols_ga_IE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ga_IE ,
    EXP_SYMBOL : NumberFormatSymbols_ga_IE ,
    GROUP_SEP : NumberFormatSymbols_ga_IE ,
    INFINITY : NumberFormatSymbols_ga_IE ,
    MINUS_SIGN : NumberFormatSymbols_ga_IE ,
    NAN : NumberFormatSymbols_ga_IE ,
    PERCENT : NumberFormatSymbols_ga_IE ,
    PERCENT_PATTERN : NumberFormatSymbols_ga_IE ,
    PERMILL : NumberFormatSymbols_ga_IE ,
    PLUS_SIGN : NumberFormatSymbols_ga_IE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ga_IE ,
    ZERO_DIGIT : NumberFormatSymbols_ga_IE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ga_IE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ga_IE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ga_IE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ga_IE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale gd.
   */
  type NumberFormatSymbols_gd = string ;
  var NumberFormatSymbols_gd : {
    CURRENCY_PATTERN : NumberFormatSymbols_gd ,
    DECIMAL_PATTERN : NumberFormatSymbols_gd ,
    DECIMAL_SEP : NumberFormatSymbols_gd ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_gd ,
    EXP_SYMBOL : NumberFormatSymbols_gd ,
    GROUP_SEP : NumberFormatSymbols_gd ,
    INFINITY : NumberFormatSymbols_gd ,
    MINUS_SIGN : NumberFormatSymbols_gd ,
    NAN : NumberFormatSymbols_gd ,
    PERCENT : NumberFormatSymbols_gd ,
    PERCENT_PATTERN : NumberFormatSymbols_gd ,
    PERMILL : NumberFormatSymbols_gd ,
    PLUS_SIGN : NumberFormatSymbols_gd ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_gd ,
    ZERO_DIGIT : NumberFormatSymbols_gd ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_gd'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gd;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_gd' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gd;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale gd_GB.
   */
  type NumberFormatSymbols_gd_GB = string ;
  var NumberFormatSymbols_gd_GB : {
    CURRENCY_PATTERN : NumberFormatSymbols_gd_GB ,
    DECIMAL_PATTERN : NumberFormatSymbols_gd_GB ,
    DECIMAL_SEP : NumberFormatSymbols_gd_GB ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_gd_GB ,
    EXP_SYMBOL : NumberFormatSymbols_gd_GB ,
    GROUP_SEP : NumberFormatSymbols_gd_GB ,
    INFINITY : NumberFormatSymbols_gd_GB ,
    MINUS_SIGN : NumberFormatSymbols_gd_GB ,
    NAN : NumberFormatSymbols_gd_GB ,
    PERCENT : NumberFormatSymbols_gd_GB ,
    PERCENT_PATTERN : NumberFormatSymbols_gd_GB ,
    PERMILL : NumberFormatSymbols_gd_GB ,
    PLUS_SIGN : NumberFormatSymbols_gd_GB ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_gd_GB ,
    ZERO_DIGIT : NumberFormatSymbols_gd_GB ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_gd_GB'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gd_GB;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_gd_GB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gd_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale gl.
   */
  type NumberFormatSymbols_gl = string ;
  var NumberFormatSymbols_gl : {
    CURRENCY_PATTERN : NumberFormatSymbols_gl ,
    DECIMAL_PATTERN : NumberFormatSymbols_gl ,
    DECIMAL_SEP : NumberFormatSymbols_gl ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_gl ,
    EXP_SYMBOL : NumberFormatSymbols_gl ,
    GROUP_SEP : NumberFormatSymbols_gl ,
    INFINITY : NumberFormatSymbols_gl ,
    MINUS_SIGN : NumberFormatSymbols_gl ,
    NAN : NumberFormatSymbols_gl ,
    PERCENT : NumberFormatSymbols_gl ,
    PERCENT_PATTERN : NumberFormatSymbols_gl ,
    PERMILL : NumberFormatSymbols_gl ,
    PLUS_SIGN : NumberFormatSymbols_gl ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_gl ,
    ZERO_DIGIT : NumberFormatSymbols_gl ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_gl'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gl;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_gl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale gl_ES.
   */
  type NumberFormatSymbols_gl_ES = string ;
  var NumberFormatSymbols_gl_ES : {
    CURRENCY_PATTERN : NumberFormatSymbols_gl_ES ,
    DECIMAL_PATTERN : NumberFormatSymbols_gl_ES ,
    DECIMAL_SEP : NumberFormatSymbols_gl_ES ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_gl_ES ,
    EXP_SYMBOL : NumberFormatSymbols_gl_ES ,
    GROUP_SEP : NumberFormatSymbols_gl_ES ,
    INFINITY : NumberFormatSymbols_gl_ES ,
    MINUS_SIGN : NumberFormatSymbols_gl_ES ,
    NAN : NumberFormatSymbols_gl_ES ,
    PERCENT : NumberFormatSymbols_gl_ES ,
    PERCENT_PATTERN : NumberFormatSymbols_gl_ES ,
    PERMILL : NumberFormatSymbols_gl_ES ,
    PLUS_SIGN : NumberFormatSymbols_gl_ES ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_gl_ES ,
    ZERO_DIGIT : NumberFormatSymbols_gl_ES ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_gl_ES'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gl_ES;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_gl_ES' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gl_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale gsw.
   */
  type NumberFormatSymbols_gsw = string ;
  var NumberFormatSymbols_gsw : {
    CURRENCY_PATTERN : NumberFormatSymbols_gsw ,
    DECIMAL_PATTERN : NumberFormatSymbols_gsw ,
    DECIMAL_SEP : NumberFormatSymbols_gsw ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_gsw ,
    EXP_SYMBOL : NumberFormatSymbols_gsw ,
    GROUP_SEP : NumberFormatSymbols_gsw ,
    INFINITY : NumberFormatSymbols_gsw ,
    MINUS_SIGN : NumberFormatSymbols_gsw ,
    NAN : NumberFormatSymbols_gsw ,
    PERCENT : NumberFormatSymbols_gsw ,
    PERCENT_PATTERN : NumberFormatSymbols_gsw ,
    PERMILL : NumberFormatSymbols_gsw ,
    PLUS_SIGN : NumberFormatSymbols_gsw ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_gsw ,
    ZERO_DIGIT : NumberFormatSymbols_gsw ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_gsw'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gsw;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_gsw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gsw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale gsw_CH.
   */
  type NumberFormatSymbols_gsw_CH = string ;
  var NumberFormatSymbols_gsw_CH : {
    CURRENCY_PATTERN : NumberFormatSymbols_gsw_CH ,
    DECIMAL_PATTERN : NumberFormatSymbols_gsw_CH ,
    DECIMAL_SEP : NumberFormatSymbols_gsw_CH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_gsw_CH ,
    EXP_SYMBOL : NumberFormatSymbols_gsw_CH ,
    GROUP_SEP : NumberFormatSymbols_gsw_CH ,
    INFINITY : NumberFormatSymbols_gsw_CH ,
    MINUS_SIGN : NumberFormatSymbols_gsw_CH ,
    NAN : NumberFormatSymbols_gsw_CH ,
    PERCENT : NumberFormatSymbols_gsw_CH ,
    PERCENT_PATTERN : NumberFormatSymbols_gsw_CH ,
    PERMILL : NumberFormatSymbols_gsw_CH ,
    PLUS_SIGN : NumberFormatSymbols_gsw_CH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_gsw_CH ,
    ZERO_DIGIT : NumberFormatSymbols_gsw_CH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_gsw_CH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gsw_CH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_gsw_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gsw_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale gsw_FR.
   */
  type NumberFormatSymbols_gsw_FR = string ;
  var NumberFormatSymbols_gsw_FR : {
    CURRENCY_PATTERN : NumberFormatSymbols_gsw_FR ,
    DECIMAL_PATTERN : NumberFormatSymbols_gsw_FR ,
    DECIMAL_SEP : NumberFormatSymbols_gsw_FR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_gsw_FR ,
    EXP_SYMBOL : NumberFormatSymbols_gsw_FR ,
    GROUP_SEP : NumberFormatSymbols_gsw_FR ,
    INFINITY : NumberFormatSymbols_gsw_FR ,
    MINUS_SIGN : NumberFormatSymbols_gsw_FR ,
    NAN : NumberFormatSymbols_gsw_FR ,
    PERCENT : NumberFormatSymbols_gsw_FR ,
    PERCENT_PATTERN : NumberFormatSymbols_gsw_FR ,
    PERMILL : NumberFormatSymbols_gsw_FR ,
    PLUS_SIGN : NumberFormatSymbols_gsw_FR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_gsw_FR ,
    ZERO_DIGIT : NumberFormatSymbols_gsw_FR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_gsw_FR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gsw_FR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_gsw_FR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gsw_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale gsw_LI.
   */
  type NumberFormatSymbols_gsw_LI = string ;
  var NumberFormatSymbols_gsw_LI : {
    CURRENCY_PATTERN : NumberFormatSymbols_gsw_LI ,
    DECIMAL_PATTERN : NumberFormatSymbols_gsw_LI ,
    DECIMAL_SEP : NumberFormatSymbols_gsw_LI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_gsw_LI ,
    EXP_SYMBOL : NumberFormatSymbols_gsw_LI ,
    GROUP_SEP : NumberFormatSymbols_gsw_LI ,
    INFINITY : NumberFormatSymbols_gsw_LI ,
    MINUS_SIGN : NumberFormatSymbols_gsw_LI ,
    NAN : NumberFormatSymbols_gsw_LI ,
    PERCENT : NumberFormatSymbols_gsw_LI ,
    PERCENT_PATTERN : NumberFormatSymbols_gsw_LI ,
    PERMILL : NumberFormatSymbols_gsw_LI ,
    PLUS_SIGN : NumberFormatSymbols_gsw_LI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_gsw_LI ,
    ZERO_DIGIT : NumberFormatSymbols_gsw_LI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_gsw_LI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gsw_LI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_gsw_LI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gsw_LI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale gu.
   */
  type NumberFormatSymbols_gu = string ;
  var NumberFormatSymbols_gu : {
    CURRENCY_PATTERN : NumberFormatSymbols_gu ,
    DECIMAL_PATTERN : NumberFormatSymbols_gu ,
    DECIMAL_SEP : NumberFormatSymbols_gu ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_gu ,
    EXP_SYMBOL : NumberFormatSymbols_gu ,
    GROUP_SEP : NumberFormatSymbols_gu ,
    INFINITY : NumberFormatSymbols_gu ,
    MINUS_SIGN : NumberFormatSymbols_gu ,
    NAN : NumberFormatSymbols_gu ,
    PERCENT : NumberFormatSymbols_gu ,
    PERCENT_PATTERN : NumberFormatSymbols_gu ,
    PERMILL : NumberFormatSymbols_gu ,
    PLUS_SIGN : NumberFormatSymbols_gu ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_gu ,
    ZERO_DIGIT : NumberFormatSymbols_gu ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_gu'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gu;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_gu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale gu_IN.
   */
  type NumberFormatSymbols_gu_IN = string ;
  var NumberFormatSymbols_gu_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_gu_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_gu_IN ,
    DECIMAL_SEP : NumberFormatSymbols_gu_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_gu_IN ,
    EXP_SYMBOL : NumberFormatSymbols_gu_IN ,
    GROUP_SEP : NumberFormatSymbols_gu_IN ,
    INFINITY : NumberFormatSymbols_gu_IN ,
    MINUS_SIGN : NumberFormatSymbols_gu_IN ,
    NAN : NumberFormatSymbols_gu_IN ,
    PERCENT : NumberFormatSymbols_gu_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_gu_IN ,
    PERMILL : NumberFormatSymbols_gu_IN ,
    PLUS_SIGN : NumberFormatSymbols_gu_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_gu_IN ,
    ZERO_DIGIT : NumberFormatSymbols_gu_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_gu_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gu_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_gu_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gu_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale guz.
   */
  type NumberFormatSymbols_guz = string ;
  var NumberFormatSymbols_guz : {
    CURRENCY_PATTERN : NumberFormatSymbols_guz ,
    DECIMAL_PATTERN : NumberFormatSymbols_guz ,
    DECIMAL_SEP : NumberFormatSymbols_guz ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_guz ,
    EXP_SYMBOL : NumberFormatSymbols_guz ,
    GROUP_SEP : NumberFormatSymbols_guz ,
    INFINITY : NumberFormatSymbols_guz ,
    MINUS_SIGN : NumberFormatSymbols_guz ,
    NAN : NumberFormatSymbols_guz ,
    PERCENT : NumberFormatSymbols_guz ,
    PERCENT_PATTERN : NumberFormatSymbols_guz ,
    PERMILL : NumberFormatSymbols_guz ,
    PLUS_SIGN : NumberFormatSymbols_guz ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_guz ,
    ZERO_DIGIT : NumberFormatSymbols_guz ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_guz'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_guz;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_guz' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_guz;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale guz_KE.
   */
  type NumberFormatSymbols_guz_KE = string ;
  var NumberFormatSymbols_guz_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_guz_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_guz_KE ,
    DECIMAL_SEP : NumberFormatSymbols_guz_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_guz_KE ,
    EXP_SYMBOL : NumberFormatSymbols_guz_KE ,
    GROUP_SEP : NumberFormatSymbols_guz_KE ,
    INFINITY : NumberFormatSymbols_guz_KE ,
    MINUS_SIGN : NumberFormatSymbols_guz_KE ,
    NAN : NumberFormatSymbols_guz_KE ,
    PERCENT : NumberFormatSymbols_guz_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_guz_KE ,
    PERMILL : NumberFormatSymbols_guz_KE ,
    PLUS_SIGN : NumberFormatSymbols_guz_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_guz_KE ,
    ZERO_DIGIT : NumberFormatSymbols_guz_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_guz_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_guz_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_guz_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_guz_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale gv.
   */
  type NumberFormatSymbols_gv = string ;
  var NumberFormatSymbols_gv : {
    CURRENCY_PATTERN : NumberFormatSymbols_gv ,
    DECIMAL_PATTERN : NumberFormatSymbols_gv ,
    DECIMAL_SEP : NumberFormatSymbols_gv ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_gv ,
    EXP_SYMBOL : NumberFormatSymbols_gv ,
    GROUP_SEP : NumberFormatSymbols_gv ,
    INFINITY : NumberFormatSymbols_gv ,
    MINUS_SIGN : NumberFormatSymbols_gv ,
    NAN : NumberFormatSymbols_gv ,
    PERCENT : NumberFormatSymbols_gv ,
    PERCENT_PATTERN : NumberFormatSymbols_gv ,
    PERMILL : NumberFormatSymbols_gv ,
    PLUS_SIGN : NumberFormatSymbols_gv ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_gv ,
    ZERO_DIGIT : NumberFormatSymbols_gv ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_gv'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gv;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_gv' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gv;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale gv_IM.
   */
  type NumberFormatSymbols_gv_IM = string ;
  var NumberFormatSymbols_gv_IM : {
    CURRENCY_PATTERN : NumberFormatSymbols_gv_IM ,
    DECIMAL_PATTERN : NumberFormatSymbols_gv_IM ,
    DECIMAL_SEP : NumberFormatSymbols_gv_IM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_gv_IM ,
    EXP_SYMBOL : NumberFormatSymbols_gv_IM ,
    GROUP_SEP : NumberFormatSymbols_gv_IM ,
    INFINITY : NumberFormatSymbols_gv_IM ,
    MINUS_SIGN : NumberFormatSymbols_gv_IM ,
    NAN : NumberFormatSymbols_gv_IM ,
    PERCENT : NumberFormatSymbols_gv_IM ,
    PERCENT_PATTERN : NumberFormatSymbols_gv_IM ,
    PERMILL : NumberFormatSymbols_gv_IM ,
    PLUS_SIGN : NumberFormatSymbols_gv_IM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_gv_IM ,
    ZERO_DIGIT : NumberFormatSymbols_gv_IM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_gv_IM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gv_IM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_gv_IM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_gv_IM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ha.
   */
  type NumberFormatSymbols_ha = string ;
  var NumberFormatSymbols_ha : {
    CURRENCY_PATTERN : NumberFormatSymbols_ha ,
    DECIMAL_PATTERN : NumberFormatSymbols_ha ,
    DECIMAL_SEP : NumberFormatSymbols_ha ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ha ,
    EXP_SYMBOL : NumberFormatSymbols_ha ,
    GROUP_SEP : NumberFormatSymbols_ha ,
    INFINITY : NumberFormatSymbols_ha ,
    MINUS_SIGN : NumberFormatSymbols_ha ,
    NAN : NumberFormatSymbols_ha ,
    PERCENT : NumberFormatSymbols_ha ,
    PERCENT_PATTERN : NumberFormatSymbols_ha ,
    PERMILL : NumberFormatSymbols_ha ,
    PLUS_SIGN : NumberFormatSymbols_ha ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ha ,
    ZERO_DIGIT : NumberFormatSymbols_ha ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ha'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ha;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ha' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ha;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ha_GH.
   */
  type NumberFormatSymbols_ha_GH = string ;
  var NumberFormatSymbols_ha_GH : {
    CURRENCY_PATTERN : NumberFormatSymbols_ha_GH ,
    DECIMAL_PATTERN : NumberFormatSymbols_ha_GH ,
    DECIMAL_SEP : NumberFormatSymbols_ha_GH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ha_GH ,
    EXP_SYMBOL : NumberFormatSymbols_ha_GH ,
    GROUP_SEP : NumberFormatSymbols_ha_GH ,
    INFINITY : NumberFormatSymbols_ha_GH ,
    MINUS_SIGN : NumberFormatSymbols_ha_GH ,
    NAN : NumberFormatSymbols_ha_GH ,
    PERCENT : NumberFormatSymbols_ha_GH ,
    PERCENT_PATTERN : NumberFormatSymbols_ha_GH ,
    PERMILL : NumberFormatSymbols_ha_GH ,
    PLUS_SIGN : NumberFormatSymbols_ha_GH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ha_GH ,
    ZERO_DIGIT : NumberFormatSymbols_ha_GH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ha_GH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ha_GH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ha_GH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ha_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ha_NE.
   */
  type NumberFormatSymbols_ha_NE = string ;
  var NumberFormatSymbols_ha_NE : {
    CURRENCY_PATTERN : NumberFormatSymbols_ha_NE ,
    DECIMAL_PATTERN : NumberFormatSymbols_ha_NE ,
    DECIMAL_SEP : NumberFormatSymbols_ha_NE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ha_NE ,
    EXP_SYMBOL : NumberFormatSymbols_ha_NE ,
    GROUP_SEP : NumberFormatSymbols_ha_NE ,
    INFINITY : NumberFormatSymbols_ha_NE ,
    MINUS_SIGN : NumberFormatSymbols_ha_NE ,
    NAN : NumberFormatSymbols_ha_NE ,
    PERCENT : NumberFormatSymbols_ha_NE ,
    PERCENT_PATTERN : NumberFormatSymbols_ha_NE ,
    PERMILL : NumberFormatSymbols_ha_NE ,
    PLUS_SIGN : NumberFormatSymbols_ha_NE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ha_NE ,
    ZERO_DIGIT : NumberFormatSymbols_ha_NE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ha_NE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ha_NE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ha_NE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ha_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ha_NG.
   */
  type NumberFormatSymbols_ha_NG = string ;
  var NumberFormatSymbols_ha_NG : {
    CURRENCY_PATTERN : NumberFormatSymbols_ha_NG ,
    DECIMAL_PATTERN : NumberFormatSymbols_ha_NG ,
    DECIMAL_SEP : NumberFormatSymbols_ha_NG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ha_NG ,
    EXP_SYMBOL : NumberFormatSymbols_ha_NG ,
    GROUP_SEP : NumberFormatSymbols_ha_NG ,
    INFINITY : NumberFormatSymbols_ha_NG ,
    MINUS_SIGN : NumberFormatSymbols_ha_NG ,
    NAN : NumberFormatSymbols_ha_NG ,
    PERCENT : NumberFormatSymbols_ha_NG ,
    PERCENT_PATTERN : NumberFormatSymbols_ha_NG ,
    PERMILL : NumberFormatSymbols_ha_NG ,
    PLUS_SIGN : NumberFormatSymbols_ha_NG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ha_NG ,
    ZERO_DIGIT : NumberFormatSymbols_ha_NG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ha_NG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ha_NG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ha_NG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ha_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale haw.
   */
  type NumberFormatSymbols_haw = string ;
  var NumberFormatSymbols_haw : {
    CURRENCY_PATTERN : NumberFormatSymbols_haw ,
    DECIMAL_PATTERN : NumberFormatSymbols_haw ,
    DECIMAL_SEP : NumberFormatSymbols_haw ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_haw ,
    EXP_SYMBOL : NumberFormatSymbols_haw ,
    GROUP_SEP : NumberFormatSymbols_haw ,
    INFINITY : NumberFormatSymbols_haw ,
    MINUS_SIGN : NumberFormatSymbols_haw ,
    NAN : NumberFormatSymbols_haw ,
    PERCENT : NumberFormatSymbols_haw ,
    PERCENT_PATTERN : NumberFormatSymbols_haw ,
    PERMILL : NumberFormatSymbols_haw ,
    PLUS_SIGN : NumberFormatSymbols_haw ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_haw ,
    ZERO_DIGIT : NumberFormatSymbols_haw ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_haw'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_haw;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_haw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_haw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale haw_US.
   */
  type NumberFormatSymbols_haw_US = string ;
  var NumberFormatSymbols_haw_US : {
    CURRENCY_PATTERN : NumberFormatSymbols_haw_US ,
    DECIMAL_PATTERN : NumberFormatSymbols_haw_US ,
    DECIMAL_SEP : NumberFormatSymbols_haw_US ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_haw_US ,
    EXP_SYMBOL : NumberFormatSymbols_haw_US ,
    GROUP_SEP : NumberFormatSymbols_haw_US ,
    INFINITY : NumberFormatSymbols_haw_US ,
    MINUS_SIGN : NumberFormatSymbols_haw_US ,
    NAN : NumberFormatSymbols_haw_US ,
    PERCENT : NumberFormatSymbols_haw_US ,
    PERCENT_PATTERN : NumberFormatSymbols_haw_US ,
    PERMILL : NumberFormatSymbols_haw_US ,
    PLUS_SIGN : NumberFormatSymbols_haw_US ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_haw_US ,
    ZERO_DIGIT : NumberFormatSymbols_haw_US ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_haw_US'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_haw_US;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_haw_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_haw_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale he.
   */
  type NumberFormatSymbols_he = string ;
  var NumberFormatSymbols_he : {
    CURRENCY_PATTERN : NumberFormatSymbols_he ,
    DECIMAL_PATTERN : NumberFormatSymbols_he ,
    DECIMAL_SEP : NumberFormatSymbols_he ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_he ,
    EXP_SYMBOL : NumberFormatSymbols_he ,
    GROUP_SEP : NumberFormatSymbols_he ,
    INFINITY : NumberFormatSymbols_he ,
    MINUS_SIGN : NumberFormatSymbols_he ,
    NAN : NumberFormatSymbols_he ,
    PERCENT : NumberFormatSymbols_he ,
    PERCENT_PATTERN : NumberFormatSymbols_he ,
    PERMILL : NumberFormatSymbols_he ,
    PLUS_SIGN : NumberFormatSymbols_he ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_he ,
    ZERO_DIGIT : NumberFormatSymbols_he ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_he'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_he;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_he' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_he;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale he_IL.
   */
  type NumberFormatSymbols_he_IL = string ;
  var NumberFormatSymbols_he_IL : {
    CURRENCY_PATTERN : NumberFormatSymbols_he_IL ,
    DECIMAL_PATTERN : NumberFormatSymbols_he_IL ,
    DECIMAL_SEP : NumberFormatSymbols_he_IL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_he_IL ,
    EXP_SYMBOL : NumberFormatSymbols_he_IL ,
    GROUP_SEP : NumberFormatSymbols_he_IL ,
    INFINITY : NumberFormatSymbols_he_IL ,
    MINUS_SIGN : NumberFormatSymbols_he_IL ,
    NAN : NumberFormatSymbols_he_IL ,
    PERCENT : NumberFormatSymbols_he_IL ,
    PERCENT_PATTERN : NumberFormatSymbols_he_IL ,
    PERMILL : NumberFormatSymbols_he_IL ,
    PLUS_SIGN : NumberFormatSymbols_he_IL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_he_IL ,
    ZERO_DIGIT : NumberFormatSymbols_he_IL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_he_IL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_he_IL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_he_IL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_he_IL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale hi.
   */
  type NumberFormatSymbols_hi = string ;
  var NumberFormatSymbols_hi : {
    CURRENCY_PATTERN : NumberFormatSymbols_hi ,
    DECIMAL_PATTERN : NumberFormatSymbols_hi ,
    DECIMAL_SEP : NumberFormatSymbols_hi ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_hi ,
    EXP_SYMBOL : NumberFormatSymbols_hi ,
    GROUP_SEP : NumberFormatSymbols_hi ,
    INFINITY : NumberFormatSymbols_hi ,
    MINUS_SIGN : NumberFormatSymbols_hi ,
    NAN : NumberFormatSymbols_hi ,
    PERCENT : NumberFormatSymbols_hi ,
    PERCENT_PATTERN : NumberFormatSymbols_hi ,
    PERMILL : NumberFormatSymbols_hi ,
    PLUS_SIGN : NumberFormatSymbols_hi ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_hi ,
    ZERO_DIGIT : NumberFormatSymbols_hi ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_hi'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hi;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_hi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale hi_IN.
   */
  type NumberFormatSymbols_hi_IN = string ;
  var NumberFormatSymbols_hi_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_hi_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_hi_IN ,
    DECIMAL_SEP : NumberFormatSymbols_hi_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_hi_IN ,
    EXP_SYMBOL : NumberFormatSymbols_hi_IN ,
    GROUP_SEP : NumberFormatSymbols_hi_IN ,
    INFINITY : NumberFormatSymbols_hi_IN ,
    MINUS_SIGN : NumberFormatSymbols_hi_IN ,
    NAN : NumberFormatSymbols_hi_IN ,
    PERCENT : NumberFormatSymbols_hi_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_hi_IN ,
    PERMILL : NumberFormatSymbols_hi_IN ,
    PLUS_SIGN : NumberFormatSymbols_hi_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_hi_IN ,
    ZERO_DIGIT : NumberFormatSymbols_hi_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_hi_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hi_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_hi_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hi_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale hr.
   */
  type NumberFormatSymbols_hr = string ;
  var NumberFormatSymbols_hr : {
    CURRENCY_PATTERN : NumberFormatSymbols_hr ,
    DECIMAL_PATTERN : NumberFormatSymbols_hr ,
    DECIMAL_SEP : NumberFormatSymbols_hr ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_hr ,
    EXP_SYMBOL : NumberFormatSymbols_hr ,
    GROUP_SEP : NumberFormatSymbols_hr ,
    INFINITY : NumberFormatSymbols_hr ,
    MINUS_SIGN : NumberFormatSymbols_hr ,
    NAN : NumberFormatSymbols_hr ,
    PERCENT : NumberFormatSymbols_hr ,
    PERCENT_PATTERN : NumberFormatSymbols_hr ,
    PERMILL : NumberFormatSymbols_hr ,
    PLUS_SIGN : NumberFormatSymbols_hr ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_hr ,
    ZERO_DIGIT : NumberFormatSymbols_hr ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_hr'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hr;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_hr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale hr_BA.
   */
  type NumberFormatSymbols_hr_BA = string ;
  var NumberFormatSymbols_hr_BA : {
    CURRENCY_PATTERN : NumberFormatSymbols_hr_BA ,
    DECIMAL_PATTERN : NumberFormatSymbols_hr_BA ,
    DECIMAL_SEP : NumberFormatSymbols_hr_BA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_hr_BA ,
    EXP_SYMBOL : NumberFormatSymbols_hr_BA ,
    GROUP_SEP : NumberFormatSymbols_hr_BA ,
    INFINITY : NumberFormatSymbols_hr_BA ,
    MINUS_SIGN : NumberFormatSymbols_hr_BA ,
    NAN : NumberFormatSymbols_hr_BA ,
    PERCENT : NumberFormatSymbols_hr_BA ,
    PERCENT_PATTERN : NumberFormatSymbols_hr_BA ,
    PERMILL : NumberFormatSymbols_hr_BA ,
    PLUS_SIGN : NumberFormatSymbols_hr_BA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_hr_BA ,
    ZERO_DIGIT : NumberFormatSymbols_hr_BA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_hr_BA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hr_BA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_hr_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hr_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale hr_HR.
   */
  type NumberFormatSymbols_hr_HR = string ;
  var NumberFormatSymbols_hr_HR : {
    CURRENCY_PATTERN : NumberFormatSymbols_hr_HR ,
    DECIMAL_PATTERN : NumberFormatSymbols_hr_HR ,
    DECIMAL_SEP : NumberFormatSymbols_hr_HR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_hr_HR ,
    EXP_SYMBOL : NumberFormatSymbols_hr_HR ,
    GROUP_SEP : NumberFormatSymbols_hr_HR ,
    INFINITY : NumberFormatSymbols_hr_HR ,
    MINUS_SIGN : NumberFormatSymbols_hr_HR ,
    NAN : NumberFormatSymbols_hr_HR ,
    PERCENT : NumberFormatSymbols_hr_HR ,
    PERCENT_PATTERN : NumberFormatSymbols_hr_HR ,
    PERMILL : NumberFormatSymbols_hr_HR ,
    PLUS_SIGN : NumberFormatSymbols_hr_HR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_hr_HR ,
    ZERO_DIGIT : NumberFormatSymbols_hr_HR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_hr_HR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hr_HR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_hr_HR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hr_HR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale hsb.
   */
  type NumberFormatSymbols_hsb = string ;
  var NumberFormatSymbols_hsb : {
    CURRENCY_PATTERN : NumberFormatSymbols_hsb ,
    DECIMAL_PATTERN : NumberFormatSymbols_hsb ,
    DECIMAL_SEP : NumberFormatSymbols_hsb ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_hsb ,
    EXP_SYMBOL : NumberFormatSymbols_hsb ,
    GROUP_SEP : NumberFormatSymbols_hsb ,
    INFINITY : NumberFormatSymbols_hsb ,
    MINUS_SIGN : NumberFormatSymbols_hsb ,
    NAN : NumberFormatSymbols_hsb ,
    PERCENT : NumberFormatSymbols_hsb ,
    PERCENT_PATTERN : NumberFormatSymbols_hsb ,
    PERMILL : NumberFormatSymbols_hsb ,
    PLUS_SIGN : NumberFormatSymbols_hsb ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_hsb ,
    ZERO_DIGIT : NumberFormatSymbols_hsb ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_hsb'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hsb;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_hsb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hsb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale hsb_DE.
   */
  type NumberFormatSymbols_hsb_DE = string ;
  var NumberFormatSymbols_hsb_DE : {
    CURRENCY_PATTERN : NumberFormatSymbols_hsb_DE ,
    DECIMAL_PATTERN : NumberFormatSymbols_hsb_DE ,
    DECIMAL_SEP : NumberFormatSymbols_hsb_DE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_hsb_DE ,
    EXP_SYMBOL : NumberFormatSymbols_hsb_DE ,
    GROUP_SEP : NumberFormatSymbols_hsb_DE ,
    INFINITY : NumberFormatSymbols_hsb_DE ,
    MINUS_SIGN : NumberFormatSymbols_hsb_DE ,
    NAN : NumberFormatSymbols_hsb_DE ,
    PERCENT : NumberFormatSymbols_hsb_DE ,
    PERCENT_PATTERN : NumberFormatSymbols_hsb_DE ,
    PERMILL : NumberFormatSymbols_hsb_DE ,
    PLUS_SIGN : NumberFormatSymbols_hsb_DE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_hsb_DE ,
    ZERO_DIGIT : NumberFormatSymbols_hsb_DE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_hsb_DE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hsb_DE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_hsb_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hsb_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale hu.
   */
  type NumberFormatSymbols_hu = string ;
  var NumberFormatSymbols_hu : {
    CURRENCY_PATTERN : NumberFormatSymbols_hu ,
    DECIMAL_PATTERN : NumberFormatSymbols_hu ,
    DECIMAL_SEP : NumberFormatSymbols_hu ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_hu ,
    EXP_SYMBOL : NumberFormatSymbols_hu ,
    GROUP_SEP : NumberFormatSymbols_hu ,
    INFINITY : NumberFormatSymbols_hu ,
    MINUS_SIGN : NumberFormatSymbols_hu ,
    NAN : NumberFormatSymbols_hu ,
    PERCENT : NumberFormatSymbols_hu ,
    PERCENT_PATTERN : NumberFormatSymbols_hu ,
    PERMILL : NumberFormatSymbols_hu ,
    PLUS_SIGN : NumberFormatSymbols_hu ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_hu ,
    ZERO_DIGIT : NumberFormatSymbols_hu ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_hu'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hu;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_hu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale hu_HU.
   */
  type NumberFormatSymbols_hu_HU = string ;
  var NumberFormatSymbols_hu_HU : {
    CURRENCY_PATTERN : NumberFormatSymbols_hu_HU ,
    DECIMAL_PATTERN : NumberFormatSymbols_hu_HU ,
    DECIMAL_SEP : NumberFormatSymbols_hu_HU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_hu_HU ,
    EXP_SYMBOL : NumberFormatSymbols_hu_HU ,
    GROUP_SEP : NumberFormatSymbols_hu_HU ,
    INFINITY : NumberFormatSymbols_hu_HU ,
    MINUS_SIGN : NumberFormatSymbols_hu_HU ,
    NAN : NumberFormatSymbols_hu_HU ,
    PERCENT : NumberFormatSymbols_hu_HU ,
    PERCENT_PATTERN : NumberFormatSymbols_hu_HU ,
    PERMILL : NumberFormatSymbols_hu_HU ,
    PLUS_SIGN : NumberFormatSymbols_hu_HU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_hu_HU ,
    ZERO_DIGIT : NumberFormatSymbols_hu_HU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_hu_HU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hu_HU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_hu_HU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hu_HU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale hy.
   */
  type NumberFormatSymbols_hy = string ;
  var NumberFormatSymbols_hy : {
    CURRENCY_PATTERN : NumberFormatSymbols_hy ,
    DECIMAL_PATTERN : NumberFormatSymbols_hy ,
    DECIMAL_SEP : NumberFormatSymbols_hy ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_hy ,
    EXP_SYMBOL : NumberFormatSymbols_hy ,
    GROUP_SEP : NumberFormatSymbols_hy ,
    INFINITY : NumberFormatSymbols_hy ,
    MINUS_SIGN : NumberFormatSymbols_hy ,
    NAN : NumberFormatSymbols_hy ,
    PERCENT : NumberFormatSymbols_hy ,
    PERCENT_PATTERN : NumberFormatSymbols_hy ,
    PERMILL : NumberFormatSymbols_hy ,
    PLUS_SIGN : NumberFormatSymbols_hy ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_hy ,
    ZERO_DIGIT : NumberFormatSymbols_hy ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_hy'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hy;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_hy' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale hy_AM.
   */
  type NumberFormatSymbols_hy_AM = string ;
  var NumberFormatSymbols_hy_AM : {
    CURRENCY_PATTERN : NumberFormatSymbols_hy_AM ,
    DECIMAL_PATTERN : NumberFormatSymbols_hy_AM ,
    DECIMAL_SEP : NumberFormatSymbols_hy_AM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_hy_AM ,
    EXP_SYMBOL : NumberFormatSymbols_hy_AM ,
    GROUP_SEP : NumberFormatSymbols_hy_AM ,
    INFINITY : NumberFormatSymbols_hy_AM ,
    MINUS_SIGN : NumberFormatSymbols_hy_AM ,
    NAN : NumberFormatSymbols_hy_AM ,
    PERCENT : NumberFormatSymbols_hy_AM ,
    PERCENT_PATTERN : NumberFormatSymbols_hy_AM ,
    PERMILL : NumberFormatSymbols_hy_AM ,
    PLUS_SIGN : NumberFormatSymbols_hy_AM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_hy_AM ,
    ZERO_DIGIT : NumberFormatSymbols_hy_AM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_hy_AM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hy_AM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_hy_AM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_hy_AM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale id.
   */
  type NumberFormatSymbols_id = string ;
  var NumberFormatSymbols_id : {
    CURRENCY_PATTERN : NumberFormatSymbols_id ,
    DECIMAL_PATTERN : NumberFormatSymbols_id ,
    DECIMAL_SEP : NumberFormatSymbols_id ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_id ,
    EXP_SYMBOL : NumberFormatSymbols_id ,
    GROUP_SEP : NumberFormatSymbols_id ,
    INFINITY : NumberFormatSymbols_id ,
    MINUS_SIGN : NumberFormatSymbols_id ,
    NAN : NumberFormatSymbols_id ,
    PERCENT : NumberFormatSymbols_id ,
    PERCENT_PATTERN : NumberFormatSymbols_id ,
    PERMILL : NumberFormatSymbols_id ,
    PLUS_SIGN : NumberFormatSymbols_id ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_id ,
    ZERO_DIGIT : NumberFormatSymbols_id ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_id'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_id;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_id' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_id;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale id_ID.
   */
  type NumberFormatSymbols_id_ID = string ;
  var NumberFormatSymbols_id_ID : {
    CURRENCY_PATTERN : NumberFormatSymbols_id_ID ,
    DECIMAL_PATTERN : NumberFormatSymbols_id_ID ,
    DECIMAL_SEP : NumberFormatSymbols_id_ID ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_id_ID ,
    EXP_SYMBOL : NumberFormatSymbols_id_ID ,
    GROUP_SEP : NumberFormatSymbols_id_ID ,
    INFINITY : NumberFormatSymbols_id_ID ,
    MINUS_SIGN : NumberFormatSymbols_id_ID ,
    NAN : NumberFormatSymbols_id_ID ,
    PERCENT : NumberFormatSymbols_id_ID ,
    PERCENT_PATTERN : NumberFormatSymbols_id_ID ,
    PERMILL : NumberFormatSymbols_id_ID ,
    PLUS_SIGN : NumberFormatSymbols_id_ID ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_id_ID ,
    ZERO_DIGIT : NumberFormatSymbols_id_ID ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_id_ID'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_id_ID;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_id_ID' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_id_ID;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ig.
   */
  type NumberFormatSymbols_ig = string ;
  var NumberFormatSymbols_ig : {
    CURRENCY_PATTERN : NumberFormatSymbols_ig ,
    DECIMAL_PATTERN : NumberFormatSymbols_ig ,
    DECIMAL_SEP : NumberFormatSymbols_ig ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ig ,
    EXP_SYMBOL : NumberFormatSymbols_ig ,
    GROUP_SEP : NumberFormatSymbols_ig ,
    INFINITY : NumberFormatSymbols_ig ,
    MINUS_SIGN : NumberFormatSymbols_ig ,
    NAN : NumberFormatSymbols_ig ,
    PERCENT : NumberFormatSymbols_ig ,
    PERCENT_PATTERN : NumberFormatSymbols_ig ,
    PERMILL : NumberFormatSymbols_ig ,
    PLUS_SIGN : NumberFormatSymbols_ig ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ig ,
    ZERO_DIGIT : NumberFormatSymbols_ig ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ig'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ig;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ig' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ig;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ig_NG.
   */
  type NumberFormatSymbols_ig_NG = string ;
  var NumberFormatSymbols_ig_NG : {
    CURRENCY_PATTERN : NumberFormatSymbols_ig_NG ,
    DECIMAL_PATTERN : NumberFormatSymbols_ig_NG ,
    DECIMAL_SEP : NumberFormatSymbols_ig_NG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ig_NG ,
    EXP_SYMBOL : NumberFormatSymbols_ig_NG ,
    GROUP_SEP : NumberFormatSymbols_ig_NG ,
    INFINITY : NumberFormatSymbols_ig_NG ,
    MINUS_SIGN : NumberFormatSymbols_ig_NG ,
    NAN : NumberFormatSymbols_ig_NG ,
    PERCENT : NumberFormatSymbols_ig_NG ,
    PERCENT_PATTERN : NumberFormatSymbols_ig_NG ,
    PERMILL : NumberFormatSymbols_ig_NG ,
    PLUS_SIGN : NumberFormatSymbols_ig_NG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ig_NG ,
    ZERO_DIGIT : NumberFormatSymbols_ig_NG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ig_NG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ig_NG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ig_NG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ig_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ii.
   */
  type NumberFormatSymbols_ii = string ;
  var NumberFormatSymbols_ii : {
    CURRENCY_PATTERN : NumberFormatSymbols_ii ,
    DECIMAL_PATTERN : NumberFormatSymbols_ii ,
    DECIMAL_SEP : NumberFormatSymbols_ii ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ii ,
    EXP_SYMBOL : NumberFormatSymbols_ii ,
    GROUP_SEP : NumberFormatSymbols_ii ,
    INFINITY : NumberFormatSymbols_ii ,
    MINUS_SIGN : NumberFormatSymbols_ii ,
    NAN : NumberFormatSymbols_ii ,
    PERCENT : NumberFormatSymbols_ii ,
    PERCENT_PATTERN : NumberFormatSymbols_ii ,
    PERMILL : NumberFormatSymbols_ii ,
    PLUS_SIGN : NumberFormatSymbols_ii ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ii ,
    ZERO_DIGIT : NumberFormatSymbols_ii ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ii'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ii;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ii' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ii;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ii_CN.
   */
  type NumberFormatSymbols_ii_CN = string ;
  var NumberFormatSymbols_ii_CN : {
    CURRENCY_PATTERN : NumberFormatSymbols_ii_CN ,
    DECIMAL_PATTERN : NumberFormatSymbols_ii_CN ,
    DECIMAL_SEP : NumberFormatSymbols_ii_CN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ii_CN ,
    EXP_SYMBOL : NumberFormatSymbols_ii_CN ,
    GROUP_SEP : NumberFormatSymbols_ii_CN ,
    INFINITY : NumberFormatSymbols_ii_CN ,
    MINUS_SIGN : NumberFormatSymbols_ii_CN ,
    NAN : NumberFormatSymbols_ii_CN ,
    PERCENT : NumberFormatSymbols_ii_CN ,
    PERCENT_PATTERN : NumberFormatSymbols_ii_CN ,
    PERMILL : NumberFormatSymbols_ii_CN ,
    PLUS_SIGN : NumberFormatSymbols_ii_CN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ii_CN ,
    ZERO_DIGIT : NumberFormatSymbols_ii_CN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ii_CN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ii_CN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ii_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ii_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale in.
   */
  type NumberFormatSymbols_in = string ;
  var NumberFormatSymbols_in : {
    CURRENCY_PATTERN : NumberFormatSymbols_in ,
    DECIMAL_PATTERN : NumberFormatSymbols_in ,
    DECIMAL_SEP : NumberFormatSymbols_in ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_in ,
    EXP_SYMBOL : NumberFormatSymbols_in ,
    GROUP_SEP : NumberFormatSymbols_in ,
    INFINITY : NumberFormatSymbols_in ,
    MINUS_SIGN : NumberFormatSymbols_in ,
    NAN : NumberFormatSymbols_in ,
    PERCENT : NumberFormatSymbols_in ,
    PERCENT_PATTERN : NumberFormatSymbols_in ,
    PERMILL : NumberFormatSymbols_in ,
    PLUS_SIGN : NumberFormatSymbols_in ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_in ,
    ZERO_DIGIT : NumberFormatSymbols_in ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_in'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_in;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_in' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_in;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale is.
   */
  type NumberFormatSymbols_is = string ;
  var NumberFormatSymbols_is : {
    CURRENCY_PATTERN : NumberFormatSymbols_is ,
    DECIMAL_PATTERN : NumberFormatSymbols_is ,
    DECIMAL_SEP : NumberFormatSymbols_is ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_is ,
    EXP_SYMBOL : NumberFormatSymbols_is ,
    GROUP_SEP : NumberFormatSymbols_is ,
    INFINITY : NumberFormatSymbols_is ,
    MINUS_SIGN : NumberFormatSymbols_is ,
    NAN : NumberFormatSymbols_is ,
    PERCENT : NumberFormatSymbols_is ,
    PERCENT_PATTERN : NumberFormatSymbols_is ,
    PERMILL : NumberFormatSymbols_is ,
    PLUS_SIGN : NumberFormatSymbols_is ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_is ,
    ZERO_DIGIT : NumberFormatSymbols_is ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_is'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_is;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_is' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_is;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale is_IS.
   */
  type NumberFormatSymbols_is_IS = string ;
  var NumberFormatSymbols_is_IS : {
    CURRENCY_PATTERN : NumberFormatSymbols_is_IS ,
    DECIMAL_PATTERN : NumberFormatSymbols_is_IS ,
    DECIMAL_SEP : NumberFormatSymbols_is_IS ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_is_IS ,
    EXP_SYMBOL : NumberFormatSymbols_is_IS ,
    GROUP_SEP : NumberFormatSymbols_is_IS ,
    INFINITY : NumberFormatSymbols_is_IS ,
    MINUS_SIGN : NumberFormatSymbols_is_IS ,
    NAN : NumberFormatSymbols_is_IS ,
    PERCENT : NumberFormatSymbols_is_IS ,
    PERCENT_PATTERN : NumberFormatSymbols_is_IS ,
    PERMILL : NumberFormatSymbols_is_IS ,
    PLUS_SIGN : NumberFormatSymbols_is_IS ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_is_IS ,
    ZERO_DIGIT : NumberFormatSymbols_is_IS ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_is_IS'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_is_IS;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_is_IS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_is_IS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale it.
   */
  type NumberFormatSymbols_it = string ;
  var NumberFormatSymbols_it : {
    CURRENCY_PATTERN : NumberFormatSymbols_it ,
    DECIMAL_PATTERN : NumberFormatSymbols_it ,
    DECIMAL_SEP : NumberFormatSymbols_it ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_it ,
    EXP_SYMBOL : NumberFormatSymbols_it ,
    GROUP_SEP : NumberFormatSymbols_it ,
    INFINITY : NumberFormatSymbols_it ,
    MINUS_SIGN : NumberFormatSymbols_it ,
    NAN : NumberFormatSymbols_it ,
    PERCENT : NumberFormatSymbols_it ,
    PERCENT_PATTERN : NumberFormatSymbols_it ,
    PERMILL : NumberFormatSymbols_it ,
    PLUS_SIGN : NumberFormatSymbols_it ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_it ,
    ZERO_DIGIT : NumberFormatSymbols_it ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_it'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_it;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_it' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_it;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale it_CH.
   */
  type NumberFormatSymbols_it_CH = string ;
  var NumberFormatSymbols_it_CH : {
    CURRENCY_PATTERN : NumberFormatSymbols_it_CH ,
    DECIMAL_PATTERN : NumberFormatSymbols_it_CH ,
    DECIMAL_SEP : NumberFormatSymbols_it_CH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_it_CH ,
    EXP_SYMBOL : NumberFormatSymbols_it_CH ,
    GROUP_SEP : NumberFormatSymbols_it_CH ,
    INFINITY : NumberFormatSymbols_it_CH ,
    MINUS_SIGN : NumberFormatSymbols_it_CH ,
    NAN : NumberFormatSymbols_it_CH ,
    PERCENT : NumberFormatSymbols_it_CH ,
    PERCENT_PATTERN : NumberFormatSymbols_it_CH ,
    PERMILL : NumberFormatSymbols_it_CH ,
    PLUS_SIGN : NumberFormatSymbols_it_CH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_it_CH ,
    ZERO_DIGIT : NumberFormatSymbols_it_CH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_it_CH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_it_CH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_it_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_it_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale it_IT.
   */
  type NumberFormatSymbols_it_IT = string ;
  var NumberFormatSymbols_it_IT : {
    CURRENCY_PATTERN : NumberFormatSymbols_it_IT ,
    DECIMAL_PATTERN : NumberFormatSymbols_it_IT ,
    DECIMAL_SEP : NumberFormatSymbols_it_IT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_it_IT ,
    EXP_SYMBOL : NumberFormatSymbols_it_IT ,
    GROUP_SEP : NumberFormatSymbols_it_IT ,
    INFINITY : NumberFormatSymbols_it_IT ,
    MINUS_SIGN : NumberFormatSymbols_it_IT ,
    NAN : NumberFormatSymbols_it_IT ,
    PERCENT : NumberFormatSymbols_it_IT ,
    PERCENT_PATTERN : NumberFormatSymbols_it_IT ,
    PERMILL : NumberFormatSymbols_it_IT ,
    PLUS_SIGN : NumberFormatSymbols_it_IT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_it_IT ,
    ZERO_DIGIT : NumberFormatSymbols_it_IT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_it_IT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_it_IT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_it_IT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_it_IT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale it_SM.
   */
  type NumberFormatSymbols_it_SM = string ;
  var NumberFormatSymbols_it_SM : {
    CURRENCY_PATTERN : NumberFormatSymbols_it_SM ,
    DECIMAL_PATTERN : NumberFormatSymbols_it_SM ,
    DECIMAL_SEP : NumberFormatSymbols_it_SM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_it_SM ,
    EXP_SYMBOL : NumberFormatSymbols_it_SM ,
    GROUP_SEP : NumberFormatSymbols_it_SM ,
    INFINITY : NumberFormatSymbols_it_SM ,
    MINUS_SIGN : NumberFormatSymbols_it_SM ,
    NAN : NumberFormatSymbols_it_SM ,
    PERCENT : NumberFormatSymbols_it_SM ,
    PERCENT_PATTERN : NumberFormatSymbols_it_SM ,
    PERMILL : NumberFormatSymbols_it_SM ,
    PLUS_SIGN : NumberFormatSymbols_it_SM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_it_SM ,
    ZERO_DIGIT : NumberFormatSymbols_it_SM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_it_SM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_it_SM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_it_SM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_it_SM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale iw.
   */
  type NumberFormatSymbols_iw = string ;
  var NumberFormatSymbols_iw : {
    CURRENCY_PATTERN : NumberFormatSymbols_iw ,
    DECIMAL_PATTERN : NumberFormatSymbols_iw ,
    DECIMAL_SEP : NumberFormatSymbols_iw ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_iw ,
    EXP_SYMBOL : NumberFormatSymbols_iw ,
    GROUP_SEP : NumberFormatSymbols_iw ,
    INFINITY : NumberFormatSymbols_iw ,
    MINUS_SIGN : NumberFormatSymbols_iw ,
    NAN : NumberFormatSymbols_iw ,
    PERCENT : NumberFormatSymbols_iw ,
    PERCENT_PATTERN : NumberFormatSymbols_iw ,
    PERMILL : NumberFormatSymbols_iw ,
    PLUS_SIGN : NumberFormatSymbols_iw ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_iw ,
    ZERO_DIGIT : NumberFormatSymbols_iw ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_iw'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_iw;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_iw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_iw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ja.
   */
  type NumberFormatSymbols_ja = string ;
  var NumberFormatSymbols_ja : {
    CURRENCY_PATTERN : NumberFormatSymbols_ja ,
    DECIMAL_PATTERN : NumberFormatSymbols_ja ,
    DECIMAL_SEP : NumberFormatSymbols_ja ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ja ,
    EXP_SYMBOL : NumberFormatSymbols_ja ,
    GROUP_SEP : NumberFormatSymbols_ja ,
    INFINITY : NumberFormatSymbols_ja ,
    MINUS_SIGN : NumberFormatSymbols_ja ,
    NAN : NumberFormatSymbols_ja ,
    PERCENT : NumberFormatSymbols_ja ,
    PERCENT_PATTERN : NumberFormatSymbols_ja ,
    PERMILL : NumberFormatSymbols_ja ,
    PLUS_SIGN : NumberFormatSymbols_ja ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ja ,
    ZERO_DIGIT : NumberFormatSymbols_ja ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ja'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ja;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ja' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ja;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ja_JP.
   */
  type NumberFormatSymbols_ja_JP = string ;
  var NumberFormatSymbols_ja_JP : {
    CURRENCY_PATTERN : NumberFormatSymbols_ja_JP ,
    DECIMAL_PATTERN : NumberFormatSymbols_ja_JP ,
    DECIMAL_SEP : NumberFormatSymbols_ja_JP ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ja_JP ,
    EXP_SYMBOL : NumberFormatSymbols_ja_JP ,
    GROUP_SEP : NumberFormatSymbols_ja_JP ,
    INFINITY : NumberFormatSymbols_ja_JP ,
    MINUS_SIGN : NumberFormatSymbols_ja_JP ,
    NAN : NumberFormatSymbols_ja_JP ,
    PERCENT : NumberFormatSymbols_ja_JP ,
    PERCENT_PATTERN : NumberFormatSymbols_ja_JP ,
    PERMILL : NumberFormatSymbols_ja_JP ,
    PLUS_SIGN : NumberFormatSymbols_ja_JP ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ja_JP ,
    ZERO_DIGIT : NumberFormatSymbols_ja_JP ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ja_JP'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ja_JP;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ja_JP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ja_JP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale jgo.
   */
  type NumberFormatSymbols_jgo = string ;
  var NumberFormatSymbols_jgo : {
    CURRENCY_PATTERN : NumberFormatSymbols_jgo ,
    DECIMAL_PATTERN : NumberFormatSymbols_jgo ,
    DECIMAL_SEP : NumberFormatSymbols_jgo ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_jgo ,
    EXP_SYMBOL : NumberFormatSymbols_jgo ,
    GROUP_SEP : NumberFormatSymbols_jgo ,
    INFINITY : NumberFormatSymbols_jgo ,
    MINUS_SIGN : NumberFormatSymbols_jgo ,
    NAN : NumberFormatSymbols_jgo ,
    PERCENT : NumberFormatSymbols_jgo ,
    PERCENT_PATTERN : NumberFormatSymbols_jgo ,
    PERMILL : NumberFormatSymbols_jgo ,
    PLUS_SIGN : NumberFormatSymbols_jgo ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_jgo ,
    ZERO_DIGIT : NumberFormatSymbols_jgo ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_jgo'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_jgo;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_jgo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_jgo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale jgo_CM.
   */
  type NumberFormatSymbols_jgo_CM = string ;
  var NumberFormatSymbols_jgo_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_jgo_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_jgo_CM ,
    DECIMAL_SEP : NumberFormatSymbols_jgo_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_jgo_CM ,
    EXP_SYMBOL : NumberFormatSymbols_jgo_CM ,
    GROUP_SEP : NumberFormatSymbols_jgo_CM ,
    INFINITY : NumberFormatSymbols_jgo_CM ,
    MINUS_SIGN : NumberFormatSymbols_jgo_CM ,
    NAN : NumberFormatSymbols_jgo_CM ,
    PERCENT : NumberFormatSymbols_jgo_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_jgo_CM ,
    PERMILL : NumberFormatSymbols_jgo_CM ,
    PLUS_SIGN : NumberFormatSymbols_jgo_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_jgo_CM ,
    ZERO_DIGIT : NumberFormatSymbols_jgo_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_jgo_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_jgo_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_jgo_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_jgo_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale jmc.
   */
  type NumberFormatSymbols_jmc = string ;
  var NumberFormatSymbols_jmc : {
    CURRENCY_PATTERN : NumberFormatSymbols_jmc ,
    DECIMAL_PATTERN : NumberFormatSymbols_jmc ,
    DECIMAL_SEP : NumberFormatSymbols_jmc ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_jmc ,
    EXP_SYMBOL : NumberFormatSymbols_jmc ,
    GROUP_SEP : NumberFormatSymbols_jmc ,
    INFINITY : NumberFormatSymbols_jmc ,
    MINUS_SIGN : NumberFormatSymbols_jmc ,
    NAN : NumberFormatSymbols_jmc ,
    PERCENT : NumberFormatSymbols_jmc ,
    PERCENT_PATTERN : NumberFormatSymbols_jmc ,
    PERMILL : NumberFormatSymbols_jmc ,
    PLUS_SIGN : NumberFormatSymbols_jmc ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_jmc ,
    ZERO_DIGIT : NumberFormatSymbols_jmc ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_jmc'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_jmc;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_jmc' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_jmc;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale jmc_TZ.
   */
  type NumberFormatSymbols_jmc_TZ = string ;
  var NumberFormatSymbols_jmc_TZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_jmc_TZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_jmc_TZ ,
    DECIMAL_SEP : NumberFormatSymbols_jmc_TZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_jmc_TZ ,
    EXP_SYMBOL : NumberFormatSymbols_jmc_TZ ,
    GROUP_SEP : NumberFormatSymbols_jmc_TZ ,
    INFINITY : NumberFormatSymbols_jmc_TZ ,
    MINUS_SIGN : NumberFormatSymbols_jmc_TZ ,
    NAN : NumberFormatSymbols_jmc_TZ ,
    PERCENT : NumberFormatSymbols_jmc_TZ ,
    PERCENT_PATTERN : NumberFormatSymbols_jmc_TZ ,
    PERMILL : NumberFormatSymbols_jmc_TZ ,
    PLUS_SIGN : NumberFormatSymbols_jmc_TZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_jmc_TZ ,
    ZERO_DIGIT : NumberFormatSymbols_jmc_TZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_jmc_TZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_jmc_TZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_jmc_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_jmc_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ka.
   */
  type NumberFormatSymbols_ka = string ;
  var NumberFormatSymbols_ka : {
    CURRENCY_PATTERN : NumberFormatSymbols_ka ,
    DECIMAL_PATTERN : NumberFormatSymbols_ka ,
    DECIMAL_SEP : NumberFormatSymbols_ka ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ka ,
    EXP_SYMBOL : NumberFormatSymbols_ka ,
    GROUP_SEP : NumberFormatSymbols_ka ,
    INFINITY : NumberFormatSymbols_ka ,
    MINUS_SIGN : NumberFormatSymbols_ka ,
    NAN : NumberFormatSymbols_ka ,
    PERCENT : NumberFormatSymbols_ka ,
    PERCENT_PATTERN : NumberFormatSymbols_ka ,
    PERMILL : NumberFormatSymbols_ka ,
    PLUS_SIGN : NumberFormatSymbols_ka ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ka ,
    ZERO_DIGIT : NumberFormatSymbols_ka ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ka'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ka;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ka' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ka;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ka_GE.
   */
  type NumberFormatSymbols_ka_GE = string ;
  var NumberFormatSymbols_ka_GE : {
    CURRENCY_PATTERN : NumberFormatSymbols_ka_GE ,
    DECIMAL_PATTERN : NumberFormatSymbols_ka_GE ,
    DECIMAL_SEP : NumberFormatSymbols_ka_GE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ka_GE ,
    EXP_SYMBOL : NumberFormatSymbols_ka_GE ,
    GROUP_SEP : NumberFormatSymbols_ka_GE ,
    INFINITY : NumberFormatSymbols_ka_GE ,
    MINUS_SIGN : NumberFormatSymbols_ka_GE ,
    NAN : NumberFormatSymbols_ka_GE ,
    PERCENT : NumberFormatSymbols_ka_GE ,
    PERCENT_PATTERN : NumberFormatSymbols_ka_GE ,
    PERMILL : NumberFormatSymbols_ka_GE ,
    PLUS_SIGN : NumberFormatSymbols_ka_GE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ka_GE ,
    ZERO_DIGIT : NumberFormatSymbols_ka_GE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ka_GE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ka_GE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ka_GE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ka_GE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kab.
   */
  type NumberFormatSymbols_kab = string ;
  var NumberFormatSymbols_kab : {
    CURRENCY_PATTERN : NumberFormatSymbols_kab ,
    DECIMAL_PATTERN : NumberFormatSymbols_kab ,
    DECIMAL_SEP : NumberFormatSymbols_kab ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kab ,
    EXP_SYMBOL : NumberFormatSymbols_kab ,
    GROUP_SEP : NumberFormatSymbols_kab ,
    INFINITY : NumberFormatSymbols_kab ,
    MINUS_SIGN : NumberFormatSymbols_kab ,
    NAN : NumberFormatSymbols_kab ,
    PERCENT : NumberFormatSymbols_kab ,
    PERCENT_PATTERN : NumberFormatSymbols_kab ,
    PERMILL : NumberFormatSymbols_kab ,
    PLUS_SIGN : NumberFormatSymbols_kab ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kab ,
    ZERO_DIGIT : NumberFormatSymbols_kab ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kab'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kab;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kab' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kab_DZ.
   */
  type NumberFormatSymbols_kab_DZ = string ;
  var NumberFormatSymbols_kab_DZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_kab_DZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_kab_DZ ,
    DECIMAL_SEP : NumberFormatSymbols_kab_DZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kab_DZ ,
    EXP_SYMBOL : NumberFormatSymbols_kab_DZ ,
    GROUP_SEP : NumberFormatSymbols_kab_DZ ,
    INFINITY : NumberFormatSymbols_kab_DZ ,
    MINUS_SIGN : NumberFormatSymbols_kab_DZ ,
    NAN : NumberFormatSymbols_kab_DZ ,
    PERCENT : NumberFormatSymbols_kab_DZ ,
    PERCENT_PATTERN : NumberFormatSymbols_kab_DZ ,
    PERMILL : NumberFormatSymbols_kab_DZ ,
    PLUS_SIGN : NumberFormatSymbols_kab_DZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kab_DZ ,
    ZERO_DIGIT : NumberFormatSymbols_kab_DZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kab_DZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kab_DZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kab_DZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kab_DZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kam.
   */
  type NumberFormatSymbols_kam = string ;
  var NumberFormatSymbols_kam : {
    CURRENCY_PATTERN : NumberFormatSymbols_kam ,
    DECIMAL_PATTERN : NumberFormatSymbols_kam ,
    DECIMAL_SEP : NumberFormatSymbols_kam ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kam ,
    EXP_SYMBOL : NumberFormatSymbols_kam ,
    GROUP_SEP : NumberFormatSymbols_kam ,
    INFINITY : NumberFormatSymbols_kam ,
    MINUS_SIGN : NumberFormatSymbols_kam ,
    NAN : NumberFormatSymbols_kam ,
    PERCENT : NumberFormatSymbols_kam ,
    PERCENT_PATTERN : NumberFormatSymbols_kam ,
    PERMILL : NumberFormatSymbols_kam ,
    PLUS_SIGN : NumberFormatSymbols_kam ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kam ,
    ZERO_DIGIT : NumberFormatSymbols_kam ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kam'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kam;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kam' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kam;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kam_KE.
   */
  type NumberFormatSymbols_kam_KE = string ;
  var NumberFormatSymbols_kam_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_kam_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_kam_KE ,
    DECIMAL_SEP : NumberFormatSymbols_kam_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kam_KE ,
    EXP_SYMBOL : NumberFormatSymbols_kam_KE ,
    GROUP_SEP : NumberFormatSymbols_kam_KE ,
    INFINITY : NumberFormatSymbols_kam_KE ,
    MINUS_SIGN : NumberFormatSymbols_kam_KE ,
    NAN : NumberFormatSymbols_kam_KE ,
    PERCENT : NumberFormatSymbols_kam_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_kam_KE ,
    PERMILL : NumberFormatSymbols_kam_KE ,
    PLUS_SIGN : NumberFormatSymbols_kam_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kam_KE ,
    ZERO_DIGIT : NumberFormatSymbols_kam_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kam_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kam_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kam_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kam_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kde.
   */
  type NumberFormatSymbols_kde = string ;
  var NumberFormatSymbols_kde : {
    CURRENCY_PATTERN : NumberFormatSymbols_kde ,
    DECIMAL_PATTERN : NumberFormatSymbols_kde ,
    DECIMAL_SEP : NumberFormatSymbols_kde ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kde ,
    EXP_SYMBOL : NumberFormatSymbols_kde ,
    GROUP_SEP : NumberFormatSymbols_kde ,
    INFINITY : NumberFormatSymbols_kde ,
    MINUS_SIGN : NumberFormatSymbols_kde ,
    NAN : NumberFormatSymbols_kde ,
    PERCENT : NumberFormatSymbols_kde ,
    PERCENT_PATTERN : NumberFormatSymbols_kde ,
    PERMILL : NumberFormatSymbols_kde ,
    PLUS_SIGN : NumberFormatSymbols_kde ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kde ,
    ZERO_DIGIT : NumberFormatSymbols_kde ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kde'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kde;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kde' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kde;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kde_TZ.
   */
  type NumberFormatSymbols_kde_TZ = string ;
  var NumberFormatSymbols_kde_TZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_kde_TZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_kde_TZ ,
    DECIMAL_SEP : NumberFormatSymbols_kde_TZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kde_TZ ,
    EXP_SYMBOL : NumberFormatSymbols_kde_TZ ,
    GROUP_SEP : NumberFormatSymbols_kde_TZ ,
    INFINITY : NumberFormatSymbols_kde_TZ ,
    MINUS_SIGN : NumberFormatSymbols_kde_TZ ,
    NAN : NumberFormatSymbols_kde_TZ ,
    PERCENT : NumberFormatSymbols_kde_TZ ,
    PERCENT_PATTERN : NumberFormatSymbols_kde_TZ ,
    PERMILL : NumberFormatSymbols_kde_TZ ,
    PLUS_SIGN : NumberFormatSymbols_kde_TZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kde_TZ ,
    ZERO_DIGIT : NumberFormatSymbols_kde_TZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kde_TZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kde_TZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kde_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kde_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kea.
   */
  type NumberFormatSymbols_kea = string ;
  var NumberFormatSymbols_kea : {
    CURRENCY_PATTERN : NumberFormatSymbols_kea ,
    DECIMAL_PATTERN : NumberFormatSymbols_kea ,
    DECIMAL_SEP : NumberFormatSymbols_kea ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kea ,
    EXP_SYMBOL : NumberFormatSymbols_kea ,
    GROUP_SEP : NumberFormatSymbols_kea ,
    INFINITY : NumberFormatSymbols_kea ,
    MINUS_SIGN : NumberFormatSymbols_kea ,
    NAN : NumberFormatSymbols_kea ,
    PERCENT : NumberFormatSymbols_kea ,
    PERCENT_PATTERN : NumberFormatSymbols_kea ,
    PERMILL : NumberFormatSymbols_kea ,
    PLUS_SIGN : NumberFormatSymbols_kea ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kea ,
    ZERO_DIGIT : NumberFormatSymbols_kea ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kea'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kea;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kea' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kea;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kea_CV.
   */
  type NumberFormatSymbols_kea_CV = string ;
  var NumberFormatSymbols_kea_CV : {
    CURRENCY_PATTERN : NumberFormatSymbols_kea_CV ,
    DECIMAL_PATTERN : NumberFormatSymbols_kea_CV ,
    DECIMAL_SEP : NumberFormatSymbols_kea_CV ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kea_CV ,
    EXP_SYMBOL : NumberFormatSymbols_kea_CV ,
    GROUP_SEP : NumberFormatSymbols_kea_CV ,
    INFINITY : NumberFormatSymbols_kea_CV ,
    MINUS_SIGN : NumberFormatSymbols_kea_CV ,
    NAN : NumberFormatSymbols_kea_CV ,
    PERCENT : NumberFormatSymbols_kea_CV ,
    PERCENT_PATTERN : NumberFormatSymbols_kea_CV ,
    PERMILL : NumberFormatSymbols_kea_CV ,
    PLUS_SIGN : NumberFormatSymbols_kea_CV ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kea_CV ,
    ZERO_DIGIT : NumberFormatSymbols_kea_CV ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kea_CV'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kea_CV;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kea_CV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kea_CV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale khq.
   */
  type NumberFormatSymbols_khq = string ;
  var NumberFormatSymbols_khq : {
    CURRENCY_PATTERN : NumberFormatSymbols_khq ,
    DECIMAL_PATTERN : NumberFormatSymbols_khq ,
    DECIMAL_SEP : NumberFormatSymbols_khq ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_khq ,
    EXP_SYMBOL : NumberFormatSymbols_khq ,
    GROUP_SEP : NumberFormatSymbols_khq ,
    INFINITY : NumberFormatSymbols_khq ,
    MINUS_SIGN : NumberFormatSymbols_khq ,
    NAN : NumberFormatSymbols_khq ,
    PERCENT : NumberFormatSymbols_khq ,
    PERCENT_PATTERN : NumberFormatSymbols_khq ,
    PERMILL : NumberFormatSymbols_khq ,
    PLUS_SIGN : NumberFormatSymbols_khq ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_khq ,
    ZERO_DIGIT : NumberFormatSymbols_khq ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_khq'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_khq;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_khq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_khq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale khq_ML.
   */
  type NumberFormatSymbols_khq_ML = string ;
  var NumberFormatSymbols_khq_ML : {
    CURRENCY_PATTERN : NumberFormatSymbols_khq_ML ,
    DECIMAL_PATTERN : NumberFormatSymbols_khq_ML ,
    DECIMAL_SEP : NumberFormatSymbols_khq_ML ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_khq_ML ,
    EXP_SYMBOL : NumberFormatSymbols_khq_ML ,
    GROUP_SEP : NumberFormatSymbols_khq_ML ,
    INFINITY : NumberFormatSymbols_khq_ML ,
    MINUS_SIGN : NumberFormatSymbols_khq_ML ,
    NAN : NumberFormatSymbols_khq_ML ,
    PERCENT : NumberFormatSymbols_khq_ML ,
    PERCENT_PATTERN : NumberFormatSymbols_khq_ML ,
    PERMILL : NumberFormatSymbols_khq_ML ,
    PLUS_SIGN : NumberFormatSymbols_khq_ML ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_khq_ML ,
    ZERO_DIGIT : NumberFormatSymbols_khq_ML ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_khq_ML'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_khq_ML;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_khq_ML' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_khq_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ki.
   */
  type NumberFormatSymbols_ki = string ;
  var NumberFormatSymbols_ki : {
    CURRENCY_PATTERN : NumberFormatSymbols_ki ,
    DECIMAL_PATTERN : NumberFormatSymbols_ki ,
    DECIMAL_SEP : NumberFormatSymbols_ki ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ki ,
    EXP_SYMBOL : NumberFormatSymbols_ki ,
    GROUP_SEP : NumberFormatSymbols_ki ,
    INFINITY : NumberFormatSymbols_ki ,
    MINUS_SIGN : NumberFormatSymbols_ki ,
    NAN : NumberFormatSymbols_ki ,
    PERCENT : NumberFormatSymbols_ki ,
    PERCENT_PATTERN : NumberFormatSymbols_ki ,
    PERMILL : NumberFormatSymbols_ki ,
    PLUS_SIGN : NumberFormatSymbols_ki ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ki ,
    ZERO_DIGIT : NumberFormatSymbols_ki ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ki'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ki;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ki' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ki;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ki_KE.
   */
  type NumberFormatSymbols_ki_KE = string ;
  var NumberFormatSymbols_ki_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_ki_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_ki_KE ,
    DECIMAL_SEP : NumberFormatSymbols_ki_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ki_KE ,
    EXP_SYMBOL : NumberFormatSymbols_ki_KE ,
    GROUP_SEP : NumberFormatSymbols_ki_KE ,
    INFINITY : NumberFormatSymbols_ki_KE ,
    MINUS_SIGN : NumberFormatSymbols_ki_KE ,
    NAN : NumberFormatSymbols_ki_KE ,
    PERCENT : NumberFormatSymbols_ki_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_ki_KE ,
    PERMILL : NumberFormatSymbols_ki_KE ,
    PLUS_SIGN : NumberFormatSymbols_ki_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ki_KE ,
    ZERO_DIGIT : NumberFormatSymbols_ki_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ki_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ki_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ki_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ki_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kk.
   */
  type NumberFormatSymbols_kk = string ;
  var NumberFormatSymbols_kk : {
    CURRENCY_PATTERN : NumberFormatSymbols_kk ,
    DECIMAL_PATTERN : NumberFormatSymbols_kk ,
    DECIMAL_SEP : NumberFormatSymbols_kk ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kk ,
    EXP_SYMBOL : NumberFormatSymbols_kk ,
    GROUP_SEP : NumberFormatSymbols_kk ,
    INFINITY : NumberFormatSymbols_kk ,
    MINUS_SIGN : NumberFormatSymbols_kk ,
    NAN : NumberFormatSymbols_kk ,
    PERCENT : NumberFormatSymbols_kk ,
    PERCENT_PATTERN : NumberFormatSymbols_kk ,
    PERMILL : NumberFormatSymbols_kk ,
    PLUS_SIGN : NumberFormatSymbols_kk ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kk ,
    ZERO_DIGIT : NumberFormatSymbols_kk ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kk'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kk;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kk_KZ.
   */
  type NumberFormatSymbols_kk_KZ = string ;
  var NumberFormatSymbols_kk_KZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_kk_KZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_kk_KZ ,
    DECIMAL_SEP : NumberFormatSymbols_kk_KZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kk_KZ ,
    EXP_SYMBOL : NumberFormatSymbols_kk_KZ ,
    GROUP_SEP : NumberFormatSymbols_kk_KZ ,
    INFINITY : NumberFormatSymbols_kk_KZ ,
    MINUS_SIGN : NumberFormatSymbols_kk_KZ ,
    NAN : NumberFormatSymbols_kk_KZ ,
    PERCENT : NumberFormatSymbols_kk_KZ ,
    PERCENT_PATTERN : NumberFormatSymbols_kk_KZ ,
    PERMILL : NumberFormatSymbols_kk_KZ ,
    PLUS_SIGN : NumberFormatSymbols_kk_KZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kk_KZ ,
    ZERO_DIGIT : NumberFormatSymbols_kk_KZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kk_KZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kk_KZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kk_KZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kk_KZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kkj.
   */
  type NumberFormatSymbols_kkj = string ;
  var NumberFormatSymbols_kkj : {
    CURRENCY_PATTERN : NumberFormatSymbols_kkj ,
    DECIMAL_PATTERN : NumberFormatSymbols_kkj ,
    DECIMAL_SEP : NumberFormatSymbols_kkj ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kkj ,
    EXP_SYMBOL : NumberFormatSymbols_kkj ,
    GROUP_SEP : NumberFormatSymbols_kkj ,
    INFINITY : NumberFormatSymbols_kkj ,
    MINUS_SIGN : NumberFormatSymbols_kkj ,
    NAN : NumberFormatSymbols_kkj ,
    PERCENT : NumberFormatSymbols_kkj ,
    PERCENT_PATTERN : NumberFormatSymbols_kkj ,
    PERMILL : NumberFormatSymbols_kkj ,
    PLUS_SIGN : NumberFormatSymbols_kkj ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kkj ,
    ZERO_DIGIT : NumberFormatSymbols_kkj ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kkj'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kkj;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kkj' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kkj;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kkj_CM.
   */
  type NumberFormatSymbols_kkj_CM = string ;
  var NumberFormatSymbols_kkj_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_kkj_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_kkj_CM ,
    DECIMAL_SEP : NumberFormatSymbols_kkj_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kkj_CM ,
    EXP_SYMBOL : NumberFormatSymbols_kkj_CM ,
    GROUP_SEP : NumberFormatSymbols_kkj_CM ,
    INFINITY : NumberFormatSymbols_kkj_CM ,
    MINUS_SIGN : NumberFormatSymbols_kkj_CM ,
    NAN : NumberFormatSymbols_kkj_CM ,
    PERCENT : NumberFormatSymbols_kkj_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_kkj_CM ,
    PERMILL : NumberFormatSymbols_kkj_CM ,
    PLUS_SIGN : NumberFormatSymbols_kkj_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kkj_CM ,
    ZERO_DIGIT : NumberFormatSymbols_kkj_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kkj_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kkj_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kkj_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kkj_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kl.
   */
  type NumberFormatSymbols_kl = string ;
  var NumberFormatSymbols_kl : {
    CURRENCY_PATTERN : NumberFormatSymbols_kl ,
    DECIMAL_PATTERN : NumberFormatSymbols_kl ,
    DECIMAL_SEP : NumberFormatSymbols_kl ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kl ,
    EXP_SYMBOL : NumberFormatSymbols_kl ,
    GROUP_SEP : NumberFormatSymbols_kl ,
    INFINITY : NumberFormatSymbols_kl ,
    MINUS_SIGN : NumberFormatSymbols_kl ,
    NAN : NumberFormatSymbols_kl ,
    PERCENT : NumberFormatSymbols_kl ,
    PERCENT_PATTERN : NumberFormatSymbols_kl ,
    PERMILL : NumberFormatSymbols_kl ,
    PLUS_SIGN : NumberFormatSymbols_kl ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kl ,
    ZERO_DIGIT : NumberFormatSymbols_kl ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kl'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kl;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kl_GL.
   */
  type NumberFormatSymbols_kl_GL = string ;
  var NumberFormatSymbols_kl_GL : {
    CURRENCY_PATTERN : NumberFormatSymbols_kl_GL ,
    DECIMAL_PATTERN : NumberFormatSymbols_kl_GL ,
    DECIMAL_SEP : NumberFormatSymbols_kl_GL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kl_GL ,
    EXP_SYMBOL : NumberFormatSymbols_kl_GL ,
    GROUP_SEP : NumberFormatSymbols_kl_GL ,
    INFINITY : NumberFormatSymbols_kl_GL ,
    MINUS_SIGN : NumberFormatSymbols_kl_GL ,
    NAN : NumberFormatSymbols_kl_GL ,
    PERCENT : NumberFormatSymbols_kl_GL ,
    PERCENT_PATTERN : NumberFormatSymbols_kl_GL ,
    PERMILL : NumberFormatSymbols_kl_GL ,
    PLUS_SIGN : NumberFormatSymbols_kl_GL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kl_GL ,
    ZERO_DIGIT : NumberFormatSymbols_kl_GL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kl_GL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kl_GL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kl_GL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kl_GL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kln.
   */
  type NumberFormatSymbols_kln = string ;
  var NumberFormatSymbols_kln : {
    CURRENCY_PATTERN : NumberFormatSymbols_kln ,
    DECIMAL_PATTERN : NumberFormatSymbols_kln ,
    DECIMAL_SEP : NumberFormatSymbols_kln ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kln ,
    EXP_SYMBOL : NumberFormatSymbols_kln ,
    GROUP_SEP : NumberFormatSymbols_kln ,
    INFINITY : NumberFormatSymbols_kln ,
    MINUS_SIGN : NumberFormatSymbols_kln ,
    NAN : NumberFormatSymbols_kln ,
    PERCENT : NumberFormatSymbols_kln ,
    PERCENT_PATTERN : NumberFormatSymbols_kln ,
    PERMILL : NumberFormatSymbols_kln ,
    PLUS_SIGN : NumberFormatSymbols_kln ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kln ,
    ZERO_DIGIT : NumberFormatSymbols_kln ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kln'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kln;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kln' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kln;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kln_KE.
   */
  type NumberFormatSymbols_kln_KE = string ;
  var NumberFormatSymbols_kln_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_kln_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_kln_KE ,
    DECIMAL_SEP : NumberFormatSymbols_kln_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kln_KE ,
    EXP_SYMBOL : NumberFormatSymbols_kln_KE ,
    GROUP_SEP : NumberFormatSymbols_kln_KE ,
    INFINITY : NumberFormatSymbols_kln_KE ,
    MINUS_SIGN : NumberFormatSymbols_kln_KE ,
    NAN : NumberFormatSymbols_kln_KE ,
    PERCENT : NumberFormatSymbols_kln_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_kln_KE ,
    PERMILL : NumberFormatSymbols_kln_KE ,
    PLUS_SIGN : NumberFormatSymbols_kln_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kln_KE ,
    ZERO_DIGIT : NumberFormatSymbols_kln_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kln_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kln_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kln_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kln_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale km.
   */
  type NumberFormatSymbols_km = string ;
  var NumberFormatSymbols_km : {
    CURRENCY_PATTERN : NumberFormatSymbols_km ,
    DECIMAL_PATTERN : NumberFormatSymbols_km ,
    DECIMAL_SEP : NumberFormatSymbols_km ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_km ,
    EXP_SYMBOL : NumberFormatSymbols_km ,
    GROUP_SEP : NumberFormatSymbols_km ,
    INFINITY : NumberFormatSymbols_km ,
    MINUS_SIGN : NumberFormatSymbols_km ,
    NAN : NumberFormatSymbols_km ,
    PERCENT : NumberFormatSymbols_km ,
    PERCENT_PATTERN : NumberFormatSymbols_km ,
    PERMILL : NumberFormatSymbols_km ,
    PLUS_SIGN : NumberFormatSymbols_km ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_km ,
    ZERO_DIGIT : NumberFormatSymbols_km ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_km'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_km;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_km' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_km;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale km_KH.
   */
  type NumberFormatSymbols_km_KH = string ;
  var NumberFormatSymbols_km_KH : {
    CURRENCY_PATTERN : NumberFormatSymbols_km_KH ,
    DECIMAL_PATTERN : NumberFormatSymbols_km_KH ,
    DECIMAL_SEP : NumberFormatSymbols_km_KH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_km_KH ,
    EXP_SYMBOL : NumberFormatSymbols_km_KH ,
    GROUP_SEP : NumberFormatSymbols_km_KH ,
    INFINITY : NumberFormatSymbols_km_KH ,
    MINUS_SIGN : NumberFormatSymbols_km_KH ,
    NAN : NumberFormatSymbols_km_KH ,
    PERCENT : NumberFormatSymbols_km_KH ,
    PERCENT_PATTERN : NumberFormatSymbols_km_KH ,
    PERMILL : NumberFormatSymbols_km_KH ,
    PLUS_SIGN : NumberFormatSymbols_km_KH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_km_KH ,
    ZERO_DIGIT : NumberFormatSymbols_km_KH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_km_KH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_km_KH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_km_KH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_km_KH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kn.
   */
  type NumberFormatSymbols_kn = string ;
  var NumberFormatSymbols_kn : {
    CURRENCY_PATTERN : NumberFormatSymbols_kn ,
    DECIMAL_PATTERN : NumberFormatSymbols_kn ,
    DECIMAL_SEP : NumberFormatSymbols_kn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kn ,
    EXP_SYMBOL : NumberFormatSymbols_kn ,
    GROUP_SEP : NumberFormatSymbols_kn ,
    INFINITY : NumberFormatSymbols_kn ,
    MINUS_SIGN : NumberFormatSymbols_kn ,
    NAN : NumberFormatSymbols_kn ,
    PERCENT : NumberFormatSymbols_kn ,
    PERCENT_PATTERN : NumberFormatSymbols_kn ,
    PERMILL : NumberFormatSymbols_kn ,
    PLUS_SIGN : NumberFormatSymbols_kn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kn ,
    ZERO_DIGIT : NumberFormatSymbols_kn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kn_IN.
   */
  type NumberFormatSymbols_kn_IN = string ;
  var NumberFormatSymbols_kn_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_kn_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_kn_IN ,
    DECIMAL_SEP : NumberFormatSymbols_kn_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kn_IN ,
    EXP_SYMBOL : NumberFormatSymbols_kn_IN ,
    GROUP_SEP : NumberFormatSymbols_kn_IN ,
    INFINITY : NumberFormatSymbols_kn_IN ,
    MINUS_SIGN : NumberFormatSymbols_kn_IN ,
    NAN : NumberFormatSymbols_kn_IN ,
    PERCENT : NumberFormatSymbols_kn_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_kn_IN ,
    PERMILL : NumberFormatSymbols_kn_IN ,
    PLUS_SIGN : NumberFormatSymbols_kn_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kn_IN ,
    ZERO_DIGIT : NumberFormatSymbols_kn_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kn_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kn_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kn_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kn_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ko.
   */
  type NumberFormatSymbols_ko = string ;
  var NumberFormatSymbols_ko : {
    CURRENCY_PATTERN : NumberFormatSymbols_ko ,
    DECIMAL_PATTERN : NumberFormatSymbols_ko ,
    DECIMAL_SEP : NumberFormatSymbols_ko ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ko ,
    EXP_SYMBOL : NumberFormatSymbols_ko ,
    GROUP_SEP : NumberFormatSymbols_ko ,
    INFINITY : NumberFormatSymbols_ko ,
    MINUS_SIGN : NumberFormatSymbols_ko ,
    NAN : NumberFormatSymbols_ko ,
    PERCENT : NumberFormatSymbols_ko ,
    PERCENT_PATTERN : NumberFormatSymbols_ko ,
    PERMILL : NumberFormatSymbols_ko ,
    PLUS_SIGN : NumberFormatSymbols_ko ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ko ,
    ZERO_DIGIT : NumberFormatSymbols_ko ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ko'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ko;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ko' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ko;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ko_KP.
   */
  type NumberFormatSymbols_ko_KP = string ;
  var NumberFormatSymbols_ko_KP : {
    CURRENCY_PATTERN : NumberFormatSymbols_ko_KP ,
    DECIMAL_PATTERN : NumberFormatSymbols_ko_KP ,
    DECIMAL_SEP : NumberFormatSymbols_ko_KP ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ko_KP ,
    EXP_SYMBOL : NumberFormatSymbols_ko_KP ,
    GROUP_SEP : NumberFormatSymbols_ko_KP ,
    INFINITY : NumberFormatSymbols_ko_KP ,
    MINUS_SIGN : NumberFormatSymbols_ko_KP ,
    NAN : NumberFormatSymbols_ko_KP ,
    PERCENT : NumberFormatSymbols_ko_KP ,
    PERCENT_PATTERN : NumberFormatSymbols_ko_KP ,
    PERMILL : NumberFormatSymbols_ko_KP ,
    PLUS_SIGN : NumberFormatSymbols_ko_KP ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ko_KP ,
    ZERO_DIGIT : NumberFormatSymbols_ko_KP ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ko_KP'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ko_KP;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ko_KP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ko_KP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ko_KR.
   */
  type NumberFormatSymbols_ko_KR = string ;
  var NumberFormatSymbols_ko_KR : {
    CURRENCY_PATTERN : NumberFormatSymbols_ko_KR ,
    DECIMAL_PATTERN : NumberFormatSymbols_ko_KR ,
    DECIMAL_SEP : NumberFormatSymbols_ko_KR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ko_KR ,
    EXP_SYMBOL : NumberFormatSymbols_ko_KR ,
    GROUP_SEP : NumberFormatSymbols_ko_KR ,
    INFINITY : NumberFormatSymbols_ko_KR ,
    MINUS_SIGN : NumberFormatSymbols_ko_KR ,
    NAN : NumberFormatSymbols_ko_KR ,
    PERCENT : NumberFormatSymbols_ko_KR ,
    PERCENT_PATTERN : NumberFormatSymbols_ko_KR ,
    PERMILL : NumberFormatSymbols_ko_KR ,
    PLUS_SIGN : NumberFormatSymbols_ko_KR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ko_KR ,
    ZERO_DIGIT : NumberFormatSymbols_ko_KR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ko_KR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ko_KR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ko_KR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ko_KR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kok.
   */
  type NumberFormatSymbols_kok = string ;
  var NumberFormatSymbols_kok : {
    CURRENCY_PATTERN : NumberFormatSymbols_kok ,
    DECIMAL_PATTERN : NumberFormatSymbols_kok ,
    DECIMAL_SEP : NumberFormatSymbols_kok ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kok ,
    EXP_SYMBOL : NumberFormatSymbols_kok ,
    GROUP_SEP : NumberFormatSymbols_kok ,
    INFINITY : NumberFormatSymbols_kok ,
    MINUS_SIGN : NumberFormatSymbols_kok ,
    NAN : NumberFormatSymbols_kok ,
    PERCENT : NumberFormatSymbols_kok ,
    PERCENT_PATTERN : NumberFormatSymbols_kok ,
    PERMILL : NumberFormatSymbols_kok ,
    PLUS_SIGN : NumberFormatSymbols_kok ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kok ,
    ZERO_DIGIT : NumberFormatSymbols_kok ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kok'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kok;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kok' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kok;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kok_IN.
   */
  type NumberFormatSymbols_kok_IN = string ;
  var NumberFormatSymbols_kok_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_kok_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_kok_IN ,
    DECIMAL_SEP : NumberFormatSymbols_kok_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kok_IN ,
    EXP_SYMBOL : NumberFormatSymbols_kok_IN ,
    GROUP_SEP : NumberFormatSymbols_kok_IN ,
    INFINITY : NumberFormatSymbols_kok_IN ,
    MINUS_SIGN : NumberFormatSymbols_kok_IN ,
    NAN : NumberFormatSymbols_kok_IN ,
    PERCENT : NumberFormatSymbols_kok_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_kok_IN ,
    PERMILL : NumberFormatSymbols_kok_IN ,
    PLUS_SIGN : NumberFormatSymbols_kok_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kok_IN ,
    ZERO_DIGIT : NumberFormatSymbols_kok_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kok_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kok_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kok_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kok_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ks.
   */
  type NumberFormatSymbols_ks = string ;
  var NumberFormatSymbols_ks : {
    CURRENCY_PATTERN : NumberFormatSymbols_ks ,
    DECIMAL_PATTERN : NumberFormatSymbols_ks ,
    DECIMAL_SEP : NumberFormatSymbols_ks ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ks ,
    EXP_SYMBOL : NumberFormatSymbols_ks ,
    GROUP_SEP : NumberFormatSymbols_ks ,
    INFINITY : NumberFormatSymbols_ks ,
    MINUS_SIGN : NumberFormatSymbols_ks ,
    NAN : NumberFormatSymbols_ks ,
    PERCENT : NumberFormatSymbols_ks ,
    PERCENT_PATTERN : NumberFormatSymbols_ks ,
    PERMILL : NumberFormatSymbols_ks ,
    PLUS_SIGN : NumberFormatSymbols_ks ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ks ,
    ZERO_DIGIT : NumberFormatSymbols_ks ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ks'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ks;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ks' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ks;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ks_IN.
   */
  type NumberFormatSymbols_ks_IN = string ;
  var NumberFormatSymbols_ks_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_ks_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_ks_IN ,
    DECIMAL_SEP : NumberFormatSymbols_ks_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ks_IN ,
    EXP_SYMBOL : NumberFormatSymbols_ks_IN ,
    GROUP_SEP : NumberFormatSymbols_ks_IN ,
    INFINITY : NumberFormatSymbols_ks_IN ,
    MINUS_SIGN : NumberFormatSymbols_ks_IN ,
    NAN : NumberFormatSymbols_ks_IN ,
    PERCENT : NumberFormatSymbols_ks_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_ks_IN ,
    PERMILL : NumberFormatSymbols_ks_IN ,
    PLUS_SIGN : NumberFormatSymbols_ks_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ks_IN ,
    ZERO_DIGIT : NumberFormatSymbols_ks_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ks_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ks_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ks_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ks_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ksb.
   */
  type NumberFormatSymbols_ksb = string ;
  var NumberFormatSymbols_ksb : {
    CURRENCY_PATTERN : NumberFormatSymbols_ksb ,
    DECIMAL_PATTERN : NumberFormatSymbols_ksb ,
    DECIMAL_SEP : NumberFormatSymbols_ksb ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ksb ,
    EXP_SYMBOL : NumberFormatSymbols_ksb ,
    GROUP_SEP : NumberFormatSymbols_ksb ,
    INFINITY : NumberFormatSymbols_ksb ,
    MINUS_SIGN : NumberFormatSymbols_ksb ,
    NAN : NumberFormatSymbols_ksb ,
    PERCENT : NumberFormatSymbols_ksb ,
    PERCENT_PATTERN : NumberFormatSymbols_ksb ,
    PERMILL : NumberFormatSymbols_ksb ,
    PLUS_SIGN : NumberFormatSymbols_ksb ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ksb ,
    ZERO_DIGIT : NumberFormatSymbols_ksb ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ksb'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ksb;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ksb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ksb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ksb_TZ.
   */
  type NumberFormatSymbols_ksb_TZ = string ;
  var NumberFormatSymbols_ksb_TZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_ksb_TZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_ksb_TZ ,
    DECIMAL_SEP : NumberFormatSymbols_ksb_TZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ksb_TZ ,
    EXP_SYMBOL : NumberFormatSymbols_ksb_TZ ,
    GROUP_SEP : NumberFormatSymbols_ksb_TZ ,
    INFINITY : NumberFormatSymbols_ksb_TZ ,
    MINUS_SIGN : NumberFormatSymbols_ksb_TZ ,
    NAN : NumberFormatSymbols_ksb_TZ ,
    PERCENT : NumberFormatSymbols_ksb_TZ ,
    PERCENT_PATTERN : NumberFormatSymbols_ksb_TZ ,
    PERMILL : NumberFormatSymbols_ksb_TZ ,
    PLUS_SIGN : NumberFormatSymbols_ksb_TZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ksb_TZ ,
    ZERO_DIGIT : NumberFormatSymbols_ksb_TZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ksb_TZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ksb_TZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ksb_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ksb_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ksf.
   */
  type NumberFormatSymbols_ksf = string ;
  var NumberFormatSymbols_ksf : {
    CURRENCY_PATTERN : NumberFormatSymbols_ksf ,
    DECIMAL_PATTERN : NumberFormatSymbols_ksf ,
    DECIMAL_SEP : NumberFormatSymbols_ksf ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ksf ,
    EXP_SYMBOL : NumberFormatSymbols_ksf ,
    GROUP_SEP : NumberFormatSymbols_ksf ,
    INFINITY : NumberFormatSymbols_ksf ,
    MINUS_SIGN : NumberFormatSymbols_ksf ,
    NAN : NumberFormatSymbols_ksf ,
    PERCENT : NumberFormatSymbols_ksf ,
    PERCENT_PATTERN : NumberFormatSymbols_ksf ,
    PERMILL : NumberFormatSymbols_ksf ,
    PLUS_SIGN : NumberFormatSymbols_ksf ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ksf ,
    ZERO_DIGIT : NumberFormatSymbols_ksf ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ksf'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ksf;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ksf' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ksf;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ksf_CM.
   */
  type NumberFormatSymbols_ksf_CM = string ;
  var NumberFormatSymbols_ksf_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_ksf_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_ksf_CM ,
    DECIMAL_SEP : NumberFormatSymbols_ksf_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ksf_CM ,
    EXP_SYMBOL : NumberFormatSymbols_ksf_CM ,
    GROUP_SEP : NumberFormatSymbols_ksf_CM ,
    INFINITY : NumberFormatSymbols_ksf_CM ,
    MINUS_SIGN : NumberFormatSymbols_ksf_CM ,
    NAN : NumberFormatSymbols_ksf_CM ,
    PERCENT : NumberFormatSymbols_ksf_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_ksf_CM ,
    PERMILL : NumberFormatSymbols_ksf_CM ,
    PLUS_SIGN : NumberFormatSymbols_ksf_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ksf_CM ,
    ZERO_DIGIT : NumberFormatSymbols_ksf_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ksf_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ksf_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ksf_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ksf_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ksh.
   */
  type NumberFormatSymbols_ksh = string ;
  var NumberFormatSymbols_ksh : {
    CURRENCY_PATTERN : NumberFormatSymbols_ksh ,
    DECIMAL_PATTERN : NumberFormatSymbols_ksh ,
    DECIMAL_SEP : NumberFormatSymbols_ksh ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ksh ,
    EXP_SYMBOL : NumberFormatSymbols_ksh ,
    GROUP_SEP : NumberFormatSymbols_ksh ,
    INFINITY : NumberFormatSymbols_ksh ,
    MINUS_SIGN : NumberFormatSymbols_ksh ,
    NAN : NumberFormatSymbols_ksh ,
    PERCENT : NumberFormatSymbols_ksh ,
    PERCENT_PATTERN : NumberFormatSymbols_ksh ,
    PERMILL : NumberFormatSymbols_ksh ,
    PLUS_SIGN : NumberFormatSymbols_ksh ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ksh ,
    ZERO_DIGIT : NumberFormatSymbols_ksh ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ksh'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ksh;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ksh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ksh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ksh_DE.
   */
  type NumberFormatSymbols_ksh_DE = string ;
  var NumberFormatSymbols_ksh_DE : {
    CURRENCY_PATTERN : NumberFormatSymbols_ksh_DE ,
    DECIMAL_PATTERN : NumberFormatSymbols_ksh_DE ,
    DECIMAL_SEP : NumberFormatSymbols_ksh_DE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ksh_DE ,
    EXP_SYMBOL : NumberFormatSymbols_ksh_DE ,
    GROUP_SEP : NumberFormatSymbols_ksh_DE ,
    INFINITY : NumberFormatSymbols_ksh_DE ,
    MINUS_SIGN : NumberFormatSymbols_ksh_DE ,
    NAN : NumberFormatSymbols_ksh_DE ,
    PERCENT : NumberFormatSymbols_ksh_DE ,
    PERCENT_PATTERN : NumberFormatSymbols_ksh_DE ,
    PERMILL : NumberFormatSymbols_ksh_DE ,
    PLUS_SIGN : NumberFormatSymbols_ksh_DE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ksh_DE ,
    ZERO_DIGIT : NumberFormatSymbols_ksh_DE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ksh_DE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ksh_DE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ksh_DE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ksh_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kw.
   */
  type NumberFormatSymbols_kw = string ;
  var NumberFormatSymbols_kw : {
    CURRENCY_PATTERN : NumberFormatSymbols_kw ,
    DECIMAL_PATTERN : NumberFormatSymbols_kw ,
    DECIMAL_SEP : NumberFormatSymbols_kw ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kw ,
    EXP_SYMBOL : NumberFormatSymbols_kw ,
    GROUP_SEP : NumberFormatSymbols_kw ,
    INFINITY : NumberFormatSymbols_kw ,
    MINUS_SIGN : NumberFormatSymbols_kw ,
    NAN : NumberFormatSymbols_kw ,
    PERCENT : NumberFormatSymbols_kw ,
    PERCENT_PATTERN : NumberFormatSymbols_kw ,
    PERMILL : NumberFormatSymbols_kw ,
    PLUS_SIGN : NumberFormatSymbols_kw ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kw ,
    ZERO_DIGIT : NumberFormatSymbols_kw ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kw'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kw;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale kw_GB.
   */
  type NumberFormatSymbols_kw_GB = string ;
  var NumberFormatSymbols_kw_GB : {
    CURRENCY_PATTERN : NumberFormatSymbols_kw_GB ,
    DECIMAL_PATTERN : NumberFormatSymbols_kw_GB ,
    DECIMAL_SEP : NumberFormatSymbols_kw_GB ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_kw_GB ,
    EXP_SYMBOL : NumberFormatSymbols_kw_GB ,
    GROUP_SEP : NumberFormatSymbols_kw_GB ,
    INFINITY : NumberFormatSymbols_kw_GB ,
    MINUS_SIGN : NumberFormatSymbols_kw_GB ,
    NAN : NumberFormatSymbols_kw_GB ,
    PERCENT : NumberFormatSymbols_kw_GB ,
    PERCENT_PATTERN : NumberFormatSymbols_kw_GB ,
    PERMILL : NumberFormatSymbols_kw_GB ,
    PLUS_SIGN : NumberFormatSymbols_kw_GB ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_kw_GB ,
    ZERO_DIGIT : NumberFormatSymbols_kw_GB ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_kw_GB'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kw_GB;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_kw_GB' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_kw_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ky.
   */
  type NumberFormatSymbols_ky = string ;
  var NumberFormatSymbols_ky : {
    CURRENCY_PATTERN : NumberFormatSymbols_ky ,
    DECIMAL_PATTERN : NumberFormatSymbols_ky ,
    DECIMAL_SEP : NumberFormatSymbols_ky ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ky ,
    EXP_SYMBOL : NumberFormatSymbols_ky ,
    GROUP_SEP : NumberFormatSymbols_ky ,
    INFINITY : NumberFormatSymbols_ky ,
    MINUS_SIGN : NumberFormatSymbols_ky ,
    NAN : NumberFormatSymbols_ky ,
    PERCENT : NumberFormatSymbols_ky ,
    PERCENT_PATTERN : NumberFormatSymbols_ky ,
    PERMILL : NumberFormatSymbols_ky ,
    PLUS_SIGN : NumberFormatSymbols_ky ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ky ,
    ZERO_DIGIT : NumberFormatSymbols_ky ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ky'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ky;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ky' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ky;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ky_KG.
   */
  type NumberFormatSymbols_ky_KG = string ;
  var NumberFormatSymbols_ky_KG : {
    CURRENCY_PATTERN : NumberFormatSymbols_ky_KG ,
    DECIMAL_PATTERN : NumberFormatSymbols_ky_KG ,
    DECIMAL_SEP : NumberFormatSymbols_ky_KG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ky_KG ,
    EXP_SYMBOL : NumberFormatSymbols_ky_KG ,
    GROUP_SEP : NumberFormatSymbols_ky_KG ,
    INFINITY : NumberFormatSymbols_ky_KG ,
    MINUS_SIGN : NumberFormatSymbols_ky_KG ,
    NAN : NumberFormatSymbols_ky_KG ,
    PERCENT : NumberFormatSymbols_ky_KG ,
    PERCENT_PATTERN : NumberFormatSymbols_ky_KG ,
    PERMILL : NumberFormatSymbols_ky_KG ,
    PLUS_SIGN : NumberFormatSymbols_ky_KG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ky_KG ,
    ZERO_DIGIT : NumberFormatSymbols_ky_KG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ky_KG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ky_KG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ky_KG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ky_KG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lag.
   */
  type NumberFormatSymbols_lag = string ;
  var NumberFormatSymbols_lag : {
    CURRENCY_PATTERN : NumberFormatSymbols_lag ,
    DECIMAL_PATTERN : NumberFormatSymbols_lag ,
    DECIMAL_SEP : NumberFormatSymbols_lag ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lag ,
    EXP_SYMBOL : NumberFormatSymbols_lag ,
    GROUP_SEP : NumberFormatSymbols_lag ,
    INFINITY : NumberFormatSymbols_lag ,
    MINUS_SIGN : NumberFormatSymbols_lag ,
    NAN : NumberFormatSymbols_lag ,
    PERCENT : NumberFormatSymbols_lag ,
    PERCENT_PATTERN : NumberFormatSymbols_lag ,
    PERMILL : NumberFormatSymbols_lag ,
    PLUS_SIGN : NumberFormatSymbols_lag ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lag ,
    ZERO_DIGIT : NumberFormatSymbols_lag ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lag'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lag;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lag' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lag;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lag_TZ.
   */
  type NumberFormatSymbols_lag_TZ = string ;
  var NumberFormatSymbols_lag_TZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_lag_TZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_lag_TZ ,
    DECIMAL_SEP : NumberFormatSymbols_lag_TZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lag_TZ ,
    EXP_SYMBOL : NumberFormatSymbols_lag_TZ ,
    GROUP_SEP : NumberFormatSymbols_lag_TZ ,
    INFINITY : NumberFormatSymbols_lag_TZ ,
    MINUS_SIGN : NumberFormatSymbols_lag_TZ ,
    NAN : NumberFormatSymbols_lag_TZ ,
    PERCENT : NumberFormatSymbols_lag_TZ ,
    PERCENT_PATTERN : NumberFormatSymbols_lag_TZ ,
    PERMILL : NumberFormatSymbols_lag_TZ ,
    PLUS_SIGN : NumberFormatSymbols_lag_TZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lag_TZ ,
    ZERO_DIGIT : NumberFormatSymbols_lag_TZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lag_TZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lag_TZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lag_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lag_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lb.
   */
  type NumberFormatSymbols_lb = string ;
  var NumberFormatSymbols_lb : {
    CURRENCY_PATTERN : NumberFormatSymbols_lb ,
    DECIMAL_PATTERN : NumberFormatSymbols_lb ,
    DECIMAL_SEP : NumberFormatSymbols_lb ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lb ,
    EXP_SYMBOL : NumberFormatSymbols_lb ,
    GROUP_SEP : NumberFormatSymbols_lb ,
    INFINITY : NumberFormatSymbols_lb ,
    MINUS_SIGN : NumberFormatSymbols_lb ,
    NAN : NumberFormatSymbols_lb ,
    PERCENT : NumberFormatSymbols_lb ,
    PERCENT_PATTERN : NumberFormatSymbols_lb ,
    PERMILL : NumberFormatSymbols_lb ,
    PLUS_SIGN : NumberFormatSymbols_lb ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lb ,
    ZERO_DIGIT : NumberFormatSymbols_lb ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lb'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lb;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lb_LU.
   */
  type NumberFormatSymbols_lb_LU = string ;
  var NumberFormatSymbols_lb_LU : {
    CURRENCY_PATTERN : NumberFormatSymbols_lb_LU ,
    DECIMAL_PATTERN : NumberFormatSymbols_lb_LU ,
    DECIMAL_SEP : NumberFormatSymbols_lb_LU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lb_LU ,
    EXP_SYMBOL : NumberFormatSymbols_lb_LU ,
    GROUP_SEP : NumberFormatSymbols_lb_LU ,
    INFINITY : NumberFormatSymbols_lb_LU ,
    MINUS_SIGN : NumberFormatSymbols_lb_LU ,
    NAN : NumberFormatSymbols_lb_LU ,
    PERCENT : NumberFormatSymbols_lb_LU ,
    PERCENT_PATTERN : NumberFormatSymbols_lb_LU ,
    PERMILL : NumberFormatSymbols_lb_LU ,
    PLUS_SIGN : NumberFormatSymbols_lb_LU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lb_LU ,
    ZERO_DIGIT : NumberFormatSymbols_lb_LU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lb_LU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lb_LU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lb_LU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lb_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lg.
   */
  type NumberFormatSymbols_lg = string ;
  var NumberFormatSymbols_lg : {
    CURRENCY_PATTERN : NumberFormatSymbols_lg ,
    DECIMAL_PATTERN : NumberFormatSymbols_lg ,
    DECIMAL_SEP : NumberFormatSymbols_lg ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lg ,
    EXP_SYMBOL : NumberFormatSymbols_lg ,
    GROUP_SEP : NumberFormatSymbols_lg ,
    INFINITY : NumberFormatSymbols_lg ,
    MINUS_SIGN : NumberFormatSymbols_lg ,
    NAN : NumberFormatSymbols_lg ,
    PERCENT : NumberFormatSymbols_lg ,
    PERCENT_PATTERN : NumberFormatSymbols_lg ,
    PERMILL : NumberFormatSymbols_lg ,
    PLUS_SIGN : NumberFormatSymbols_lg ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lg ,
    ZERO_DIGIT : NumberFormatSymbols_lg ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lg'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lg;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lg_UG.
   */
  type NumberFormatSymbols_lg_UG = string ;
  var NumberFormatSymbols_lg_UG : {
    CURRENCY_PATTERN : NumberFormatSymbols_lg_UG ,
    DECIMAL_PATTERN : NumberFormatSymbols_lg_UG ,
    DECIMAL_SEP : NumberFormatSymbols_lg_UG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lg_UG ,
    EXP_SYMBOL : NumberFormatSymbols_lg_UG ,
    GROUP_SEP : NumberFormatSymbols_lg_UG ,
    INFINITY : NumberFormatSymbols_lg_UG ,
    MINUS_SIGN : NumberFormatSymbols_lg_UG ,
    NAN : NumberFormatSymbols_lg_UG ,
    PERCENT : NumberFormatSymbols_lg_UG ,
    PERCENT_PATTERN : NumberFormatSymbols_lg_UG ,
    PERMILL : NumberFormatSymbols_lg_UG ,
    PLUS_SIGN : NumberFormatSymbols_lg_UG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lg_UG ,
    ZERO_DIGIT : NumberFormatSymbols_lg_UG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lg_UG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lg_UG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lg_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lg_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lkt.
   */
  type NumberFormatSymbols_lkt = string ;
  var NumberFormatSymbols_lkt : {
    CURRENCY_PATTERN : NumberFormatSymbols_lkt ,
    DECIMAL_PATTERN : NumberFormatSymbols_lkt ,
    DECIMAL_SEP : NumberFormatSymbols_lkt ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lkt ,
    EXP_SYMBOL : NumberFormatSymbols_lkt ,
    GROUP_SEP : NumberFormatSymbols_lkt ,
    INFINITY : NumberFormatSymbols_lkt ,
    MINUS_SIGN : NumberFormatSymbols_lkt ,
    NAN : NumberFormatSymbols_lkt ,
    PERCENT : NumberFormatSymbols_lkt ,
    PERCENT_PATTERN : NumberFormatSymbols_lkt ,
    PERMILL : NumberFormatSymbols_lkt ,
    PLUS_SIGN : NumberFormatSymbols_lkt ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lkt ,
    ZERO_DIGIT : NumberFormatSymbols_lkt ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lkt'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lkt;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lkt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lkt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lkt_US.
   */
  type NumberFormatSymbols_lkt_US = string ;
  var NumberFormatSymbols_lkt_US : {
    CURRENCY_PATTERN : NumberFormatSymbols_lkt_US ,
    DECIMAL_PATTERN : NumberFormatSymbols_lkt_US ,
    DECIMAL_SEP : NumberFormatSymbols_lkt_US ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lkt_US ,
    EXP_SYMBOL : NumberFormatSymbols_lkt_US ,
    GROUP_SEP : NumberFormatSymbols_lkt_US ,
    INFINITY : NumberFormatSymbols_lkt_US ,
    MINUS_SIGN : NumberFormatSymbols_lkt_US ,
    NAN : NumberFormatSymbols_lkt_US ,
    PERCENT : NumberFormatSymbols_lkt_US ,
    PERCENT_PATTERN : NumberFormatSymbols_lkt_US ,
    PERMILL : NumberFormatSymbols_lkt_US ,
    PLUS_SIGN : NumberFormatSymbols_lkt_US ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lkt_US ,
    ZERO_DIGIT : NumberFormatSymbols_lkt_US ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lkt_US'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lkt_US;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lkt_US' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lkt_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ln.
   */
  type NumberFormatSymbols_ln = string ;
  var NumberFormatSymbols_ln : {
    CURRENCY_PATTERN : NumberFormatSymbols_ln ,
    DECIMAL_PATTERN : NumberFormatSymbols_ln ,
    DECIMAL_SEP : NumberFormatSymbols_ln ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ln ,
    EXP_SYMBOL : NumberFormatSymbols_ln ,
    GROUP_SEP : NumberFormatSymbols_ln ,
    INFINITY : NumberFormatSymbols_ln ,
    MINUS_SIGN : NumberFormatSymbols_ln ,
    NAN : NumberFormatSymbols_ln ,
    PERCENT : NumberFormatSymbols_ln ,
    PERCENT_PATTERN : NumberFormatSymbols_ln ,
    PERMILL : NumberFormatSymbols_ln ,
    PLUS_SIGN : NumberFormatSymbols_ln ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ln ,
    ZERO_DIGIT : NumberFormatSymbols_ln ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ln'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ln;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ln' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ln;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ln_AO.
   */
  type NumberFormatSymbols_ln_AO = string ;
  var NumberFormatSymbols_ln_AO : {
    CURRENCY_PATTERN : NumberFormatSymbols_ln_AO ,
    DECIMAL_PATTERN : NumberFormatSymbols_ln_AO ,
    DECIMAL_SEP : NumberFormatSymbols_ln_AO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ln_AO ,
    EXP_SYMBOL : NumberFormatSymbols_ln_AO ,
    GROUP_SEP : NumberFormatSymbols_ln_AO ,
    INFINITY : NumberFormatSymbols_ln_AO ,
    MINUS_SIGN : NumberFormatSymbols_ln_AO ,
    NAN : NumberFormatSymbols_ln_AO ,
    PERCENT : NumberFormatSymbols_ln_AO ,
    PERCENT_PATTERN : NumberFormatSymbols_ln_AO ,
    PERMILL : NumberFormatSymbols_ln_AO ,
    PLUS_SIGN : NumberFormatSymbols_ln_AO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ln_AO ,
    ZERO_DIGIT : NumberFormatSymbols_ln_AO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ln_AO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ln_AO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ln_AO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ln_AO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ln_CD.
   */
  type NumberFormatSymbols_ln_CD = string ;
  var NumberFormatSymbols_ln_CD : {
    CURRENCY_PATTERN : NumberFormatSymbols_ln_CD ,
    DECIMAL_PATTERN : NumberFormatSymbols_ln_CD ,
    DECIMAL_SEP : NumberFormatSymbols_ln_CD ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ln_CD ,
    EXP_SYMBOL : NumberFormatSymbols_ln_CD ,
    GROUP_SEP : NumberFormatSymbols_ln_CD ,
    INFINITY : NumberFormatSymbols_ln_CD ,
    MINUS_SIGN : NumberFormatSymbols_ln_CD ,
    NAN : NumberFormatSymbols_ln_CD ,
    PERCENT : NumberFormatSymbols_ln_CD ,
    PERCENT_PATTERN : NumberFormatSymbols_ln_CD ,
    PERMILL : NumberFormatSymbols_ln_CD ,
    PLUS_SIGN : NumberFormatSymbols_ln_CD ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ln_CD ,
    ZERO_DIGIT : NumberFormatSymbols_ln_CD ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ln_CD'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ln_CD;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ln_CD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ln_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ln_CF.
   */
  type NumberFormatSymbols_ln_CF = string ;
  var NumberFormatSymbols_ln_CF : {
    CURRENCY_PATTERN : NumberFormatSymbols_ln_CF ,
    DECIMAL_PATTERN : NumberFormatSymbols_ln_CF ,
    DECIMAL_SEP : NumberFormatSymbols_ln_CF ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ln_CF ,
    EXP_SYMBOL : NumberFormatSymbols_ln_CF ,
    GROUP_SEP : NumberFormatSymbols_ln_CF ,
    INFINITY : NumberFormatSymbols_ln_CF ,
    MINUS_SIGN : NumberFormatSymbols_ln_CF ,
    NAN : NumberFormatSymbols_ln_CF ,
    PERCENT : NumberFormatSymbols_ln_CF ,
    PERCENT_PATTERN : NumberFormatSymbols_ln_CF ,
    PERMILL : NumberFormatSymbols_ln_CF ,
    PLUS_SIGN : NumberFormatSymbols_ln_CF ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ln_CF ,
    ZERO_DIGIT : NumberFormatSymbols_ln_CF ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ln_CF'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ln_CF;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ln_CF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ln_CF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ln_CG.
   */
  type NumberFormatSymbols_ln_CG = string ;
  var NumberFormatSymbols_ln_CG : {
    CURRENCY_PATTERN : NumberFormatSymbols_ln_CG ,
    DECIMAL_PATTERN : NumberFormatSymbols_ln_CG ,
    DECIMAL_SEP : NumberFormatSymbols_ln_CG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ln_CG ,
    EXP_SYMBOL : NumberFormatSymbols_ln_CG ,
    GROUP_SEP : NumberFormatSymbols_ln_CG ,
    INFINITY : NumberFormatSymbols_ln_CG ,
    MINUS_SIGN : NumberFormatSymbols_ln_CG ,
    NAN : NumberFormatSymbols_ln_CG ,
    PERCENT : NumberFormatSymbols_ln_CG ,
    PERCENT_PATTERN : NumberFormatSymbols_ln_CG ,
    PERMILL : NumberFormatSymbols_ln_CG ,
    PLUS_SIGN : NumberFormatSymbols_ln_CG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ln_CG ,
    ZERO_DIGIT : NumberFormatSymbols_ln_CG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ln_CG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ln_CG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ln_CG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ln_CG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lo.
   */
  type NumberFormatSymbols_lo = string ;
  var NumberFormatSymbols_lo : {
    CURRENCY_PATTERN : NumberFormatSymbols_lo ,
    DECIMAL_PATTERN : NumberFormatSymbols_lo ,
    DECIMAL_SEP : NumberFormatSymbols_lo ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lo ,
    EXP_SYMBOL : NumberFormatSymbols_lo ,
    GROUP_SEP : NumberFormatSymbols_lo ,
    INFINITY : NumberFormatSymbols_lo ,
    MINUS_SIGN : NumberFormatSymbols_lo ,
    NAN : NumberFormatSymbols_lo ,
    PERCENT : NumberFormatSymbols_lo ,
    PERCENT_PATTERN : NumberFormatSymbols_lo ,
    PERMILL : NumberFormatSymbols_lo ,
    PLUS_SIGN : NumberFormatSymbols_lo ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lo ,
    ZERO_DIGIT : NumberFormatSymbols_lo ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lo'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lo;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lo_LA.
   */
  type NumberFormatSymbols_lo_LA = string ;
  var NumberFormatSymbols_lo_LA : {
    CURRENCY_PATTERN : NumberFormatSymbols_lo_LA ,
    DECIMAL_PATTERN : NumberFormatSymbols_lo_LA ,
    DECIMAL_SEP : NumberFormatSymbols_lo_LA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lo_LA ,
    EXP_SYMBOL : NumberFormatSymbols_lo_LA ,
    GROUP_SEP : NumberFormatSymbols_lo_LA ,
    INFINITY : NumberFormatSymbols_lo_LA ,
    MINUS_SIGN : NumberFormatSymbols_lo_LA ,
    NAN : NumberFormatSymbols_lo_LA ,
    PERCENT : NumberFormatSymbols_lo_LA ,
    PERCENT_PATTERN : NumberFormatSymbols_lo_LA ,
    PERMILL : NumberFormatSymbols_lo_LA ,
    PLUS_SIGN : NumberFormatSymbols_lo_LA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lo_LA ,
    ZERO_DIGIT : NumberFormatSymbols_lo_LA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lo_LA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lo_LA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lo_LA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lo_LA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lrc.
   */
  type NumberFormatSymbols_lrc = string ;
  var NumberFormatSymbols_lrc : {
    CURRENCY_PATTERN : NumberFormatSymbols_lrc ,
    DECIMAL_PATTERN : NumberFormatSymbols_lrc ,
    DECIMAL_SEP : NumberFormatSymbols_lrc ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lrc ,
    EXP_SYMBOL : NumberFormatSymbols_lrc ,
    GROUP_SEP : NumberFormatSymbols_lrc ,
    INFINITY : NumberFormatSymbols_lrc ,
    MINUS_SIGN : NumberFormatSymbols_lrc ,
    NAN : NumberFormatSymbols_lrc ,
    PERCENT : NumberFormatSymbols_lrc ,
    PERCENT_PATTERN : NumberFormatSymbols_lrc ,
    PERMILL : NumberFormatSymbols_lrc ,
    PLUS_SIGN : NumberFormatSymbols_lrc ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lrc ,
    ZERO_DIGIT : NumberFormatSymbols_lrc ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lrc'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lrc;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lrc' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lrc;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lrc_IQ.
   */
  type NumberFormatSymbols_lrc_IQ = string ;
  var NumberFormatSymbols_lrc_IQ : {
    CURRENCY_PATTERN : NumberFormatSymbols_lrc_IQ ,
    DECIMAL_PATTERN : NumberFormatSymbols_lrc_IQ ,
    DECIMAL_SEP : NumberFormatSymbols_lrc_IQ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lrc_IQ ,
    EXP_SYMBOL : NumberFormatSymbols_lrc_IQ ,
    GROUP_SEP : NumberFormatSymbols_lrc_IQ ,
    INFINITY : NumberFormatSymbols_lrc_IQ ,
    MINUS_SIGN : NumberFormatSymbols_lrc_IQ ,
    NAN : NumberFormatSymbols_lrc_IQ ,
    PERCENT : NumberFormatSymbols_lrc_IQ ,
    PERCENT_PATTERN : NumberFormatSymbols_lrc_IQ ,
    PERMILL : NumberFormatSymbols_lrc_IQ ,
    PLUS_SIGN : NumberFormatSymbols_lrc_IQ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lrc_IQ ,
    ZERO_DIGIT : NumberFormatSymbols_lrc_IQ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lrc_IQ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lrc_IQ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lrc_IQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lrc_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lrc_IR.
   */
  type NumberFormatSymbols_lrc_IR = string ;
  var NumberFormatSymbols_lrc_IR : {
    CURRENCY_PATTERN : NumberFormatSymbols_lrc_IR ,
    DECIMAL_PATTERN : NumberFormatSymbols_lrc_IR ,
    DECIMAL_SEP : NumberFormatSymbols_lrc_IR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lrc_IR ,
    EXP_SYMBOL : NumberFormatSymbols_lrc_IR ,
    GROUP_SEP : NumberFormatSymbols_lrc_IR ,
    INFINITY : NumberFormatSymbols_lrc_IR ,
    MINUS_SIGN : NumberFormatSymbols_lrc_IR ,
    NAN : NumberFormatSymbols_lrc_IR ,
    PERCENT : NumberFormatSymbols_lrc_IR ,
    PERCENT_PATTERN : NumberFormatSymbols_lrc_IR ,
    PERMILL : NumberFormatSymbols_lrc_IR ,
    PLUS_SIGN : NumberFormatSymbols_lrc_IR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lrc_IR ,
    ZERO_DIGIT : NumberFormatSymbols_lrc_IR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lrc_IR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lrc_IR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lrc_IR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lrc_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lt.
   */
  type NumberFormatSymbols_lt = string ;
  var NumberFormatSymbols_lt : {
    CURRENCY_PATTERN : NumberFormatSymbols_lt ,
    DECIMAL_PATTERN : NumberFormatSymbols_lt ,
    DECIMAL_SEP : NumberFormatSymbols_lt ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lt ,
    EXP_SYMBOL : NumberFormatSymbols_lt ,
    GROUP_SEP : NumberFormatSymbols_lt ,
    INFINITY : NumberFormatSymbols_lt ,
    MINUS_SIGN : NumberFormatSymbols_lt ,
    NAN : NumberFormatSymbols_lt ,
    PERCENT : NumberFormatSymbols_lt ,
    PERCENT_PATTERN : NumberFormatSymbols_lt ,
    PERMILL : NumberFormatSymbols_lt ,
    PLUS_SIGN : NumberFormatSymbols_lt ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lt ,
    ZERO_DIGIT : NumberFormatSymbols_lt ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lt'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lt;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lt_LT.
   */
  type NumberFormatSymbols_lt_LT = string ;
  var NumberFormatSymbols_lt_LT : {
    CURRENCY_PATTERN : NumberFormatSymbols_lt_LT ,
    DECIMAL_PATTERN : NumberFormatSymbols_lt_LT ,
    DECIMAL_SEP : NumberFormatSymbols_lt_LT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lt_LT ,
    EXP_SYMBOL : NumberFormatSymbols_lt_LT ,
    GROUP_SEP : NumberFormatSymbols_lt_LT ,
    INFINITY : NumberFormatSymbols_lt_LT ,
    MINUS_SIGN : NumberFormatSymbols_lt_LT ,
    NAN : NumberFormatSymbols_lt_LT ,
    PERCENT : NumberFormatSymbols_lt_LT ,
    PERCENT_PATTERN : NumberFormatSymbols_lt_LT ,
    PERMILL : NumberFormatSymbols_lt_LT ,
    PLUS_SIGN : NumberFormatSymbols_lt_LT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lt_LT ,
    ZERO_DIGIT : NumberFormatSymbols_lt_LT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lt_LT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lt_LT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lt_LT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lt_LT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lu.
   */
  type NumberFormatSymbols_lu = string ;
  var NumberFormatSymbols_lu : {
    CURRENCY_PATTERN : NumberFormatSymbols_lu ,
    DECIMAL_PATTERN : NumberFormatSymbols_lu ,
    DECIMAL_SEP : NumberFormatSymbols_lu ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lu ,
    EXP_SYMBOL : NumberFormatSymbols_lu ,
    GROUP_SEP : NumberFormatSymbols_lu ,
    INFINITY : NumberFormatSymbols_lu ,
    MINUS_SIGN : NumberFormatSymbols_lu ,
    NAN : NumberFormatSymbols_lu ,
    PERCENT : NumberFormatSymbols_lu ,
    PERCENT_PATTERN : NumberFormatSymbols_lu ,
    PERMILL : NumberFormatSymbols_lu ,
    PLUS_SIGN : NumberFormatSymbols_lu ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lu ,
    ZERO_DIGIT : NumberFormatSymbols_lu ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lu'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lu;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lu_CD.
   */
  type NumberFormatSymbols_lu_CD = string ;
  var NumberFormatSymbols_lu_CD : {
    CURRENCY_PATTERN : NumberFormatSymbols_lu_CD ,
    DECIMAL_PATTERN : NumberFormatSymbols_lu_CD ,
    DECIMAL_SEP : NumberFormatSymbols_lu_CD ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lu_CD ,
    EXP_SYMBOL : NumberFormatSymbols_lu_CD ,
    GROUP_SEP : NumberFormatSymbols_lu_CD ,
    INFINITY : NumberFormatSymbols_lu_CD ,
    MINUS_SIGN : NumberFormatSymbols_lu_CD ,
    NAN : NumberFormatSymbols_lu_CD ,
    PERCENT : NumberFormatSymbols_lu_CD ,
    PERCENT_PATTERN : NumberFormatSymbols_lu_CD ,
    PERMILL : NumberFormatSymbols_lu_CD ,
    PLUS_SIGN : NumberFormatSymbols_lu_CD ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lu_CD ,
    ZERO_DIGIT : NumberFormatSymbols_lu_CD ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lu_CD'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lu_CD;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lu_CD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lu_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale luo.
   */
  type NumberFormatSymbols_luo = string ;
  var NumberFormatSymbols_luo : {
    CURRENCY_PATTERN : NumberFormatSymbols_luo ,
    DECIMAL_PATTERN : NumberFormatSymbols_luo ,
    DECIMAL_SEP : NumberFormatSymbols_luo ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_luo ,
    EXP_SYMBOL : NumberFormatSymbols_luo ,
    GROUP_SEP : NumberFormatSymbols_luo ,
    INFINITY : NumberFormatSymbols_luo ,
    MINUS_SIGN : NumberFormatSymbols_luo ,
    NAN : NumberFormatSymbols_luo ,
    PERCENT : NumberFormatSymbols_luo ,
    PERCENT_PATTERN : NumberFormatSymbols_luo ,
    PERMILL : NumberFormatSymbols_luo ,
    PLUS_SIGN : NumberFormatSymbols_luo ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_luo ,
    ZERO_DIGIT : NumberFormatSymbols_luo ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_luo'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_luo;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_luo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_luo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale luo_KE.
   */
  type NumberFormatSymbols_luo_KE = string ;
  var NumberFormatSymbols_luo_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_luo_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_luo_KE ,
    DECIMAL_SEP : NumberFormatSymbols_luo_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_luo_KE ,
    EXP_SYMBOL : NumberFormatSymbols_luo_KE ,
    GROUP_SEP : NumberFormatSymbols_luo_KE ,
    INFINITY : NumberFormatSymbols_luo_KE ,
    MINUS_SIGN : NumberFormatSymbols_luo_KE ,
    NAN : NumberFormatSymbols_luo_KE ,
    PERCENT : NumberFormatSymbols_luo_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_luo_KE ,
    PERMILL : NumberFormatSymbols_luo_KE ,
    PLUS_SIGN : NumberFormatSymbols_luo_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_luo_KE ,
    ZERO_DIGIT : NumberFormatSymbols_luo_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_luo_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_luo_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_luo_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_luo_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale luy.
   */
  type NumberFormatSymbols_luy = string ;
  var NumberFormatSymbols_luy : {
    CURRENCY_PATTERN : NumberFormatSymbols_luy ,
    DECIMAL_PATTERN : NumberFormatSymbols_luy ,
    DECIMAL_SEP : NumberFormatSymbols_luy ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_luy ,
    EXP_SYMBOL : NumberFormatSymbols_luy ,
    GROUP_SEP : NumberFormatSymbols_luy ,
    INFINITY : NumberFormatSymbols_luy ,
    MINUS_SIGN : NumberFormatSymbols_luy ,
    NAN : NumberFormatSymbols_luy ,
    PERCENT : NumberFormatSymbols_luy ,
    PERCENT_PATTERN : NumberFormatSymbols_luy ,
    PERMILL : NumberFormatSymbols_luy ,
    PLUS_SIGN : NumberFormatSymbols_luy ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_luy ,
    ZERO_DIGIT : NumberFormatSymbols_luy ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_luy'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_luy;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_luy' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_luy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale luy_KE.
   */
  type NumberFormatSymbols_luy_KE = string ;
  var NumberFormatSymbols_luy_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_luy_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_luy_KE ,
    DECIMAL_SEP : NumberFormatSymbols_luy_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_luy_KE ,
    EXP_SYMBOL : NumberFormatSymbols_luy_KE ,
    GROUP_SEP : NumberFormatSymbols_luy_KE ,
    INFINITY : NumberFormatSymbols_luy_KE ,
    MINUS_SIGN : NumberFormatSymbols_luy_KE ,
    NAN : NumberFormatSymbols_luy_KE ,
    PERCENT : NumberFormatSymbols_luy_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_luy_KE ,
    PERMILL : NumberFormatSymbols_luy_KE ,
    PLUS_SIGN : NumberFormatSymbols_luy_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_luy_KE ,
    ZERO_DIGIT : NumberFormatSymbols_luy_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_luy_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_luy_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_luy_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_luy_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lv.
   */
  type NumberFormatSymbols_lv = string ;
  var NumberFormatSymbols_lv : {
    CURRENCY_PATTERN : NumberFormatSymbols_lv ,
    DECIMAL_PATTERN : NumberFormatSymbols_lv ,
    DECIMAL_SEP : NumberFormatSymbols_lv ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lv ,
    EXP_SYMBOL : NumberFormatSymbols_lv ,
    GROUP_SEP : NumberFormatSymbols_lv ,
    INFINITY : NumberFormatSymbols_lv ,
    MINUS_SIGN : NumberFormatSymbols_lv ,
    NAN : NumberFormatSymbols_lv ,
    PERCENT : NumberFormatSymbols_lv ,
    PERCENT_PATTERN : NumberFormatSymbols_lv ,
    PERMILL : NumberFormatSymbols_lv ,
    PLUS_SIGN : NumberFormatSymbols_lv ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lv ,
    ZERO_DIGIT : NumberFormatSymbols_lv ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lv'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lv;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lv' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lv;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale lv_LV.
   */
  type NumberFormatSymbols_lv_LV = string ;
  var NumberFormatSymbols_lv_LV : {
    CURRENCY_PATTERN : NumberFormatSymbols_lv_LV ,
    DECIMAL_PATTERN : NumberFormatSymbols_lv_LV ,
    DECIMAL_SEP : NumberFormatSymbols_lv_LV ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_lv_LV ,
    EXP_SYMBOL : NumberFormatSymbols_lv_LV ,
    GROUP_SEP : NumberFormatSymbols_lv_LV ,
    INFINITY : NumberFormatSymbols_lv_LV ,
    MINUS_SIGN : NumberFormatSymbols_lv_LV ,
    NAN : NumberFormatSymbols_lv_LV ,
    PERCENT : NumberFormatSymbols_lv_LV ,
    PERCENT_PATTERN : NumberFormatSymbols_lv_LV ,
    PERMILL : NumberFormatSymbols_lv_LV ,
    PLUS_SIGN : NumberFormatSymbols_lv_LV ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_lv_LV ,
    ZERO_DIGIT : NumberFormatSymbols_lv_LV ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_lv_LV'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lv_LV;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_lv_LV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_lv_LV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mas.
   */
  type NumberFormatSymbols_mas = string ;
  var NumberFormatSymbols_mas : {
    CURRENCY_PATTERN : NumberFormatSymbols_mas ,
    DECIMAL_PATTERN : NumberFormatSymbols_mas ,
    DECIMAL_SEP : NumberFormatSymbols_mas ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mas ,
    EXP_SYMBOL : NumberFormatSymbols_mas ,
    GROUP_SEP : NumberFormatSymbols_mas ,
    INFINITY : NumberFormatSymbols_mas ,
    MINUS_SIGN : NumberFormatSymbols_mas ,
    NAN : NumberFormatSymbols_mas ,
    PERCENT : NumberFormatSymbols_mas ,
    PERCENT_PATTERN : NumberFormatSymbols_mas ,
    PERMILL : NumberFormatSymbols_mas ,
    PLUS_SIGN : NumberFormatSymbols_mas ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mas ,
    ZERO_DIGIT : NumberFormatSymbols_mas ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mas'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mas;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mas' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mas;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mas_KE.
   */
  type NumberFormatSymbols_mas_KE = string ;
  var NumberFormatSymbols_mas_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_mas_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_mas_KE ,
    DECIMAL_SEP : NumberFormatSymbols_mas_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mas_KE ,
    EXP_SYMBOL : NumberFormatSymbols_mas_KE ,
    GROUP_SEP : NumberFormatSymbols_mas_KE ,
    INFINITY : NumberFormatSymbols_mas_KE ,
    MINUS_SIGN : NumberFormatSymbols_mas_KE ,
    NAN : NumberFormatSymbols_mas_KE ,
    PERCENT : NumberFormatSymbols_mas_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_mas_KE ,
    PERMILL : NumberFormatSymbols_mas_KE ,
    PLUS_SIGN : NumberFormatSymbols_mas_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mas_KE ,
    ZERO_DIGIT : NumberFormatSymbols_mas_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mas_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mas_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mas_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mas_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mas_TZ.
   */
  type NumberFormatSymbols_mas_TZ = string ;
  var NumberFormatSymbols_mas_TZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_mas_TZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_mas_TZ ,
    DECIMAL_SEP : NumberFormatSymbols_mas_TZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mas_TZ ,
    EXP_SYMBOL : NumberFormatSymbols_mas_TZ ,
    GROUP_SEP : NumberFormatSymbols_mas_TZ ,
    INFINITY : NumberFormatSymbols_mas_TZ ,
    MINUS_SIGN : NumberFormatSymbols_mas_TZ ,
    NAN : NumberFormatSymbols_mas_TZ ,
    PERCENT : NumberFormatSymbols_mas_TZ ,
    PERCENT_PATTERN : NumberFormatSymbols_mas_TZ ,
    PERMILL : NumberFormatSymbols_mas_TZ ,
    PLUS_SIGN : NumberFormatSymbols_mas_TZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mas_TZ ,
    ZERO_DIGIT : NumberFormatSymbols_mas_TZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mas_TZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mas_TZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mas_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mas_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mer.
   */
  type NumberFormatSymbols_mer = string ;
  var NumberFormatSymbols_mer : {
    CURRENCY_PATTERN : NumberFormatSymbols_mer ,
    DECIMAL_PATTERN : NumberFormatSymbols_mer ,
    DECIMAL_SEP : NumberFormatSymbols_mer ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mer ,
    EXP_SYMBOL : NumberFormatSymbols_mer ,
    GROUP_SEP : NumberFormatSymbols_mer ,
    INFINITY : NumberFormatSymbols_mer ,
    MINUS_SIGN : NumberFormatSymbols_mer ,
    NAN : NumberFormatSymbols_mer ,
    PERCENT : NumberFormatSymbols_mer ,
    PERCENT_PATTERN : NumberFormatSymbols_mer ,
    PERMILL : NumberFormatSymbols_mer ,
    PLUS_SIGN : NumberFormatSymbols_mer ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mer ,
    ZERO_DIGIT : NumberFormatSymbols_mer ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mer'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mer;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mer' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mer_KE.
   */
  type NumberFormatSymbols_mer_KE = string ;
  var NumberFormatSymbols_mer_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_mer_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_mer_KE ,
    DECIMAL_SEP : NumberFormatSymbols_mer_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mer_KE ,
    EXP_SYMBOL : NumberFormatSymbols_mer_KE ,
    GROUP_SEP : NumberFormatSymbols_mer_KE ,
    INFINITY : NumberFormatSymbols_mer_KE ,
    MINUS_SIGN : NumberFormatSymbols_mer_KE ,
    NAN : NumberFormatSymbols_mer_KE ,
    PERCENT : NumberFormatSymbols_mer_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_mer_KE ,
    PERMILL : NumberFormatSymbols_mer_KE ,
    PLUS_SIGN : NumberFormatSymbols_mer_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mer_KE ,
    ZERO_DIGIT : NumberFormatSymbols_mer_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mer_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mer_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mer_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mer_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mfe.
   */
  type NumberFormatSymbols_mfe = string ;
  var NumberFormatSymbols_mfe : {
    CURRENCY_PATTERN : NumberFormatSymbols_mfe ,
    DECIMAL_PATTERN : NumberFormatSymbols_mfe ,
    DECIMAL_SEP : NumberFormatSymbols_mfe ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mfe ,
    EXP_SYMBOL : NumberFormatSymbols_mfe ,
    GROUP_SEP : NumberFormatSymbols_mfe ,
    INFINITY : NumberFormatSymbols_mfe ,
    MINUS_SIGN : NumberFormatSymbols_mfe ,
    NAN : NumberFormatSymbols_mfe ,
    PERCENT : NumberFormatSymbols_mfe ,
    PERCENT_PATTERN : NumberFormatSymbols_mfe ,
    PERMILL : NumberFormatSymbols_mfe ,
    PLUS_SIGN : NumberFormatSymbols_mfe ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mfe ,
    ZERO_DIGIT : NumberFormatSymbols_mfe ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mfe'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mfe;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mfe' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mfe;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mfe_MU.
   */
  type NumberFormatSymbols_mfe_MU = string ;
  var NumberFormatSymbols_mfe_MU : {
    CURRENCY_PATTERN : NumberFormatSymbols_mfe_MU ,
    DECIMAL_PATTERN : NumberFormatSymbols_mfe_MU ,
    DECIMAL_SEP : NumberFormatSymbols_mfe_MU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mfe_MU ,
    EXP_SYMBOL : NumberFormatSymbols_mfe_MU ,
    GROUP_SEP : NumberFormatSymbols_mfe_MU ,
    INFINITY : NumberFormatSymbols_mfe_MU ,
    MINUS_SIGN : NumberFormatSymbols_mfe_MU ,
    NAN : NumberFormatSymbols_mfe_MU ,
    PERCENT : NumberFormatSymbols_mfe_MU ,
    PERCENT_PATTERN : NumberFormatSymbols_mfe_MU ,
    PERMILL : NumberFormatSymbols_mfe_MU ,
    PLUS_SIGN : NumberFormatSymbols_mfe_MU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mfe_MU ,
    ZERO_DIGIT : NumberFormatSymbols_mfe_MU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mfe_MU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mfe_MU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mfe_MU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mfe_MU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mg.
   */
  type NumberFormatSymbols_mg = string ;
  var NumberFormatSymbols_mg : {
    CURRENCY_PATTERN : NumberFormatSymbols_mg ,
    DECIMAL_PATTERN : NumberFormatSymbols_mg ,
    DECIMAL_SEP : NumberFormatSymbols_mg ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mg ,
    EXP_SYMBOL : NumberFormatSymbols_mg ,
    GROUP_SEP : NumberFormatSymbols_mg ,
    INFINITY : NumberFormatSymbols_mg ,
    MINUS_SIGN : NumberFormatSymbols_mg ,
    NAN : NumberFormatSymbols_mg ,
    PERCENT : NumberFormatSymbols_mg ,
    PERCENT_PATTERN : NumberFormatSymbols_mg ,
    PERMILL : NumberFormatSymbols_mg ,
    PLUS_SIGN : NumberFormatSymbols_mg ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mg ,
    ZERO_DIGIT : NumberFormatSymbols_mg ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mg'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mg;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mg_MG.
   */
  type NumberFormatSymbols_mg_MG = string ;
  var NumberFormatSymbols_mg_MG : {
    CURRENCY_PATTERN : NumberFormatSymbols_mg_MG ,
    DECIMAL_PATTERN : NumberFormatSymbols_mg_MG ,
    DECIMAL_SEP : NumberFormatSymbols_mg_MG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mg_MG ,
    EXP_SYMBOL : NumberFormatSymbols_mg_MG ,
    GROUP_SEP : NumberFormatSymbols_mg_MG ,
    INFINITY : NumberFormatSymbols_mg_MG ,
    MINUS_SIGN : NumberFormatSymbols_mg_MG ,
    NAN : NumberFormatSymbols_mg_MG ,
    PERCENT : NumberFormatSymbols_mg_MG ,
    PERCENT_PATTERN : NumberFormatSymbols_mg_MG ,
    PERMILL : NumberFormatSymbols_mg_MG ,
    PLUS_SIGN : NumberFormatSymbols_mg_MG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mg_MG ,
    ZERO_DIGIT : NumberFormatSymbols_mg_MG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mg_MG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mg_MG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mg_MG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mg_MG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mgh.
   */
  type NumberFormatSymbols_mgh = string ;
  var NumberFormatSymbols_mgh : {
    CURRENCY_PATTERN : NumberFormatSymbols_mgh ,
    DECIMAL_PATTERN : NumberFormatSymbols_mgh ,
    DECIMAL_SEP : NumberFormatSymbols_mgh ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mgh ,
    EXP_SYMBOL : NumberFormatSymbols_mgh ,
    GROUP_SEP : NumberFormatSymbols_mgh ,
    INFINITY : NumberFormatSymbols_mgh ,
    MINUS_SIGN : NumberFormatSymbols_mgh ,
    NAN : NumberFormatSymbols_mgh ,
    PERCENT : NumberFormatSymbols_mgh ,
    PERCENT_PATTERN : NumberFormatSymbols_mgh ,
    PERMILL : NumberFormatSymbols_mgh ,
    PLUS_SIGN : NumberFormatSymbols_mgh ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mgh ,
    ZERO_DIGIT : NumberFormatSymbols_mgh ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mgh'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mgh;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mgh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mgh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mgh_MZ.
   */
  type NumberFormatSymbols_mgh_MZ = string ;
  var NumberFormatSymbols_mgh_MZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_mgh_MZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_mgh_MZ ,
    DECIMAL_SEP : NumberFormatSymbols_mgh_MZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mgh_MZ ,
    EXP_SYMBOL : NumberFormatSymbols_mgh_MZ ,
    GROUP_SEP : NumberFormatSymbols_mgh_MZ ,
    INFINITY : NumberFormatSymbols_mgh_MZ ,
    MINUS_SIGN : NumberFormatSymbols_mgh_MZ ,
    NAN : NumberFormatSymbols_mgh_MZ ,
    PERCENT : NumberFormatSymbols_mgh_MZ ,
    PERCENT_PATTERN : NumberFormatSymbols_mgh_MZ ,
    PERMILL : NumberFormatSymbols_mgh_MZ ,
    PLUS_SIGN : NumberFormatSymbols_mgh_MZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mgh_MZ ,
    ZERO_DIGIT : NumberFormatSymbols_mgh_MZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mgh_MZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mgh_MZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mgh_MZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mgh_MZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mgo.
   */
  type NumberFormatSymbols_mgo = string ;
  var NumberFormatSymbols_mgo : {
    CURRENCY_PATTERN : NumberFormatSymbols_mgo ,
    DECIMAL_PATTERN : NumberFormatSymbols_mgo ,
    DECIMAL_SEP : NumberFormatSymbols_mgo ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mgo ,
    EXP_SYMBOL : NumberFormatSymbols_mgo ,
    GROUP_SEP : NumberFormatSymbols_mgo ,
    INFINITY : NumberFormatSymbols_mgo ,
    MINUS_SIGN : NumberFormatSymbols_mgo ,
    NAN : NumberFormatSymbols_mgo ,
    PERCENT : NumberFormatSymbols_mgo ,
    PERCENT_PATTERN : NumberFormatSymbols_mgo ,
    PERMILL : NumberFormatSymbols_mgo ,
    PLUS_SIGN : NumberFormatSymbols_mgo ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mgo ,
    ZERO_DIGIT : NumberFormatSymbols_mgo ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mgo'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mgo;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mgo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mgo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mgo_CM.
   */
  type NumberFormatSymbols_mgo_CM = string ;
  var NumberFormatSymbols_mgo_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_mgo_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_mgo_CM ,
    DECIMAL_SEP : NumberFormatSymbols_mgo_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mgo_CM ,
    EXP_SYMBOL : NumberFormatSymbols_mgo_CM ,
    GROUP_SEP : NumberFormatSymbols_mgo_CM ,
    INFINITY : NumberFormatSymbols_mgo_CM ,
    MINUS_SIGN : NumberFormatSymbols_mgo_CM ,
    NAN : NumberFormatSymbols_mgo_CM ,
    PERCENT : NumberFormatSymbols_mgo_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_mgo_CM ,
    PERMILL : NumberFormatSymbols_mgo_CM ,
    PLUS_SIGN : NumberFormatSymbols_mgo_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mgo_CM ,
    ZERO_DIGIT : NumberFormatSymbols_mgo_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mgo_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mgo_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mgo_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mgo_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mk.
   */
  type NumberFormatSymbols_mk = string ;
  var NumberFormatSymbols_mk : {
    CURRENCY_PATTERN : NumberFormatSymbols_mk ,
    DECIMAL_PATTERN : NumberFormatSymbols_mk ,
    DECIMAL_SEP : NumberFormatSymbols_mk ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mk ,
    EXP_SYMBOL : NumberFormatSymbols_mk ,
    GROUP_SEP : NumberFormatSymbols_mk ,
    INFINITY : NumberFormatSymbols_mk ,
    MINUS_SIGN : NumberFormatSymbols_mk ,
    NAN : NumberFormatSymbols_mk ,
    PERCENT : NumberFormatSymbols_mk ,
    PERCENT_PATTERN : NumberFormatSymbols_mk ,
    PERMILL : NumberFormatSymbols_mk ,
    PLUS_SIGN : NumberFormatSymbols_mk ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mk ,
    ZERO_DIGIT : NumberFormatSymbols_mk ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mk'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mk;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mk_MK.
   */
  type NumberFormatSymbols_mk_MK = string ;
  var NumberFormatSymbols_mk_MK : {
    CURRENCY_PATTERN : NumberFormatSymbols_mk_MK ,
    DECIMAL_PATTERN : NumberFormatSymbols_mk_MK ,
    DECIMAL_SEP : NumberFormatSymbols_mk_MK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mk_MK ,
    EXP_SYMBOL : NumberFormatSymbols_mk_MK ,
    GROUP_SEP : NumberFormatSymbols_mk_MK ,
    INFINITY : NumberFormatSymbols_mk_MK ,
    MINUS_SIGN : NumberFormatSymbols_mk_MK ,
    NAN : NumberFormatSymbols_mk_MK ,
    PERCENT : NumberFormatSymbols_mk_MK ,
    PERCENT_PATTERN : NumberFormatSymbols_mk_MK ,
    PERMILL : NumberFormatSymbols_mk_MK ,
    PLUS_SIGN : NumberFormatSymbols_mk_MK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mk_MK ,
    ZERO_DIGIT : NumberFormatSymbols_mk_MK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mk_MK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mk_MK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mk_MK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mk_MK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ml.
   */
  type NumberFormatSymbols_ml = string ;
  var NumberFormatSymbols_ml : {
    CURRENCY_PATTERN : NumberFormatSymbols_ml ,
    DECIMAL_PATTERN : NumberFormatSymbols_ml ,
    DECIMAL_SEP : NumberFormatSymbols_ml ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ml ,
    EXP_SYMBOL : NumberFormatSymbols_ml ,
    GROUP_SEP : NumberFormatSymbols_ml ,
    INFINITY : NumberFormatSymbols_ml ,
    MINUS_SIGN : NumberFormatSymbols_ml ,
    NAN : NumberFormatSymbols_ml ,
    PERCENT : NumberFormatSymbols_ml ,
    PERCENT_PATTERN : NumberFormatSymbols_ml ,
    PERMILL : NumberFormatSymbols_ml ,
    PLUS_SIGN : NumberFormatSymbols_ml ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ml ,
    ZERO_DIGIT : NumberFormatSymbols_ml ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ml'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ml;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ml' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ml;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ml_IN.
   */
  type NumberFormatSymbols_ml_IN = string ;
  var NumberFormatSymbols_ml_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_ml_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_ml_IN ,
    DECIMAL_SEP : NumberFormatSymbols_ml_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ml_IN ,
    EXP_SYMBOL : NumberFormatSymbols_ml_IN ,
    GROUP_SEP : NumberFormatSymbols_ml_IN ,
    INFINITY : NumberFormatSymbols_ml_IN ,
    MINUS_SIGN : NumberFormatSymbols_ml_IN ,
    NAN : NumberFormatSymbols_ml_IN ,
    PERCENT : NumberFormatSymbols_ml_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_ml_IN ,
    PERMILL : NumberFormatSymbols_ml_IN ,
    PLUS_SIGN : NumberFormatSymbols_ml_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ml_IN ,
    ZERO_DIGIT : NumberFormatSymbols_ml_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ml_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ml_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ml_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ml_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mn.
   */
  type NumberFormatSymbols_mn = string ;
  var NumberFormatSymbols_mn : {
    CURRENCY_PATTERN : NumberFormatSymbols_mn ,
    DECIMAL_PATTERN : NumberFormatSymbols_mn ,
    DECIMAL_SEP : NumberFormatSymbols_mn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mn ,
    EXP_SYMBOL : NumberFormatSymbols_mn ,
    GROUP_SEP : NumberFormatSymbols_mn ,
    INFINITY : NumberFormatSymbols_mn ,
    MINUS_SIGN : NumberFormatSymbols_mn ,
    NAN : NumberFormatSymbols_mn ,
    PERCENT : NumberFormatSymbols_mn ,
    PERCENT_PATTERN : NumberFormatSymbols_mn ,
    PERMILL : NumberFormatSymbols_mn ,
    PLUS_SIGN : NumberFormatSymbols_mn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mn ,
    ZERO_DIGIT : NumberFormatSymbols_mn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mn_MN.
   */
  type NumberFormatSymbols_mn_MN = string ;
  var NumberFormatSymbols_mn_MN : {
    CURRENCY_PATTERN : NumberFormatSymbols_mn_MN ,
    DECIMAL_PATTERN : NumberFormatSymbols_mn_MN ,
    DECIMAL_SEP : NumberFormatSymbols_mn_MN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mn_MN ,
    EXP_SYMBOL : NumberFormatSymbols_mn_MN ,
    GROUP_SEP : NumberFormatSymbols_mn_MN ,
    INFINITY : NumberFormatSymbols_mn_MN ,
    MINUS_SIGN : NumberFormatSymbols_mn_MN ,
    NAN : NumberFormatSymbols_mn_MN ,
    PERCENT : NumberFormatSymbols_mn_MN ,
    PERCENT_PATTERN : NumberFormatSymbols_mn_MN ,
    PERMILL : NumberFormatSymbols_mn_MN ,
    PLUS_SIGN : NumberFormatSymbols_mn_MN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mn_MN ,
    ZERO_DIGIT : NumberFormatSymbols_mn_MN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mn_MN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mn_MN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mn_MN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mn_MN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mr.
   */
  type NumberFormatSymbols_mr = string ;
  var NumberFormatSymbols_mr : {
    CURRENCY_PATTERN : NumberFormatSymbols_mr ,
    DECIMAL_PATTERN : NumberFormatSymbols_mr ,
    DECIMAL_SEP : NumberFormatSymbols_mr ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mr ,
    EXP_SYMBOL : NumberFormatSymbols_mr ,
    GROUP_SEP : NumberFormatSymbols_mr ,
    INFINITY : NumberFormatSymbols_mr ,
    MINUS_SIGN : NumberFormatSymbols_mr ,
    NAN : NumberFormatSymbols_mr ,
    PERCENT : NumberFormatSymbols_mr ,
    PERCENT_PATTERN : NumberFormatSymbols_mr ,
    PERMILL : NumberFormatSymbols_mr ,
    PLUS_SIGN : NumberFormatSymbols_mr ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mr ,
    ZERO_DIGIT : NumberFormatSymbols_mr ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mr'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mr;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mr_IN.
   */
  type NumberFormatSymbols_mr_IN = string ;
  var NumberFormatSymbols_mr_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_mr_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_mr_IN ,
    DECIMAL_SEP : NumberFormatSymbols_mr_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mr_IN ,
    EXP_SYMBOL : NumberFormatSymbols_mr_IN ,
    GROUP_SEP : NumberFormatSymbols_mr_IN ,
    INFINITY : NumberFormatSymbols_mr_IN ,
    MINUS_SIGN : NumberFormatSymbols_mr_IN ,
    NAN : NumberFormatSymbols_mr_IN ,
    PERCENT : NumberFormatSymbols_mr_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_mr_IN ,
    PERMILL : NumberFormatSymbols_mr_IN ,
    PLUS_SIGN : NumberFormatSymbols_mr_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mr_IN ,
    ZERO_DIGIT : NumberFormatSymbols_mr_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mr_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mr_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mr_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mr_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ms.
   */
  type NumberFormatSymbols_ms = string ;
  var NumberFormatSymbols_ms : {
    CURRENCY_PATTERN : NumberFormatSymbols_ms ,
    DECIMAL_PATTERN : NumberFormatSymbols_ms ,
    DECIMAL_SEP : NumberFormatSymbols_ms ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ms ,
    EXP_SYMBOL : NumberFormatSymbols_ms ,
    GROUP_SEP : NumberFormatSymbols_ms ,
    INFINITY : NumberFormatSymbols_ms ,
    MINUS_SIGN : NumberFormatSymbols_ms ,
    NAN : NumberFormatSymbols_ms ,
    PERCENT : NumberFormatSymbols_ms ,
    PERCENT_PATTERN : NumberFormatSymbols_ms ,
    PERMILL : NumberFormatSymbols_ms ,
    PLUS_SIGN : NumberFormatSymbols_ms ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ms ,
    ZERO_DIGIT : NumberFormatSymbols_ms ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ms'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ms;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ms' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ms;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ms_BN.
   */
  type NumberFormatSymbols_ms_BN = string ;
  var NumberFormatSymbols_ms_BN : {
    CURRENCY_PATTERN : NumberFormatSymbols_ms_BN ,
    DECIMAL_PATTERN : NumberFormatSymbols_ms_BN ,
    DECIMAL_SEP : NumberFormatSymbols_ms_BN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ms_BN ,
    EXP_SYMBOL : NumberFormatSymbols_ms_BN ,
    GROUP_SEP : NumberFormatSymbols_ms_BN ,
    INFINITY : NumberFormatSymbols_ms_BN ,
    MINUS_SIGN : NumberFormatSymbols_ms_BN ,
    NAN : NumberFormatSymbols_ms_BN ,
    PERCENT : NumberFormatSymbols_ms_BN ,
    PERCENT_PATTERN : NumberFormatSymbols_ms_BN ,
    PERMILL : NumberFormatSymbols_ms_BN ,
    PLUS_SIGN : NumberFormatSymbols_ms_BN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ms_BN ,
    ZERO_DIGIT : NumberFormatSymbols_ms_BN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ms_BN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ms_BN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ms_BN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ms_BN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ms_MY.
   */
  type NumberFormatSymbols_ms_MY = string ;
  var NumberFormatSymbols_ms_MY : {
    CURRENCY_PATTERN : NumberFormatSymbols_ms_MY ,
    DECIMAL_PATTERN : NumberFormatSymbols_ms_MY ,
    DECIMAL_SEP : NumberFormatSymbols_ms_MY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ms_MY ,
    EXP_SYMBOL : NumberFormatSymbols_ms_MY ,
    GROUP_SEP : NumberFormatSymbols_ms_MY ,
    INFINITY : NumberFormatSymbols_ms_MY ,
    MINUS_SIGN : NumberFormatSymbols_ms_MY ,
    NAN : NumberFormatSymbols_ms_MY ,
    PERCENT : NumberFormatSymbols_ms_MY ,
    PERCENT_PATTERN : NumberFormatSymbols_ms_MY ,
    PERMILL : NumberFormatSymbols_ms_MY ,
    PLUS_SIGN : NumberFormatSymbols_ms_MY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ms_MY ,
    ZERO_DIGIT : NumberFormatSymbols_ms_MY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ms_MY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ms_MY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ms_MY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ms_MY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ms_SG.
   */
  type NumberFormatSymbols_ms_SG = string ;
  var NumberFormatSymbols_ms_SG : {
    CURRENCY_PATTERN : NumberFormatSymbols_ms_SG ,
    DECIMAL_PATTERN : NumberFormatSymbols_ms_SG ,
    DECIMAL_SEP : NumberFormatSymbols_ms_SG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ms_SG ,
    EXP_SYMBOL : NumberFormatSymbols_ms_SG ,
    GROUP_SEP : NumberFormatSymbols_ms_SG ,
    INFINITY : NumberFormatSymbols_ms_SG ,
    MINUS_SIGN : NumberFormatSymbols_ms_SG ,
    NAN : NumberFormatSymbols_ms_SG ,
    PERCENT : NumberFormatSymbols_ms_SG ,
    PERCENT_PATTERN : NumberFormatSymbols_ms_SG ,
    PERMILL : NumberFormatSymbols_ms_SG ,
    PLUS_SIGN : NumberFormatSymbols_ms_SG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ms_SG ,
    ZERO_DIGIT : NumberFormatSymbols_ms_SG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ms_SG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ms_SG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ms_SG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ms_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mt.
   */
  type NumberFormatSymbols_mt = string ;
  var NumberFormatSymbols_mt : {
    CURRENCY_PATTERN : NumberFormatSymbols_mt ,
    DECIMAL_PATTERN : NumberFormatSymbols_mt ,
    DECIMAL_SEP : NumberFormatSymbols_mt ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mt ,
    EXP_SYMBOL : NumberFormatSymbols_mt ,
    GROUP_SEP : NumberFormatSymbols_mt ,
    INFINITY : NumberFormatSymbols_mt ,
    MINUS_SIGN : NumberFormatSymbols_mt ,
    NAN : NumberFormatSymbols_mt ,
    PERCENT : NumberFormatSymbols_mt ,
    PERCENT_PATTERN : NumberFormatSymbols_mt ,
    PERMILL : NumberFormatSymbols_mt ,
    PLUS_SIGN : NumberFormatSymbols_mt ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mt ,
    ZERO_DIGIT : NumberFormatSymbols_mt ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mt'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mt;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mt_MT.
   */
  type NumberFormatSymbols_mt_MT = string ;
  var NumberFormatSymbols_mt_MT : {
    CURRENCY_PATTERN : NumberFormatSymbols_mt_MT ,
    DECIMAL_PATTERN : NumberFormatSymbols_mt_MT ,
    DECIMAL_SEP : NumberFormatSymbols_mt_MT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mt_MT ,
    EXP_SYMBOL : NumberFormatSymbols_mt_MT ,
    GROUP_SEP : NumberFormatSymbols_mt_MT ,
    INFINITY : NumberFormatSymbols_mt_MT ,
    MINUS_SIGN : NumberFormatSymbols_mt_MT ,
    NAN : NumberFormatSymbols_mt_MT ,
    PERCENT : NumberFormatSymbols_mt_MT ,
    PERCENT_PATTERN : NumberFormatSymbols_mt_MT ,
    PERMILL : NumberFormatSymbols_mt_MT ,
    PLUS_SIGN : NumberFormatSymbols_mt_MT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mt_MT ,
    ZERO_DIGIT : NumberFormatSymbols_mt_MT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mt_MT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mt_MT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mt_MT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mt_MT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mua.
   */
  type NumberFormatSymbols_mua = string ;
  var NumberFormatSymbols_mua : {
    CURRENCY_PATTERN : NumberFormatSymbols_mua ,
    DECIMAL_PATTERN : NumberFormatSymbols_mua ,
    DECIMAL_SEP : NumberFormatSymbols_mua ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mua ,
    EXP_SYMBOL : NumberFormatSymbols_mua ,
    GROUP_SEP : NumberFormatSymbols_mua ,
    INFINITY : NumberFormatSymbols_mua ,
    MINUS_SIGN : NumberFormatSymbols_mua ,
    NAN : NumberFormatSymbols_mua ,
    PERCENT : NumberFormatSymbols_mua ,
    PERCENT_PATTERN : NumberFormatSymbols_mua ,
    PERMILL : NumberFormatSymbols_mua ,
    PLUS_SIGN : NumberFormatSymbols_mua ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mua ,
    ZERO_DIGIT : NumberFormatSymbols_mua ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mua'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mua;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mua' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mua;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mua_CM.
   */
  type NumberFormatSymbols_mua_CM = string ;
  var NumberFormatSymbols_mua_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_mua_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_mua_CM ,
    DECIMAL_SEP : NumberFormatSymbols_mua_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mua_CM ,
    EXP_SYMBOL : NumberFormatSymbols_mua_CM ,
    GROUP_SEP : NumberFormatSymbols_mua_CM ,
    INFINITY : NumberFormatSymbols_mua_CM ,
    MINUS_SIGN : NumberFormatSymbols_mua_CM ,
    NAN : NumberFormatSymbols_mua_CM ,
    PERCENT : NumberFormatSymbols_mua_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_mua_CM ,
    PERMILL : NumberFormatSymbols_mua_CM ,
    PLUS_SIGN : NumberFormatSymbols_mua_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mua_CM ,
    ZERO_DIGIT : NumberFormatSymbols_mua_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mua_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mua_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mua_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mua_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale my.
   */
  type NumberFormatSymbols_my = string ;
  var NumberFormatSymbols_my : {
    CURRENCY_PATTERN : NumberFormatSymbols_my ,
    DECIMAL_PATTERN : NumberFormatSymbols_my ,
    DECIMAL_SEP : NumberFormatSymbols_my ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_my ,
    EXP_SYMBOL : NumberFormatSymbols_my ,
    GROUP_SEP : NumberFormatSymbols_my ,
    INFINITY : NumberFormatSymbols_my ,
    MINUS_SIGN : NumberFormatSymbols_my ,
    NAN : NumberFormatSymbols_my ,
    PERCENT : NumberFormatSymbols_my ,
    PERCENT_PATTERN : NumberFormatSymbols_my ,
    PERMILL : NumberFormatSymbols_my ,
    PLUS_SIGN : NumberFormatSymbols_my ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_my ,
    ZERO_DIGIT : NumberFormatSymbols_my ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_my'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_my;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_my' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_my;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale my_MM.
   */
  type NumberFormatSymbols_my_MM = string ;
  var NumberFormatSymbols_my_MM : {
    CURRENCY_PATTERN : NumberFormatSymbols_my_MM ,
    DECIMAL_PATTERN : NumberFormatSymbols_my_MM ,
    DECIMAL_SEP : NumberFormatSymbols_my_MM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_my_MM ,
    EXP_SYMBOL : NumberFormatSymbols_my_MM ,
    GROUP_SEP : NumberFormatSymbols_my_MM ,
    INFINITY : NumberFormatSymbols_my_MM ,
    MINUS_SIGN : NumberFormatSymbols_my_MM ,
    NAN : NumberFormatSymbols_my_MM ,
    PERCENT : NumberFormatSymbols_my_MM ,
    PERCENT_PATTERN : NumberFormatSymbols_my_MM ,
    PERMILL : NumberFormatSymbols_my_MM ,
    PLUS_SIGN : NumberFormatSymbols_my_MM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_my_MM ,
    ZERO_DIGIT : NumberFormatSymbols_my_MM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_my_MM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_my_MM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_my_MM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_my_MM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mzn.
   */
  type NumberFormatSymbols_mzn = string ;
  var NumberFormatSymbols_mzn : {
    CURRENCY_PATTERN : NumberFormatSymbols_mzn ,
    DECIMAL_PATTERN : NumberFormatSymbols_mzn ,
    DECIMAL_SEP : NumberFormatSymbols_mzn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mzn ,
    EXP_SYMBOL : NumberFormatSymbols_mzn ,
    GROUP_SEP : NumberFormatSymbols_mzn ,
    INFINITY : NumberFormatSymbols_mzn ,
    MINUS_SIGN : NumberFormatSymbols_mzn ,
    NAN : NumberFormatSymbols_mzn ,
    PERCENT : NumberFormatSymbols_mzn ,
    PERCENT_PATTERN : NumberFormatSymbols_mzn ,
    PERMILL : NumberFormatSymbols_mzn ,
    PLUS_SIGN : NumberFormatSymbols_mzn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mzn ,
    ZERO_DIGIT : NumberFormatSymbols_mzn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mzn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mzn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mzn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mzn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale mzn_IR.
   */
  type NumberFormatSymbols_mzn_IR = string ;
  var NumberFormatSymbols_mzn_IR : {
    CURRENCY_PATTERN : NumberFormatSymbols_mzn_IR ,
    DECIMAL_PATTERN : NumberFormatSymbols_mzn_IR ,
    DECIMAL_SEP : NumberFormatSymbols_mzn_IR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_mzn_IR ,
    EXP_SYMBOL : NumberFormatSymbols_mzn_IR ,
    GROUP_SEP : NumberFormatSymbols_mzn_IR ,
    INFINITY : NumberFormatSymbols_mzn_IR ,
    MINUS_SIGN : NumberFormatSymbols_mzn_IR ,
    NAN : NumberFormatSymbols_mzn_IR ,
    PERCENT : NumberFormatSymbols_mzn_IR ,
    PERCENT_PATTERN : NumberFormatSymbols_mzn_IR ,
    PERMILL : NumberFormatSymbols_mzn_IR ,
    PLUS_SIGN : NumberFormatSymbols_mzn_IR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_mzn_IR ,
    ZERO_DIGIT : NumberFormatSymbols_mzn_IR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_mzn_IR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mzn_IR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_mzn_IR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_mzn_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale naq.
   */
  type NumberFormatSymbols_naq = string ;
  var NumberFormatSymbols_naq : {
    CURRENCY_PATTERN : NumberFormatSymbols_naq ,
    DECIMAL_PATTERN : NumberFormatSymbols_naq ,
    DECIMAL_SEP : NumberFormatSymbols_naq ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_naq ,
    EXP_SYMBOL : NumberFormatSymbols_naq ,
    GROUP_SEP : NumberFormatSymbols_naq ,
    INFINITY : NumberFormatSymbols_naq ,
    MINUS_SIGN : NumberFormatSymbols_naq ,
    NAN : NumberFormatSymbols_naq ,
    PERCENT : NumberFormatSymbols_naq ,
    PERCENT_PATTERN : NumberFormatSymbols_naq ,
    PERMILL : NumberFormatSymbols_naq ,
    PLUS_SIGN : NumberFormatSymbols_naq ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_naq ,
    ZERO_DIGIT : NumberFormatSymbols_naq ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_naq'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_naq;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_naq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_naq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale naq_NA.
   */
  type NumberFormatSymbols_naq_NA = string ;
  var NumberFormatSymbols_naq_NA : {
    CURRENCY_PATTERN : NumberFormatSymbols_naq_NA ,
    DECIMAL_PATTERN : NumberFormatSymbols_naq_NA ,
    DECIMAL_SEP : NumberFormatSymbols_naq_NA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_naq_NA ,
    EXP_SYMBOL : NumberFormatSymbols_naq_NA ,
    GROUP_SEP : NumberFormatSymbols_naq_NA ,
    INFINITY : NumberFormatSymbols_naq_NA ,
    MINUS_SIGN : NumberFormatSymbols_naq_NA ,
    NAN : NumberFormatSymbols_naq_NA ,
    PERCENT : NumberFormatSymbols_naq_NA ,
    PERCENT_PATTERN : NumberFormatSymbols_naq_NA ,
    PERMILL : NumberFormatSymbols_naq_NA ,
    PLUS_SIGN : NumberFormatSymbols_naq_NA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_naq_NA ,
    ZERO_DIGIT : NumberFormatSymbols_naq_NA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_naq_NA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_naq_NA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_naq_NA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_naq_NA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nb.
   */
  type NumberFormatSymbols_nb = string ;
  var NumberFormatSymbols_nb : {
    CURRENCY_PATTERN : NumberFormatSymbols_nb ,
    DECIMAL_PATTERN : NumberFormatSymbols_nb ,
    DECIMAL_SEP : NumberFormatSymbols_nb ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nb ,
    EXP_SYMBOL : NumberFormatSymbols_nb ,
    GROUP_SEP : NumberFormatSymbols_nb ,
    INFINITY : NumberFormatSymbols_nb ,
    MINUS_SIGN : NumberFormatSymbols_nb ,
    NAN : NumberFormatSymbols_nb ,
    PERCENT : NumberFormatSymbols_nb ,
    PERCENT_PATTERN : NumberFormatSymbols_nb ,
    PERMILL : NumberFormatSymbols_nb ,
    PLUS_SIGN : NumberFormatSymbols_nb ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nb ,
    ZERO_DIGIT : NumberFormatSymbols_nb ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nb'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nb;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nb' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nb_NO.
   */
  type NumberFormatSymbols_nb_NO = string ;
  var NumberFormatSymbols_nb_NO : {
    CURRENCY_PATTERN : NumberFormatSymbols_nb_NO ,
    DECIMAL_PATTERN : NumberFormatSymbols_nb_NO ,
    DECIMAL_SEP : NumberFormatSymbols_nb_NO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nb_NO ,
    EXP_SYMBOL : NumberFormatSymbols_nb_NO ,
    GROUP_SEP : NumberFormatSymbols_nb_NO ,
    INFINITY : NumberFormatSymbols_nb_NO ,
    MINUS_SIGN : NumberFormatSymbols_nb_NO ,
    NAN : NumberFormatSymbols_nb_NO ,
    PERCENT : NumberFormatSymbols_nb_NO ,
    PERCENT_PATTERN : NumberFormatSymbols_nb_NO ,
    PERMILL : NumberFormatSymbols_nb_NO ,
    PLUS_SIGN : NumberFormatSymbols_nb_NO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nb_NO ,
    ZERO_DIGIT : NumberFormatSymbols_nb_NO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nb_NO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nb_NO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nb_NO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nb_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nb_SJ.
   */
  type NumberFormatSymbols_nb_SJ = string ;
  var NumberFormatSymbols_nb_SJ : {
    CURRENCY_PATTERN : NumberFormatSymbols_nb_SJ ,
    DECIMAL_PATTERN : NumberFormatSymbols_nb_SJ ,
    DECIMAL_SEP : NumberFormatSymbols_nb_SJ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nb_SJ ,
    EXP_SYMBOL : NumberFormatSymbols_nb_SJ ,
    GROUP_SEP : NumberFormatSymbols_nb_SJ ,
    INFINITY : NumberFormatSymbols_nb_SJ ,
    MINUS_SIGN : NumberFormatSymbols_nb_SJ ,
    NAN : NumberFormatSymbols_nb_SJ ,
    PERCENT : NumberFormatSymbols_nb_SJ ,
    PERCENT_PATTERN : NumberFormatSymbols_nb_SJ ,
    PERMILL : NumberFormatSymbols_nb_SJ ,
    PLUS_SIGN : NumberFormatSymbols_nb_SJ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nb_SJ ,
    ZERO_DIGIT : NumberFormatSymbols_nb_SJ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nb_SJ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nb_SJ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nb_SJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nb_SJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nd.
   */
  type NumberFormatSymbols_nd = string ;
  var NumberFormatSymbols_nd : {
    CURRENCY_PATTERN : NumberFormatSymbols_nd ,
    DECIMAL_PATTERN : NumberFormatSymbols_nd ,
    DECIMAL_SEP : NumberFormatSymbols_nd ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nd ,
    EXP_SYMBOL : NumberFormatSymbols_nd ,
    GROUP_SEP : NumberFormatSymbols_nd ,
    INFINITY : NumberFormatSymbols_nd ,
    MINUS_SIGN : NumberFormatSymbols_nd ,
    NAN : NumberFormatSymbols_nd ,
    PERCENT : NumberFormatSymbols_nd ,
    PERCENT_PATTERN : NumberFormatSymbols_nd ,
    PERMILL : NumberFormatSymbols_nd ,
    PLUS_SIGN : NumberFormatSymbols_nd ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nd ,
    ZERO_DIGIT : NumberFormatSymbols_nd ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nd'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nd;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nd' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nd;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nd_ZW.
   */
  type NumberFormatSymbols_nd_ZW = string ;
  var NumberFormatSymbols_nd_ZW : {
    CURRENCY_PATTERN : NumberFormatSymbols_nd_ZW ,
    DECIMAL_PATTERN : NumberFormatSymbols_nd_ZW ,
    DECIMAL_SEP : NumberFormatSymbols_nd_ZW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nd_ZW ,
    EXP_SYMBOL : NumberFormatSymbols_nd_ZW ,
    GROUP_SEP : NumberFormatSymbols_nd_ZW ,
    INFINITY : NumberFormatSymbols_nd_ZW ,
    MINUS_SIGN : NumberFormatSymbols_nd_ZW ,
    NAN : NumberFormatSymbols_nd_ZW ,
    PERCENT : NumberFormatSymbols_nd_ZW ,
    PERCENT_PATTERN : NumberFormatSymbols_nd_ZW ,
    PERMILL : NumberFormatSymbols_nd_ZW ,
    PLUS_SIGN : NumberFormatSymbols_nd_ZW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nd_ZW ,
    ZERO_DIGIT : NumberFormatSymbols_nd_ZW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nd_ZW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nd_ZW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nd_ZW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nd_ZW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ne.
   */
  type NumberFormatSymbols_ne = string ;
  var NumberFormatSymbols_ne : {
    CURRENCY_PATTERN : NumberFormatSymbols_ne ,
    DECIMAL_PATTERN : NumberFormatSymbols_ne ,
    DECIMAL_SEP : NumberFormatSymbols_ne ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ne ,
    EXP_SYMBOL : NumberFormatSymbols_ne ,
    GROUP_SEP : NumberFormatSymbols_ne ,
    INFINITY : NumberFormatSymbols_ne ,
    MINUS_SIGN : NumberFormatSymbols_ne ,
    NAN : NumberFormatSymbols_ne ,
    PERCENT : NumberFormatSymbols_ne ,
    PERCENT_PATTERN : NumberFormatSymbols_ne ,
    PERMILL : NumberFormatSymbols_ne ,
    PLUS_SIGN : NumberFormatSymbols_ne ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ne ,
    ZERO_DIGIT : NumberFormatSymbols_ne ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ne'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ne;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ne' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ne;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ne_IN.
   */
  type NumberFormatSymbols_ne_IN = string ;
  var NumberFormatSymbols_ne_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_ne_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_ne_IN ,
    DECIMAL_SEP : NumberFormatSymbols_ne_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ne_IN ,
    EXP_SYMBOL : NumberFormatSymbols_ne_IN ,
    GROUP_SEP : NumberFormatSymbols_ne_IN ,
    INFINITY : NumberFormatSymbols_ne_IN ,
    MINUS_SIGN : NumberFormatSymbols_ne_IN ,
    NAN : NumberFormatSymbols_ne_IN ,
    PERCENT : NumberFormatSymbols_ne_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_ne_IN ,
    PERMILL : NumberFormatSymbols_ne_IN ,
    PLUS_SIGN : NumberFormatSymbols_ne_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ne_IN ,
    ZERO_DIGIT : NumberFormatSymbols_ne_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ne_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ne_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ne_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ne_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ne_NP.
   */
  type NumberFormatSymbols_ne_NP = string ;
  var NumberFormatSymbols_ne_NP : {
    CURRENCY_PATTERN : NumberFormatSymbols_ne_NP ,
    DECIMAL_PATTERN : NumberFormatSymbols_ne_NP ,
    DECIMAL_SEP : NumberFormatSymbols_ne_NP ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ne_NP ,
    EXP_SYMBOL : NumberFormatSymbols_ne_NP ,
    GROUP_SEP : NumberFormatSymbols_ne_NP ,
    INFINITY : NumberFormatSymbols_ne_NP ,
    MINUS_SIGN : NumberFormatSymbols_ne_NP ,
    NAN : NumberFormatSymbols_ne_NP ,
    PERCENT : NumberFormatSymbols_ne_NP ,
    PERCENT_PATTERN : NumberFormatSymbols_ne_NP ,
    PERMILL : NumberFormatSymbols_ne_NP ,
    PLUS_SIGN : NumberFormatSymbols_ne_NP ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ne_NP ,
    ZERO_DIGIT : NumberFormatSymbols_ne_NP ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ne_NP'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ne_NP;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ne_NP' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ne_NP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nl.
   */
  type NumberFormatSymbols_nl = string ;
  var NumberFormatSymbols_nl : {
    CURRENCY_PATTERN : NumberFormatSymbols_nl ,
    DECIMAL_PATTERN : NumberFormatSymbols_nl ,
    DECIMAL_SEP : NumberFormatSymbols_nl ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nl ,
    EXP_SYMBOL : NumberFormatSymbols_nl ,
    GROUP_SEP : NumberFormatSymbols_nl ,
    INFINITY : NumberFormatSymbols_nl ,
    MINUS_SIGN : NumberFormatSymbols_nl ,
    NAN : NumberFormatSymbols_nl ,
    PERCENT : NumberFormatSymbols_nl ,
    PERCENT_PATTERN : NumberFormatSymbols_nl ,
    PERMILL : NumberFormatSymbols_nl ,
    PLUS_SIGN : NumberFormatSymbols_nl ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nl ,
    ZERO_DIGIT : NumberFormatSymbols_nl ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nl'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nl_AW.
   */
  type NumberFormatSymbols_nl_AW = string ;
  var NumberFormatSymbols_nl_AW : {
    CURRENCY_PATTERN : NumberFormatSymbols_nl_AW ,
    DECIMAL_PATTERN : NumberFormatSymbols_nl_AW ,
    DECIMAL_SEP : NumberFormatSymbols_nl_AW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nl_AW ,
    EXP_SYMBOL : NumberFormatSymbols_nl_AW ,
    GROUP_SEP : NumberFormatSymbols_nl_AW ,
    INFINITY : NumberFormatSymbols_nl_AW ,
    MINUS_SIGN : NumberFormatSymbols_nl_AW ,
    NAN : NumberFormatSymbols_nl_AW ,
    PERCENT : NumberFormatSymbols_nl_AW ,
    PERCENT_PATTERN : NumberFormatSymbols_nl_AW ,
    PERMILL : NumberFormatSymbols_nl_AW ,
    PLUS_SIGN : NumberFormatSymbols_nl_AW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nl_AW ,
    ZERO_DIGIT : NumberFormatSymbols_nl_AW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nl_AW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_AW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nl_AW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_AW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nl_BE.
   */
  type NumberFormatSymbols_nl_BE = string ;
  var NumberFormatSymbols_nl_BE : {
    CURRENCY_PATTERN : NumberFormatSymbols_nl_BE ,
    DECIMAL_PATTERN : NumberFormatSymbols_nl_BE ,
    DECIMAL_SEP : NumberFormatSymbols_nl_BE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nl_BE ,
    EXP_SYMBOL : NumberFormatSymbols_nl_BE ,
    GROUP_SEP : NumberFormatSymbols_nl_BE ,
    INFINITY : NumberFormatSymbols_nl_BE ,
    MINUS_SIGN : NumberFormatSymbols_nl_BE ,
    NAN : NumberFormatSymbols_nl_BE ,
    PERCENT : NumberFormatSymbols_nl_BE ,
    PERCENT_PATTERN : NumberFormatSymbols_nl_BE ,
    PERMILL : NumberFormatSymbols_nl_BE ,
    PLUS_SIGN : NumberFormatSymbols_nl_BE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nl_BE ,
    ZERO_DIGIT : NumberFormatSymbols_nl_BE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nl_BE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_BE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nl_BE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nl_BQ.
   */
  type NumberFormatSymbols_nl_BQ = string ;
  var NumberFormatSymbols_nl_BQ : {
    CURRENCY_PATTERN : NumberFormatSymbols_nl_BQ ,
    DECIMAL_PATTERN : NumberFormatSymbols_nl_BQ ,
    DECIMAL_SEP : NumberFormatSymbols_nl_BQ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nl_BQ ,
    EXP_SYMBOL : NumberFormatSymbols_nl_BQ ,
    GROUP_SEP : NumberFormatSymbols_nl_BQ ,
    INFINITY : NumberFormatSymbols_nl_BQ ,
    MINUS_SIGN : NumberFormatSymbols_nl_BQ ,
    NAN : NumberFormatSymbols_nl_BQ ,
    PERCENT : NumberFormatSymbols_nl_BQ ,
    PERCENT_PATTERN : NumberFormatSymbols_nl_BQ ,
    PERMILL : NumberFormatSymbols_nl_BQ ,
    PLUS_SIGN : NumberFormatSymbols_nl_BQ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nl_BQ ,
    ZERO_DIGIT : NumberFormatSymbols_nl_BQ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nl_BQ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_BQ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nl_BQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_BQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nl_CW.
   */
  type NumberFormatSymbols_nl_CW = string ;
  var NumberFormatSymbols_nl_CW : {
    CURRENCY_PATTERN : NumberFormatSymbols_nl_CW ,
    DECIMAL_PATTERN : NumberFormatSymbols_nl_CW ,
    DECIMAL_SEP : NumberFormatSymbols_nl_CW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nl_CW ,
    EXP_SYMBOL : NumberFormatSymbols_nl_CW ,
    GROUP_SEP : NumberFormatSymbols_nl_CW ,
    INFINITY : NumberFormatSymbols_nl_CW ,
    MINUS_SIGN : NumberFormatSymbols_nl_CW ,
    NAN : NumberFormatSymbols_nl_CW ,
    PERCENT : NumberFormatSymbols_nl_CW ,
    PERCENT_PATTERN : NumberFormatSymbols_nl_CW ,
    PERMILL : NumberFormatSymbols_nl_CW ,
    PLUS_SIGN : NumberFormatSymbols_nl_CW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nl_CW ,
    ZERO_DIGIT : NumberFormatSymbols_nl_CW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nl_CW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_CW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nl_CW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_CW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nl_NL.
   */
  type NumberFormatSymbols_nl_NL = string ;
  var NumberFormatSymbols_nl_NL : {
    CURRENCY_PATTERN : NumberFormatSymbols_nl_NL ,
    DECIMAL_PATTERN : NumberFormatSymbols_nl_NL ,
    DECIMAL_SEP : NumberFormatSymbols_nl_NL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nl_NL ,
    EXP_SYMBOL : NumberFormatSymbols_nl_NL ,
    GROUP_SEP : NumberFormatSymbols_nl_NL ,
    INFINITY : NumberFormatSymbols_nl_NL ,
    MINUS_SIGN : NumberFormatSymbols_nl_NL ,
    NAN : NumberFormatSymbols_nl_NL ,
    PERCENT : NumberFormatSymbols_nl_NL ,
    PERCENT_PATTERN : NumberFormatSymbols_nl_NL ,
    PERMILL : NumberFormatSymbols_nl_NL ,
    PLUS_SIGN : NumberFormatSymbols_nl_NL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nl_NL ,
    ZERO_DIGIT : NumberFormatSymbols_nl_NL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nl_NL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_NL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nl_NL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_NL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nl_SR.
   */
  type NumberFormatSymbols_nl_SR = string ;
  var NumberFormatSymbols_nl_SR : {
    CURRENCY_PATTERN : NumberFormatSymbols_nl_SR ,
    DECIMAL_PATTERN : NumberFormatSymbols_nl_SR ,
    DECIMAL_SEP : NumberFormatSymbols_nl_SR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nl_SR ,
    EXP_SYMBOL : NumberFormatSymbols_nl_SR ,
    GROUP_SEP : NumberFormatSymbols_nl_SR ,
    INFINITY : NumberFormatSymbols_nl_SR ,
    MINUS_SIGN : NumberFormatSymbols_nl_SR ,
    NAN : NumberFormatSymbols_nl_SR ,
    PERCENT : NumberFormatSymbols_nl_SR ,
    PERCENT_PATTERN : NumberFormatSymbols_nl_SR ,
    PERMILL : NumberFormatSymbols_nl_SR ,
    PLUS_SIGN : NumberFormatSymbols_nl_SR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nl_SR ,
    ZERO_DIGIT : NumberFormatSymbols_nl_SR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nl_SR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_SR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nl_SR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_SR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nl_SX.
   */
  type NumberFormatSymbols_nl_SX = string ;
  var NumberFormatSymbols_nl_SX : {
    CURRENCY_PATTERN : NumberFormatSymbols_nl_SX ,
    DECIMAL_PATTERN : NumberFormatSymbols_nl_SX ,
    DECIMAL_SEP : NumberFormatSymbols_nl_SX ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nl_SX ,
    EXP_SYMBOL : NumberFormatSymbols_nl_SX ,
    GROUP_SEP : NumberFormatSymbols_nl_SX ,
    INFINITY : NumberFormatSymbols_nl_SX ,
    MINUS_SIGN : NumberFormatSymbols_nl_SX ,
    NAN : NumberFormatSymbols_nl_SX ,
    PERCENT : NumberFormatSymbols_nl_SX ,
    PERCENT_PATTERN : NumberFormatSymbols_nl_SX ,
    PERMILL : NumberFormatSymbols_nl_SX ,
    PLUS_SIGN : NumberFormatSymbols_nl_SX ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nl_SX ,
    ZERO_DIGIT : NumberFormatSymbols_nl_SX ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nl_SX'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_SX;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nl_SX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nl_SX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nmg.
   */
  type NumberFormatSymbols_nmg = string ;
  var NumberFormatSymbols_nmg : {
    CURRENCY_PATTERN : NumberFormatSymbols_nmg ,
    DECIMAL_PATTERN : NumberFormatSymbols_nmg ,
    DECIMAL_SEP : NumberFormatSymbols_nmg ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nmg ,
    EXP_SYMBOL : NumberFormatSymbols_nmg ,
    GROUP_SEP : NumberFormatSymbols_nmg ,
    INFINITY : NumberFormatSymbols_nmg ,
    MINUS_SIGN : NumberFormatSymbols_nmg ,
    NAN : NumberFormatSymbols_nmg ,
    PERCENT : NumberFormatSymbols_nmg ,
    PERCENT_PATTERN : NumberFormatSymbols_nmg ,
    PERMILL : NumberFormatSymbols_nmg ,
    PLUS_SIGN : NumberFormatSymbols_nmg ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nmg ,
    ZERO_DIGIT : NumberFormatSymbols_nmg ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nmg'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nmg;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nmg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nmg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nmg_CM.
   */
  type NumberFormatSymbols_nmg_CM = string ;
  var NumberFormatSymbols_nmg_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_nmg_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_nmg_CM ,
    DECIMAL_SEP : NumberFormatSymbols_nmg_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nmg_CM ,
    EXP_SYMBOL : NumberFormatSymbols_nmg_CM ,
    GROUP_SEP : NumberFormatSymbols_nmg_CM ,
    INFINITY : NumberFormatSymbols_nmg_CM ,
    MINUS_SIGN : NumberFormatSymbols_nmg_CM ,
    NAN : NumberFormatSymbols_nmg_CM ,
    PERCENT : NumberFormatSymbols_nmg_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_nmg_CM ,
    PERMILL : NumberFormatSymbols_nmg_CM ,
    PLUS_SIGN : NumberFormatSymbols_nmg_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nmg_CM ,
    ZERO_DIGIT : NumberFormatSymbols_nmg_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nmg_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nmg_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nmg_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nmg_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nn.
   */
  type NumberFormatSymbols_nn = string ;
  var NumberFormatSymbols_nn : {
    CURRENCY_PATTERN : NumberFormatSymbols_nn ,
    DECIMAL_PATTERN : NumberFormatSymbols_nn ,
    DECIMAL_SEP : NumberFormatSymbols_nn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nn ,
    EXP_SYMBOL : NumberFormatSymbols_nn ,
    GROUP_SEP : NumberFormatSymbols_nn ,
    INFINITY : NumberFormatSymbols_nn ,
    MINUS_SIGN : NumberFormatSymbols_nn ,
    NAN : NumberFormatSymbols_nn ,
    PERCENT : NumberFormatSymbols_nn ,
    PERCENT_PATTERN : NumberFormatSymbols_nn ,
    PERMILL : NumberFormatSymbols_nn ,
    PLUS_SIGN : NumberFormatSymbols_nn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nn ,
    ZERO_DIGIT : NumberFormatSymbols_nn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nn_NO.
   */
  type NumberFormatSymbols_nn_NO = string ;
  var NumberFormatSymbols_nn_NO : {
    CURRENCY_PATTERN : NumberFormatSymbols_nn_NO ,
    DECIMAL_PATTERN : NumberFormatSymbols_nn_NO ,
    DECIMAL_SEP : NumberFormatSymbols_nn_NO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nn_NO ,
    EXP_SYMBOL : NumberFormatSymbols_nn_NO ,
    GROUP_SEP : NumberFormatSymbols_nn_NO ,
    INFINITY : NumberFormatSymbols_nn_NO ,
    MINUS_SIGN : NumberFormatSymbols_nn_NO ,
    NAN : NumberFormatSymbols_nn_NO ,
    PERCENT : NumberFormatSymbols_nn_NO ,
    PERCENT_PATTERN : NumberFormatSymbols_nn_NO ,
    PERMILL : NumberFormatSymbols_nn_NO ,
    PLUS_SIGN : NumberFormatSymbols_nn_NO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nn_NO ,
    ZERO_DIGIT : NumberFormatSymbols_nn_NO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nn_NO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nn_NO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nn_NO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nn_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nnh.
   */
  type NumberFormatSymbols_nnh = string ;
  var NumberFormatSymbols_nnh : {
    CURRENCY_PATTERN : NumberFormatSymbols_nnh ,
    DECIMAL_PATTERN : NumberFormatSymbols_nnh ,
    DECIMAL_SEP : NumberFormatSymbols_nnh ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nnh ,
    EXP_SYMBOL : NumberFormatSymbols_nnh ,
    GROUP_SEP : NumberFormatSymbols_nnh ,
    INFINITY : NumberFormatSymbols_nnh ,
    MINUS_SIGN : NumberFormatSymbols_nnh ,
    NAN : NumberFormatSymbols_nnh ,
    PERCENT : NumberFormatSymbols_nnh ,
    PERCENT_PATTERN : NumberFormatSymbols_nnh ,
    PERMILL : NumberFormatSymbols_nnh ,
    PLUS_SIGN : NumberFormatSymbols_nnh ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nnh ,
    ZERO_DIGIT : NumberFormatSymbols_nnh ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nnh'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nnh;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nnh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nnh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nnh_CM.
   */
  type NumberFormatSymbols_nnh_CM = string ;
  var NumberFormatSymbols_nnh_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_nnh_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_nnh_CM ,
    DECIMAL_SEP : NumberFormatSymbols_nnh_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nnh_CM ,
    EXP_SYMBOL : NumberFormatSymbols_nnh_CM ,
    GROUP_SEP : NumberFormatSymbols_nnh_CM ,
    INFINITY : NumberFormatSymbols_nnh_CM ,
    MINUS_SIGN : NumberFormatSymbols_nnh_CM ,
    NAN : NumberFormatSymbols_nnh_CM ,
    PERCENT : NumberFormatSymbols_nnh_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_nnh_CM ,
    PERMILL : NumberFormatSymbols_nnh_CM ,
    PLUS_SIGN : NumberFormatSymbols_nnh_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nnh_CM ,
    ZERO_DIGIT : NumberFormatSymbols_nnh_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nnh_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nnh_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nnh_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nnh_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale no.
   */
  type NumberFormatSymbols_no = string ;
  var NumberFormatSymbols_no : {
    CURRENCY_PATTERN : NumberFormatSymbols_no ,
    DECIMAL_PATTERN : NumberFormatSymbols_no ,
    DECIMAL_SEP : NumberFormatSymbols_no ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_no ,
    EXP_SYMBOL : NumberFormatSymbols_no ,
    GROUP_SEP : NumberFormatSymbols_no ,
    INFINITY : NumberFormatSymbols_no ,
    MINUS_SIGN : NumberFormatSymbols_no ,
    NAN : NumberFormatSymbols_no ,
    PERCENT : NumberFormatSymbols_no ,
    PERCENT_PATTERN : NumberFormatSymbols_no ,
    PERMILL : NumberFormatSymbols_no ,
    PLUS_SIGN : NumberFormatSymbols_no ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_no ,
    ZERO_DIGIT : NumberFormatSymbols_no ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_no'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_no;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_no' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_no;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale no_NO.
   */
  type NumberFormatSymbols_no_NO = string ;
  var NumberFormatSymbols_no_NO : {
    CURRENCY_PATTERN : NumberFormatSymbols_no_NO ,
    DECIMAL_PATTERN : NumberFormatSymbols_no_NO ,
    DECIMAL_SEP : NumberFormatSymbols_no_NO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_no_NO ,
    EXP_SYMBOL : NumberFormatSymbols_no_NO ,
    GROUP_SEP : NumberFormatSymbols_no_NO ,
    INFINITY : NumberFormatSymbols_no_NO ,
    MINUS_SIGN : NumberFormatSymbols_no_NO ,
    NAN : NumberFormatSymbols_no_NO ,
    PERCENT : NumberFormatSymbols_no_NO ,
    PERCENT_PATTERN : NumberFormatSymbols_no_NO ,
    PERMILL : NumberFormatSymbols_no_NO ,
    PLUS_SIGN : NumberFormatSymbols_no_NO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_no_NO ,
    ZERO_DIGIT : NumberFormatSymbols_no_NO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_no_NO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_no_NO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_no_NO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_no_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nus.
   */
  type NumberFormatSymbols_nus = string ;
  var NumberFormatSymbols_nus : {
    CURRENCY_PATTERN : NumberFormatSymbols_nus ,
    DECIMAL_PATTERN : NumberFormatSymbols_nus ,
    DECIMAL_SEP : NumberFormatSymbols_nus ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nus ,
    EXP_SYMBOL : NumberFormatSymbols_nus ,
    GROUP_SEP : NumberFormatSymbols_nus ,
    INFINITY : NumberFormatSymbols_nus ,
    MINUS_SIGN : NumberFormatSymbols_nus ,
    NAN : NumberFormatSymbols_nus ,
    PERCENT : NumberFormatSymbols_nus ,
    PERCENT_PATTERN : NumberFormatSymbols_nus ,
    PERMILL : NumberFormatSymbols_nus ,
    PLUS_SIGN : NumberFormatSymbols_nus ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nus ,
    ZERO_DIGIT : NumberFormatSymbols_nus ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nus'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nus;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nus' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nus;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nus_SS.
   */
  type NumberFormatSymbols_nus_SS = string ;
  var NumberFormatSymbols_nus_SS : {
    CURRENCY_PATTERN : NumberFormatSymbols_nus_SS ,
    DECIMAL_PATTERN : NumberFormatSymbols_nus_SS ,
    DECIMAL_SEP : NumberFormatSymbols_nus_SS ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nus_SS ,
    EXP_SYMBOL : NumberFormatSymbols_nus_SS ,
    GROUP_SEP : NumberFormatSymbols_nus_SS ,
    INFINITY : NumberFormatSymbols_nus_SS ,
    MINUS_SIGN : NumberFormatSymbols_nus_SS ,
    NAN : NumberFormatSymbols_nus_SS ,
    PERCENT : NumberFormatSymbols_nus_SS ,
    PERCENT_PATTERN : NumberFormatSymbols_nus_SS ,
    PERMILL : NumberFormatSymbols_nus_SS ,
    PLUS_SIGN : NumberFormatSymbols_nus_SS ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nus_SS ,
    ZERO_DIGIT : NumberFormatSymbols_nus_SS ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nus_SS'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nus_SS;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nus_SS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nus_SS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nyn.
   */
  type NumberFormatSymbols_nyn = string ;
  var NumberFormatSymbols_nyn : {
    CURRENCY_PATTERN : NumberFormatSymbols_nyn ,
    DECIMAL_PATTERN : NumberFormatSymbols_nyn ,
    DECIMAL_SEP : NumberFormatSymbols_nyn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nyn ,
    EXP_SYMBOL : NumberFormatSymbols_nyn ,
    GROUP_SEP : NumberFormatSymbols_nyn ,
    INFINITY : NumberFormatSymbols_nyn ,
    MINUS_SIGN : NumberFormatSymbols_nyn ,
    NAN : NumberFormatSymbols_nyn ,
    PERCENT : NumberFormatSymbols_nyn ,
    PERCENT_PATTERN : NumberFormatSymbols_nyn ,
    PERMILL : NumberFormatSymbols_nyn ,
    PLUS_SIGN : NumberFormatSymbols_nyn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nyn ,
    ZERO_DIGIT : NumberFormatSymbols_nyn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nyn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nyn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nyn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nyn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale nyn_UG.
   */
  type NumberFormatSymbols_nyn_UG = string ;
  var NumberFormatSymbols_nyn_UG : {
    CURRENCY_PATTERN : NumberFormatSymbols_nyn_UG ,
    DECIMAL_PATTERN : NumberFormatSymbols_nyn_UG ,
    DECIMAL_SEP : NumberFormatSymbols_nyn_UG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_nyn_UG ,
    EXP_SYMBOL : NumberFormatSymbols_nyn_UG ,
    GROUP_SEP : NumberFormatSymbols_nyn_UG ,
    INFINITY : NumberFormatSymbols_nyn_UG ,
    MINUS_SIGN : NumberFormatSymbols_nyn_UG ,
    NAN : NumberFormatSymbols_nyn_UG ,
    PERCENT : NumberFormatSymbols_nyn_UG ,
    PERCENT_PATTERN : NumberFormatSymbols_nyn_UG ,
    PERMILL : NumberFormatSymbols_nyn_UG ,
    PLUS_SIGN : NumberFormatSymbols_nyn_UG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_nyn_UG ,
    ZERO_DIGIT : NumberFormatSymbols_nyn_UG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_nyn_UG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nyn_UG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_nyn_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_nyn_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale om.
   */
  type NumberFormatSymbols_om = string ;
  var NumberFormatSymbols_om : {
    CURRENCY_PATTERN : NumberFormatSymbols_om ,
    DECIMAL_PATTERN : NumberFormatSymbols_om ,
    DECIMAL_SEP : NumberFormatSymbols_om ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_om ,
    EXP_SYMBOL : NumberFormatSymbols_om ,
    GROUP_SEP : NumberFormatSymbols_om ,
    INFINITY : NumberFormatSymbols_om ,
    MINUS_SIGN : NumberFormatSymbols_om ,
    NAN : NumberFormatSymbols_om ,
    PERCENT : NumberFormatSymbols_om ,
    PERCENT_PATTERN : NumberFormatSymbols_om ,
    PERMILL : NumberFormatSymbols_om ,
    PLUS_SIGN : NumberFormatSymbols_om ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_om ,
    ZERO_DIGIT : NumberFormatSymbols_om ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_om'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_om;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_om' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_om;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale om_ET.
   */
  type NumberFormatSymbols_om_ET = string ;
  var NumberFormatSymbols_om_ET : {
    CURRENCY_PATTERN : NumberFormatSymbols_om_ET ,
    DECIMAL_PATTERN : NumberFormatSymbols_om_ET ,
    DECIMAL_SEP : NumberFormatSymbols_om_ET ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_om_ET ,
    EXP_SYMBOL : NumberFormatSymbols_om_ET ,
    GROUP_SEP : NumberFormatSymbols_om_ET ,
    INFINITY : NumberFormatSymbols_om_ET ,
    MINUS_SIGN : NumberFormatSymbols_om_ET ,
    NAN : NumberFormatSymbols_om_ET ,
    PERCENT : NumberFormatSymbols_om_ET ,
    PERCENT_PATTERN : NumberFormatSymbols_om_ET ,
    PERMILL : NumberFormatSymbols_om_ET ,
    PLUS_SIGN : NumberFormatSymbols_om_ET ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_om_ET ,
    ZERO_DIGIT : NumberFormatSymbols_om_ET ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_om_ET'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_om_ET;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_om_ET' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_om_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale om_KE.
   */
  type NumberFormatSymbols_om_KE = string ;
  var NumberFormatSymbols_om_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_om_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_om_KE ,
    DECIMAL_SEP : NumberFormatSymbols_om_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_om_KE ,
    EXP_SYMBOL : NumberFormatSymbols_om_KE ,
    GROUP_SEP : NumberFormatSymbols_om_KE ,
    INFINITY : NumberFormatSymbols_om_KE ,
    MINUS_SIGN : NumberFormatSymbols_om_KE ,
    NAN : NumberFormatSymbols_om_KE ,
    PERCENT : NumberFormatSymbols_om_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_om_KE ,
    PERMILL : NumberFormatSymbols_om_KE ,
    PLUS_SIGN : NumberFormatSymbols_om_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_om_KE ,
    ZERO_DIGIT : NumberFormatSymbols_om_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_om_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_om_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_om_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_om_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale or.
   */
  type NumberFormatSymbols_or = string ;
  var NumberFormatSymbols_or : {
    CURRENCY_PATTERN : NumberFormatSymbols_or ,
    DECIMAL_PATTERN : NumberFormatSymbols_or ,
    DECIMAL_SEP : NumberFormatSymbols_or ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_or ,
    EXP_SYMBOL : NumberFormatSymbols_or ,
    GROUP_SEP : NumberFormatSymbols_or ,
    INFINITY : NumberFormatSymbols_or ,
    MINUS_SIGN : NumberFormatSymbols_or ,
    NAN : NumberFormatSymbols_or ,
    PERCENT : NumberFormatSymbols_or ,
    PERCENT_PATTERN : NumberFormatSymbols_or ,
    PERMILL : NumberFormatSymbols_or ,
    PLUS_SIGN : NumberFormatSymbols_or ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_or ,
    ZERO_DIGIT : NumberFormatSymbols_or ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_or'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_or;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_or' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_or;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale or_IN.
   */
  type NumberFormatSymbols_or_IN = string ;
  var NumberFormatSymbols_or_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_or_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_or_IN ,
    DECIMAL_SEP : NumberFormatSymbols_or_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_or_IN ,
    EXP_SYMBOL : NumberFormatSymbols_or_IN ,
    GROUP_SEP : NumberFormatSymbols_or_IN ,
    INFINITY : NumberFormatSymbols_or_IN ,
    MINUS_SIGN : NumberFormatSymbols_or_IN ,
    NAN : NumberFormatSymbols_or_IN ,
    PERCENT : NumberFormatSymbols_or_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_or_IN ,
    PERMILL : NumberFormatSymbols_or_IN ,
    PLUS_SIGN : NumberFormatSymbols_or_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_or_IN ,
    ZERO_DIGIT : NumberFormatSymbols_or_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_or_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_or_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_or_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_or_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale os.
   */
  type NumberFormatSymbols_os = string ;
  var NumberFormatSymbols_os : {
    CURRENCY_PATTERN : NumberFormatSymbols_os ,
    DECIMAL_PATTERN : NumberFormatSymbols_os ,
    DECIMAL_SEP : NumberFormatSymbols_os ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_os ,
    EXP_SYMBOL : NumberFormatSymbols_os ,
    GROUP_SEP : NumberFormatSymbols_os ,
    INFINITY : NumberFormatSymbols_os ,
    MINUS_SIGN : NumberFormatSymbols_os ,
    NAN : NumberFormatSymbols_os ,
    PERCENT : NumberFormatSymbols_os ,
    PERCENT_PATTERN : NumberFormatSymbols_os ,
    PERMILL : NumberFormatSymbols_os ,
    PLUS_SIGN : NumberFormatSymbols_os ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_os ,
    ZERO_DIGIT : NumberFormatSymbols_os ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_os'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_os;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_os' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_os;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale os_GE.
   */
  type NumberFormatSymbols_os_GE = string ;
  var NumberFormatSymbols_os_GE : {
    CURRENCY_PATTERN : NumberFormatSymbols_os_GE ,
    DECIMAL_PATTERN : NumberFormatSymbols_os_GE ,
    DECIMAL_SEP : NumberFormatSymbols_os_GE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_os_GE ,
    EXP_SYMBOL : NumberFormatSymbols_os_GE ,
    GROUP_SEP : NumberFormatSymbols_os_GE ,
    INFINITY : NumberFormatSymbols_os_GE ,
    MINUS_SIGN : NumberFormatSymbols_os_GE ,
    NAN : NumberFormatSymbols_os_GE ,
    PERCENT : NumberFormatSymbols_os_GE ,
    PERCENT_PATTERN : NumberFormatSymbols_os_GE ,
    PERMILL : NumberFormatSymbols_os_GE ,
    PLUS_SIGN : NumberFormatSymbols_os_GE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_os_GE ,
    ZERO_DIGIT : NumberFormatSymbols_os_GE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_os_GE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_os_GE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_os_GE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_os_GE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale os_RU.
   */
  type NumberFormatSymbols_os_RU = string ;
  var NumberFormatSymbols_os_RU : {
    CURRENCY_PATTERN : NumberFormatSymbols_os_RU ,
    DECIMAL_PATTERN : NumberFormatSymbols_os_RU ,
    DECIMAL_SEP : NumberFormatSymbols_os_RU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_os_RU ,
    EXP_SYMBOL : NumberFormatSymbols_os_RU ,
    GROUP_SEP : NumberFormatSymbols_os_RU ,
    INFINITY : NumberFormatSymbols_os_RU ,
    MINUS_SIGN : NumberFormatSymbols_os_RU ,
    NAN : NumberFormatSymbols_os_RU ,
    PERCENT : NumberFormatSymbols_os_RU ,
    PERCENT_PATTERN : NumberFormatSymbols_os_RU ,
    PERMILL : NumberFormatSymbols_os_RU ,
    PLUS_SIGN : NumberFormatSymbols_os_RU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_os_RU ,
    ZERO_DIGIT : NumberFormatSymbols_os_RU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_os_RU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_os_RU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_os_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_os_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pa.
   */
  type NumberFormatSymbols_pa = string ;
  var NumberFormatSymbols_pa : {
    CURRENCY_PATTERN : NumberFormatSymbols_pa ,
    DECIMAL_PATTERN : NumberFormatSymbols_pa ,
    DECIMAL_SEP : NumberFormatSymbols_pa ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pa ,
    EXP_SYMBOL : NumberFormatSymbols_pa ,
    GROUP_SEP : NumberFormatSymbols_pa ,
    INFINITY : NumberFormatSymbols_pa ,
    MINUS_SIGN : NumberFormatSymbols_pa ,
    NAN : NumberFormatSymbols_pa ,
    PERCENT : NumberFormatSymbols_pa ,
    PERCENT_PATTERN : NumberFormatSymbols_pa ,
    PERMILL : NumberFormatSymbols_pa ,
    PLUS_SIGN : NumberFormatSymbols_pa ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pa ,
    ZERO_DIGIT : NumberFormatSymbols_pa ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pa'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pa;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pa' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pa;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pa_Arab.
   */
  type NumberFormatSymbols_pa_Arab = string ;
  var NumberFormatSymbols_pa_Arab : {
    CURRENCY_PATTERN : NumberFormatSymbols_pa_Arab ,
    DECIMAL_PATTERN : NumberFormatSymbols_pa_Arab ,
    DECIMAL_SEP : NumberFormatSymbols_pa_Arab ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pa_Arab ,
    EXP_SYMBOL : NumberFormatSymbols_pa_Arab ,
    GROUP_SEP : NumberFormatSymbols_pa_Arab ,
    INFINITY : NumberFormatSymbols_pa_Arab ,
    MINUS_SIGN : NumberFormatSymbols_pa_Arab ,
    NAN : NumberFormatSymbols_pa_Arab ,
    PERCENT : NumberFormatSymbols_pa_Arab ,
    PERCENT_PATTERN : NumberFormatSymbols_pa_Arab ,
    PERMILL : NumberFormatSymbols_pa_Arab ,
    PLUS_SIGN : NumberFormatSymbols_pa_Arab ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pa_Arab ,
    ZERO_DIGIT : NumberFormatSymbols_pa_Arab ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pa_Arab'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pa_Arab;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pa_Arab' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pa_Arab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pa_Arab_PK.
   */
  type NumberFormatSymbols_pa_Arab_PK = string ;
  var NumberFormatSymbols_pa_Arab_PK : {
    CURRENCY_PATTERN : NumberFormatSymbols_pa_Arab_PK ,
    DECIMAL_PATTERN : NumberFormatSymbols_pa_Arab_PK ,
    DECIMAL_SEP : NumberFormatSymbols_pa_Arab_PK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pa_Arab_PK ,
    EXP_SYMBOL : NumberFormatSymbols_pa_Arab_PK ,
    GROUP_SEP : NumberFormatSymbols_pa_Arab_PK ,
    INFINITY : NumberFormatSymbols_pa_Arab_PK ,
    MINUS_SIGN : NumberFormatSymbols_pa_Arab_PK ,
    NAN : NumberFormatSymbols_pa_Arab_PK ,
    PERCENT : NumberFormatSymbols_pa_Arab_PK ,
    PERCENT_PATTERN : NumberFormatSymbols_pa_Arab_PK ,
    PERMILL : NumberFormatSymbols_pa_Arab_PK ,
    PLUS_SIGN : NumberFormatSymbols_pa_Arab_PK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pa_Arab_PK ,
    ZERO_DIGIT : NumberFormatSymbols_pa_Arab_PK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pa_Arab_PK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pa_Arab_PK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pa_Arab_PK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pa_Arab_PK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pa_Guru.
   */
  type NumberFormatSymbols_pa_Guru = string ;
  var NumberFormatSymbols_pa_Guru : {
    CURRENCY_PATTERN : NumberFormatSymbols_pa_Guru ,
    DECIMAL_PATTERN : NumberFormatSymbols_pa_Guru ,
    DECIMAL_SEP : NumberFormatSymbols_pa_Guru ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pa_Guru ,
    EXP_SYMBOL : NumberFormatSymbols_pa_Guru ,
    GROUP_SEP : NumberFormatSymbols_pa_Guru ,
    INFINITY : NumberFormatSymbols_pa_Guru ,
    MINUS_SIGN : NumberFormatSymbols_pa_Guru ,
    NAN : NumberFormatSymbols_pa_Guru ,
    PERCENT : NumberFormatSymbols_pa_Guru ,
    PERCENT_PATTERN : NumberFormatSymbols_pa_Guru ,
    PERMILL : NumberFormatSymbols_pa_Guru ,
    PLUS_SIGN : NumberFormatSymbols_pa_Guru ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pa_Guru ,
    ZERO_DIGIT : NumberFormatSymbols_pa_Guru ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pa_Guru'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pa_Guru;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pa_Guru' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pa_Guru;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pa_Guru_IN.
   */
  type NumberFormatSymbols_pa_Guru_IN = string ;
  var NumberFormatSymbols_pa_Guru_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_pa_Guru_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_pa_Guru_IN ,
    DECIMAL_SEP : NumberFormatSymbols_pa_Guru_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pa_Guru_IN ,
    EXP_SYMBOL : NumberFormatSymbols_pa_Guru_IN ,
    GROUP_SEP : NumberFormatSymbols_pa_Guru_IN ,
    INFINITY : NumberFormatSymbols_pa_Guru_IN ,
    MINUS_SIGN : NumberFormatSymbols_pa_Guru_IN ,
    NAN : NumberFormatSymbols_pa_Guru_IN ,
    PERCENT : NumberFormatSymbols_pa_Guru_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_pa_Guru_IN ,
    PERMILL : NumberFormatSymbols_pa_Guru_IN ,
    PLUS_SIGN : NumberFormatSymbols_pa_Guru_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pa_Guru_IN ,
    ZERO_DIGIT : NumberFormatSymbols_pa_Guru_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pa_Guru_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pa_Guru_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pa_Guru_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pa_Guru_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pl.
   */
  type NumberFormatSymbols_pl = string ;
  var NumberFormatSymbols_pl : {
    CURRENCY_PATTERN : NumberFormatSymbols_pl ,
    DECIMAL_PATTERN : NumberFormatSymbols_pl ,
    DECIMAL_SEP : NumberFormatSymbols_pl ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pl ,
    EXP_SYMBOL : NumberFormatSymbols_pl ,
    GROUP_SEP : NumberFormatSymbols_pl ,
    INFINITY : NumberFormatSymbols_pl ,
    MINUS_SIGN : NumberFormatSymbols_pl ,
    NAN : NumberFormatSymbols_pl ,
    PERCENT : NumberFormatSymbols_pl ,
    PERCENT_PATTERN : NumberFormatSymbols_pl ,
    PERMILL : NumberFormatSymbols_pl ,
    PLUS_SIGN : NumberFormatSymbols_pl ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pl ,
    ZERO_DIGIT : NumberFormatSymbols_pl ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pl'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pl;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pl_PL.
   */
  type NumberFormatSymbols_pl_PL = string ;
  var NumberFormatSymbols_pl_PL : {
    CURRENCY_PATTERN : NumberFormatSymbols_pl_PL ,
    DECIMAL_PATTERN : NumberFormatSymbols_pl_PL ,
    DECIMAL_SEP : NumberFormatSymbols_pl_PL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pl_PL ,
    EXP_SYMBOL : NumberFormatSymbols_pl_PL ,
    GROUP_SEP : NumberFormatSymbols_pl_PL ,
    INFINITY : NumberFormatSymbols_pl_PL ,
    MINUS_SIGN : NumberFormatSymbols_pl_PL ,
    NAN : NumberFormatSymbols_pl_PL ,
    PERCENT : NumberFormatSymbols_pl_PL ,
    PERCENT_PATTERN : NumberFormatSymbols_pl_PL ,
    PERMILL : NumberFormatSymbols_pl_PL ,
    PLUS_SIGN : NumberFormatSymbols_pl_PL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pl_PL ,
    ZERO_DIGIT : NumberFormatSymbols_pl_PL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pl_PL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pl_PL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pl_PL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pl_PL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale prg.
   */
  type NumberFormatSymbols_prg = string ;
  var NumberFormatSymbols_prg : {
    CURRENCY_PATTERN : NumberFormatSymbols_prg ,
    DECIMAL_PATTERN : NumberFormatSymbols_prg ,
    DECIMAL_SEP : NumberFormatSymbols_prg ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_prg ,
    EXP_SYMBOL : NumberFormatSymbols_prg ,
    GROUP_SEP : NumberFormatSymbols_prg ,
    INFINITY : NumberFormatSymbols_prg ,
    MINUS_SIGN : NumberFormatSymbols_prg ,
    NAN : NumberFormatSymbols_prg ,
    PERCENT : NumberFormatSymbols_prg ,
    PERCENT_PATTERN : NumberFormatSymbols_prg ,
    PERMILL : NumberFormatSymbols_prg ,
    PLUS_SIGN : NumberFormatSymbols_prg ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_prg ,
    ZERO_DIGIT : NumberFormatSymbols_prg ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_prg'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_prg;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_prg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_prg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale prg_001.
   */
  type NumberFormatSymbols_prg_001 = string ;
  var NumberFormatSymbols_prg_001 : {
    CURRENCY_PATTERN : NumberFormatSymbols_prg_001 ,
    DECIMAL_PATTERN : NumberFormatSymbols_prg_001 ,
    DECIMAL_SEP : NumberFormatSymbols_prg_001 ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_prg_001 ,
    EXP_SYMBOL : NumberFormatSymbols_prg_001 ,
    GROUP_SEP : NumberFormatSymbols_prg_001 ,
    INFINITY : NumberFormatSymbols_prg_001 ,
    MINUS_SIGN : NumberFormatSymbols_prg_001 ,
    NAN : NumberFormatSymbols_prg_001 ,
    PERCENT : NumberFormatSymbols_prg_001 ,
    PERCENT_PATTERN : NumberFormatSymbols_prg_001 ,
    PERMILL : NumberFormatSymbols_prg_001 ,
    PLUS_SIGN : NumberFormatSymbols_prg_001 ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_prg_001 ,
    ZERO_DIGIT : NumberFormatSymbols_prg_001 ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_prg_001'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_prg_001;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_prg_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_prg_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ps.
   */
  type NumberFormatSymbols_ps = string ;
  var NumberFormatSymbols_ps : {
    CURRENCY_PATTERN : NumberFormatSymbols_ps ,
    DECIMAL_PATTERN : NumberFormatSymbols_ps ,
    DECIMAL_SEP : NumberFormatSymbols_ps ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ps ,
    EXP_SYMBOL : NumberFormatSymbols_ps ,
    GROUP_SEP : NumberFormatSymbols_ps ,
    INFINITY : NumberFormatSymbols_ps ,
    MINUS_SIGN : NumberFormatSymbols_ps ,
    NAN : NumberFormatSymbols_ps ,
    PERCENT : NumberFormatSymbols_ps ,
    PERCENT_PATTERN : NumberFormatSymbols_ps ,
    PERMILL : NumberFormatSymbols_ps ,
    PLUS_SIGN : NumberFormatSymbols_ps ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ps ,
    ZERO_DIGIT : NumberFormatSymbols_ps ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ps'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ps;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ps' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ps;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ps_AF.
   */
  type NumberFormatSymbols_ps_AF = string ;
  var NumberFormatSymbols_ps_AF : {
    CURRENCY_PATTERN : NumberFormatSymbols_ps_AF ,
    DECIMAL_PATTERN : NumberFormatSymbols_ps_AF ,
    DECIMAL_SEP : NumberFormatSymbols_ps_AF ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ps_AF ,
    EXP_SYMBOL : NumberFormatSymbols_ps_AF ,
    GROUP_SEP : NumberFormatSymbols_ps_AF ,
    INFINITY : NumberFormatSymbols_ps_AF ,
    MINUS_SIGN : NumberFormatSymbols_ps_AF ,
    NAN : NumberFormatSymbols_ps_AF ,
    PERCENT : NumberFormatSymbols_ps_AF ,
    PERCENT_PATTERN : NumberFormatSymbols_ps_AF ,
    PERMILL : NumberFormatSymbols_ps_AF ,
    PLUS_SIGN : NumberFormatSymbols_ps_AF ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ps_AF ,
    ZERO_DIGIT : NumberFormatSymbols_ps_AF ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ps_AF'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ps_AF;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ps_AF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ps_AF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pt.
   */
  type NumberFormatSymbols_pt = string ;
  var NumberFormatSymbols_pt : {
    CURRENCY_PATTERN : NumberFormatSymbols_pt ,
    DECIMAL_PATTERN : NumberFormatSymbols_pt ,
    DECIMAL_SEP : NumberFormatSymbols_pt ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pt ,
    EXP_SYMBOL : NumberFormatSymbols_pt ,
    GROUP_SEP : NumberFormatSymbols_pt ,
    INFINITY : NumberFormatSymbols_pt ,
    MINUS_SIGN : NumberFormatSymbols_pt ,
    NAN : NumberFormatSymbols_pt ,
    PERCENT : NumberFormatSymbols_pt ,
    PERCENT_PATTERN : NumberFormatSymbols_pt ,
    PERMILL : NumberFormatSymbols_pt ,
    PLUS_SIGN : NumberFormatSymbols_pt ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pt ,
    ZERO_DIGIT : NumberFormatSymbols_pt ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pt'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pt' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pt_AO.
   */
  type NumberFormatSymbols_pt_AO = string ;
  var NumberFormatSymbols_pt_AO : {
    CURRENCY_PATTERN : NumberFormatSymbols_pt_AO ,
    DECIMAL_PATTERN : NumberFormatSymbols_pt_AO ,
    DECIMAL_SEP : NumberFormatSymbols_pt_AO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pt_AO ,
    EXP_SYMBOL : NumberFormatSymbols_pt_AO ,
    GROUP_SEP : NumberFormatSymbols_pt_AO ,
    INFINITY : NumberFormatSymbols_pt_AO ,
    MINUS_SIGN : NumberFormatSymbols_pt_AO ,
    NAN : NumberFormatSymbols_pt_AO ,
    PERCENT : NumberFormatSymbols_pt_AO ,
    PERCENT_PATTERN : NumberFormatSymbols_pt_AO ,
    PERMILL : NumberFormatSymbols_pt_AO ,
    PLUS_SIGN : NumberFormatSymbols_pt_AO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pt_AO ,
    ZERO_DIGIT : NumberFormatSymbols_pt_AO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pt_AO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_AO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pt_AO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_AO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pt_BR.
   */
  type NumberFormatSymbols_pt_BR = string ;
  var NumberFormatSymbols_pt_BR : {
    CURRENCY_PATTERN : NumberFormatSymbols_pt_BR ,
    DECIMAL_PATTERN : NumberFormatSymbols_pt_BR ,
    DECIMAL_SEP : NumberFormatSymbols_pt_BR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pt_BR ,
    EXP_SYMBOL : NumberFormatSymbols_pt_BR ,
    GROUP_SEP : NumberFormatSymbols_pt_BR ,
    INFINITY : NumberFormatSymbols_pt_BR ,
    MINUS_SIGN : NumberFormatSymbols_pt_BR ,
    NAN : NumberFormatSymbols_pt_BR ,
    PERCENT : NumberFormatSymbols_pt_BR ,
    PERCENT_PATTERN : NumberFormatSymbols_pt_BR ,
    PERMILL : NumberFormatSymbols_pt_BR ,
    PLUS_SIGN : NumberFormatSymbols_pt_BR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pt_BR ,
    ZERO_DIGIT : NumberFormatSymbols_pt_BR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pt_BR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_BR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pt_BR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_BR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pt_CH.
   */
  type NumberFormatSymbols_pt_CH = string ;
  var NumberFormatSymbols_pt_CH : {
    CURRENCY_PATTERN : NumberFormatSymbols_pt_CH ,
    DECIMAL_PATTERN : NumberFormatSymbols_pt_CH ,
    DECIMAL_SEP : NumberFormatSymbols_pt_CH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pt_CH ,
    EXP_SYMBOL : NumberFormatSymbols_pt_CH ,
    GROUP_SEP : NumberFormatSymbols_pt_CH ,
    INFINITY : NumberFormatSymbols_pt_CH ,
    MINUS_SIGN : NumberFormatSymbols_pt_CH ,
    NAN : NumberFormatSymbols_pt_CH ,
    PERCENT : NumberFormatSymbols_pt_CH ,
    PERCENT_PATTERN : NumberFormatSymbols_pt_CH ,
    PERMILL : NumberFormatSymbols_pt_CH ,
    PLUS_SIGN : NumberFormatSymbols_pt_CH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pt_CH ,
    ZERO_DIGIT : NumberFormatSymbols_pt_CH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pt_CH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_CH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pt_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pt_CV.
   */
  type NumberFormatSymbols_pt_CV = string ;
  var NumberFormatSymbols_pt_CV : {
    CURRENCY_PATTERN : NumberFormatSymbols_pt_CV ,
    DECIMAL_PATTERN : NumberFormatSymbols_pt_CV ,
    DECIMAL_SEP : NumberFormatSymbols_pt_CV ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pt_CV ,
    EXP_SYMBOL : NumberFormatSymbols_pt_CV ,
    GROUP_SEP : NumberFormatSymbols_pt_CV ,
    INFINITY : NumberFormatSymbols_pt_CV ,
    MINUS_SIGN : NumberFormatSymbols_pt_CV ,
    NAN : NumberFormatSymbols_pt_CV ,
    PERCENT : NumberFormatSymbols_pt_CV ,
    PERCENT_PATTERN : NumberFormatSymbols_pt_CV ,
    PERMILL : NumberFormatSymbols_pt_CV ,
    PLUS_SIGN : NumberFormatSymbols_pt_CV ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pt_CV ,
    ZERO_DIGIT : NumberFormatSymbols_pt_CV ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pt_CV'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_CV;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pt_CV' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_CV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pt_GQ.
   */
  type NumberFormatSymbols_pt_GQ = string ;
  var NumberFormatSymbols_pt_GQ : {
    CURRENCY_PATTERN : NumberFormatSymbols_pt_GQ ,
    DECIMAL_PATTERN : NumberFormatSymbols_pt_GQ ,
    DECIMAL_SEP : NumberFormatSymbols_pt_GQ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pt_GQ ,
    EXP_SYMBOL : NumberFormatSymbols_pt_GQ ,
    GROUP_SEP : NumberFormatSymbols_pt_GQ ,
    INFINITY : NumberFormatSymbols_pt_GQ ,
    MINUS_SIGN : NumberFormatSymbols_pt_GQ ,
    NAN : NumberFormatSymbols_pt_GQ ,
    PERCENT : NumberFormatSymbols_pt_GQ ,
    PERCENT_PATTERN : NumberFormatSymbols_pt_GQ ,
    PERMILL : NumberFormatSymbols_pt_GQ ,
    PLUS_SIGN : NumberFormatSymbols_pt_GQ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pt_GQ ,
    ZERO_DIGIT : NumberFormatSymbols_pt_GQ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pt_GQ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_GQ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pt_GQ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_GQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pt_GW.
   */
  type NumberFormatSymbols_pt_GW = string ;
  var NumberFormatSymbols_pt_GW : {
    CURRENCY_PATTERN : NumberFormatSymbols_pt_GW ,
    DECIMAL_PATTERN : NumberFormatSymbols_pt_GW ,
    DECIMAL_SEP : NumberFormatSymbols_pt_GW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pt_GW ,
    EXP_SYMBOL : NumberFormatSymbols_pt_GW ,
    GROUP_SEP : NumberFormatSymbols_pt_GW ,
    INFINITY : NumberFormatSymbols_pt_GW ,
    MINUS_SIGN : NumberFormatSymbols_pt_GW ,
    NAN : NumberFormatSymbols_pt_GW ,
    PERCENT : NumberFormatSymbols_pt_GW ,
    PERCENT_PATTERN : NumberFormatSymbols_pt_GW ,
    PERMILL : NumberFormatSymbols_pt_GW ,
    PLUS_SIGN : NumberFormatSymbols_pt_GW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pt_GW ,
    ZERO_DIGIT : NumberFormatSymbols_pt_GW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pt_GW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_GW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pt_GW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_GW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pt_LU.
   */
  type NumberFormatSymbols_pt_LU = string ;
  var NumberFormatSymbols_pt_LU : {
    CURRENCY_PATTERN : NumberFormatSymbols_pt_LU ,
    DECIMAL_PATTERN : NumberFormatSymbols_pt_LU ,
    DECIMAL_SEP : NumberFormatSymbols_pt_LU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pt_LU ,
    EXP_SYMBOL : NumberFormatSymbols_pt_LU ,
    GROUP_SEP : NumberFormatSymbols_pt_LU ,
    INFINITY : NumberFormatSymbols_pt_LU ,
    MINUS_SIGN : NumberFormatSymbols_pt_LU ,
    NAN : NumberFormatSymbols_pt_LU ,
    PERCENT : NumberFormatSymbols_pt_LU ,
    PERCENT_PATTERN : NumberFormatSymbols_pt_LU ,
    PERMILL : NumberFormatSymbols_pt_LU ,
    PLUS_SIGN : NumberFormatSymbols_pt_LU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pt_LU ,
    ZERO_DIGIT : NumberFormatSymbols_pt_LU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pt_LU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_LU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pt_LU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pt_MO.
   */
  type NumberFormatSymbols_pt_MO = string ;
  var NumberFormatSymbols_pt_MO : {
    CURRENCY_PATTERN : NumberFormatSymbols_pt_MO ,
    DECIMAL_PATTERN : NumberFormatSymbols_pt_MO ,
    DECIMAL_SEP : NumberFormatSymbols_pt_MO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pt_MO ,
    EXP_SYMBOL : NumberFormatSymbols_pt_MO ,
    GROUP_SEP : NumberFormatSymbols_pt_MO ,
    INFINITY : NumberFormatSymbols_pt_MO ,
    MINUS_SIGN : NumberFormatSymbols_pt_MO ,
    NAN : NumberFormatSymbols_pt_MO ,
    PERCENT : NumberFormatSymbols_pt_MO ,
    PERCENT_PATTERN : NumberFormatSymbols_pt_MO ,
    PERMILL : NumberFormatSymbols_pt_MO ,
    PLUS_SIGN : NumberFormatSymbols_pt_MO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pt_MO ,
    ZERO_DIGIT : NumberFormatSymbols_pt_MO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pt_MO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_MO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pt_MO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pt_MZ.
   */
  type NumberFormatSymbols_pt_MZ = string ;
  var NumberFormatSymbols_pt_MZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_pt_MZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_pt_MZ ,
    DECIMAL_SEP : NumberFormatSymbols_pt_MZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pt_MZ ,
    EXP_SYMBOL : NumberFormatSymbols_pt_MZ ,
    GROUP_SEP : NumberFormatSymbols_pt_MZ ,
    INFINITY : NumberFormatSymbols_pt_MZ ,
    MINUS_SIGN : NumberFormatSymbols_pt_MZ ,
    NAN : NumberFormatSymbols_pt_MZ ,
    PERCENT : NumberFormatSymbols_pt_MZ ,
    PERCENT_PATTERN : NumberFormatSymbols_pt_MZ ,
    PERMILL : NumberFormatSymbols_pt_MZ ,
    PLUS_SIGN : NumberFormatSymbols_pt_MZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pt_MZ ,
    ZERO_DIGIT : NumberFormatSymbols_pt_MZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pt_MZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_MZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pt_MZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_MZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pt_PT.
   */
  type NumberFormatSymbols_pt_PT = string ;
  var NumberFormatSymbols_pt_PT : {
    CURRENCY_PATTERN : NumberFormatSymbols_pt_PT ,
    DECIMAL_PATTERN : NumberFormatSymbols_pt_PT ,
    DECIMAL_SEP : NumberFormatSymbols_pt_PT ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pt_PT ,
    EXP_SYMBOL : NumberFormatSymbols_pt_PT ,
    GROUP_SEP : NumberFormatSymbols_pt_PT ,
    INFINITY : NumberFormatSymbols_pt_PT ,
    MINUS_SIGN : NumberFormatSymbols_pt_PT ,
    NAN : NumberFormatSymbols_pt_PT ,
    PERCENT : NumberFormatSymbols_pt_PT ,
    PERCENT_PATTERN : NumberFormatSymbols_pt_PT ,
    PERMILL : NumberFormatSymbols_pt_PT ,
    PLUS_SIGN : NumberFormatSymbols_pt_PT ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pt_PT ,
    ZERO_DIGIT : NumberFormatSymbols_pt_PT ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pt_PT'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_PT;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pt_PT' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_PT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pt_ST.
   */
  type NumberFormatSymbols_pt_ST = string ;
  var NumberFormatSymbols_pt_ST : {
    CURRENCY_PATTERN : NumberFormatSymbols_pt_ST ,
    DECIMAL_PATTERN : NumberFormatSymbols_pt_ST ,
    DECIMAL_SEP : NumberFormatSymbols_pt_ST ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pt_ST ,
    EXP_SYMBOL : NumberFormatSymbols_pt_ST ,
    GROUP_SEP : NumberFormatSymbols_pt_ST ,
    INFINITY : NumberFormatSymbols_pt_ST ,
    MINUS_SIGN : NumberFormatSymbols_pt_ST ,
    NAN : NumberFormatSymbols_pt_ST ,
    PERCENT : NumberFormatSymbols_pt_ST ,
    PERCENT_PATTERN : NumberFormatSymbols_pt_ST ,
    PERMILL : NumberFormatSymbols_pt_ST ,
    PLUS_SIGN : NumberFormatSymbols_pt_ST ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pt_ST ,
    ZERO_DIGIT : NumberFormatSymbols_pt_ST ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pt_ST'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_ST;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pt_ST' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_ST;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale pt_TL.
   */
  type NumberFormatSymbols_pt_TL = string ;
  var NumberFormatSymbols_pt_TL : {
    CURRENCY_PATTERN : NumberFormatSymbols_pt_TL ,
    DECIMAL_PATTERN : NumberFormatSymbols_pt_TL ,
    DECIMAL_SEP : NumberFormatSymbols_pt_TL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_pt_TL ,
    EXP_SYMBOL : NumberFormatSymbols_pt_TL ,
    GROUP_SEP : NumberFormatSymbols_pt_TL ,
    INFINITY : NumberFormatSymbols_pt_TL ,
    MINUS_SIGN : NumberFormatSymbols_pt_TL ,
    NAN : NumberFormatSymbols_pt_TL ,
    PERCENT : NumberFormatSymbols_pt_TL ,
    PERCENT_PATTERN : NumberFormatSymbols_pt_TL ,
    PERMILL : NumberFormatSymbols_pt_TL ,
    PLUS_SIGN : NumberFormatSymbols_pt_TL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_pt_TL ,
    ZERO_DIGIT : NumberFormatSymbols_pt_TL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_pt_TL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_TL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_pt_TL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_pt_TL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale qu.
   */
  type NumberFormatSymbols_qu = string ;
  var NumberFormatSymbols_qu : {
    CURRENCY_PATTERN : NumberFormatSymbols_qu ,
    DECIMAL_PATTERN : NumberFormatSymbols_qu ,
    DECIMAL_SEP : NumberFormatSymbols_qu ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_qu ,
    EXP_SYMBOL : NumberFormatSymbols_qu ,
    GROUP_SEP : NumberFormatSymbols_qu ,
    INFINITY : NumberFormatSymbols_qu ,
    MINUS_SIGN : NumberFormatSymbols_qu ,
    NAN : NumberFormatSymbols_qu ,
    PERCENT : NumberFormatSymbols_qu ,
    PERCENT_PATTERN : NumberFormatSymbols_qu ,
    PERMILL : NumberFormatSymbols_qu ,
    PLUS_SIGN : NumberFormatSymbols_qu ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_qu ,
    ZERO_DIGIT : NumberFormatSymbols_qu ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_qu'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_qu;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_qu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_qu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale qu_BO.
   */
  type NumberFormatSymbols_qu_BO = string ;
  var NumberFormatSymbols_qu_BO : {
    CURRENCY_PATTERN : NumberFormatSymbols_qu_BO ,
    DECIMAL_PATTERN : NumberFormatSymbols_qu_BO ,
    DECIMAL_SEP : NumberFormatSymbols_qu_BO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_qu_BO ,
    EXP_SYMBOL : NumberFormatSymbols_qu_BO ,
    GROUP_SEP : NumberFormatSymbols_qu_BO ,
    INFINITY : NumberFormatSymbols_qu_BO ,
    MINUS_SIGN : NumberFormatSymbols_qu_BO ,
    NAN : NumberFormatSymbols_qu_BO ,
    PERCENT : NumberFormatSymbols_qu_BO ,
    PERCENT_PATTERN : NumberFormatSymbols_qu_BO ,
    PERMILL : NumberFormatSymbols_qu_BO ,
    PLUS_SIGN : NumberFormatSymbols_qu_BO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_qu_BO ,
    ZERO_DIGIT : NumberFormatSymbols_qu_BO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_qu_BO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_qu_BO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_qu_BO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_qu_BO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale qu_EC.
   */
  type NumberFormatSymbols_qu_EC = string ;
  var NumberFormatSymbols_qu_EC : {
    CURRENCY_PATTERN : NumberFormatSymbols_qu_EC ,
    DECIMAL_PATTERN : NumberFormatSymbols_qu_EC ,
    DECIMAL_SEP : NumberFormatSymbols_qu_EC ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_qu_EC ,
    EXP_SYMBOL : NumberFormatSymbols_qu_EC ,
    GROUP_SEP : NumberFormatSymbols_qu_EC ,
    INFINITY : NumberFormatSymbols_qu_EC ,
    MINUS_SIGN : NumberFormatSymbols_qu_EC ,
    NAN : NumberFormatSymbols_qu_EC ,
    PERCENT : NumberFormatSymbols_qu_EC ,
    PERCENT_PATTERN : NumberFormatSymbols_qu_EC ,
    PERMILL : NumberFormatSymbols_qu_EC ,
    PLUS_SIGN : NumberFormatSymbols_qu_EC ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_qu_EC ,
    ZERO_DIGIT : NumberFormatSymbols_qu_EC ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_qu_EC'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_qu_EC;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_qu_EC' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_qu_EC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale qu_PE.
   */
  type NumberFormatSymbols_qu_PE = string ;
  var NumberFormatSymbols_qu_PE : {
    CURRENCY_PATTERN : NumberFormatSymbols_qu_PE ,
    DECIMAL_PATTERN : NumberFormatSymbols_qu_PE ,
    DECIMAL_SEP : NumberFormatSymbols_qu_PE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_qu_PE ,
    EXP_SYMBOL : NumberFormatSymbols_qu_PE ,
    GROUP_SEP : NumberFormatSymbols_qu_PE ,
    INFINITY : NumberFormatSymbols_qu_PE ,
    MINUS_SIGN : NumberFormatSymbols_qu_PE ,
    NAN : NumberFormatSymbols_qu_PE ,
    PERCENT : NumberFormatSymbols_qu_PE ,
    PERCENT_PATTERN : NumberFormatSymbols_qu_PE ,
    PERMILL : NumberFormatSymbols_qu_PE ,
    PLUS_SIGN : NumberFormatSymbols_qu_PE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_qu_PE ,
    ZERO_DIGIT : NumberFormatSymbols_qu_PE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_qu_PE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_qu_PE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_qu_PE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_qu_PE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale rm.
   */
  type NumberFormatSymbols_rm = string ;
  var NumberFormatSymbols_rm : {
    CURRENCY_PATTERN : NumberFormatSymbols_rm ,
    DECIMAL_PATTERN : NumberFormatSymbols_rm ,
    DECIMAL_SEP : NumberFormatSymbols_rm ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_rm ,
    EXP_SYMBOL : NumberFormatSymbols_rm ,
    GROUP_SEP : NumberFormatSymbols_rm ,
    INFINITY : NumberFormatSymbols_rm ,
    MINUS_SIGN : NumberFormatSymbols_rm ,
    NAN : NumberFormatSymbols_rm ,
    PERCENT : NumberFormatSymbols_rm ,
    PERCENT_PATTERN : NumberFormatSymbols_rm ,
    PERMILL : NumberFormatSymbols_rm ,
    PLUS_SIGN : NumberFormatSymbols_rm ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_rm ,
    ZERO_DIGIT : NumberFormatSymbols_rm ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_rm'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rm;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_rm' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rm;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale rm_CH.
   */
  type NumberFormatSymbols_rm_CH = string ;
  var NumberFormatSymbols_rm_CH : {
    CURRENCY_PATTERN : NumberFormatSymbols_rm_CH ,
    DECIMAL_PATTERN : NumberFormatSymbols_rm_CH ,
    DECIMAL_SEP : NumberFormatSymbols_rm_CH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_rm_CH ,
    EXP_SYMBOL : NumberFormatSymbols_rm_CH ,
    GROUP_SEP : NumberFormatSymbols_rm_CH ,
    INFINITY : NumberFormatSymbols_rm_CH ,
    MINUS_SIGN : NumberFormatSymbols_rm_CH ,
    NAN : NumberFormatSymbols_rm_CH ,
    PERCENT : NumberFormatSymbols_rm_CH ,
    PERCENT_PATTERN : NumberFormatSymbols_rm_CH ,
    PERMILL : NumberFormatSymbols_rm_CH ,
    PLUS_SIGN : NumberFormatSymbols_rm_CH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_rm_CH ,
    ZERO_DIGIT : NumberFormatSymbols_rm_CH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_rm_CH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rm_CH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_rm_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rm_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale rn.
   */
  type NumberFormatSymbols_rn = string ;
  var NumberFormatSymbols_rn : {
    CURRENCY_PATTERN : NumberFormatSymbols_rn ,
    DECIMAL_PATTERN : NumberFormatSymbols_rn ,
    DECIMAL_SEP : NumberFormatSymbols_rn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_rn ,
    EXP_SYMBOL : NumberFormatSymbols_rn ,
    GROUP_SEP : NumberFormatSymbols_rn ,
    INFINITY : NumberFormatSymbols_rn ,
    MINUS_SIGN : NumberFormatSymbols_rn ,
    NAN : NumberFormatSymbols_rn ,
    PERCENT : NumberFormatSymbols_rn ,
    PERCENT_PATTERN : NumberFormatSymbols_rn ,
    PERMILL : NumberFormatSymbols_rn ,
    PLUS_SIGN : NumberFormatSymbols_rn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_rn ,
    ZERO_DIGIT : NumberFormatSymbols_rn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_rn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_rn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale rn_BI.
   */
  type NumberFormatSymbols_rn_BI = string ;
  var NumberFormatSymbols_rn_BI : {
    CURRENCY_PATTERN : NumberFormatSymbols_rn_BI ,
    DECIMAL_PATTERN : NumberFormatSymbols_rn_BI ,
    DECIMAL_SEP : NumberFormatSymbols_rn_BI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_rn_BI ,
    EXP_SYMBOL : NumberFormatSymbols_rn_BI ,
    GROUP_SEP : NumberFormatSymbols_rn_BI ,
    INFINITY : NumberFormatSymbols_rn_BI ,
    MINUS_SIGN : NumberFormatSymbols_rn_BI ,
    NAN : NumberFormatSymbols_rn_BI ,
    PERCENT : NumberFormatSymbols_rn_BI ,
    PERCENT_PATTERN : NumberFormatSymbols_rn_BI ,
    PERMILL : NumberFormatSymbols_rn_BI ,
    PLUS_SIGN : NumberFormatSymbols_rn_BI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_rn_BI ,
    ZERO_DIGIT : NumberFormatSymbols_rn_BI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_rn_BI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rn_BI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_rn_BI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rn_BI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ro.
   */
  type NumberFormatSymbols_ro = string ;
  var NumberFormatSymbols_ro : {
    CURRENCY_PATTERN : NumberFormatSymbols_ro ,
    DECIMAL_PATTERN : NumberFormatSymbols_ro ,
    DECIMAL_SEP : NumberFormatSymbols_ro ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ro ,
    EXP_SYMBOL : NumberFormatSymbols_ro ,
    GROUP_SEP : NumberFormatSymbols_ro ,
    INFINITY : NumberFormatSymbols_ro ,
    MINUS_SIGN : NumberFormatSymbols_ro ,
    NAN : NumberFormatSymbols_ro ,
    PERCENT : NumberFormatSymbols_ro ,
    PERCENT_PATTERN : NumberFormatSymbols_ro ,
    PERMILL : NumberFormatSymbols_ro ,
    PLUS_SIGN : NumberFormatSymbols_ro ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ro ,
    ZERO_DIGIT : NumberFormatSymbols_ro ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ro'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ro;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ro' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ro;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ro_MD.
   */
  type NumberFormatSymbols_ro_MD = string ;
  var NumberFormatSymbols_ro_MD : {
    CURRENCY_PATTERN : NumberFormatSymbols_ro_MD ,
    DECIMAL_PATTERN : NumberFormatSymbols_ro_MD ,
    DECIMAL_SEP : NumberFormatSymbols_ro_MD ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ro_MD ,
    EXP_SYMBOL : NumberFormatSymbols_ro_MD ,
    GROUP_SEP : NumberFormatSymbols_ro_MD ,
    INFINITY : NumberFormatSymbols_ro_MD ,
    MINUS_SIGN : NumberFormatSymbols_ro_MD ,
    NAN : NumberFormatSymbols_ro_MD ,
    PERCENT : NumberFormatSymbols_ro_MD ,
    PERCENT_PATTERN : NumberFormatSymbols_ro_MD ,
    PERMILL : NumberFormatSymbols_ro_MD ,
    PLUS_SIGN : NumberFormatSymbols_ro_MD ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ro_MD ,
    ZERO_DIGIT : NumberFormatSymbols_ro_MD ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ro_MD'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ro_MD;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ro_MD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ro_MD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ro_RO.
   */
  type NumberFormatSymbols_ro_RO = string ;
  var NumberFormatSymbols_ro_RO : {
    CURRENCY_PATTERN : NumberFormatSymbols_ro_RO ,
    DECIMAL_PATTERN : NumberFormatSymbols_ro_RO ,
    DECIMAL_SEP : NumberFormatSymbols_ro_RO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ro_RO ,
    EXP_SYMBOL : NumberFormatSymbols_ro_RO ,
    GROUP_SEP : NumberFormatSymbols_ro_RO ,
    INFINITY : NumberFormatSymbols_ro_RO ,
    MINUS_SIGN : NumberFormatSymbols_ro_RO ,
    NAN : NumberFormatSymbols_ro_RO ,
    PERCENT : NumberFormatSymbols_ro_RO ,
    PERCENT_PATTERN : NumberFormatSymbols_ro_RO ,
    PERMILL : NumberFormatSymbols_ro_RO ,
    PLUS_SIGN : NumberFormatSymbols_ro_RO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ro_RO ,
    ZERO_DIGIT : NumberFormatSymbols_ro_RO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ro_RO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ro_RO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ro_RO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ro_RO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale rof.
   */
  type NumberFormatSymbols_rof = string ;
  var NumberFormatSymbols_rof : {
    CURRENCY_PATTERN : NumberFormatSymbols_rof ,
    DECIMAL_PATTERN : NumberFormatSymbols_rof ,
    DECIMAL_SEP : NumberFormatSymbols_rof ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_rof ,
    EXP_SYMBOL : NumberFormatSymbols_rof ,
    GROUP_SEP : NumberFormatSymbols_rof ,
    INFINITY : NumberFormatSymbols_rof ,
    MINUS_SIGN : NumberFormatSymbols_rof ,
    NAN : NumberFormatSymbols_rof ,
    PERCENT : NumberFormatSymbols_rof ,
    PERCENT_PATTERN : NumberFormatSymbols_rof ,
    PERMILL : NumberFormatSymbols_rof ,
    PLUS_SIGN : NumberFormatSymbols_rof ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_rof ,
    ZERO_DIGIT : NumberFormatSymbols_rof ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_rof'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rof;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_rof' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rof;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale rof_TZ.
   */
  type NumberFormatSymbols_rof_TZ = string ;
  var NumberFormatSymbols_rof_TZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_rof_TZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_rof_TZ ,
    DECIMAL_SEP : NumberFormatSymbols_rof_TZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_rof_TZ ,
    EXP_SYMBOL : NumberFormatSymbols_rof_TZ ,
    GROUP_SEP : NumberFormatSymbols_rof_TZ ,
    INFINITY : NumberFormatSymbols_rof_TZ ,
    MINUS_SIGN : NumberFormatSymbols_rof_TZ ,
    NAN : NumberFormatSymbols_rof_TZ ,
    PERCENT : NumberFormatSymbols_rof_TZ ,
    PERCENT_PATTERN : NumberFormatSymbols_rof_TZ ,
    PERMILL : NumberFormatSymbols_rof_TZ ,
    PLUS_SIGN : NumberFormatSymbols_rof_TZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_rof_TZ ,
    ZERO_DIGIT : NumberFormatSymbols_rof_TZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_rof_TZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rof_TZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_rof_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rof_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ru.
   */
  type NumberFormatSymbols_ru = string ;
  var NumberFormatSymbols_ru : {
    CURRENCY_PATTERN : NumberFormatSymbols_ru ,
    DECIMAL_PATTERN : NumberFormatSymbols_ru ,
    DECIMAL_SEP : NumberFormatSymbols_ru ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ru ,
    EXP_SYMBOL : NumberFormatSymbols_ru ,
    GROUP_SEP : NumberFormatSymbols_ru ,
    INFINITY : NumberFormatSymbols_ru ,
    MINUS_SIGN : NumberFormatSymbols_ru ,
    NAN : NumberFormatSymbols_ru ,
    PERCENT : NumberFormatSymbols_ru ,
    PERCENT_PATTERN : NumberFormatSymbols_ru ,
    PERMILL : NumberFormatSymbols_ru ,
    PLUS_SIGN : NumberFormatSymbols_ru ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ru ,
    ZERO_DIGIT : NumberFormatSymbols_ru ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ru'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ru' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ru_BY.
   */
  type NumberFormatSymbols_ru_BY = string ;
  var NumberFormatSymbols_ru_BY : {
    CURRENCY_PATTERN : NumberFormatSymbols_ru_BY ,
    DECIMAL_PATTERN : NumberFormatSymbols_ru_BY ,
    DECIMAL_SEP : NumberFormatSymbols_ru_BY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ru_BY ,
    EXP_SYMBOL : NumberFormatSymbols_ru_BY ,
    GROUP_SEP : NumberFormatSymbols_ru_BY ,
    INFINITY : NumberFormatSymbols_ru_BY ,
    MINUS_SIGN : NumberFormatSymbols_ru_BY ,
    NAN : NumberFormatSymbols_ru_BY ,
    PERCENT : NumberFormatSymbols_ru_BY ,
    PERCENT_PATTERN : NumberFormatSymbols_ru_BY ,
    PERMILL : NumberFormatSymbols_ru_BY ,
    PLUS_SIGN : NumberFormatSymbols_ru_BY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ru_BY ,
    ZERO_DIGIT : NumberFormatSymbols_ru_BY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ru_BY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru_BY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ru_BY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru_BY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ru_KG.
   */
  type NumberFormatSymbols_ru_KG = string ;
  var NumberFormatSymbols_ru_KG : {
    CURRENCY_PATTERN : NumberFormatSymbols_ru_KG ,
    DECIMAL_PATTERN : NumberFormatSymbols_ru_KG ,
    DECIMAL_SEP : NumberFormatSymbols_ru_KG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ru_KG ,
    EXP_SYMBOL : NumberFormatSymbols_ru_KG ,
    GROUP_SEP : NumberFormatSymbols_ru_KG ,
    INFINITY : NumberFormatSymbols_ru_KG ,
    MINUS_SIGN : NumberFormatSymbols_ru_KG ,
    NAN : NumberFormatSymbols_ru_KG ,
    PERCENT : NumberFormatSymbols_ru_KG ,
    PERCENT_PATTERN : NumberFormatSymbols_ru_KG ,
    PERMILL : NumberFormatSymbols_ru_KG ,
    PLUS_SIGN : NumberFormatSymbols_ru_KG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ru_KG ,
    ZERO_DIGIT : NumberFormatSymbols_ru_KG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ru_KG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru_KG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ru_KG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru_KG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ru_KZ.
   */
  type NumberFormatSymbols_ru_KZ = string ;
  var NumberFormatSymbols_ru_KZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_ru_KZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_ru_KZ ,
    DECIMAL_SEP : NumberFormatSymbols_ru_KZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ru_KZ ,
    EXP_SYMBOL : NumberFormatSymbols_ru_KZ ,
    GROUP_SEP : NumberFormatSymbols_ru_KZ ,
    INFINITY : NumberFormatSymbols_ru_KZ ,
    MINUS_SIGN : NumberFormatSymbols_ru_KZ ,
    NAN : NumberFormatSymbols_ru_KZ ,
    PERCENT : NumberFormatSymbols_ru_KZ ,
    PERCENT_PATTERN : NumberFormatSymbols_ru_KZ ,
    PERMILL : NumberFormatSymbols_ru_KZ ,
    PLUS_SIGN : NumberFormatSymbols_ru_KZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ru_KZ ,
    ZERO_DIGIT : NumberFormatSymbols_ru_KZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ru_KZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru_KZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ru_KZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru_KZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ru_MD.
   */
  type NumberFormatSymbols_ru_MD = string ;
  var NumberFormatSymbols_ru_MD : {
    CURRENCY_PATTERN : NumberFormatSymbols_ru_MD ,
    DECIMAL_PATTERN : NumberFormatSymbols_ru_MD ,
    DECIMAL_SEP : NumberFormatSymbols_ru_MD ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ru_MD ,
    EXP_SYMBOL : NumberFormatSymbols_ru_MD ,
    GROUP_SEP : NumberFormatSymbols_ru_MD ,
    INFINITY : NumberFormatSymbols_ru_MD ,
    MINUS_SIGN : NumberFormatSymbols_ru_MD ,
    NAN : NumberFormatSymbols_ru_MD ,
    PERCENT : NumberFormatSymbols_ru_MD ,
    PERCENT_PATTERN : NumberFormatSymbols_ru_MD ,
    PERMILL : NumberFormatSymbols_ru_MD ,
    PLUS_SIGN : NumberFormatSymbols_ru_MD ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ru_MD ,
    ZERO_DIGIT : NumberFormatSymbols_ru_MD ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ru_MD'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru_MD;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ru_MD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru_MD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ru_RU.
   */
  type NumberFormatSymbols_ru_RU = string ;
  var NumberFormatSymbols_ru_RU : {
    CURRENCY_PATTERN : NumberFormatSymbols_ru_RU ,
    DECIMAL_PATTERN : NumberFormatSymbols_ru_RU ,
    DECIMAL_SEP : NumberFormatSymbols_ru_RU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ru_RU ,
    EXP_SYMBOL : NumberFormatSymbols_ru_RU ,
    GROUP_SEP : NumberFormatSymbols_ru_RU ,
    INFINITY : NumberFormatSymbols_ru_RU ,
    MINUS_SIGN : NumberFormatSymbols_ru_RU ,
    NAN : NumberFormatSymbols_ru_RU ,
    PERCENT : NumberFormatSymbols_ru_RU ,
    PERCENT_PATTERN : NumberFormatSymbols_ru_RU ,
    PERMILL : NumberFormatSymbols_ru_RU ,
    PLUS_SIGN : NumberFormatSymbols_ru_RU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ru_RU ,
    ZERO_DIGIT : NumberFormatSymbols_ru_RU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ru_RU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru_RU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ru_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ru_UA.
   */
  type NumberFormatSymbols_ru_UA = string ;
  var NumberFormatSymbols_ru_UA : {
    CURRENCY_PATTERN : NumberFormatSymbols_ru_UA ,
    DECIMAL_PATTERN : NumberFormatSymbols_ru_UA ,
    DECIMAL_SEP : NumberFormatSymbols_ru_UA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ru_UA ,
    EXP_SYMBOL : NumberFormatSymbols_ru_UA ,
    GROUP_SEP : NumberFormatSymbols_ru_UA ,
    INFINITY : NumberFormatSymbols_ru_UA ,
    MINUS_SIGN : NumberFormatSymbols_ru_UA ,
    NAN : NumberFormatSymbols_ru_UA ,
    PERCENT : NumberFormatSymbols_ru_UA ,
    PERCENT_PATTERN : NumberFormatSymbols_ru_UA ,
    PERMILL : NumberFormatSymbols_ru_UA ,
    PLUS_SIGN : NumberFormatSymbols_ru_UA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ru_UA ,
    ZERO_DIGIT : NumberFormatSymbols_ru_UA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ru_UA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru_UA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ru_UA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ru_UA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale rw.
   */
  type NumberFormatSymbols_rw = string ;
  var NumberFormatSymbols_rw : {
    CURRENCY_PATTERN : NumberFormatSymbols_rw ,
    DECIMAL_PATTERN : NumberFormatSymbols_rw ,
    DECIMAL_SEP : NumberFormatSymbols_rw ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_rw ,
    EXP_SYMBOL : NumberFormatSymbols_rw ,
    GROUP_SEP : NumberFormatSymbols_rw ,
    INFINITY : NumberFormatSymbols_rw ,
    MINUS_SIGN : NumberFormatSymbols_rw ,
    NAN : NumberFormatSymbols_rw ,
    PERCENT : NumberFormatSymbols_rw ,
    PERCENT_PATTERN : NumberFormatSymbols_rw ,
    PERMILL : NumberFormatSymbols_rw ,
    PLUS_SIGN : NumberFormatSymbols_rw ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_rw ,
    ZERO_DIGIT : NumberFormatSymbols_rw ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_rw'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rw;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_rw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale rw_RW.
   */
  type NumberFormatSymbols_rw_RW = string ;
  var NumberFormatSymbols_rw_RW : {
    CURRENCY_PATTERN : NumberFormatSymbols_rw_RW ,
    DECIMAL_PATTERN : NumberFormatSymbols_rw_RW ,
    DECIMAL_SEP : NumberFormatSymbols_rw_RW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_rw_RW ,
    EXP_SYMBOL : NumberFormatSymbols_rw_RW ,
    GROUP_SEP : NumberFormatSymbols_rw_RW ,
    INFINITY : NumberFormatSymbols_rw_RW ,
    MINUS_SIGN : NumberFormatSymbols_rw_RW ,
    NAN : NumberFormatSymbols_rw_RW ,
    PERCENT : NumberFormatSymbols_rw_RW ,
    PERCENT_PATTERN : NumberFormatSymbols_rw_RW ,
    PERMILL : NumberFormatSymbols_rw_RW ,
    PLUS_SIGN : NumberFormatSymbols_rw_RW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_rw_RW ,
    ZERO_DIGIT : NumberFormatSymbols_rw_RW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_rw_RW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rw_RW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_rw_RW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rw_RW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale rwk.
   */
  type NumberFormatSymbols_rwk = string ;
  var NumberFormatSymbols_rwk : {
    CURRENCY_PATTERN : NumberFormatSymbols_rwk ,
    DECIMAL_PATTERN : NumberFormatSymbols_rwk ,
    DECIMAL_SEP : NumberFormatSymbols_rwk ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_rwk ,
    EXP_SYMBOL : NumberFormatSymbols_rwk ,
    GROUP_SEP : NumberFormatSymbols_rwk ,
    INFINITY : NumberFormatSymbols_rwk ,
    MINUS_SIGN : NumberFormatSymbols_rwk ,
    NAN : NumberFormatSymbols_rwk ,
    PERCENT : NumberFormatSymbols_rwk ,
    PERCENT_PATTERN : NumberFormatSymbols_rwk ,
    PERMILL : NumberFormatSymbols_rwk ,
    PLUS_SIGN : NumberFormatSymbols_rwk ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_rwk ,
    ZERO_DIGIT : NumberFormatSymbols_rwk ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_rwk'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rwk;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_rwk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rwk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale rwk_TZ.
   */
  type NumberFormatSymbols_rwk_TZ = string ;
  var NumberFormatSymbols_rwk_TZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_rwk_TZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_rwk_TZ ,
    DECIMAL_SEP : NumberFormatSymbols_rwk_TZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_rwk_TZ ,
    EXP_SYMBOL : NumberFormatSymbols_rwk_TZ ,
    GROUP_SEP : NumberFormatSymbols_rwk_TZ ,
    INFINITY : NumberFormatSymbols_rwk_TZ ,
    MINUS_SIGN : NumberFormatSymbols_rwk_TZ ,
    NAN : NumberFormatSymbols_rwk_TZ ,
    PERCENT : NumberFormatSymbols_rwk_TZ ,
    PERCENT_PATTERN : NumberFormatSymbols_rwk_TZ ,
    PERMILL : NumberFormatSymbols_rwk_TZ ,
    PLUS_SIGN : NumberFormatSymbols_rwk_TZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_rwk_TZ ,
    ZERO_DIGIT : NumberFormatSymbols_rwk_TZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_rwk_TZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rwk_TZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_rwk_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_rwk_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sah.
   */
  type NumberFormatSymbols_sah = string ;
  var NumberFormatSymbols_sah : {
    CURRENCY_PATTERN : NumberFormatSymbols_sah ,
    DECIMAL_PATTERN : NumberFormatSymbols_sah ,
    DECIMAL_SEP : NumberFormatSymbols_sah ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sah ,
    EXP_SYMBOL : NumberFormatSymbols_sah ,
    GROUP_SEP : NumberFormatSymbols_sah ,
    INFINITY : NumberFormatSymbols_sah ,
    MINUS_SIGN : NumberFormatSymbols_sah ,
    NAN : NumberFormatSymbols_sah ,
    PERCENT : NumberFormatSymbols_sah ,
    PERCENT_PATTERN : NumberFormatSymbols_sah ,
    PERMILL : NumberFormatSymbols_sah ,
    PLUS_SIGN : NumberFormatSymbols_sah ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sah ,
    ZERO_DIGIT : NumberFormatSymbols_sah ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sah'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sah;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sah' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sah;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sah_RU.
   */
  type NumberFormatSymbols_sah_RU = string ;
  var NumberFormatSymbols_sah_RU : {
    CURRENCY_PATTERN : NumberFormatSymbols_sah_RU ,
    DECIMAL_PATTERN : NumberFormatSymbols_sah_RU ,
    DECIMAL_SEP : NumberFormatSymbols_sah_RU ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sah_RU ,
    EXP_SYMBOL : NumberFormatSymbols_sah_RU ,
    GROUP_SEP : NumberFormatSymbols_sah_RU ,
    INFINITY : NumberFormatSymbols_sah_RU ,
    MINUS_SIGN : NumberFormatSymbols_sah_RU ,
    NAN : NumberFormatSymbols_sah_RU ,
    PERCENT : NumberFormatSymbols_sah_RU ,
    PERCENT_PATTERN : NumberFormatSymbols_sah_RU ,
    PERMILL : NumberFormatSymbols_sah_RU ,
    PLUS_SIGN : NumberFormatSymbols_sah_RU ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sah_RU ,
    ZERO_DIGIT : NumberFormatSymbols_sah_RU ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sah_RU'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sah_RU;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sah_RU' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sah_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale saq.
   */
  type NumberFormatSymbols_saq = string ;
  var NumberFormatSymbols_saq : {
    CURRENCY_PATTERN : NumberFormatSymbols_saq ,
    DECIMAL_PATTERN : NumberFormatSymbols_saq ,
    DECIMAL_SEP : NumberFormatSymbols_saq ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_saq ,
    EXP_SYMBOL : NumberFormatSymbols_saq ,
    GROUP_SEP : NumberFormatSymbols_saq ,
    INFINITY : NumberFormatSymbols_saq ,
    MINUS_SIGN : NumberFormatSymbols_saq ,
    NAN : NumberFormatSymbols_saq ,
    PERCENT : NumberFormatSymbols_saq ,
    PERCENT_PATTERN : NumberFormatSymbols_saq ,
    PERMILL : NumberFormatSymbols_saq ,
    PLUS_SIGN : NumberFormatSymbols_saq ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_saq ,
    ZERO_DIGIT : NumberFormatSymbols_saq ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_saq'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_saq;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_saq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_saq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale saq_KE.
   */
  type NumberFormatSymbols_saq_KE = string ;
  var NumberFormatSymbols_saq_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_saq_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_saq_KE ,
    DECIMAL_SEP : NumberFormatSymbols_saq_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_saq_KE ,
    EXP_SYMBOL : NumberFormatSymbols_saq_KE ,
    GROUP_SEP : NumberFormatSymbols_saq_KE ,
    INFINITY : NumberFormatSymbols_saq_KE ,
    MINUS_SIGN : NumberFormatSymbols_saq_KE ,
    NAN : NumberFormatSymbols_saq_KE ,
    PERCENT : NumberFormatSymbols_saq_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_saq_KE ,
    PERMILL : NumberFormatSymbols_saq_KE ,
    PLUS_SIGN : NumberFormatSymbols_saq_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_saq_KE ,
    ZERO_DIGIT : NumberFormatSymbols_saq_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_saq_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_saq_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_saq_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_saq_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sbp.
   */
  type NumberFormatSymbols_sbp = string ;
  var NumberFormatSymbols_sbp : {
    CURRENCY_PATTERN : NumberFormatSymbols_sbp ,
    DECIMAL_PATTERN : NumberFormatSymbols_sbp ,
    DECIMAL_SEP : NumberFormatSymbols_sbp ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sbp ,
    EXP_SYMBOL : NumberFormatSymbols_sbp ,
    GROUP_SEP : NumberFormatSymbols_sbp ,
    INFINITY : NumberFormatSymbols_sbp ,
    MINUS_SIGN : NumberFormatSymbols_sbp ,
    NAN : NumberFormatSymbols_sbp ,
    PERCENT : NumberFormatSymbols_sbp ,
    PERCENT_PATTERN : NumberFormatSymbols_sbp ,
    PERMILL : NumberFormatSymbols_sbp ,
    PLUS_SIGN : NumberFormatSymbols_sbp ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sbp ,
    ZERO_DIGIT : NumberFormatSymbols_sbp ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sbp'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sbp;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sbp' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sbp;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sbp_TZ.
   */
  type NumberFormatSymbols_sbp_TZ = string ;
  var NumberFormatSymbols_sbp_TZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_sbp_TZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_sbp_TZ ,
    DECIMAL_SEP : NumberFormatSymbols_sbp_TZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sbp_TZ ,
    EXP_SYMBOL : NumberFormatSymbols_sbp_TZ ,
    GROUP_SEP : NumberFormatSymbols_sbp_TZ ,
    INFINITY : NumberFormatSymbols_sbp_TZ ,
    MINUS_SIGN : NumberFormatSymbols_sbp_TZ ,
    NAN : NumberFormatSymbols_sbp_TZ ,
    PERCENT : NumberFormatSymbols_sbp_TZ ,
    PERCENT_PATTERN : NumberFormatSymbols_sbp_TZ ,
    PERMILL : NumberFormatSymbols_sbp_TZ ,
    PLUS_SIGN : NumberFormatSymbols_sbp_TZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sbp_TZ ,
    ZERO_DIGIT : NumberFormatSymbols_sbp_TZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sbp_TZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sbp_TZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sbp_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sbp_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale se.
   */
  type NumberFormatSymbols_se = string ;
  var NumberFormatSymbols_se : {
    CURRENCY_PATTERN : NumberFormatSymbols_se ,
    DECIMAL_PATTERN : NumberFormatSymbols_se ,
    DECIMAL_SEP : NumberFormatSymbols_se ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_se ,
    EXP_SYMBOL : NumberFormatSymbols_se ,
    GROUP_SEP : NumberFormatSymbols_se ,
    INFINITY : NumberFormatSymbols_se ,
    MINUS_SIGN : NumberFormatSymbols_se ,
    NAN : NumberFormatSymbols_se ,
    PERCENT : NumberFormatSymbols_se ,
    PERCENT_PATTERN : NumberFormatSymbols_se ,
    PERMILL : NumberFormatSymbols_se ,
    PLUS_SIGN : NumberFormatSymbols_se ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_se ,
    ZERO_DIGIT : NumberFormatSymbols_se ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_se'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_se;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_se' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_se;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale se_FI.
   */
  type NumberFormatSymbols_se_FI = string ;
  var NumberFormatSymbols_se_FI : {
    CURRENCY_PATTERN : NumberFormatSymbols_se_FI ,
    DECIMAL_PATTERN : NumberFormatSymbols_se_FI ,
    DECIMAL_SEP : NumberFormatSymbols_se_FI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_se_FI ,
    EXP_SYMBOL : NumberFormatSymbols_se_FI ,
    GROUP_SEP : NumberFormatSymbols_se_FI ,
    INFINITY : NumberFormatSymbols_se_FI ,
    MINUS_SIGN : NumberFormatSymbols_se_FI ,
    NAN : NumberFormatSymbols_se_FI ,
    PERCENT : NumberFormatSymbols_se_FI ,
    PERCENT_PATTERN : NumberFormatSymbols_se_FI ,
    PERMILL : NumberFormatSymbols_se_FI ,
    PLUS_SIGN : NumberFormatSymbols_se_FI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_se_FI ,
    ZERO_DIGIT : NumberFormatSymbols_se_FI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_se_FI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_se_FI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_se_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_se_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale se_NO.
   */
  type NumberFormatSymbols_se_NO = string ;
  var NumberFormatSymbols_se_NO : {
    CURRENCY_PATTERN : NumberFormatSymbols_se_NO ,
    DECIMAL_PATTERN : NumberFormatSymbols_se_NO ,
    DECIMAL_SEP : NumberFormatSymbols_se_NO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_se_NO ,
    EXP_SYMBOL : NumberFormatSymbols_se_NO ,
    GROUP_SEP : NumberFormatSymbols_se_NO ,
    INFINITY : NumberFormatSymbols_se_NO ,
    MINUS_SIGN : NumberFormatSymbols_se_NO ,
    NAN : NumberFormatSymbols_se_NO ,
    PERCENT : NumberFormatSymbols_se_NO ,
    PERCENT_PATTERN : NumberFormatSymbols_se_NO ,
    PERMILL : NumberFormatSymbols_se_NO ,
    PLUS_SIGN : NumberFormatSymbols_se_NO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_se_NO ,
    ZERO_DIGIT : NumberFormatSymbols_se_NO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_se_NO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_se_NO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_se_NO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_se_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale se_SE.
   */
  type NumberFormatSymbols_se_SE = string ;
  var NumberFormatSymbols_se_SE : {
    CURRENCY_PATTERN : NumberFormatSymbols_se_SE ,
    DECIMAL_PATTERN : NumberFormatSymbols_se_SE ,
    DECIMAL_SEP : NumberFormatSymbols_se_SE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_se_SE ,
    EXP_SYMBOL : NumberFormatSymbols_se_SE ,
    GROUP_SEP : NumberFormatSymbols_se_SE ,
    INFINITY : NumberFormatSymbols_se_SE ,
    MINUS_SIGN : NumberFormatSymbols_se_SE ,
    NAN : NumberFormatSymbols_se_SE ,
    PERCENT : NumberFormatSymbols_se_SE ,
    PERCENT_PATTERN : NumberFormatSymbols_se_SE ,
    PERMILL : NumberFormatSymbols_se_SE ,
    PLUS_SIGN : NumberFormatSymbols_se_SE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_se_SE ,
    ZERO_DIGIT : NumberFormatSymbols_se_SE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_se_SE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_se_SE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_se_SE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_se_SE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale seh.
   */
  type NumberFormatSymbols_seh = string ;
  var NumberFormatSymbols_seh : {
    CURRENCY_PATTERN : NumberFormatSymbols_seh ,
    DECIMAL_PATTERN : NumberFormatSymbols_seh ,
    DECIMAL_SEP : NumberFormatSymbols_seh ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_seh ,
    EXP_SYMBOL : NumberFormatSymbols_seh ,
    GROUP_SEP : NumberFormatSymbols_seh ,
    INFINITY : NumberFormatSymbols_seh ,
    MINUS_SIGN : NumberFormatSymbols_seh ,
    NAN : NumberFormatSymbols_seh ,
    PERCENT : NumberFormatSymbols_seh ,
    PERCENT_PATTERN : NumberFormatSymbols_seh ,
    PERMILL : NumberFormatSymbols_seh ,
    PLUS_SIGN : NumberFormatSymbols_seh ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_seh ,
    ZERO_DIGIT : NumberFormatSymbols_seh ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_seh'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_seh;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_seh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_seh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale seh_MZ.
   */
  type NumberFormatSymbols_seh_MZ = string ;
  var NumberFormatSymbols_seh_MZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_seh_MZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_seh_MZ ,
    DECIMAL_SEP : NumberFormatSymbols_seh_MZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_seh_MZ ,
    EXP_SYMBOL : NumberFormatSymbols_seh_MZ ,
    GROUP_SEP : NumberFormatSymbols_seh_MZ ,
    INFINITY : NumberFormatSymbols_seh_MZ ,
    MINUS_SIGN : NumberFormatSymbols_seh_MZ ,
    NAN : NumberFormatSymbols_seh_MZ ,
    PERCENT : NumberFormatSymbols_seh_MZ ,
    PERCENT_PATTERN : NumberFormatSymbols_seh_MZ ,
    PERMILL : NumberFormatSymbols_seh_MZ ,
    PLUS_SIGN : NumberFormatSymbols_seh_MZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_seh_MZ ,
    ZERO_DIGIT : NumberFormatSymbols_seh_MZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_seh_MZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_seh_MZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_seh_MZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_seh_MZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ses.
   */
  type NumberFormatSymbols_ses = string ;
  var NumberFormatSymbols_ses : {
    CURRENCY_PATTERN : NumberFormatSymbols_ses ,
    DECIMAL_PATTERN : NumberFormatSymbols_ses ,
    DECIMAL_SEP : NumberFormatSymbols_ses ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ses ,
    EXP_SYMBOL : NumberFormatSymbols_ses ,
    GROUP_SEP : NumberFormatSymbols_ses ,
    INFINITY : NumberFormatSymbols_ses ,
    MINUS_SIGN : NumberFormatSymbols_ses ,
    NAN : NumberFormatSymbols_ses ,
    PERCENT : NumberFormatSymbols_ses ,
    PERCENT_PATTERN : NumberFormatSymbols_ses ,
    PERMILL : NumberFormatSymbols_ses ,
    PLUS_SIGN : NumberFormatSymbols_ses ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ses ,
    ZERO_DIGIT : NumberFormatSymbols_ses ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ses'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ses;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ses' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ses;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ses_ML.
   */
  type NumberFormatSymbols_ses_ML = string ;
  var NumberFormatSymbols_ses_ML : {
    CURRENCY_PATTERN : NumberFormatSymbols_ses_ML ,
    DECIMAL_PATTERN : NumberFormatSymbols_ses_ML ,
    DECIMAL_SEP : NumberFormatSymbols_ses_ML ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ses_ML ,
    EXP_SYMBOL : NumberFormatSymbols_ses_ML ,
    GROUP_SEP : NumberFormatSymbols_ses_ML ,
    INFINITY : NumberFormatSymbols_ses_ML ,
    MINUS_SIGN : NumberFormatSymbols_ses_ML ,
    NAN : NumberFormatSymbols_ses_ML ,
    PERCENT : NumberFormatSymbols_ses_ML ,
    PERCENT_PATTERN : NumberFormatSymbols_ses_ML ,
    PERMILL : NumberFormatSymbols_ses_ML ,
    PLUS_SIGN : NumberFormatSymbols_ses_ML ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ses_ML ,
    ZERO_DIGIT : NumberFormatSymbols_ses_ML ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ses_ML'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ses_ML;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ses_ML' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ses_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sg.
   */
  type NumberFormatSymbols_sg = string ;
  var NumberFormatSymbols_sg : {
    CURRENCY_PATTERN : NumberFormatSymbols_sg ,
    DECIMAL_PATTERN : NumberFormatSymbols_sg ,
    DECIMAL_SEP : NumberFormatSymbols_sg ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sg ,
    EXP_SYMBOL : NumberFormatSymbols_sg ,
    GROUP_SEP : NumberFormatSymbols_sg ,
    INFINITY : NumberFormatSymbols_sg ,
    MINUS_SIGN : NumberFormatSymbols_sg ,
    NAN : NumberFormatSymbols_sg ,
    PERCENT : NumberFormatSymbols_sg ,
    PERCENT_PATTERN : NumberFormatSymbols_sg ,
    PERMILL : NumberFormatSymbols_sg ,
    PLUS_SIGN : NumberFormatSymbols_sg ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sg ,
    ZERO_DIGIT : NumberFormatSymbols_sg ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sg'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sg;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sg' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sg_CF.
   */
  type NumberFormatSymbols_sg_CF = string ;
  var NumberFormatSymbols_sg_CF : {
    CURRENCY_PATTERN : NumberFormatSymbols_sg_CF ,
    DECIMAL_PATTERN : NumberFormatSymbols_sg_CF ,
    DECIMAL_SEP : NumberFormatSymbols_sg_CF ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sg_CF ,
    EXP_SYMBOL : NumberFormatSymbols_sg_CF ,
    GROUP_SEP : NumberFormatSymbols_sg_CF ,
    INFINITY : NumberFormatSymbols_sg_CF ,
    MINUS_SIGN : NumberFormatSymbols_sg_CF ,
    NAN : NumberFormatSymbols_sg_CF ,
    PERCENT : NumberFormatSymbols_sg_CF ,
    PERCENT_PATTERN : NumberFormatSymbols_sg_CF ,
    PERMILL : NumberFormatSymbols_sg_CF ,
    PLUS_SIGN : NumberFormatSymbols_sg_CF ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sg_CF ,
    ZERO_DIGIT : NumberFormatSymbols_sg_CF ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sg_CF'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sg_CF;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sg_CF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sg_CF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale shi.
   */
  type NumberFormatSymbols_shi = string ;
  var NumberFormatSymbols_shi : {
    CURRENCY_PATTERN : NumberFormatSymbols_shi ,
    DECIMAL_PATTERN : NumberFormatSymbols_shi ,
    DECIMAL_SEP : NumberFormatSymbols_shi ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_shi ,
    EXP_SYMBOL : NumberFormatSymbols_shi ,
    GROUP_SEP : NumberFormatSymbols_shi ,
    INFINITY : NumberFormatSymbols_shi ,
    MINUS_SIGN : NumberFormatSymbols_shi ,
    NAN : NumberFormatSymbols_shi ,
    PERCENT : NumberFormatSymbols_shi ,
    PERCENT_PATTERN : NumberFormatSymbols_shi ,
    PERMILL : NumberFormatSymbols_shi ,
    PLUS_SIGN : NumberFormatSymbols_shi ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_shi ,
    ZERO_DIGIT : NumberFormatSymbols_shi ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_shi'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_shi;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_shi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_shi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale shi_Latn.
   */
  type NumberFormatSymbols_shi_Latn = string ;
  var NumberFormatSymbols_shi_Latn : {
    CURRENCY_PATTERN : NumberFormatSymbols_shi_Latn ,
    DECIMAL_PATTERN : NumberFormatSymbols_shi_Latn ,
    DECIMAL_SEP : NumberFormatSymbols_shi_Latn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_shi_Latn ,
    EXP_SYMBOL : NumberFormatSymbols_shi_Latn ,
    GROUP_SEP : NumberFormatSymbols_shi_Latn ,
    INFINITY : NumberFormatSymbols_shi_Latn ,
    MINUS_SIGN : NumberFormatSymbols_shi_Latn ,
    NAN : NumberFormatSymbols_shi_Latn ,
    PERCENT : NumberFormatSymbols_shi_Latn ,
    PERCENT_PATTERN : NumberFormatSymbols_shi_Latn ,
    PERMILL : NumberFormatSymbols_shi_Latn ,
    PLUS_SIGN : NumberFormatSymbols_shi_Latn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_shi_Latn ,
    ZERO_DIGIT : NumberFormatSymbols_shi_Latn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_shi_Latn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_shi_Latn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_shi_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_shi_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale shi_Latn_MA.
   */
  type NumberFormatSymbols_shi_Latn_MA = string ;
  var NumberFormatSymbols_shi_Latn_MA : {
    CURRENCY_PATTERN : NumberFormatSymbols_shi_Latn_MA ,
    DECIMAL_PATTERN : NumberFormatSymbols_shi_Latn_MA ,
    DECIMAL_SEP : NumberFormatSymbols_shi_Latn_MA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_shi_Latn_MA ,
    EXP_SYMBOL : NumberFormatSymbols_shi_Latn_MA ,
    GROUP_SEP : NumberFormatSymbols_shi_Latn_MA ,
    INFINITY : NumberFormatSymbols_shi_Latn_MA ,
    MINUS_SIGN : NumberFormatSymbols_shi_Latn_MA ,
    NAN : NumberFormatSymbols_shi_Latn_MA ,
    PERCENT : NumberFormatSymbols_shi_Latn_MA ,
    PERCENT_PATTERN : NumberFormatSymbols_shi_Latn_MA ,
    PERMILL : NumberFormatSymbols_shi_Latn_MA ,
    PLUS_SIGN : NumberFormatSymbols_shi_Latn_MA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_shi_Latn_MA ,
    ZERO_DIGIT : NumberFormatSymbols_shi_Latn_MA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_shi_Latn_MA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_shi_Latn_MA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_shi_Latn_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_shi_Latn_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale shi_Tfng.
   */
  type NumberFormatSymbols_shi_Tfng = string ;
  var NumberFormatSymbols_shi_Tfng : {
    CURRENCY_PATTERN : NumberFormatSymbols_shi_Tfng ,
    DECIMAL_PATTERN : NumberFormatSymbols_shi_Tfng ,
    DECIMAL_SEP : NumberFormatSymbols_shi_Tfng ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_shi_Tfng ,
    EXP_SYMBOL : NumberFormatSymbols_shi_Tfng ,
    GROUP_SEP : NumberFormatSymbols_shi_Tfng ,
    INFINITY : NumberFormatSymbols_shi_Tfng ,
    MINUS_SIGN : NumberFormatSymbols_shi_Tfng ,
    NAN : NumberFormatSymbols_shi_Tfng ,
    PERCENT : NumberFormatSymbols_shi_Tfng ,
    PERCENT_PATTERN : NumberFormatSymbols_shi_Tfng ,
    PERMILL : NumberFormatSymbols_shi_Tfng ,
    PLUS_SIGN : NumberFormatSymbols_shi_Tfng ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_shi_Tfng ,
    ZERO_DIGIT : NumberFormatSymbols_shi_Tfng ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_shi_Tfng'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_shi_Tfng;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_shi_Tfng' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_shi_Tfng;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale shi_Tfng_MA.
   */
  type NumberFormatSymbols_shi_Tfng_MA = string ;
  var NumberFormatSymbols_shi_Tfng_MA : {
    CURRENCY_PATTERN : NumberFormatSymbols_shi_Tfng_MA ,
    DECIMAL_PATTERN : NumberFormatSymbols_shi_Tfng_MA ,
    DECIMAL_SEP : NumberFormatSymbols_shi_Tfng_MA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_shi_Tfng_MA ,
    EXP_SYMBOL : NumberFormatSymbols_shi_Tfng_MA ,
    GROUP_SEP : NumberFormatSymbols_shi_Tfng_MA ,
    INFINITY : NumberFormatSymbols_shi_Tfng_MA ,
    MINUS_SIGN : NumberFormatSymbols_shi_Tfng_MA ,
    NAN : NumberFormatSymbols_shi_Tfng_MA ,
    PERCENT : NumberFormatSymbols_shi_Tfng_MA ,
    PERCENT_PATTERN : NumberFormatSymbols_shi_Tfng_MA ,
    PERMILL : NumberFormatSymbols_shi_Tfng_MA ,
    PLUS_SIGN : NumberFormatSymbols_shi_Tfng_MA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_shi_Tfng_MA ,
    ZERO_DIGIT : NumberFormatSymbols_shi_Tfng_MA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_shi_Tfng_MA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_shi_Tfng_MA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_shi_Tfng_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_shi_Tfng_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale si.
   */
  type NumberFormatSymbols_si = string ;
  var NumberFormatSymbols_si : {
    CURRENCY_PATTERN : NumberFormatSymbols_si ,
    DECIMAL_PATTERN : NumberFormatSymbols_si ,
    DECIMAL_SEP : NumberFormatSymbols_si ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_si ,
    EXP_SYMBOL : NumberFormatSymbols_si ,
    GROUP_SEP : NumberFormatSymbols_si ,
    INFINITY : NumberFormatSymbols_si ,
    MINUS_SIGN : NumberFormatSymbols_si ,
    NAN : NumberFormatSymbols_si ,
    PERCENT : NumberFormatSymbols_si ,
    PERCENT_PATTERN : NumberFormatSymbols_si ,
    PERMILL : NumberFormatSymbols_si ,
    PLUS_SIGN : NumberFormatSymbols_si ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_si ,
    ZERO_DIGIT : NumberFormatSymbols_si ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_si'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_si;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_si' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_si;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale si_LK.
   */
  type NumberFormatSymbols_si_LK = string ;
  var NumberFormatSymbols_si_LK : {
    CURRENCY_PATTERN : NumberFormatSymbols_si_LK ,
    DECIMAL_PATTERN : NumberFormatSymbols_si_LK ,
    DECIMAL_SEP : NumberFormatSymbols_si_LK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_si_LK ,
    EXP_SYMBOL : NumberFormatSymbols_si_LK ,
    GROUP_SEP : NumberFormatSymbols_si_LK ,
    INFINITY : NumberFormatSymbols_si_LK ,
    MINUS_SIGN : NumberFormatSymbols_si_LK ,
    NAN : NumberFormatSymbols_si_LK ,
    PERCENT : NumberFormatSymbols_si_LK ,
    PERCENT_PATTERN : NumberFormatSymbols_si_LK ,
    PERMILL : NumberFormatSymbols_si_LK ,
    PLUS_SIGN : NumberFormatSymbols_si_LK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_si_LK ,
    ZERO_DIGIT : NumberFormatSymbols_si_LK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_si_LK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_si_LK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_si_LK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_si_LK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sk.
   */
  type NumberFormatSymbols_sk = string ;
  var NumberFormatSymbols_sk : {
    CURRENCY_PATTERN : NumberFormatSymbols_sk ,
    DECIMAL_PATTERN : NumberFormatSymbols_sk ,
    DECIMAL_SEP : NumberFormatSymbols_sk ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sk ,
    EXP_SYMBOL : NumberFormatSymbols_sk ,
    GROUP_SEP : NumberFormatSymbols_sk ,
    INFINITY : NumberFormatSymbols_sk ,
    MINUS_SIGN : NumberFormatSymbols_sk ,
    NAN : NumberFormatSymbols_sk ,
    PERCENT : NumberFormatSymbols_sk ,
    PERCENT_PATTERN : NumberFormatSymbols_sk ,
    PERMILL : NumberFormatSymbols_sk ,
    PLUS_SIGN : NumberFormatSymbols_sk ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sk ,
    ZERO_DIGIT : NumberFormatSymbols_sk ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sk'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sk;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sk_SK.
   */
  type NumberFormatSymbols_sk_SK = string ;
  var NumberFormatSymbols_sk_SK : {
    CURRENCY_PATTERN : NumberFormatSymbols_sk_SK ,
    DECIMAL_PATTERN : NumberFormatSymbols_sk_SK ,
    DECIMAL_SEP : NumberFormatSymbols_sk_SK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sk_SK ,
    EXP_SYMBOL : NumberFormatSymbols_sk_SK ,
    GROUP_SEP : NumberFormatSymbols_sk_SK ,
    INFINITY : NumberFormatSymbols_sk_SK ,
    MINUS_SIGN : NumberFormatSymbols_sk_SK ,
    NAN : NumberFormatSymbols_sk_SK ,
    PERCENT : NumberFormatSymbols_sk_SK ,
    PERCENT_PATTERN : NumberFormatSymbols_sk_SK ,
    PERMILL : NumberFormatSymbols_sk_SK ,
    PLUS_SIGN : NumberFormatSymbols_sk_SK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sk_SK ,
    ZERO_DIGIT : NumberFormatSymbols_sk_SK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sk_SK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sk_SK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sk_SK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sk_SK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sl.
   */
  type NumberFormatSymbols_sl = string ;
  var NumberFormatSymbols_sl : {
    CURRENCY_PATTERN : NumberFormatSymbols_sl ,
    DECIMAL_PATTERN : NumberFormatSymbols_sl ,
    DECIMAL_SEP : NumberFormatSymbols_sl ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sl ,
    EXP_SYMBOL : NumberFormatSymbols_sl ,
    GROUP_SEP : NumberFormatSymbols_sl ,
    INFINITY : NumberFormatSymbols_sl ,
    MINUS_SIGN : NumberFormatSymbols_sl ,
    NAN : NumberFormatSymbols_sl ,
    PERCENT : NumberFormatSymbols_sl ,
    PERCENT_PATTERN : NumberFormatSymbols_sl ,
    PERMILL : NumberFormatSymbols_sl ,
    PLUS_SIGN : NumberFormatSymbols_sl ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sl ,
    ZERO_DIGIT : NumberFormatSymbols_sl ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sl'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sl;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sl_SI.
   */
  type NumberFormatSymbols_sl_SI = string ;
  var NumberFormatSymbols_sl_SI : {
    CURRENCY_PATTERN : NumberFormatSymbols_sl_SI ,
    DECIMAL_PATTERN : NumberFormatSymbols_sl_SI ,
    DECIMAL_SEP : NumberFormatSymbols_sl_SI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sl_SI ,
    EXP_SYMBOL : NumberFormatSymbols_sl_SI ,
    GROUP_SEP : NumberFormatSymbols_sl_SI ,
    INFINITY : NumberFormatSymbols_sl_SI ,
    MINUS_SIGN : NumberFormatSymbols_sl_SI ,
    NAN : NumberFormatSymbols_sl_SI ,
    PERCENT : NumberFormatSymbols_sl_SI ,
    PERCENT_PATTERN : NumberFormatSymbols_sl_SI ,
    PERMILL : NumberFormatSymbols_sl_SI ,
    PLUS_SIGN : NumberFormatSymbols_sl_SI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sl_SI ,
    ZERO_DIGIT : NumberFormatSymbols_sl_SI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sl_SI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sl_SI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sl_SI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sl_SI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale smn.
   */
  type NumberFormatSymbols_smn = string ;
  var NumberFormatSymbols_smn : {
    CURRENCY_PATTERN : NumberFormatSymbols_smn ,
    DECIMAL_PATTERN : NumberFormatSymbols_smn ,
    DECIMAL_SEP : NumberFormatSymbols_smn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_smn ,
    EXP_SYMBOL : NumberFormatSymbols_smn ,
    GROUP_SEP : NumberFormatSymbols_smn ,
    INFINITY : NumberFormatSymbols_smn ,
    MINUS_SIGN : NumberFormatSymbols_smn ,
    NAN : NumberFormatSymbols_smn ,
    PERCENT : NumberFormatSymbols_smn ,
    PERCENT_PATTERN : NumberFormatSymbols_smn ,
    PERMILL : NumberFormatSymbols_smn ,
    PLUS_SIGN : NumberFormatSymbols_smn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_smn ,
    ZERO_DIGIT : NumberFormatSymbols_smn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_smn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_smn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_smn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_smn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale smn_FI.
   */
  type NumberFormatSymbols_smn_FI = string ;
  var NumberFormatSymbols_smn_FI : {
    CURRENCY_PATTERN : NumberFormatSymbols_smn_FI ,
    DECIMAL_PATTERN : NumberFormatSymbols_smn_FI ,
    DECIMAL_SEP : NumberFormatSymbols_smn_FI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_smn_FI ,
    EXP_SYMBOL : NumberFormatSymbols_smn_FI ,
    GROUP_SEP : NumberFormatSymbols_smn_FI ,
    INFINITY : NumberFormatSymbols_smn_FI ,
    MINUS_SIGN : NumberFormatSymbols_smn_FI ,
    NAN : NumberFormatSymbols_smn_FI ,
    PERCENT : NumberFormatSymbols_smn_FI ,
    PERCENT_PATTERN : NumberFormatSymbols_smn_FI ,
    PERMILL : NumberFormatSymbols_smn_FI ,
    PLUS_SIGN : NumberFormatSymbols_smn_FI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_smn_FI ,
    ZERO_DIGIT : NumberFormatSymbols_smn_FI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_smn_FI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_smn_FI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_smn_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_smn_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sn.
   */
  type NumberFormatSymbols_sn = string ;
  var NumberFormatSymbols_sn : {
    CURRENCY_PATTERN : NumberFormatSymbols_sn ,
    DECIMAL_PATTERN : NumberFormatSymbols_sn ,
    DECIMAL_SEP : NumberFormatSymbols_sn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sn ,
    EXP_SYMBOL : NumberFormatSymbols_sn ,
    GROUP_SEP : NumberFormatSymbols_sn ,
    INFINITY : NumberFormatSymbols_sn ,
    MINUS_SIGN : NumberFormatSymbols_sn ,
    NAN : NumberFormatSymbols_sn ,
    PERCENT : NumberFormatSymbols_sn ,
    PERCENT_PATTERN : NumberFormatSymbols_sn ,
    PERMILL : NumberFormatSymbols_sn ,
    PLUS_SIGN : NumberFormatSymbols_sn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sn ,
    ZERO_DIGIT : NumberFormatSymbols_sn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sn_ZW.
   */
  type NumberFormatSymbols_sn_ZW = string ;
  var NumberFormatSymbols_sn_ZW : {
    CURRENCY_PATTERN : NumberFormatSymbols_sn_ZW ,
    DECIMAL_PATTERN : NumberFormatSymbols_sn_ZW ,
    DECIMAL_SEP : NumberFormatSymbols_sn_ZW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sn_ZW ,
    EXP_SYMBOL : NumberFormatSymbols_sn_ZW ,
    GROUP_SEP : NumberFormatSymbols_sn_ZW ,
    INFINITY : NumberFormatSymbols_sn_ZW ,
    MINUS_SIGN : NumberFormatSymbols_sn_ZW ,
    NAN : NumberFormatSymbols_sn_ZW ,
    PERCENT : NumberFormatSymbols_sn_ZW ,
    PERCENT_PATTERN : NumberFormatSymbols_sn_ZW ,
    PERMILL : NumberFormatSymbols_sn_ZW ,
    PLUS_SIGN : NumberFormatSymbols_sn_ZW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sn_ZW ,
    ZERO_DIGIT : NumberFormatSymbols_sn_ZW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sn_ZW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sn_ZW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sn_ZW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sn_ZW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale so.
   */
  type NumberFormatSymbols_so = string ;
  var NumberFormatSymbols_so : {
    CURRENCY_PATTERN : NumberFormatSymbols_so ,
    DECIMAL_PATTERN : NumberFormatSymbols_so ,
    DECIMAL_SEP : NumberFormatSymbols_so ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_so ,
    EXP_SYMBOL : NumberFormatSymbols_so ,
    GROUP_SEP : NumberFormatSymbols_so ,
    INFINITY : NumberFormatSymbols_so ,
    MINUS_SIGN : NumberFormatSymbols_so ,
    NAN : NumberFormatSymbols_so ,
    PERCENT : NumberFormatSymbols_so ,
    PERCENT_PATTERN : NumberFormatSymbols_so ,
    PERMILL : NumberFormatSymbols_so ,
    PLUS_SIGN : NumberFormatSymbols_so ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_so ,
    ZERO_DIGIT : NumberFormatSymbols_so ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_so'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_so;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_so' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_so;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale so_DJ.
   */
  type NumberFormatSymbols_so_DJ = string ;
  var NumberFormatSymbols_so_DJ : {
    CURRENCY_PATTERN : NumberFormatSymbols_so_DJ ,
    DECIMAL_PATTERN : NumberFormatSymbols_so_DJ ,
    DECIMAL_SEP : NumberFormatSymbols_so_DJ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_so_DJ ,
    EXP_SYMBOL : NumberFormatSymbols_so_DJ ,
    GROUP_SEP : NumberFormatSymbols_so_DJ ,
    INFINITY : NumberFormatSymbols_so_DJ ,
    MINUS_SIGN : NumberFormatSymbols_so_DJ ,
    NAN : NumberFormatSymbols_so_DJ ,
    PERCENT : NumberFormatSymbols_so_DJ ,
    PERCENT_PATTERN : NumberFormatSymbols_so_DJ ,
    PERMILL : NumberFormatSymbols_so_DJ ,
    PLUS_SIGN : NumberFormatSymbols_so_DJ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_so_DJ ,
    ZERO_DIGIT : NumberFormatSymbols_so_DJ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_so_DJ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_so_DJ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_so_DJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_so_DJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale so_ET.
   */
  type NumberFormatSymbols_so_ET = string ;
  var NumberFormatSymbols_so_ET : {
    CURRENCY_PATTERN : NumberFormatSymbols_so_ET ,
    DECIMAL_PATTERN : NumberFormatSymbols_so_ET ,
    DECIMAL_SEP : NumberFormatSymbols_so_ET ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_so_ET ,
    EXP_SYMBOL : NumberFormatSymbols_so_ET ,
    GROUP_SEP : NumberFormatSymbols_so_ET ,
    INFINITY : NumberFormatSymbols_so_ET ,
    MINUS_SIGN : NumberFormatSymbols_so_ET ,
    NAN : NumberFormatSymbols_so_ET ,
    PERCENT : NumberFormatSymbols_so_ET ,
    PERCENT_PATTERN : NumberFormatSymbols_so_ET ,
    PERMILL : NumberFormatSymbols_so_ET ,
    PLUS_SIGN : NumberFormatSymbols_so_ET ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_so_ET ,
    ZERO_DIGIT : NumberFormatSymbols_so_ET ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_so_ET'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_so_ET;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_so_ET' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_so_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale so_KE.
   */
  type NumberFormatSymbols_so_KE = string ;
  var NumberFormatSymbols_so_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_so_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_so_KE ,
    DECIMAL_SEP : NumberFormatSymbols_so_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_so_KE ,
    EXP_SYMBOL : NumberFormatSymbols_so_KE ,
    GROUP_SEP : NumberFormatSymbols_so_KE ,
    INFINITY : NumberFormatSymbols_so_KE ,
    MINUS_SIGN : NumberFormatSymbols_so_KE ,
    NAN : NumberFormatSymbols_so_KE ,
    PERCENT : NumberFormatSymbols_so_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_so_KE ,
    PERMILL : NumberFormatSymbols_so_KE ,
    PLUS_SIGN : NumberFormatSymbols_so_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_so_KE ,
    ZERO_DIGIT : NumberFormatSymbols_so_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_so_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_so_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_so_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_so_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale so_SO.
   */
  type NumberFormatSymbols_so_SO = string ;
  var NumberFormatSymbols_so_SO : {
    CURRENCY_PATTERN : NumberFormatSymbols_so_SO ,
    DECIMAL_PATTERN : NumberFormatSymbols_so_SO ,
    DECIMAL_SEP : NumberFormatSymbols_so_SO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_so_SO ,
    EXP_SYMBOL : NumberFormatSymbols_so_SO ,
    GROUP_SEP : NumberFormatSymbols_so_SO ,
    INFINITY : NumberFormatSymbols_so_SO ,
    MINUS_SIGN : NumberFormatSymbols_so_SO ,
    NAN : NumberFormatSymbols_so_SO ,
    PERCENT : NumberFormatSymbols_so_SO ,
    PERCENT_PATTERN : NumberFormatSymbols_so_SO ,
    PERMILL : NumberFormatSymbols_so_SO ,
    PLUS_SIGN : NumberFormatSymbols_so_SO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_so_SO ,
    ZERO_DIGIT : NumberFormatSymbols_so_SO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_so_SO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_so_SO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_so_SO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_so_SO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sq.
   */
  type NumberFormatSymbols_sq = string ;
  var NumberFormatSymbols_sq : {
    CURRENCY_PATTERN : NumberFormatSymbols_sq ,
    DECIMAL_PATTERN : NumberFormatSymbols_sq ,
    DECIMAL_SEP : NumberFormatSymbols_sq ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sq ,
    EXP_SYMBOL : NumberFormatSymbols_sq ,
    GROUP_SEP : NumberFormatSymbols_sq ,
    INFINITY : NumberFormatSymbols_sq ,
    MINUS_SIGN : NumberFormatSymbols_sq ,
    NAN : NumberFormatSymbols_sq ,
    PERCENT : NumberFormatSymbols_sq ,
    PERCENT_PATTERN : NumberFormatSymbols_sq ,
    PERMILL : NumberFormatSymbols_sq ,
    PLUS_SIGN : NumberFormatSymbols_sq ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sq ,
    ZERO_DIGIT : NumberFormatSymbols_sq ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sq'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sq;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sq_AL.
   */
  type NumberFormatSymbols_sq_AL = string ;
  var NumberFormatSymbols_sq_AL : {
    CURRENCY_PATTERN : NumberFormatSymbols_sq_AL ,
    DECIMAL_PATTERN : NumberFormatSymbols_sq_AL ,
    DECIMAL_SEP : NumberFormatSymbols_sq_AL ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sq_AL ,
    EXP_SYMBOL : NumberFormatSymbols_sq_AL ,
    GROUP_SEP : NumberFormatSymbols_sq_AL ,
    INFINITY : NumberFormatSymbols_sq_AL ,
    MINUS_SIGN : NumberFormatSymbols_sq_AL ,
    NAN : NumberFormatSymbols_sq_AL ,
    PERCENT : NumberFormatSymbols_sq_AL ,
    PERCENT_PATTERN : NumberFormatSymbols_sq_AL ,
    PERMILL : NumberFormatSymbols_sq_AL ,
    PLUS_SIGN : NumberFormatSymbols_sq_AL ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sq_AL ,
    ZERO_DIGIT : NumberFormatSymbols_sq_AL ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sq_AL'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sq_AL;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sq_AL' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sq_AL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sq_MK.
   */
  type NumberFormatSymbols_sq_MK = string ;
  var NumberFormatSymbols_sq_MK : {
    CURRENCY_PATTERN : NumberFormatSymbols_sq_MK ,
    DECIMAL_PATTERN : NumberFormatSymbols_sq_MK ,
    DECIMAL_SEP : NumberFormatSymbols_sq_MK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sq_MK ,
    EXP_SYMBOL : NumberFormatSymbols_sq_MK ,
    GROUP_SEP : NumberFormatSymbols_sq_MK ,
    INFINITY : NumberFormatSymbols_sq_MK ,
    MINUS_SIGN : NumberFormatSymbols_sq_MK ,
    NAN : NumberFormatSymbols_sq_MK ,
    PERCENT : NumberFormatSymbols_sq_MK ,
    PERCENT_PATTERN : NumberFormatSymbols_sq_MK ,
    PERMILL : NumberFormatSymbols_sq_MK ,
    PLUS_SIGN : NumberFormatSymbols_sq_MK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sq_MK ,
    ZERO_DIGIT : NumberFormatSymbols_sq_MK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sq_MK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sq_MK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sq_MK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sq_MK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sq_XK.
   */
  type NumberFormatSymbols_sq_XK = string ;
  var NumberFormatSymbols_sq_XK : {
    CURRENCY_PATTERN : NumberFormatSymbols_sq_XK ,
    DECIMAL_PATTERN : NumberFormatSymbols_sq_XK ,
    DECIMAL_SEP : NumberFormatSymbols_sq_XK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sq_XK ,
    EXP_SYMBOL : NumberFormatSymbols_sq_XK ,
    GROUP_SEP : NumberFormatSymbols_sq_XK ,
    INFINITY : NumberFormatSymbols_sq_XK ,
    MINUS_SIGN : NumberFormatSymbols_sq_XK ,
    NAN : NumberFormatSymbols_sq_XK ,
    PERCENT : NumberFormatSymbols_sq_XK ,
    PERCENT_PATTERN : NumberFormatSymbols_sq_XK ,
    PERMILL : NumberFormatSymbols_sq_XK ,
    PLUS_SIGN : NumberFormatSymbols_sq_XK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sq_XK ,
    ZERO_DIGIT : NumberFormatSymbols_sq_XK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sq_XK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sq_XK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sq_XK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sq_XK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sr.
   */
  type NumberFormatSymbols_sr = string ;
  var NumberFormatSymbols_sr : {
    CURRENCY_PATTERN : NumberFormatSymbols_sr ,
    DECIMAL_PATTERN : NumberFormatSymbols_sr ,
    DECIMAL_SEP : NumberFormatSymbols_sr ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sr ,
    EXP_SYMBOL : NumberFormatSymbols_sr ,
    GROUP_SEP : NumberFormatSymbols_sr ,
    INFINITY : NumberFormatSymbols_sr ,
    MINUS_SIGN : NumberFormatSymbols_sr ,
    NAN : NumberFormatSymbols_sr ,
    PERCENT : NumberFormatSymbols_sr ,
    PERCENT_PATTERN : NumberFormatSymbols_sr ,
    PERMILL : NumberFormatSymbols_sr ,
    PLUS_SIGN : NumberFormatSymbols_sr ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sr ,
    ZERO_DIGIT : NumberFormatSymbols_sr ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sr'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sr_Cyrl.
   */
  type NumberFormatSymbols_sr_Cyrl = string ;
  var NumberFormatSymbols_sr_Cyrl : {
    CURRENCY_PATTERN : NumberFormatSymbols_sr_Cyrl ,
    DECIMAL_PATTERN : NumberFormatSymbols_sr_Cyrl ,
    DECIMAL_SEP : NumberFormatSymbols_sr_Cyrl ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sr_Cyrl ,
    EXP_SYMBOL : NumberFormatSymbols_sr_Cyrl ,
    GROUP_SEP : NumberFormatSymbols_sr_Cyrl ,
    INFINITY : NumberFormatSymbols_sr_Cyrl ,
    MINUS_SIGN : NumberFormatSymbols_sr_Cyrl ,
    NAN : NumberFormatSymbols_sr_Cyrl ,
    PERCENT : NumberFormatSymbols_sr_Cyrl ,
    PERCENT_PATTERN : NumberFormatSymbols_sr_Cyrl ,
    PERMILL : NumberFormatSymbols_sr_Cyrl ,
    PLUS_SIGN : NumberFormatSymbols_sr_Cyrl ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sr_Cyrl ,
    ZERO_DIGIT : NumberFormatSymbols_sr_Cyrl ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sr_Cyrl'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Cyrl;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sr_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sr_Cyrl_BA.
   */
  type NumberFormatSymbols_sr_Cyrl_BA = string ;
  var NumberFormatSymbols_sr_Cyrl_BA : {
    CURRENCY_PATTERN : NumberFormatSymbols_sr_Cyrl_BA ,
    DECIMAL_PATTERN : NumberFormatSymbols_sr_Cyrl_BA ,
    DECIMAL_SEP : NumberFormatSymbols_sr_Cyrl_BA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sr_Cyrl_BA ,
    EXP_SYMBOL : NumberFormatSymbols_sr_Cyrl_BA ,
    GROUP_SEP : NumberFormatSymbols_sr_Cyrl_BA ,
    INFINITY : NumberFormatSymbols_sr_Cyrl_BA ,
    MINUS_SIGN : NumberFormatSymbols_sr_Cyrl_BA ,
    NAN : NumberFormatSymbols_sr_Cyrl_BA ,
    PERCENT : NumberFormatSymbols_sr_Cyrl_BA ,
    PERCENT_PATTERN : NumberFormatSymbols_sr_Cyrl_BA ,
    PERMILL : NumberFormatSymbols_sr_Cyrl_BA ,
    PLUS_SIGN : NumberFormatSymbols_sr_Cyrl_BA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sr_Cyrl_BA ,
    ZERO_DIGIT : NumberFormatSymbols_sr_Cyrl_BA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sr_Cyrl_BA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Cyrl_BA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sr_Cyrl_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Cyrl_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sr_Cyrl_ME.
   */
  type NumberFormatSymbols_sr_Cyrl_ME = string ;
  var NumberFormatSymbols_sr_Cyrl_ME : {
    CURRENCY_PATTERN : NumberFormatSymbols_sr_Cyrl_ME ,
    DECIMAL_PATTERN : NumberFormatSymbols_sr_Cyrl_ME ,
    DECIMAL_SEP : NumberFormatSymbols_sr_Cyrl_ME ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sr_Cyrl_ME ,
    EXP_SYMBOL : NumberFormatSymbols_sr_Cyrl_ME ,
    GROUP_SEP : NumberFormatSymbols_sr_Cyrl_ME ,
    INFINITY : NumberFormatSymbols_sr_Cyrl_ME ,
    MINUS_SIGN : NumberFormatSymbols_sr_Cyrl_ME ,
    NAN : NumberFormatSymbols_sr_Cyrl_ME ,
    PERCENT : NumberFormatSymbols_sr_Cyrl_ME ,
    PERCENT_PATTERN : NumberFormatSymbols_sr_Cyrl_ME ,
    PERMILL : NumberFormatSymbols_sr_Cyrl_ME ,
    PLUS_SIGN : NumberFormatSymbols_sr_Cyrl_ME ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sr_Cyrl_ME ,
    ZERO_DIGIT : NumberFormatSymbols_sr_Cyrl_ME ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sr_Cyrl_ME'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Cyrl_ME;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sr_Cyrl_ME' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Cyrl_ME;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sr_Cyrl_RS.
   */
  type NumberFormatSymbols_sr_Cyrl_RS = string ;
  var NumberFormatSymbols_sr_Cyrl_RS : {
    CURRENCY_PATTERN : NumberFormatSymbols_sr_Cyrl_RS ,
    DECIMAL_PATTERN : NumberFormatSymbols_sr_Cyrl_RS ,
    DECIMAL_SEP : NumberFormatSymbols_sr_Cyrl_RS ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sr_Cyrl_RS ,
    EXP_SYMBOL : NumberFormatSymbols_sr_Cyrl_RS ,
    GROUP_SEP : NumberFormatSymbols_sr_Cyrl_RS ,
    INFINITY : NumberFormatSymbols_sr_Cyrl_RS ,
    MINUS_SIGN : NumberFormatSymbols_sr_Cyrl_RS ,
    NAN : NumberFormatSymbols_sr_Cyrl_RS ,
    PERCENT : NumberFormatSymbols_sr_Cyrl_RS ,
    PERCENT_PATTERN : NumberFormatSymbols_sr_Cyrl_RS ,
    PERMILL : NumberFormatSymbols_sr_Cyrl_RS ,
    PLUS_SIGN : NumberFormatSymbols_sr_Cyrl_RS ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sr_Cyrl_RS ,
    ZERO_DIGIT : NumberFormatSymbols_sr_Cyrl_RS ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sr_Cyrl_RS'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Cyrl_RS;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sr_Cyrl_RS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Cyrl_RS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sr_Cyrl_XK.
   */
  type NumberFormatSymbols_sr_Cyrl_XK = string ;
  var NumberFormatSymbols_sr_Cyrl_XK : {
    CURRENCY_PATTERN : NumberFormatSymbols_sr_Cyrl_XK ,
    DECIMAL_PATTERN : NumberFormatSymbols_sr_Cyrl_XK ,
    DECIMAL_SEP : NumberFormatSymbols_sr_Cyrl_XK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sr_Cyrl_XK ,
    EXP_SYMBOL : NumberFormatSymbols_sr_Cyrl_XK ,
    GROUP_SEP : NumberFormatSymbols_sr_Cyrl_XK ,
    INFINITY : NumberFormatSymbols_sr_Cyrl_XK ,
    MINUS_SIGN : NumberFormatSymbols_sr_Cyrl_XK ,
    NAN : NumberFormatSymbols_sr_Cyrl_XK ,
    PERCENT : NumberFormatSymbols_sr_Cyrl_XK ,
    PERCENT_PATTERN : NumberFormatSymbols_sr_Cyrl_XK ,
    PERMILL : NumberFormatSymbols_sr_Cyrl_XK ,
    PLUS_SIGN : NumberFormatSymbols_sr_Cyrl_XK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sr_Cyrl_XK ,
    ZERO_DIGIT : NumberFormatSymbols_sr_Cyrl_XK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sr_Cyrl_XK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Cyrl_XK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sr_Cyrl_XK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Cyrl_XK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sr_Latn.
   */
  type NumberFormatSymbols_sr_Latn = string ;
  var NumberFormatSymbols_sr_Latn : {
    CURRENCY_PATTERN : NumberFormatSymbols_sr_Latn ,
    DECIMAL_PATTERN : NumberFormatSymbols_sr_Latn ,
    DECIMAL_SEP : NumberFormatSymbols_sr_Latn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sr_Latn ,
    EXP_SYMBOL : NumberFormatSymbols_sr_Latn ,
    GROUP_SEP : NumberFormatSymbols_sr_Latn ,
    INFINITY : NumberFormatSymbols_sr_Latn ,
    MINUS_SIGN : NumberFormatSymbols_sr_Latn ,
    NAN : NumberFormatSymbols_sr_Latn ,
    PERCENT : NumberFormatSymbols_sr_Latn ,
    PERCENT_PATTERN : NumberFormatSymbols_sr_Latn ,
    PERMILL : NumberFormatSymbols_sr_Latn ,
    PLUS_SIGN : NumberFormatSymbols_sr_Latn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sr_Latn ,
    ZERO_DIGIT : NumberFormatSymbols_sr_Latn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sr_Latn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Latn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sr_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sr_Latn_BA.
   */
  type NumberFormatSymbols_sr_Latn_BA = string ;
  var NumberFormatSymbols_sr_Latn_BA : {
    CURRENCY_PATTERN : NumberFormatSymbols_sr_Latn_BA ,
    DECIMAL_PATTERN : NumberFormatSymbols_sr_Latn_BA ,
    DECIMAL_SEP : NumberFormatSymbols_sr_Latn_BA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sr_Latn_BA ,
    EXP_SYMBOL : NumberFormatSymbols_sr_Latn_BA ,
    GROUP_SEP : NumberFormatSymbols_sr_Latn_BA ,
    INFINITY : NumberFormatSymbols_sr_Latn_BA ,
    MINUS_SIGN : NumberFormatSymbols_sr_Latn_BA ,
    NAN : NumberFormatSymbols_sr_Latn_BA ,
    PERCENT : NumberFormatSymbols_sr_Latn_BA ,
    PERCENT_PATTERN : NumberFormatSymbols_sr_Latn_BA ,
    PERMILL : NumberFormatSymbols_sr_Latn_BA ,
    PLUS_SIGN : NumberFormatSymbols_sr_Latn_BA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sr_Latn_BA ,
    ZERO_DIGIT : NumberFormatSymbols_sr_Latn_BA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sr_Latn_BA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Latn_BA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sr_Latn_BA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Latn_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sr_Latn_ME.
   */
  type NumberFormatSymbols_sr_Latn_ME = string ;
  var NumberFormatSymbols_sr_Latn_ME : {
    CURRENCY_PATTERN : NumberFormatSymbols_sr_Latn_ME ,
    DECIMAL_PATTERN : NumberFormatSymbols_sr_Latn_ME ,
    DECIMAL_SEP : NumberFormatSymbols_sr_Latn_ME ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sr_Latn_ME ,
    EXP_SYMBOL : NumberFormatSymbols_sr_Latn_ME ,
    GROUP_SEP : NumberFormatSymbols_sr_Latn_ME ,
    INFINITY : NumberFormatSymbols_sr_Latn_ME ,
    MINUS_SIGN : NumberFormatSymbols_sr_Latn_ME ,
    NAN : NumberFormatSymbols_sr_Latn_ME ,
    PERCENT : NumberFormatSymbols_sr_Latn_ME ,
    PERCENT_PATTERN : NumberFormatSymbols_sr_Latn_ME ,
    PERMILL : NumberFormatSymbols_sr_Latn_ME ,
    PLUS_SIGN : NumberFormatSymbols_sr_Latn_ME ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sr_Latn_ME ,
    ZERO_DIGIT : NumberFormatSymbols_sr_Latn_ME ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sr_Latn_ME'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Latn_ME;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sr_Latn_ME' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Latn_ME;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sr_Latn_RS.
   */
  type NumberFormatSymbols_sr_Latn_RS = string ;
  var NumberFormatSymbols_sr_Latn_RS : {
    CURRENCY_PATTERN : NumberFormatSymbols_sr_Latn_RS ,
    DECIMAL_PATTERN : NumberFormatSymbols_sr_Latn_RS ,
    DECIMAL_SEP : NumberFormatSymbols_sr_Latn_RS ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sr_Latn_RS ,
    EXP_SYMBOL : NumberFormatSymbols_sr_Latn_RS ,
    GROUP_SEP : NumberFormatSymbols_sr_Latn_RS ,
    INFINITY : NumberFormatSymbols_sr_Latn_RS ,
    MINUS_SIGN : NumberFormatSymbols_sr_Latn_RS ,
    NAN : NumberFormatSymbols_sr_Latn_RS ,
    PERCENT : NumberFormatSymbols_sr_Latn_RS ,
    PERCENT_PATTERN : NumberFormatSymbols_sr_Latn_RS ,
    PERMILL : NumberFormatSymbols_sr_Latn_RS ,
    PLUS_SIGN : NumberFormatSymbols_sr_Latn_RS ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sr_Latn_RS ,
    ZERO_DIGIT : NumberFormatSymbols_sr_Latn_RS ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sr_Latn_RS'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Latn_RS;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sr_Latn_RS' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Latn_RS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sr_Latn_XK.
   */
  type NumberFormatSymbols_sr_Latn_XK = string ;
  var NumberFormatSymbols_sr_Latn_XK : {
    CURRENCY_PATTERN : NumberFormatSymbols_sr_Latn_XK ,
    DECIMAL_PATTERN : NumberFormatSymbols_sr_Latn_XK ,
    DECIMAL_SEP : NumberFormatSymbols_sr_Latn_XK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sr_Latn_XK ,
    EXP_SYMBOL : NumberFormatSymbols_sr_Latn_XK ,
    GROUP_SEP : NumberFormatSymbols_sr_Latn_XK ,
    INFINITY : NumberFormatSymbols_sr_Latn_XK ,
    MINUS_SIGN : NumberFormatSymbols_sr_Latn_XK ,
    NAN : NumberFormatSymbols_sr_Latn_XK ,
    PERCENT : NumberFormatSymbols_sr_Latn_XK ,
    PERCENT_PATTERN : NumberFormatSymbols_sr_Latn_XK ,
    PERMILL : NumberFormatSymbols_sr_Latn_XK ,
    PLUS_SIGN : NumberFormatSymbols_sr_Latn_XK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sr_Latn_XK ,
    ZERO_DIGIT : NumberFormatSymbols_sr_Latn_XK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sr_Latn_XK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Latn_XK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sr_Latn_XK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sr_Latn_XK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sv.
   */
  type NumberFormatSymbols_sv = string ;
  var NumberFormatSymbols_sv : {
    CURRENCY_PATTERN : NumberFormatSymbols_sv ,
    DECIMAL_PATTERN : NumberFormatSymbols_sv ,
    DECIMAL_SEP : NumberFormatSymbols_sv ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sv ,
    EXP_SYMBOL : NumberFormatSymbols_sv ,
    GROUP_SEP : NumberFormatSymbols_sv ,
    INFINITY : NumberFormatSymbols_sv ,
    MINUS_SIGN : NumberFormatSymbols_sv ,
    NAN : NumberFormatSymbols_sv ,
    PERCENT : NumberFormatSymbols_sv ,
    PERCENT_PATTERN : NumberFormatSymbols_sv ,
    PERMILL : NumberFormatSymbols_sv ,
    PLUS_SIGN : NumberFormatSymbols_sv ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sv ,
    ZERO_DIGIT : NumberFormatSymbols_sv ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sv'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sv;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sv' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sv;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sv_AX.
   */
  type NumberFormatSymbols_sv_AX = string ;
  var NumberFormatSymbols_sv_AX : {
    CURRENCY_PATTERN : NumberFormatSymbols_sv_AX ,
    DECIMAL_PATTERN : NumberFormatSymbols_sv_AX ,
    DECIMAL_SEP : NumberFormatSymbols_sv_AX ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sv_AX ,
    EXP_SYMBOL : NumberFormatSymbols_sv_AX ,
    GROUP_SEP : NumberFormatSymbols_sv_AX ,
    INFINITY : NumberFormatSymbols_sv_AX ,
    MINUS_SIGN : NumberFormatSymbols_sv_AX ,
    NAN : NumberFormatSymbols_sv_AX ,
    PERCENT : NumberFormatSymbols_sv_AX ,
    PERCENT_PATTERN : NumberFormatSymbols_sv_AX ,
    PERMILL : NumberFormatSymbols_sv_AX ,
    PLUS_SIGN : NumberFormatSymbols_sv_AX ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sv_AX ,
    ZERO_DIGIT : NumberFormatSymbols_sv_AX ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sv_AX'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sv_AX;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sv_AX' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sv_AX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sv_FI.
   */
  type NumberFormatSymbols_sv_FI = string ;
  var NumberFormatSymbols_sv_FI : {
    CURRENCY_PATTERN : NumberFormatSymbols_sv_FI ,
    DECIMAL_PATTERN : NumberFormatSymbols_sv_FI ,
    DECIMAL_SEP : NumberFormatSymbols_sv_FI ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sv_FI ,
    EXP_SYMBOL : NumberFormatSymbols_sv_FI ,
    GROUP_SEP : NumberFormatSymbols_sv_FI ,
    INFINITY : NumberFormatSymbols_sv_FI ,
    MINUS_SIGN : NumberFormatSymbols_sv_FI ,
    NAN : NumberFormatSymbols_sv_FI ,
    PERCENT : NumberFormatSymbols_sv_FI ,
    PERCENT_PATTERN : NumberFormatSymbols_sv_FI ,
    PERMILL : NumberFormatSymbols_sv_FI ,
    PLUS_SIGN : NumberFormatSymbols_sv_FI ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sv_FI ,
    ZERO_DIGIT : NumberFormatSymbols_sv_FI ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sv_FI'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sv_FI;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sv_FI' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sv_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sv_SE.
   */
  type NumberFormatSymbols_sv_SE = string ;
  var NumberFormatSymbols_sv_SE : {
    CURRENCY_PATTERN : NumberFormatSymbols_sv_SE ,
    DECIMAL_PATTERN : NumberFormatSymbols_sv_SE ,
    DECIMAL_SEP : NumberFormatSymbols_sv_SE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sv_SE ,
    EXP_SYMBOL : NumberFormatSymbols_sv_SE ,
    GROUP_SEP : NumberFormatSymbols_sv_SE ,
    INFINITY : NumberFormatSymbols_sv_SE ,
    MINUS_SIGN : NumberFormatSymbols_sv_SE ,
    NAN : NumberFormatSymbols_sv_SE ,
    PERCENT : NumberFormatSymbols_sv_SE ,
    PERCENT_PATTERN : NumberFormatSymbols_sv_SE ,
    PERMILL : NumberFormatSymbols_sv_SE ,
    PLUS_SIGN : NumberFormatSymbols_sv_SE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sv_SE ,
    ZERO_DIGIT : NumberFormatSymbols_sv_SE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sv_SE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sv_SE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sv_SE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sv_SE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sw.
   */
  type NumberFormatSymbols_sw = string ;
  var NumberFormatSymbols_sw : {
    CURRENCY_PATTERN : NumberFormatSymbols_sw ,
    DECIMAL_PATTERN : NumberFormatSymbols_sw ,
    DECIMAL_SEP : NumberFormatSymbols_sw ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sw ,
    EXP_SYMBOL : NumberFormatSymbols_sw ,
    GROUP_SEP : NumberFormatSymbols_sw ,
    INFINITY : NumberFormatSymbols_sw ,
    MINUS_SIGN : NumberFormatSymbols_sw ,
    NAN : NumberFormatSymbols_sw ,
    PERCENT : NumberFormatSymbols_sw ,
    PERCENT_PATTERN : NumberFormatSymbols_sw ,
    PERMILL : NumberFormatSymbols_sw ,
    PLUS_SIGN : NumberFormatSymbols_sw ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sw ,
    ZERO_DIGIT : NumberFormatSymbols_sw ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sw'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sw;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sw' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sw_CD.
   */
  type NumberFormatSymbols_sw_CD = string ;
  var NumberFormatSymbols_sw_CD : {
    CURRENCY_PATTERN : NumberFormatSymbols_sw_CD ,
    DECIMAL_PATTERN : NumberFormatSymbols_sw_CD ,
    DECIMAL_SEP : NumberFormatSymbols_sw_CD ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sw_CD ,
    EXP_SYMBOL : NumberFormatSymbols_sw_CD ,
    GROUP_SEP : NumberFormatSymbols_sw_CD ,
    INFINITY : NumberFormatSymbols_sw_CD ,
    MINUS_SIGN : NumberFormatSymbols_sw_CD ,
    NAN : NumberFormatSymbols_sw_CD ,
    PERCENT : NumberFormatSymbols_sw_CD ,
    PERCENT_PATTERN : NumberFormatSymbols_sw_CD ,
    PERMILL : NumberFormatSymbols_sw_CD ,
    PLUS_SIGN : NumberFormatSymbols_sw_CD ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sw_CD ,
    ZERO_DIGIT : NumberFormatSymbols_sw_CD ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sw_CD'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sw_CD;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sw_CD' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sw_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sw_KE.
   */
  type NumberFormatSymbols_sw_KE = string ;
  var NumberFormatSymbols_sw_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_sw_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_sw_KE ,
    DECIMAL_SEP : NumberFormatSymbols_sw_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sw_KE ,
    EXP_SYMBOL : NumberFormatSymbols_sw_KE ,
    GROUP_SEP : NumberFormatSymbols_sw_KE ,
    INFINITY : NumberFormatSymbols_sw_KE ,
    MINUS_SIGN : NumberFormatSymbols_sw_KE ,
    NAN : NumberFormatSymbols_sw_KE ,
    PERCENT : NumberFormatSymbols_sw_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_sw_KE ,
    PERMILL : NumberFormatSymbols_sw_KE ,
    PLUS_SIGN : NumberFormatSymbols_sw_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sw_KE ,
    ZERO_DIGIT : NumberFormatSymbols_sw_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sw_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sw_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sw_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sw_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sw_TZ.
   */
  type NumberFormatSymbols_sw_TZ = string ;
  var NumberFormatSymbols_sw_TZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_sw_TZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_sw_TZ ,
    DECIMAL_SEP : NumberFormatSymbols_sw_TZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sw_TZ ,
    EXP_SYMBOL : NumberFormatSymbols_sw_TZ ,
    GROUP_SEP : NumberFormatSymbols_sw_TZ ,
    INFINITY : NumberFormatSymbols_sw_TZ ,
    MINUS_SIGN : NumberFormatSymbols_sw_TZ ,
    NAN : NumberFormatSymbols_sw_TZ ,
    PERCENT : NumberFormatSymbols_sw_TZ ,
    PERCENT_PATTERN : NumberFormatSymbols_sw_TZ ,
    PERMILL : NumberFormatSymbols_sw_TZ ,
    PLUS_SIGN : NumberFormatSymbols_sw_TZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sw_TZ ,
    ZERO_DIGIT : NumberFormatSymbols_sw_TZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sw_TZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sw_TZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sw_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sw_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale sw_UG.
   */
  type NumberFormatSymbols_sw_UG = string ;
  var NumberFormatSymbols_sw_UG : {
    CURRENCY_PATTERN : NumberFormatSymbols_sw_UG ,
    DECIMAL_PATTERN : NumberFormatSymbols_sw_UG ,
    DECIMAL_SEP : NumberFormatSymbols_sw_UG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_sw_UG ,
    EXP_SYMBOL : NumberFormatSymbols_sw_UG ,
    GROUP_SEP : NumberFormatSymbols_sw_UG ,
    INFINITY : NumberFormatSymbols_sw_UG ,
    MINUS_SIGN : NumberFormatSymbols_sw_UG ,
    NAN : NumberFormatSymbols_sw_UG ,
    PERCENT : NumberFormatSymbols_sw_UG ,
    PERCENT_PATTERN : NumberFormatSymbols_sw_UG ,
    PERMILL : NumberFormatSymbols_sw_UG ,
    PLUS_SIGN : NumberFormatSymbols_sw_UG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_sw_UG ,
    ZERO_DIGIT : NumberFormatSymbols_sw_UG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_sw_UG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sw_UG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_sw_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_sw_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ta.
   */
  type NumberFormatSymbols_ta = string ;
  var NumberFormatSymbols_ta : {
    CURRENCY_PATTERN : NumberFormatSymbols_ta ,
    DECIMAL_PATTERN : NumberFormatSymbols_ta ,
    DECIMAL_SEP : NumberFormatSymbols_ta ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ta ,
    EXP_SYMBOL : NumberFormatSymbols_ta ,
    GROUP_SEP : NumberFormatSymbols_ta ,
    INFINITY : NumberFormatSymbols_ta ,
    MINUS_SIGN : NumberFormatSymbols_ta ,
    NAN : NumberFormatSymbols_ta ,
    PERCENT : NumberFormatSymbols_ta ,
    PERCENT_PATTERN : NumberFormatSymbols_ta ,
    PERMILL : NumberFormatSymbols_ta ,
    PLUS_SIGN : NumberFormatSymbols_ta ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ta ,
    ZERO_DIGIT : NumberFormatSymbols_ta ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ta'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ta;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ta' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ta;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ta_IN.
   */
  type NumberFormatSymbols_ta_IN = string ;
  var NumberFormatSymbols_ta_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_ta_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_ta_IN ,
    DECIMAL_SEP : NumberFormatSymbols_ta_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ta_IN ,
    EXP_SYMBOL : NumberFormatSymbols_ta_IN ,
    GROUP_SEP : NumberFormatSymbols_ta_IN ,
    INFINITY : NumberFormatSymbols_ta_IN ,
    MINUS_SIGN : NumberFormatSymbols_ta_IN ,
    NAN : NumberFormatSymbols_ta_IN ,
    PERCENT : NumberFormatSymbols_ta_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_ta_IN ,
    PERMILL : NumberFormatSymbols_ta_IN ,
    PLUS_SIGN : NumberFormatSymbols_ta_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ta_IN ,
    ZERO_DIGIT : NumberFormatSymbols_ta_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ta_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ta_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ta_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ta_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ta_LK.
   */
  type NumberFormatSymbols_ta_LK = string ;
  var NumberFormatSymbols_ta_LK : {
    CURRENCY_PATTERN : NumberFormatSymbols_ta_LK ,
    DECIMAL_PATTERN : NumberFormatSymbols_ta_LK ,
    DECIMAL_SEP : NumberFormatSymbols_ta_LK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ta_LK ,
    EXP_SYMBOL : NumberFormatSymbols_ta_LK ,
    GROUP_SEP : NumberFormatSymbols_ta_LK ,
    INFINITY : NumberFormatSymbols_ta_LK ,
    MINUS_SIGN : NumberFormatSymbols_ta_LK ,
    NAN : NumberFormatSymbols_ta_LK ,
    PERCENT : NumberFormatSymbols_ta_LK ,
    PERCENT_PATTERN : NumberFormatSymbols_ta_LK ,
    PERMILL : NumberFormatSymbols_ta_LK ,
    PLUS_SIGN : NumberFormatSymbols_ta_LK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ta_LK ,
    ZERO_DIGIT : NumberFormatSymbols_ta_LK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ta_LK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ta_LK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ta_LK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ta_LK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ta_MY.
   */
  type NumberFormatSymbols_ta_MY = string ;
  var NumberFormatSymbols_ta_MY : {
    CURRENCY_PATTERN : NumberFormatSymbols_ta_MY ,
    DECIMAL_PATTERN : NumberFormatSymbols_ta_MY ,
    DECIMAL_SEP : NumberFormatSymbols_ta_MY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ta_MY ,
    EXP_SYMBOL : NumberFormatSymbols_ta_MY ,
    GROUP_SEP : NumberFormatSymbols_ta_MY ,
    INFINITY : NumberFormatSymbols_ta_MY ,
    MINUS_SIGN : NumberFormatSymbols_ta_MY ,
    NAN : NumberFormatSymbols_ta_MY ,
    PERCENT : NumberFormatSymbols_ta_MY ,
    PERCENT_PATTERN : NumberFormatSymbols_ta_MY ,
    PERMILL : NumberFormatSymbols_ta_MY ,
    PLUS_SIGN : NumberFormatSymbols_ta_MY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ta_MY ,
    ZERO_DIGIT : NumberFormatSymbols_ta_MY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ta_MY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ta_MY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ta_MY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ta_MY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ta_SG.
   */
  type NumberFormatSymbols_ta_SG = string ;
  var NumberFormatSymbols_ta_SG : {
    CURRENCY_PATTERN : NumberFormatSymbols_ta_SG ,
    DECIMAL_PATTERN : NumberFormatSymbols_ta_SG ,
    DECIMAL_SEP : NumberFormatSymbols_ta_SG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ta_SG ,
    EXP_SYMBOL : NumberFormatSymbols_ta_SG ,
    GROUP_SEP : NumberFormatSymbols_ta_SG ,
    INFINITY : NumberFormatSymbols_ta_SG ,
    MINUS_SIGN : NumberFormatSymbols_ta_SG ,
    NAN : NumberFormatSymbols_ta_SG ,
    PERCENT : NumberFormatSymbols_ta_SG ,
    PERCENT_PATTERN : NumberFormatSymbols_ta_SG ,
    PERMILL : NumberFormatSymbols_ta_SG ,
    PLUS_SIGN : NumberFormatSymbols_ta_SG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ta_SG ,
    ZERO_DIGIT : NumberFormatSymbols_ta_SG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ta_SG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ta_SG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ta_SG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ta_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale te.
   */
  type NumberFormatSymbols_te = string ;
  var NumberFormatSymbols_te : {
    CURRENCY_PATTERN : NumberFormatSymbols_te ,
    DECIMAL_PATTERN : NumberFormatSymbols_te ,
    DECIMAL_SEP : NumberFormatSymbols_te ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_te ,
    EXP_SYMBOL : NumberFormatSymbols_te ,
    GROUP_SEP : NumberFormatSymbols_te ,
    INFINITY : NumberFormatSymbols_te ,
    MINUS_SIGN : NumberFormatSymbols_te ,
    NAN : NumberFormatSymbols_te ,
    PERCENT : NumberFormatSymbols_te ,
    PERCENT_PATTERN : NumberFormatSymbols_te ,
    PERMILL : NumberFormatSymbols_te ,
    PLUS_SIGN : NumberFormatSymbols_te ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_te ,
    ZERO_DIGIT : NumberFormatSymbols_te ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_te'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_te;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_te' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_te;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale te_IN.
   */
  type NumberFormatSymbols_te_IN = string ;
  var NumberFormatSymbols_te_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_te_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_te_IN ,
    DECIMAL_SEP : NumberFormatSymbols_te_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_te_IN ,
    EXP_SYMBOL : NumberFormatSymbols_te_IN ,
    GROUP_SEP : NumberFormatSymbols_te_IN ,
    INFINITY : NumberFormatSymbols_te_IN ,
    MINUS_SIGN : NumberFormatSymbols_te_IN ,
    NAN : NumberFormatSymbols_te_IN ,
    PERCENT : NumberFormatSymbols_te_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_te_IN ,
    PERMILL : NumberFormatSymbols_te_IN ,
    PLUS_SIGN : NumberFormatSymbols_te_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_te_IN ,
    ZERO_DIGIT : NumberFormatSymbols_te_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_te_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_te_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_te_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_te_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale teo.
   */
  type NumberFormatSymbols_teo = string ;
  var NumberFormatSymbols_teo : {
    CURRENCY_PATTERN : NumberFormatSymbols_teo ,
    DECIMAL_PATTERN : NumberFormatSymbols_teo ,
    DECIMAL_SEP : NumberFormatSymbols_teo ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_teo ,
    EXP_SYMBOL : NumberFormatSymbols_teo ,
    GROUP_SEP : NumberFormatSymbols_teo ,
    INFINITY : NumberFormatSymbols_teo ,
    MINUS_SIGN : NumberFormatSymbols_teo ,
    NAN : NumberFormatSymbols_teo ,
    PERCENT : NumberFormatSymbols_teo ,
    PERCENT_PATTERN : NumberFormatSymbols_teo ,
    PERMILL : NumberFormatSymbols_teo ,
    PLUS_SIGN : NumberFormatSymbols_teo ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_teo ,
    ZERO_DIGIT : NumberFormatSymbols_teo ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_teo'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_teo;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_teo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_teo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale teo_KE.
   */
  type NumberFormatSymbols_teo_KE = string ;
  var NumberFormatSymbols_teo_KE : {
    CURRENCY_PATTERN : NumberFormatSymbols_teo_KE ,
    DECIMAL_PATTERN : NumberFormatSymbols_teo_KE ,
    DECIMAL_SEP : NumberFormatSymbols_teo_KE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_teo_KE ,
    EXP_SYMBOL : NumberFormatSymbols_teo_KE ,
    GROUP_SEP : NumberFormatSymbols_teo_KE ,
    INFINITY : NumberFormatSymbols_teo_KE ,
    MINUS_SIGN : NumberFormatSymbols_teo_KE ,
    NAN : NumberFormatSymbols_teo_KE ,
    PERCENT : NumberFormatSymbols_teo_KE ,
    PERCENT_PATTERN : NumberFormatSymbols_teo_KE ,
    PERMILL : NumberFormatSymbols_teo_KE ,
    PLUS_SIGN : NumberFormatSymbols_teo_KE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_teo_KE ,
    ZERO_DIGIT : NumberFormatSymbols_teo_KE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_teo_KE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_teo_KE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_teo_KE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_teo_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale teo_UG.
   */
  type NumberFormatSymbols_teo_UG = string ;
  var NumberFormatSymbols_teo_UG : {
    CURRENCY_PATTERN : NumberFormatSymbols_teo_UG ,
    DECIMAL_PATTERN : NumberFormatSymbols_teo_UG ,
    DECIMAL_SEP : NumberFormatSymbols_teo_UG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_teo_UG ,
    EXP_SYMBOL : NumberFormatSymbols_teo_UG ,
    GROUP_SEP : NumberFormatSymbols_teo_UG ,
    INFINITY : NumberFormatSymbols_teo_UG ,
    MINUS_SIGN : NumberFormatSymbols_teo_UG ,
    NAN : NumberFormatSymbols_teo_UG ,
    PERCENT : NumberFormatSymbols_teo_UG ,
    PERCENT_PATTERN : NumberFormatSymbols_teo_UG ,
    PERMILL : NumberFormatSymbols_teo_UG ,
    PLUS_SIGN : NumberFormatSymbols_teo_UG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_teo_UG ,
    ZERO_DIGIT : NumberFormatSymbols_teo_UG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_teo_UG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_teo_UG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_teo_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_teo_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale th.
   */
  type NumberFormatSymbols_th = string ;
  var NumberFormatSymbols_th : {
    CURRENCY_PATTERN : NumberFormatSymbols_th ,
    DECIMAL_PATTERN : NumberFormatSymbols_th ,
    DECIMAL_SEP : NumberFormatSymbols_th ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_th ,
    EXP_SYMBOL : NumberFormatSymbols_th ,
    GROUP_SEP : NumberFormatSymbols_th ,
    INFINITY : NumberFormatSymbols_th ,
    MINUS_SIGN : NumberFormatSymbols_th ,
    NAN : NumberFormatSymbols_th ,
    PERCENT : NumberFormatSymbols_th ,
    PERCENT_PATTERN : NumberFormatSymbols_th ,
    PERMILL : NumberFormatSymbols_th ,
    PLUS_SIGN : NumberFormatSymbols_th ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_th ,
    ZERO_DIGIT : NumberFormatSymbols_th ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_th'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_th;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_th' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_th;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale th_TH.
   */
  type NumberFormatSymbols_th_TH = string ;
  var NumberFormatSymbols_th_TH : {
    CURRENCY_PATTERN : NumberFormatSymbols_th_TH ,
    DECIMAL_PATTERN : NumberFormatSymbols_th_TH ,
    DECIMAL_SEP : NumberFormatSymbols_th_TH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_th_TH ,
    EXP_SYMBOL : NumberFormatSymbols_th_TH ,
    GROUP_SEP : NumberFormatSymbols_th_TH ,
    INFINITY : NumberFormatSymbols_th_TH ,
    MINUS_SIGN : NumberFormatSymbols_th_TH ,
    NAN : NumberFormatSymbols_th_TH ,
    PERCENT : NumberFormatSymbols_th_TH ,
    PERCENT_PATTERN : NumberFormatSymbols_th_TH ,
    PERMILL : NumberFormatSymbols_th_TH ,
    PLUS_SIGN : NumberFormatSymbols_th_TH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_th_TH ,
    ZERO_DIGIT : NumberFormatSymbols_th_TH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_th_TH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_th_TH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_th_TH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_th_TH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ti.
   */
  type NumberFormatSymbols_ti = string ;
  var NumberFormatSymbols_ti : {
    CURRENCY_PATTERN : NumberFormatSymbols_ti ,
    DECIMAL_PATTERN : NumberFormatSymbols_ti ,
    DECIMAL_SEP : NumberFormatSymbols_ti ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ti ,
    EXP_SYMBOL : NumberFormatSymbols_ti ,
    GROUP_SEP : NumberFormatSymbols_ti ,
    INFINITY : NumberFormatSymbols_ti ,
    MINUS_SIGN : NumberFormatSymbols_ti ,
    NAN : NumberFormatSymbols_ti ,
    PERCENT : NumberFormatSymbols_ti ,
    PERCENT_PATTERN : NumberFormatSymbols_ti ,
    PERMILL : NumberFormatSymbols_ti ,
    PLUS_SIGN : NumberFormatSymbols_ti ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ti ,
    ZERO_DIGIT : NumberFormatSymbols_ti ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ti'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ti;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ti' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ti;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ti_ER.
   */
  type NumberFormatSymbols_ti_ER = string ;
  var NumberFormatSymbols_ti_ER : {
    CURRENCY_PATTERN : NumberFormatSymbols_ti_ER ,
    DECIMAL_PATTERN : NumberFormatSymbols_ti_ER ,
    DECIMAL_SEP : NumberFormatSymbols_ti_ER ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ti_ER ,
    EXP_SYMBOL : NumberFormatSymbols_ti_ER ,
    GROUP_SEP : NumberFormatSymbols_ti_ER ,
    INFINITY : NumberFormatSymbols_ti_ER ,
    MINUS_SIGN : NumberFormatSymbols_ti_ER ,
    NAN : NumberFormatSymbols_ti_ER ,
    PERCENT : NumberFormatSymbols_ti_ER ,
    PERCENT_PATTERN : NumberFormatSymbols_ti_ER ,
    PERMILL : NumberFormatSymbols_ti_ER ,
    PLUS_SIGN : NumberFormatSymbols_ti_ER ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ti_ER ,
    ZERO_DIGIT : NumberFormatSymbols_ti_ER ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ti_ER'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ti_ER;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ti_ER' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ti_ER;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ti_ET.
   */
  type NumberFormatSymbols_ti_ET = string ;
  var NumberFormatSymbols_ti_ET : {
    CURRENCY_PATTERN : NumberFormatSymbols_ti_ET ,
    DECIMAL_PATTERN : NumberFormatSymbols_ti_ET ,
    DECIMAL_SEP : NumberFormatSymbols_ti_ET ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ti_ET ,
    EXP_SYMBOL : NumberFormatSymbols_ti_ET ,
    GROUP_SEP : NumberFormatSymbols_ti_ET ,
    INFINITY : NumberFormatSymbols_ti_ET ,
    MINUS_SIGN : NumberFormatSymbols_ti_ET ,
    NAN : NumberFormatSymbols_ti_ET ,
    PERCENT : NumberFormatSymbols_ti_ET ,
    PERCENT_PATTERN : NumberFormatSymbols_ti_ET ,
    PERMILL : NumberFormatSymbols_ti_ET ,
    PLUS_SIGN : NumberFormatSymbols_ti_ET ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ti_ET ,
    ZERO_DIGIT : NumberFormatSymbols_ti_ET ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ti_ET'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ti_ET;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ti_ET' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ti_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale tk.
   */
  type NumberFormatSymbols_tk = string ;
  var NumberFormatSymbols_tk : {
    CURRENCY_PATTERN : NumberFormatSymbols_tk ,
    DECIMAL_PATTERN : NumberFormatSymbols_tk ,
    DECIMAL_SEP : NumberFormatSymbols_tk ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_tk ,
    EXP_SYMBOL : NumberFormatSymbols_tk ,
    GROUP_SEP : NumberFormatSymbols_tk ,
    INFINITY : NumberFormatSymbols_tk ,
    MINUS_SIGN : NumberFormatSymbols_tk ,
    NAN : NumberFormatSymbols_tk ,
    PERCENT : NumberFormatSymbols_tk ,
    PERCENT_PATTERN : NumberFormatSymbols_tk ,
    PERMILL : NumberFormatSymbols_tk ,
    PLUS_SIGN : NumberFormatSymbols_tk ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_tk ,
    ZERO_DIGIT : NumberFormatSymbols_tk ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_tk'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tk;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_tk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale tk_TM.
   */
  type NumberFormatSymbols_tk_TM = string ;
  var NumberFormatSymbols_tk_TM : {
    CURRENCY_PATTERN : NumberFormatSymbols_tk_TM ,
    DECIMAL_PATTERN : NumberFormatSymbols_tk_TM ,
    DECIMAL_SEP : NumberFormatSymbols_tk_TM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_tk_TM ,
    EXP_SYMBOL : NumberFormatSymbols_tk_TM ,
    GROUP_SEP : NumberFormatSymbols_tk_TM ,
    INFINITY : NumberFormatSymbols_tk_TM ,
    MINUS_SIGN : NumberFormatSymbols_tk_TM ,
    NAN : NumberFormatSymbols_tk_TM ,
    PERCENT : NumberFormatSymbols_tk_TM ,
    PERCENT_PATTERN : NumberFormatSymbols_tk_TM ,
    PERMILL : NumberFormatSymbols_tk_TM ,
    PLUS_SIGN : NumberFormatSymbols_tk_TM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_tk_TM ,
    ZERO_DIGIT : NumberFormatSymbols_tk_TM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_tk_TM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tk_TM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_tk_TM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tk_TM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale tl.
   */
  type NumberFormatSymbols_tl = string ;
  var NumberFormatSymbols_tl : {
    CURRENCY_PATTERN : NumberFormatSymbols_tl ,
    DECIMAL_PATTERN : NumberFormatSymbols_tl ,
    DECIMAL_SEP : NumberFormatSymbols_tl ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_tl ,
    EXP_SYMBOL : NumberFormatSymbols_tl ,
    GROUP_SEP : NumberFormatSymbols_tl ,
    INFINITY : NumberFormatSymbols_tl ,
    MINUS_SIGN : NumberFormatSymbols_tl ,
    NAN : NumberFormatSymbols_tl ,
    PERCENT : NumberFormatSymbols_tl ,
    PERCENT_PATTERN : NumberFormatSymbols_tl ,
    PERMILL : NumberFormatSymbols_tl ,
    PLUS_SIGN : NumberFormatSymbols_tl ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_tl ,
    ZERO_DIGIT : NumberFormatSymbols_tl ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_tl'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tl;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_tl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale to.
   */
  type NumberFormatSymbols_to = string ;
  var NumberFormatSymbols_to : {
    CURRENCY_PATTERN : NumberFormatSymbols_to ,
    DECIMAL_PATTERN : NumberFormatSymbols_to ,
    DECIMAL_SEP : NumberFormatSymbols_to ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_to ,
    EXP_SYMBOL : NumberFormatSymbols_to ,
    GROUP_SEP : NumberFormatSymbols_to ,
    INFINITY : NumberFormatSymbols_to ,
    MINUS_SIGN : NumberFormatSymbols_to ,
    NAN : NumberFormatSymbols_to ,
    PERCENT : NumberFormatSymbols_to ,
    PERCENT_PATTERN : NumberFormatSymbols_to ,
    PERMILL : NumberFormatSymbols_to ,
    PLUS_SIGN : NumberFormatSymbols_to ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_to ,
    ZERO_DIGIT : NumberFormatSymbols_to ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_to'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_to;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_to' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_to;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale to_TO.
   */
  type NumberFormatSymbols_to_TO = string ;
  var NumberFormatSymbols_to_TO : {
    CURRENCY_PATTERN : NumberFormatSymbols_to_TO ,
    DECIMAL_PATTERN : NumberFormatSymbols_to_TO ,
    DECIMAL_SEP : NumberFormatSymbols_to_TO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_to_TO ,
    EXP_SYMBOL : NumberFormatSymbols_to_TO ,
    GROUP_SEP : NumberFormatSymbols_to_TO ,
    INFINITY : NumberFormatSymbols_to_TO ,
    MINUS_SIGN : NumberFormatSymbols_to_TO ,
    NAN : NumberFormatSymbols_to_TO ,
    PERCENT : NumberFormatSymbols_to_TO ,
    PERCENT_PATTERN : NumberFormatSymbols_to_TO ,
    PERMILL : NumberFormatSymbols_to_TO ,
    PLUS_SIGN : NumberFormatSymbols_to_TO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_to_TO ,
    ZERO_DIGIT : NumberFormatSymbols_to_TO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_to_TO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_to_TO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_to_TO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_to_TO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale tr.
   */
  type NumberFormatSymbols_tr = string ;
  var NumberFormatSymbols_tr : {
    CURRENCY_PATTERN : NumberFormatSymbols_tr ,
    DECIMAL_PATTERN : NumberFormatSymbols_tr ,
    DECIMAL_SEP : NumberFormatSymbols_tr ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_tr ,
    EXP_SYMBOL : NumberFormatSymbols_tr ,
    GROUP_SEP : NumberFormatSymbols_tr ,
    INFINITY : NumberFormatSymbols_tr ,
    MINUS_SIGN : NumberFormatSymbols_tr ,
    NAN : NumberFormatSymbols_tr ,
    PERCENT : NumberFormatSymbols_tr ,
    PERCENT_PATTERN : NumberFormatSymbols_tr ,
    PERMILL : NumberFormatSymbols_tr ,
    PLUS_SIGN : NumberFormatSymbols_tr ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_tr ,
    ZERO_DIGIT : NumberFormatSymbols_tr ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_tr'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tr;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_tr' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale tr_CY.
   */
  type NumberFormatSymbols_tr_CY = string ;
  var NumberFormatSymbols_tr_CY : {
    CURRENCY_PATTERN : NumberFormatSymbols_tr_CY ,
    DECIMAL_PATTERN : NumberFormatSymbols_tr_CY ,
    DECIMAL_SEP : NumberFormatSymbols_tr_CY ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_tr_CY ,
    EXP_SYMBOL : NumberFormatSymbols_tr_CY ,
    GROUP_SEP : NumberFormatSymbols_tr_CY ,
    INFINITY : NumberFormatSymbols_tr_CY ,
    MINUS_SIGN : NumberFormatSymbols_tr_CY ,
    NAN : NumberFormatSymbols_tr_CY ,
    PERCENT : NumberFormatSymbols_tr_CY ,
    PERCENT_PATTERN : NumberFormatSymbols_tr_CY ,
    PERMILL : NumberFormatSymbols_tr_CY ,
    PLUS_SIGN : NumberFormatSymbols_tr_CY ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_tr_CY ,
    ZERO_DIGIT : NumberFormatSymbols_tr_CY ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_tr_CY'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tr_CY;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_tr_CY' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tr_CY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale tr_TR.
   */
  type NumberFormatSymbols_tr_TR = string ;
  var NumberFormatSymbols_tr_TR : {
    CURRENCY_PATTERN : NumberFormatSymbols_tr_TR ,
    DECIMAL_PATTERN : NumberFormatSymbols_tr_TR ,
    DECIMAL_SEP : NumberFormatSymbols_tr_TR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_tr_TR ,
    EXP_SYMBOL : NumberFormatSymbols_tr_TR ,
    GROUP_SEP : NumberFormatSymbols_tr_TR ,
    INFINITY : NumberFormatSymbols_tr_TR ,
    MINUS_SIGN : NumberFormatSymbols_tr_TR ,
    NAN : NumberFormatSymbols_tr_TR ,
    PERCENT : NumberFormatSymbols_tr_TR ,
    PERCENT_PATTERN : NumberFormatSymbols_tr_TR ,
    PERMILL : NumberFormatSymbols_tr_TR ,
    PLUS_SIGN : NumberFormatSymbols_tr_TR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_tr_TR ,
    ZERO_DIGIT : NumberFormatSymbols_tr_TR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_tr_TR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tr_TR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_tr_TR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tr_TR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale twq.
   */
  type NumberFormatSymbols_twq = string ;
  var NumberFormatSymbols_twq : {
    CURRENCY_PATTERN : NumberFormatSymbols_twq ,
    DECIMAL_PATTERN : NumberFormatSymbols_twq ,
    DECIMAL_SEP : NumberFormatSymbols_twq ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_twq ,
    EXP_SYMBOL : NumberFormatSymbols_twq ,
    GROUP_SEP : NumberFormatSymbols_twq ,
    INFINITY : NumberFormatSymbols_twq ,
    MINUS_SIGN : NumberFormatSymbols_twq ,
    NAN : NumberFormatSymbols_twq ,
    PERCENT : NumberFormatSymbols_twq ,
    PERCENT_PATTERN : NumberFormatSymbols_twq ,
    PERMILL : NumberFormatSymbols_twq ,
    PLUS_SIGN : NumberFormatSymbols_twq ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_twq ,
    ZERO_DIGIT : NumberFormatSymbols_twq ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_twq'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_twq;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_twq' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_twq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale twq_NE.
   */
  type NumberFormatSymbols_twq_NE = string ;
  var NumberFormatSymbols_twq_NE : {
    CURRENCY_PATTERN : NumberFormatSymbols_twq_NE ,
    DECIMAL_PATTERN : NumberFormatSymbols_twq_NE ,
    DECIMAL_SEP : NumberFormatSymbols_twq_NE ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_twq_NE ,
    EXP_SYMBOL : NumberFormatSymbols_twq_NE ,
    GROUP_SEP : NumberFormatSymbols_twq_NE ,
    INFINITY : NumberFormatSymbols_twq_NE ,
    MINUS_SIGN : NumberFormatSymbols_twq_NE ,
    NAN : NumberFormatSymbols_twq_NE ,
    PERCENT : NumberFormatSymbols_twq_NE ,
    PERCENT_PATTERN : NumberFormatSymbols_twq_NE ,
    PERMILL : NumberFormatSymbols_twq_NE ,
    PLUS_SIGN : NumberFormatSymbols_twq_NE ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_twq_NE ,
    ZERO_DIGIT : NumberFormatSymbols_twq_NE ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_twq_NE'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_twq_NE;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_twq_NE' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_twq_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale tzm.
   */
  type NumberFormatSymbols_tzm = string ;
  var NumberFormatSymbols_tzm : {
    CURRENCY_PATTERN : NumberFormatSymbols_tzm ,
    DECIMAL_PATTERN : NumberFormatSymbols_tzm ,
    DECIMAL_SEP : NumberFormatSymbols_tzm ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_tzm ,
    EXP_SYMBOL : NumberFormatSymbols_tzm ,
    GROUP_SEP : NumberFormatSymbols_tzm ,
    INFINITY : NumberFormatSymbols_tzm ,
    MINUS_SIGN : NumberFormatSymbols_tzm ,
    NAN : NumberFormatSymbols_tzm ,
    PERCENT : NumberFormatSymbols_tzm ,
    PERCENT_PATTERN : NumberFormatSymbols_tzm ,
    PERMILL : NumberFormatSymbols_tzm ,
    PLUS_SIGN : NumberFormatSymbols_tzm ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_tzm ,
    ZERO_DIGIT : NumberFormatSymbols_tzm ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_tzm'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tzm;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_tzm' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tzm;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale tzm_MA.
   */
  type NumberFormatSymbols_tzm_MA = string ;
  var NumberFormatSymbols_tzm_MA : {
    CURRENCY_PATTERN : NumberFormatSymbols_tzm_MA ,
    DECIMAL_PATTERN : NumberFormatSymbols_tzm_MA ,
    DECIMAL_SEP : NumberFormatSymbols_tzm_MA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_tzm_MA ,
    EXP_SYMBOL : NumberFormatSymbols_tzm_MA ,
    GROUP_SEP : NumberFormatSymbols_tzm_MA ,
    INFINITY : NumberFormatSymbols_tzm_MA ,
    MINUS_SIGN : NumberFormatSymbols_tzm_MA ,
    NAN : NumberFormatSymbols_tzm_MA ,
    PERCENT : NumberFormatSymbols_tzm_MA ,
    PERCENT_PATTERN : NumberFormatSymbols_tzm_MA ,
    PERMILL : NumberFormatSymbols_tzm_MA ,
    PLUS_SIGN : NumberFormatSymbols_tzm_MA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_tzm_MA ,
    ZERO_DIGIT : NumberFormatSymbols_tzm_MA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_tzm_MA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tzm_MA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_tzm_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_tzm_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ug.
   */
  type NumberFormatSymbols_ug = string ;
  var NumberFormatSymbols_ug : {
    CURRENCY_PATTERN : NumberFormatSymbols_ug ,
    DECIMAL_PATTERN : NumberFormatSymbols_ug ,
    DECIMAL_SEP : NumberFormatSymbols_ug ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ug ,
    EXP_SYMBOL : NumberFormatSymbols_ug ,
    GROUP_SEP : NumberFormatSymbols_ug ,
    INFINITY : NumberFormatSymbols_ug ,
    MINUS_SIGN : NumberFormatSymbols_ug ,
    NAN : NumberFormatSymbols_ug ,
    PERCENT : NumberFormatSymbols_ug ,
    PERCENT_PATTERN : NumberFormatSymbols_ug ,
    PERMILL : NumberFormatSymbols_ug ,
    PLUS_SIGN : NumberFormatSymbols_ug ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ug ,
    ZERO_DIGIT : NumberFormatSymbols_ug ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ug'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ug;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ug' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ug;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ug_CN.
   */
  type NumberFormatSymbols_ug_CN = string ;
  var NumberFormatSymbols_ug_CN : {
    CURRENCY_PATTERN : NumberFormatSymbols_ug_CN ,
    DECIMAL_PATTERN : NumberFormatSymbols_ug_CN ,
    DECIMAL_SEP : NumberFormatSymbols_ug_CN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ug_CN ,
    EXP_SYMBOL : NumberFormatSymbols_ug_CN ,
    GROUP_SEP : NumberFormatSymbols_ug_CN ,
    INFINITY : NumberFormatSymbols_ug_CN ,
    MINUS_SIGN : NumberFormatSymbols_ug_CN ,
    NAN : NumberFormatSymbols_ug_CN ,
    PERCENT : NumberFormatSymbols_ug_CN ,
    PERCENT_PATTERN : NumberFormatSymbols_ug_CN ,
    PERMILL : NumberFormatSymbols_ug_CN ,
    PLUS_SIGN : NumberFormatSymbols_ug_CN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ug_CN ,
    ZERO_DIGIT : NumberFormatSymbols_ug_CN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ug_CN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ug_CN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ug_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ug_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale uk.
   */
  type NumberFormatSymbols_uk = string ;
  var NumberFormatSymbols_uk : {
    CURRENCY_PATTERN : NumberFormatSymbols_uk ,
    DECIMAL_PATTERN : NumberFormatSymbols_uk ,
    DECIMAL_SEP : NumberFormatSymbols_uk ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_uk ,
    EXP_SYMBOL : NumberFormatSymbols_uk ,
    GROUP_SEP : NumberFormatSymbols_uk ,
    INFINITY : NumberFormatSymbols_uk ,
    MINUS_SIGN : NumberFormatSymbols_uk ,
    NAN : NumberFormatSymbols_uk ,
    PERCENT : NumberFormatSymbols_uk ,
    PERCENT_PATTERN : NumberFormatSymbols_uk ,
    PERMILL : NumberFormatSymbols_uk ,
    PLUS_SIGN : NumberFormatSymbols_uk ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_uk ,
    ZERO_DIGIT : NumberFormatSymbols_uk ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_uk'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uk;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_uk' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale uk_UA.
   */
  type NumberFormatSymbols_uk_UA = string ;
  var NumberFormatSymbols_uk_UA : {
    CURRENCY_PATTERN : NumberFormatSymbols_uk_UA ,
    DECIMAL_PATTERN : NumberFormatSymbols_uk_UA ,
    DECIMAL_SEP : NumberFormatSymbols_uk_UA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_uk_UA ,
    EXP_SYMBOL : NumberFormatSymbols_uk_UA ,
    GROUP_SEP : NumberFormatSymbols_uk_UA ,
    INFINITY : NumberFormatSymbols_uk_UA ,
    MINUS_SIGN : NumberFormatSymbols_uk_UA ,
    NAN : NumberFormatSymbols_uk_UA ,
    PERCENT : NumberFormatSymbols_uk_UA ,
    PERCENT_PATTERN : NumberFormatSymbols_uk_UA ,
    PERMILL : NumberFormatSymbols_uk_UA ,
    PLUS_SIGN : NumberFormatSymbols_uk_UA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_uk_UA ,
    ZERO_DIGIT : NumberFormatSymbols_uk_UA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_uk_UA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uk_UA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_uk_UA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uk_UA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ur.
   */
  type NumberFormatSymbols_ur = string ;
  var NumberFormatSymbols_ur : {
    CURRENCY_PATTERN : NumberFormatSymbols_ur ,
    DECIMAL_PATTERN : NumberFormatSymbols_ur ,
    DECIMAL_SEP : NumberFormatSymbols_ur ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ur ,
    EXP_SYMBOL : NumberFormatSymbols_ur ,
    GROUP_SEP : NumberFormatSymbols_ur ,
    INFINITY : NumberFormatSymbols_ur ,
    MINUS_SIGN : NumberFormatSymbols_ur ,
    NAN : NumberFormatSymbols_ur ,
    PERCENT : NumberFormatSymbols_ur ,
    PERCENT_PATTERN : NumberFormatSymbols_ur ,
    PERMILL : NumberFormatSymbols_ur ,
    PLUS_SIGN : NumberFormatSymbols_ur ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ur ,
    ZERO_DIGIT : NumberFormatSymbols_ur ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ur'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ur;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ur' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ur;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ur_IN.
   */
  type NumberFormatSymbols_ur_IN = string ;
  var NumberFormatSymbols_ur_IN : {
    CURRENCY_PATTERN : NumberFormatSymbols_ur_IN ,
    DECIMAL_PATTERN : NumberFormatSymbols_ur_IN ,
    DECIMAL_SEP : NumberFormatSymbols_ur_IN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ur_IN ,
    EXP_SYMBOL : NumberFormatSymbols_ur_IN ,
    GROUP_SEP : NumberFormatSymbols_ur_IN ,
    INFINITY : NumberFormatSymbols_ur_IN ,
    MINUS_SIGN : NumberFormatSymbols_ur_IN ,
    NAN : NumberFormatSymbols_ur_IN ,
    PERCENT : NumberFormatSymbols_ur_IN ,
    PERCENT_PATTERN : NumberFormatSymbols_ur_IN ,
    PERMILL : NumberFormatSymbols_ur_IN ,
    PLUS_SIGN : NumberFormatSymbols_ur_IN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ur_IN ,
    ZERO_DIGIT : NumberFormatSymbols_ur_IN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ur_IN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ur_IN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ur_IN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ur_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale ur_PK.
   */
  type NumberFormatSymbols_ur_PK = string ;
  var NumberFormatSymbols_ur_PK : {
    CURRENCY_PATTERN : NumberFormatSymbols_ur_PK ,
    DECIMAL_PATTERN : NumberFormatSymbols_ur_PK ,
    DECIMAL_SEP : NumberFormatSymbols_ur_PK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_ur_PK ,
    EXP_SYMBOL : NumberFormatSymbols_ur_PK ,
    GROUP_SEP : NumberFormatSymbols_ur_PK ,
    INFINITY : NumberFormatSymbols_ur_PK ,
    MINUS_SIGN : NumberFormatSymbols_ur_PK ,
    NAN : NumberFormatSymbols_ur_PK ,
    PERCENT : NumberFormatSymbols_ur_PK ,
    PERCENT_PATTERN : NumberFormatSymbols_ur_PK ,
    PERMILL : NumberFormatSymbols_ur_PK ,
    PLUS_SIGN : NumberFormatSymbols_ur_PK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_ur_PK ,
    ZERO_DIGIT : NumberFormatSymbols_ur_PK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_ur_PK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ur_PK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_ur_PK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_ur_PK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale uz.
   */
  type NumberFormatSymbols_uz = string ;
  var NumberFormatSymbols_uz : {
    CURRENCY_PATTERN : NumberFormatSymbols_uz ,
    DECIMAL_PATTERN : NumberFormatSymbols_uz ,
    DECIMAL_SEP : NumberFormatSymbols_uz ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_uz ,
    EXP_SYMBOL : NumberFormatSymbols_uz ,
    GROUP_SEP : NumberFormatSymbols_uz ,
    INFINITY : NumberFormatSymbols_uz ,
    MINUS_SIGN : NumberFormatSymbols_uz ,
    NAN : NumberFormatSymbols_uz ,
    PERCENT : NumberFormatSymbols_uz ,
    PERCENT_PATTERN : NumberFormatSymbols_uz ,
    PERMILL : NumberFormatSymbols_uz ,
    PLUS_SIGN : NumberFormatSymbols_uz ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_uz ,
    ZERO_DIGIT : NumberFormatSymbols_uz ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_uz'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_uz' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale uz_Arab.
   */
  type NumberFormatSymbols_uz_Arab = string ;
  var NumberFormatSymbols_uz_Arab : {
    CURRENCY_PATTERN : NumberFormatSymbols_uz_Arab ,
    DECIMAL_PATTERN : NumberFormatSymbols_uz_Arab ,
    DECIMAL_SEP : NumberFormatSymbols_uz_Arab ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_uz_Arab ,
    EXP_SYMBOL : NumberFormatSymbols_uz_Arab ,
    GROUP_SEP : NumberFormatSymbols_uz_Arab ,
    INFINITY : NumberFormatSymbols_uz_Arab ,
    MINUS_SIGN : NumberFormatSymbols_uz_Arab ,
    NAN : NumberFormatSymbols_uz_Arab ,
    PERCENT : NumberFormatSymbols_uz_Arab ,
    PERCENT_PATTERN : NumberFormatSymbols_uz_Arab ,
    PERMILL : NumberFormatSymbols_uz_Arab ,
    PLUS_SIGN : NumberFormatSymbols_uz_Arab ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_uz_Arab ,
    ZERO_DIGIT : NumberFormatSymbols_uz_Arab ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_uz_Arab'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz_Arab;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_uz_Arab' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz_Arab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale uz_Arab_AF.
   */
  type NumberFormatSymbols_uz_Arab_AF = string ;
  var NumberFormatSymbols_uz_Arab_AF : {
    CURRENCY_PATTERN : NumberFormatSymbols_uz_Arab_AF ,
    DECIMAL_PATTERN : NumberFormatSymbols_uz_Arab_AF ,
    DECIMAL_SEP : NumberFormatSymbols_uz_Arab_AF ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_uz_Arab_AF ,
    EXP_SYMBOL : NumberFormatSymbols_uz_Arab_AF ,
    GROUP_SEP : NumberFormatSymbols_uz_Arab_AF ,
    INFINITY : NumberFormatSymbols_uz_Arab_AF ,
    MINUS_SIGN : NumberFormatSymbols_uz_Arab_AF ,
    NAN : NumberFormatSymbols_uz_Arab_AF ,
    PERCENT : NumberFormatSymbols_uz_Arab_AF ,
    PERCENT_PATTERN : NumberFormatSymbols_uz_Arab_AF ,
    PERMILL : NumberFormatSymbols_uz_Arab_AF ,
    PLUS_SIGN : NumberFormatSymbols_uz_Arab_AF ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_uz_Arab_AF ,
    ZERO_DIGIT : NumberFormatSymbols_uz_Arab_AF ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_uz_Arab_AF'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz_Arab_AF;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_uz_Arab_AF' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz_Arab_AF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale uz_Cyrl.
   */
  type NumberFormatSymbols_uz_Cyrl = string ;
  var NumberFormatSymbols_uz_Cyrl : {
    CURRENCY_PATTERN : NumberFormatSymbols_uz_Cyrl ,
    DECIMAL_PATTERN : NumberFormatSymbols_uz_Cyrl ,
    DECIMAL_SEP : NumberFormatSymbols_uz_Cyrl ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_uz_Cyrl ,
    EXP_SYMBOL : NumberFormatSymbols_uz_Cyrl ,
    GROUP_SEP : NumberFormatSymbols_uz_Cyrl ,
    INFINITY : NumberFormatSymbols_uz_Cyrl ,
    MINUS_SIGN : NumberFormatSymbols_uz_Cyrl ,
    NAN : NumberFormatSymbols_uz_Cyrl ,
    PERCENT : NumberFormatSymbols_uz_Cyrl ,
    PERCENT_PATTERN : NumberFormatSymbols_uz_Cyrl ,
    PERMILL : NumberFormatSymbols_uz_Cyrl ,
    PLUS_SIGN : NumberFormatSymbols_uz_Cyrl ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_uz_Cyrl ,
    ZERO_DIGIT : NumberFormatSymbols_uz_Cyrl ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_uz_Cyrl'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz_Cyrl;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_uz_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale uz_Cyrl_UZ.
   */
  type NumberFormatSymbols_uz_Cyrl_UZ = string ;
  var NumberFormatSymbols_uz_Cyrl_UZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_uz_Cyrl_UZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_uz_Cyrl_UZ ,
    DECIMAL_SEP : NumberFormatSymbols_uz_Cyrl_UZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_uz_Cyrl_UZ ,
    EXP_SYMBOL : NumberFormatSymbols_uz_Cyrl_UZ ,
    GROUP_SEP : NumberFormatSymbols_uz_Cyrl_UZ ,
    INFINITY : NumberFormatSymbols_uz_Cyrl_UZ ,
    MINUS_SIGN : NumberFormatSymbols_uz_Cyrl_UZ ,
    NAN : NumberFormatSymbols_uz_Cyrl_UZ ,
    PERCENT : NumberFormatSymbols_uz_Cyrl_UZ ,
    PERCENT_PATTERN : NumberFormatSymbols_uz_Cyrl_UZ ,
    PERMILL : NumberFormatSymbols_uz_Cyrl_UZ ,
    PLUS_SIGN : NumberFormatSymbols_uz_Cyrl_UZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_uz_Cyrl_UZ ,
    ZERO_DIGIT : NumberFormatSymbols_uz_Cyrl_UZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_uz_Cyrl_UZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz_Cyrl_UZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_uz_Cyrl_UZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz_Cyrl_UZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale uz_Latn.
   */
  type NumberFormatSymbols_uz_Latn = string ;
  var NumberFormatSymbols_uz_Latn : {
    CURRENCY_PATTERN : NumberFormatSymbols_uz_Latn ,
    DECIMAL_PATTERN : NumberFormatSymbols_uz_Latn ,
    DECIMAL_SEP : NumberFormatSymbols_uz_Latn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_uz_Latn ,
    EXP_SYMBOL : NumberFormatSymbols_uz_Latn ,
    GROUP_SEP : NumberFormatSymbols_uz_Latn ,
    INFINITY : NumberFormatSymbols_uz_Latn ,
    MINUS_SIGN : NumberFormatSymbols_uz_Latn ,
    NAN : NumberFormatSymbols_uz_Latn ,
    PERCENT : NumberFormatSymbols_uz_Latn ,
    PERCENT_PATTERN : NumberFormatSymbols_uz_Latn ,
    PERMILL : NumberFormatSymbols_uz_Latn ,
    PLUS_SIGN : NumberFormatSymbols_uz_Latn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_uz_Latn ,
    ZERO_DIGIT : NumberFormatSymbols_uz_Latn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_uz_Latn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz_Latn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_uz_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale uz_Latn_UZ.
   */
  type NumberFormatSymbols_uz_Latn_UZ = string ;
  var NumberFormatSymbols_uz_Latn_UZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_uz_Latn_UZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_uz_Latn_UZ ,
    DECIMAL_SEP : NumberFormatSymbols_uz_Latn_UZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_uz_Latn_UZ ,
    EXP_SYMBOL : NumberFormatSymbols_uz_Latn_UZ ,
    GROUP_SEP : NumberFormatSymbols_uz_Latn_UZ ,
    INFINITY : NumberFormatSymbols_uz_Latn_UZ ,
    MINUS_SIGN : NumberFormatSymbols_uz_Latn_UZ ,
    NAN : NumberFormatSymbols_uz_Latn_UZ ,
    PERCENT : NumberFormatSymbols_uz_Latn_UZ ,
    PERCENT_PATTERN : NumberFormatSymbols_uz_Latn_UZ ,
    PERMILL : NumberFormatSymbols_uz_Latn_UZ ,
    PLUS_SIGN : NumberFormatSymbols_uz_Latn_UZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_uz_Latn_UZ ,
    ZERO_DIGIT : NumberFormatSymbols_uz_Latn_UZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_uz_Latn_UZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz_Latn_UZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_uz_Latn_UZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_uz_Latn_UZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale vai.
   */
  type NumberFormatSymbols_vai = string ;
  var NumberFormatSymbols_vai : {
    CURRENCY_PATTERN : NumberFormatSymbols_vai ,
    DECIMAL_PATTERN : NumberFormatSymbols_vai ,
    DECIMAL_SEP : NumberFormatSymbols_vai ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_vai ,
    EXP_SYMBOL : NumberFormatSymbols_vai ,
    GROUP_SEP : NumberFormatSymbols_vai ,
    INFINITY : NumberFormatSymbols_vai ,
    MINUS_SIGN : NumberFormatSymbols_vai ,
    NAN : NumberFormatSymbols_vai ,
    PERCENT : NumberFormatSymbols_vai ,
    PERCENT_PATTERN : NumberFormatSymbols_vai ,
    PERMILL : NumberFormatSymbols_vai ,
    PLUS_SIGN : NumberFormatSymbols_vai ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_vai ,
    ZERO_DIGIT : NumberFormatSymbols_vai ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_vai'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vai;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_vai' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vai;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale vai_Latn.
   */
  type NumberFormatSymbols_vai_Latn = string ;
  var NumberFormatSymbols_vai_Latn : {
    CURRENCY_PATTERN : NumberFormatSymbols_vai_Latn ,
    DECIMAL_PATTERN : NumberFormatSymbols_vai_Latn ,
    DECIMAL_SEP : NumberFormatSymbols_vai_Latn ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_vai_Latn ,
    EXP_SYMBOL : NumberFormatSymbols_vai_Latn ,
    GROUP_SEP : NumberFormatSymbols_vai_Latn ,
    INFINITY : NumberFormatSymbols_vai_Latn ,
    MINUS_SIGN : NumberFormatSymbols_vai_Latn ,
    NAN : NumberFormatSymbols_vai_Latn ,
    PERCENT : NumberFormatSymbols_vai_Latn ,
    PERCENT_PATTERN : NumberFormatSymbols_vai_Latn ,
    PERMILL : NumberFormatSymbols_vai_Latn ,
    PLUS_SIGN : NumberFormatSymbols_vai_Latn ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_vai_Latn ,
    ZERO_DIGIT : NumberFormatSymbols_vai_Latn ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_vai_Latn'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vai_Latn;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_vai_Latn' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vai_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale vai_Latn_LR.
   */
  type NumberFormatSymbols_vai_Latn_LR = string ;
  var NumberFormatSymbols_vai_Latn_LR : {
    CURRENCY_PATTERN : NumberFormatSymbols_vai_Latn_LR ,
    DECIMAL_PATTERN : NumberFormatSymbols_vai_Latn_LR ,
    DECIMAL_SEP : NumberFormatSymbols_vai_Latn_LR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_vai_Latn_LR ,
    EXP_SYMBOL : NumberFormatSymbols_vai_Latn_LR ,
    GROUP_SEP : NumberFormatSymbols_vai_Latn_LR ,
    INFINITY : NumberFormatSymbols_vai_Latn_LR ,
    MINUS_SIGN : NumberFormatSymbols_vai_Latn_LR ,
    NAN : NumberFormatSymbols_vai_Latn_LR ,
    PERCENT : NumberFormatSymbols_vai_Latn_LR ,
    PERCENT_PATTERN : NumberFormatSymbols_vai_Latn_LR ,
    PERMILL : NumberFormatSymbols_vai_Latn_LR ,
    PLUS_SIGN : NumberFormatSymbols_vai_Latn_LR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_vai_Latn_LR ,
    ZERO_DIGIT : NumberFormatSymbols_vai_Latn_LR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_vai_Latn_LR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vai_Latn_LR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_vai_Latn_LR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vai_Latn_LR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale vai_Vaii.
   */
  type NumberFormatSymbols_vai_Vaii = string ;
  var NumberFormatSymbols_vai_Vaii : {
    CURRENCY_PATTERN : NumberFormatSymbols_vai_Vaii ,
    DECIMAL_PATTERN : NumberFormatSymbols_vai_Vaii ,
    DECIMAL_SEP : NumberFormatSymbols_vai_Vaii ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_vai_Vaii ,
    EXP_SYMBOL : NumberFormatSymbols_vai_Vaii ,
    GROUP_SEP : NumberFormatSymbols_vai_Vaii ,
    INFINITY : NumberFormatSymbols_vai_Vaii ,
    MINUS_SIGN : NumberFormatSymbols_vai_Vaii ,
    NAN : NumberFormatSymbols_vai_Vaii ,
    PERCENT : NumberFormatSymbols_vai_Vaii ,
    PERCENT_PATTERN : NumberFormatSymbols_vai_Vaii ,
    PERMILL : NumberFormatSymbols_vai_Vaii ,
    PLUS_SIGN : NumberFormatSymbols_vai_Vaii ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_vai_Vaii ,
    ZERO_DIGIT : NumberFormatSymbols_vai_Vaii ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_vai_Vaii'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vai_Vaii;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_vai_Vaii' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vai_Vaii;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale vai_Vaii_LR.
   */
  type NumberFormatSymbols_vai_Vaii_LR = string ;
  var NumberFormatSymbols_vai_Vaii_LR : {
    CURRENCY_PATTERN : NumberFormatSymbols_vai_Vaii_LR ,
    DECIMAL_PATTERN : NumberFormatSymbols_vai_Vaii_LR ,
    DECIMAL_SEP : NumberFormatSymbols_vai_Vaii_LR ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_vai_Vaii_LR ,
    EXP_SYMBOL : NumberFormatSymbols_vai_Vaii_LR ,
    GROUP_SEP : NumberFormatSymbols_vai_Vaii_LR ,
    INFINITY : NumberFormatSymbols_vai_Vaii_LR ,
    MINUS_SIGN : NumberFormatSymbols_vai_Vaii_LR ,
    NAN : NumberFormatSymbols_vai_Vaii_LR ,
    PERCENT : NumberFormatSymbols_vai_Vaii_LR ,
    PERCENT_PATTERN : NumberFormatSymbols_vai_Vaii_LR ,
    PERMILL : NumberFormatSymbols_vai_Vaii_LR ,
    PLUS_SIGN : NumberFormatSymbols_vai_Vaii_LR ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_vai_Vaii_LR ,
    ZERO_DIGIT : NumberFormatSymbols_vai_Vaii_LR ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_vai_Vaii_LR'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vai_Vaii_LR;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_vai_Vaii_LR' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vai_Vaii_LR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale vi.
   */
  type NumberFormatSymbols_vi = string ;
  var NumberFormatSymbols_vi : {
    CURRENCY_PATTERN : NumberFormatSymbols_vi ,
    DECIMAL_PATTERN : NumberFormatSymbols_vi ,
    DECIMAL_SEP : NumberFormatSymbols_vi ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_vi ,
    EXP_SYMBOL : NumberFormatSymbols_vi ,
    GROUP_SEP : NumberFormatSymbols_vi ,
    INFINITY : NumberFormatSymbols_vi ,
    MINUS_SIGN : NumberFormatSymbols_vi ,
    NAN : NumberFormatSymbols_vi ,
    PERCENT : NumberFormatSymbols_vi ,
    PERCENT_PATTERN : NumberFormatSymbols_vi ,
    PERMILL : NumberFormatSymbols_vi ,
    PLUS_SIGN : NumberFormatSymbols_vi ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_vi ,
    ZERO_DIGIT : NumberFormatSymbols_vi ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_vi'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vi;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_vi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale vi_VN.
   */
  type NumberFormatSymbols_vi_VN = string ;
  var NumberFormatSymbols_vi_VN : {
    CURRENCY_PATTERN : NumberFormatSymbols_vi_VN ,
    DECIMAL_PATTERN : NumberFormatSymbols_vi_VN ,
    DECIMAL_SEP : NumberFormatSymbols_vi_VN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_vi_VN ,
    EXP_SYMBOL : NumberFormatSymbols_vi_VN ,
    GROUP_SEP : NumberFormatSymbols_vi_VN ,
    INFINITY : NumberFormatSymbols_vi_VN ,
    MINUS_SIGN : NumberFormatSymbols_vi_VN ,
    NAN : NumberFormatSymbols_vi_VN ,
    PERCENT : NumberFormatSymbols_vi_VN ,
    PERCENT_PATTERN : NumberFormatSymbols_vi_VN ,
    PERMILL : NumberFormatSymbols_vi_VN ,
    PLUS_SIGN : NumberFormatSymbols_vi_VN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_vi_VN ,
    ZERO_DIGIT : NumberFormatSymbols_vi_VN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_vi_VN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vi_VN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_vi_VN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vi_VN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale vo.
   */
  type NumberFormatSymbols_vo = string ;
  var NumberFormatSymbols_vo : {
    CURRENCY_PATTERN : NumberFormatSymbols_vo ,
    DECIMAL_PATTERN : NumberFormatSymbols_vo ,
    DECIMAL_SEP : NumberFormatSymbols_vo ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_vo ,
    EXP_SYMBOL : NumberFormatSymbols_vo ,
    GROUP_SEP : NumberFormatSymbols_vo ,
    INFINITY : NumberFormatSymbols_vo ,
    MINUS_SIGN : NumberFormatSymbols_vo ,
    NAN : NumberFormatSymbols_vo ,
    PERCENT : NumberFormatSymbols_vo ,
    PERCENT_PATTERN : NumberFormatSymbols_vo ,
    PERMILL : NumberFormatSymbols_vo ,
    PLUS_SIGN : NumberFormatSymbols_vo ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_vo ,
    ZERO_DIGIT : NumberFormatSymbols_vo ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_vo'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vo;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_vo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale vo_001.
   */
  type NumberFormatSymbols_vo_001 = string ;
  var NumberFormatSymbols_vo_001 : {
    CURRENCY_PATTERN : NumberFormatSymbols_vo_001 ,
    DECIMAL_PATTERN : NumberFormatSymbols_vo_001 ,
    DECIMAL_SEP : NumberFormatSymbols_vo_001 ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_vo_001 ,
    EXP_SYMBOL : NumberFormatSymbols_vo_001 ,
    GROUP_SEP : NumberFormatSymbols_vo_001 ,
    INFINITY : NumberFormatSymbols_vo_001 ,
    MINUS_SIGN : NumberFormatSymbols_vo_001 ,
    NAN : NumberFormatSymbols_vo_001 ,
    PERCENT : NumberFormatSymbols_vo_001 ,
    PERCENT_PATTERN : NumberFormatSymbols_vo_001 ,
    PERMILL : NumberFormatSymbols_vo_001 ,
    PLUS_SIGN : NumberFormatSymbols_vo_001 ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_vo_001 ,
    ZERO_DIGIT : NumberFormatSymbols_vo_001 ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_vo_001'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vo_001;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_vo_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vo_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale vun.
   */
  type NumberFormatSymbols_vun = string ;
  var NumberFormatSymbols_vun : {
    CURRENCY_PATTERN : NumberFormatSymbols_vun ,
    DECIMAL_PATTERN : NumberFormatSymbols_vun ,
    DECIMAL_SEP : NumberFormatSymbols_vun ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_vun ,
    EXP_SYMBOL : NumberFormatSymbols_vun ,
    GROUP_SEP : NumberFormatSymbols_vun ,
    INFINITY : NumberFormatSymbols_vun ,
    MINUS_SIGN : NumberFormatSymbols_vun ,
    NAN : NumberFormatSymbols_vun ,
    PERCENT : NumberFormatSymbols_vun ,
    PERCENT_PATTERN : NumberFormatSymbols_vun ,
    PERMILL : NumberFormatSymbols_vun ,
    PLUS_SIGN : NumberFormatSymbols_vun ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_vun ,
    ZERO_DIGIT : NumberFormatSymbols_vun ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_vun'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vun;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_vun' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vun;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale vun_TZ.
   */
  type NumberFormatSymbols_vun_TZ = string ;
  var NumberFormatSymbols_vun_TZ : {
    CURRENCY_PATTERN : NumberFormatSymbols_vun_TZ ,
    DECIMAL_PATTERN : NumberFormatSymbols_vun_TZ ,
    DECIMAL_SEP : NumberFormatSymbols_vun_TZ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_vun_TZ ,
    EXP_SYMBOL : NumberFormatSymbols_vun_TZ ,
    GROUP_SEP : NumberFormatSymbols_vun_TZ ,
    INFINITY : NumberFormatSymbols_vun_TZ ,
    MINUS_SIGN : NumberFormatSymbols_vun_TZ ,
    NAN : NumberFormatSymbols_vun_TZ ,
    PERCENT : NumberFormatSymbols_vun_TZ ,
    PERCENT_PATTERN : NumberFormatSymbols_vun_TZ ,
    PERMILL : NumberFormatSymbols_vun_TZ ,
    PLUS_SIGN : NumberFormatSymbols_vun_TZ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_vun_TZ ,
    ZERO_DIGIT : NumberFormatSymbols_vun_TZ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_vun_TZ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vun_TZ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_vun_TZ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_vun_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale wae.
   */
  type NumberFormatSymbols_wae = string ;
  var NumberFormatSymbols_wae : {
    CURRENCY_PATTERN : NumberFormatSymbols_wae ,
    DECIMAL_PATTERN : NumberFormatSymbols_wae ,
    DECIMAL_SEP : NumberFormatSymbols_wae ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_wae ,
    EXP_SYMBOL : NumberFormatSymbols_wae ,
    GROUP_SEP : NumberFormatSymbols_wae ,
    INFINITY : NumberFormatSymbols_wae ,
    MINUS_SIGN : NumberFormatSymbols_wae ,
    NAN : NumberFormatSymbols_wae ,
    PERCENT : NumberFormatSymbols_wae ,
    PERCENT_PATTERN : NumberFormatSymbols_wae ,
    PERMILL : NumberFormatSymbols_wae ,
    PLUS_SIGN : NumberFormatSymbols_wae ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_wae ,
    ZERO_DIGIT : NumberFormatSymbols_wae ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_wae'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_wae;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_wae' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_wae;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale wae_CH.
   */
  type NumberFormatSymbols_wae_CH = string ;
  var NumberFormatSymbols_wae_CH : {
    CURRENCY_PATTERN : NumberFormatSymbols_wae_CH ,
    DECIMAL_PATTERN : NumberFormatSymbols_wae_CH ,
    DECIMAL_SEP : NumberFormatSymbols_wae_CH ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_wae_CH ,
    EXP_SYMBOL : NumberFormatSymbols_wae_CH ,
    GROUP_SEP : NumberFormatSymbols_wae_CH ,
    INFINITY : NumberFormatSymbols_wae_CH ,
    MINUS_SIGN : NumberFormatSymbols_wae_CH ,
    NAN : NumberFormatSymbols_wae_CH ,
    PERCENT : NumberFormatSymbols_wae_CH ,
    PERCENT_PATTERN : NumberFormatSymbols_wae_CH ,
    PERMILL : NumberFormatSymbols_wae_CH ,
    PLUS_SIGN : NumberFormatSymbols_wae_CH ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_wae_CH ,
    ZERO_DIGIT : NumberFormatSymbols_wae_CH ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_wae_CH'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_wae_CH;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_wae_CH' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_wae_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale xog.
   */
  type NumberFormatSymbols_xog = string ;
  var NumberFormatSymbols_xog : {
    CURRENCY_PATTERN : NumberFormatSymbols_xog ,
    DECIMAL_PATTERN : NumberFormatSymbols_xog ,
    DECIMAL_SEP : NumberFormatSymbols_xog ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_xog ,
    EXP_SYMBOL : NumberFormatSymbols_xog ,
    GROUP_SEP : NumberFormatSymbols_xog ,
    INFINITY : NumberFormatSymbols_xog ,
    MINUS_SIGN : NumberFormatSymbols_xog ,
    NAN : NumberFormatSymbols_xog ,
    PERCENT : NumberFormatSymbols_xog ,
    PERCENT_PATTERN : NumberFormatSymbols_xog ,
    PERMILL : NumberFormatSymbols_xog ,
    PLUS_SIGN : NumberFormatSymbols_xog ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_xog ,
    ZERO_DIGIT : NumberFormatSymbols_xog ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_xog'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_xog;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_xog' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_xog;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale xog_UG.
   */
  type NumberFormatSymbols_xog_UG = string ;
  var NumberFormatSymbols_xog_UG : {
    CURRENCY_PATTERN : NumberFormatSymbols_xog_UG ,
    DECIMAL_PATTERN : NumberFormatSymbols_xog_UG ,
    DECIMAL_SEP : NumberFormatSymbols_xog_UG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_xog_UG ,
    EXP_SYMBOL : NumberFormatSymbols_xog_UG ,
    GROUP_SEP : NumberFormatSymbols_xog_UG ,
    INFINITY : NumberFormatSymbols_xog_UG ,
    MINUS_SIGN : NumberFormatSymbols_xog_UG ,
    NAN : NumberFormatSymbols_xog_UG ,
    PERCENT : NumberFormatSymbols_xog_UG ,
    PERCENT_PATTERN : NumberFormatSymbols_xog_UG ,
    PERMILL : NumberFormatSymbols_xog_UG ,
    PLUS_SIGN : NumberFormatSymbols_xog_UG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_xog_UG ,
    ZERO_DIGIT : NumberFormatSymbols_xog_UG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_xog_UG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_xog_UG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_xog_UG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_xog_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale yav.
   */
  type NumberFormatSymbols_yav = string ;
  var NumberFormatSymbols_yav : {
    CURRENCY_PATTERN : NumberFormatSymbols_yav ,
    DECIMAL_PATTERN : NumberFormatSymbols_yav ,
    DECIMAL_SEP : NumberFormatSymbols_yav ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_yav ,
    EXP_SYMBOL : NumberFormatSymbols_yav ,
    GROUP_SEP : NumberFormatSymbols_yav ,
    INFINITY : NumberFormatSymbols_yav ,
    MINUS_SIGN : NumberFormatSymbols_yav ,
    NAN : NumberFormatSymbols_yav ,
    PERCENT : NumberFormatSymbols_yav ,
    PERCENT_PATTERN : NumberFormatSymbols_yav ,
    PERMILL : NumberFormatSymbols_yav ,
    PLUS_SIGN : NumberFormatSymbols_yav ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_yav ,
    ZERO_DIGIT : NumberFormatSymbols_yav ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_yav'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yav;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_yav' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yav;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale yav_CM.
   */
  type NumberFormatSymbols_yav_CM = string ;
  var NumberFormatSymbols_yav_CM : {
    CURRENCY_PATTERN : NumberFormatSymbols_yav_CM ,
    DECIMAL_PATTERN : NumberFormatSymbols_yav_CM ,
    DECIMAL_SEP : NumberFormatSymbols_yav_CM ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_yav_CM ,
    EXP_SYMBOL : NumberFormatSymbols_yav_CM ,
    GROUP_SEP : NumberFormatSymbols_yav_CM ,
    INFINITY : NumberFormatSymbols_yav_CM ,
    MINUS_SIGN : NumberFormatSymbols_yav_CM ,
    NAN : NumberFormatSymbols_yav_CM ,
    PERCENT : NumberFormatSymbols_yav_CM ,
    PERCENT_PATTERN : NumberFormatSymbols_yav_CM ,
    PERMILL : NumberFormatSymbols_yav_CM ,
    PLUS_SIGN : NumberFormatSymbols_yav_CM ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_yav_CM ,
    ZERO_DIGIT : NumberFormatSymbols_yav_CM ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_yav_CM'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yav_CM;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_yav_CM' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yav_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale yi.
   */
  type NumberFormatSymbols_yi = string ;
  var NumberFormatSymbols_yi : {
    CURRENCY_PATTERN : NumberFormatSymbols_yi ,
    DECIMAL_PATTERN : NumberFormatSymbols_yi ,
    DECIMAL_SEP : NumberFormatSymbols_yi ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_yi ,
    EXP_SYMBOL : NumberFormatSymbols_yi ,
    GROUP_SEP : NumberFormatSymbols_yi ,
    INFINITY : NumberFormatSymbols_yi ,
    MINUS_SIGN : NumberFormatSymbols_yi ,
    NAN : NumberFormatSymbols_yi ,
    PERCENT : NumberFormatSymbols_yi ,
    PERCENT_PATTERN : NumberFormatSymbols_yi ,
    PERMILL : NumberFormatSymbols_yi ,
    PLUS_SIGN : NumberFormatSymbols_yi ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_yi ,
    ZERO_DIGIT : NumberFormatSymbols_yi ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_yi'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yi;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_yi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale yi_001.
   */
  type NumberFormatSymbols_yi_001 = string ;
  var NumberFormatSymbols_yi_001 : {
    CURRENCY_PATTERN : NumberFormatSymbols_yi_001 ,
    DECIMAL_PATTERN : NumberFormatSymbols_yi_001 ,
    DECIMAL_SEP : NumberFormatSymbols_yi_001 ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_yi_001 ,
    EXP_SYMBOL : NumberFormatSymbols_yi_001 ,
    GROUP_SEP : NumberFormatSymbols_yi_001 ,
    INFINITY : NumberFormatSymbols_yi_001 ,
    MINUS_SIGN : NumberFormatSymbols_yi_001 ,
    NAN : NumberFormatSymbols_yi_001 ,
    PERCENT : NumberFormatSymbols_yi_001 ,
    PERCENT_PATTERN : NumberFormatSymbols_yi_001 ,
    PERMILL : NumberFormatSymbols_yi_001 ,
    PLUS_SIGN : NumberFormatSymbols_yi_001 ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_yi_001 ,
    ZERO_DIGIT : NumberFormatSymbols_yi_001 ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_yi_001'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yi_001;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_yi_001' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yi_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale yo.
   */
  type NumberFormatSymbols_yo = string ;
  var NumberFormatSymbols_yo : {
    CURRENCY_PATTERN : NumberFormatSymbols_yo ,
    DECIMAL_PATTERN : NumberFormatSymbols_yo ,
    DECIMAL_SEP : NumberFormatSymbols_yo ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_yo ,
    EXP_SYMBOL : NumberFormatSymbols_yo ,
    GROUP_SEP : NumberFormatSymbols_yo ,
    INFINITY : NumberFormatSymbols_yo ,
    MINUS_SIGN : NumberFormatSymbols_yo ,
    NAN : NumberFormatSymbols_yo ,
    PERCENT : NumberFormatSymbols_yo ,
    PERCENT_PATTERN : NumberFormatSymbols_yo ,
    PERMILL : NumberFormatSymbols_yo ,
    PLUS_SIGN : NumberFormatSymbols_yo ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_yo ,
    ZERO_DIGIT : NumberFormatSymbols_yo ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_yo'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yo;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_yo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale yo_BJ.
   */
  type NumberFormatSymbols_yo_BJ = string ;
  var NumberFormatSymbols_yo_BJ : {
    CURRENCY_PATTERN : NumberFormatSymbols_yo_BJ ,
    DECIMAL_PATTERN : NumberFormatSymbols_yo_BJ ,
    DECIMAL_SEP : NumberFormatSymbols_yo_BJ ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_yo_BJ ,
    EXP_SYMBOL : NumberFormatSymbols_yo_BJ ,
    GROUP_SEP : NumberFormatSymbols_yo_BJ ,
    INFINITY : NumberFormatSymbols_yo_BJ ,
    MINUS_SIGN : NumberFormatSymbols_yo_BJ ,
    NAN : NumberFormatSymbols_yo_BJ ,
    PERCENT : NumberFormatSymbols_yo_BJ ,
    PERCENT_PATTERN : NumberFormatSymbols_yo_BJ ,
    PERMILL : NumberFormatSymbols_yo_BJ ,
    PLUS_SIGN : NumberFormatSymbols_yo_BJ ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_yo_BJ ,
    ZERO_DIGIT : NumberFormatSymbols_yo_BJ ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_yo_BJ'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yo_BJ;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_yo_BJ' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yo_BJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale yo_NG.
   */
  type NumberFormatSymbols_yo_NG = string ;
  var NumberFormatSymbols_yo_NG : {
    CURRENCY_PATTERN : NumberFormatSymbols_yo_NG ,
    DECIMAL_PATTERN : NumberFormatSymbols_yo_NG ,
    DECIMAL_SEP : NumberFormatSymbols_yo_NG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_yo_NG ,
    EXP_SYMBOL : NumberFormatSymbols_yo_NG ,
    GROUP_SEP : NumberFormatSymbols_yo_NG ,
    INFINITY : NumberFormatSymbols_yo_NG ,
    MINUS_SIGN : NumberFormatSymbols_yo_NG ,
    NAN : NumberFormatSymbols_yo_NG ,
    PERCENT : NumberFormatSymbols_yo_NG ,
    PERCENT_PATTERN : NumberFormatSymbols_yo_NG ,
    PERMILL : NumberFormatSymbols_yo_NG ,
    PLUS_SIGN : NumberFormatSymbols_yo_NG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_yo_NG ,
    ZERO_DIGIT : NumberFormatSymbols_yo_NG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_yo_NG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yo_NG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_yo_NG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yo_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale yue.
   */
  type NumberFormatSymbols_yue = string ;
  var NumberFormatSymbols_yue : {
    CURRENCY_PATTERN : NumberFormatSymbols_yue ,
    DECIMAL_PATTERN : NumberFormatSymbols_yue ,
    DECIMAL_SEP : NumberFormatSymbols_yue ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_yue ,
    EXP_SYMBOL : NumberFormatSymbols_yue ,
    GROUP_SEP : NumberFormatSymbols_yue ,
    INFINITY : NumberFormatSymbols_yue ,
    MINUS_SIGN : NumberFormatSymbols_yue ,
    NAN : NumberFormatSymbols_yue ,
    PERCENT : NumberFormatSymbols_yue ,
    PERCENT_PATTERN : NumberFormatSymbols_yue ,
    PERMILL : NumberFormatSymbols_yue ,
    PLUS_SIGN : NumberFormatSymbols_yue ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_yue ,
    ZERO_DIGIT : NumberFormatSymbols_yue ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_yue'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yue;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_yue' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yue;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale yue_HK.
   */
  type NumberFormatSymbols_yue_HK = string ;
  var NumberFormatSymbols_yue_HK : {
    CURRENCY_PATTERN : NumberFormatSymbols_yue_HK ,
    DECIMAL_PATTERN : NumberFormatSymbols_yue_HK ,
    DECIMAL_SEP : NumberFormatSymbols_yue_HK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_yue_HK ,
    EXP_SYMBOL : NumberFormatSymbols_yue_HK ,
    GROUP_SEP : NumberFormatSymbols_yue_HK ,
    INFINITY : NumberFormatSymbols_yue_HK ,
    MINUS_SIGN : NumberFormatSymbols_yue_HK ,
    NAN : NumberFormatSymbols_yue_HK ,
    PERCENT : NumberFormatSymbols_yue_HK ,
    PERCENT_PATTERN : NumberFormatSymbols_yue_HK ,
    PERMILL : NumberFormatSymbols_yue_HK ,
    PLUS_SIGN : NumberFormatSymbols_yue_HK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_yue_HK ,
    ZERO_DIGIT : NumberFormatSymbols_yue_HK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_yue_HK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yue_HK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_yue_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_yue_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zgh.
   */
  type NumberFormatSymbols_zgh = string ;
  var NumberFormatSymbols_zgh : {
    CURRENCY_PATTERN : NumberFormatSymbols_zgh ,
    DECIMAL_PATTERN : NumberFormatSymbols_zgh ,
    DECIMAL_SEP : NumberFormatSymbols_zgh ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zgh ,
    EXP_SYMBOL : NumberFormatSymbols_zgh ,
    GROUP_SEP : NumberFormatSymbols_zgh ,
    INFINITY : NumberFormatSymbols_zgh ,
    MINUS_SIGN : NumberFormatSymbols_zgh ,
    NAN : NumberFormatSymbols_zgh ,
    PERCENT : NumberFormatSymbols_zgh ,
    PERCENT_PATTERN : NumberFormatSymbols_zgh ,
    PERMILL : NumberFormatSymbols_zgh ,
    PLUS_SIGN : NumberFormatSymbols_zgh ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zgh ,
    ZERO_DIGIT : NumberFormatSymbols_zgh ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zgh'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zgh;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zgh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zgh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zgh_MA.
   */
  type NumberFormatSymbols_zgh_MA = string ;
  var NumberFormatSymbols_zgh_MA : {
    CURRENCY_PATTERN : NumberFormatSymbols_zgh_MA ,
    DECIMAL_PATTERN : NumberFormatSymbols_zgh_MA ,
    DECIMAL_SEP : NumberFormatSymbols_zgh_MA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zgh_MA ,
    EXP_SYMBOL : NumberFormatSymbols_zgh_MA ,
    GROUP_SEP : NumberFormatSymbols_zgh_MA ,
    INFINITY : NumberFormatSymbols_zgh_MA ,
    MINUS_SIGN : NumberFormatSymbols_zgh_MA ,
    NAN : NumberFormatSymbols_zgh_MA ,
    PERCENT : NumberFormatSymbols_zgh_MA ,
    PERCENT_PATTERN : NumberFormatSymbols_zgh_MA ,
    PERMILL : NumberFormatSymbols_zgh_MA ,
    PLUS_SIGN : NumberFormatSymbols_zgh_MA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zgh_MA ,
    ZERO_DIGIT : NumberFormatSymbols_zgh_MA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zgh_MA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zgh_MA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zgh_MA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zgh_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zh.
   */
  type NumberFormatSymbols_zh = string ;
  var NumberFormatSymbols_zh : {
    CURRENCY_PATTERN : NumberFormatSymbols_zh ,
    DECIMAL_PATTERN : NumberFormatSymbols_zh ,
    DECIMAL_SEP : NumberFormatSymbols_zh ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zh ,
    EXP_SYMBOL : NumberFormatSymbols_zh ,
    GROUP_SEP : NumberFormatSymbols_zh ,
    INFINITY : NumberFormatSymbols_zh ,
    MINUS_SIGN : NumberFormatSymbols_zh ,
    NAN : NumberFormatSymbols_zh ,
    PERCENT : NumberFormatSymbols_zh ,
    PERCENT_PATTERN : NumberFormatSymbols_zh ,
    PERMILL : NumberFormatSymbols_zh ,
    PLUS_SIGN : NumberFormatSymbols_zh ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zh ,
    ZERO_DIGIT : NumberFormatSymbols_zh ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zh'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zh' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zh_CN.
   */
  type NumberFormatSymbols_zh_CN = string ;
  var NumberFormatSymbols_zh_CN : {
    CURRENCY_PATTERN : NumberFormatSymbols_zh_CN ,
    DECIMAL_PATTERN : NumberFormatSymbols_zh_CN ,
    DECIMAL_SEP : NumberFormatSymbols_zh_CN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zh_CN ,
    EXP_SYMBOL : NumberFormatSymbols_zh_CN ,
    GROUP_SEP : NumberFormatSymbols_zh_CN ,
    INFINITY : NumberFormatSymbols_zh_CN ,
    MINUS_SIGN : NumberFormatSymbols_zh_CN ,
    NAN : NumberFormatSymbols_zh_CN ,
    PERCENT : NumberFormatSymbols_zh_CN ,
    PERCENT_PATTERN : NumberFormatSymbols_zh_CN ,
    PERMILL : NumberFormatSymbols_zh_CN ,
    PLUS_SIGN : NumberFormatSymbols_zh_CN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zh_CN ,
    ZERO_DIGIT : NumberFormatSymbols_zh_CN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zh_CN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_CN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zh_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zh_HK.
   */
  type NumberFormatSymbols_zh_HK = string ;
  var NumberFormatSymbols_zh_HK : {
    CURRENCY_PATTERN : NumberFormatSymbols_zh_HK ,
    DECIMAL_PATTERN : NumberFormatSymbols_zh_HK ,
    DECIMAL_SEP : NumberFormatSymbols_zh_HK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zh_HK ,
    EXP_SYMBOL : NumberFormatSymbols_zh_HK ,
    GROUP_SEP : NumberFormatSymbols_zh_HK ,
    INFINITY : NumberFormatSymbols_zh_HK ,
    MINUS_SIGN : NumberFormatSymbols_zh_HK ,
    NAN : NumberFormatSymbols_zh_HK ,
    PERCENT : NumberFormatSymbols_zh_HK ,
    PERCENT_PATTERN : NumberFormatSymbols_zh_HK ,
    PERMILL : NumberFormatSymbols_zh_HK ,
    PLUS_SIGN : NumberFormatSymbols_zh_HK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zh_HK ,
    ZERO_DIGIT : NumberFormatSymbols_zh_HK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zh_HK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_HK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zh_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zh_Hans.
   */
  type NumberFormatSymbols_zh_Hans = string ;
  var NumberFormatSymbols_zh_Hans : {
    CURRENCY_PATTERN : NumberFormatSymbols_zh_Hans ,
    DECIMAL_PATTERN : NumberFormatSymbols_zh_Hans ,
    DECIMAL_SEP : NumberFormatSymbols_zh_Hans ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zh_Hans ,
    EXP_SYMBOL : NumberFormatSymbols_zh_Hans ,
    GROUP_SEP : NumberFormatSymbols_zh_Hans ,
    INFINITY : NumberFormatSymbols_zh_Hans ,
    MINUS_SIGN : NumberFormatSymbols_zh_Hans ,
    NAN : NumberFormatSymbols_zh_Hans ,
    PERCENT : NumberFormatSymbols_zh_Hans ,
    PERCENT_PATTERN : NumberFormatSymbols_zh_Hans ,
    PERMILL : NumberFormatSymbols_zh_Hans ,
    PLUS_SIGN : NumberFormatSymbols_zh_Hans ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zh_Hans ,
    ZERO_DIGIT : NumberFormatSymbols_zh_Hans ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zh_Hans'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hans;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zh_Hans' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hans;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zh_Hans_CN.
   */
  type NumberFormatSymbols_zh_Hans_CN = string ;
  var NumberFormatSymbols_zh_Hans_CN : {
    CURRENCY_PATTERN : NumberFormatSymbols_zh_Hans_CN ,
    DECIMAL_PATTERN : NumberFormatSymbols_zh_Hans_CN ,
    DECIMAL_SEP : NumberFormatSymbols_zh_Hans_CN ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zh_Hans_CN ,
    EXP_SYMBOL : NumberFormatSymbols_zh_Hans_CN ,
    GROUP_SEP : NumberFormatSymbols_zh_Hans_CN ,
    INFINITY : NumberFormatSymbols_zh_Hans_CN ,
    MINUS_SIGN : NumberFormatSymbols_zh_Hans_CN ,
    NAN : NumberFormatSymbols_zh_Hans_CN ,
    PERCENT : NumberFormatSymbols_zh_Hans_CN ,
    PERCENT_PATTERN : NumberFormatSymbols_zh_Hans_CN ,
    PERMILL : NumberFormatSymbols_zh_Hans_CN ,
    PLUS_SIGN : NumberFormatSymbols_zh_Hans_CN ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zh_Hans_CN ,
    ZERO_DIGIT : NumberFormatSymbols_zh_Hans_CN ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zh_Hans_CN'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hans_CN;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zh_Hans_CN' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hans_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zh_Hans_HK.
   */
  type NumberFormatSymbols_zh_Hans_HK = string ;
  var NumberFormatSymbols_zh_Hans_HK : {
    CURRENCY_PATTERN : NumberFormatSymbols_zh_Hans_HK ,
    DECIMAL_PATTERN : NumberFormatSymbols_zh_Hans_HK ,
    DECIMAL_SEP : NumberFormatSymbols_zh_Hans_HK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zh_Hans_HK ,
    EXP_SYMBOL : NumberFormatSymbols_zh_Hans_HK ,
    GROUP_SEP : NumberFormatSymbols_zh_Hans_HK ,
    INFINITY : NumberFormatSymbols_zh_Hans_HK ,
    MINUS_SIGN : NumberFormatSymbols_zh_Hans_HK ,
    NAN : NumberFormatSymbols_zh_Hans_HK ,
    PERCENT : NumberFormatSymbols_zh_Hans_HK ,
    PERCENT_PATTERN : NumberFormatSymbols_zh_Hans_HK ,
    PERMILL : NumberFormatSymbols_zh_Hans_HK ,
    PLUS_SIGN : NumberFormatSymbols_zh_Hans_HK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zh_Hans_HK ,
    ZERO_DIGIT : NumberFormatSymbols_zh_Hans_HK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zh_Hans_HK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hans_HK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zh_Hans_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hans_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zh_Hans_MO.
   */
  type NumberFormatSymbols_zh_Hans_MO = string ;
  var NumberFormatSymbols_zh_Hans_MO : {
    CURRENCY_PATTERN : NumberFormatSymbols_zh_Hans_MO ,
    DECIMAL_PATTERN : NumberFormatSymbols_zh_Hans_MO ,
    DECIMAL_SEP : NumberFormatSymbols_zh_Hans_MO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zh_Hans_MO ,
    EXP_SYMBOL : NumberFormatSymbols_zh_Hans_MO ,
    GROUP_SEP : NumberFormatSymbols_zh_Hans_MO ,
    INFINITY : NumberFormatSymbols_zh_Hans_MO ,
    MINUS_SIGN : NumberFormatSymbols_zh_Hans_MO ,
    NAN : NumberFormatSymbols_zh_Hans_MO ,
    PERCENT : NumberFormatSymbols_zh_Hans_MO ,
    PERCENT_PATTERN : NumberFormatSymbols_zh_Hans_MO ,
    PERMILL : NumberFormatSymbols_zh_Hans_MO ,
    PLUS_SIGN : NumberFormatSymbols_zh_Hans_MO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zh_Hans_MO ,
    ZERO_DIGIT : NumberFormatSymbols_zh_Hans_MO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zh_Hans_MO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hans_MO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zh_Hans_MO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hans_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zh_Hans_SG.
   */
  type NumberFormatSymbols_zh_Hans_SG = string ;
  var NumberFormatSymbols_zh_Hans_SG : {
    CURRENCY_PATTERN : NumberFormatSymbols_zh_Hans_SG ,
    DECIMAL_PATTERN : NumberFormatSymbols_zh_Hans_SG ,
    DECIMAL_SEP : NumberFormatSymbols_zh_Hans_SG ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zh_Hans_SG ,
    EXP_SYMBOL : NumberFormatSymbols_zh_Hans_SG ,
    GROUP_SEP : NumberFormatSymbols_zh_Hans_SG ,
    INFINITY : NumberFormatSymbols_zh_Hans_SG ,
    MINUS_SIGN : NumberFormatSymbols_zh_Hans_SG ,
    NAN : NumberFormatSymbols_zh_Hans_SG ,
    PERCENT : NumberFormatSymbols_zh_Hans_SG ,
    PERCENT_PATTERN : NumberFormatSymbols_zh_Hans_SG ,
    PERMILL : NumberFormatSymbols_zh_Hans_SG ,
    PLUS_SIGN : NumberFormatSymbols_zh_Hans_SG ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zh_Hans_SG ,
    ZERO_DIGIT : NumberFormatSymbols_zh_Hans_SG ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zh_Hans_SG'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hans_SG;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zh_Hans_SG' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hans_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zh_Hant.
   */
  type NumberFormatSymbols_zh_Hant = string ;
  var NumberFormatSymbols_zh_Hant : {
    CURRENCY_PATTERN : NumberFormatSymbols_zh_Hant ,
    DECIMAL_PATTERN : NumberFormatSymbols_zh_Hant ,
    DECIMAL_SEP : NumberFormatSymbols_zh_Hant ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zh_Hant ,
    EXP_SYMBOL : NumberFormatSymbols_zh_Hant ,
    GROUP_SEP : NumberFormatSymbols_zh_Hant ,
    INFINITY : NumberFormatSymbols_zh_Hant ,
    MINUS_SIGN : NumberFormatSymbols_zh_Hant ,
    NAN : NumberFormatSymbols_zh_Hant ,
    PERCENT : NumberFormatSymbols_zh_Hant ,
    PERCENT_PATTERN : NumberFormatSymbols_zh_Hant ,
    PERMILL : NumberFormatSymbols_zh_Hant ,
    PLUS_SIGN : NumberFormatSymbols_zh_Hant ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zh_Hant ,
    ZERO_DIGIT : NumberFormatSymbols_zh_Hant ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zh_Hant'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hant;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zh_Hant' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hant;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zh_Hant_HK.
   */
  type NumberFormatSymbols_zh_Hant_HK = string ;
  var NumberFormatSymbols_zh_Hant_HK : {
    CURRENCY_PATTERN : NumberFormatSymbols_zh_Hant_HK ,
    DECIMAL_PATTERN : NumberFormatSymbols_zh_Hant_HK ,
    DECIMAL_SEP : NumberFormatSymbols_zh_Hant_HK ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zh_Hant_HK ,
    EXP_SYMBOL : NumberFormatSymbols_zh_Hant_HK ,
    GROUP_SEP : NumberFormatSymbols_zh_Hant_HK ,
    INFINITY : NumberFormatSymbols_zh_Hant_HK ,
    MINUS_SIGN : NumberFormatSymbols_zh_Hant_HK ,
    NAN : NumberFormatSymbols_zh_Hant_HK ,
    PERCENT : NumberFormatSymbols_zh_Hant_HK ,
    PERCENT_PATTERN : NumberFormatSymbols_zh_Hant_HK ,
    PERMILL : NumberFormatSymbols_zh_Hant_HK ,
    PLUS_SIGN : NumberFormatSymbols_zh_Hant_HK ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zh_Hant_HK ,
    ZERO_DIGIT : NumberFormatSymbols_zh_Hant_HK ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zh_Hant_HK'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hant_HK;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zh_Hant_HK' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hant_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zh_Hant_MO.
   */
  type NumberFormatSymbols_zh_Hant_MO = string ;
  var NumberFormatSymbols_zh_Hant_MO : {
    CURRENCY_PATTERN : NumberFormatSymbols_zh_Hant_MO ,
    DECIMAL_PATTERN : NumberFormatSymbols_zh_Hant_MO ,
    DECIMAL_SEP : NumberFormatSymbols_zh_Hant_MO ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zh_Hant_MO ,
    EXP_SYMBOL : NumberFormatSymbols_zh_Hant_MO ,
    GROUP_SEP : NumberFormatSymbols_zh_Hant_MO ,
    INFINITY : NumberFormatSymbols_zh_Hant_MO ,
    MINUS_SIGN : NumberFormatSymbols_zh_Hant_MO ,
    NAN : NumberFormatSymbols_zh_Hant_MO ,
    PERCENT : NumberFormatSymbols_zh_Hant_MO ,
    PERCENT_PATTERN : NumberFormatSymbols_zh_Hant_MO ,
    PERMILL : NumberFormatSymbols_zh_Hant_MO ,
    PLUS_SIGN : NumberFormatSymbols_zh_Hant_MO ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zh_Hant_MO ,
    ZERO_DIGIT : NumberFormatSymbols_zh_Hant_MO ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zh_Hant_MO'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hant_MO;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zh_Hant_MO' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hant_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zh_Hant_TW.
   */
  type NumberFormatSymbols_zh_Hant_TW = string ;
  var NumberFormatSymbols_zh_Hant_TW : {
    CURRENCY_PATTERN : NumberFormatSymbols_zh_Hant_TW ,
    DECIMAL_PATTERN : NumberFormatSymbols_zh_Hant_TW ,
    DECIMAL_SEP : NumberFormatSymbols_zh_Hant_TW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zh_Hant_TW ,
    EXP_SYMBOL : NumberFormatSymbols_zh_Hant_TW ,
    GROUP_SEP : NumberFormatSymbols_zh_Hant_TW ,
    INFINITY : NumberFormatSymbols_zh_Hant_TW ,
    MINUS_SIGN : NumberFormatSymbols_zh_Hant_TW ,
    NAN : NumberFormatSymbols_zh_Hant_TW ,
    PERCENT : NumberFormatSymbols_zh_Hant_TW ,
    PERCENT_PATTERN : NumberFormatSymbols_zh_Hant_TW ,
    PERMILL : NumberFormatSymbols_zh_Hant_TW ,
    PLUS_SIGN : NumberFormatSymbols_zh_Hant_TW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zh_Hant_TW ,
    ZERO_DIGIT : NumberFormatSymbols_zh_Hant_TW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zh_Hant_TW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hant_TW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zh_Hant_TW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_Hant_TW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zh_TW.
   */
  type NumberFormatSymbols_zh_TW = string ;
  var NumberFormatSymbols_zh_TW : {
    CURRENCY_PATTERN : NumberFormatSymbols_zh_TW ,
    DECIMAL_PATTERN : NumberFormatSymbols_zh_TW ,
    DECIMAL_SEP : NumberFormatSymbols_zh_TW ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zh_TW ,
    EXP_SYMBOL : NumberFormatSymbols_zh_TW ,
    GROUP_SEP : NumberFormatSymbols_zh_TW ,
    INFINITY : NumberFormatSymbols_zh_TW ,
    MINUS_SIGN : NumberFormatSymbols_zh_TW ,
    NAN : NumberFormatSymbols_zh_TW ,
    PERCENT : NumberFormatSymbols_zh_TW ,
    PERCENT_PATTERN : NumberFormatSymbols_zh_TW ,
    PERMILL : NumberFormatSymbols_zh_TW ,
    PLUS_SIGN : NumberFormatSymbols_zh_TW ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zh_TW ,
    ZERO_DIGIT : NumberFormatSymbols_zh_TW ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zh_TW'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_TW;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zh_TW' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zh_TW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zu.
   */
  type NumberFormatSymbols_zu = string ;
  var NumberFormatSymbols_zu : {
    CURRENCY_PATTERN : NumberFormatSymbols_zu ,
    DECIMAL_PATTERN : NumberFormatSymbols_zu ,
    DECIMAL_SEP : NumberFormatSymbols_zu ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zu ,
    EXP_SYMBOL : NumberFormatSymbols_zu ,
    GROUP_SEP : NumberFormatSymbols_zu ,
    INFINITY : NumberFormatSymbols_zu ,
    MINUS_SIGN : NumberFormatSymbols_zu ,
    NAN : NumberFormatSymbols_zu ,
    PERCENT : NumberFormatSymbols_zu ,
    PERCENT_PATTERN : NumberFormatSymbols_zu ,
    PERMILL : NumberFormatSymbols_zu ,
    PLUS_SIGN : NumberFormatSymbols_zu ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zu ,
    ZERO_DIGIT : NumberFormatSymbols_zu ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zu'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zu;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zu' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Number formatting symbols for locale zu_ZA.
   */
  type NumberFormatSymbols_zu_ZA = string ;
  var NumberFormatSymbols_zu_ZA : {
    CURRENCY_PATTERN : NumberFormatSymbols_zu_ZA ,
    DECIMAL_PATTERN : NumberFormatSymbols_zu_ZA ,
    DECIMAL_SEP : NumberFormatSymbols_zu_ZA ,
    DEF_CURRENCY_CODE : NumberFormatSymbols_zu_ZA ,
    EXP_SYMBOL : NumberFormatSymbols_zu_ZA ,
    GROUP_SEP : NumberFormatSymbols_zu_ZA ,
    INFINITY : NumberFormatSymbols_zu_ZA ,
    MINUS_SIGN : NumberFormatSymbols_zu_ZA ,
    NAN : NumberFormatSymbols_zu_ZA ,
    PERCENT : NumberFormatSymbols_zu_ZA ,
    PERCENT_PATTERN : NumberFormatSymbols_zu_ZA ,
    PERMILL : NumberFormatSymbols_zu_ZA ,
    PLUS_SIGN : NumberFormatSymbols_zu_ZA ,
    SCIENTIFIC_PATTERN : NumberFormatSymbols_zu_ZA ,
    ZERO_DIGIT : NumberFormatSymbols_zu_ZA ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.NumberFormatSymbols_zu_ZA'): typeof ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zu_ZA;
}
declare module 'goog:goog.i18n.NumberFormatSymbols_zu_ZA' {
  import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbols_zu_ZA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * TimeZone class implemented a time zone resolution and name information
   * source for client applications. The time zone object is initiated from
   * a time zone information object. Application can initiate a time zone
   * statically, or it may choose to initiate from a data obtained from server.
   * Each time zone information array is small, but the whole set of data
   * is too much for client application to download. If end user is allowed to
   * change time zone setting, dynamic retrieval should be the method to use.
   * In case only time zone offset is known, there is a decent fallback
   * that only use the time zone offset to create a TimeZone object.
   * A whole set of time zone information array was available under
   * http://go/js_locale_data. It is generated based on CLDR/ICU and
   * Olson time zone data base, and will be updated timely.
   */
  class TimeZone extends TimeZone_Instance {
    /**
     * This factory method creates a time zone instance.  It takes either an object
     * containing complete time zone information, or a single number representing a
     * constant time zone offset.  If the latter form is used, DST functionality is
     * not available.
     * @param timeZoneData If this parameter is a number, it should indicate minutes WEST of UTC to be used as a constant time zone offset. Otherwise, it should be an object with these four fields: <ul> <li>id: A string ID for the time zone. <li>std_offset: The standard time zone offset in minutes EAST of UTC. <li>names: An array of four names (standard short name, standard long name, daylight short name, daylight long, name) <li>names_ext: A hash of four fields (standard long name gmt, daylight long name gmt, standard generic location, daylight generic location) <li>transitions: An array of numbers which are interpreted in pairs: [time1, adjustment1, time2, adjustment2, ...] where each time is a DST transition point given as a number of hours since 00:00 UTC, January 1, 1970, and each adjustment is the adjustment to apply for times after the DST transition, given as minutes EAST of UTC. </ul>
     */
    static createTimeZone (timeZoneData : number | Object | null ) : ಠ_ಠ.clutz.goog.i18n.TimeZone ;
  }
  class TimeZone_Instance {
    private noStructuralTyping_: any;
    /**
     * Return the DST adjustment to the time zone offset for a given time.
     * While Daylight Saving Time is in effect, this number is positive.
     * Otherwise, it is zero.
     * @param date The time to check.
     */
    getDaylightAdjustment (date : Date | null | ಠ_ಠ.clutz.goog.date.Date ) : number ;
    /**
     * Return the GMT representation of this time zone object.
     * @param date The date for which time to retrieve GMT string.
     */
    getGMTString (date : Date | null | ಠ_ಠ.clutz.goog.date.Date ) : string ;
    /**
     * Get the generic location time zone name for a given date/time.
     * @param date The time for which to retrieve the generic location time zone name.
     */
    getGenericLocation (date : Date | ಠ_ಠ.clutz.goog.date.Date ) : string ;
    /**
     * Get the long time zone name for a given date/time.
     * @param date The time for which to retrieve the long time zone name.
     */
    getLongName (date : Date | null | ಠ_ಠ.clutz.goog.date.Date ) : string ;
    /**
     * Get the long GMT time zone name for a given date/time.
     * @param date The time for which to retrieve the long GMT time zone name.
     */
    getLongNameGMT (date : Date | ಠ_ಠ.clutz.goog.date.Date ) : string ;
    /**
     * Get the time zone offset in minutes WEST of UTC for a given date/time.
     * @param date The time for which to retrieve the time zone offset.
     */
    getOffset (date : Date | null | ಠ_ಠ.clutz.goog.date.Date ) : number ;
    /**
     * Get the RFC representation of the time zone for a given date/time.
     * @param date The time for which to retrieve the RFC time zone string.
     */
    getRFCTimeZoneString (date : Date | null | ಠ_ಠ.clutz.goog.date.Date ) : string ;
    /**
     * Get the short time zone name for given date/time.
     * @param date The time for which to retrieve the short time zone name.
     */
    getShortName (date : Date | null | ಠ_ಠ.clutz.goog.date.Date ) : string ;
    /**
     * Convert the contents of time zone object to a timeZoneData object, suitable
     * for passing to goog.i18n.TimeZone.createTimeZone.
     */
    getTimeZoneData ( ) : Object ;
    /**
     * Return the time zone ID for this time zone.
     */
    getTimeZoneId ( ) : string ;
    /**
     * Check if Daylight Saving Time is in effect at a given time in this time zone.
     * @param date The time to check.
     */
    isDaylightTime (date : Date | null | ಠ_ಠ.clutz.goog.date.Date ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.i18n.TimeZone {
  type NameType = number ;
  var NameType : {
    DLT_LONG_NAME : NameType ,
    DLT_SHORT_NAME : NameType ,
    STD_LONG_NAME : NameType ,
    STD_SHORT_NAME : NameType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.TimeZone'): typeof ಠ_ಠ.clutz.goog.i18n.TimeZone;
}
declare module 'goog:goog.i18n.TimeZone' {
  import alias = ಠ_ಠ.clutz.goog.i18n.TimeZone;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.bidi {
  var FORCE_RTL : boolean ;
  /**
   * 'right' if locale is RTL, 'left' if not.
   */
  var I18N_LEFT : string ;
  /**
   * 'left' if locale is RTL, 'right' if not.
   */
  var I18N_RIGHT : string ;
  /**
   * Constant that defines whether or not the current locale is a RTL locale.
   * If {@link goog.i18n.bidi.FORCE_RTL} is not true, this constant will default
   * to check that {@link goog.LOCALE} is one of a few major RTL locales.
   *
   * <p>This is designed to be a maximally efficient compile-time constant. For
   * example, for the default goog.LOCALE, compiling
   * "if (goog.i18n.bidi.IS_RTL) alert('rtl') else {}" should produce no code. It
   * is this design consideration that limits the implementation to only
   * supporting a few major RTL locales, as opposed to the broader repertoire of
   * something like goog.i18n.bidi.isRtlLanguage.
   *
   * <p>Since this constant refers to the directionality of the locale, it is up
   * to the caller to determine if this constant should also be used for the
   * direction of the UI.
   *
   * {@see goog.LOCALE}
   */
  var IS_RTL : boolean ;
  /**
   * 'left' string constant.
   */
  var LEFT : string ;
  /**
   * 'right' string constant.
   */
  var RIGHT : string ;
  /**
   * Check the directionality of a piece of text, return true if the piece of
   * text should be laid out in RTL direction.
   * @param str The piece of text that need to be detected.
   * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
   */
  function detectRtlDirectionality (str : string , opt_isHtml ? : boolean ) : boolean ;
  /**
   * Check if the exit directionality a piece of text is LTR, i.e. if the last
   * strongly-directional character in the string is LTR.
   * @param str String being checked.
   * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
   */
  function endsWithLtr (str : string , opt_isHtml ? : boolean ) : boolean ;
  /**
   * Check if the exit directionality a piece of text is RTL, i.e. if the last
   * strongly-directional character in the string is RTL.
   * @param str String being checked.
   * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
   */
  function endsWithRtl (str : string , opt_isHtml ? : boolean ) : boolean ;
  /**
   * Enforce the html snippet in RTL directionality regardless overall context.
   * If the html piece was enclosed by tag, dir will be applied to existing
   * tag, otherwise a span tag will be added as wrapper. For this reason, if
   * html snippet start with with tag, this tag must enclose the whole piece. If
   * the tag already has a dir specified, this new one will override existing
   * one in behavior (tested on FF and IE).
   * @param html The string that need to be processed.
   */
  function enforceLtrInHtml (html : string ) : string ;
  /**
   * Enforce LTR on both end of the given text piece using unicode BiDi formatting
   * characters LRE and PDF.
   * @param text The piece of text that need to be wrapped.
   */
  function enforceLtrInText (text : string ) : string ;
  /**
   * Enforce the html snippet in RTL directionality regardless overall context.
   * If the html piece was enclosed by tag, dir will be applied to existing
   * tag, otherwise a span tag will be added as wrapper. For this reason, if
   * html snippet start with with tag, this tag must enclose the whole piece. If
   * the tag already has a dir specified, this new one will override existing
   * one in behavior (tested on FF and IE).
   * @param html The string that need to be processed.
   */
  function enforceRtlInHtml (html : string ) : string ;
  /**
   * Enforce RTL on both end of the given text piece using unicode BiDi formatting
   * characters RLE and PDF.
   * @param text The piece of text that need to be wrapped.
   */
  function enforceRtlInText (text : string ) : string ;
  /**
   * Estimates the directionality of a string based on relative word counts.
   * If the number of RTL words is above a certain percentage of the total number
   * of strongly directional words, returns RTL.
   * Otherwise, if any words are strongly or weakly LTR, returns LTR.
   * Otherwise, returns UNKNOWN, which is used to mean "neutral".
   * Numbers are counted as weakly LTR.
   * @param str The string to be checked.
   * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
   */
  function estimateDirection (str : string , opt_isHtml ? : boolean ) : ಠ_ಠ.clutz.goog.i18n.bidi.Dir ;
  /**
   * Apply bracket guard using LRM and RLM. This is to address the problem of
   * messy bracket display frequently happens in RTL layout.
   * This function works for plain text, not for HTML. In HTML, the opening
   * bracket might be in a different context than the closing bracket (such as
   * an attribute value).
   * @param s The string that need to be processed.
   * @param opt_isRtlContext specifies default direction (usually direction of the UI).
   */
  function guardBracketInText (s : string , opt_isRtlContext ? : boolean ) : string ;
  /**
   * Test whether the given string has any LTR characters in it.
   * @param str The given string that need to be tested.
   * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
   */
  function hasAnyLtr (str : string , opt_isHtml ? : boolean ) : boolean ;
  /**
   * Test whether the given string has any RTL characters in it.
   * @param str The given string that need to be tested.
   * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
   */
  function hasAnyRtl (str : string , opt_isHtml ? : boolean ) : boolean ;
  /**
   * Test whether the given string has any RTL characters in it.
   * @param str The given string that need to be tested.
   */
  function hasRtlChar (a : string ) : boolean ;
  /**
   * Check if the first character in the string is LTR or not.
   * @param str The given string that need to be tested.
   */
  function isLtrChar (str : string ) : boolean ;
  /**
   * Check if the exit directionality a piece of text is LTR, i.e. if the last
   * strongly-directional character in the string is LTR.
   * @param str String being checked.
   * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
   */
  function isLtrExitText (a : string , b ? : boolean ) : boolean ;
  /**
   * Check whether the first strongly directional character (if any) is LTR.
   * @param str String being checked.
   * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
   */
  function isLtrText (a : string , b ? : boolean ) : boolean ;
  /**
   * Check if the first character in the string is neutral or not.
   * @param str The given string that need to be tested.
   */
  function isNeutralChar (str : string ) : boolean ;
  /**
   * Check whether the input string either contains no strongly directional
   * characters or looks like a url.
   * @param str String being checked.
   * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
   */
  function isNeutralText (str : string , opt_isHtml ? : boolean ) : boolean ;
  /**
   * Check if the first character in the string is RTL or not.
   * @param str The given string that need to be tested.
   */
  function isRtlChar (str : string ) : boolean ;
  /**
   * Check if the exit directionality a piece of text is RTL, i.e. if the last
   * strongly-directional character in the string is RTL.
   * @param str String being checked.
   * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
   */
  function isRtlExitText (a : string , b ? : boolean ) : boolean ;
  /**
   * Check if a BCP 47 / III language code indicates an RTL language, i.e. either:
   * - a language code explicitly specifying one of the right-to-left scripts,
   * e.g. "az-Arab", or<p>
   * - a language code specifying one of the languages normally written in a
   * right-to-left script, e.g. "fa" (Farsi), except ones explicitly specifying
   * Latin or Cyrillic script (which are the usual LTR alternatives).<p>
   * The list of right-to-left scripts appears in the 100-199 range in
   * http://www.unicode.org/iso15924/iso15924-num.html, of which Arabic and
   * Hebrew are by far the most widely used. We also recognize Thaana, N'Ko, and
   * Tifinagh, which also have significant modern usage. The rest (Syriac,
   * Samaritan, Mandaic, etc.) seem to have extremely limited or no modern usage
   * and are not recognized to save on code size.
   * The languages usually written in a right-to-left script are taken as those
   * with Suppress-Script: Hebr|Arab|Thaa|Nkoo|Tfng  in
   * http://www.iana.org/assignments/language-subtag-registry,
   * as well as Central (or Sorani) Kurdish (ckb), Sindhi (sd) and Uyghur (ug).
   * Other subtags of the language code, e.g. regions like EG (Egypt), are
   * ignored.
   * @param lang BCP 47 (a.k.a III) language code.
   */
  function isRtlLanguage (lang : string ) : boolean ;
  /**
   * Check whether the first strongly directional character (if any) is RTL.
   * @param str String being checked.
   * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
   */
  function isRtlText (a : string , b ? : boolean ) : boolean ;
  /**
   * Swap location parameters and 'left'/'right' in CSS specification. The
   * processed string will be suited for RTL layout. Though this function can
   * cover most cases, there are always exceptions. It is suggested to put
   * those exceptions in separate group of CSS string.
   * @param cssStr CSS spefication string.
   */
  function mirrorCSS (cssStr : string ) : string ;
  /**
   * Replace the double and single quote directly after a Hebrew character with
   * GERESH and GERSHAYIM. In such case, most likely that's user intention.
   * @param str String that need to be processed.
   */
  function normalizeHebrewQuote (str : string ) : string ;
  /**
   * Sets text input element's directionality and text alignment based on a
   * given directionality. Does nothing if the given directionality is unknown or
   * neutral.
   * @param element Input field element to set directionality to.
   * @param dir Desired directionality, given in one of the following formats: 1. A goog.i18n.bidi.Dir constant. 2. A number (positive = LRT, negative = RTL, 0 = neutral). 3. A boolean (true = RTL, false = LTR). 4. A null for unknown directionality.
   */
  function setElementDirAndAlign (element : Element | null , dir : number | boolean | null ) : void ;
  /**
   * Sets element dir based on estimated directionality of the given text.
   */
  function setElementDirByTextDirectionality (element : Element , text : string ) : void ;
  /**
   * Check whether the first strongly directional character (if any) is LTR.
   * @param str String being checked.
   * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
   */
  function startsWithLtr (str : string , opt_isHtml ? : boolean ) : boolean ;
  /**
   * Check whether the first strongly directional character (if any) is RTL.
   * @param str String being checked.
   * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
   */
  function startsWithRtl (str : string , opt_isHtml ? : boolean ) : boolean ;
  /**
   * Convert a directionality given in various formats to a goog.i18n.bidi.Dir
   * constant. Useful for interaction with different standards of directionality
   * representation.
   * @param givenDir Directionality given in one of the following formats: 1. A goog.i18n.bidi.Dir constant. 2. A number (positive = LTR, negative = RTL, 0 = neutral). 3. A boolean (true = RTL, false = LTR). 4. A null for unknown directionality.
   * @param opt_noNeutral Whether a givenDir of zero or goog.i18n.bidi.Dir.NEUTRAL should be treated as null, i.e. unknown, in order to preserve legacy behavior.
   */
  function toDir (givenDir : number | boolean | null , opt_noNeutral ? : boolean ) : ಠ_ಠ.clutz.goog.i18n.bidi.Dir | null ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.bidi'): typeof ಠ_ಠ.clutz.goog.i18n.bidi;
}
declare module 'goog:goog.i18n.bidi' {
  import alias = ಠ_ಠ.clutz.goog.i18n.bidi;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.bidi {
  /**
   * Directionality enum.
   */
  type Dir = number ;
  var Dir : {
    LTR : Dir ,
    NEUTRAL : Dir ,
    RTL : Dir ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.bidi.Dir'): typeof ಠ_ಠ.clutz.goog.i18n.bidi.Dir;
}
declare module 'goog:goog.i18n.bidi.Dir' {
  import alias = ಠ_ಠ.clutz.goog.i18n.bidi.Dir;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.bidi {
  /**
   * Strings that have an (optional) known direction.
   *
   * Implementations of this interface are string-like objects that carry an
   * attached direction, if known.
   */
  interface DirectionalString {
    /**
     * Retrieves this object's known direction (if any).
     */
    getDirection ( ) : ಠ_ಠ.clutz.goog.i18n.bidi.Dir | null ;
    /**
     * Interface marker of the DirectionalString interface.
     *
     * This property can be used to determine at runtime whether or not an object
     * implements this interface.  All implementations of this interface set this
     * property to {@code true}.
     */
    implementsGoogI18nBidiDirectionalString : boolean ;
  }
}
declare module 'goog:goog.i18n.bidi.DirectionalString' {
  import alias = ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.bidi {
  /**
   * Unicode formatting characters and directionality string constants.
   */
  type Format = string ;
  var Format : {
    LRE : Format ,
    LRM : Format ,
    PDF : Format ,
    RLE : Format ,
    RLM : Format ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.bidi.Format'): typeof ಠ_ಠ.clutz.goog.i18n.bidi.Format;
}
declare module 'goog:goog.i18n.bidi.Format' {
  import alias = ಠ_ಠ.clutz.goog.i18n.bidi.Format;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.collation {
  /**
   * Returns the comparator for a locale. If a locale is not explicitly specified,
   * a comparator for the user's locale will be returned. Note that if the browser
   * does not support locale-sensitive string comparisons, the comparator returned
   * will be a simple codepoint comparator.
   * @param opt_locale the locale that the comparator is used for.
   */
  function createComparator (opt_locale ? : string ) : (a : string , b : string ) => number ;
  /**
   * Returns true if a locale-sensitive comparator is available for a locale. If
   * a locale is not explicitly specified, the user's locale is used instead.
   * @param opt_locale The locale to be checked.
   */
  function hasNativeComparator (opt_locale ? : string ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.collation'): typeof ಠ_ಠ.clutz.goog.i18n.collation;
}
declare module 'goog:goog.i18n.collation' {
  import alias = ಠ_ಠ.clutz.goog.i18n.collation;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.currency {
  /**
   * This function will add tier2 currency support. Be default, only tier1
   * (most popular currencies) are supported. If an application really needs
   * to support some of the rarely used currencies, it should call this function
   * before any other functions in this namespace.
   */
  function addTier2Support ( ) : void ;
  /**
   * Modify currency pattern string by adjusting precision for given currency.
   * Standard currency pattern will have 2 digit after decimal point.
   * Examples:
   * $#,##0.00 ->  $#,##0    (precision == 0)
   * $#,##0.00 ->  $#,##0.0  (precision == 1)
   * $#,##0.00 ->  $#,##0.000  (precision == 3)
   * @param pattern currency pattern string.
   * @param currencyCode 3-letter currency code.
   */
  function adjustPrecision (pattern : string , currencyCode : string ) : string ;
  /**
   * Global currency pattern always uses ISO-4217 currency code as prefix. Local
   * currency sign is added if it is different from currency code. Each currency
   * is unique in this form. The negative side is that ISO code looks weird in
   * some countries as people normally do not use it. Local currency sign
   * alleviates the problem, but also makes it a little verbose.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getGlobalCurrencyPattern (currencyCode : string ) : string ;
  /**
   * Return global currency sign string for those applications
   * that want to handle currency sign themselves.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getGlobalCurrencySign (currencyCode : string ) : string ;
  /**
   * Local currency pattern is the most frequently used pattern in currency's
   * native region. It does not care about how it is distinguished from other
   * currencies.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getLocalCurrencyPattern (currencyCode : string ) : string ;
  /**
   * Returns local currency sign string for those applications that need to
   * handle currency sign separately.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getLocalCurrencySign (currencyCode : string ) : string ;
  /**
   * Portable currency pattern is a compromise between local and global. It is
   * not a mere blend or mid-way between the two. Currency sign is chosen so that
   * it looks familiar to native users. It also has enough information to
   * distinguish itself from other popular currencies in its native region.
   * In this pattern, currency sign symbols that has availability problem in
   * popular fonts are also avoided.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getPortableCurrencyPattern (currencyCode : string ) : string ;
  /**
   * Return portable currency sign string for those applications that need to
   * handle currency sign themselves.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getPortableCurrencySign (currencyCode : string ) : string ;
  /**
   * This function returns the default currency sign position. Some applications
   * may want to handle currency sign and currency amount separately. This
   * function can be used in such situations to correctly position the currency
   * sign relative to the amount.
   *
   * To match the behavior of ICU, position is not determined by display locale.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function isPrefixSignPosition (currencyCode : string ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.currency'): typeof ಠ_ಠ.clutz.goog.i18n.currency;
}
declare module 'goog:goog.i18n.currency' {
  import alias = ಠ_ಠ.clutz.goog.i18n.currency;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.currency {
  /**
   * Tier 1 currency information.
   *
   * The first number in the array is a combination of the precision mask and
   * other flags. The precision mask indicates how many decimal places to show for
   * the currency. Valid values are [0..7]. The position flag indicates whether
   * the currency sign should be positioned after the number. Valid values are 0
   * (before the number) or 16 (after the number). The space flag indicates
   * whether a space should be inserted between the currency sign and number.
   * Valid values are 0 (no space) and 32 (space).
   *
   * The number in the array is calculated by adding together the mask and flag
   * values. For example:
   *
   * 0: no precision (0), currency sign first (0), no space (0)
   * 2: two decimals precision (2), currency sign first (0), no space (0)
   * 18: two decimals precision (2), currency sign last (16), no space (0)
   * 50: two decimals precision (2), currency sign last (16), space (32)
   */
  var CurrencyInfo : { [ /* warning: coerced from ? */ key: string ]: any [] } ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.currency.CurrencyInfo'): typeof ಠ_ಠ.clutz.goog.i18n.currency.CurrencyInfo;
}
declare module 'goog:goog.i18n.currency.CurrencyInfo' {
  import alias = ಠ_ಠ.clutz.goog.i18n.currency.CurrencyInfo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.currency {
  /**
   * Tier 2 currency information.
   */
  var CurrencyInfoTier2 : { [ /* warning: coerced from ? */ key: string ]: any [] } ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.currency.CurrencyInfoTier2'): typeof ಠ_ಠ.clutz.goog.i18n.currency.CurrencyInfoTier2;
}
declare module 'goog:goog.i18n.currency.CurrencyInfoTier2' {
  import alias = ಠ_ಠ.clutz.goog.i18n.currency.CurrencyInfoTier2;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Deprecated.
   * The mapping of currency symbol through intl currency code.
   * The source of information is mostly from wikipedia and CLDR. Since there is
   * no authoritative source, items are judged by personal perception.
   *
   * If an application need currency support that available in tier2, it
   * should extend currencyCodeMap to include tier2 data by doing this:
   * goog.object.extend(goog.i18n.currencyCodeMap,
   * goog.i18n.currencyCodeMapTier2);
   */
  var currencyCodeMap : { [ key: string ]: string } ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.currencyCodeMap'): typeof ಠ_ಠ.clutz.goog.i18n.currencyCodeMap;
}
declare module 'goog:goog.i18n.currencyCodeMap' {
  import alias = ಠ_ಠ.clutz.goog.i18n.currencyCodeMap;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * This group of currency data is unlikely to be used. In case they are,
   * program need to merge it into goog.locale.CurrencyCodeMap.
   */
  var currencyCodeMapTier2 : { [ key: string ]: string } ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.currencyCodeMapTier2'): typeof ಠ_ಠ.clutz.goog.i18n.currencyCodeMapTier2;
}
declare module 'goog:goog.i18n.currencyCodeMapTier2' {
  import alias = ಠ_ಠ.clutz.goog.i18n.currencyCodeMapTier2;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.mime {
  /**
   * Get an array of UTF-8 hex codes for a given character.
   * @param c The matched character.
   */
  function getHexCharArray (c : string ) : string [] ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.mime'): typeof ಠ_ಠ.clutz.goog.i18n.mime;
}
declare module 'goog:goog.i18n.mime' {
  import alias = ಠ_ಠ.clutz.goog.i18n.mime;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.mime {
  /**
   * Encodes a string for inclusion in a MIME header. The string is encoded
   * in UTF-8 according to RFC 1522, using quoted-printable form.
   * @param str The string to encode.
   * @param opt_noquote Whether double-quote characters should also be escaped (should be true if the result will be placed inside a quoted string for a parameter value in a MIME header).
   */
  function encode (str : string , opt_noquote ? : boolean ) : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.mime.encode'): typeof ಠ_ಠ.clutz.goog.i18n.mime.encode;
}
declare module 'goog:goog.i18n.mime.encode' {
  import alias = ಠ_ಠ.clutz.goog.i18n.mime.encode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.ordinalRules {
  /**
   * Ordinal pattern keyword
   */
  type Keyword = string ;
  var Keyword : {
    FEW : Keyword ,
    MANY : Keyword ,
    ONE : Keyword ,
    OTHER : Keyword ,
    TWO : Keyword ,
    ZERO : Keyword ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.ordinalRules'): typeof ಠ_ಠ.clutz.goog.i18n.ordinalRules;
}
declare module 'goog:goog.i18n.ordinalRules' {
  import alias = ಠ_ಠ.clutz.goog.i18n.ordinalRules;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.pluralRules {
  /**
   * Plural pattern keyword
   */
  type Keyword = string ;
  var Keyword : {
    FEW : Keyword ,
    MANY : Keyword ,
    ONE : Keyword ,
    OTHER : Keyword ,
    TWO : Keyword ,
    ZERO : Keyword ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.pluralRules'): typeof ಠ_ಠ.clutz.goog.i18n.pluralRules;
}
declare module 'goog:goog.i18n.pluralRules' {
  import alias = ಠ_ಠ.clutz.goog.i18n.pluralRules;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.uChar {
  /**
   * Composes a supplementary Unicode code point from the given UTF-16 surrogate
   * pair. If leadSurrogate isn't a leading surrogate code point or trailSurrogate
   * isn't a trailing surrogate code point, null is returned.
   * @param lead The leading surrogate code point.
   * @param trail The trailing surrogate code point.
   */
  function buildSupplementaryCodePoint (lead : number , trail : number ) : number | null ;
  /**
   * Determines the length of the string needed to represent the specified
   * Unicode code point.
   */
  function charCount (codePoint : number ) : number ;
  /**
   * Gets a character from the given Unicode value. If the given code point is not
   * a valid Unicode code point, null is returned.
   * @param code The Unicode value of the character.
   */
  function fromCharCode (code : number ) : string | null ;
  /**
   * Returns the Unicode code point at the specified index.
   *
   * If the char value specified at the given index is in the leading-surrogate
   * range, and the following index is less than the length of {@code string}, and
   * the char value at the following index is in the trailing-surrogate range,
   * then the supplementary code point corresponding to this surrogate pair is
   * returned.
   *
   * If the char value specified at the given index is in the trailing-surrogate
   * range, and the preceding index is not before the start of {@code string}, and
   * the char value at the preceding index is in the leading-surrogate range, then
   * the negated supplementary code point corresponding to this surrogate pair is
   * returned.
   *
   * The negation allows the caller to differentiate between the case where the
   * given index is at the leading surrogate and the one where it is at the
   * trailing surrogate, and thus deduce where the next character starts and
   * preceding character ends.
   *
   * Otherwise, the char value at the given index is returned. Thus, a leading
   * surrogate is returned when it is not followed by a trailing surrogate, and a
   * trailing surrogate is returned when it is not preceded by a leading
   * surrogate.
   * @param string The string.
   * @param index The index from which the code point is to be retrieved.
   */
  function getCodePointAround (string : string , index : number ) : number ;
  /**
   * Gets whether the given code point is a leading surrogate character.
   */
  function isLeadSurrogateCodePoint (codePoint : number ) : boolean ;
  /**
   * Determines whether the specified Unicode code point is in the supplementary
   * Unicode characters range.
   */
  function isSupplementaryCodePoint (codePoint : number ) : boolean ;
  /**
   * Gets whether the given code point is a trailing surrogate character.
   */
  function isTrailSurrogateCodePoint (codePoint : number ) : boolean ;
  /**
   * Gets Unicode value of the given character.
   * @param ch The given character, which in the case of a supplementary character is actually a surrogate pair. The remainder of the string is ignored.
   */
  function toCharCode (ch : string ) : number ;
  /**
   * Gets the U+ notation string of a Unicode character. Ex: 'U+0041' for 'A'.
   * @param ch The given character.
   */
  function toHexString (ch : string ) : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.uChar'): typeof ಠ_ಠ.clutz.goog.i18n.uChar;
}
declare module 'goog:goog.i18n.uChar' {
  import alias = ಠ_ಠ.clutz.goog.i18n.uChar;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.uChar {
  /**
   * Builds the NameFetcherLocal object. This is a simple object which retrieves
   * character names from a local bundled database. This database only covers
   * invisible characters. See the goog.i18n.uChar class for more details.
   */
  class LocalNameFetcher extends LocalNameFetcher_Instance {
  }
  class LocalNameFetcher_Instance implements ಠ_ಠ.clutz.goog.i18n.uChar.NameFetcher {
    private noStructuralTyping_: any;
    getName (character : string , callback : (a : string | null ) => any ) : void ;
    isNameAvailable (character : string ) : boolean ;
    prefetch (character : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.uChar.LocalNameFetcher'): typeof ಠ_ಠ.clutz.goog.i18n.uChar.LocalNameFetcher;
}
declare module 'goog:goog.i18n.uChar.LocalNameFetcher' {
  import alias = ಠ_ಠ.clutz.goog.i18n.uChar.LocalNameFetcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.uChar {
  /**
   * NameFetcher interface. Implementations of this interface are used to retrieve
   * Unicode character names.
   */
  interface NameFetcher {
    /**
     * Retrieves the name of a particular character.
     * @param character The character to retrieve.
     * @param callback The callback function called when the name retrieval is complete, contains a single string parameter with the codepoint name, this parameter will be null if the character name is not defined.
     */
    getName (character : string , callback : (a : string | null ) => any ) : void ;
    /**
     * Tests whether the name of a given character is available to be retrieved by
     * the getName() function.
     * @param character The character to test.
     */
    isNameAvailable (character : string ) : boolean ;
    /**
     * Retrieves the names of a given set of characters and stores them in a cache
     * for fast retrieval. Offline implementations can simply provide an empty
     * implementation.
     * @param characters The list of characters in base 88 to fetch. These lists are stored by category and subcategory in the goog.i18n.charpickerdata class.
     */
    prefetch (characters : string ) : void ;
  }
}
declare module 'goog:goog.i18n.uChar.NameFetcher' {
  import alias = ಠ_ಠ.clutz.goog.i18n.uChar.NameFetcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.uChar {
  /**
   * Builds the RemoteNameFetcher object. This object retrieves codepoint names
   * from a remote data source.
   */
  class RemoteNameFetcher extends RemoteNameFetcher_Instance {
  }
  class RemoteNameFetcher_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance implements ಠ_ಠ.clutz.goog.i18n.uChar.NameFetcher {
    /**
     * Builds the RemoteNameFetcher object. This object retrieves codepoint names
     * from a remote data source.
     * @param dataSourceUri URI to the data source.
     */
    constructor (dataSourceUri : string ) ;
    disposeInternal ( ) : void ;
    getName (character : string , callback : (a : string | null ) => any ) : void ;
    isNameAvailable (character : string ) : boolean ;
    prefetch (characters : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.uChar.RemoteNameFetcher'): typeof ಠ_ಠ.clutz.goog.i18n.uChar.RemoteNameFetcher;
}
declare module 'goog:goog.i18n.uChar.RemoteNameFetcher' {
  import alias = ಠ_ಠ.clutz.goog.i18n.uChar.RemoteNameFetcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.uCharNames {
  /**
   * Sets up the character map, lazily.  Some characters are indexed by their
   * decimal value.
   */
  function createCharData ( ) : void ;
  /**
   * Gets the name of a character, if available, returns null otherwise.
   * @param ch The character.
   */
  function toName (ch : string ) : string | null ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.i18n.uCharNames'): typeof ಠ_ಠ.clutz.goog.i18n.uCharNames;
}
declare module 'goog:goog.i18n.uCharNames' {
  import alias = ಠ_ಠ.clutz.goog.i18n.uCharNames;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.iter {
  /**
   * Creates an iterator that returns running totals from the numbers in
   * {@code iterable}. For example, the array {@code [1, 2, 3, 4, 5]} yields
   * {@code 1 -> 3 -> 6 -> 10 -> 15}.
   * @param iterable The iterable of numbers to accumulate.
   */
  function accumulate (iterable : { length : number } | { __iterator__ : any } ) : ಠ_ಠ.clutz.goog.iter.Iterator < number > ;
  /**
   * Takes zero or more iterables and returns one iterator that will iterate over
   * them in the order chained.
   * @param var_args Any number of iterable objects.
   */
  function chain < VALUE > ( ...var_args : ( ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } | undefined ) [] ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
  /**
   * Takes a single iterable containing zero or more iterables and returns one
   * iterator that will iterate over each one in the order given.
   * @param iterable The iterable of iterables to chain.
   */
  function chainFromIterable < VALUE > (iterable : null | { length : number } | { __iterator__ : any } ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
  /**
   * Creates an iterator that returns combinations of elements from
   * {@code iterable}.
   *
   * Combinations are obtained by taking the {@see goog.iter#permutations} of
   * {@code iterable} and filtering those whose elements appear in the order they
   * are encountered in {@code iterable}. For example, the 3-length combinations
   * of {@code [0,1,2,3]} are {@code [[0,1,2], [0,1,3], [0,2,3], [1,2,3]]}.
   * @param iterable The iterable from which to generate combinations.
   * @param length The length of each combination.
   */
  function combinations < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } , length : number ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE [] > ;
  /**
   * Creates an iterator that returns combinations of elements from
   * {@code iterable}, with repeated elements possible.
   *
   * Combinations are obtained by taking the Cartesian product of {@code length}
   * iterables and filtering those whose elements appear in the order they are
   * encountered in {@code iterable}. For example, the 2-length combinations of
   * {@code [1,2,3]} are {@code [[1,1], [1,2], [1,3], [2,2], [2,3], [3,3]]}.
   * @param iterable The iterable to combine.
   * @param length The length of each combination.
   */
  function combinationsWithReplacement < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } , length : number ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE [] > ;
  /**
   * Creates an iterator that filters {@code iterable} based on a series of
   * {@code selectors}. On each call to {@code next()}, one item is taken from
   * both the {@code iterable} and {@code selectors} iterators. If the item from
   * {@code selectors} evaluates to true, the item from {@code iterable} is given.
   * Otherwise, it is skipped. Once either {@code iterable} or {@code selectors}
   * is exhausted, subsequent calls to {@code next()} will throw
   * {@code goog.iter.StopIteration}.
   * @param iterable The iterable to filter.
   * @param selectors An iterable of items to be evaluated in a boolean context to determine if the corresponding element in {@code iterable} should be included in the result.
   */
  function compress < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } , selectors : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
  /**
   * Creates an iterator that is advanced {@code count} steps ahead. Consumed
   * values are silently discarded. If {@code count} is greater than the number
   * of elements in {@code iterable}, an empty iterator is returned. Subsequent
   * calls to {@code next()} will throw {@code goog.iter.StopIteration}.
   * @param iterable The iterable to consume.
   * @param count The number of elements to consume from the iterator.
   */
  function consume < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } , count : number ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
  /**
   * Creates an iterator that counts indefinitely from a starting value.
   * @param opt_start The starting value. Default is 0.
   * @param opt_step The number to increment with between each call to next. Negative and floating point numbers are allowed. Default is 1.
   */
  function count (opt_start ? : number , opt_step ? : number ) : ಠ_ಠ.clutz.goog.iter.Iterator < number > ;
  /**
   * Create an iterator to cycle over the iterable's elements indefinitely.
   * For example, ([1, 2, 3]) would return : 1, 2, 3, 1, 2, 3, ...
   * @param iterable The iterable object.
   */
  function cycle < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
  /**
   * Builds a new iterator that iterates over the original, but skips elements as
   * long as a supplied function returns true.
   * @param iterable The iterator object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, undefined, and the iterator) and should return a boolean.
   * @param opt_obj The object to be used as the value of 'this' within {@code f}.
   */
  function dropWhile < THIS , VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | null | { length : number } | { __iterator__ : any } , f : (a : VALUE , b : undefined , c : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ) => boolean , opt_obj ? : THIS ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
  /**
   * Creates an iterator that returns arrays containing a count and an element
   * obtained from the given {@code iterable}.
   * @param iterable The iterable to enumerate.
   * @param opt_start Optional starting value. Default is 0.
   */
  function enumerate < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } , opt_start ? : number ) : ಠ_ಠ.clutz.goog.iter.Iterator < any [] > ;
  /**
   * Iterates over two iterables and returns true if they contain the same
   * sequence of elements and have the same length.
   * @param iterable1 The first iterable object.
   * @param iterable2 The second iterable object.
   * @param opt_equalsFn Optional comparison function. Should take two arguments to compare, and return true if the arguments are equal. Defaults to {@link goog.array.defaultCompareEquality} which compares the elements using the built-in '===' operator.
   */
  function equals < VALUE > (iterable1 : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } , iterable2 : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } , opt_equalsFn ? : (a : VALUE , b : VALUE ) => boolean ) : boolean ;
  /**
   * Goes through the values in the iterator. Calls f for each of these and if any
   * of them returns false this returns false (without checking the rest). If all
   * return true this will return true.
   * @param iterable The iterator object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, undefined, and the iterator) and should return a boolean.
   * @param opt_obj The object to be used as the value of 'this' within {@code f}.
   */
  function every < THIS , VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | null | { length : number } | { __iterator__ : any } , f : (a : VALUE , b : undefined , c : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ) => boolean , opt_obj ? : THIS ) : boolean ;
  /**
   * Calls a function for every element in the iterator, and if the function
   * returns true adds the element to a new iterator.
   * @param iterable The iterator to iterate over.
   * @param f The function to call for every element. This function takes 3 arguments (the element, undefined, and the iterator) and should return a boolean. If the return value is true the element will be included in the returned iterator.  If it is false the element is not included.
   * @param opt_obj The object to be used as the value of 'this' within {@code f}.
   */
  function filter < THIS , VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | null | { length : number } | { __iterator__ : any } , f : (a : VALUE , b : undefined , c : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ) => boolean , opt_obj ? : THIS ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
  /**
   * Calls a function for every element in the iterator, and if the function
   * returns false adds the element to a new iterator.
   * @param iterable The iterator to iterate over.
   * @param f The function to call for every element. This function takes 3 arguments (the element, undefined, and the iterator) and should return a boolean. If the return value is false the element will be included in the returned iterator.  If it is true the element is not included.
   * @param opt_obj The object to be used as the value of 'this' within {@code f}.
   */
  function filterFalse < THIS , VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | null | { length : number } | { __iterator__ : any } , f : (a : VALUE , b : undefined , c : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ) => boolean , opt_obj ? : THIS ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
  /**
   * Calls a function for each element in the iterator with the element of the
   * iterator passed as argument.
   * @param iterable The iterator to iterate over. If the iterable is an object {@code toIterator} will be called on it.
   * @param f The function to call for every element.  This function takes 3 arguments (the element, undefined, and the iterator) and the return value is irrelevant.  The reason for passing undefined as the second argument is so that the same function can be used in {@see goog.array#forEach} as well as others.  The third parameter is of type "number" for arraylike objects, undefined, otherwise.
   * @param opt_obj The object to be used as the value of 'this' within {@code f}.
   */
  function forEach < THIS , VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | null | { length : number } | { __iterator__ : any } , f : (a : VALUE , b : any , c : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ) => any , opt_obj ? : THIS ) : void ;
  /**
   * Creates an iterator that returns arrays containing elements from the
   * {@code iterable} grouped by a key value. For iterables with repeated
   * elements (i.e. sorted according to a particular key function), this function
   * has a {@code uniq}-like effect. For example, grouping the array:
   * {@code [A, B, B, C, C, A]} produces
   * {@code [A, [A]], [B, [B, B]], [C, [C, C]], [A, [A]]}.
   * @param iterable The iterable to group.
   * @param opt_keyFunc Optional function for determining the key value for each group in the {@code iterable}. Default is the identity function.
   */
  function groupBy < KEY , VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } , opt_keyFunc ? : (a : VALUE ) => KEY ) : ಠ_ಠ.clutz.goog.iter.Iterator < any [] > ;
  /**
   * Joins the values in a iterator with a delimiter.
   * @param iterable The iterator to get the values from.
   * @param deliminator The text to put between the values.
   */
  function join < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | null | { length : number } | { __iterator__ : any } , deliminator : string ) : string ;
  /**
   * Creates an iterator that returns the first {@code limitSize} elements from an
   * iterable. If this number is greater than the number of elements in the
   * iterable, all the elements are returned.
   * @param iterable The iterable to limit.
   * @param limitSize The maximum number of elements to return.
   */
  function limit < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } , limitSize : number ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
  /**
   * For every element in the iterator call a function and return a new iterator
   * with that value.
   * @param iterable The iterator to iterate over.
   * @param f The function to call for every element.  This function takes 3 arguments (the element, undefined, and the iterator) and should return a new value.
   * @param opt_obj The object to be used as the value of 'this' within {@code f}.
   */
  function map < THIS , VALUE , RESULT > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } , f : (a : VALUE , b : undefined , c : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ) => RESULT , opt_obj ? : THIS ) : ಠ_ಠ.clutz.goog.iter.Iterator < RESULT > ;
  /**
   * Advances the iterator to the next position, returning the given default value
   * instead of throwing an exception if the iterator has no more entries.
   * @param iterable The iterable object.
   * @param defaultValue The value to return if the iterator is empty.
   */
  function nextOrValue < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | null | { length : number } | { __iterator__ : any } , defaultValue : VALUE ) : VALUE ;
  /**
   * Creates an iterator that returns permutations of elements in
   * {@code iterable}.
   *
   * Permutations are obtained by taking the Cartesian product of
   * {@code opt_length} iterables and filtering out those with repeated
   * elements. For example, the permutations of {@code [1,2,3]} are
   * {@code [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]}.
   * @param iterable The iterable from which to generate permutations.
   * @param opt_length Length of each permutation. If omitted, defaults to the length of {@code iterable}.
   */
  function permutations < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } , opt_length ? : number ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE [] > ;
  /**
   * Cartesian product of zero or more sets.  Gives an iterator that gives every
   * combination of one element chosen from each set.  For example,
   * ([1, 2], [3, 4]) gives ([1, 3], [1, 4], [2, 3], [2, 4]).
   * @param var_args Zero or more sets, as arrays.
   */
  function product < VALUE > ( ...var_args : ( IArrayLike < VALUE > | undefined ) [] ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE [] > ;
  /**
   * Creates a new iterator that returns the values in a range.  This function
   * can take 1, 2 or 3 arguments:
   * <pre>
   * range(5) same as range(0, 5, 1)
   * range(2, 5) same as range(2, 5, 1)
   * </pre>
   * @param startOrStop The stop value if only one argument is provided. The start value if 2 or more arguments are provided.  If only one argument is used the start value is 0.
   * @param opt_stop The stop value.  If left out then the first argument is used as the stop value.
   * @param opt_step The number to increment with between each call to next.  This can be negative.
   */
  function range (startOrStop : number , opt_stop ? : number , opt_step ? : number ) : ಠ_ಠ.clutz.goog.iter.Iterator < number > ;
  /**
   * Passes every element of an iterator into a function and accumulates the
   * result.
   * @param iterable The iterator to iterate over.
   * @param f The function to call for every element. This function takes 2 arguments (the function's previous result or the initial value, and the value of the current element). function(previousValue, currentElement) : newValue.
   * @param val The initial value to pass into the function on the first call.
   * @param opt_obj The object to be used as the value of 'this' within f.
   */
  function reduce < THIS , VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | null | { length : number } | { __iterator__ : any } , f : (a : VALUE , b : VALUE ) => VALUE , val : VALUE , opt_obj ? : THIS ) : VALUE ;
  /**
   * Creates an iterator that returns the same object or value repeatedly.
   * @param value Any object or value to repeat.
   */
  function repeat < VALUE > (value : VALUE ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
  /**
   * Creates an iterator that returns a range of elements from an iterable.
   * Similar to {@see goog.array#slice} but does not support negative indexes.
   * @param iterable The iterable to slice.
   * @param start The index of the first element to return.
   * @param opt_end The index after the last element to return. If defined, must be greater than or equal to {@code start}.
   */
  function slice < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } , start : number , opt_end ? : number ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
  /**
   * Goes through the values in the iterator. Calls f for each of these, and if
   * any of them returns true, this returns true (without checking the rest). If
   * all return false this will return false.
   * @param iterable The iterator object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, undefined, and the iterator) and should return a boolean.
   * @param opt_obj The object to be used as the value of 'this' within {@code f}.
   */
  function some < THIS , VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | null | { length : number } | { __iterator__ : any } , f : (a : VALUE , b : undefined , c : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ) => boolean , opt_obj ? : THIS ) : boolean ;
  /**
   * Gives an iterator that gives the result of calling the given function
   * <code>f</code> with the arguments taken from the next element from
   * <code>iterable</code> (the elements are expected to also be iterables).
   *
   * Similar to {@see goog.iter#map} but allows the function to accept multiple
   * arguments from the iterable.
   * @param iterable The iterable of iterables to iterate over.
   * @param f The function to call for every element.  This function takes N+2 arguments, where N represents the number of items from the next element of the iterable. The two additional arguments passed to the function are undefined and the iterator itself. The function should return a new value.
   * @param opt_obj The object to be used as the value of 'this' within {@code f}.
   */
  function starMap < THIS , RESULT > (iterable : { length : number } | { __iterator__ : any } , f : ( ...a : any [] ) => RESULT , opt_obj ? : THIS ) : ಠ_ಠ.clutz.goog.iter.Iterator < RESULT > ;
  /**
   * Builds a new iterator that iterates over the original, but only as long as a
   * supplied function returns true.
   * @param iterable The iterator object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, undefined, and the iterator) and should return a boolean.
   * @param opt_obj This is used as the 'this' object in f when called.
   */
  function takeWhile < THIS , VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | null | { length : number } | { __iterator__ : any } , f : (a : VALUE , b : undefined , c : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ) => boolean , opt_obj ? : THIS ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
  /**
   * Returns an array of iterators each of which can iterate over the values in
   * {@code iterable} without advancing the others.
   * @param iterable The iterable to tee.
   * @param opt_num The number of iterators to create. Default is 2.
   */
  function tee < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } , opt_num ? : number ) : ( ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | null ) [] ;
  /**
   * Converts the iterator to an array
   * @param iterable The iterator to convert to an array.
   */
  function toArray < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | null | { length : number } | { __iterator__ : any } ) : VALUE [] ;
  /**
   * Returns an iterator that knows how to iterate over the values in the object.
   * @param iterable If the object is an iterator it will be returned as is.  If the object has an {@code __iterator__} method that will be called to get the value iterator.  If the object is an array-like object we create an iterator for that.
   */
  function toIterator < VALUE > (iterable : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | null | { length : number } | { __iterator__ : any } ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
  /**
   * Creates an iterator that returns arrays containing the ith elements from the
   * provided iterables. The returned arrays will be the same size as the number
   * of iterables given in {@code var_args}. Once the shortest iterable is
   * exhausted, subsequent calls to {@code next()} will throw
   * {@code goog.iter.StopIteration}.
   * @param var_args Any number of iterable objects.
   */
  function zip < VALUE > ( ...var_args : ( ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } | undefined ) [] ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE [] > ;
  /**
   * Creates an iterator that returns arrays containing the ith elements from the
   * provided iterables. The returned arrays will be the same size as the number
   * of iterables given in {@code var_args}. Shorter iterables will be extended
   * with {@code fillValue}. Once the longest iterable is exhausted, subsequent
   * calls to {@code next()} will throw {@code goog.iter.StopIteration}.
   * @param fillValue The object or value used to fill shorter iterables.
   * @param var_args Any number of iterable objects.
   */
  function zipLongest < VALUE > (fillValue : VALUE ,  ...var_args : ( ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > | { length : number } | { __iterator__ : any } | undefined ) [] ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE [] > ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.iter'): typeof ಠ_ಠ.clutz.goog.iter;
}
declare module 'goog:goog.iter' {
  import alias = ಠ_ಠ.clutz.goog.iter;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.iter {
  type Iterable = null | { length : number } | { __iterator__ : any } ;
}
declare module 'goog:goog.iter.Iterable' {
  import alias = ಠ_ಠ.clutz.goog.iter.Iterable;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.iter {
  /**
   * Class/interface for iterators.  An iterator needs to implement a {@code next}
   * method and it needs to throw a {@code goog.iter.StopIteration} when the
   * iteration passes beyond the end.  Iterators have no {@code hasNext} method.
   * It is recommended to always use the helper functions to iterate over the
   * iterator or in case you are only targeting JavaScript 1.7 for in loops.
   */
  class Iterator < VALUE > extends Iterator_Instance < VALUE > {
  }
  class Iterator_Instance < VALUE > {
    private noStructuralTyping_: any;
    /**
     * Returns the {@code Iterator} object itself.  This is used to implement
     * the iterator protocol in JavaScript 1.7
     * @param opt_keys Whether to return the keys or values. Default is to only return the values.  This is being used by the for-in loop (true) and the for-each-in loop (false).  Even though the param gives a hint about what the iterator will return there is no guarantee that it will return the keys when true is passed.
     */
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.iter.Iterator < VALUE > ;
    /**
     * Returns the next value of the iteration.  This will throw the object
     * {@see goog.iter#StopIteration} when the iteration passes the end.
     */
    next ( ) : VALUE ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.iter.Iterator'): typeof ಠ_ಠ.clutz.goog.iter.Iterator;
}
declare module 'goog:goog.iter.Iterator' {
  import alias = ಠ_ಠ.clutz.goog.iter.Iterator;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.iter {
  /**
   * Singleton Error object that is used to terminate iterations.
   */
  var StopIteration : GlobalError ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.iter.StopIteration'): typeof ಠ_ಠ.clutz.goog.iter.StopIteration;
}
declare module 'goog:goog.iter.StopIteration' {
  import alias = ಠ_ಠ.clutz.goog.iter.StopIteration;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
  var USE_NATIVE_JSON : boolean ;
  /**
   * Tests if a string is an invalid JSON string. This only ensures that we are
   * not using any invalid characters
   * @param s The string to test.
   */
  function isValid (s : string ) : boolean ;
  /**
   * Parses a JSON string and returns the result. This throws an exception if
   * the string is an invalid JSON string.
   *
   * Note that this is very slow on large strings. If you trust the source of
   * the string then you should use unsafeParse instead.
   * @param s The JSON string to parse.
   */
  function parse (a : any ) : Object | null ;
  /**
   * Serializes an object or a value to a JSON string.
   * @param object The object to serialize.
   * @param opt_replacer A replacer function called for each (key, value) pair that determines how the value should be serialized. By defult, this just returns the value and allows default serialization to kick in.
   */
  function serialize (a : any , b ? : ( ಠ_ಠ.clutz.PrivateType ) | null ) : string ;
  /**
   * Parses a JSON string and returns the result. This uses eval so it is open
   * to security issues and it should only be used if you trust the source.
   * @param s The JSON string to parse.
   */
  function unsafeParse (a : string ) : Object | null ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.json'): typeof ಠ_ಠ.clutz.goog.json;
}
declare module 'goog:goog.json' {
  import alias = ಠ_ಠ.clutz.goog.json;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
  /**
   * A class that parses and stringifies JSON using eval (as implemented in
   * goog.json).
   * Adapts {@code goog.json} to the {@code goog.json.Processor} interface.
   */
  class EvalJsonProcessor extends EvalJsonProcessor_Instance {
  }
  class EvalJsonProcessor_Instance implements ಠ_ಠ.clutz.goog.json.Processor {
    private noStructuralTyping_: any;
    /**
     * A class that parses and stringifies JSON using eval (as implemented in
     * goog.json).
     * Adapts {@code goog.json} to the {@code goog.json.Processor} interface.
     * @param opt_replacer An optional replacer to use during serialization.
     * @param opt_useUnsafeParsing Whether to use goog.json.unsafeParse for parsing. Safe parsing is very slow on large strings. On the other hand, unsafe parsing uses eval() without checking whether the string is valid, so it should only be used if you trust the source of the string.
     */
    constructor (opt_replacer ? : ( ಠ_ಠ.clutz.PrivateType ) | null , opt_useUnsafeParsing ? : boolean | null ) ;
    parse (s : string ) : any ;
    stringify (object : any ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.json.EvalJsonProcessor'): typeof ಠ_ಠ.clutz.goog.json.EvalJsonProcessor;
}
declare module 'goog:goog.json.EvalJsonProcessor' {
  import alias = ಠ_ಠ.clutz.goog.json.EvalJsonProcessor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
  /**
   * Processor form of goog.json.hybrid, which attempts to parse/serialize
   * JSON using native JSON methods, falling back to goog.json if not
   * available.
   */
  class HybridJsonProcessor extends HybridJsonProcessor_Instance {
  }
  class HybridJsonProcessor_Instance implements ಠ_ಠ.clutz.goog.json.Processor {
    private noStructuralTyping_: any;
    parse (a : any ) : Object ;
    stringify (a : any ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.json.HybridJsonProcessor'): typeof ಠ_ಠ.clutz.goog.json.HybridJsonProcessor;
}
declare module 'goog:goog.json.HybridJsonProcessor' {
  import alias = ಠ_ಠ.clutz.goog.json.HybridJsonProcessor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
  /**
   * A class that parses and stringifies JSON using the browser's built-in JSON
   * library, if it is available.
   *
   * Note that the native JSON api has subtle differences across browsers, so
   * use this implementation with care.  See json_test#assertSerialize
   * for details on the differences from goog.json.
   *
   * This implementation is signficantly faster than goog.json, at least on
   * Chrome.  See json_perf.html for a perf test showing the difference.
   */
  class NativeJsonProcessor extends NativeJsonProcessor_Instance {
  }
  class NativeJsonProcessor_Instance implements ಠ_ಠ.clutz.goog.json.Processor {
    private noStructuralTyping_: any;
    /**
     * A class that parses and stringifies JSON using the browser's built-in JSON
     * library, if it is available.
     *
     * Note that the native JSON api has subtle differences across browsers, so
     * use this implementation with care.  See json_test#assertSerialize
     * for details on the differences from goog.json.
     *
     * This implementation is signficantly faster than goog.json, at least on
     * Chrome.  See json_perf.html for a perf test showing the difference.
     * @param opt_replacer An optional replacer to use during serialization.
     * @param opt_reviver An optional reviver to use during parsing.
     */
    constructor (opt_replacer ? : ( ಠ_ಠ.clutz.PrivateType ) | null , opt_reviver ? : ( ಠ_ಠ.clutz.PrivateType ) | null ) ;
    parse (s : string ) : any ;
    stringify (object : any ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.json.NativeJsonProcessor'): typeof ಠ_ಠ.clutz.goog.json.NativeJsonProcessor;
}
declare module 'goog:goog.json.NativeJsonProcessor' {
  import alias = ಠ_ಠ.clutz.goog.json.NativeJsonProcessor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
  /**
   * An interface for JSON parsing and serialization.
   */
  interface Processor extends ಠ_ಠ.clutz.goog.string.Parser , ಠ_ಠ.clutz.goog.string.Stringifier {
  }
}
declare module 'goog:goog.json.Processor' {
  import alias = ಠ_ಠ.clutz.goog.json.Processor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
  /**
   * JSON replacer, as defined in Section 15.12.3 of the ES5 spec.
   */
  type Replacer = ಠ_ಠ.clutz.PrivateType ;
}
declare module 'goog:goog.json.Replacer' {
  import alias = ಠ_ಠ.clutz.goog.json.Replacer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
  /**
   * JSON reviver, as defined in Section 15.12.2 of the ES5 spec.
   */
  type Reviver = ಠ_ಠ.clutz.PrivateType ;
}
declare module 'goog:goog.json.Reviver' {
  import alias = ಠ_ಠ.clutz.goog.json.Reviver;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
  /**
   * Class that is used to serialize JSON objects to a string.
   */
  class Serializer extends Serializer_Instance {
  }
  class Serializer_Instance {
    private noStructuralTyping_: any;
    /**
     * Class that is used to serialize JSON objects to a string.
     * @param opt_replacer Replacer.
     */
    constructor (opt_replacer ? : ( ಠ_ಠ.clutz.PrivateType ) | null ) ;
    /**
     * Serializes an object or a value to a JSON string.
     * @param object The object to serialize.
     */
    serialize (object : any ) : string ;
    /**
     * Serializes an array to a JSON string
     * @param arr The array to serialize.
     * @param sb Array used as a string builder.
     */
    serializeArray (arr : string [] | null , sb : string [] | null ) : void ;
    /**
     * Serializes a generic value to a JSON string
     * @param object The object to serialize.
     * @param sb Array used as a string builder.
     */
    serializeInternal (object : any , sb : string [] | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.json.Serializer'): typeof ಠ_ಠ.clutz.goog.json.Serializer;
}
declare module 'goog:goog.json.Serializer' {
  import alias = ಠ_ಠ.clutz.goog.json.Serializer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json.hybrid {
  /**
   * Attempts to parse the JSON string natively, falling back to
   * {@code goog.json.parse} if unsuccessful.
   * @param jsonString JSON string to parse.
   */
  function parse (a : string ) : Object ;
  /**
   * Attempts to serialize the JSON string natively, falling back to
   * {@code goog.json.serialize} if unsuccessful.
   * @param obj JavaScript object to serialize to JSON.
   */
  function stringify (a : Object ) : string ;
  /**
   * Attempts to parse the JSON string natively, falling back to
   * {@code goog.json.unsafeParse} if unsuccessful.
   * @param jsonString JSON string to parse.
   */
  function unsafeParse (a : string ) : Object ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.json.hybrid'): typeof ಠ_ಠ.clutz.goog.json.hybrid;
}
declare module 'goog:goog.json.hybrid' {
  import alias = ಠ_ಠ.clutz.goog.json.hybrid;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.dom {
  /**
   * A page visibility change event.
   */
  class PageVisibilityEvent extends PageVisibilityEvent_Instance {
  }
  class PageVisibilityEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * A page visibility change event.
     * @param hidden Whether the page is hidden.
     * @param visibilityState A more detailed visibility state.
     */
    constructor (hidden : boolean , visibilityState : ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityState ) ;
    /**
     * Whether the page is hidden.
     */
    hidden : boolean ;
    /**
     * A more detailed visibility state.
     */
    visibilityState : ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityState ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.dom.PageVisibilityEvent'): typeof ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityEvent;
}
declare module 'goog:goog.labs.dom.PageVisibilityEvent' {
  import alias = ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.dom {
  /**
   * This event handler allows you to catch page visibility change events.
   */
  class PageVisibilityMonitor extends PageVisibilityMonitor_Instance {
  }
  class PageVisibilityMonitor_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * This event handler allows you to catch page visibility change events.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper ) ;
    disposeInternal ( ) : void ;
    getVisibilityState ( ) : ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityState | null ;
    isHidden ( ) : boolean ;
    isSupported ( ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.dom.PageVisibilityMonitor'): typeof ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityMonitor;
}
declare module 'goog:goog.labs.dom.PageVisibilityMonitor' {
  import alias = ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityMonitor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.dom {
  /**
   * The different visibility states.
   */
  type PageVisibilityState = string ;
  var PageVisibilityState : {
    HIDDEN : PageVisibilityState ,
    PRERENDER : PageVisibilityState ,
    UNLOADED : PageVisibilityState ,
    VISIBLE : PageVisibilityState ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.dom.PageVisibilityState'): typeof ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityState;
}
declare module 'goog:goog.labs.dom.PageVisibilityState' {
  import alias = ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityState;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.events {
  /**
   * An implementation of {@code goog.events.Listenable} with full W3C
   * EventTarget-like support (capture/bubble mechanism, stopping event
   * propagation, preventing default actions).
   *
   * You may subclass this class to turn your class into a Listenable.
   *
   * Unlike {@link goog.events.EventTarget}, this class does not implement
   * {@link goog.disposable.IDisposable}. Instances of this class that have had
   * It is not necessary to call {@link goog.dispose}
   * or {@link #removeAllListeners} in order for an instance of this class
   * to be garbage collected.
   *
   * Unless propagation is stopped, an event dispatched by an
   * EventTarget will bubble to the parent returned by
   * {@code getParentEventTarget}. To set the parent, call
   * {@code setParentEventTarget}. Subclasses that don't support
   * changing the parent can override the setter to throw an error.
   *
   * Example usage:
   * <pre>
   * var source = new goog.labs.events.NonDisposableEventTarget();
   * function handleEvent(e) {
   * alert('Type: ' + e.type + '; Target: ' + e.target);
   * }
   * source.listen('foo', handleEvent);
   * source.dispatchEvent('foo'); // will call handleEvent
   * </pre>
   *
   * TODO(chrishenry|johnlenz): Consider a more modern, less viral
   * (not based on inheritance) replacement of goog.Disposable, which will allow
   * goog.events.EventTarget to not be disposable.
   */
  class NonDisposableEventTarget extends NonDisposableEventTarget_Instance {
  }
  class NonDisposableEventTarget_Instance implements ಠ_ಠ.clutz.goog.events.Listenable {
    private noStructuralTyping_: any;
    dispatchEvent (e : string | Object | null ) : boolean ;
    fireListeners < EVENTOBJ > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , capture : boolean , eventObject : EVENTOBJ ) : boolean ;
    getListener < SCOPE , EVENTOBJ > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : (a : EVENTOBJ ) => boolean | undefined , capture : boolean , opt_listenerScope ? : SCOPE ) : ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
    getListeners < EVENTOBJ > (type : string | ಠ_ಠ.clutz.goog.events.EventId < any > , capture : boolean ) : ಠ_ಠ.clutz.goog.events.ListenableKey [] ;
    getParentEventTarget ( ) : ಠ_ಠ.clutz.goog.events.Listenable | null ;
    hasListener < EVENTOBJ > (opt_type ? : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , opt_capture ? : boolean ) : boolean ;
    listen < SCOPE , EVENTOBJ > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : (a : EVENTOBJ ) => boolean | undefined , opt_useCapture ? : boolean , opt_listenerScope ? : SCOPE ) : ಠ_ಠ.clutz.goog.events.ListenableKey ;
    listenOnce < SCOPE , EVENTOBJ > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : (a : EVENTOBJ ) => boolean | undefined , opt_useCapture ? : boolean , opt_listenerScope ? : SCOPE ) : ಠ_ಠ.clutz.goog.events.ListenableKey ;
    removeAllListeners (opt_type ? : string ) : number ;
    /**
     * Sets the parent of this event target to use for capture/bubble
     * mechanism.
     * @param parent Parent listenable (null if none).
     */
    setParentEventTarget (parent : ಠ_ಠ.clutz.goog.events.Listenable | null ) : void ;
    unlisten < SCOPE , EVENTOBJ > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : (a : EVENTOBJ ) => boolean | undefined , opt_useCapture ? : boolean , opt_listenerScope ? : SCOPE ) : boolean ;
    unlistenByKey (key : ಠ_ಠ.clutz.goog.events.ListenableKey ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.events.NonDisposableEventTarget'): typeof ಠ_ಠ.clutz.goog.labs.events.NonDisposableEventTarget;
}
declare module 'goog:goog.labs.events.NonDisposableEventTarget' {
  import alias = ಠ_ಠ.clutz.goog.labs.events.NonDisposableEventTarget;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.events.touch {
  /**
   * Takes a mouse or touch event and returns the relevant geometry and target
   * data.
   * @param e A mouse or touch event.
   */
  function getTouchData (e : GlobalEvent ) : ಠ_ಠ.clutz.goog.labs.events.touch.TouchData ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.events.touch'): typeof ಠ_ಠ.clutz.goog.labs.events.touch;
}
declare module 'goog:goog.labs.events.touch' {
  import alias = ಠ_ಠ.clutz.goog.labs.events.touch;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.events.touch {
  /**
   * Description the geometry and target of an event.
   */
  type TouchData = { clientX : number , clientY : number , screenX : number , screenY : number , target : EventTarget | null } ;
}
declare module 'goog:goog.labs.events.touch.TouchData' {
  import alias = ಠ_ಠ.clutz.goog.labs.events.touch.TouchData;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.format.csv {
  var ENABLE_VERBOSE_DEBUGGING : boolean ;
  /**
   * Parses a CSV string to create a two-dimensional array.
   *
   * This function does not process header lines, etc -- such transformations can
   * be made on the resulting array.
   * @param text The entire CSV text to be parsed.
   * @param opt_ignoreErrors Whether to ignore parsing errors and instead try to recover and keep going.
   * @param opt_delimiter The delimiter to use. Defaults to ','
   */
  function parse (text : string , opt_ignoreErrors ? : boolean , opt_delimiter ? : string ) : string [] [] ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.format.csv'): typeof ಠ_ಠ.clutz.goog.labs.format.csv;
}
declare module 'goog:goog.labs.format.csv' {
  import alias = ಠ_ಠ.clutz.goog.labs.format.csv;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.format.csv {
  /**
   * Error thrown when parsing fails.
   */
  class ParseError extends ParseError_Instance {
  }
  class ParseError_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
    /**
     * Error thrown when parsing fails.
     * @param text The CSV source text being parsed.
     * @param index The index, in the string, of the position of the error.
     * @param opt_message A description of the violated parse expectation.
     */
    constructor (text : string , index : number , opt_message ? : string ) ;
    position : { column : number , line : number } | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.format.csv.ParseError'): typeof ಠ_ಠ.clutz.goog.labs.format.csv.ParseError;
}
declare module 'goog:goog.labs.format.csv.ParseError' {
  import alias = ಠ_ಠ.clutz.goog.labs.format.csv.ParseError;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.format.csv {
  /**
   * A token -- a single-character string or a sentinel.
   */
  type Token = string | ಠ_ಠ.clutz.PrivateType ;
}
declare module 'goog:goog.labs.format.csv.Token' {
  import alias = ಠ_ಠ.clutz.goog.labs.format.csv.Token;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.html {
  /**
   * A function that takes an attribute value, and returns a safe value.
   * <p>
   * Since rewriters can be chained, a rewriter must be able to accept the output
   * of another rewriter, instead of just a string though a rewriter that coerces
   * its input to a string before checking its safety will fail safe.
   * <p>
   * The meaning of the result is:
   * <table>
   * <tr><td>{@code null}</td>
   * <td>Unsafe.  The attribute should not be output.</tr>
   * <tr><td>a string</td>
   * <td>The plain text (not HTML-entity encoded) of a safe attribute
   * value.</td>
   * <tr><td>a {@link goog.html.SafeHtml}</td>
   * <td>A fragment that is safe to be included as embedded HTML as in
   * {@code <iframe srchtml="...">}</td></tr>
   * <tr><td>a {@link goog.html.SafeUrl}</td>
   * <td>A URL that does not need to be further checked against the URL
   * white-list.</td></tr>
   * <tr><td>a {@link goog.html.SafeStyle}</td>
   * <td>A safe value for a <code>style="..."</code> attribute.</td></tr>
   * </table>
   * <p>
   * Implementations are responsible for making sure that "safe" complies with
   * the contract established by the safe string types in {@link goog.html}.
   * </p>
   */
  type AttributeRewriter = (a : string | ಠ_ಠ.clutz.goog.html.SafeHtml | null | ಠ_ಠ.clutz.goog.html.SafeStyle | ಠ_ಠ.clutz.goog.html.SafeUrl ) => string | ಠ_ಠ.clutz.goog.html.SafeHtml | null | ಠ_ಠ.clutz.goog.html.SafeStyle | ಠ_ಠ.clutz.goog.html.SafeUrl ;
}
declare module 'goog:goog.labs.html.AttributeRewriter' {
  import alias = ಠ_ಠ.clutz.goog.labs.html.AttributeRewriter;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.html {
  /**
   * The type of an attribute value.
   * <p>
   * Many HTML attributes contain structured data like URLs, CSS, or even entire
   * HTML documents, so the type is a union of several variants.
   */
  type AttributeValue = string | ಠ_ಠ.clutz.goog.html.SafeHtml | null | ಠ_ಠ.clutz.goog.html.SafeStyle | ಠ_ಠ.clutz.goog.html.SafeUrl ;
}
declare module 'goog:goog.labs.html.AttributeValue' {
  import alias = ಠ_ಠ.clutz.goog.labs.html.AttributeValue;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.html {
  /**
   * A sanitizer that converts untrusted, messy HTML into more regular HTML
   * that cannot abuse high-authority constructs like the ability to execute
   * arbitrary JavaScript.
   */
  class Sanitizer extends Sanitizer_Instance {
  }
  class Sanitizer_Instance {
    private noStructuralTyping_: any;
    /**
     * Allows in the sanitized output
     * <tt>&lt;<i>element</i> <i>attr</i>="..."&gt;</tt>
     * when <i>element</i> is in {@code elementNames} and
     * <i>attrNames</i> is in {@code attrNames}.
     *
     * If specified, {@code opt_valueXform} is a function that takes the
     * HTML-entity-decoded attribute value, and can choose to disallow the
     * attribute by returning {@code null} or substitute a new value
     * by returning a string with the new value.
     * @param elementNames names (or name) on which the attributes are allowed. Element names should be allowed via {@code allowElements(...)} prior to white-listing attributes. The special element name {@code "*"} has the same meaning as in CSS selectors: it can be used to white-list attributes like {@code title} and {@code id} which are widely available with element-agnostic meanings. It should not be used for attributes like {@code type} whose meaning differs based on the element on which it appears: e.g. {@code <input type=text>} vs {@code <style type=text/css>}.
     * @param attrNames names (or name) of the attribute that should be allowed.
     * @param opt_rewriteValue A function that receives the HTML-entity-decoded attribute value and can return {@code null} to disallow the attribute entirely or the value for the attribute as a string. <p> The default is the identity function ({@code function(x){return x}}), and the value rewriter is composed with an attribute specific handler: <table> <tr> <th>href, src</th> <td>Requires that the value be an absolute URL with a protocol in (http, https, mailto) or a protocol relative URL. </tr> </table>
     */
    allowAttributes (elementNames : string [] | string , attrNames : string [] | string , opt_rewriteValue ? : (a : string | ಠ_ಠ.clutz.goog.html.SafeHtml | null | ಠ_ಠ.clutz.goog.html.SafeStyle | ಠ_ಠ.clutz.goog.html.SafeUrl ) => string | ಠ_ಠ.clutz.goog.html.SafeHtml | null | ಠ_ಠ.clutz.goog.html.SafeStyle | ಠ_ಠ.clutz.goog.html.SafeUrl ) : ಠ_ಠ.clutz.goog.labs.html.Sanitizer ;
    /**
     * Adds the element names to the white-list of elements that are allowed
     * in the safe HTML output.
     * <p>
     * Allowing elements does not, by itself, allow any attributes on
     * those elements.
     * @param var_args element names that should be allowed in the safe HTML output.
     */
    allowElements ( ...var_args : ( string | undefined ) [] ) : ಠ_ಠ.clutz.goog.labs.html.Sanitizer ;
    /**
     * Yields a string of safe HTML that contains all and only the safe
     * text-nodes and elements in the input.
     *
     * <p>
     * For the purposes of this function, "safe" is defined thus:
     * <ul>
     * <li>Contains only elements explicitly allowed via {@code this.allow*}.
     * <li>Contains only attributes explicitly allowed via {@code this.allow*}
     * and having had all relevant transformations applied.
     * <li>Contains an end tag for all and only non-void open tags.
     * <li>Tags nest per XHTML rules.
     * <li>Tags do not nest beyond a finite but fairly large level.
     * </ul>
     * @param unsafeHtml A string of HTML which need not originate with a trusted source.
     */
    sanitize (unsafeHtml : string ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.html.Sanitizer'): typeof ಠ_ಠ.clutz.goog.labs.html.Sanitizer;
}
declare module 'goog:goog.labs.html.Sanitizer' {
  import alias = ಠ_ಠ.clutz.goog.labs.html.Sanitizer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.html {
  /**
   * g4 presubmit complains about requires of this file because its clients
   * don't use any symbols from it outside JSCompiler comment annotations.
   * genjsdeps.sh doesn't generate the right dependency graph unless this
   * file is required.
   * Clients can mention this noop.
   */
  function attributeRewriterPresubmitWorkaround ( ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.html.attributeRewriterPresubmitWorkaround'): typeof ಠ_ಠ.clutz.goog.labs.html.attributeRewriterPresubmitWorkaround;
}
declare module 'goog:goog.labs.html.attributeRewriterPresubmitWorkaround' {
  import alias = ಠ_ಠ.clutz.goog.labs.html.attributeRewriterPresubmitWorkaround;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.html.scrubber {
  /**
   * Balances tags in trusted HTML.
   * @param html a string of HTML
   */
  function balance (html : string ) : string ;
  /**
   * Replaces tags not on the white-list with empty text nodes, dropping all
   * attributes, and drops other non-text nodes such as comments.
   * @param tagWhitelist a set of lower-case tag names following the convention established by {@link goog.object.createSet}.
   * @param attrWhitelist maps lower-case tag names and the special string {@code "*"} to functions from decoded attribute values to sanitized values or {@code null} to indicate that the attribute is not allowed with that value. For example, if {@code attrWhitelist['a']['href']} is defined then it is used to sanitize the value of the link's URL. If {@code attrWhitelist['*']['id']} is defined, and {@code attrWhitelist['div']['id']} is not, then the former is used to sanitize any {@code id} attribute on a {@code <div>} element.
   * @param html a string of HTML
   */
  function scrub (tagWhitelist : { [ key: string ]: boolean } , attrWhitelist : { [ key: string ]: { [ key: string ]: (a : string | ಠ_ಠ.clutz.goog.html.SafeHtml | null | ಠ_ಠ.clutz.goog.html.SafeStyle | ಠ_ಠ.clutz.goog.html.SafeUrl ) => string | ಠ_ಠ.clutz.goog.html.SafeHtml | null | ಠ_ಠ.clutz.goog.html.SafeStyle | ಠ_ಠ.clutz.goog.html.SafeUrl } | null } , html : string ) : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.html.scrubber'): typeof ಠ_ಠ.clutz.goog.labs.html.scrubber;
}
declare module 'goog:goog.labs.html.scrubber' {
  import alias = ಠ_ಠ.clutz.goog.labs.html.scrubber;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  /**
   * GenderInfo provides a method to determine the gender of a list/array
   * of objects when one knows the gender of each item of the list.
   * It does this in a locale sensitive manner.
   * The constructor initializes the object based on the locale data from
   * the current goog.labs.i18n.ListFormatSymbols.
   *
   * Similar to the ICU4J class com.icu.util.GenderInfo:
   * http://icu-project.org/apiref/icu4j/com/ibm/icu/util/GenderInfo.html
   */
  class GenderInfo extends GenderInfo_Instance {
  }
  class GenderInfo_Instance {
    private noStructuralTyping_: any;
    /**
     * Determines the overal gender of a list based on the gender of all the list
     * items, in a locale-aware way.
     * @param genders An array of genders, will give the gender of the list.
     */
    getListGender (genders : ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo.Gender [] ) : ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo.Gender ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.i18n.GenderInfo'): typeof ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo;
}
declare module 'goog:goog.labs.i18n.GenderInfo' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo {
  /**
   * Enumeration for the possible gender values.
   * Gender: OTHER means either the information is unavailable,
   * or the person has declined to state MALE or FEMALE.
   */
  type Gender = number ;
  var Gender : {
    FEMALE : Gender ,
    MALE : Gender ,
    OTHER : Gender ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.i18n.GenderInfo.Gender'): typeof ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo.Gender;
}
declare module 'goog:goog.labs.i18n.GenderInfo.Gender' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo.Gender;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  /**
   * ListFormat provides a method to format a list/array of objects to a string,
   * in a user friendly way and in a locale sensitive manner.
   * If the objects are not strings, toString is called to convert them.
   * The constructor initializes the object based on the locale data from
   * the current goog.labs.i18n.ListFormatSymbols.
   *
   * Similar to the ICU4J class com.ibm.icu.text.ListFormatter:
   * http://icu-project.org/apiref/icu4j/com/ibm/icu/text/ListFormatter.html
   */
  class ListFormat extends ListFormat_Instance {
  }
  class ListFormat_Instance {
    private noStructuralTyping_: any;
    /**
     * Formats an array of strings into a string.
     * It is a user facing, locale-aware list (i.e. 'red, green, and blue').
     * @param items Items to format.
     */
    format (items : ( string | number ) [] ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.i18n.ListFormat'): typeof ಠ_ಠ.clutz.goog.labs.i18n.ListFormat;
}
declare module 'goog:goog.labs.i18n.ListFormat' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormat;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbolsExt : Object ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.i18n.ListFormatSymbolsExt'): typeof ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbolsExt;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbolsExt' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbolsExt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_af : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_af' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_af;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_af_NA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_af_NA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_af_NA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_af_ZA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_af_ZA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_af_ZA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_agq : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_agq' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_agq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_agq_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_agq_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_agq_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ak : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ak' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ak;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ak_GH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ak_GH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ak_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_am : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_am' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_am;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_am_ET : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_am_ET' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_am_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_001 : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_001' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_AE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_AE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_AE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_BH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_BH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_BH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_DJ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_DJ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_DJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_DZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_DZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_DZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_EG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_EG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_EG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_EH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_EH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_EH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_ER : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_ER' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_ER;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_IL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_IL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_IL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_IQ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_IQ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_JO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_JO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_JO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_KM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_KM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_KM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_KW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_KW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_KW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_LB : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_LB' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_LB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_LY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_LY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_LY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_MA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_MA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_MR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_MR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_MR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_OM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_OM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_OM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_PS : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_PS' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_PS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_QA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_QA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_QA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_SA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_SA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_SA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_SD : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_SD' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_SD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_SO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_SO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_SO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_SS : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_SS' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_SS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_SY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_SY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_SY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_TD : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_TD' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_TD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_TN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_TN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_TN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_XB : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_XB' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_XB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ar_YE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ar_YE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ar_YE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_as : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_as' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_as;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_as_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_as_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_as_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_asa : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_asa' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_asa;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_asa_TZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_asa_TZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_asa_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ast : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ast' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ast;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ast_ES : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ast_ES' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ast_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_az : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_az' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_az;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_az_Cyrl : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_az_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_az_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_az_Cyrl_AZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_az_Cyrl_AZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_az_Cyrl_AZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_az_Latn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_az_Latn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_az_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_az_Latn_AZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_az_Latn_AZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_az_Latn_AZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bas : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bas' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bas;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bas_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bas_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bas_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_be : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_be' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_be;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_be_BY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_be_BY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_be_BY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bem : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bem' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bem;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bem_ZM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bem_ZM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bem_ZM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bez : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bez' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bez;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bez_TZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bez_TZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bez_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bg : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bg' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bg_BG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bg_BG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bg_BG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bm : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bm' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bm;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bm_ML : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bm_ML' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bm_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bn_BD : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bn_BD' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bn_BD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bn_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bn_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bn_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bo : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bo' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bo_CN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bo_CN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bo_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bo_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bo_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bo_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_br : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_br' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_br;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_br_FR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_br_FR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_br_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_brx : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_brx' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_brx;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_brx_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_brx_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_brx_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bs : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bs' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bs;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bs_Cyrl : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bs_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bs_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bs_Cyrl_BA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bs_Cyrl_BA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bs_Cyrl_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bs_Latn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bs_Latn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bs_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_bs_Latn_BA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_bs_Latn_BA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_bs_Latn_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ca : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ca' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ca;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ca_AD : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ca_AD' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ca_AD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ca_ES : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ca_ES' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ca_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ca_FR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ca_FR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ca_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ca_IT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ca_IT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ca_IT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ce : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ce' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ce;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ce_RU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ce_RU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ce_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_cgg : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_cgg' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_cgg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_cgg_UG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_cgg_UG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_cgg_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_chr : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_chr' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_chr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_chr_US : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_chr_US' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_chr_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_cs : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_cs' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_cs;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_cs_CZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_cs_CZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_cs_CZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_cy : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_cy' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_cy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_cy_GB : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_cy_GB' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_cy_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_da : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_da' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_da;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_da_DK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_da_DK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_da_DK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_da_GL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_da_GL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_da_GL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_dav : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_dav' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_dav;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_dav_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_dav_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_dav_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_de : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_de' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_de;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_de_AT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_de_AT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_de_AT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_de_BE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_de_BE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_de_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_de_CH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_de_CH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_de_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_de_DE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_de_DE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_de_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_de_LI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_de_LI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_de_LI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_de_LU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_de_LU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_de_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_dje : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_dje' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_dje;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_dje_NE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_dje_NE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_dje_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_dsb : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_dsb' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_dsb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_dsb_DE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_dsb_DE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_dsb_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_dua : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_dua' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_dua;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_dua_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_dua_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_dua_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_dyo : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_dyo' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_dyo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_dyo_SN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_dyo_SN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_dyo_SN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_dz : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_dz' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_dz;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_dz_BT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_dz_BT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_dz_BT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ebu : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ebu' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ebu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ebu_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ebu_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ebu_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ee : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ee' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ee;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ee_GH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ee_GH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ee_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ee_TG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ee_TG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ee_TG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_el : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_el' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_el;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_el_CY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_el_CY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_el_CY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_el_GR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_el_GR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_el_GR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_001 : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_001' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_150 : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_150' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_150;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_AG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_AG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_AG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_AI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_AI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_AI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_AS : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_AS' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_AS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_AT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_AT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_AT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_AU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_AU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_AU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_BB : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_BB' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_BB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_BE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_BE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_BI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_BI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_BI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_BM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_BM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_BM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_BS : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_BS' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_BS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_BW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_BW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_BW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_BZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_BZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_BZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_CA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_CA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_CA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_CC : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_CC' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_CC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_CH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_CH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_CK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_CK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_CK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_CX : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_CX' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_CX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_CY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_CY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_CY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_DE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_DE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_DG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_DG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_DG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_DK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_DK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_DK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_DM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_DM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_DM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_ER : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_ER' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_ER;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_FI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_FI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_FJ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_FJ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_FJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_FK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_FK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_FK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_FM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_FM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_FM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_GB : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_GB' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_GD : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_GD' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_GD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_GG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_GG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_GG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_GH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_GH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_GI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_GI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_GI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_GM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_GM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_GM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_GU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_GU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_GU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_GY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_GY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_GY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_HK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_HK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_IE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_IE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_IE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_IL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_IL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_IL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_IM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_IM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_IM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_IO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_IO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_IO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_JE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_JE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_JE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_JM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_JM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_JM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_KI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_KI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_KI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_KN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_KN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_KN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_KY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_KY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_KY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_LC : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_LC' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_LC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_LR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_LR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_LR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_LS : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_LS' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_LS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_MG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_MG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_MG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_MH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_MH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_MH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_MO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_MO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_MP : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_MP' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_MP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_MS : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_MS' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_MS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_MT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_MT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_MT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_MU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_MU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_MU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_MW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_MW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_MW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_MY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_MY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_MY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_NA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_NA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_NA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_NF : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_NF' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_NF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_NG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_NG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_NL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_NL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_NL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_NR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_NR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_NR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_NU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_NU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_NU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_NZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_NZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_NZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_PG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_PG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_PG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_PH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_PH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_PH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_PK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_PK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_PK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_PN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_PN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_PN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_PR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_PR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_PR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_PW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_PW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_PW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_RW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_RW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_RW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_SB : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_SB' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_SB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_SC : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_SC' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_SC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_SD : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_SD' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_SD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_SE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_SE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_SE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_SG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_SG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_SH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_SH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_SH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_SI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_SI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_SI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_SL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_SL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_SL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_SS : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_SS' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_SS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_SX : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_SX' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_SX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_SZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_SZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_SZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_TC : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_TC' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_TC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_TK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_TK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_TK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_TO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_TO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_TO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_TT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_TT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_TT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_TV : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_TV' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_TV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_TZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_TZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_UG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_UG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_UM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_UM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_UM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_US : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_US' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_US_POSIX : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_US_POSIX' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_US_POSIX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_VC : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_VC' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_VC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_VG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_VG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_VG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_VI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_VI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_VI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_VU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_VU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_VU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_WS : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_WS' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_WS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_XA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_XA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_XA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_ZA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_ZA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_ZA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_ZM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_ZM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_ZM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_en_ZW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_en_ZW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_en_ZW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_eo : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_eo' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_eo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_419 : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_419' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_419;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_AR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_AR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_AR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_BO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_BO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_BO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_CL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_CL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_CL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_CO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_CO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_CO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_CR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_CR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_CR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_CU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_CU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_CU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_DO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_DO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_DO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_EA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_EA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_EA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_EC : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_EC' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_EC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_ES : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_ES' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_GQ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_GQ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_GQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_GT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_GT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_GT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_HN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_HN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_HN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_IC : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_IC' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_IC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_MX : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_MX' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_MX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_NI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_NI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_NI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_PA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_PA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_PA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_PE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_PE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_PE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_PH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_PH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_PH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_PR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_PR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_PR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_PY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_PY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_PY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_SV : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_SV' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_SV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_US : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_US' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_UY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_UY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_UY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_es_VE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_es_VE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_es_VE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_et : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_et' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_et;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_et_EE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_et_EE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_et_EE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_eu : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_eu' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_eu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_eu_ES : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_eu_ES' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_eu_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ewo : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ewo' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ewo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ewo_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ewo_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ewo_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fa : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fa' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fa;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fa_AF : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fa_AF' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fa_AF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fa_IR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fa_IR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fa_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ff : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ff' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ff;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ff_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ff_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ff_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ff_GN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ff_GN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ff_GN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ff_MR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ff_MR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ff_MR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ff_SN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ff_SN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ff_SN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fi : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fi' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fi_FI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fi_FI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fi_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fil : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fil' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fil;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fil_PH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fil_PH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fil_PH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fo : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fo' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fo_DK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fo_DK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fo_DK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fo_FO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fo_FO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fo_FO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_BE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_BE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_BF : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_BF' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_BF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_BI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_BI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_BI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_BJ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_BJ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_BJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_BL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_BL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_BL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_CA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_CA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_CA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_CD : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_CD' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_CF : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_CF' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_CF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_CG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_CG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_CG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_CH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_CH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_CI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_CI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_CI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_DJ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_DJ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_DJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_DZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_DZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_DZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_FR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_FR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_GA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_GA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_GA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_GF : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_GF' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_GF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_GN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_GN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_GN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_GP : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_GP' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_GP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_GQ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_GQ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_GQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_HT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_HT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_HT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_KM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_KM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_KM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_LU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_LU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_MA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_MA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_MC : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_MC' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_MC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_MF : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_MF' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_MF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_MG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_MG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_MG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_ML : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_ML' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_MQ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_MQ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_MQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_MR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_MR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_MR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_MU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_MU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_MU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_NC : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_NC' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_NC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_NE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_NE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_PF : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_PF' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_PF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_PM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_PM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_PM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_RE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_RE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_RE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_RW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_RW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_RW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_SC : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_SC' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_SC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_SN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_SN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_SN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_SY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_SY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_SY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_TD : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_TD' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_TD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_TG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_TG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_TG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_TN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_TN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_TN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_VU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_VU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_VU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_WF : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_WF' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_WF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fr_YT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fr_YT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fr_YT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fur : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fur' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fur;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fur_IT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fur_IT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fur_IT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fy : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fy' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_fy_NL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_fy_NL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_fy_NL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ga : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ga' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ga;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ga_IE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ga_IE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ga_IE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_gd : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_gd' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_gd;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_gd_GB : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_gd_GB' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_gd_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_gl : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_gl' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_gl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_gl_ES : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_gl_ES' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_gl_ES;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_gsw : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_gsw' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_gsw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_gsw_CH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_gsw_CH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_gsw_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_gsw_FR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_gsw_FR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_gsw_FR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_gsw_LI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_gsw_LI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_gsw_LI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_gu : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_gu' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_gu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_gu_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_gu_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_gu_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_guz : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_guz' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_guz;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_guz_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_guz_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_guz_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_gv : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_gv' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_gv;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_gv_IM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_gv_IM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_gv_IM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ha : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ha' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ha;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ha_GH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ha_GH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ha_GH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ha_NE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ha_NE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ha_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ha_NG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ha_NG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ha_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_haw : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_haw' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_haw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_haw_US : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_haw_US' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_haw_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_he : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_he' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_he;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_he_IL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_he_IL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_he_IL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_hi : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_hi' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_hi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_hi_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_hi_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_hi_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_hr : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_hr' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_hr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_hr_BA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_hr_BA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_hr_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_hr_HR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_hr_HR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_hr_HR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_hsb : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_hsb' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_hsb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_hsb_DE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_hsb_DE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_hsb_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_hu : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_hu' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_hu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_hu_HU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_hu_HU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_hu_HU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_hy : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_hy' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_hy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_hy_AM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_hy_AM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_hy_AM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_id : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_id' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_id;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_id_ID : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_id_ID' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_id_ID;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ig : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ig' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ig;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ig_NG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ig_NG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ig_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ii : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ii' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ii;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ii_CN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ii_CN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ii_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_in : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_in' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_in;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_is : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_is' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_is;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_is_IS : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_is_IS' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_is_IS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_it : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_it' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_it;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_it_CH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_it_CH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_it_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_it_IT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_it_IT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_it_IT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_it_SM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_it_SM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_it_SM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_iw : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_iw' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_iw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ja : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ja' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ja;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ja_JP : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ja_JP' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ja_JP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_jgo : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_jgo' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_jgo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_jgo_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_jgo_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_jgo_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_jmc : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_jmc' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_jmc;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_jmc_TZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_jmc_TZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_jmc_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ka : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ka' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ka;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ka_GE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ka_GE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ka_GE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kab : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kab' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kab_DZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kab_DZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kab_DZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kam : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kam' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kam;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kam_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kam_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kam_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kde : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kde' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kde;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kde_TZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kde_TZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kde_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kea : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kea' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kea;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kea_CV : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kea_CV' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kea_CV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_khq : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_khq' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_khq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_khq_ML : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_khq_ML' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_khq_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ki : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ki' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ki;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ki_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ki_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ki_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kk : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kk' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kk_KZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kk_KZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kk_KZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kkj : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kkj' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kkj;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kkj_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kkj_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kkj_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kl : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kl' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kl_GL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kl_GL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kl_GL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kln : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kln' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kln;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kln_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kln_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kln_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_km : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_km' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_km;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_km_KH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_km_KH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_km_KH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kn_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kn_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kn_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ko : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ko' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ko;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ko_KP : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ko_KP' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ko_KP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ko_KR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ko_KR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ko_KR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kok : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kok' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kok;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kok_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kok_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kok_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ks : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ks' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ks;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ks_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ks_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ks_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ksb : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ksb' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ksb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ksb_TZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ksb_TZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ksb_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ksf : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ksf' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ksf;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ksf_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ksf_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ksf_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ksh : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ksh' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ksh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ksh_DE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ksh_DE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ksh_DE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kw : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kw' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_kw_GB : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_kw_GB' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_kw_GB;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ky : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ky' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ky;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ky_KG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ky_KG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ky_KG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lag : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lag' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lag;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lag_TZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lag_TZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lag_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lb : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lb' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lb_LU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lb_LU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lb_LU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lg : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lg' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lg_UG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lg_UG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lg_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lkt : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lkt' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lkt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lkt_US : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lkt_US' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lkt_US;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ln : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ln' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ln;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ln_AO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ln_AO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ln_AO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ln_CD : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ln_CD' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ln_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ln_CF : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ln_CF' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ln_CF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ln_CG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ln_CG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ln_CG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lo : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lo' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lo_LA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lo_LA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lo_LA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lrc : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lrc' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lrc;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lrc_IQ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lrc_IQ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lrc_IQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lrc_IR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lrc_IR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lrc_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lt : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lt' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lt_LT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lt_LT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lt_LT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lu : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lu' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lu_CD : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lu_CD' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lu_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_luo : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_luo' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_luo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_luo_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_luo_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_luo_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_luy : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_luy' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_luy;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_luy_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_luy_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_luy_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lv : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lv' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lv;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_lv_LV : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_lv_LV' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_lv_LV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mas : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mas' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mas;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mas_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mas_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mas_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mas_TZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mas_TZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mas_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mer : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mer' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mer_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mer_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mer_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mfe : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mfe' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mfe;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mfe_MU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mfe_MU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mfe_MU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mg : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mg' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mg_MG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mg_MG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mg_MG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mgh : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mgh' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mgh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mgh_MZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mgh_MZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mgh_MZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mgo : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mgo' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mgo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mgo_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mgo_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mgo_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mk : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mk' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mk_MK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mk_MK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mk_MK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ml : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ml' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ml;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ml_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ml_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ml_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mn_MN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mn_MN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mn_MN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mo : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mo' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mr : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mr' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mr_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mr_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mr_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ms : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ms' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ms;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ms_BN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ms_BN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ms_BN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ms_MY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ms_MY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ms_MY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ms_SG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ms_SG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ms_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mt : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mt' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mt_MT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mt_MT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mt_MT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mua : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mua' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mua;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mua_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mua_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mua_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_my : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_my' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_my;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_my_MM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_my_MM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_my_MM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mzn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mzn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mzn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_mzn_IR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_mzn_IR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_mzn_IR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_naq : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_naq' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_naq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_naq_NA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_naq_NA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_naq_NA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nb : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nb' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nb;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nb_NO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nb_NO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nb_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nb_SJ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nb_SJ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nb_SJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nd : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nd' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nd;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nd_ZW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nd_ZW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nd_ZW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ne : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ne' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ne;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ne_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ne_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ne_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ne_NP : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ne_NP' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ne_NP;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nl : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nl' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nl_AW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nl_AW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nl_AW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nl_BE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nl_BE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nl_BE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nl_BQ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nl_BQ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nl_BQ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nl_CW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nl_CW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nl_CW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nl_NL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nl_NL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nl_NL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nl_SR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nl_SR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nl_SR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nl_SX : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nl_SX' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nl_SX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nmg : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nmg' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nmg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nmg_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nmg_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nmg_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nn_NO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nn_NO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nn_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nnh : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nnh' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nnh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nnh_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nnh_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nnh_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_no : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_no' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_no;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_no_NO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_no_NO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_no_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nus : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nus' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nus;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nus_SS : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nus_SS' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nus_SS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nyn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nyn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nyn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_nyn_UG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_nyn_UG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_nyn_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_om : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_om' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_om;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_om_ET : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_om_ET' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_om_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_om_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_om_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_om_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_or : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_or' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_or;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_or_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_or_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_or_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_os : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_os' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_os;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_os_GE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_os_GE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_os_GE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_os_RU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_os_RU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_os_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pa : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pa' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pa;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pa_Arab : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pa_Arab' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pa_Arab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pa_Arab_PK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pa_Arab_PK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pa_Arab_PK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pa_Guru : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pa_Guru' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pa_Guru;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pa_Guru_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pa_Guru_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pa_Guru_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pl : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pl' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pl_PL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pl_PL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pl_PL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ps : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ps' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ps;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ps_AF : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ps_AF' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ps_AF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pt : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pt' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pt;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pt_AO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pt_AO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pt_AO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pt_BR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pt_BR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pt_BR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pt_CV : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pt_CV' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pt_CV;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pt_GW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pt_GW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pt_GW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pt_MO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pt_MO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pt_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pt_MZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pt_MZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pt_MZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pt_PT : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pt_PT' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pt_PT;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pt_ST : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pt_ST' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pt_ST;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_pt_TL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_pt_TL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_pt_TL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_qu : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_qu' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_qu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_qu_BO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_qu_BO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_qu_BO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_qu_EC : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_qu_EC' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_qu_EC;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_qu_PE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_qu_PE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_qu_PE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_rm : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_rm' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_rm;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_rm_CH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_rm_CH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_rm_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_rn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_rn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_rn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_rn_BI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_rn_BI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_rn_BI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ro : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ro' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ro;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ro_MD : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ro_MD' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ro_MD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ro_RO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ro_RO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ro_RO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_rof : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_rof' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_rof;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_rof_TZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_rof_TZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_rof_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ru : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ru' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ru;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ru_BY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ru_BY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ru_BY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ru_KG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ru_KG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ru_KG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ru_KZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ru_KZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ru_KZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ru_MD : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ru_MD' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ru_MD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ru_RU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ru_RU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ru_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ru_UA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ru_UA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ru_UA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_rw : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_rw' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_rw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_rw_RW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_rw_RW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_rw_RW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_rwk : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_rwk' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_rwk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_rwk_TZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_rwk_TZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_rwk_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sah : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sah' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sah;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sah_RU : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sah_RU' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sah_RU;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_saq : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_saq' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_saq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_saq_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_saq_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_saq_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sbp : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sbp' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sbp;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sbp_TZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sbp_TZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sbp_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_se : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_se' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_se;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_se_FI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_se_FI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_se_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_se_NO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_se_NO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_se_NO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_se_SE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_se_SE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_se_SE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_seh : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_seh' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_seh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_seh_MZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_seh_MZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_seh_MZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ses : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ses' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ses;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ses_ML : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ses_ML' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ses_ML;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sg : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sg' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sg;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sg_CF : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sg_CF' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sg_CF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sh : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sh' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_shi : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_shi' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_shi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_shi_Latn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_shi_Latn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_shi_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_shi_Latn_MA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_shi_Latn_MA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_shi_Latn_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_shi_Tfng : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_shi_Tfng' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_shi_Tfng;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_shi_Tfng_MA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_shi_Tfng_MA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_shi_Tfng_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_si : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_si' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_si;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_si_LK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_si_LK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_si_LK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sk : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sk' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sk_SK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sk_SK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sk_SK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sl : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sl' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sl_SI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sl_SI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sl_SI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_smn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_smn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_smn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_smn_FI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_smn_FI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_smn_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sn_ZW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sn_ZW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sn_ZW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_so : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_so' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_so;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_so_DJ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_so_DJ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_so_DJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_so_ET : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_so_ET' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_so_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_so_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_so_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_so_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_so_SO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_so_SO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_so_SO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sq : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sq' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sq_AL : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sq_AL' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sq_AL;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sq_MK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sq_MK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sq_MK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sq_XK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sq_XK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sq_XK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sr : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sr' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sr_Cyrl : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sr_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sr_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sr_Cyrl_BA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sr_Cyrl_BA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sr_Cyrl_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sr_Cyrl_ME : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sr_Cyrl_ME' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sr_Cyrl_ME;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sr_Cyrl_RS : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sr_Cyrl_RS' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sr_Cyrl_RS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sr_Cyrl_XK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sr_Cyrl_XK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sr_Cyrl_XK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sr_Latn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sr_Latn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sr_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sr_Latn_BA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sr_Latn_BA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sr_Latn_BA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sr_Latn_ME : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sr_Latn_ME' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sr_Latn_ME;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sr_Latn_RS : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sr_Latn_RS' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sr_Latn_RS;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sr_Latn_XK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sr_Latn_XK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sr_Latn_XK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sv : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sv' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sv;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sv_AX : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sv_AX' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sv_AX;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sv_FI : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sv_FI' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sv_FI;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sv_SE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sv_SE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sv_SE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sw : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sw' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sw;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sw_CD : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sw_CD' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sw_CD;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sw_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sw_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sw_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sw_TZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sw_TZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sw_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_sw_UG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_sw_UG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_sw_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ta : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ta' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ta;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ta_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ta_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ta_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ta_LK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ta_LK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ta_LK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ta_MY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ta_MY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ta_MY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ta_SG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ta_SG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ta_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_te : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_te' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_te;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_te_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_te_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_te_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_teo : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_teo' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_teo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_teo_KE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_teo_KE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_teo_KE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_teo_UG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_teo_UG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_teo_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_th : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_th' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_th;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_th_TH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_th_TH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_th_TH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ti : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ti' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ti;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ti_ER : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ti_ER' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ti_ER;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ti_ET : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ti_ET' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ti_ET;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_tl : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_tl' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_tl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_to : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_to' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_to;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_to_TO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_to_TO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_to_TO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_tr : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_tr' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_tr;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_tr_CY : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_tr_CY' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_tr_CY;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_tr_TR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_tr_TR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_tr_TR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_twq : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_twq' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_twq;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_twq_NE : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_twq_NE' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_twq_NE;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_tzm : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_tzm' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_tzm;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_tzm_MA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_tzm_MA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_tzm_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ug : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ug' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ug;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ug_CN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ug_CN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ug_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_uk : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_uk' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_uk;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_uk_UA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_uk_UA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_uk_UA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ur : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ur' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ur;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ur_IN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ur_IN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ur_IN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_ur_PK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_ur_PK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_ur_PK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_uz : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_uz' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_uz;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_uz_Arab : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_uz_Arab' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_uz_Arab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_uz_Arab_AF : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_uz_Arab_AF' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_uz_Arab_AF;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_uz_Cyrl : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_uz_Cyrl' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_uz_Cyrl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_uz_Cyrl_UZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_uz_Cyrl_UZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_uz_Cyrl_UZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_uz_Latn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_uz_Latn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_uz_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_uz_Latn_UZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_uz_Latn_UZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_uz_Latn_UZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_vai : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_vai' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_vai;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_vai_Latn : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_vai_Latn' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_vai_Latn;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_vai_Latn_LR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_vai_Latn_LR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_vai_Latn_LR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_vai_Vaii : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_vai_Vaii' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_vai_Vaii;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_vai_Vaii_LR : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_vai_Vaii_LR' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_vai_Vaii_LR;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_vi : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_vi' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_vi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_vi_VN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_vi_VN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_vi_VN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_vun : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_vun' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_vun;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_vun_TZ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_vun_TZ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_vun_TZ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_wae : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_wae' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_wae;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_wae_CH : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_wae_CH' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_wae_CH;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_xog : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_xog' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_xog;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_xog_UG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_xog_UG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_xog_UG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_yav : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_yav' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_yav;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_yav_CM : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_yav_CM' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_yav_CM;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_yi : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_yi' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_yi;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_yi_001 : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_yi_001' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_yi_001;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_yo : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_yo' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_yo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_yo_BJ : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_yo_BJ' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_yo_BJ;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_yo_NG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_yo_NG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_yo_NG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_yue : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_yue' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_yue;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_yue_HK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_yue_HK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_yue_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zgh : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zgh' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zgh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zgh_MA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zgh_MA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zgh_MA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zh : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zh' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zh;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zh_CN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zh_CN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zh_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zh_HK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zh_HK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zh_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zh_Hans : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zh_Hans' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zh_Hans;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zh_Hans_CN : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zh_Hans_CN' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zh_Hans_CN;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zh_Hans_HK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zh_Hans_HK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zh_Hans_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zh_Hans_MO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zh_Hans_MO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zh_Hans_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zh_Hans_SG : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zh_Hans_SG' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zh_Hans_SG;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zh_Hant : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zh_Hant' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zh_Hant;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zh_Hant_HK : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zh_Hant_HK' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zh_Hant_HK;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zh_Hant_MO : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zh_Hant_MO' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zh_Hant_MO;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zh_Hant_TW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zh_Hant_TW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zh_Hant_TW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zh_TW : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zh_TW' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zh_TW;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zu : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zu' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zu;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  var ListFormatSymbols_zu_ZA : any;
}
declare module 'goog:goog.labs.i18n.ListFormatSymbols_zu_ZA' {
  import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormatSymbols_zu_ZA;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$labs$iterable {
  /**
   * Call a function with every value of an iterable.
   *
   * Warning: this function will never halt if given an iterable that
   * is never exhausted.
   */
  function forEach < VALUE > (f : (a : VALUE ) => undefined , iterable : Iterable < VALUE > ) : void ;
  /**
   * Get the iterator for an iterable.
   */
  function getIterator < VALUE > (iterable : Iterable < VALUE > ) : Iterator < VALUE > ;
  /**
   * Maps the values of one iterable to create another iterable.
   *
   * When next() is called on the returned iterable, it will call the given
   * function {@code f} with the next value of the given iterable
   * {@code iterable} until the given iterable is exhausted.
   */
  function map < THIS , VALUE , RESULT > (f : (a : VALUE ) => RESULT , iterable : Iterable < VALUE > ) : Iterable < RESULT > ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'module$exports$goog$labs$iterable'): typeof ಠ_ಠ.clutz.module$exports$goog$labs$iterable;
}
declare module 'goog:goog.labs.iterable' {
  import alias = ಠ_ಠ.clutz.module$exports$goog$labs$iterable;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.mock {
  /**
   * A stub binder is an object that helps define the stub by binding
   * method name to the stub method.
   */
  interface StubBinder {
    /**
     * Defines the function to be called for the method name and arguments bound
     * to this {@code StubBinder}.
     *
     * If {@code then} or {@code thenReturn} has been previously called
     * on this {@code StubBinder} then the given stub {@code func} will be called
     * only after the stubs passed previously have been called.  Afterwards,
     * if no other calls are made to {@code then} or {@code thenReturn} for this
     * {@code StubBinder} then the given {@code func} will be used for every further
     * invocation.
     * See #when for complete examples.
     * TODO(user): Add support for the 'Answer' interface.
     * @param func The function to call.
     */
    then (a : ( ...a : any [] ) => any ) : ಠ_ಠ.clutz.goog.labs.mock.StubBinder ;
    /**
     * Defines the constant return value for the stub represented by this
     * {@code StubBinder}.
     * @param value The value to return.
     */
    thenReturn (a : any ) : ಠ_ಠ.clutz.goog.labs.mock.StubBinder ;
  }
  /**
   * A unique Id generator that does not modify the object.
   * @param obj The object whose unique ID we want to generate.
   */
  function getUid (obj : Object ) : number ;
  /**
   * Mocks a given object or class.
   * @param objectOrClass An instance or a constructor of a class to be mocked.
   */
  function mock (objectOrClass : Object ) : Object ;
  /**
   * Mocks a given constructor.
   * @param ctor A constructor function to be mocked.
   */
  function mockConstructor (ctor : ( ...a : any [] ) => any ) : ( ...a : any [] ) => any ;
  /**
   * Mocks a given function.
   * @param func A function to be mocked.
   */
  function mockFunction (func : ( ...a : any [] ) => any ) : ( ...a : any [] ) => any ;
  /**
   * Spies on a given object.
   * @param obj The object to be spied on.
   */
  function spy (obj : Object ) : Object ;
  /**
   * Returns an object that can be used to verify calls to specific methods of a
   * given mock.
   * @param obj The mocked object.
   * @param opt_verificationMode The mode under which to verify invocations.
   */
  function verify (obj : Object , opt_verificationMode ? : ಠ_ಠ.clutz.goog.labs.mock.verification.VerificationMode ) : Object ;
  /**
   * Facilitates (and is the first step in) setting up stubs. Obtains an object
   * on which, the method to be mocked is called to create a stub. Sample usage:
   *
   * var mockObj = goog.labs.mock.mock(objectBeingMocked);
   * goog.labs.mock.when(mockObj).getFoo(3).thenReturn(4);
   *
   * Subsequent calls to {@code when} take precedence over earlier calls, allowing
   * users to set up default stubs in setUp methods and then override them in
   * individual tests.
   *
   * If a user wants sequential calls to their stub to return different
   * values, they can chain calls to {@code then} or {@code thenReturn} as
   * follows:
   *
   * var mockObj = goog.labs.mock.mock(objectBeingMocked);
   * goog.labs.mock.when(mockObj).getFoo(3)
   * .thenReturn(4)
   * .then(function() {
   * throw Error('exceptional case');
   * });
   * @param mockObject The mocked object.
   */
  function when (mockObject : Object ) : ಠ_ಠ.clutz.goog.labs.mock.StubBinder ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.mock'): typeof ಠ_ಠ.clutz.goog.labs.mock;
}
declare module 'goog:goog.labs.mock' {
  import alias = ಠ_ಠ.clutz.goog.labs.mock;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.mock {
  /**
   * Error thrown when verification failed.
   */
  class VerificationError extends VerificationError_Instance {
  }
  class VerificationError_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
    /**
     * Error thrown when verification failed.
     * @param recordedCalls The recorded calls that didn't match the expectation.
     * @param methodName The expected method call.
     * @param verificationMode The expected verification mode which failed verification.
     * @param args The expected arguments.
     */
    constructor (recordedCalls : ಠ_ಠ.clutz.PrivateType [] | null , methodName : string , verificationMode : ಠ_ಠ.clutz.goog.labs.mock.verification.VerificationMode , args : any [] ) ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.mock.VerificationError'): typeof ಠ_ಠ.clutz.goog.labs.mock.VerificationError;
}
declare module 'goog:goog.labs.mock.VerificationError' {
  import alias = ಠ_ಠ.clutz.goog.labs.mock.VerificationError;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.mock.verification {
  /**
   * Returns a {@code VerificationMode} which verifies a method was called at
   * least {@code minimumNumberOfInvocations} times.
   */
  function atLeast (minimumNumberOfInvocations : number ) : ಠ_ಠ.clutz.goog.labs.mock.verification.VerificationMode ;
  /**
   * Returns a {@code VerificationMode} which verifies a method was called at
   * most {@code maxNumberOfInvocations} times.
   */
  function atMost (maxNumberOfInvocations : number ) : ಠ_ಠ.clutz.goog.labs.mock.verification.VerificationMode ;
  /**
   * Returns a {@code VerificationMode} which verifies a method was never
   * called. An alias for {@code VerificatonMode.times(0)}.
   */
  function never ( ) : ಠ_ಠ.clutz.goog.labs.mock.verification.VerificationMode ;
  /**
   * Returns a {@code VerificationMode} which verifies a method was called
   * exactly {@code expectedNumberOfInvocations} times.
   */
  function times (expectedNumberOfInvocations : number ) : ಠ_ಠ.clutz.goog.labs.mock.verification.VerificationMode ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.mock.verification'): typeof ಠ_ಠ.clutz.goog.labs.mock.verification;
}
declare module 'goog:goog.labs.mock.verification' {
  import alias = ಠ_ಠ.clutz.goog.labs.mock.verification;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.mock.verification {
  /**
   * A mode which defines how mock invocations should be verified.
   * When an instance of {@code VerificationMode} is passed to
   * {@code goog.labs.mock.verify}, then that instances's {@code #verify}
   * method will be used to verify the invocation.
   *
   * If {@code #verify} returns false, then the test will fail and the
   * description returned from {@code #describe} will be shown in the
   * test failure message.  Sample usage:
   *
   * goog.module('my.package.MyClassTest');
   * goog.setTestOnly('my.package.MyClassTest');
   *
   * var testSuite = goog.require('goog.testing.testSuite');
   * var verification = goog.require('goog.labs.mock.verification');
   *
   * var times = verification.times;
   *
   * testSuite({
   * setUp: function() {
   * // Code creating instances of MyClass and mockObj.
   * },
   *
   * testMyMethod_shouldDoSomething: function() {
   * myClassInstance.myMethod();
   *
   * goog.labs.mock.verify(mockObj, times(1));
   * }
   * });
   *
   * For an example implementation, see {@code TimesVerificationMode_}.
   */
  interface VerificationMode {
    /**
     * Returns a description of what this VerificationMode expected.
     */
    describe ( ) : string ;
    /**
     * Returns true if the recorded number of invocations,
     * {@code actualNumberOfInvocations}, meets the expectations of this mode.
     *
     * TODO(user): Have this take in an object which contains the complete
     * call record in order to allow more interesting verifications.
     */
    verify (a : number ) : boolean ;
  }
}
declare module 'goog:goog.labs.mock.verification.VerificationMode' {
  import alias = ಠ_ಠ.clutz.goog.labs.mock.verification.VerificationMode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.image {
  /**
   * Loads a single image.  Useful for preloading images.
   * @param uri URI of the image.
   * @param opt_image If present, instead of creating a new Image instance the function will use the passed Image instance or the result of calling the Image factory respectively. This can be used to control exactly how Image instances are created, for example if they should be created in a particular document element, or have fields that will trigger CORS image fetches.
   */
  function load (uri : string , opt_image ? : Image | ( ( ) => Image ) ) : ಠ_ಠ.clutz.goog.Promise < Image , any > ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.image'): typeof ಠ_ಠ.clutz.goog.labs.net.image;
}
declare module 'goog:goog.labs.net.image' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.image;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * A TestChannel is used during the first part of channel negotiation
   * with the server to create the channel. It helps us determine whether we're
   * behind a buffering proxy.
   */
  class BaseTestChannel extends BaseTestChannel_Instance {
  }
  class BaseTestChannel_Instance implements ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel {
    private noStructuralTyping_: any;
    /**
     * A TestChannel is used during the first part of channel negotiation
     * with the server to create the channel. It helps us determine whether we're
     * behind a buffering proxy.
     * @param channel The channel that owns this test channel.
     * @param channelDebug A WebChannelDebug instance to use for logging.
     */
    constructor (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel , channelDebug : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug ) ;
    /**
     * Aborts the test channel.
     */
    abort ( ) : void ;
    /**
     * Starts the test channel. This initiates connections to the server.
     * @param path The relative uri for the test connection.
     */
    connect (path : string ) : void ;
    correctHostPrefix ( ...a : any [] ) : any ;
    createDataUri ( ...a : any [] ) : any ;
    createXhrIo (hostPrefix : string | null ) : ಠ_ಠ.clutz.goog.net.XhrIo ;
    getBackChannelUri ( ...a : any [] ) : any ;
    getClientProtocol ( ) : string | null ;
    getConnectionState ( ...a : any [] ) : any ;
    getForwardChannelUri ( ...a : any [] ) : any ;
    /**
     * Returns the last status code received for a request.
     */
    getLastStatusCode ( ) : number ;
    isActive ( ) : boolean ;
    /**
     * Returns whether the test channel is closed. The ChannelRequest object expects
     * this method to be implemented on its handler.
     */
    isClosed ( ) : boolean ;
    /**
     * Callback from ChannelRequest that indicates a request has completed.
     * @param req The request object.
     */
    onRequestComplete (req : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest ) : any ;
    /**
     * Callback from ChannelRequest for when new data is received
     * @param req The request object.
     * @param responseText The text of the response.
     */
    onRequestData (req : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest | null , responseText : string ) : any ;
    /**
     * Sets extra HTTP headers to add to all the requests sent to the server.
     * @param extraHeaders The HTTP headers.
     */
    setExtraHeaders (extraHeaders : Object | null ) : void ;
    shouldUseSecondaryDomains ( ) : boolean ;
    testConnectionFailure ( ...a : any [] ) : any ;
    testConnectionFinished ( ...a : any [] ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.BaseTestChannel'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.BaseTestChannel;
}
declare module 'goog:goog.labs.net.webChannel.BaseTestChannel' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.BaseTestChannel;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * Shared interface between Channel and TestChannel to support callbacks
   * between WebChannelBase and BaseTestChannel and between Channel and
   * ChannelRequest.
   */
  interface Channel {
    /**
     * Not needed for testchannel.
     *
     * Allows the handler to override a host prefix provided by the server.  Will
     * be called whenever the channel has received such a prefix and is considering
     * its use.
     * @param serverHostPrefix The host prefix provided by the server.
     */
    correctHostPrefix (a : string | null ) : string | null ;
    /**
     * Not needed for testchannel.
     *
     * Creates a data Uri applying logic for secondary hostprefix, port
     * overrides, and versioning.
     * @param hostPrefix The host prefix.
     * @param path The path on the host (may be absolute or relative).
     * @param opt_overridePort Optional override port.
     */
    createDataUri (a : string | null , b : string , c ? : number ) : ಠ_ಠ.clutz.goog.Uri | null ;
    /**
     * Called when creating an XhrIo object.  Override in a subclass if
     * you need to customize the behavior, for example to enable the creation of
     * XHR's capable of calling a secondary domain. Will also allow calling
     * a secondary domain if withCredentials (CORS) is enabled.
     * @param hostPrefix The host prefix, if we need an XhrIo object capable of calling a secondary domain.
     */
    createXhrIo (a : string | null ) : ಠ_ಠ.clutz.goog.net.XhrIo ;
    /**
     * Not needed for testchannel.
     *
     * Gets the Uri used for the connection that receives data from the server.
     * @param hostPrefix The host prefix.
     * @param path The path on the host.
     */
    getBackChannelUri (a : string | null , b : string ) : ಠ_ಠ.clutz.goog.Uri | null ;
    /**
     * Not needed for testchannel.
     * Gets the result of previous connectivity tests.
     */
    getConnectionState ( ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.ConnectionState ;
    /**
     * Not needed for testchannel.
     *
     * Gets the Uri used for the connection that sends data to the server.
     * @param path The path on the host.
     */
    getForwardChannelUri (a : string ) : ಠ_ಠ.clutz.goog.Uri | null ;
    /**
     * Gets whether this channel is currently active. This is used to determine the
     * length of time to wait before retrying. This call delegates to the handler.
     */
    isActive ( ) : boolean ;
    /**
     * Returns whether the channel is closed
     */
    isClosed ( ) : boolean ;
    /**
     * Callback from ChannelRequest that indicates a request has completed.
     * @param request The request object.
     */
    onRequestComplete (a : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest ) : any ;
    /**
     * Callback from ChannelRequest for when new data is received
     * @param request The request object.
     * @param responseText The text of the response.
     */
    onRequestData (a : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest | null , b : string ) : any ;
    /**
     * Determines whether to use a secondary domain when the server gives us
     * a host prefix. This allows us to work around browser per-domain
     * connection limits.
     *
     * If you need to use secondary domains on different browsers and IE10,
     * you have two choices:
     * 1) If you only care about browsers that support CORS
     * (https://developer.mozilla.org/en-US/docs/HTTP_access_control), you
     * can use {@link #setSupportsCrossDomainXhrs} and set the appropriate
     * CORS response headers on the server.
     * 2) Or, override this method in a subclass, and make sure that those
     * browsers use some messaging mechanism that works cross-domain (e.g
     * iframes and window.postMessage).
     */
    shouldUseSecondaryDomains ( ) : boolean ;
    /**
     * Not needed for testchannel.
     *
     * Callback from TestChannel for when the channel has an error.
     * @param testChannel The TestChannel.
     * @param errorCode The error code of the failure.
     */
    testConnectionFailure (a : ಠ_ಠ.clutz.goog.labs.net.webChannel.BaseTestChannel | null , b : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest.Error ) : any ;
    /**
     * Not needed for testchannel.
     *
     * Callback from TestChannel for when the channel is finished.
     * @param testChannel The TestChannel.
     * @param useChunked Whether we can chunk responses.
     */
    testConnectionFinished (a : ಠ_ಠ.clutz.goog.labs.net.webChannel.BaseTestChannel | null , b : boolean ) : any ;
  }
}
declare module 'goog:goog.labs.net.webChannel.Channel' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * A new ChannelRequest is created for each request to the server.
   */
  class ChannelRequest extends ChannelRequest_Instance {
    /**
     * Convenience factory method.
     * @param channel The channel object that owns this request.
     * @param channelDebug A WebChannelDebug to use for logging.
     * @param opt_sessionId The session id for the channel.
     * @param opt_requestId The request id for this request.
     * @param opt_retryId The retry id for this request.
     */
    static createChannelRequest (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel | null , channelDebug : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug | null , opt_sessionId ? : string , opt_requestId ? : string | number , opt_retryId ? : number ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest ;
    /**
     * Returns a useful error string for debugging based on the specified error
     * code.
     * @param errorCode The error code.
     * @param statusCode The HTTP status code.
     */
    static errorStringFromCode (errorCode : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest.Error | null , statusCode : number ) : string ;
    /**
     * Returns whether XHR streaming is supported on this browser.
     */
    static supportsXhrStreaming ( ) : boolean ;
  }
  class ChannelRequest_Instance {
    private noStructuralTyping_: any;
    /**
     * A new ChannelRequest is created for each request to the server.
     * @param channel The channel that owns this request.
     * @param channelDebug A WebChannelDebug to use for logging.
     * @param opt_sessionId The session id for the channel.
     * @param opt_requestId The request id for this request.
     * @param opt_retryId The retry id for this request.
     */
    constructor (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel | null , channelDebug : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug | null , opt_sessionId ? : string , opt_requestId ? : string | number , opt_retryId ? : number ) ;
    /**
     * Cancels the request no matter what the underlying transport is.
     */
    cancel ( ) : void ;
    /**
     * If the request was not successful, returns the reason.
     */
    getLastError ( ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest.Error | null ;
    /**
     * Returns the status code of the last request.
     */
    getLastStatusCode ( ) : number ;
    /**
     * Returns the data for a post, if this request is a post.
     */
    getPostData ( ) : string | null ;
    /**
     * Returns the request id for this request. Each request has a unique request
     * id and the request IDs are a sequential increasing count.
     */
    getRequestId ( ) : string | number | undefined ;
    /**
     * Returns the time that the request started, if it has started.
     */
    getRequestStartTime ( ) : number | null ;
    /**
     * Returns the session id for this channel.
     */
    getSessionId ( ) : string | undefined ;
    /**
     * Indicates whether the request was successful. Only valid after the handler
     * is called to indicate completion of the request.
     */
    getSuccess ( ) : boolean ;
    /**
     * Returns the XhrIo request object.
     */
    getXhr ( ) : ಠ_ಠ.clutz.goog.net.XhrIo | null ;
    /**
     * Uses an IMG tag or navigator.sendBeacon to send an HTTP get to the server.
     *
     * This is only currently used to terminate the connection, as an IMG tag is
     * the most reliable way to send something to the server while the page
     * is getting torn down.
     *
     * Navigator.sendBeacon is available on Chrome and Firefox as a formal
     * solution to ensure delivery without blocking window close. See
     * https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon
     *
     * For Chrome Apps, sendBeacon is always necessary due to Content Security
     * Policy (CSP) violation of using an IMG tag.
     * @param uri The uri to send a request to.
     */
    sendCloseRequest (uri : ಠ_ಠ.clutz.goog.Uri | null ) : void ;
    /**
     * Sets extra HTTP headers to add to all the requests sent to the server.
     * @param extraHeaders The HTTP headers.
     */
    setExtraHeaders (extraHeaders : Object | null ) : void ;
    /**
     * Sets the throttle for handling onreadystatechange events for the request.
     * @param throttle The throttle in ms.  A value of zero indicates no throttle.
     */
    setReadyStateChangeThrottle (throttle : number ) : void ;
    /**
     * Sets the timeout for a request
     * @param timeout The timeout in MS for when we fail the request.
     */
    setTimeout (timeout : number ) : void ;
    /**
     * Uses XMLHTTP to send an HTTP GET to the server.
     * @param uri The uri of the request.
     * @param decodeChunks Whether to the result is expected to be encoded for chunking and thus requires decoding.
     * @param hostPrefix The host prefix, if we might be using a secondary domain.  Note that it should also be in the URL, adding this won't cause it to be added to the URL.
     * @param opt_noClose Whether to request that the tcp/ip connection should be closed.
     */
    xmlHttpGet (uri : ಠ_ಠ.clutz.goog.Uri | null , decodeChunks : boolean , hostPrefix : string | null , opt_noClose ? : boolean ) : void ;
    /**
     * Uses XMLHTTP to send an HTTP POST to the server.
     * @param uri The uri of the request.
     * @param postData The data for the post body.
     * @param decodeChunks Whether to the result is expected to be encoded for chunking and thus requires decoding.
     */
    xmlHttpPost (uri : ಠ_ಠ.clutz.goog.Uri | null , postData : string , decodeChunks : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest {
  type Error = number ;
  var Error : {
    BAD_DATA : Error ,
    BROWSER_OFFLINE : Error ,
    HANDLER_EXCEPTION : Error ,
    NO_DATA : Error ,
    STATUS : Error ,
    TIMEOUT : Error ,
    UNKNOWN_SESSION_ID : Error ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.ChannelRequest'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest;
}
declare module 'goog:goog.labs.net.webChannel.ChannelRequest' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * The connectivity state of the channel.
   */
  class ConnectionState extends ConnectionState_Instance {
  }
  class ConnectionState_Instance {
    private noStructuralTyping_: any;
    /**
     * The result of checking if there is a buffering proxy in the network.
     * True means the connection is buffered, False means unbuffered,
     * null means that the result is not available.
     */
    bufferingProxyResult : boolean | null ;
    /**
     * Handshake result.
     */
    handshakeResult : string [] | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.ConnectionState'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.ConnectionState;
}
declare module 'goog:goog.labs.net.webChannel.ConnectionState' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.ConnectionState;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * This class represents the state of all forward channel requests.
   */
  class ForwardChannelRequestPool extends ForwardChannelRequestPool_Instance {
  }
  class ForwardChannelRequestPool_Instance {
    private noStructuralTyping_: any;
    /**
     * This class represents the state of all forward channel requests.
     * @param opt_maxPoolSize The maximum pool size.
     */
    constructor (opt_maxPoolSize ? : number ) ;
    /**
     * Adds a new request to the pool.
     * @param req The new channel request.
     */
    addRequest (req : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest ) : void ;
    /**
     * Once we know the client protocol (from the handshake), check if we need
     * enable the request pool accordingly. This is more robust than using
     * browser-internal APIs (specific to Chrome).
     * @param clientProtocol The client protocol
     */
    applyClientProtocol (clientProtocol : string ) : void ;
    /**
     * Clears the pool and cancel all the pending requests.
     */
    cancel ( ) : void ;
    /**
     * Cancels all pending requests and force the completion of channel requests.
     *
     * Need go through the standard onRequestComplete logic to expose the max-retry
     * failure in the standard way.
     * @param onComplete The completion callback.
     */
    forceComplete (onComplete : (a : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest ) => any ) : boolean ;
    getMaxSize ( ) : number ;
    getRequestCount ( ) : number ;
    hasPendingRequest ( ) : boolean ;
    hasRequest (req : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest | null ) : boolean ;
    isFull ( ) : boolean ;
    /**
     * Removes the given request from the pool.
     * @param req The channel request.
     */
    removeRequest (req : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest | null ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.ForwardChannelRequestPool'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.ForwardChannelRequestPool;
}
declare module 'goog:goog.labs.net.webChannel.ForwardChannelRequestPool' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.ForwardChannelRequestPool;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * This WebChannel implementation is branched off goog.net.BrowserChannel
   * for now. Ongoing changes to goog.net.BrowserChannel will be back
   * ported to this implementation as needed.
   */
  class WebChannelBase extends WebChannelBase_Instance {
    /**
     * Maximum number of attempts to connect to the server for back channel
     * requests.
     */
    static BACK_CHANNEL_MAX_RETRIES : number ;
    /**
     * The timeout in milliseconds for a forward channel request.
     */
    static FORWARD_CHANNEL_RETRY_TIMEOUT : number ;
    /**
     * When retrying for an inactive channel, we will multiply the total delay by
     * this number.
     */
    static INACTIVE_CHANNEL_RETRY_FACTOR : number ;
    /**
     * A LogSaver that can be used to accumulate all the debug logs so they
     * can be sent to the server when a problem is detected.
     */
    static LogSaver : Object ;
    /**
     * A guess at a cutoff at which to no longer assume the backchannel is dead
     * when we are slow to receive data. Number in bytes.
     *
     * Assumption: The worst bandwidth we work on is 50 kilobits/sec
     * 50kbits/sec * (1 byte / 8 bits) * 6 sec dead backchannel timeout
     */
    static OUTSTANDING_DATA_BACKCHANNEL_RETRY_CUTOFF : number ;
    /**
     * A number in MS of how long we guess the maxmium amount of time a round trip
     * to the server should take. In the future this could be substituted with a
     * real measurement of the RTT.
     */
    static RTT_ESTIMATE : number ;
  }
  class WebChannelBase_Instance implements ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel {
    private noStructuralTyping_: any;
    /**
     * This WebChannel implementation is branched off goog.net.BrowserChannel
     * for now. Ongoing changes to goog.net.BrowserChannel will be back
     * ported to this implementation as needed.
     * @param opt_options Configuration for the WebChannel instance.
     * @param opt_clientVersion An application-specific version number that is sent to the server when connected.
     * @param opt_conn Previously determined connection conditions.
     */
    constructor (opt_options ? : ಠ_ಠ.clutz.goog.net.WebChannel.Options , opt_clientVersion ? : string , opt_conn ? : ಠ_ಠ.clutz.goog.labs.net.webChannel.ConnectionState ) ;
    /**
     * Starts the channel. This initiates connections to the server.
     * @param testPath The path for the test connection.
     * @param channelPath The path for the channel connection.
     * @param opt_extraParams Extra parameter keys and values to add to the requests.
     * @param opt_oldSessionId Session ID from a previous session.
     * @param opt_oldArrayId The last array ID from a previous session.
     */
    connect (testPath : string , channelPath : string , opt_extraParams ? : Object , opt_oldSessionId ? : string , opt_oldArrayId ? : number ) : void ;
    /**
     * Decides which host prefix should be used, if any.  If there is a handler,
     * allows the handler to validate a host prefix provided by the server, and
     * optionally override it.
     * @param serverHostPrefix The host prefix provided by the server.
     */
    correctHostPrefix (serverHostPrefix : string | null ) : string | null ;
    createDataUri (hostPrefix : string | null , path : string , opt_overridePort ? : number ) : ಠ_ಠ.clutz.goog.Uri | null ;
    createXhrIo (hostPrefix : string | null ) : ಠ_ಠ.clutz.goog.net.XhrIo ;
    /**
     * Disconnects and closes the channel.
     */
    disconnect ( ) : void ;
    /**
     * Returns whether chunked mode is allowed. In certain debugging situations,
     * it's useful for the application to have a way to disable chunked mode for a
     * user.
     */
    getAllowChunkedMode ( ) : boolean ;
    /**
     * Returns whether the channel allows the use of a subdomain. There may be
     * cases where this isn't allowed.
     */
    getAllowHostPrefix ( ) : boolean ;
    getBackChannelMaxRetries ( ) : number ;
    getBackChannelUri (hostPrefix : string | null , path : string ) : ಠ_ಠ.clutz.goog.Uri | null ;
    /**
     * Returns the logger.
     */
    getChannelDebug ( ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug ;
    getConnectionState ( ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.ConnectionState ;
    /**
     * Returns the extra HTTP headers to add to all the requests sent to the server.
     */
    getExtraHeaders ( ) : Object | null ;
    getForwardChannelMaxRetries ( ) : number ;
    getForwardChannelRequestPool ( ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.ForwardChannelRequestPool ;
    getForwardChannelUri (path : string ) : ಠ_ಠ.clutz.goog.Uri | null ;
    /**
     * Returns the handler used for channel callback events.
     */
    getHandler ( ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Handler | null ;
    getLastArrayId ( ) : number ;
    /**
     * Return the last status code received for a request.
     */
    getLastStatusCode ( ) : number ;
    /**
     * Returns the session id of the channel. Only available after the
     * channel has been opened.
     */
    getSessionId ( ) : string ;
    /**
     * Returns the channel state.
     */
    getState ( ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.State ;
    getWireCodec ( ) : Object ;
    /**
     * Returns whether there are outstanding requests servicing the channel.
     */
    hasOutstandingRequests ( ) : boolean ;
    isActive ( ) : boolean ;
    /**
     * Returns whether the channel is buffered or not. This state is valid for
     * querying only after the test connection has completed. This may be
     * queried in the WebChannelBase.okToMakeRequest() callback.
     * A channel may be buffered if the test connection determines that
     * a chunked response could not be sent down within a suitable time.
     */
    isBuffered ( ) : boolean ;
    isClosed ( ) : boolean ;
    onRequestComplete (request : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest ) : any ;
    onRequestData (request : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest | null , responseText : string ) : any ;
    /**
     * Sends a request to the server. The format of the request is a Map data
     * structure of key/value pairs. These maps are then encoded in a format
     * suitable for the wire and then reconstituted as a Map data structure that
     * the server can process.
     * @param map The map to send.
     * @param opt_context The context associated with the map.
     */
    sendMap (map : Object , opt_context ? : Object ) : void ;
    /**
     * Sets whether chunked mode is allowed. In certain debugging situations, it's
     * useful for the application to have a way to disable chunked mode for a user.
     * @param allowChunkedMode Whether chunked mode is allowed.
     */
    setAllowChunkedMode (allowChunkedMode : boolean ) : void ;
    /**
     * Sets whether the channel allows the use of a subdomain. There may be cases
     * where this isn't allowed, for example, logging in with troutboard where
     * using a subdomain causes Apache to force the user to authenticate twice.
     * @param allowHostPrefix Whether a host prefix is allowed.
     */
    setAllowHostPrefix (allowHostPrefix : boolean ) : void ;
    /**
     * Sets the logger.
     * @param channelDebug The channel debug object.
     */
    setChannelDebug (channelDebug : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug ) : void ;
    /**
     * Sets extra HTTP headers to add to all the requests sent to the server.
     * @param extraHeaders The HTTP headers, or null.
     */
    setExtraHeaders (extraHeaders : Object | null ) : void ;
    /**
     * When set to true, this changes the behavior of the forward channel so it
     * will not retry requests; it will fail after one network failure, and if
     * there was already one network failure, the request will fail immediately.
     * @param failFast Whether or not to fail fast.
     */
    setFailFast (failFast : boolean ) : void ;
    /**
     * Sets the maximum number of attempts to connect to the server for forward
     * channel requests.
     * @param retries The maximum number of attempts.
     */
    setForwardChannelMaxRetries (retries : number ) : void ;
    /**
     * Sets the timeout for a forward channel request.
     * @param timeoutMs The timeout in milliseconds.
     */
    setForwardChannelRequestTimeout (timeoutMs : number ) : void ;
    /**
     * Sets the handler used for channel callback events.
     * @param handler The handler to set.
     */
    setHandler (handler : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Handler | null ) : void ;
    /**
     * Sets the throttle for handling onreadystatechange events for the request.
     * @param throttle The throttle in ms.  A value of zero indicates no throttle.
     */
    setReadyStateChangeThrottle (throttle : number ) : void ;
    setRetryDelay (baseDelayMs : number , delaySeedMs : number ) : void ;
    /**
     * Sets whether cross origin requests are supported for the channel.
     *
     * Setting this allows the creation of requests to secondary domains and
     * sends XHRs with the CORS withCredentials bit set to true.
     *
     * In order for cross-origin requests to work, the server will also need to set
     * CORS response headers as per:
     * https://developer.mozilla.org/en-US/docs/HTTP_access_control
     *
     * See {@link goog.net.XhrIo#setWithCredentials}.
     * @param supportCrossDomain Whether cross domain XHRs are supported.
     */
    setSupportsCrossDomainXhrs (supportCrossDomain : boolean ) : void ;
    shouldUseSecondaryDomains ( ) : boolean ;
    testConnectionFailure (testChannel : ಠ_ಠ.clutz.goog.labs.net.webChannel.BaseTestChannel | null , errorCode : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest.Error ) : any ;
    testConnectionFinished (testChannel : ಠ_ಠ.clutz.goog.labs.net.webChannel.BaseTestChannel | null , useChunked : boolean ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase {
  type Error = number ;
  var Error : {
    BAD_DATA : Error ,
    BAD_RESPONSE : Error ,
    LOGGED_OUT : Error ,
    NETWORK : Error ,
    NO_DATA : Error ,
    OK : Error ,
    REQUEST_FAILED : Error ,
    STOP : Error ,
    UNKNOWN_SESSION_ID : Error ,
  };
  class Handler extends Handler_Instance {
  }
  class Handler_Instance {
    private noStructuralTyping_: any;
    /**
     * Called by the channel if enumeration of the map throws an exception.
     * @param channel The channel.
     * @param map The map that can't be enumerated.
     */
    badMapError (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null , map : Object | null ) : void ;
    /**
     * Indicates the WebChannel is closed. Also notifies about which maps,
     * if any, that may not have been delivered to the server.
     * @param channel The channel.
     * @param opt_pendingMaps The array of pending maps, which may or may not have been delivered to the server.
     * @param opt_undeliveredMaps The array of undelivered maps, which have definitely not been delivered to the server.
     */
    channelClosed (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null , opt_pendingMaps ? : ( ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap | null ) [] | null , opt_undeliveredMaps ? : ( ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap | null ) [] | null ) : void ;
    /**
     * Indicates an error occurred on the WebChannel.
     * @param channel The channel.
     * @param error The error code.
     */
    channelError (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null , error : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Error ) : void ;
    /**
     * New input is available for the application to process.
     * @param channel The channel.
     * @param array The data array.
     */
    channelHandleArray (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null , array : any [] | null ) : void ;
    /**
     * Callback handler for when a batch of response arrays is received from the
     * server. When null, batched dispatching is disabled.
     */
    channelHandleMultipleArrays : ( (a : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase , b : any [] [] ) => any ) | null ;
    /**
     * Indicates the WebChannel has successfully negotiated with the server
     * and can now send and receive data.
     * @param channel The channel.
     */
    channelOpened (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null ) : void ;
    /**
     * Indicates maps were successfully sent on the channel.
     * @param channel The channel.
     * @param deliveredMaps The array of maps that have been delivered to the server. This is a direct reference to the internal array, so a copy should be made if the caller desires a reference to the data.
     */
    channelSuccess (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null , deliveredMaps : ( ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap | null ) [] | null ) : void ;
    /**
     * Allows the handler to override a host prefix provided by the server. Will
     * be called whenever the channel has received such a prefix and is considering
     * its use.
     * @param serverHostPrefix The host prefix provided by the server.
     */
    correctHostPrefix (serverHostPrefix : string | null ) : string | null ;
    /**
     * Gets any parameters that should be added at the time another connection is
     * made to the server.
     * @param channel The channel.
     */
    getAdditionalParams (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null ) : Object ;
    /**
     * Gets the URI of an image that can be used to test network connectivity.
     * @param channel The channel.
     */
    getNetworkTestImageUri (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null ) : ಠ_ಠ.clutz.goog.Uri | null ;
    /**
     * Gets whether this channel is currently active. This is used to determine the
     * length of time to wait before retrying.
     * @param channel The channel.
     */
    isActive (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null ) : boolean ;
    /**
     * Whether it's okay to make a request to the server. A handler can return
     * false if the channel should fail. For example, if the user has logged out,
     * the handler may want all requests to fail immediately.
     * @param channel The channel.
     */
    okToMakeRequest (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Error ;
  }
  type State = number ;
  var State : {
    CLOSED : State ,
    INIT : State ,
    OPENED : State ,
    OPENING : State ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.WebChannelBase'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase;
}
declare module 'goog:goog.labs.net.webChannel.WebChannelBase' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * Implementation of {@link goog.net.WebChannelTransport} with
   * {@link goog.labs.net.webChannel.WebChannelBase} as the underlying channel
   * implementation.
   */
  class WebChannelBaseTransport extends WebChannelBaseTransport_Instance {
  }
  class WebChannelBaseTransport_Instance implements ಠ_ಠ.clutz.goog.net.WebChannelTransport {
    private noStructuralTyping_: any;
    createWebChannel (url : string , opt_options ? : ಠ_ಠ.clutz.goog.net.WebChannel.Options ) : ಠ_ಠ.clutz.goog.net.WebChannel ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBaseTransport {
  class Channel extends Channel_Instance {
  }
  class Channel_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance implements ಠ_ಠ.clutz.goog.net.WebChannel {
    /**
     * Implementation of the {@link goog.net.WebChannel} interface.
     * @param url The URL path for the new WebChannel instance.
     * @param opt_options Configuration for the new WebChannel instance.
     */
    constructor (url : string , opt_options ? : ಠ_ಠ.clutz.goog.net.WebChannel.Options ) ;
    close ( ) : void ;
    disposeInternal ( ) : void ;
    getRuntimeProperties ( ) : ಠ_ಠ.clutz.goog.net.WebChannel.RuntimeProperties ;
    /**
     * Test path is always set to "/url/test".
     */
    open ( ) : void ;
    /**
     * The WebChannelBase only supports object types.
     * @param message The message to send.
     */
    send (message : ArrayBuffer | Blob | { [ key: string ]: string } | any [] ) : any ;
  }
  class ChannelProperties extends ChannelProperties_Instance {
  }
  class ChannelProperties_Instance implements ಠ_ಠ.clutz.goog.net.WebChannel.RuntimeProperties {
    private noStructuralTyping_: any;
    /**
     * Implementation of the {@link goog.net.WebChannel.RuntimeProperties}.
     * @param channel The underlying channel object.
     */
    constructor (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase ) ;
    ackCommit ( ...a : any [] ) : any ;
    commit ( ...a : any [] ) : any ;
    getConcurrentRequestLimit ( ) : number ;
    getLastStatusCode ( ) : number ;
    getNonAckedMessageCount ( ...a : any [] ) : any ;
    isSpdyEnabled ( ) : boolean ;
    onCommit ( ...a : any [] ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.WebChannelBaseTransport'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBaseTransport;
}
declare module 'goog:goog.labs.net.webChannel.WebChannelBaseTransport' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBaseTransport;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * Logs and keeps a buffer of debugging info for the Channel.
   */
  class WebChannelDebug extends WebChannelDebug_Instance {
  }
  class WebChannelDebug_Instance {
    private noStructuralTyping_: any;
    /**
     * Logs that the browser went offline during the lifetime of a request.
     * @param url The URL being requested.
     */
    browserOfflineResponse (url : ಠ_ಠ.clutz.goog.Uri | null ) : void ;
    /**
     * Logs a debug message.
     * @param text The message.
     */
    debug (text : string ) : void ;
    /**
     * Logs an exception
     * @param e The error or error event.
     * @param opt_msg The optional message, defaults to 'Exception'.
     */
    dumpException (e : GlobalError | null , opt_msg ? : string ) : void ;
    /**
     * Gets the logger used by this ChannelDebug.
     */
    getLogger ( ) : ಠ_ಠ.clutz.goog.debug.Logger | null ;
    /**
     * Logs an info message.
     * @param text The message.
     */
    info (text : string ) : void ;
    /**
     * Logs a severe message.
     * @param text The message.
     */
    severe (text : string ) : void ;
    /**
     * Logs a request timeout.
     * @param uri The uri that timed out.
     */
    timeoutResponse (uri : ಠ_ಠ.clutz.goog.Uri | null ) : void ;
    /**
     * Logs a warning message.
     * @param text The message.
     */
    warning (text : string ) : void ;
    /**
     * Logs an XmlHttp request..
     * @param verb The request type (GET/POST).
     * @param uri The request destination.
     * @param id The request id.
     * @param attempt Which attempt # the request was.
     * @param postData The data posted in the request.
     */
    xmlHttpChannelRequest (verb : string , uri : ಠ_ಠ.clutz.goog.Uri | null , id : string | number | undefined , attempt : number , postData : string | null ) : void ;
    /**
     * Logs the meta data received from an XmlHttp request.
     * @param verb The request type (GET/POST).
     * @param uri The request destination.
     * @param id The request id.
     * @param attempt Which attempt # the request was.
     * @param readyState The ready state.
     * @param statusCode The HTTP status code.
     */
    xmlHttpChannelResponseMetaData (verb : string , uri : ಠ_ಠ.clutz.goog.Uri | null , id : string | number | undefined , attempt : number , readyState : ಠ_ಠ.clutz.goog.net.XmlHttp.ReadyState , statusCode : number ) : void ;
    /**
     * Logs the response data received from an XmlHttp request.
     * @param id The request id.
     * @param responseText The response text.
     * @param opt_desc Optional request description.
     */
    xmlHttpChannelResponseText (id : string | number | undefined , responseText : string | null , opt_desc ? : string | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.WebChannelDebug'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug;
}
declare module 'goog:goog.labs.net.webChannel.WebChannelDebug' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * The interface class.
   */
  interface Wire {
  }
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire {
  var LATEST_CHANNEL_VERSION : number ;
  class QueuedMap extends QueuedMap_Instance {
  }
  class QueuedMap_Instance {
    private noStructuralTyping_: any;
    /**
     * Simple container class for a (mapId, map) pair.
     * @param mapId The id for this map.
     * @param map The map itself.
     * @param opt_context The context associated with the map.
     */
    constructor (mapId : number , map : Object , opt_context ? : Object ) ;
    /**
     * The context for the map.
     */
    context : Object | null ;
    /**
     * The map itself.
     */
    map : Object ;
    /**
     * The id for this map.
     */
    mapId : number ;
  }
}
declare module 'goog:goog.labs.net.webChannel.Wire' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * The v8 codec class.
   */
  class WireV8 extends WireV8_Instance {
  }
  class WireV8_Instance {
    private noStructuralTyping_: any;
    /**
     * Decodes a standalone message received from the wire. May throw exception
     * if text is ill-formatted.
     *
     * Must be valid JSON as it is insecure to use eval() to decode JS literals;
     * and eval() is disallowed in Chrome apps too.
     *
     * Invalid JS literals include null array elements, quotas etc.
     * @param messageText The string content as received from the wire.
     */
    decodeMessage (messageText : string ) : any ;
    /**
     * Encodes a standalone message into the wire format.
     *
     * May throw exception if the message object contains any invalid elements.
     * @param message The message data. V8 only support JS objects (or Map).
     * @param buffer The text buffer to write the message to.
     * @param opt_prefix The prefix for each field of the object.
     */
    encodeMessage (message : Object , buffer : string [] , opt_prefix ? : string ) : void ;
    /**
     * Encodes all the buffered messages of the forward channel.
     * @param messageQueue The message data. V8 only support JS objects.
     * @param count The number of messages to be encoded.
     * @param badMapHandler Callback for bad messages.
     */
    encodeMessageQueue (messageQueue : ( ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap | null ) [] , count : number , badMapHandler : ( (a : Object ) => any ) | null ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.WireV8'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.WireV8;
}
declare module 'goog:goog.labs.net.webChannel.WireV8' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.WireV8;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.netUtils {
  /**
   * Default timeout to allow for URI pings.
   */
  var NETWORK_TIMEOUT : number ;
  /**
   * Test loading the given image.
   * @param url URL to the image.
   * @param timeout Milliseconds before giving up.
   * @param callback Function to call with results.
   */
  function testLoadImage (url : string , timeout : number , callback : (a : boolean ) => any ) : void ;
  /**
   * Test loading the given image, retrying if necessary.
   * @param url URL to the image.
   * @param timeout Milliseconds before giving up.
   * @param callback Function to call with results.
   * @param retries The number of times to retry.
   * @param opt_pauseBetweenRetriesMS Optional number of milliseconds between retries - defaults to 0.
   */
  function testLoadImageWithRetries (url : string , timeout : number , callback : (a : boolean ) => any , retries : number , opt_pauseBetweenRetriesMS ? : number ) : void ;
  /**
   * Pings the network with an image URI to check if an error is a server error
   * or user's network error.
   *
   * The caller needs to add a 'rand' parameter to make sure the response is
   * not fulfilled by browser cache.
   * @param callback The function to call back with results.
   * @param opt_imageUri The URI (of an image) to use for the network test.
   */
  function testNetwork (callback : (a : boolean ) => any , opt_imageUri ? : ಠ_ಠ.clutz.goog.Uri | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.netUtils'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.netUtils;
}
declare module 'goog:goog.labs.net.webChannel.netUtils' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.netUtils;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
  /**
   * Returns the singleton event target for stat events.
   */
  function getStatEventTarget ( ) : ಠ_ಠ.clutz.goog.events.EventTarget | null ;
  /**
   * Notify the channel that a particular fine grained network event has occurred.
   * Should be considered package-private.
   * @param reachabilityType The reachability event type.
   */
  function notifyServerReachabilityEvent (reachabilityType : ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachability ) : void ;
  /**
   * Helper function to call the stat event callback.
   * @param stat The stat.
   */
  function notifyStatEvent (stat : ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Stat ) : void ;
  /**
   * Helper function to notify listeners about POST request performance.
   * @param size Number of characters in the POST data.
   * @param rtt The amount of time from POST start to response.
   * @param retries The number of times the POST had to be retried.
   */
  function notifyTimingEvent (size : number , rtt : number , retries : number ) : void ;
  /**
   * Helper function to call the end hook
   */
  function onEndExecution ( ) : void ;
  /**
   * Helper function to call the start hook
   */
  function onStartExecution ( ) : void ;
  /**
   * Allows the application to set an execution hooks for when a channel
   * stops processing requests. This is useful to track timing or logging
   * special information. The function takes no parameters and return void.
   * @param endHook The function for the end hook.
   */
  function setEndThreadExecutionHook (endHook : ( ( ...a : any [] ) => any ) | null ) : void ;
  /**
   * Allows the application to set an execution hooks for when a channel
   * starts processing requests. This is useful to track timing or logging
   * special information. The function takes no parameters and return void.
   * @param startHook The function for the start hook.
   */
  function setStartThreadExecutionHook (startHook : ( ( ...a : any [] ) => any ) | null ) : void ;
  /**
   * Wrapper around SafeTimeout which calls the start and end execution hooks
   * with a try...finally block.
   * @param fn The callback function.
   * @param ms The time in MS for the timer.
   */
  function setTimeout (fn : ( ( ...a : any [] ) => any ) | null , ms : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.requestStats'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats;
}
declare module 'goog:goog.labs.net.webChannel.requestStats' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Event {
}
declare module 'goog:goog.labs.net.webChannel.requestStats.Event' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Event;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
  /**
   * Types of events which reveal information about the reachability of the
   * server.
   */
  type ServerReachability = number ;
  var ServerReachability : {
    BACK_CHANNEL_ACTIVITY : ServerReachability ,
    REQUEST_FAILED : ServerReachability ,
    REQUEST_MADE : ServerReachability ,
    REQUEST_SUCCEEDED : ServerReachability ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.requestStats.ServerReachability'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachability;
}
declare module 'goog:goog.labs.net.webChannel.requestStats.ServerReachability' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachability;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
  /**
   * Event class for SERVER_REACHABILITY_EVENT.
   */
  class ServerReachabilityEvent extends ServerReachabilityEvent_Instance {
  }
  class ServerReachabilityEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * Event class for SERVER_REACHABILITY_EVENT.
     * @param target The stat event target for the channel.
     * @param reachabilityType The reachability event type.
     */
    constructor (target : ಠ_ಠ.clutz.goog.events.EventTarget | null , reachabilityType : ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachability ) ;
    reachabilityType : ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachability ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.requestStats.ServerReachabilityEvent'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachabilityEvent;
}
declare module 'goog:goog.labs.net.webChannel.requestStats.ServerReachabilityEvent' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachabilityEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
  /**
   * Enum that identifies events for statistics that are interesting to track.
   */
  type Stat = number ;
  var Stat : {
    BACKCHANNEL_DEAD : Stat ,
    BACKCHANNEL_MISSING : Stat ,
    BROWSER_OFFLINE : Stat ,
    CONNECT_ATTEMPT : Stat ,
    ERROR_NETWORK : Stat ,
    ERROR_OTHER : Stat ,
    NOPROXY : Stat ,
    PROXY : Stat ,
    REQUEST_BAD_DATA : Stat ,
    REQUEST_BAD_STATUS : Stat ,
    REQUEST_INCOMPLETE_DATA : Stat ,
    REQUEST_NO_DATA : Stat ,
    REQUEST_TIMEOUT : Stat ,
    REQUEST_UNKNOWN_SESSION_ID : Stat ,
    TEST_STAGE_ONE_FAILED : Stat ,
    TEST_STAGE_ONE_START : Stat ,
    TEST_STAGE_TWO_DATA_BOTH : Stat ,
    TEST_STAGE_TWO_DATA_ONE : Stat ,
    TEST_STAGE_TWO_DATA_TWO : Stat ,
    TEST_STAGE_TWO_FAILED : Stat ,
    TEST_STAGE_TWO_START : Stat ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.requestStats.Stat'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Stat;
}
declare module 'goog:goog.labs.net.webChannel.requestStats.Stat' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Stat;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
  /**
   * Event class for STAT_EVENT.
   */
  class StatEvent extends StatEvent_Instance {
  }
  class StatEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * Event class for STAT_EVENT.
     * @param eventTarget The stat event target for the channel.
     * @param stat The stat.
     */
    constructor (eventTarget : ಠ_ಠ.clutz.goog.events.EventTarget | null , stat : ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Stat ) ;
    /**
     * The stat
     */
    stat : ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Stat ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.requestStats.StatEvent'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.StatEvent;
}
declare module 'goog:goog.labs.net.webChannel.requestStats.StatEvent' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.StatEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
  /**
   * Event class for requestStats.Event.TIMING_EVENT
   */
  class TimingEvent extends TimingEvent_Instance {
  }
  class TimingEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * Event class for requestStats.Event.TIMING_EVENT
     * @param target The stat event target for the channel.
     * @param size The number of characters in the POST data.
     * @param rtt The total round trip time from POST to response in MS.
     * @param retries The number of times the POST had to be retried.
     */
    constructor (target : ಠ_ಠ.clutz.goog.events.EventTarget | null , size : number , rtt : number , retries : number ) ;
    retries : number ;
    rtt : number ;
    size : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.webChannel.requestStats.TimingEvent'): typeof ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.TimingEvent;
}
declare module 'goog:goog.labs.net.webChannel.requestStats.TimingEvent' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.TimingEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * The Content-Type HTTP header name.
   */
  var CONTENT_TYPE_HEADER : string ;
  /**
   * The Content-Type HTTP header value for a url-encoded form.
   */
  var FORM_CONTENT_TYPE : string ;
  /**
   * Sends a get request, returning a promise that will be resolved
   * with the response text once the request completes.
   * @param url The URL to request.
   * @param opt_options Configuration options for the request.
   */
  function get (url : string , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < string , any > ;
  /**
   * Sends a get request, returning a promise that will be resolved with the
   * response as a Blob.
   * @param url The URL to request.
   * @param opt_options Configuration options for the request. The responseType will be overwritten to 'blob' if it was set.
   */
  function getBlob (url : string , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < Blob , any > ;
  /**
   * Sends a get request, returning a promise that will be resolved with the
   * response as an array of bytes.
   *
   * Supported in all XMLHttpRequest level 2 browsers, as well as IE9. IE8 and
   * earlier are not supported.
   * @param url The URL to request.
   * @param opt_options Configuration options for the request. The responseType will be overwritten to 'arraybuffer' if it was set.
   */
  function getBytes (url : string , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < Uint8Array | number [] , any > ;
  /**
   * Sends a get request, returning a promise that will be resolved with
   * the parsed response text once the request completes.
   * @param url The URL to request.
   * @param opt_options Configuration options for the request.
   */
  function getJson (url : string , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < Object | null , any > ;
  /**
   * Sends a post request, returning a promise that will be resolved
   * with the response text once the request completes.
   * @param url The URL to request.
   * @param data The body of the post request.
   * @param opt_options Configuration options for the request.
   */
  function post (url : string , data : ArrayBuffer | null | Blob | Document | FormData | string | undefined , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < string , any > ;
  /**
   * Sends a post request, returning a promise that will be resolved with
   * the parsed response text once the request completes.
   * @param url The URL to request.
   * @param data The body of the post request.
   * @param opt_options Configuration options for the request.
   */
  function postJson (url : string , data : ArrayBuffer | null | Blob | Document | FormData | string | undefined , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < Object | null , any > ;
  /**
   * Sends a request, returning a promise that will be resolved
   * with the XHR object once the request completes.
   *
   * If content type hasn't been set in opt_options headers, and hasn't been
   * explicitly set to null, default to form-urlencoded/UTF8 for POSTs.
   * @param method The HTTP method for the request.
   * @param url The URL to request.
   * @param data The body of the post request.
   * @param opt_options Configuration options for the request.
   */
  function send (method : string , url : string , data : ArrayBuffer | null | Blob | Document | FormData | string | undefined , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < ಠ_ಠ.clutz.goog.net.XhrLike | XMLHttpRequest , any > ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.xhr'): typeof ಠ_ಠ.clutz.goog.labs.net.xhr;
}
declare module 'goog:goog.labs.net.xhr' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.xhr;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * Generic error that may occur during a request.
   */
  class Error extends Error_Instance {
  }
  class Error_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
    /**
     * Generic error that may occur during a request.
     * @param message The error message.
     * @param url The URL that was being requested.
     * @param request The XHR that failed.
     */
    constructor (message : string , url : string , request : ಠ_ಠ.clutz.goog.net.XhrLike | XMLHttpRequest ) ;
    /**
     * The URL that was requested.
     */
    url : string ;
    /**
     * The XMLHttpRequest corresponding with the failed request.
     */
    xhr : ಠ_ಠ.clutz.goog.net.XhrLike | XMLHttpRequest ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.xhr.Error'): typeof ಠ_ಠ.clutz.goog.labs.net.xhr.Error;
}
declare module 'goog:goog.labs.net.xhr.Error' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.xhr.Error;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * Class for HTTP errors.
   */
  class HttpError extends HttpError_Instance {
  }
  class HttpError_Instance extends ಠ_ಠ.clutz.goog.labs.net.xhr.Error_Instance {
    /**
     * Class for HTTP errors.
     * @param status The HTTP status code of the response.
     * @param url The URL that was being requested.
     * @param request The XHR that failed.
     */
    constructor (status : number , url : string , request : ಠ_ಠ.clutz.goog.net.XhrLike | XMLHttpRequest ) ;
    /**
     * The HTTP status code for the error.
     */
    status : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.xhr.HttpError'): typeof ಠ_ಠ.clutz.goog.labs.net.xhr.HttpError;
}
declare module 'goog:goog.labs.net.xhr.HttpError' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.xhr.HttpError;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * Configuration options for an XMLHttpRequest.
   * - headers: map of header key/value pairs.
   * - timeoutMs: number of milliseconds after which the request will be timed
   * out by the client. Default is to allow the browser to handle timeouts.
   * - withCredentials: whether user credentials are to be included in a
   * cross-origin request. See:
   * http://www.w3.org/TR/XMLHttpRequest/#the-withcredentials-attribute
   * - mimeType: allows the caller to override the content-type and charset for
   * the request. See:
   * http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-overridemimetype
   * - responseType: may be set to change the response type to an arraybuffer or
   * blob for downloading binary data. See:
   * http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-responsetype]
   * - xmlHttpFactory: allows the caller to override the factory used to create
   * XMLHttpRequest objects.
   * - xssiPrefix: Prefix used for protecting against XSSI attacks, which should
   * be removed before parsing the response as JSON.
   */
  type Options = { headers ? : { [ /* warning: coerced from ? */ key: string ]: string } | null , mimeType ? : string , responseType ? : ಠ_ಠ.clutz.goog.labs.net.xhr.ResponseType , timeoutMs ? : number , withCredentials ? : boolean , xmlHttpFactory ? : ಠ_ಠ.clutz.goog.net.XmlHttpFactory | null , xssiPrefix ? : string } ;
}
declare module 'goog:goog.labs.net.xhr.Options' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.xhr.Options;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * Defines the types that are allowed as post data.
   */
  type PostData = ArrayBuffer | null | Blob | Document | FormData | string | undefined ;
}
declare module 'goog:goog.labs.net.xhr.PostData' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.xhr.PostData;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * Supported data types for the responseType field.
   * See: http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-response
   */
  type ResponseType = string ;
  var ResponseType : {
    ARRAYBUFFER : ResponseType ,
    BLOB : ResponseType ,
    DOCUMENT : ResponseType ,
    JSON : ResponseType ,
    TEXT : ResponseType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.xhr.ResponseType'): typeof ಠ_ಠ.clutz.goog.labs.net.xhr.ResponseType;
}
declare module 'goog:goog.labs.net.xhr.ResponseType' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.xhr.ResponseType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * Class for Timeout errors.
   */
  class TimeoutError extends TimeoutError_Instance {
  }
  class TimeoutError_Instance extends ಠ_ಠ.clutz.goog.labs.net.xhr.Error_Instance {
    /**
     * Class for Timeout errors.
     * @param url The URL that timed out.
     * @param request The XHR that failed.
     */
    constructor (url : string , request : ಠ_ಠ.clutz.goog.net.XhrLike | XMLHttpRequest ) ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.net.xhr.TimeoutError'): typeof ಠ_ಠ.clutz.goog.labs.net.xhr.TimeoutError;
}
declare module 'goog:goog.labs.net.xhr.TimeoutError' {
  import alias = ಠ_ಠ.clutz.goog.labs.net.xhr.TimeoutError;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$labs$promise {
  /**
   * Executes an ES6 generator function that may yield Promises, blocking after
   * each Promise until it settles.  Within the generator, the value of each
   * 'yield' expression becomes the resolved value of the yielded promise.
   *
   * If the generator function throws an exception or yields a rejected promise,
   * execution stops, and the promise returned by this function is rejected.
   *
   * A typical call uses generator function syntax:
   *
   * goog.labs.promise.run(function*() {
   * console.log('about to start waiting');
   * while (needsToWait()) {
   * // Wait 10 seconds.
   * yield goog.Timer.promise(10000);
   * console.log('still waiting...');
   * }
   * }).then(() => {
   * console.log('done waiting');
   * });
   *
   * This function can also be used to simplify asynchronous code:
   *
   * goog.labs.promise.run(function*()) {
   * var x = yield somethingThatReturnsAPromise();
   * var y = yield somethingElseThatReturnsAPromise();
   * return x + y;
   * }).then(sum => {
   * console.log('The sum is:', sum);
   * });
   * @param generatorFunc A function which is called immediately and returns a generator.
   * @param opt_context The context in which generatorFunc should be called.
   */
  function run < CONTEXT , TYPE > (generatorFunc : ( ) => TYPE , opt_context ? : CONTEXT ) : ಠ_ಠ.clutz.goog.Promise < TYPE , any > ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'module$exports$goog$labs$promise'): typeof ಠ_ಠ.clutz.module$exports$goog$labs$promise;
}
declare module 'goog:goog.labs.promise' {
  import alias = ಠ_ಠ.clutz.module$exports$goog$labs$promise;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.pubsub {
  /**
   * Topic-based publish/subscribe messaging implementation that provides
   * communication between browsing contexts that share the same origin.
   *
   * Wrapper around PubSub that utilizes localStorage to broadcast publications to
   * all browser windows with the same origin as the publishing context. This
   * allows for topic-based publish/subscribe implementation of strings shared by
   * all browser contexts that share the same origin.
   *
   * Delivery is guaranteed on all browsers except IE8 where topics expire after a
   * timeout. Publishing of a topic within a callback function provides no
   * guarantee on ordering in that there is a possibility that separate origin
   * contexts may see topics in a different order.
   *
   * This class is not secure and in certain cases (e.g., a browser crash) data
   * that is published can persist in localStorage indefinitely. Do not use this
   * class to communicate private or confidential information.
   *
   * On IE8, localStorage is shared by the http and https origins. An attacker
   * could possibly leverage this to publish to the secure origin.
   *
   * goog.labs.pubsub.BroadcastPubSub wraps an instance of PubSub rather than
   * subclassing because the base PubSub class allows publishing of arbitrary
   * objects.
   *
   * Special handling is done for the IE8 browsers. See the IE8_EVENTS_KEY_
   * constant and the {@code publish} function for more information.
   */
  class BroadcastPubSub extends BroadcastPubSub_Instance {
  }
  class BroadcastPubSub_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Clears the subscription list for a topic, or all topics if unspecified.
     * @param opt_topic Topic to clear (all topics if unspecified).
     */
    clear (opt_topic ? : string ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns the number of subscriptions to the given topic (or all topics if
     * unspecified). This number will not change while publishing any messages.
     * @param opt_topic The topic (all topics if unspecified).
     */
    getCount (opt_topic ? : string ) : number ;
    /**
     * Publishes a message to a topic. Remote subscriptions in other tabs/windows
     * are dispatched via local storage events. Local subscriptions are called
     * asynchronously via Timer event in order to simulate remote behavior locally.
     * @param topic Topic to publish to.
     * @param var_args String arguments that are applied to each subscription function.
     */
    publish (topic : string ,  ...var_args : ( string | undefined ) [] ) : void ;
    /**
     * Subscribes a function to a topic. The function is invoked as a method on the
     * given {@code opt_context} object, or in the global scope if no context is
     * specified. Subscribing the same function to the same topic multiple times
     * will result in multiple function invocations while publishing. Returns a
     * subscription key that can be used to unsubscribe the function from the topic
     * via {@link #unsubscribeByKey}.
     * @param topic Topic to subscribe to.
     * @param fn Function to be invoked when a message is published to the given topic.
     * @param opt_context Object in whose context the function is to be called (the global scope if none).
     */
    subscribe (topic : string , fn : ( ( ...a : any [] ) => any ) | null , opt_context ? : Object | null ) : number ;
    /**
     * Subscribes a single-use function to a topic. The function is invoked as a
     * method on the given {@code opt_context} object, or in the global scope if no
     * context is specified, and is then unsubscribed. Returns a subscription key
     * that can be used to unsubscribe the function from the topic via {@link
     * #unsubscribeByKey}.
     * @param topic Topic to subscribe to.
     * @param fn Function to be invoked once and then unsubscribed when a message is published to the given topic.
     * @param opt_context Object in whose context the function is to be called (the global scope if none).
     */
    subscribeOnce (topic : string , fn : ( ( ...a : any [] ) => any ) | null , opt_context ? : Object | null ) : number ;
    /**
     * Unsubscribes a function from a topic. Only deletes the first match found.
     * Returns a Boolean indicating whether a subscription was removed.
     * @param topic Topic to unsubscribe from.
     * @param fn Function to unsubscribe.
     * @param opt_context Object in whose context the function was to be called (the global scope if none).
     */
    unsubscribe (topic : string , fn : ( ( ...a : any [] ) => any ) | null , opt_context ? : Object | null ) : boolean ;
    /**
     * Removes a subscription based on the key returned by {@link #subscribe}. No-op
     * if no matching subscription is found. Returns a Boolean indicating whether a
     * subscription was removed.
     * @param key Subscription key.
     */
    unsubscribeByKey (key : number ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.pubsub.BroadcastPubSub'): typeof ಠ_ಠ.clutz.goog.labs.pubsub.BroadcastPubSub;
}
declare module 'goog:goog.labs.pubsub.BroadcastPubSub' {
  import alias = ಠ_ಠ.clutz.goog.labs.pubsub.BroadcastPubSub;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.storage {
  /**
   * Provides a storage with bounded number of elements, expiring keys and
   * a collection method.
   */
  class BoundedCollectableStorage extends BoundedCollectableStorage_Instance {
  }
  class BoundedCollectableStorage_Instance extends ಠ_ಠ.clutz.goog.storage.CollectableStorage_Instance {
    /**
     * Provides a storage with bounded number of elements, expiring keys and
     * a collection method.
     * @param mechanism The underlying storage mechanism.
     * @param maxItems Maximum number of items in storage.
     */
    constructor (mechanism : ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism , maxItems : number ) ;
    /**
     * Cleans up the storage by removing expired keys.
     * @param opt_strict Also remove invalid keys.
     */
    collect (opt_strict ? : boolean ) : void ;
    /**
     * Ensures that we keep only maxItems number of items in a local storage.
     * @param opt_skipExpired skip removing expired items first.
     * @param opt_strict Also remove invalid keys.
     */
    collectOversize (opt_skipExpired ? : boolean , opt_strict ? : boolean ) : void ;
    /**
     * Remove an item from the data storage.
     * @param key The key to remove.
     */
    remove (key : string ) : void ;
    /**
     * Set an item in the storage.
     * @param key The key to set.
     * @param value The value to serialize to a string and save.
     * @param opt_expiration The number of miliseconds since epoch (as in goog.now()) when the value is to expire. If the expiration time is not provided, the value will persist as long as possible.
     */
    set (key : string , value : any , opt_expiration ? : number ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.storage.BoundedCollectableStorage'): typeof ಠ_ಠ.clutz.goog.labs.storage.BoundedCollectableStorage;
}
declare module 'goog:goog.labs.storage.BoundedCollectableStorage' {
  import alias = ಠ_ಠ.clutz.goog.labs.storage.BoundedCollectableStorage;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.structs {
  /**
   * Creates a new map.
   */
  class Map extends Map_Instance {
  }
  class Map_Instance {
    private noStructuralTyping_: any;
    /**
     * Adds the content of the map to this map. If a new entry uses a key
     * that already exists in this map, the existing key is replaced.
     * @param map The map to add.
     */
    addAll (map : ಠ_ಠ.clutz.goog.labs.structs.Map ) : void ;
    /**
     * Clears the map to the initial state.
     */
    clear ( ) : void ;
    /**
     * Clones this map.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.labs.structs.Map ;
    containsKey (key : string ) : boolean ;
    /**
     * Whether the map contains the given value. The comparison is done
     * using !== comparator. Also returns true if the passed value is NaN
     * and a NaN value exists in the map.
     * @param value Value to check.
     */
    containsValue (value : any ) : boolean ;
    /**
     * Gets the value for the given key.
     * @param key The key whose value we want to retrieve.
     * @param opt_default The default value to return if the key does not exist in the map, default to undefined.
     */
    get (key : string , opt_default ? : any ) : any ;
    getCount ( ) : number ;
    getEntries ( ) : ( any [] | null ) [] ;
    getKeys ( ) : string [] ;
    getValues ( ) : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ;
    isEmpty ( ) : boolean ;
    /**
     * Removes the map entry with the given key.
     * @param key The key to remove.
     */
    remove (key : string ) : boolean ;
    /**
     * Adds the (key, value) pair, overriding previous entry with the same
     * key, if any.
     * @param key The key.
     * @param value The value.
     */
    set (key : string , value : any ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.labs.structs.Map {
  type BrowserFeature = boolean ;
  var BrowserFeature : {
    OBJECT_CREATE_SUPPORTED : BrowserFeature ,
    OBJECT_KEYS_SUPPORTED : BrowserFeature ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.structs.Map'): typeof ಠ_ಠ.clutz.goog.labs.structs.Map;
}
declare module 'goog:goog.labs.structs.Map' {
  import alias = ಠ_ಠ.clutz.goog.labs.structs.Map;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.structs {
  /**
   * Creates a new multimap.
   */
  class Multimap extends Multimap_Instance {
  }
  class Multimap_Instance {
    private noStructuralTyping_: any;
    /**
     * Adds the given (key, value) pair to the map. The (key, value) pair
     * is guaranteed to be added.
     * @param key The key to add.
     * @param value The value to add.
     */
    add (key : string , value : any ) : void ;
    /**
     * Adds the contents of the given map/multimap to this multimap.
     * @param map The map to add.
     */
    addAllFromMultimap (map : ಠ_ಠ.clutz.goog.labs.structs.Map | ಠ_ಠ.clutz.goog.labs.structs.Multimap ) : void ;
    /**
     * Stores a collection of values to the given key. Does not replace
     * existing (key, value) pairs.
     * @param key The key to add.
     * @param values The values to add.
     */
    addAllValues (key : string , values : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : void ;
    /**
     * Clears the multimap.
     */
    clear ( ) : void ;
    /**
     * Clones this multimap.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.labs.structs.Multimap ;
    containsEntry (key : string , value : any ) : boolean ;
    containsKey (key : string ) : boolean ;
    containsValue (value : any ) : boolean ;
    /**
     * Gets the values correspond to the given key.
     * @param key The key to retrieve.
     */
    get (key : string ) : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ;
    getCount ( ) : number ;
    getEntries ( ) : any [] [] ;
    getKeys ( ) : string [] ;
    getValues ( ) : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ;
    isEmpty ( ) : boolean ;
    /**
     * Removes a single occurrence of (key, value) pair.
     * @param key The key to remove.
     * @param value The value to remove.
     */
    remove (key : string , value : any ) : boolean ;
    /**
     * Removes all values corresponding to the given key.
     * @param key The key whose values are to be removed.
     */
    removeAll (key : string ) : boolean ;
    /**
     * Replaces all the values for the given key with the given values.
     * @param key The key whose values are to be replaced.
     * @param values The new values. If empty, this is equivalent to {@code removaAll(key)}.
     */
    replaceValues (key : string , values : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.structs.Multimap'): typeof ಠ_ಠ.clutz.goog.labs.structs.Multimap;
}
declare module 'goog:goog.labs.structs.Multimap' {
  import alias = ಠ_ಠ.clutz.goog.labs.structs.Multimap;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.style {
  /**
   * Monitors the window for changes to the ratio between device and screen
   * pixels, e.g. when the user moves the window from a high density screen to a
   * screen with normal density. Dispatches
   * goog.labs.style.PixelDensityMonitor.EventType.CHANGE events when the density
   * changes between the two predefined values NORMAL and HIGH.
   *
   * This class uses the window.devicePixelRatio value which is supported in
   * WebKit and FF18. If the value does not exist, it will always return a
   * NORMAL density. It requires support for MediaQueryList to detect changes to
   * the devicePixelRatio.
   */
  class PixelDensityMonitor extends PixelDensityMonitor_Instance {
  }
  class PixelDensityMonitor_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Monitors the window for changes to the ratio between device and screen
     * pixels, e.g. when the user moves the window from a high density screen to a
     * screen with normal density. Dispatches
     * goog.labs.style.PixelDensityMonitor.EventType.CHANGE events when the density
     * changes between the two predefined values NORMAL and HIGH.
     *
     * This class uses the window.devicePixelRatio value which is supported in
     * WebKit and FF18. If the value does not exist, it will always return a
     * NORMAL density. It requires support for MediaQueryList to detect changes to
     * the devicePixelRatio.
     * @param opt_domHelper The DomHelper which contains the document associated with the window to listen to. Defaults to the one in which this code is executing.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper ) ;
    disposeInternal ( ) : void ;
    getDensity ( ) : ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor.Density ;
    /**
     * Starts monitoring for changes in pixel density.
     */
    start ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.style.PixelDensityMonitor'): typeof ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor;
}
declare module 'goog:goog.labs.style.PixelDensityMonitor' {
  import alias = ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor {
  /**
   * The two different pixel density modes on which the various ratios between
   * physical and device pixels are mapped.
   */
  type Density = number ;
  var Density : {
    HIGH : Density ,
    NORMAL : Density ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.style.PixelDensityMonitor.Density'): typeof ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor.Density;
}
declare module 'goog:goog.labs.style.PixelDensityMonitor.Density' {
  import alias = ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor.Density;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor {
  /**
   * The events fired by the PixelDensityMonitor.
   */
  type EventType = string ;
  var EventType : {
    CHANGE : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.style.PixelDensityMonitor.EventType'): typeof ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor.EventType;
}
declare module 'goog:goog.labs.style.PixelDensityMonitor.EventType' {
  import alias = ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The AllOf matcher.
   */
  class AllOfMatcher extends AllOfMatcher_Instance {
  }
  class AllOfMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The AllOf matcher.
     * @param matchers Input matchers.
     */
    constructor (matchers : ಠ_ಠ.clutz.goog.labs.testing.Matcher [] ) ;
    /**
     * Describes why the matcher failed. The returned string is a concatenation of
     * all the failed matchers' error strings.
     */
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if all of the matchers match the input value.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.AllOfMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.AllOfMatcher;
}
declare module 'goog:goog.labs.testing.AllOfMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.AllOfMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The AnyOf matcher.
   */
  class AnyOfMatcher extends AnyOfMatcher_Instance {
  }
  class AnyOfMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The AnyOf matcher.
     * @param matchers Input matchers.
     */
    constructor (matchers : ಠ_ಠ.clutz.goog.labs.testing.Matcher [] ) ;
    /**
     * Describes why the matcher failed.
     */
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if any of the matchers matches the input value.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.AnyOfMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.AnyOfMatcher;
}
declare module 'goog:goog.labs.testing.AnyOfMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.AnyOfMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The Anything matcher. Matches all possible inputs.
   */
  class AnythingMatcher extends AnythingMatcher_Instance {
  }
  class AnythingMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * This method is never called but is needed so AnythingMatcher implements the
     * Matcher interface.
     */
    describe (actualObject : any , a ? : string ) : string ;
    /**
     * Matches anything. Useful if one doesn't care what the object under test is.
     */
    matches (actualObject : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.AnythingMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.AnythingMatcher;
}
declare module 'goog:goog.labs.testing.AnythingMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.AnythingMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The CloseTo matcher.
   */
  class CloseToMatcher extends CloseToMatcher_Instance {
  }
  class CloseToMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The CloseTo matcher.
     * @param value The value to compare.
     * @param range The range to check within.
     */
    constructor (value : number , range : number ) ;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if input value is within a certain range of the expected value.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.CloseToMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.CloseToMatcher;
}
declare module 'goog:goog.labs.testing.CloseToMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.CloseToMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The ContainsString matcher.
   */
  class ContainsStringMatcher extends ContainsStringMatcher_Instance {
  }
  class ContainsStringMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The ContainsString matcher.
     * @param value The expected string.
     */
    constructor (value : string ) ;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if input string contains the expected string.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.ContainsStringMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.ContainsStringMatcher;
}
declare module 'goog:goog.labs.testing.ContainsStringMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.ContainsStringMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The EndsWith matcher.
   */
  class EndsWithMatcher extends EndsWithMatcher_Instance {
  }
  class EndsWithMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The EndsWith matcher.
     * @param value The expected string.
     */
    constructor (value : string ) ;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if input string ends with the expected string.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.EndsWithMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.EndsWithMatcher;
}
declare module 'goog:goog.labs.testing.EndsWithMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.EndsWithMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * JsUnit environments allow developers to customize the existing testing
   * lifecycle by hitching additional setUp and tearDown behaviors to tests.
   *
   * Environments will run their setUp steps in the order in which they
   * are instantiated and registered. During tearDown, the environments will
   * unwind the setUp and execute in reverse order.
   *
   * See http://go/jsunit-env for more information.
   */
  class Environment extends Environment_Instance {
    static getTestCaseIfActive ( ) : ಠ_ಠ.clutz.goog.testing.TestCase | null ;
  }
  class Environment_Instance {
    private noStructuralTyping_: any;
    console : ಠ_ಠ.clutz.goog.debug.Console ;
    mockClock : ಠ_ಠ.clutz.goog.testing.MockClock | null ;
    mockControl : ಠ_ಠ.clutz.goog.testing.MockControl | null ;
    /**
     * Creates a basic strict mock of a {@code toMock}. For more advanced mocking,
     * please use the MockControl directly.
     */
    mock (toMock : ( ( ...a : any [] ) => any ) | null ) : ಠ_ಠ.clutz.goog.testing.StrictMock ;
    /**
     * Runs immediately before the setUp phase of JsUnit tests.
     */
    setUp ( ) : void ;
    /**
     * Runs immediately before the setUpPage phase of JsUnit tests.
     */
    setUpPage ( ) : void ;
    /**
     * Runs immediately after the tearDown phase of JsUnit tests.
     */
    tearDown ( ) : void ;
    /**
     * Runs immediately after the tearDownPage phase of JsUnit tests.
     */
    tearDownPage ( ) : void ;
    /**
     * Create a {@see goog.testing.MockClock} for each test. The clock will be
     * installed (override i.e. setTimeout) by default. It can be accessed
     * using {@code env.mockClock}. If your test has more than one testing
     * environment, don't call this on more than one of them.
     */
    withMockClock ( ) : ಠ_ಠ.clutz.goog.labs.testing.Environment ;
    /**
     * Create a new {@see goog.testing.MockControl} accessible via
     * {@code env.mockControl} for each test. If your test has more than one
     * testing environment, don't call this on more than one of them.
     */
    withMockControl ( ) : ಠ_ಠ.clutz.goog.labs.testing.Environment ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.Environment'): typeof ಠ_ಠ.clutz.goog.labs.testing.Environment;
}
declare module 'goog:goog.labs.testing.Environment' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.Environment;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The EqualToIgnoringWhitespace matcher.
   */
  class EqualToIgnoringWhitespaceMatcher extends EqualToIgnoringWhitespaceMatcher_Instance {
  }
  class EqualToIgnoringWhitespaceMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The EqualToIgnoringWhitespace matcher.
     * @param value The expected string.
     */
    constructor (value : string ) ;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if input string contains the expected string.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.EqualToIgnoringWhitespaceMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.EqualToIgnoringWhitespaceMatcher;
}
declare module 'goog:goog.labs.testing.EqualToIgnoringWhitespaceMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.EqualToIgnoringWhitespaceMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The EqualTo matcher.
   */
  class EqualToMatcher extends EqualToMatcher_Instance {
  }
  class EqualToMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The EqualTo matcher.
     * @param value The value to compare.
     */
    constructor (value : number ) ;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if the input value is equal to the expected value.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.EqualToMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.EqualToMatcher;
}
declare module 'goog:goog.labs.testing.EqualToMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.EqualToMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The Equals matcher.
   */
  class EqualsMatcher extends EqualsMatcher_Instance {
  }
  class EqualsMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The Equals matcher.
     * @param value The expected string.
     */
    constructor (value : string ) ;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if input string is equal to the expected string.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.EqualsMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.EqualsMatcher;
}
declare module 'goog:goog.labs.testing.EqualsMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.EqualsMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The GreaterThanEqualTo matcher.
   */
  class GreaterThanEqualToMatcher extends GreaterThanEqualToMatcher_Instance {
  }
  class GreaterThanEqualToMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The GreaterThanEqualTo matcher.
     * @param value The value to compare.
     */
    constructor (value : number ) ;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if the input value is greater than equal to the expected value.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.GreaterThanEqualToMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.GreaterThanEqualToMatcher;
}
declare module 'goog:goog.labs.testing.GreaterThanEqualToMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.GreaterThanEqualToMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The GreaterThan matcher.
   */
  class GreaterThanMatcher extends GreaterThanMatcher_Instance {
  }
  class GreaterThanMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The GreaterThan matcher.
     * @param value The value to compare.
     */
    constructor (value : number ) ;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if input value is greater than the expected value.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.GreaterThanMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.GreaterThanMatcher;
}
declare module 'goog:goog.labs.testing.GreaterThanMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.GreaterThanMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The HasEntries matcher.
   */
  class HasEntriesMatcher extends HasEntriesMatcher_Instance {
  }
  class HasEntriesMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The HasEntries matcher.
     * @param entries The entries to check in the object.
     */
    constructor (entries : Object ) ;
    describe (actualObject : any , a ? : string ) : string ;
    /**
     * Determines if an object has particular entries.
     */
    matches (actualObject : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.HasEntriesMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.HasEntriesMatcher;
}
declare module 'goog:goog.labs.testing.HasEntriesMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.HasEntriesMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The HasEntry matcher.
   */
  class HasEntryMatcher extends HasEntryMatcher_Instance {
  }
  class HasEntryMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The HasEntry matcher.
     * @param key The key for the entry.
     * @param value The value for the key.
     */
    constructor (key : string , value : any ) ;
    describe (actualObject : any , a ? : string ) : string ;
    /**
     * Determines if an object has a particular entry.
     */
    matches (actualObject : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.HasEntryMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.HasEntryMatcher;
}
declare module 'goog:goog.labs.testing.HasEntryMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.HasEntryMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The HasKey matcher.
   */
  class HasKeyMatcher extends HasKeyMatcher_Instance {
  }
  class HasKeyMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The HasKey matcher.
     * @param key The key to check in the object.
     */
    constructor (key : string ) ;
    describe (actualObject : any , a ? : string ) : string ;
    /**
     * Determines if an object has a key.
     */
    matches (actualObject : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.HasKeyMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.HasKeyMatcher;
}
declare module 'goog:goog.labs.testing.HasKeyMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.HasKeyMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The HasProperty matcher.
   */
  class HasPropertyMatcher extends HasPropertyMatcher_Instance {
  }
  class HasPropertyMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The HasProperty matcher.
     * @param property Name of the property to test.
     */
    constructor (property : string ) ;
    describe (actualObject : any , a ? : string ) : string ;
    /**
     * Determines if an object has a property.
     */
    matches (actualObject : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.HasPropertyMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.HasPropertyMatcher;
}
declare module 'goog:goog.labs.testing.HasPropertyMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.HasPropertyMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The HasValue matcher.
   */
  class HasValueMatcher extends HasValueMatcher_Instance {
  }
  class HasValueMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The HasValue matcher.
     * @param value The value to check in the object.
     */
    constructor (value : any ) ;
    describe (actualObject : any , a ? : string ) : string ;
    /**
     * Determines if an object contains a value
     */
    matches (actualObject : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.HasValueMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.HasValueMatcher;
}
declare module 'goog:goog.labs.testing.HasValueMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.HasValueMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The InstanceOf matcher.
   */
  class InstanceOfMatcher extends InstanceOfMatcher_Instance {
  }
  class InstanceOfMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The InstanceOf matcher.
     * @param object The expected class object.
     */
    constructor (object : Object ) ;
    describe (actualObject : any , a ? : string ) : string ;
    /**
     * Determines if an object is an instance of another object.
     */
    matches (actualObject : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.InstanceOfMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.InstanceOfMatcher;
}
declare module 'goog:goog.labs.testing.InstanceOfMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.InstanceOfMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The IsNot matcher.
   */
  class IsNotMatcher extends IsNotMatcher_Instance {
  }
  class IsNotMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The IsNot matcher.
     * @param matcher The matcher to negate.
     */
    constructor (matcher : ಠ_ಠ.clutz.goog.labs.testing.Matcher ) ;
    /**
     * Describes why the matcher failed.
     */
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if the input value doesn't satisfy a matcher.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.IsNotMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.IsNotMatcher;
}
declare module 'goog:goog.labs.testing.IsNotMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.IsNotMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The IsNull matcher.
   */
  class IsNullMatcher extends IsNullMatcher_Instance {
  }
  class IsNullMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if input value is null.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.IsNullMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.IsNullMatcher;
}
declare module 'goog:goog.labs.testing.IsNullMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.IsNullMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The IsNullOrUndefined matcher.
   */
  class IsNullOrUndefinedMatcher extends IsNullOrUndefinedMatcher_Instance {
  }
  class IsNullOrUndefinedMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if input value is null or undefined.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.IsNullOrUndefinedMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.IsNullOrUndefinedMatcher;
}
declare module 'goog:goog.labs.testing.IsNullOrUndefinedMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.IsNullOrUndefinedMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The IsUndefined matcher.
   */
  class IsUndefinedMatcher extends IsUndefinedMatcher_Instance {
  }
  class IsUndefinedMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if input value is undefined.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.IsUndefinedMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.IsUndefinedMatcher;
}
declare module 'goog:goog.labs.testing.IsUndefinedMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.IsUndefinedMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The JSON fuzzing generator.
   */
  class JsonFuzzing extends JsonFuzzing_Instance {
  }
  class JsonFuzzing_Instance {
    private noStructuralTyping_: any;
    /**
     * The JSON fuzzing generator.
     * @param opt_options Configuration for the fuzzing json generator.
     * @param opt_seed The seed for the random generator.
     */
    constructor (opt_options ? : ಠ_ಠ.clutz.goog.labs.testing.JsonFuzzing.Options , opt_seed ? : number ) ;
    /**
     * Gets a fuzzily-generated JSON object (an array).
     *
     * TODO(user): whitespaces
     */
    newArray ( ) : any [] ;
    /**
     * Gets a new integer.
     * @param min Inclusive
     * @param max Exclusive
     */
    nextInt (min : number , max : number ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing.JsonFuzzing {
  type Options = { arraySize : number , jsonSize : number , maxDepth : number , numFields : number } ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.JsonFuzzing'): typeof ಠ_ಠ.clutz.goog.labs.testing.JsonFuzzing;
}
declare module 'goog:goog.labs.testing.JsonFuzzing' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.JsonFuzzing;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The LessThanEqualTo matcher.
   */
  class LessThanEqualToMatcher extends LessThanEqualToMatcher_Instance {
  }
  class LessThanEqualToMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The LessThanEqualTo matcher.
     * @param value The value to compare.
     */
    constructor (value : number ) ;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if the input value is less than or equal to the expected value.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.LessThanEqualToMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.LessThanEqualToMatcher;
}
declare module 'goog:goog.labs.testing.LessThanEqualToMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.LessThanEqualToMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The lessThan matcher.
   */
  class LessThanMatcher extends LessThanMatcher_Instance {
  }
  class LessThanMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The lessThan matcher.
     * @param value The value to compare.
     */
    constructor (value : number ) ;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if the input value is less than the expected value.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.LessThanMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.LessThanMatcher;
}
declare module 'goog:goog.labs.testing.LessThanMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.LessThanMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * A matcher object to be used in assertThat statements.
   */
  interface Matcher {
    /**
     * Describes why the matcher failed.
     * @param value The value that didn't match.
     * @param opt_description A partial description to which the reason will be appended.
     */
    describe (value : any , opt_description ? : string ) : string ;
    /**
     * Determines whether a value matches the constraints of the match.
     * @param value The object to match.
     */
    matches (value : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing.Matcher {
  function makeMatcher (matchesFunction : ( ...a : any [] ) => any , opt_describeFunction ? : ( ( ...a : any [] ) => any ) | null ) : ( ...a : any [] ) => any ;
}
declare module 'goog:goog.labs.testing.Matcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.Matcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * Error thrown when a Matcher fails to match the input value.
   */
  class MatcherError extends MatcherError_Instance {
  }
  class MatcherError_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
    /**
     * Error thrown when a Matcher fails to match the input value.
     * @param opt_message The error message.
     */
    constructor (opt_message ? : string ) ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.MatcherError'): typeof ಠ_ಠ.clutz.goog.labs.testing.MatcherError;
}
declare module 'goog:goog.labs.testing.MatcherError' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.MatcherError;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The Equals matcher.
   */
  class ObjectEqualsMatcher extends ObjectEqualsMatcher_Instance {
  }
  class ObjectEqualsMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The Equals matcher.
     * @param expectedObject The expected object.
     */
    constructor (expectedObject : Object ) ;
    describe (actualObject : any , a ? : string ) : string ;
    /**
     * Determines if two objects are the same.
     */
    matches (actualObject : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.ObjectEqualsMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.ObjectEqualsMatcher;
}
declare module 'goog:goog.labs.testing.ObjectEqualsMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.ObjectEqualsMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The MatchesRegex matcher.
   */
  class RegexMatcher extends RegexMatcher_Instance {
  }
  class RegexMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The MatchesRegex matcher.
     * @param regex The expected regex.
     */
    constructor (regex : RegExp ) ;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if input string is equal to the expected string.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.RegexMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.RegexMatcher;
}
declare module 'goog:goog.labs.testing.RegexMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.RegexMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The StartsWith matcher.
   */
  class StartsWithMatcher extends StartsWithMatcher_Instance {
  }
  class StartsWithMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The StartsWith matcher.
     * @param value The expected string.
     */
    constructor (value : string ) ;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if input string starts with the expected string.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.StartsWithMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.StartsWithMatcher;
}
declare module 'goog:goog.labs.testing.StartsWithMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.StartsWithMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * The StringContainsInOrdermatcher.
   */
  class StringContainsInOrderMatcher extends StringContainsInOrderMatcher_Instance {
  }
  class StringContainsInOrderMatcher_Instance implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_: any;
    /**
     * The StringContainsInOrdermatcher.
     * @param values The expected string values.
     */
    constructor (values : string [] | null ) ;
    describe (actualValue : any , a ? : string ) : string ;
    /**
     * Determines if input string contains, in order, the expected array of strings.
     */
    matches (actualValue : any ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.StringContainsInOrderMatcher'): typeof ಠ_ಠ.clutz.goog.labs.testing.StringContainsInOrderMatcher;
}
declare module 'goog:goog.labs.testing.StringContainsInOrderMatcher' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.StringContainsInOrderMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.testing {
  /**
   * Asserts that the actual value evaluated by the matcher is true.
   * @param actual The object to assert by the matcher.
   * @param matcher A matcher to verify values.
   * @param opt_reason Description of what is asserted.
   */
  function assertThat (actual : any , matcher : ಠ_ಠ.clutz.goog.labs.testing.Matcher , opt_reason ? : string ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.testing.assertThat'): typeof ಠ_ಠ.clutz.goog.labs.testing.assertThat;
}
declare module 'goog:goog.labs.testing.assertThat' {
  import alias = ಠ_ಠ.clutz.goog.labs.testing.assertThat;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.userAgent.browser {
  function getVersion ( ) : string ;
  function isAndroidBrowser ( ) : boolean ;
  function isChrome ( ) : boolean ;
  function isCoast ( ) : boolean ;
  function isEdge ( ) : boolean ;
  function isFirefox ( ) : boolean ;
  function isIE ( ) : boolean ;
  function isIosWebview ( ) : boolean ;
  function isOpera ( ) : boolean ;
  function isSafari ( ) : boolean ;
  /**
   * For more information, see:
   * http://docs.aws.amazon.com/silk/latest/developerguide/user-agent.html
   */
  function isSilk ( ) : boolean ;
  function isVersionOrHigher (version : string | number ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.userAgent.browser'): typeof ಠ_ಠ.clutz.goog.labs.userAgent.browser;
}
declare module 'goog:goog.labs.userAgent.browser' {
  import alias = ಠ_ಠ.clutz.goog.labs.userAgent.browser;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.userAgent.device {
  function isDesktop ( ) : boolean ;
  /**
   * Currently we detect the iPhone, iPod and Android mobiles (devices that have
   * both Android and Mobile in the user agent string).
   */
  function isMobile ( ) : boolean ;
  /**
   * Currently we detect Kindle Fire, iPad, and Android tablets (devices that have
   * Android but not Mobile in the user agent string).
   */
  function isTablet ( ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.userAgent.device'): typeof ಠ_ಠ.clutz.goog.labs.userAgent.device;
}
declare module 'goog:goog.labs.userAgent.device' {
  import alias = ಠ_ಠ.clutz.goog.labs.userAgent.device;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.userAgent.engine {
  function getVersion ( ) : string ;
  function isEdge ( ) : boolean ;
  function isGecko ( ) : boolean ;
  function isPresto ( ) : boolean ;
  function isTrident ( ) : boolean ;
  function isVersionOrHigher (version : string | number ) : boolean ;
  function isWebKit ( ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.userAgent.engine'): typeof ಠ_ಠ.clutz.goog.labs.userAgent.engine;
}
declare module 'goog:goog.labs.userAgent.engine' {
  import alias = ಠ_ಠ.clutz.goog.labs.userAgent.engine;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.userAgent.platform {
  /**
   * The version of the platform. We only determine the version for Windows,
   * Mac, and Chrome OS. It doesn't make much sense on Linux. For Windows, we only
   * look at the NT version. Non-NT-based versions (e.g. 95, 98, etc.) are given
   * version 0.0.
   */
  function getVersion ( ) : string ;
  function isAndroid ( ) : boolean ;
  function isChromeOS ( ) : boolean ;
  function isIos ( ) : boolean ;
  function isIpad ( ) : boolean ;
  function isIphone ( ) : boolean ;
  function isIpod ( ) : boolean ;
  /**
   * Note: ChromeOS is not considered to be Linux as it does not report itself
   * as Linux in the user agent string.
   */
  function isLinux ( ) : boolean ;
  function isMacintosh ( ) : boolean ;
  function isVersionOrHigher (version : string | number ) : boolean ;
  function isWindows ( ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.userAgent.platform'): typeof ಠ_ಠ.clutz.goog.labs.userAgent.platform;
}
declare module 'goog:goog.labs.userAgent.platform' {
  import alias = ಠ_ಠ.clutz.goog.labs.userAgent.platform;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.userAgent.util {
  /**
   * Parses the user agent into tuples for each section.
   */
  function extractVersionTuples (userAgent : string ) : string [] [] ;
  function getUserAgent ( ) : string ;
  function matchUserAgent (str : string ) : boolean ;
  function matchUserAgentIgnoreCase (str : string ) : boolean ;
  /**
   * Applications may override browser detection on the built in
   * navigator.userAgent object by setting this string. Set to null to use the
   * browser object instead.
   * @param opt_userAgent The User-Agent override.
   */
  function setUserAgent (opt_userAgent ? : string | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.userAgent.util'): typeof ಠ_ಠ.clutz.goog.labs.userAgent.util;
}
declare module 'goog:goog.labs.userAgent.util' {
  import alias = ಠ_ಠ.clutz.goog.labs.userAgent.util;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.useragent.verifier {
  var NOT_IE : number ;
  /**
   * Detect the the current IE version using runtime behavior, returns 0
   * if a version of IE is not detected.
   */
  function detectIeVersionByBehavior ( ) : number ;
  /**
   * Detect the the current IE version using MSIE version presented in the
   * user agent string (This will not detected IE 11 which does not present a
   * MSIE version), or zero if IE is not detected.
   */
  function detectIeVersionByNavigator ( ) : number ;
  /**
   * Correct the actual IE version based on the Trident version in the user agent
   * string.  This adjusts for IE's "compatiblity modes".
   */
  function getCorrectedIEVersionByNavigator ( ) : number ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.labs.useragent.verifier'): typeof ಠ_ಠ.clutz.goog.labs.useragent.verifier;
}
declare module 'goog:goog.labs.useragent.verifier' {
  import alias = ಠ_ಠ.clutz.goog.labs.useragent.verifier;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
  /**
   * Enum of resources that can be registered.
   */
  type Resource = string ;
  var Resource : {
    DATE_TIME_CONSTANTS : Resource ,
    LOCAL_NAME_CONSTANTS : Resource ,
    NUMBER_FORMAT_CONSTANTS : Resource ,
    TIME_ZONE_ALL_LONG_NAMES : Resource ,
    TIME_ZONE_CONSTANTS : Resource ,
    TIME_ZONE_SELECTED_IDS : Resource ,
    TIME_ZONE_SELECTED_LONG_NAMES : Resource ,
    TIME_ZONE_SELECTED_SHORT_NAMES : Resource ,
  };
  /**
   * Returns the language-subtag of the given language code.
   * @param languageCode Language code to extract language subtag from.
   */
  function getLanguageSubTag (languageCode : string ) : string ;
  /**
   * Retrieve the current locale
   */
  function getLocale ( ) : string ;
  /**
   * Returns the localized country name for the provided language code in the
   * current or provided locale symbols set.
   *
   * This method depends on `goog.locale.LocaleNameConstants__<locale>` available
   * from http://go/js_locale_data. User of this method has to add dependency to
   * this.
   * @param languageCode Language code to lookup the country name for.
   * @param opt_localeSymbols If omitted the current locale symbol set is used.
   */
  function getLocalizedCountryName (languageCode : string , opt_localeSymbols ? : Object | null ) : string ;
  /**
   * Returns the localized language name for the provided language code in
   * the current or provided locale symbols set.
   *
   * This method depends on `goog.locale.LocaleNameConstants__<locale>` available
   * from http://go/js_locale_data. User of this method has to add dependency to
   * this.
   * @param languageCode Language code to lookup the language name for.
   * @param opt_localeSymbols locale symbol set if given.
   */
  function getLocalizedLanguageName (languageCode : string , opt_localeSymbols ? : Object | null ) : string ;
  /**
   * Returns the country name of the provided language code in its native
   * language.
   *
   * This method depends on goog.locale.nativeNameConstants available from
   * nativenameconstants.js. User of this method has to add dependency to this.
   * @param countryCode Code to lookup the country name for.
   */
  function getNativeCountryName (countryCode : string ) : string ;
  /**
   * Returns the language name of the provided language code in its native
   * language.
   *
   * This method depends on goog.locale.nativeNameConstants available from
   * nativenameconstants.js. User of this method has to add dependency to this.
   * @param languageCode Language code to lookup the language name for.
   */
  function getNativeLanguageName (languageCode : string ) : string ;
  /**
   * Returns the region-sub-tag of the given language code.
   * @param languageCode Language code to extract region subtag from.
   */
  function getRegionSubTag (languageCode : string ) : string ;
  /**
   * Retrieve specified resource for certain locale.
   * @param resourceName String that represents the type of resource.
   * @param opt_locale Locale ID, if not given, current locale will be assumed.
   */
  function getResource (resourceName : string , opt_locale ? : string ) : Object | null | undefined ;
  /**
   * Retrieve specified resource for certain locale with fallback. For example,
   * request of 'zh_CN' will be resolved in following order: zh_CN, zh, en.
   * If none of the above succeeds, of if the resource as indicated by
   * resourceName does not exist at all, undefined will be returned.
   * @param resourceName String that represents the type of resource.
   * @param opt_locale locale ID, if not given, current locale will be assumed.
   */
  function getResourceWithFallback (resourceName : string , opt_locale ? : string ) : Object | null | undefined ;
  /**
   * Returns the script subtag of the locale with the first alphabet in uppercase
   * and the rest 3 characters in lower case.
   * @param languageCode Language Code to extract script subtag from.
   */
  function getScriptSubTag (languageCode : string ) : string ;
  /**
   * Returns the displayable list of long timezone names paired with its id for
   * the current locale.
   *
   * This method depends on `goog.locale.TimeZoneAllLongNames__<locale>` available
   * from http://go/js_locale_data. Users of this method must add a dependency on
   * this.
   */
  function getTimeZoneAllLongNames ( ) : ( Object | null ) [] | null ;
  /**
   * Returns the displayable list of long timezone names paired with its id for
   * the current locale, selected based on the region or language provided.
   *
   * This method depends on `goog.locale.TimeZone*__<locale>` available
   * from http://go/js_locale_data. Users of this method must add a dependency on
   * this.
   * @param opt_regionOrLang If region tag is provided, timezone ids specific this region are considered. If language is provided, all regions for which this language is defacto official is considered. If this parameter is not speficied, current locale is used to extract this information.
   */
  function getTimeZoneSelectedLongNames (opt_regionOrLang ? : string ) : ( Object | null ) [] ;
  /**
   * Returns the displayable list of short timezone names paired with its id for
   * the current locale, selected based on the region or language provided.
   *
   * This method depends on `goog.locale.TimeZone*__<locale>` available
   * from http://go/js_locale_data. Users of this method must add a dependency on
   * this.
   * @param opt_regionOrLang If region tag is provided, timezone ids specific this region are considered. If language is provided, all regions for which this language is defacto official is considered. If this parameter is not speficied, current locale is used to extract this information.
   */
  function getTimeZoneSelectedShortNames (opt_regionOrLang ? : string ) : ( Object | null ) [] ;
  /**
   * Returns the variant-sub-tag of the given language code.
   * @param languageCode Language code to extract variant subtag from.
   */
  function getVariantSubTag (languageCode : string ) : string ;
  /**
   * Returns true if the required resource has already been registered.
   * @param resourceName String that represents the type of resource.
   * @param localeName Locale ID.
   */
  function isResourceRegistered (resourceName : string , localeName : string ) : boolean ;
  /**
   * Registers the LocaleNameConstants constants object for a given locale name.
   * @param dataObj The resource object.
   * @param localeName Locale ID.
   */
  function registerLocaleNameConstants (dataObj : Object | null , localeName : string ) : void ;
  /**
   * Register a resource object for certain locale.
   * @param dataObj The resource object being registered.
   * @param resourceName String that represents the type of resource.
   * @param localeName Locale ID.
   */
  function registerResource (dataObj : Object | null , resourceName : string , localeName : string ) : void ;
  /**
   * Registers the TimeZoneAllLongNames constants object for a given locale name.
   * @param dataObj The resource object.
   * @param localeName Locale ID.
   */
  function registerTimeZoneAllLongNames (dataObj : Object | null , localeName : string ) : void ;
  /**
   * Registers the timezone constants object for a given locale name.
   * @param dataObj The resource object.
   * @param localeName Locale ID.
   */
  function registerTimeZoneConstants (dataObj : Object | null , localeName : string ) : void ;
  /**
   * Registers the TimeZoneSelectedIds constants object for a given locale name.
   * @param dataObj The resource object.
   * @param localeName Locale ID.
   */
  function registerTimeZoneSelectedIds (dataObj : Object | null , localeName : string ) : void ;
  /**
   * Registers the TimeZoneSelectedLongNames constants object for a given locale
   * name.
   * @param dataObj The resource object.
   * @param localeName Locale ID.
   */
  function registerTimeZoneSelectedLongNames (dataObj : Object | null , localeName : string ) : void ;
  /**
   * Registers the TimeZoneSelectedShortNames constants object for a given
   * locale name.
   * @param dataObj The resource object.
   * @param localeName Locale ID.
   */
  function registerTimeZoneSelectedShortNames (dataObj : Object | null , localeName : string ) : void ;
  /**
   * Set current locale to the specified one.
   * @param localeName Locale name string. We are following the usage in CLDR, but can make a few compromise for existing name compatibility.
   */
  function setLocale (localeName : string ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.locale'): typeof ಠ_ಠ.clutz.goog.locale;
}
declare module 'goog:goog.locale' {
  import alias = ಠ_ಠ.clutz.goog.locale;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
  /**
   * Time zone fingerprint mapping to time zone list.
   */
  type TimeZoneFingerprint = string [] ;
  var TimeZoneFingerprint : {
    1001739662 : TimeZoneFingerprint ,
    1037565906 : TimeZoneFingerprint ,
    105862464 : TimeZoneFingerprint ,
    12 : TimeZoneFingerprint ,
    1286253222 : TimeZoneFingerprint ,
    1294772902 : TimeZoneFingerprint ,
    1373765610 : TimeZoneFingerprint ,
    1465210176 : TimeZoneFingerprint ,
    1465865536 : TimeZoneFingerprint ,
    20 : TimeZoneFingerprint ,
    22 : TimeZoneFingerprint ,
    24 : TimeZoneFingerprint ,
    25 : TimeZoneFingerprint ,
    26 : TimeZoneFingerprint ,
    269133956 : TimeZoneFingerprint ,
    28 : TimeZoneFingerprint ,
    29 : TimeZoneFingerprint ,
    30 : TimeZoneFingerprint ,
    312471854 : TimeZoneFingerprint ,
    32 : TimeZoneFingerprint ,
    34 : TimeZoneFingerprint ,
    35 : TimeZoneFingerprint ,
    36 : TimeZoneFingerprint ,
    37 : TimeZoneFingerprint ,
    38 : TimeZoneFingerprint ,
    39 : TimeZoneFingerprint ,
    40 : TimeZoneFingerprint ,
    403351686 : TimeZoneFingerprint ,
    41 : TimeZoneFingerprint ,
    41025476 : TimeZoneFingerprint ,
    411740806 : TimeZoneFingerprint ,
    42 : TimeZoneFingerprint ,
    44 : TimeZoneFingerprint ,
    456480044 : TimeZoneFingerprint ,
    46 : TimeZoneFingerprint ,
    474655352 : TimeZoneFingerprint ,
    48 : TimeZoneFingerprint ,
    483044050 : TimeZoneFingerprint ,
    483699410 : TimeZoneFingerprint ,
    487587858 : TimeZoneFingerprint ,
    487915538 : TimeZoneFingerprint ,
    491433170 : TimeZoneFingerprint ,
    492088530 : TimeZoneFingerprint ,
    495058823 : TimeZoneFingerprint ,
    497024903 : TimeZoneFingerprint ,
    49938444 : TimeZoneFingerprint ,
    50 : TimeZoneFingerprint ,
    501219282 : TimeZoneFingerprint ,
    52 : TimeZoneFingerprint ,
    54 : TimeZoneFingerprint ,
    559943005 : TimeZoneFingerprint ,
    56 : TimeZoneFingerprint ,
    570425352 : TimeZoneFingerprint ,
    572522538 : TimeZoneFingerprint ,
    58 : TimeZoneFingerprint ,
    581567010 : TimeZoneFingerprint ,
    592794974 : TimeZoneFingerprint ,
    599086472 : TimeZoneFingerprint ,
    599086512 : TimeZoneFingerprint ,
    6 : TimeZoneFingerprint ,
    60 : TimeZoneFingerprint ,
    617261764 : TimeZoneFingerprint ,
    617261788 : TimeZoneFingerprint ,
    617786052 : TimeZoneFingerprint ,
    62 : TimeZoneFingerprint ,
    626175196 : TimeZoneFingerprint ,
    626175324 : TimeZoneFingerprint ,
    626306268 : TimeZoneFingerprint ,
    626338524 : TimeZoneFingerprint ,
    626339164 : TimeZoneFingerprint ,
    626347356 : TimeZoneFingerprint ,
    626392412 : TimeZoneFingerprint ,
    635437856 : TimeZoneFingerprint ,
    64 : TimeZoneFingerprint ,
    66 : TimeZoneFingerprint ,
    662525310 : TimeZoneFingerprint ,
    67 : TimeZoneFingerprint ,
    670913918 : TimeZoneFingerprint ,
    671787146 : TimeZoneFingerprint ,
    68 : TimeZoneFingerprint ,
    680176266 : TimeZoneFingerprint ,
    70 : TimeZoneFingerprint ,
    710950176 : TimeZoneFingerprint ,
    72 : TimeZoneFingerprint ,
    76502378 : TimeZoneFingerprint ,
    769654750 : TimeZoneFingerprint ,
    771751924 : TimeZoneFingerprint ,
    778043508 : TimeZoneFingerprint ,
    8 : TimeZoneFingerprint ,
    805300897 : TimeZoneFingerprint ,
    805312524 : TimeZoneFingerprint ,
    805312908 : TimeZoneFingerprint ,
    805337484 : TimeZoneFingerprint ,
    830603252 : TimeZoneFingerprint ,
    836894706 : TimeZoneFingerprint ,
    836894708 : TimeZoneFingerprint ,
    838860786 : TimeZoneFingerprint ,
    838860812 : TimeZoneFingerprint ,
    839516172 : TimeZoneFingerprint ,
    850043558 : TimeZoneFingerprint ,
    897537370 : TimeZoneFingerprint ,
    901076366 : TimeZoneFingerprint ,
    905969678 : TimeZoneFingerprint ,
    919994368 : TimeZoneFingerprint ,
    919994592 : TimeZoneFingerprint ,
    928339288 : TimeZoneFingerprint ,
    931091802 : TimeZoneFingerprint ,
    931091834 : TimeZoneFingerprint ,
    937427058 : TimeZoneFingerprint ,
    939480410 : TimeZoneFingerprint ,
    939579406 : TimeZoneFingerprint ,
    941621262 : TimeZoneFingerprint ,
    943019406 : TimeZoneFingerprint ,
    946339336 : TimeZoneFingerprint ,
    947956358 : TimeZoneFingerprint ,
    948087430 : TimeZoneFingerprint ,
    952805774 : TimeZoneFingerprint ,
    970325971 : TimeZoneFingerprint ,
    970326003 : TimeZoneFingerprint ,
    973078513 : TimeZoneFingerprint ,
    983564836 : TimeZoneFingerprint ,
    984437412 : TimeZoneFingerprint ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.locale.TimeZoneFingerprint'): typeof ಠ_ಠ.clutz.goog.locale.TimeZoneFingerprint;
}
declare module 'goog:goog.locale.TimeZoneFingerprint' {
  import alias = ಠ_ಠ.clutz.goog.locale.TimeZoneFingerprint;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
  var TimeZoneList : Object ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.locale.TimeZoneList'): typeof ಠ_ಠ.clutz.goog.locale.TimeZoneList;
}
declare module 'goog:goog.locale.TimeZoneList' {
  import alias = ಠ_ಠ.clutz.goog.locale.TimeZoneList;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
  /**
   * List of codes for countries valid today.
   */
  var countries : string [] ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.locale.countries'): typeof ಠ_ಠ.clutz.goog.locale.countries;
}
declare module 'goog:goog.locale.countries' {
  import alias = ಠ_ಠ.clutz.goog.locale.countries;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale.defaultLocaleNameConstants {
  var COUNTRY : Object ;
  var LANGUAGE : Object ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.locale.defaultLocaleNameConstants'): typeof ಠ_ಠ.clutz.goog.locale.defaultLocaleNameConstants;
}
declare module 'goog:goog.locale.defaultLocaleNameConstants' {
  import alias = ಠ_ಠ.clutz.goog.locale.defaultLocaleNameConstants;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale.genericFontNames {
  /**
   * Gets the list of fonts and their generic names for the given locale.
   * @param locale The locale for which font lists and font family names to be produced. The expected locale id is as described in http://wiki/Main/IIISynonyms in all lowercase for easy matching. Smallest possible id is expected. Examples: 'zh', 'zh-tw', 'iw' instead of 'zh-CN', 'zh-Hant-TW', 'he'.
   */
  function getList (locale : string ) : ( Object | null ) [] | null ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.locale.genericFontNames'): typeof ಠ_ಠ.clutz.goog.locale.genericFontNames;
}
declare module 'goog:goog.locale.genericFontNames' {
  import alias = ಠ_ಠ.clutz.goog.locale.genericFontNames;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
  /**
   * Map from script code or language code to list of pairs of (generic name,
   * font name fallback list).
   */
  var genericFontNamesData : { [ key: string ]: string [] [] } ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.locale.genericFontNamesData'): typeof ಠ_ಠ.clutz.goog.locale.genericFontNamesData;
}
declare module 'goog:goog.locale.genericFontNamesData' {
  import alias = ಠ_ಠ.clutz.goog.locale.genericFontNamesData;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
  /**
   * Native country and language names
   */
  var nativeNameConstants : { [ key: string ]: { [ key: string ]: string } } ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.locale.nativeNameConstants'): typeof ಠ_ಠ.clutz.goog.locale.nativeNameConstants;
}
declare module 'goog:goog.locale.nativeNameConstants' {
  import alias = ಠ_ಠ.clutz.goog.locale.nativeNameConstants;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
  /**
   * The script code to list of language codes map.
   */
  var scriptToLanguages : { [ key: string ]: string [] } ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.locale.scriptToLanguages'): typeof ಠ_ಠ.clutz.goog.locale.scriptToLanguages;
}
declare module 'goog:goog.locale.scriptToLanguages' {
  import alias = ಠ_ಠ.clutz.goog.locale.scriptToLanguages;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale.timeZoneDetection {
  /**
   * Detects browser's time zone setting. If user's country is known, a better
   * time zone choice could be guessed.
   * @param opt_country Two-letter ISO 3166 country code.
   * @param opt_date Date for calculating the fingerprint. Defaults to the current date.
   */
  function detectTimeZone (opt_country ? : string , opt_date ? : Date | null ) : string ;
  /**
   * Calculates time zone fingerprint by poking time zone offsets for 13
   * preselected time points.
   * See {@link goog.locale.timeZoneDetection.TZ_POKE_POINTS_}
   * @param date Date for calculating the fingerprint.
   */
  function getFingerprint (date : Date | null ) : number ;
  /**
   * Returns an array of time zones that are consistent with user's platform
   * setting. If user's country is given, only the time zone for that country is
   * returned.
   * @param opt_country 2 letter ISO 3166 country code. Helps in making a better guess for user's time zone.
   * @param opt_date Date for retrieving timezone list. Defaults to the current date.
   */
  function getTimeZoneList (opt_country ? : string , opt_date ? : Date | null ) : string [] ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.locale.timeZoneDetection'): typeof ಠ_ಠ.clutz.goog.locale.timeZoneDetection;
}
declare module 'goog:goog.locale.timeZoneDetection' {
  import alias = ಠ_ಠ.clutz.goog.locale.timeZoneDetection;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.log {
  var ENABLED : boolean ;
  var ROOT_LOGGER_NAME : string ;
  /**
   * Adds a handler to the logger. This doesn't use the event system because
   * we want to be able to add logging to the event system.
   * @param handler Handler function to add.
   */
  function addHandler (logger : ಠ_ಠ.clutz.goog.debug.Logger | null , handler : ( ( ...a : any [] ) => any ) | null ) : void ;
  /**
   * Logs a message at the Level.SEVERE level.
   * If the logger is currently enabled for the given message level then the
   * given message is forwarded to all the registered output Handler objects.
   * @param msg The message to log.
   * @param opt_exception An exception associated with the message.
   */
  function error (logger : ಠ_ಠ.clutz.goog.debug.Logger | null , msg : string | ( ( ) => string ) , opt_exception ? : GlobalError | null ) : void ;
  /**
   * Logs a message at the Level.Fine level.
   * If the logger is currently enabled for the given message level then the
   * given message is forwarded to all the registered output Handler objects.
   * @param msg The message to log.
   * @param opt_exception An exception associated with the message.
   */
  function fine (logger : ಠ_ಠ.clutz.goog.debug.Logger | null , msg : string | ( ( ) => string ) , opt_exception ? : GlobalError | null ) : void ;
  /**
   * Finds or creates a logger for a named subsystem. If a logger has already been
   * created with the given name it is returned. Otherwise a new logger is
   * created. If a new logger is created its log level will be configured based
   * on the goog.debug.LogManager configuration and it will configured to also
   * send logging output to its parent's handlers.
   * @param name A name for the logger. This should be a dot-separated name and should normally be based on the package name or class name of the subsystem, such as goog.net.BrowserChannel.
   * @param opt_level If provided, override the default logging level with the provided level.
   */
  function getLogger (name : string , opt_level ? : ಠ_ಠ.clutz.goog.debug.Logger.Level | null ) : ಠ_ಠ.clutz.goog.debug.Logger | null ;
  /**
   * Logs a message at the Level.INFO level.
   * If the logger is currently enabled for the given message level then the
   * given message is forwarded to all the registered output Handler objects.
   * @param msg The message to log.
   * @param opt_exception An exception associated with the message.
   */
  function info (logger : ಠ_ಠ.clutz.goog.debug.Logger | null , msg : string | ( ( ) => string ) , opt_exception ? : GlobalError | null ) : void ;
  /**
   * Logs a message. If the logger is currently enabled for the
   * given message level then the given message is forwarded to all the
   * registered output Handler objects.
   * @param level One of the level identifiers.
   * @param msg The message to log.
   * @param opt_exception An exception associated with the message.
   */
  function log (logger : ಠ_ಠ.clutz.goog.debug.Logger | null , level : ಠ_ಠ.clutz.goog.debug.Logger.Level | null , msg : string | ( ( ) => string ) , opt_exception ? : null | Object ) : void ;
  /**
   * Removes a handler from the logger. This doesn't use the event system because
   * we want to be able to add logging to the event system.
   * @param handler Handler function to remove.
   */
  function removeHandler (logger : ಠ_ಠ.clutz.goog.debug.Logger | null , handler : ( ( ...a : any [] ) => any ) | null ) : boolean ;
  /**
   * Logs a message at the Level.WARNING level.
   * If the logger is currently enabled for the given message level then the
   * given message is forwarded to all the registered output Handler objects.
   * @param msg The message to log.
   * @param opt_exception An exception associated with the message.
   */
  function warning (logger : ಠ_ಠ.clutz.goog.debug.Logger | null , msg : string | ( ( ) => string ) , opt_exception ? : GlobalError | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.log'): typeof ಠ_ಠ.clutz.goog.log;
}
declare module 'goog:goog.log' {
  import alias = ಠ_ಠ.clutz.goog.log;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.log {
  type Level = ಠ_ಠ.clutz.goog.debug.Logger.Level ;
  var Level : typeof ಠ_ಠ.clutz.goog.debug.Logger.Level ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.log.Level'): typeof ಠ_ಠ.clutz.goog.log.Level;
}
declare module 'goog:goog.log.Level' {
  import alias = ಠ_ಠ.clutz.goog.log.Level;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.log {
  type LogRecord = ಠ_ಠ.clutz.goog.debug.LogRecord ;
  var LogRecord : typeof ಠ_ಠ.clutz.goog.debug.LogRecord ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.log.LogRecord'): typeof ಠ_ಠ.clutz.goog.log.LogRecord;
}
declare module 'goog:goog.log.LogRecord' {
  import alias = ಠ_ಠ.clutz.goog.log.LogRecord;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.log {
  type Logger = ಠ_ಠ.clutz.goog.debug.Logger ;
  var Logger : typeof ಠ_ಠ.clutz.goog.debug.Logger ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.log.Logger'): typeof ಠ_ಠ.clutz.goog.log.Logger;
}
declare module 'goog:goog.log.Logger' {
  import alias = ಠ_ಠ.clutz.goog.log.Logger;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Computes the angle between two points (x1,y1) and (x2,y2).
   * Angle zero points in the +X direction, 90 degrees points in the +Y
   * direction (down) and from there we grow clockwise towards 360 degrees.
   * @param x1 x of first point.
   * @param y1 y of first point.
   * @param x2 x of second point.
   * @param y2 y of second point.
   */
  function angle (x1 : number , y1 : number , x2 : number , y2 : number ) : number ;
  /**
   * Computes the difference between startAngle and endAngle (angles in degrees).
   * @param startAngle Start angle in degrees.
   * @param endAngle End angle in degrees.
   */
  function angleDifference (startAngle : number , endAngle : number ) : number ;
  /**
   * For a given angle and radius, finds the X portion of the offset.
   * @param degrees Angle in degrees (zero points in +X direction).
   * @param radius Radius.
   */
  function angleDx (degrees : number , radius : number ) : number ;
  /**
   * For a given angle and radius, finds the Y portion of the offset.
   * @param degrees Angle in degrees (zero points in +X direction).
   * @param radius Radius.
   */
  function angleDy (degrees : number , radius : number ) : number ;
  /**
   * Returns the arithmetic mean of the arguments.
   * @param var_args Numbers to average.
   */
  function average ( ...var_args : ( number | undefined ) [] ) : number ;
  /**
   * Takes a number and clamps it to within the provided bounds.
   * @param value The input number.
   * @param min The minimum value to return.
   * @param max The maximum value to return.
   */
  function clamp (value : number , min : number , max : number ) : number ;
  /**
   * Returns whether the supplied number is finite and not NaN.
   * @param num The number to test.
   */
  function isFiniteNumber (num : number ) : boolean ;
  /**
   * Returns whether the supplied number represents an integer, i.e. that is has
   * no fractional component.  No range-checking is performed on the number.
   * @param num The number to test.
   */
  function isInt (num : number ) : boolean ;
  function isNegativeZero (num : number ) : boolean ;
  /**
   * Performs linear interpolation between values a and b. Returns the value
   * between a and b proportional to x (when x is between 0 and 1. When x is
   * outside this range, the return value is a linear extrapolation).
   * @param a A number.
   * @param b A number.
   * @param x The proportion between a and b.
   */
  function lerp (a : number , b : number , x : number ) : number ;
  /**
   * Returns the precise value of floor(log10(num)).
   * Simpler implementations didn't work because of floating point rounding
   * errors. For example
   * <ul>
   * <li>Math.floor(Math.log(num) / Math.LN10) is off by one for num == 1e+3.
   * <li>Math.floor(Math.log(num) * Math.LOG10E) is off by one for num == 1e+15.
   * <li>Math.floor(Math.log10(num)) is off by one for num == 1e+15 - 1.
   * </ul>
   * @param num A floating point number.
   */
  function log10Floor (num : number ) : number ;
  /**
   * JavaScript implementation of Longest Common Subsequence problem.
   * http://en.wikipedia.org/wiki/Longest_common_subsequence
   *
   * Returns the longest possible array that is subarray of both of given arrays.
   * @param array1 First array of objects.
   * @param array2 Second array of objects.
   * @param opt_compareFn Function that acts as a custom comparator for the array ojects. Function should return true if objects are equal, otherwise false.
   * @param opt_collectorFn Function used to decide what to return as a result subsequence. It accepts 2 arguments: index of common element in the first array and index in the second. The default function returns element from the first array.
   */
  function longestCommonSubsequence < S , T > (array1 : IArrayLike < S > | null , array2 : IArrayLike < T > | null , opt_compareFn ? : ( ( ...a : any [] ) => any ) | null , opt_collectorFn ? : ( ( ...a : any [] ) => any ) | null ) : ( S | T ) [] ;
  /**
   * The % operator in JavaScript returns the remainder of a / b, but differs from
   * some other languages in that the result will have the same sign as the
   * dividend. For example, -1 % 8 == -1, whereas in some other languages
   * (such as Python) the result would be 7. This function emulates the more
   * correct modulo behavior, which is useful for certain applications such as
   * calculating an offset index in a circular list.
   * @param a The dividend.
   * @param b The divisor.
   */
  function modulo (a : number , b : number ) : number ;
  /**
   * Tests whether the two values are equal to each other, within a certain
   * tolerance to adjust for floating point errors.
   * @param a A number.
   * @param b A number.
   * @param opt_tolerance Optional tolerance range. Defaults to 0.000001. If specified, should be greater than 0.
   */
  function nearlyEquals (a : number , b : number , opt_tolerance ? : number ) : boolean ;
  /**
   * Returns a random integer greater than or equal to 0 and less than {@code a}.
   * @param a The upper bound for the random integer (exclusive).
   */
  function randomInt (a : number ) : number ;
  /**
   * A tweaked variant of {@code Math.ceil}. See {@code goog.math.safeFloor} for
   * details.
   * @param num A number.
   * @param opt_epsilon An infinitesimally small positive number, the rounding error to tolerate.
   */
  function safeCeil (num : number , opt_epsilon ? : number ) : number ;
  /**
   * A tweaked variant of {@code Math.floor} which tolerates if the passed number
   * is infinitesimally smaller than the closest integer. It often happens with
   * the results of floating point calculations because of the finite precision
   * of the intermediate results. For example {@code Math.floor(Math.log(1000) /
   * Math.LN10) == 2}, not 3 as one would expect.
   * @param num A number.
   * @param opt_epsilon An infinitesimally small positive number, the rounding error to tolerate.
   */
  function safeFloor (num : number , opt_epsilon ? : number ) : number ;
  /**
   * Returns the unbiased sample variance of the arguments. For a definition,
   * see e.g. http://en.wikipedia.org/wiki/Variance
   * @param var_args Number samples to analyze.
   */
  function sampleVariance ( ...var_args : ( number | undefined ) [] ) : number ;
  /**
   * Returns the sign of a number as per the "sign" or "signum" function.
   * @param x The number to take the sign of.
   */
  function sign (a : number ) : number ;
  /**
   * Normalizes an angle to be in range [0-360). Angles outside this range will
   * be normalized to be the equivalent angle with that range.
   * @param angle Angle in degrees.
   */
  function standardAngle (angle : number ) : number ;
  /**
   * Normalizes an angle to be in range [0-2*PI). Angles outside this range will
   * be normalized to be the equivalent angle with that range.
   * @param angle Angle in radians.
   */
  function standardAngleInRadians (angle : number ) : number ;
  /**
   * Returns the sample standard deviation of the arguments.  For a definition of
   * sample standard deviation, see e.g.
   * http://en.wikipedia.org/wiki/Standard_deviation
   * @param var_args Number samples to analyze.
   */
  function standardDeviation ( ...var_args : ( number | undefined ) [] ) : number ;
  /**
   * Returns the sum of the arguments.
   * @param var_args Numbers to add.
   */
  function sum ( ...var_args : ( number | undefined ) [] ) : number ;
  /**
   * Converts radians to degrees.
   * @param angleRadians Angle in radians.
   */
  function toDegrees (angleRadians : number ) : number ;
  /**
   * Converts degrees to radians.
   * @param angleDegrees Angle in degrees.
   */
  function toRadians (angleDegrees : number ) : number ;
  /**
   * Returns a random number greater than or equal to {@code a} and less than
   * {@code b}.
   * @param a The lower bound for the random number (inclusive).
   * @param b The upper bound for the random number (exclusive).
   */
  function uniformRandom (a : number , b : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math'): typeof ಠ_ಠ.clutz.goog.math;
}
declare module 'goog:goog.math' {
  import alias = ಠ_ಠ.clutz.goog.math;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Creates a 2D affine transform. An affine transform performs a linear
   * mapping from 2D coordinates to other 2D coordinates that preserves the
   * "straightness" and "parallelness" of lines.
   *
   * Such a coordinate transformation can be represented by a 3 row by 3 column
   * matrix with an implied last row of [ 0 0 1 ]. This matrix transforms source
   * coordinates (x,y) into destination coordinates (x',y') by considering them
   * to be a column vector and multiplying the coordinate vector by the matrix
   * according to the following process:
   * <pre>
   * [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
   * [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
   * [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]
   * </pre>
   *
   * This class is optimized for speed and minimizes calculations based on its
   * knowledge of the underlying matrix (as opposed to say simply performing
   * matrix multiplication).
   */
  class AffineTransform extends AffineTransform_Instance {
    /**
     * Creates a transform representing a rotation transformation.
     * @param theta The angle of rotation measured in radians.
     * @param x The x coordinate of the anchor point.
     * @param y The y coordinate of the anchor point.
     */
    static getRotateInstance (theta : number , x : number , y : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Creates a transform representing a scaling transformation.
     * @param sx The x-axis scaling factor.
     * @param sy The y-axis scaling factor.
     */
    static getScaleInstance (sx : number , sy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Creates a transform representing a shearing transformation.
     * @param shx The x-axis shear factor.
     * @param shy The y-axis shear factor.
     */
    static getShearInstance (shx : number , shy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Creates a transform representing a translation transformation.
     * @param dx The distance to translate in the x direction.
     * @param dy The distance to translate in the y direction.
     */
    static getTranslateInstance (dx : number , dy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
  }
  class AffineTransform_Instance {
    private noStructuralTyping_: any;
    /**
     * Creates a 2D affine transform. An affine transform performs a linear
     * mapping from 2D coordinates to other 2D coordinates that preserves the
     * "straightness" and "parallelness" of lines.
     *
     * Such a coordinate transformation can be represented by a 3 row by 3 column
     * matrix with an implied last row of [ 0 0 1 ]. This matrix transforms source
     * coordinates (x,y) into destination coordinates (x',y') by considering them
     * to be a column vector and multiplying the coordinate vector by the matrix
     * according to the following process:
     * <pre>
     * [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
     * [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
     * [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]
     * </pre>
     *
     * This class is optimized for speed and minimizes calculations based on its
     * knowledge of the underlying matrix (as opposed to say simply performing
     * matrix multiplication).
     * @param opt_m00 The m00 coordinate of the transform.
     * @param opt_m10 The m10 coordinate of the transform.
     * @param opt_m01 The m01 coordinate of the transform.
     * @param opt_m11 The m11 coordinate of the transform.
     * @param opt_m02 The m02 coordinate of the transform.
     * @param opt_m12 The m12 coordinate of the transform.
     */
    constructor (opt_m00 ? : number , opt_m10 ? : number , opt_m01 ? : number , opt_m11 ? : number , opt_m02 ? : number , opt_m12 ? : number ) ;
    m00_ : number ;
    m01_ : number ;
    m02_ : number ;
    m10_ : number ;
    m11_ : number ;
    m12_ : number ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Concatenates an affine transform to this transform.
     * @param tx The transform to concatenate.
     */
    concatenate (tx : ಠ_ಠ.clutz.goog.math.AffineTransform ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Sets this transform to be identical to the given transform.
     * @param tx The transform to copy.
     */
    copyFrom (tx : ಠ_ಠ.clutz.goog.math.AffineTransform ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    createInverse ( ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Compares two affine transforms for equality.
     * @param tx The other affine transform.
     */
    equals (tx : ಠ_ಠ.clutz.goog.math.AffineTransform | null ) : boolean ;
    getDeterminant ( ) : number ;
    getScaleX ( ) : number ;
    getScaleY ( ) : number ;
    getShearX ( ) : number ;
    getShearY ( ) : number ;
    getTranslateX ( ) : number ;
    getTranslateY ( ) : number ;
    isIdentity ( ) : boolean ;
    /**
     * Returns whether the transform is invertible. A transform is not invertible
     * if the determinant is 0 or any value is non-finite or NaN.
     */
    isInvertible ( ) : boolean ;
    /**
     * Pre-concatenates an affine transform to this transform.
     * @param tx The transform to preconcatenate.
     */
    preConcatenate (tx : ಠ_ಠ.clutz.goog.math.AffineTransform ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Pre-concatenates this transform with a rotation transformation around an
     * anchor point.
     * @param theta The angle of rotation measured in radians.
     * @param x The x coordinate of the anchor point.
     * @param y The y coordinate of the anchor point.
     */
    preRotate (theta : number , x : number , y : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Pre-concatenates this transform with a scaling transformation,
     * i.e. calculates the following matrix product:
     *
     * <pre>
     * [sx  0 0] [m00 m01 m02]
     * [ 0 sy 0] [m10 m11 m12]
     * [ 0  0 1] [  0   0   1]
     * </pre>
     * @param sx The x-axis scaling factor.
     * @param sy The y-axis scaling factor.
     */
    preScale (sx : number , sy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Pre-concatenates this transform with a shear transformation.
     * i.e. calculates the following matrix product:
     *
     * <pre>
     * [  1 shx 0] [m00 m01 m02]
     * [shy   1 0] [m10 m11 m12]
     * [  0   0 1] [  0   0   1]
     * </pre>
     * @param shx The x shear factor.
     * @param shy The y shear factor.
     */
    preShear (shx : number , shy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Pre-concatenates this transform with a translate transformation,
     * i.e. calculates the following matrix product:
     *
     * <pre>
     * [1 0 dx] [m00 m01 m02]
     * [0 1 dy] [m10 m11 m12]
     * [0 0  1] [  0   0   1]
     * </pre>
     * @param dx The distance to translate in the x direction.
     * @param dy The distance to translate in the y direction.
     */
    preTranslate (dx : number , dy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Concatenates this transform with a rotation transformation around an anchor
     * point.
     * @param theta The angle of rotation measured in radians.
     * @param x The x coordinate of the anchor point.
     * @param y The y coordinate of the anchor point.
     */
    rotate (theta : number , x : number , y : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Concatenates this transform with a scaling transformation.
     * @param sx The x-axis scaling factor.
     * @param sy The y-axis scaling factor.
     */
    scale (sx : number , sy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Sets this transform to a rotation transformation.
     * @param theta The angle of rotation measured in radians.
     * @param x The x coordinate of the anchor point.
     * @param y The y coordinate of the anchor point.
     */
    setToRotation (theta : number , x : number , y : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Sets this transform to a scaling transformation.
     * @param sx The x-axis scaling factor.
     * @param sy The y-axis scaling factor.
     */
    setToScale (sx : number , sy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Sets this transform to a shearing transformation.
     * @param shx The x-axis shear factor.
     * @param shy The y-axis shear factor.
     */
    setToShear (shx : number , shy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Sets this transform to a translation transformation.
     * @param dx The distance to translate in the x direction.
     * @param dy The distance to translate in the y direction.
     */
    setToTranslation (dx : number , dy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Sets this transform to the matrix specified by the 6 values.
     * @param m00 The m00 coordinate of the transform.
     * @param m10 The m10 coordinate of the transform.
     * @param m01 The m01 coordinate of the transform.
     * @param m11 The m11 coordinate of the transform.
     * @param m02 The m02 coordinate of the transform.
     * @param m12 The m12 coordinate of the transform.
     */
    setTransform (m00 : number , m10 : number , m01 : number , m11 : number , m02 : number , m12 : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Concatenates this transform with a shear transformation.
     * @param shx The x shear factor.
     * @param shy The y shear factor.
     */
    shear (shx : number , shy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    toString ( ) : string ;
    /**
     * Transforms an array of coordinates by this transform and stores the result
     * into a destination array.
     * @param src The array containing the source points as x, y value pairs.
     * @param srcOff The offset to the first point to be transformed.
     * @param dst The array into which to store the transformed point pairs.
     * @param dstOff The offset of the location of the first transformed point in the destination array.
     * @param numPts The number of points to transform.
     */
    transform (src : number [] , srcOff : number , dst : number [] , dstOff : number , numPts : number ) : void ;
    /**
     * Concatenates this transform with a translate transformation.
     * @param dx The distance to translate in the x direction.
     * @param dy The distance to translate in the y direction.
     */
    translate (dx : number , dy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.AffineTransform'): typeof ಠ_ಠ.clutz.goog.math.AffineTransform;
}
declare module 'goog:goog.math.AffineTransform' {
  import alias = ಠ_ಠ.clutz.goog.math.AffineTransform;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Object representing a cubic bezier curve.
   */
  class Bezier extends Bezier_Instance {
    /**
     * Constant used to approximate ellipses.
     * See: http://canvaspaint.org/blog/2006/12/ellipse/
     */
    static KAPPA : number ;
  }
  class Bezier_Instance {
    private noStructuralTyping_: any;
    /**
     * Object representing a cubic bezier curve.
     * @param x0 X coordinate of the start point.
     * @param y0 Y coordinate of the start point.
     * @param x1 X coordinate of the first control point.
     * @param y1 Y coordinate of the first control point.
     * @param x2 X coordinate of the second control point.
     * @param y2 Y coordinate of the second control point.
     * @param x3 X coordinate of the end point.
     * @param y3 Y coordinate of the end point.
     */
    constructor (x0 : number , y0 : number , x1 : number , y1 : number , x2 : number , y2 : number , x3 : number , y3 : number ) ;
    /**
     * X coordinate of the first point.
     */
    x0 : number ;
    /**
     * X coordinate of the first control point.
     */
    x1 : number ;
    /**
     * X coordinate of the second control point.
     */
    x2 : number ;
    /**
     * X coordinate of the end point.
     */
    x3 : number ;
    /**
     * Y coordinate of the first point.
     */
    y0 : number ;
    /**
     * Y coordinate of the first control point.
     */
    y1 : number ;
    /**
     * Y coordinate of the second control point.
     */
    y2 : number ;
    /**
     * Y coordinate of the end point.
     */
    y3 : number ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.Bezier ;
    /**
     * Test if the given curve is exactly the same as this one.
     * @param other The other curve.
     */
    equals (other : ಠ_ಠ.clutz.goog.math.Bezier | null ) : boolean ;
    /**
     * Modifies the curve in place to progress in the opposite direction.
     */
    flip ( ) : void ;
    /**
     * Computes the curve at a point between 0 and 1.
     * @param t The point on the curve to find.
     */
    getPoint (t : number ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Computes the curve's X coordinate at a point between 0 and 1.
     * @param t The point on the curve to find.
     */
    getPointX (t : number ) : number ;
    /**
     * Computes the curve's Y coordinate at a point between 0 and 1.
     * @param t The point on the curve to find.
     */
    getPointY (t : number ) : number ;
    /**
     * Computes the position t of a point on the curve given its x coordinate.
     * That is, for an input xVal, finds t s.t. getPointX(t) = xVal.
     * As such, the following should always be true up to some small epsilon:
     * t ~ solvePositionFromXValue(getPointX(t)) for t in [0, 1].
     * @param xVal The x coordinate of the point to find on the curve.
     */
    solvePositionFromXValue (xVal : number ) : number ;
    /**
     * Computes the y coordinate of a point on the curve given its x coordinate.
     * @param xVal The x coordinate of the point on the curve.
     */
    solveYValueFromXValue (xVal : number ) : number ;
    /**
     * Changes this curve in place to be the portion of itself from [s, t].
     * @param s The start of the desired portion of the curve.
     * @param t The end of the desired portion of the curve.
     */
    subdivide (s : number , t : number ) : void ;
    /**
     * Changes this curve in place to be the portion of itself from [t, 1].
     * @param t The start of the desired portion of the curve.
     */
    subdivideLeft (t : number ) : void ;
    /**
     * Changes this curve in place to be the portion of itself from [0, t].
     * @param t The end of the desired portion of the curve.
     */
    subdivideRight (t : number ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Bezier'): typeof ಠ_ಠ.clutz.goog.math.Bezier;
}
declare module 'goog:goog.math.Bezier' {
  import alias = ಠ_ಠ.clutz.goog.math.Bezier;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Class for representing a box. A box is specified as a top, right, bottom,
   * and left. A box is useful for representing margins and padding.
   *
   * This class assumes 'screen coordinates': larger Y coordinates are further
   * from the top of the screen.
   */
  class Box extends Box_Instance {
    /**
     * Creates a Box by bounding a collection of goog.math.Coordinate objects
     * @param var_args Coordinates to be included inside the box.
     */
    static boundingBox ( ...var_args : ( ಠ_ಠ.clutz.goog.math.Coordinate | null | undefined ) [] ) : ಠ_ಠ.clutz.goog.math.Box ;
    /**
     * Returns whether a box contains a coordinate or another box.
     * @param box A Box.
     * @param other A Coordinate or a Box.
     */
    static contains (box : ಠ_ಠ.clutz.goog.math.Box | null , other : ಠ_ಠ.clutz.goog.math.Coordinate | null | ಠ_ಠ.clutz.goog.math.Box ) : boolean ;
    /**
     * Returns the distance between a coordinate and the nearest corner/side of a
     * box. Returns zero if the coordinate is inside the box.
     * @param box A Box.
     * @param coord A Coordinate.
     */
    static distance (box : ಠ_ಠ.clutz.goog.math.Box | null , coord : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : number ;
    /**
     * Compares boxes for equality.
     * @param a A Box.
     * @param b A Box.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.Box | null , b : ಠ_ಠ.clutz.goog.math.Box | null ) : boolean ;
    /**
     * Returns whether two boxes intersect.
     * @param a A Box.
     * @param b A second Box.
     */
    static intersects (a : ಠ_ಠ.clutz.goog.math.Box | null , b : ಠ_ಠ.clutz.goog.math.Box | null ) : boolean ;
    /**
     * Returns whether two boxes would intersect with additional padding.
     * @param a A Box.
     * @param b A second Box.
     * @param padding The additional padding.
     */
    static intersectsWithPadding (a : ಠ_ಠ.clutz.goog.math.Box | null , b : ಠ_ಠ.clutz.goog.math.Box | null , padding : number ) : boolean ;
    /**
     * Returns the relative x position of a coordinate compared to a box.  Returns
     * zero if the coordinate is inside the box.
     * @param box A Box.
     * @param coord A Coordinate.
     */
    static relativePositionX (box : ಠ_ಠ.clutz.goog.math.Box | null , coord : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : number ;
    /**
     * Returns the relative y position of a coordinate compared to a box.  Returns
     * zero if the coordinate is inside the box.
     * @param box A Box.
     * @param coord A Coordinate.
     */
    static relativePositionY (box : ಠ_ಠ.clutz.goog.math.Box | null , coord : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : number ;
  }
  class Box_Instance {
    private noStructuralTyping_: any;
    /**
     * Class for representing a box. A box is specified as a top, right, bottom,
     * and left. A box is useful for representing margins and padding.
     *
     * This class assumes 'screen coordinates': larger Y coordinates are further
     * from the top of the screen.
     * @param top Top.
     * @param right Right.
     * @param bottom Bottom.
     * @param left Left.
     */
    constructor (top : number , right : number , bottom : number , left : number ) ;
    /**
     * Bottom
     */
    bottom : number ;
    /**
     * Left
     */
    left : number ;
    /**
     * Right
     */
    right : number ;
    /**
     * Top
     */
    top : number ;
    /**
     * Rounds the fields to the next larger integer values.
     */
    ceil ( ) : ಠ_ಠ.clutz.goog.math.Box ;
    /**
     * Creates a copy of the box with the same dimensions.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.math.Box ;
    /**
     * Returns whether the box contains a coordinate or another box.
     * @param other A Coordinate or a Box.
     */
    contains (other : ಠ_ಠ.clutz.goog.math.Coordinate | null | ಠ_ಠ.clutz.goog.math.Box ) : boolean ;
    /**
     * Expands box with the given margins.
     * @param top Top margin or box with all margins.
     * @param opt_right Right margin.
     * @param opt_bottom Bottom margin.
     * @param opt_left Left margin.
     */
    expand (top : number | ಠ_ಠ.clutz.goog.math.Box | null , opt_right ? : number , opt_bottom ? : number , opt_left ? : number ) : ಠ_ಠ.clutz.goog.math.Box ;
    /**
     * Expand this box to include another box.
     * NOTE(user): This is used in code that needs to be very fast, please don't
     * add functionality to this function at the expense of speed (variable
     * arguments, accepting multiple argument types, etc).
     * @param box The box to include in this one.
     */
    expandToInclude (box : ಠ_ಠ.clutz.goog.math.Box | null ) : void ;
    /**
     * Expand this box to include the coordinate.
     * @param coord The coordinate to be included inside the box.
     */
    expandToIncludeCoordinate (coord : ಠ_ಠ.clutz.goog.math.Coordinate ) : void ;
    /**
     * Rounds the fields to the next smaller integer values.
     */
    floor ( ) : ಠ_ಠ.clutz.goog.math.Box ;
    getHeight ( ) : number ;
    getWidth ( ) : number ;
    /**
     * Rounds the fields to nearest integer values.
     */
    round ( ) : ಠ_ಠ.clutz.goog.math.Box ;
    /**
     * Scales this coordinate by the given scale factors. The x and y dimension
     * values are scaled by {@code sx} and {@code opt_sy} respectively.
     * If {@code opt_sy} is not given, then {@code sx} is used for both x and y.
     * @param sx The scale factor to use for the x dimension.
     * @param opt_sy The scale factor to use for the y dimension.
     */
    scale (sx : number , opt_sy ? : number ) : ಠ_ಠ.clutz.goog.math.Box ;
    /**
     * Returns a nice string representing the box.
     */
    toString ( ) : string ;
    /**
     * Translates this box by the given offsets. If a {@code goog.math.Coordinate}
     * is given, then the left and right values are translated by the coordinate's
     * x value and the top and bottom values are translated by the coordinate's y
     * value.  Otherwise, {@code tx} and {@code opt_ty} are used to translate the x
     * and y dimension values.
     * @param tx The value to translate the x dimension values by or the the coordinate to translate this box by.
     * @param opt_ty The value to translate y dimension values by.
     */
    translate (tx : number | ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_ty ? : number ) : ಠ_ಠ.clutz.goog.math.Box ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Box'): typeof ಠ_ಠ.clutz.goog.math.Box;
}
declare module 'goog:goog.math.Box' {
  import alias = ಠ_ಠ.clutz.goog.math.Box;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Class for representing coordinates and positions.
   */
  class Coordinate extends Coordinate_Instance {
    /**
     * Returns the angle from the origin to a coordinate.
     * @param a A Coordinate.
     */
    static azimuth (a : ಠ_ಠ.clutz.goog.math.Coordinate ) : number ;
    /**
     * Returns the difference between two coordinates as a new
     * goog.math.Coordinate.
     * @param a A Coordinate.
     * @param b A Coordinate.
     */
    static difference (a : ಠ_ಠ.clutz.goog.math.Coordinate , b : ಠ_ಠ.clutz.goog.math.Coordinate ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Returns the distance between two coordinates.
     * @param a A Coordinate.
     * @param b A Coordinate.
     */
    static distance (a : ಠ_ಠ.clutz.goog.math.Coordinate , b : ಠ_ಠ.clutz.goog.math.Coordinate ) : number ;
    /**
     * Compares coordinates for equality.
     * @param a A Coordinate.
     * @param b A Coordinate.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.Coordinate | null , b : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : boolean ;
    /**
     * Returns the magnitude of a coordinate.
     * @param a A Coordinate.
     */
    static magnitude (a : ಠ_ಠ.clutz.goog.math.Coordinate ) : number ;
    /**
     * Returns the squared distance between two coordinates. Squared distances can
     * be used for comparisons when the actual value is not required.
     *
     * Performance note: eliminating the square root is an optimization often used
     * in lower-level languages, but the speed difference is not nearly as
     * pronounced in JavaScript (only a few percent.)
     * @param a A Coordinate.
     * @param b A Coordinate.
     */
    static squaredDistance (a : ಠ_ಠ.clutz.goog.math.Coordinate , b : ಠ_ಠ.clutz.goog.math.Coordinate ) : number ;
    /**
     * Returns the sum of two coordinates as a new goog.math.Coordinate.
     * @param a A Coordinate.
     * @param b A Coordinate.
     */
    static sum (a : ಠ_ಠ.clutz.goog.math.Coordinate , b : ಠ_ಠ.clutz.goog.math.Coordinate ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  }
  class Coordinate_Instance {
    private noStructuralTyping_: any;
    /**
     * Class for representing coordinates and positions.
     * @param opt_x Left, defaults to 0.
     * @param opt_y Top, defaults to 0.
     */
    constructor (opt_x ? : number , opt_y ? : number ) ;
    /**
     * X-value
     */
    x : number ;
    /**
     * Y-value
     */
    y : number ;
    /**
     * Rounds the x and y fields to the next larger integer values.
     */
    ceil ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Returns a new copy of the coordinate.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Rounds the x and y fields to the next smaller integer values.
     */
    floor ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Rotates this coordinate clockwise about the origin (or, optionally, the given
     * center) by the given angle, in degrees.
     * @param degrees The angle by which to rotate this coordinate clockwise about the given center, in degrees.
     * @param opt_center The center of rotation. Defaults to (0, 0) if not given.
     */
    rotateDegrees (degrees : number , opt_center ? : ಠ_ಠ.clutz.goog.math.Coordinate ) : void ;
    /**
     * Rotates this coordinate clockwise about the origin (or, optionally, the given
     * center) by the given angle, in radians.
     * @param radians The angle by which to rotate this coordinate clockwise about the given center, in radians.
     * @param opt_center The center of rotation. Defaults to (0, 0) if not given.
     */
    rotateRadians (radians : number , opt_center ? : ಠ_ಠ.clutz.goog.math.Coordinate ) : void ;
    /**
     * Rounds the x and y fields to the nearest integer values.
     */
    round ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Scales this coordinate by the given scale factors. The x and y values are
     * scaled by {@code sx} and {@code opt_sy} respectively.  If {@code opt_sy}
     * is not given, then {@code sx} is used for both x and y.
     * @param sx The scale factor to use for the x dimension.
     * @param opt_sy The scale factor to use for the y dimension.
     */
    scale (sx : number , opt_sy ? : number ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Returns a nice string representing the coordinate.
     */
    toString ( ) : string ;
    /**
     * Translates this box by the given offsets. If a {@code goog.math.Coordinate}
     * is given, then the x and y values are translated by the coordinate's x and y.
     * Otherwise, x and y are translated by {@code tx} and {@code opt_ty}
     * respectively.
     * @param tx The value to translate x by or the the coordinate to translate this coordinate by.
     * @param opt_ty The value to translate y by.
     */
    translate (tx : number | ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_ty ? : number ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Coordinate'): typeof ಠ_ಠ.clutz.goog.math.Coordinate;
}
declare module 'goog:goog.math.Coordinate' {
  import alias = ಠ_ಠ.clutz.goog.math.Coordinate;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Class for representing coordinates and positions in 3 dimensions.
   */
  class Coordinate3 extends Coordinate3_Instance {
    /**
     * Returns the difference between two coordinates as a new
     * goog.math.Coordinate3.
     * @param a A Coordinate3.
     * @param b A Coordinate3.
     */
    static difference (a : ಠ_ಠ.clutz.goog.math.Coordinate3 | null , b : ಠ_ಠ.clutz.goog.math.Coordinate3 | null ) : ಠ_ಠ.clutz.goog.math.Coordinate3 ;
    /**
     * Returns the distance between two coordinates.
     * @param a A Coordinate3.
     * @param b A Coordinate3.
     */
    static distance (a : ಠ_ಠ.clutz.goog.math.Coordinate3 | null , b : ಠ_ಠ.clutz.goog.math.Coordinate3 | null ) : number ;
    /**
     * Compares coordinates for equality.
     * @param a A Coordinate3.
     * @param b A Coordinate3.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.Coordinate3 | null , b : ಠ_ಠ.clutz.goog.math.Coordinate3 | null ) : boolean ;
    /**
     * Converts a three element array into a Coordinate3 object.  If the value
     * passed in is not an array, not array-like, or not of the right length, an
     * error is thrown.
     * @param a Array of numbers to become a coordinate.
     */
    static fromArray (a : number [] | null ) : ಠ_ಠ.clutz.goog.math.Coordinate3 ;
    /**
     * Returns the squared distance between two coordinates. Squared distances can
     * be used for comparisons when the actual value is not required.
     *
     * Performance note: eliminating the square root is an optimization often used
     * in lower-level languages, but the speed difference is not nearly as
     * pronounced in JavaScript (only a few percent.)
     * @param a A Coordinate3.
     * @param b A Coordinate3.
     */
    static squaredDistance (a : ಠ_ಠ.clutz.goog.math.Coordinate3 | null , b : ಠ_ಠ.clutz.goog.math.Coordinate3 | null ) : number ;
  }
  class Coordinate3_Instance {
    private noStructuralTyping_: any;
    /**
     * Class for representing coordinates and positions in 3 dimensions.
     * @param opt_x X coordinate, defaults to 0.
     * @param opt_y Y coordinate, defaults to 0.
     * @param opt_z Z coordinate, defaults to 0.
     */
    constructor (opt_x ? : number , opt_y ? : number , opt_z ? : number ) ;
    /**
     * X-value
     */
    x : number ;
    /**
     * Y-value
     */
    y : number ;
    /**
     * Z-value
     */
    z : number ;
    /**
     * Returns a new copy of the coordinate.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.math.Coordinate3 ;
    /**
     * Returns the contents of this coordinate as a 3 value Array.
     */
    toArray ( ) : number [] ;
    /**
     * Returns a nice string representing the coordinate.
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Coordinate3'): typeof ಠ_ಠ.clutz.goog.math.Coordinate3;
}
declare module 'goog:goog.math.Coordinate3' {
  import alias = ಠ_ಠ.clutz.goog.math.Coordinate3;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  class ExponentialBackoff extends ExponentialBackoff_Instance {
  }
  class ExponentialBackoff_Instance {
    private noStructuralTyping_: any;
    constructor (initialValue : number , maxValue : number , opt_randomFactor ? : number , opt_backoffFactor ? : number , opt_decayFactor ? : number ) ;
    /**
     * Initiates a backoff.
     */
    backoff ( ) : void ;
    /**
     * Initiates a decay.
     */
    decay ( ) : void ;
    getBackoffCount ( ) : number ;
    getDecayCount ( ) : number ;
    getValue ( ) : number ;
    /**
     * Resets the backoff value to its initial value.
     */
    reset ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.ExponentialBackoff'): typeof ಠ_ಠ.clutz.goog.math.ExponentialBackoff;
}
declare module 'goog:goog.math.ExponentialBackoff' {
  import alias = ಠ_ಠ.clutz.goog.math.ExponentialBackoff;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Record for representing rectangular regions, allows compatibility between
   * things like ClientRect and goog.math.Rect.
   */
  interface IRect {
    height : number ;
    left : number ;
    top : number ;
    width : number ;
  }
}
declare module 'goog:goog.math.IRect' {
  import alias = ಠ_ಠ.clutz.goog.math.IRect;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Constructs a two's-complement integer an array containing bits of the
   * integer in 32-bit (signed) pieces, given in little-endian order (i.e.,
   * lowest-order bits in the first piece), and the sign of -1 or 0.
   *
   * See the from* functions below for other convenient ways of constructing
   * Integers.
   *
   * The internal representation of an integer is an array of 32-bit signed
   * pieces, along with a sign (0 or -1) that indicates the contents of all the
   * other 32-bit pieces out to infinity.  We use 32-bit pieces because these are
   * the size of integers on which Javascript performs bit-operations.  For
   * operations like addition and multiplication, we split each number into 16-bit
   * pieces, which can easily be multiplied within Javascript's floating-point
   * representation without overflow or change in sign.
   */
  class Integer extends Integer_Instance {
    static ONE : ಠ_ಠ.clutz.goog.math.Integer ;
    static ZERO : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns a Integer representing the value that comes by concatenating the
     * given entries, each is assumed to be 32 signed bits, given in little-endian
     * order (lowest order bits in the lowest index), and sign-extending the highest
     * order 32-bit value.
     * @param bits The bits of the number, in 32-bit signed pieces, in little-endian order.
     */
    static fromBits (bits : number [] | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns an Integer representing the given (32-bit) integer value.
     * @param value A 32-bit integer value.
     */
    static fromInt (value : number ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns an Integer representing the given value, provided that it is a finite
     * number.  Otherwise, zero is returned.
     * @param value The value in question.
     */
    static fromNumber (value : number ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns an Integer representation of the given string, written using the
     * given radix.
     * @param str The textual representation of the Integer.
     * @param opt_radix The radix in which the text is written.
     */
    static fromString (str : string , opt_radix ? : number ) : ಠ_ಠ.clutz.goog.math.Integer ;
  }
  class Integer_Instance {
    private noStructuralTyping_: any;
    /**
     * Constructs a two's-complement integer an array containing bits of the
     * integer in 32-bit (signed) pieces, given in little-endian order (i.e.,
     * lowest-order bits in the first piece), and the sign of -1 or 0.
     *
     * See the from* functions below for other convenient ways of constructing
     * Integers.
     *
     * The internal representation of an integer is an array of 32-bit signed
     * pieces, along with a sign (0 or -1) that indicates the contents of all the
     * other 32-bit pieces out to infinity.  We use 32-bit pieces because these are
     * the size of integers on which Javascript performs bit-operations.  For
     * operations like addition and multiplication, we split each number into 16-bit
     * pieces, which can easily be multiplied within Javascript's floating-point
     * representation without overflow or change in sign.
     * @param bits Array containing the bits of the number.
     * @param sign The sign of the number: -1 for negative and 0 positive.
     */
    constructor (bits : number [] | null , sign : number ) ;
    /**
     * Returns the sum of this and the given Integer.
     * @param other The Integer to add to this.
     */
    add (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns the bitwise-AND of this Integer and the given one.
     * @param other The Integer to AND with this.
     */
    and (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Compares this Integer with the given one.
     * @param other Integer to compare against.
     */
    compare (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : number ;
    /**
     * Returns this Integer divided by the given one.
     * @param other The Integer to divide this by.
     */
    divide (other : ಠ_ಠ.clutz.goog.math.Integer ) : ಠ_ಠ.clutz.goog.math.Integer ;
    equals (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : boolean ;
    /**
     * Returns the index-th 32-bit (signed) piece of the Integer according to
     * little-endian order (i.e., index 0 contains the smallest bits).
     * @param index The index in question.
     */
    getBits (index : number ) : number ;
    /**
     * Returns the index-th 32-bit piece as an unsigned number.
     * @param index The index in question.
     */
    getBitsUnsigned (index : number ) : number ;
    getSign ( ) : number ;
    greaterThan (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : boolean ;
    greaterThanOrEqual (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : boolean ;
    isNegative ( ) : boolean ;
    isOdd ( ) : boolean ;
    isZero ( ) : boolean ;
    lessThan (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : boolean ;
    lessThanOrEqual (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : boolean ;
    /**
     * Returns this Integer modulo the given one.
     * @param other The Integer by which to mod.
     */
    modulo (other : ಠ_ಠ.clutz.goog.math.Integer ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns the product of this and the given Integer.
     * @param other The Integer to multiply against this.
     */
    multiply (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
    negate ( ) : ಠ_ಠ.clutz.goog.math.Integer ;
    not ( ) : ಠ_ಠ.clutz.goog.math.Integer ;
    notEquals (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : boolean ;
    /**
     * Returns the bitwise-OR of this Integer and the given one.
     * @param other The Integer to OR with this.
     */
    or (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns this value with bits shifted to the left by the given amount.
     * @param numBits The number of bits by which to shift.
     */
    shiftLeft (numBits : number ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns this value with bits shifted to the right by the given amount.
     * @param numBits The number of bits by which to shift.
     */
    shiftRight (numBits : number ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns an integer with only the first numBits bits of this value, sign
     * extended from the final bit.
     * @param numBits The number of bits by which to shift.
     */
    shorten (numBits : number ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns the difference of this and the given Integer.
     * @param other The Integer to subtract from this.
     */
    subtract (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns the value, assuming it is a 32-bit integer.
     */
    toInt ( ) : number ;
    toNumber ( ) : number ;
    toString (opt_radix ? : number ) : string ;
    /**
     * Returns the bitwise-XOR of this Integer and the given one.
     * @param other The Integer to XOR with this.
     */
    xor (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Integer'): typeof ಠ_ಠ.clutz.goog.math.Integer;
}
declare module 'goog:goog.math.Integer' {
  import alias = ಠ_ಠ.clutz.goog.math.Integer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Object representing a line.
   */
  class Line extends Line_Instance {
  }
  class Line_Instance {
    private noStructuralTyping_: any;
    /**
     * Object representing a line.
     * @param x0 X coordinate of the start point.
     * @param y0 Y coordinate of the start point.
     * @param x1 X coordinate of the end point.
     * @param y1 Y coordinate of the end point.
     */
    constructor (x0 : number , y0 : number , x1 : number , y1 : number ) ;
    /**
     * X coordinate of the first point.
     */
    x0 : number ;
    /**
     * X coordinate of the first control point.
     */
    x1 : number ;
    /**
     * Y coordinate of the first point.
     */
    y0 : number ;
    /**
     * Y coordinate of the first control point.
     */
    y1 : number ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.Line ;
    /**
     * Tests whether the given line is exactly the same as this one.
     * @param other The other line.
     */
    equals (other : ಠ_ಠ.clutz.goog.math.Line | null ) : boolean ;
    /**
     * Computes the point on the line closest to a given point.  Note that a line
     * in this case is defined as the infinite line going through the start and end
     * points.  To find the closest point on the line segment itself see
     * {@see #getClosestSegmentPoint}.
     * @param x The x coordinate of the point, or a coordinate object.
     * @param opt_y The y coordinate of the point - required if x is a number, ignored if x is a goog.math.Coordinate.
     */
    getClosestPoint (x : number | ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_y ? : number ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Computes the point on the line segment closest to a given point.
     * @param x The x coordinate of the point, or a coordinate object.
     * @param opt_y The y coordinate of the point - required if x is a number, ignored if x is a goog.math.Coordinate.
     */
    getClosestSegmentPoint (x : number | ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_y ? : number ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Returns the point on the line segment proportional to t, where for t = 0 we
     * return the starting point and for t = 1 we return the end point.  For t < 0
     * or t > 1 we extrapolate along the line defined by the line segment.
     * @param t The interpolation parameter along the line segment.
     */
    getInterpolatedPoint (t : number ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    getSegmentLength ( ) : number ;
    getSegmentLengthSquared ( ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Line'): typeof ಠ_ಠ.clutz.goog.math.Line;
}
declare module 'goog:goog.math.Line' {
  import alias = ಠ_ಠ.clutz.goog.math.Line;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   */
  class Long extends Long_Instance {
    /**
     * Returns a Long representing the 64-bit integer that comes by concatenating
     * the given high and low bits.  Each is assumed to use 32 bits.
     * @param lowBits The low 32-bits.
     * @param highBits The high 32-bits.
     */
    static fromBits (lowBits : number , highBits : number ) : ಠ_ಠ.clutz.goog.math.Long ;
    /**
     * Returns a Long representing the given (32-bit) integer value.
     * @param value The 32-bit integer in question.
     */
    static fromInt (value : number ) : ಠ_ಠ.clutz.goog.math.Long ;
    /**
     * Returns a Long representing the given value.
     * NaN will be returned as zero. Infinity is converted to max value and
     * -Infinity to min value.
     * @param value The number in question.
     */
    static fromNumber (value : number ) : ಠ_ಠ.clutz.goog.math.Long ;
    /**
     * Returns a Long representation of the given string, written using the given
     * radix.
     * @param str The textual representation of the Long.
     * @param opt_radix The radix in which the text is written.
     */
    static fromString (str : string , opt_radix ? : number ) : ಠ_ಠ.clutz.goog.math.Long ;
    static getMaxValue ( ) : ಠ_ಠ.clutz.goog.math.Long ;
    static getMinValue ( ) : ಠ_ಠ.clutz.goog.math.Long ;
    static getNegOne ( ) : ಠ_ಠ.clutz.goog.math.Long ;
    static getOne ( ) : ಠ_ಠ.clutz.goog.math.Long ;
    static getTwoPwr24 ( ) : ಠ_ಠ.clutz.goog.math.Long ;
    static getZero ( ) : ಠ_ಠ.clutz.goog.math.Long ;
  }
  class Long_Instance {
    private noStructuralTyping_: any;
    /**
     * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
     * values as *signed* integers.  See the from* functions below for more
     * convenient ways of constructing Longs.
     *
     * The internal representation of a long is the two given signed, 32-bit values.
     * We use 32-bit pieces because these are the size of integers on which
     * Javascript performs bit-operations.  For operations like addition and
     * multiplication, we split each number into 16-bit pieces, which can easily be
     * multiplied within Javascript's floating-point representation without overflow
     * or change in sign.
     *
     * In the algorithms below, we frequently reduce the negative case to the
     * positive case by negating the input(s) and then post-processing the result.
     * Note that we must ALWAYS check specially whether those values are MIN_VALUE
     * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
     * a positive number, it overflows back into a negative).  Not handling this
     * case would often result in infinite recursion.
     * @param low The low (signed) 32 bits of the long.
     * @param high The high (signed) 32 bits of the long.
     */
    constructor (low : number , high : number ) ;
    /**
     * Returns the sum of this and the given Long.
     * @param other Long to add to this one.
     */
    add (other : ಠ_ಠ.clutz.goog.math.Long | null ) : ಠ_ಠ.clutz.goog.math.Long ;
    /**
     * Returns the bitwise-AND of this Long and the given one.
     * @param other The Long with which to AND.
     */
    and (other : ಠ_ಠ.clutz.goog.math.Long | null ) : ಠ_ಠ.clutz.goog.math.Long ;
    /**
     * Compares this Long with the given one.
     * @param other Long to compare against.
     */
    compare (other : ಠ_ಠ.clutz.goog.math.Long | null ) : number ;
    /**
     * Returns this Long divided by the given one.
     * @param other Long by which to divide.
     */
    div (other : ಠ_ಠ.clutz.goog.math.Long | null ) : ಠ_ಠ.clutz.goog.math.Long ;
    equals (other : ಠ_ಠ.clutz.goog.math.Long | null ) : boolean ;
    getHighBits ( ) : number ;
    getLowBits ( ) : number ;
    getLowBitsUnsigned ( ) : number ;
    getNumBitsAbs ( ) : number ;
    greaterThan (other : ಠ_ಠ.clutz.goog.math.Long | null ) : boolean ;
    greaterThanOrEqual (other : ಠ_ಠ.clutz.goog.math.Long | null ) : boolean ;
    isNegative ( ) : boolean ;
    isOdd ( ) : boolean ;
    isZero ( ) : boolean ;
    lessThan (other : ಠ_ಠ.clutz.goog.math.Long | null ) : boolean ;
    lessThanOrEqual (other : ಠ_ಠ.clutz.goog.math.Long | null ) : boolean ;
    /**
     * Returns this Long modulo the given one.
     * @param other Long by which to mod.
     */
    modulo (other : ಠ_ಠ.clutz.goog.math.Long | null ) : ಠ_ಠ.clutz.goog.math.Long ;
    /**
     * Returns the product of this and the given long.
     * @param other Long to multiply with this.
     */
    multiply (other : ಠ_ಠ.clutz.goog.math.Long | null ) : ಠ_ಠ.clutz.goog.math.Long ;
    negate ( ) : ಠ_ಠ.clutz.goog.math.Long ;
    not ( ) : ಠ_ಠ.clutz.goog.math.Long ;
    notEquals (other : ಠ_ಠ.clutz.goog.math.Long | null ) : boolean ;
    /**
     * Returns the bitwise-OR of this Long and the given one.
     * @param other The Long with which to OR.
     */
    or (other : ಠ_ಠ.clutz.goog.math.Long | null ) : ಠ_ಠ.clutz.goog.math.Long ;
    /**
     * Returns this Long with bits shifted to the left by the given amount.
     * @param numBits The number of bits by which to shift.
     */
    shiftLeft (numBits : number ) : ಠ_ಠ.clutz.goog.math.Long ;
    /**
     * Returns this Long with bits shifted to the right by the given amount.
     * The new leading bits match the current sign bit.
     * @param numBits The number of bits by which to shift.
     */
    shiftRight (numBits : number ) : ಠ_ಠ.clutz.goog.math.Long ;
    /**
     * Returns this Long with bits shifted to the right by the given amount, with
     * zeros placed into the new leading bits.
     * @param numBits The number of bits by which to shift.
     */
    shiftRightUnsigned (numBits : number ) : ಠ_ಠ.clutz.goog.math.Long ;
    /**
     * Returns the difference of this and the given Long.
     * @param other Long to subtract from this.
     */
    subtract (other : ಠ_ಠ.clutz.goog.math.Long | null ) : ಠ_ಠ.clutz.goog.math.Long ;
    toInt ( ) : number ;
    toNumber ( ) : number ;
    toString (opt_radix ? : number ) : string ;
    /**
     * Returns the bitwise-XOR of this Long and the given one.
     * @param other The Long with which to XOR.
     */
    xor (other : ಠ_ಠ.clutz.goog.math.Long | null ) : ಠ_ಠ.clutz.goog.math.Long ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Long'): typeof ಠ_ಠ.clutz.goog.math.Long;
}
declare module 'goog:goog.math.Long' {
  import alias = ಠ_ಠ.clutz.goog.math.Long;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Class for representing and manipulating matrices.
   *
   * The entry that lies in the i-th row and the j-th column of a matrix is
   * typically referred to as the i,j entry of the matrix.
   *
   * The m-by-n matrix A would have its entries referred to as:
   * [ a0,0   a0,1   a0,2   ...   a0,j  ...  a0,n ]
   * [ a1,0   a1,1   a1,2   ...   a1,j  ...  a1,n ]
   * [ a2,0   a2,1   a2,2   ...   a2,j  ...  a2,n ]
   * [  .      .      .            .          .   ]
   * [  .      .      .            .          .   ]
   * [  .      .      .            .          .   ]
   * [ ai,0   ai,1   ai,2   ...   ai,j  ...  ai,n ]
   * [  .      .      .            .          .   ]
   * [  .      .      .            .          .   ]
   * [  .      .      .            .          .   ]
   * [ am,0   am,1   am,2   ...   am,j  ...  am,n ]
   */
  class Matrix extends Matrix_Instance {
    /**
     * Creates a square identity matrix. i.e. for n = 3:
     * <pre>
     * [ 1 0 0 ]
     * [ 0 1 0 ]
     * [ 0 0 1 ]
     * </pre>
     * @param n The size of the square identity matrix.
     */
    static createIdentityMatrix (n : number ) : ಠ_ಠ.clutz.goog.math.Matrix ;
    /**
     * Calls a function for each cell in a matrix.
     * @param matrix The matrix to iterate over.
     * @param fn The function to call for every element. This function takes 4 arguments (value, i, j, and the matrix) and the return value is irrelevant.
     * @param opt_obj The object to be used as the value of 'this' within {@code fn}.
     */
    static forEach < T > (matrix : ಠ_ಠ.clutz.goog.math.Matrix | null , fn : (a : number , b : number , c : number , d : ಠ_ಠ.clutz.goog.math.Matrix ) => any , opt_obj ? : T ) : void ;
    /**
     * Tests whether an array is a valid matrix.  A valid array is an array of
     * arrays where all arrays are of the same length and all elements are numbers.
     * @param arr An array to test.
     */
    static isValidArray (arr : number [] [] ) : boolean ;
    /**
     * Calls a function for every cell in a matrix and inserts the result into a
     * new matrix of equal dimensions.
     * @param matrix The matrix to iterate over.
     * @param fn The function to call for every element. This function takes 4 arguments (value, i, j and the matrix) and should return a number, which will be inserted into a new matrix.
     * @param opt_obj The object to be used as the value of 'this' within {@code fn}.
     */
    static map < T > (matrix : ಠ_ಠ.clutz.goog.math.Matrix , fn : (a : number , b : number , c : number , d : ಠ_ಠ.clutz.goog.math.Matrix ) => number , opt_obj ? : T ) : ಠ_ಠ.clutz.goog.math.Matrix ;
  }
  class Matrix_Instance {
    private noStructuralTyping_: any;
    /**
     * Class for representing and manipulating matrices.
     *
     * The entry that lies in the i-th row and the j-th column of a matrix is
     * typically referred to as the i,j entry of the matrix.
     *
     * The m-by-n matrix A would have its entries referred to as:
     * [ a0,0   a0,1   a0,2   ...   a0,j  ...  a0,n ]
     * [ a1,0   a1,1   a1,2   ...   a1,j  ...  a1,n ]
     * [ a2,0   a2,1   a2,2   ...   a2,j  ...  a2,n ]
     * [  .      .      .            .          .   ]
     * [  .      .      .            .          .   ]
     * [  .      .      .            .          .   ]
     * [ ai,0   ai,1   ai,2   ...   ai,j  ...  ai,n ]
     * [  .      .      .            .          .   ]
     * [  .      .      .            .          .   ]
     * [  .      .      .            .          .   ]
     * [ am,0   am,1   am,2   ...   am,j  ...  am,n ]
     * @param m A matrix to copy, a 2D-array to take as a template, a size object for dimensions, or the number of rows.
     * @param opt_n Number of columns of the matrix (only applicable if the first argument is also numeric).
     */
    constructor (m : ಠ_ಠ.clutz.goog.math.Matrix | number [] [] | ಠ_ಠ.clutz.goog.math.Size | number , opt_n ? : number ) ;
    /**
     * Returns a new matrix that is the sum of this and the provided matrix.
     * @param m The matrix to add to this one.
     */
    add (m : ಠ_ಠ.clutz.goog.math.Matrix | null ) : ಠ_ಠ.clutz.goog.math.Matrix ;
    /**
     * Appends the given matrix to the right side of this matrix.
     * @param m The matrix to augment this matrix with.
     */
    appendColumns (m : ಠ_ಠ.clutz.goog.math.Matrix | null ) : ಠ_ಠ.clutz.goog.math.Matrix ;
    /**
     * Appends the given matrix to the bottom of this matrix.
     * @param m The matrix to augment this matrix with.
     */
    appendRows (m : ಠ_ಠ.clutz.goog.math.Matrix | null ) : ಠ_ಠ.clutz.goog.math.Matrix ;
    /**
     * Returns whether the given matrix equals this matrix.
     * @param m The matrix to compare to this one.
     * @param opt_tolerance The tolerance when comparing array entries.
     */
    equals (m : ಠ_ಠ.clutz.goog.math.Matrix | null , opt_tolerance ? : number ) : boolean ;
    /**
     * Returns the determinant of this matrix.  The determinant of a matrix A is
     * often denoted as |A| and can only be applied to a square matrix.
     */
    getDeterminant ( ) : number ;
    /**
     * Returns the inverse of this matrix if it exists or null if the matrix is
     * not invertible.
     */
    getInverse ( ) : ಠ_ಠ.clutz.goog.math.Matrix | null ;
    /**
     * Transforms this matrix into reduced row echelon form.
     */
    getReducedRowEchelonForm ( ) : ಠ_ಠ.clutz.goog.math.Matrix ;
    getSize ( ) : ಠ_ಠ.clutz.goog.math.Size ;
    /**
     * Return the transpose of this matrix.  For an m-by-n matrix, the transpose
     * is the n-by-m matrix which results from turning rows into columns and columns
     * into rows
     */
    getTranspose ( ) : ಠ_ಠ.clutz.goog.math.Matrix ;
    /**
     * Retrieves the value of a particular coordinate in the matrix or null if the
     * requested coordinates are out of range.
     * @param i The i index of the coordinate.
     * @param j The j index of the coordinate.
     */
    getValueAt (i : number , j : number ) : number | null ;
    isSquare ( ) : boolean ;
    /**
     * Performs matrix or scalar multiplication on a matrix and returns the
     * resultant matrix.
     *
     * Matrix multiplication is defined between two matrices only if the number of
     * columns of the first matrix is the same as the number of rows of the second
     * matrix. If A is an m-by-n matrix and B is an n-by-p matrix, then their
     * product AB is an m-by-p matrix
     *
     * Scalar multiplication returns a matrix of the same size as the original,
     * each value multiplied by the given value.
     * @param m Matrix/number to multiply the matrix by.
     */
    multiply (m : ಠ_ಠ.clutz.goog.math.Matrix | null | number ) : ಠ_ಠ.clutz.goog.math.Matrix ;
    /**
     * Sets the value at a particular coordinate (if the coordinate is within the
     * bounds of the matrix).
     * @param i The i index of the coordinate.
     * @param j The j index of the coordinate.
     * @param value The new value for the coordinate.
     */
    setValueAt (i : number , j : number , value : number ) : void ;
    /**
     * Returns a new matrix that is the difference of this and the provided matrix.
     * @param m The matrix to subtract from this one.
     */
    subtract (m : ಠ_ಠ.clutz.goog.math.Matrix | null ) : ಠ_ಠ.clutz.goog.math.Matrix ;
    toArray ( ) : number [] [] ;
    /**
     * Returns a string representation of the matrix.  e.g.
     * <pre>
     * [ 12  5  9  1 ]
     * [  4 16  0 17 ]
     * [ 12  5  1 23 ]
     * </pre>
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Matrix'): typeof ಠ_ಠ.clutz.goog.math.Matrix;
}
declare module 'goog:goog.math.Matrix' {
  import alias = ಠ_ಠ.clutz.goog.math.Matrix;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Creates a path object. A path is a sequence of segments and may be open or
   * closed. Path uses the EVEN-ODD fill rule for determining the interior of the
   * path. A path must start with a moveTo command.
   *
   * A "simple" path does not contain any arcs and may be transformed using
   * the {@code transform} method.
   */
  class Path extends Path_Instance {
    /**
     * Creates a copy of the given path, replacing {@code arcTo} with
     * {@code arcToAsCurves}. The resulting path is simplified and can
     * be transformed.
     * @param src The path to simplify.
     */
    static createSimplifiedPath (src : ಠ_ಠ.clutz.goog.math.Path ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Returns the number of points for a segment type.
     * @param segment The segment type.
     */
    static getSegmentCount (segment : number ) : number ;
  }
  class Path_Instance {
    private noStructuralTyping_: any;
    /**
     * Appends another path to the end of this path.
     * @param path The path to append.
     */
    appendPath (path : ಠ_ಠ.clutz.goog.math.Path ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds a path command to draw an arc centered at the point {@code (cx, cy)}
     * with radius {@code rx} along the x-axis and {@code ry} along the y-axis from
     * {@code startAngle} through {@code extent} degrees. Positive rotation is in
     * the direction from positive x-axis to positive y-axis.
     * @param cx X coordinate of center of ellipse.
     * @param cy Y coordinate of center of ellipse.
     * @param rx Radius of ellipse on x axis.
     * @param ry Radius of ellipse on y axis.
     * @param fromAngle Starting angle measured in degrees from the positive x-axis.
     * @param extent The span of the arc in degrees.
     * @param connect If true, the starting point of the arc is connected to the current point.
     */
    arc (cx : number , cy : number , rx : number , ry : number , fromAngle : number , extent : number , connect : boolean ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds a path command to draw an arc starting at the path's current point,
     * with radius {@code rx} along the x-axis and {@code ry} along the y-axis from
     * {@code startAngle} through {@code extent} degrees. Positive rotation is in
     * the direction from positive x-axis to positive y-axis.
     *
     * This method makes the path non-simple.
     * @param rx Radius of ellipse on x axis.
     * @param ry Radius of ellipse on y axis.
     * @param fromAngle Starting angle measured in degrees from the positive x-axis.
     * @param extent The span of the arc in degrees.
     */
    arcTo (rx : number , ry : number , fromAngle : number , extent : number ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Same as {@code arcTo}, but approximates the arc using bezier curves.
     * .* As a result, this method does not affect the simplified status of this path.
     * The algorithm is adapted from {@code java.awt.geom.ArcIterator}.
     * @param rx Radius of ellipse on x axis.
     * @param ry Radius of ellipse on y axis.
     * @param fromAngle Starting angle measured in degrees from the positive x-axis.
     * @param extent The span of the arc in degrees.
     */
    arcToAsCurves (rx : number , ry : number , fromAngle : number , extent : number ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Clears the path.
     */
    clear ( ) : ಠ_ಠ.clutz.goog.math.Path ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds a path command to close the path by connecting the
     * last point to the first point.
     */
    close ( ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Creates a transformed copy of this path. The path is simplified
     * {@see #createSimplifiedPath} prior to transformation.
     * @param tx The transformation to perform.
     */
    createTransformedPath (tx : ಠ_ಠ.clutz.goog.math.AffineTransform ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds points to the path by drawing cubic Bezier curves. Each curve is
     * specified using 3 points (6 coordinates) - two control points and the end
     * point of the curve.
     * @param var_args The coordinates specifying each curve in sets of 6 points: {@code [x1, y1]} the first control point, {@code [x2, y2]} the second control point and {@code [x, y]} the end point.
     */
    curveTo ( ...var_args : ( number | undefined ) [] ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds points to the path by drawing cubic Bezier curves. Each curve is
     * specified using 3 points (6 coordinates) - two control points and the end
     * point of the curve.
     * @param coordinates The coordinates specifying each curve in sets of 6 points: {@code [x1, y1]} the first control point, {@code [x2, y2]} the second control point and {@code [x, y]} the end point.
     */
    curveToFromArray (coordinates : number [] ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Iterates over the path calling the supplied callback once for each path
     * segment. The arguments to the callback function are the segment type and
     * an array of its arguments.
     *
     * The {@code LINETO} and {@code CURVETO} arrays can contain multiple
     * segments of the same type. The number of segments is the length of the
     * array divided by the segment length (2 for lines, 6 for  curves).
     *
     * As a convenience the {@code ARCTO} segment also includes the end point as the
     * last two arguments: {@code rx, ry, fromAngle, extent, x, y}.
     * @param callback The function to call with each path segment.
     */
    forEachSegment (callback : (a : ಠ_ಠ.clutz.goog.math.Path.Segment , b : number [] ) => any ) : void ;
    /**
     * Returns the coordinates most recently added to the end of the path.
     */
    getCurrentPoint ( ) : number [] | null ;
    /**
     * Returns an array of all arguments for the segments of this path object, in
     * order. The returned array is a copy; modifications are not reflected in the
     * Path object.
     */
    getSegmentArgs ( ) : number [] ;
    /**
     * Returns an array of the number of times each segment type repeats in this
     * path, in order. The returned array is a copy; modifications are not reflected
     * in the Path object.
     */
    getSegmentCounts ( ) : number [] ;
    /**
     * Returns an array of the segment types in this path, in the order of their
     * appearance. Adjacent segments of the same type are collapsed into a single
     * entry in the array. The returned array is a copy; modifications are not
     * reflected in the Path object.
     */
    getSegmentTypes ( ) : number [] ;
    isEmpty ( ) : boolean ;
    /**
     * Returns true if this path contains no arcs. Simplified paths can be
     * created using {@code createSimplifiedPath}.
     */
    isSimple ( ) : boolean ;
    /**
     * Adds points to the path by drawing a straight line to each point.
     * @param var_args The coordinates of each destination point as x, y value pairs.
     */
    lineTo ( ...var_args : ( number | undefined ) [] ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds points to the path by drawing a straight line to each point.
     * @param coordinates The coordinates of each destination point as x, y value pairs.
     */
    lineToFromArray (coordinates : number [] ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds a point to the path by moving to the specified point. Repeated moveTo
     * commands are collapsed into a single moveTo.
     * @param x X coordinate of destination point.
     * @param y Y coordinate of destination point.
     */
    moveTo (x : number , y : number ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Transforms the path. Only simple paths are transformable. Attempting
     * to transform a non-simple path will throw an error.
     * @param tx The transformation to perform.
     */
    transform (tx : ಠ_ಠ.clutz.goog.math.AffineTransform ) : ಠ_ಠ.clutz.goog.math.Path ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Path'): typeof ಠ_ಠ.clutz.goog.math.Path;
}
declare module 'goog:goog.math.Path' {
  import alias = ಠ_ಠ.clutz.goog.math.Path;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.Path {
  /**
   * Path segment types.
   */
  type Segment = number ;
  var Segment : {
    ARCTO : Segment ,
    CLOSE : Segment ,
    CURVETO : Segment ,
    LINETO : Segment ,
    MOVETO : Segment ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Path.Segment'): typeof ಠ_ಠ.clutz.goog.math.Path.Segment;
}
declare module 'goog:goog.math.Path.Segment' {
  import alias = ಠ_ಠ.clutz.goog.math.Path.Segment;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * A number range.
   */
  class Range extends Range_Instance {
    /**
     * Given two ranges on the same dimension, this returns a range that covers
     * both ranges.
     * @param a A Range.
     * @param b A Range.
     */
    static boundingRange (a : ಠ_ಠ.clutz.goog.math.Range | null , b : ಠ_ಠ.clutz.goog.math.Range | null ) : ಠ_ಠ.clutz.goog.math.Range ;
    /**
     * Given two ranges, returns true if the first range completely overlaps the
     * second.
     * @param a The first Range.
     * @param b The second Range.
     */
    static contains (a : ಠ_ಠ.clutz.goog.math.Range | null , b : ಠ_ಠ.clutz.goog.math.Range | null ) : boolean ;
    /**
     * Given a range and a point, returns true if the range contains the point.
     * @param range The range.
     * @param p The point.
     */
    static containsPoint (range : ಠ_ಠ.clutz.goog.math.Range | null , p : number ) : boolean ;
    /**
     * Compares ranges for equality.
     * @param a A Range.
     * @param b A Range.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.Range | null , b : ಠ_ಠ.clutz.goog.math.Range | null ) : boolean ;
    /**
     * Creates a goog.math.Range from an array of two numbers.
     */
    static fromPair (pair : number [] ) : ಠ_ಠ.clutz.goog.math.Range ;
    /**
     * Given two ranges on the same dimension, determines whether they intersect.
     * @param a A Range.
     * @param b A Range.
     */
    static hasIntersection (a : ಠ_ಠ.clutz.goog.math.Range | null , b : ಠ_ಠ.clutz.goog.math.Range | null ) : boolean ;
    /**
     * Given two ranges on the same dimension, this method returns the intersection
     * of those ranges.
     * @param a A Range.
     * @param b A Range.
     */
    static intersection (a : ಠ_ಠ.clutz.goog.math.Range | null , b : ಠ_ಠ.clutz.goog.math.Range | null ) : ಠ_ಠ.clutz.goog.math.Range | null ;
  }
  class Range_Instance {
    private noStructuralTyping_: any;
    /**
     * A number range.
     * @param a One end of the range.
     * @param b The other end of the range.
     */
    constructor (a : number , b : number ) ;
    /**
     * The highest value in the range.
     */
    end : number ;
    /**
     * The lowest value in the range.
     */
    start : number ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.Range ;
    getLength ( ) : number ;
    /**
     * Extends this range to include the given point.
     */
    includePoint (point : number ) : void ;
    /**
     * Extends this range to include the given range.
     */
    includeRange (range : ಠ_ಠ.clutz.goog.math.Range ) : void ;
    /**
     * Returns a string representing the range.
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Range'): typeof ಠ_ಠ.clutz.goog.math.Range;
}
declare module 'goog:goog.math.Range' {
  import alias = ಠ_ಠ.clutz.goog.math.Range;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Constructs a new RangeSet, which can store numeric ranges.
   *
   * Ranges are treated as half-closed: that is, they are exclusive of their end
   * value [start, end).
   *
   * New ranges added to the set which overlap the values in one or more existing
   * ranges will be merged.
   */
  class RangeSet extends RangeSet_Instance {
    /**
     * Compares two sets for equality.
     * @param a A range set.
     * @param b A range set.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.RangeSet | null , b : ಠ_ಠ.clutz.goog.math.RangeSet | null ) : boolean ;
  }
  class RangeSet_Instance {
    private noStructuralTyping_: any;
    /**
     * Returns an iterator that iterates over the ranges in the RangeSet.
     * @param opt_keys Ignored for RangeSets.
     */
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.iter.Iterator < any > ;
    /**
     * Adds a range to the set. If the new range overlaps existing values, those
     * ranges will be merged.
     * @param a The range to add.
     */
    add (a : ಠ_ಠ.clutz.goog.math.Range | null ) : void ;
    /**
     * Removes all values in the set.
     */
    clear ( ) : void ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.RangeSet ;
    /**
     * Determines whether a given range is in the set. Only succeeds if the entire
     * range is available.
     * @param a The query range.
     */
    contains (a : ಠ_ಠ.clutz.goog.math.Range | null ) : boolean ;
    /**
     * Determines whether a given value is set in the RangeSet.
     * @param value The value to test.
     */
    containsValue (value : number ) : boolean ;
    coveredLength ( ) : number ;
    /**
     * Subtracts the ranges of another set from this one, returning the result
     * as a new RangeSet.
     * @param set The RangeSet to subtract.
     */
    difference (set : ಠ_ಠ.clutz.goog.math.RangeSet ) : ಠ_ಠ.clutz.goog.math.RangeSet ;
    getBounds ( ) : ಠ_ಠ.clutz.goog.math.Range | null ;
    /**
     * Intersects this RangeSet with another.
     * @param set The RangeSet to intersect with.
     */
    intersection (set : ಠ_ಠ.clutz.goog.math.RangeSet | null ) : ಠ_ಠ.clutz.goog.math.RangeSet ;
    /**
     * Creates an inverted slice of this set over the input range.
     * @param range The range to copy into the slice.
     */
    inverse (range : ಠ_ಠ.clutz.goog.math.Range | null ) : ಠ_ಠ.clutz.goog.math.RangeSet ;
    isEmpty ( ) : boolean ;
    /**
     * Removes a range of values from the set.
     * @param a The range to remove.
     */
    remove (a : ಠ_ಠ.clutz.goog.math.Range | null ) : void ;
    /**
     * Creates a subset of this set over the input range.
     * @param range The range to copy into the slice.
     */
    slice (range : ಠ_ಠ.clutz.goog.math.Range | null ) : ಠ_ಠ.clutz.goog.math.RangeSet ;
    toString ( ) : string ;
    /**
     * Returns the union of this RangeSet with another.
     * @param set Another RangeSet.
     */
    union (set : ಠ_ಠ.clutz.goog.math.RangeSet | null ) : ಠ_ಠ.clutz.goog.math.RangeSet ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.RangeSet'): typeof ಠ_ಠ.clutz.goog.math.RangeSet;
}
declare module 'goog:goog.math.RangeSet' {
  import alias = ಠ_ಠ.clutz.goog.math.RangeSet;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Class for representing rectangular regions.
   */
  class Rect extends Rect_Instance {
    /**
     * Returns a new rectangle which completely contains both input rectangles.
     * @param a A rectangle.
     * @param b A rectangle.
     */
    static boundingRect (a : ಠ_ಠ.clutz.goog.math.IRect | null , b : ಠ_ಠ.clutz.goog.math.IRect | null ) : ಠ_ಠ.clutz.goog.math.Rect | null ;
    /**
     * Creates a new Rect object with the same position and dimensions as a given
     * Box.  Note that this is only the inverse of toBox if left/top are defined.
     * @param box A box.
     */
    static createFromBox (box : ಠ_ಠ.clutz.goog.math.Box | null ) : ಠ_ಠ.clutz.goog.math.Rect ;
    /**
     * Creates a new Rect object with the position and size given.
     * @param position The top-left coordinate of the Rect
     * @param size The size of the Rect
     */
    static createFromPositionAndSize (position : ಠ_ಠ.clutz.goog.math.Coordinate , size : ಠ_ಠ.clutz.goog.math.Size ) : ಠ_ಠ.clutz.goog.math.Rect ;
    /**
     * Computes the difference regions between two rectangles. The return value is
     * an array of 0 to 4 rectangles defining the remaining regions of the first
     * rectangle after the second has been subtracted.
     * @param a A Rectangle.
     * @param b A Rectangle.
     */
    static difference (a : ಠ_ಠ.clutz.goog.math.Rect | null , b : ಠ_ಠ.clutz.goog.math.IRect | null ) : ಠ_ಠ.clutz.goog.math.Rect [] ;
    /**
     * Compares rectangles for equality.
     * @param a A Rectangle.
     * @param b A Rectangle.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.IRect | null , b : ಠ_ಠ.clutz.goog.math.IRect | null ) : boolean ;
    /**
     * Returns the intersection of two rectangles. Two rectangles intersect if they
     * touch at all, for example, two zero width and height rectangles would
     * intersect if they had the same top and left.
     * @param a A Rectangle.
     * @param b A Rectangle.
     */
    static intersection (a : ಠ_ಠ.clutz.goog.math.IRect | null , b : ಠ_ಠ.clutz.goog.math.IRect | null ) : ಠ_ಠ.clutz.goog.math.Rect | null ;
    /**
     * Returns whether two rectangles intersect. Two rectangles intersect if they
     * touch at all, for example, two zero width and height rectangles would
     * intersect if they had the same top and left.
     * @param a A Rectangle.
     * @param b A Rectangle.
     */
    static intersects (a : ಠ_ಠ.clutz.goog.math.IRect | null , b : ಠ_ಠ.clutz.goog.math.IRect | null ) : boolean ;
  }
  class Rect_Instance implements ಠ_ಠ.clutz.goog.math.IRect {
    private noStructuralTyping_: any;
    /**
     * Class for representing rectangular regions.
     * @param x Left.
     * @param y Top.
     * @param w Width.
     * @param h Height.
     */
    constructor (x : number , y : number , w : number , h : number ) ;
    height : number ;
    left : number ;
    top : number ;
    width : number ;
    /**
     * Expand this rectangle to also include the area of the given rectangle.
     * @param rect The other rectangle.
     */
    boundingRect (rect : ಠ_ಠ.clutz.goog.math.IRect | null ) : void ;
    /**
     * Rounds the fields to the next larger integer values.
     */
    ceil ( ) : ಠ_ಠ.clutz.goog.math.Rect ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.Rect ;
    /**
     * Tests whether this rectangle entirely contains another rectangle or
     * coordinate.
     * @param another The rectangle or coordinate to test for containment.
     */
    contains (another : ಠ_ಠ.clutz.goog.math.IRect | null | ಠ_ಠ.clutz.goog.math.Coordinate ) : boolean ;
    /**
     * Computes the difference regions between this rectangle and {@code rect}. The
     * return value is an array of 0 to 4 rectangles defining the remaining regions
     * of this rectangle after the other has been subtracted.
     * @param rect A Rectangle.
     */
    difference (rect : ಠ_ಠ.clutz.goog.math.IRect | null ) : ಠ_ಠ.clutz.goog.math.Rect [] ;
    distance (point : ಠ_ಠ.clutz.goog.math.Coordinate ) : number ;
    /**
     * Rounds the fields to the next smaller integer values.
     */
    floor ( ) : ಠ_ಠ.clutz.goog.math.Rect ;
    getBottomRight ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    getCenter ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    getSize ( ) : ಠ_ಠ.clutz.goog.math.Size ;
    getTopLeft ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Computes the intersection of this rectangle and the rectangle parameter.  If
     * there is no intersection, returns false and leaves this rectangle as is.
     * @param rect A Rectangle.
     */
    intersection (rect : ಠ_ಠ.clutz.goog.math.IRect | null ) : boolean ;
    /**
     * Returns whether a rectangle intersects this rectangle.
     * @param rect A rectangle.
     */
    intersects (rect : ಠ_ಠ.clutz.goog.math.IRect | null ) : boolean ;
    /**
     * Rounds the fields to nearest integer values.
     */
    round ( ) : ಠ_ಠ.clutz.goog.math.Rect ;
    /**
     * Scales this rectangle by the given scale factors. The left and width values
     * are scaled by {@code sx} and the top and height values are scaled by
     * {@code opt_sy}.  If {@code opt_sy} is not given, then all fields are scaled
     * by {@code sx}.
     * @param sx The scale factor to use for the x dimension.
     * @param opt_sy The scale factor to use for the y dimension.
     */
    scale (sx : number , opt_sy ? : number ) : ಠ_ಠ.clutz.goog.math.Rect ;
    squaredDistance (point : ಠ_ಠ.clutz.goog.math.Coordinate ) : number ;
    /**
     * Returns a new Box object with the same position and dimensions as this
     * rectangle.
     */
    toBox ( ) : ಠ_ಠ.clutz.goog.math.Box ;
    /**
     * Returns a nice string representing size and dimensions of rectangle.
     */
    toString ( ) : string ;
    /**
     * Translates this rectangle by the given offsets. If a
     * {@code goog.math.Coordinate} is given, then the left and top values are
     * translated by the coordinate's x and y values. Otherwise, top and left are
     * translated by {@code tx} and {@code opt_ty} respectively.
     * @param tx The value to translate left by or the the coordinate to translate this rect by.
     * @param opt_ty The value to translate top by.
     */
    translate (tx : number | ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_ty ? : number ) : ಠ_ಠ.clutz.goog.math.Rect ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Rect'): typeof ಠ_ಠ.clutz.goog.math.Rect;
}
declare module 'goog:goog.math.Rect' {
  import alias = ಠ_ಠ.clutz.goog.math.Rect;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Class for representing sizes consisting of a width and height. Undefined
   * width and height support is deprecated and results in compiler warning.
   */
  class Size extends Size_Instance {
    /**
     * Compares sizes for equality.
     * @param a A Size.
     * @param b A Size.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.Size | null , b : ಠ_ಠ.clutz.goog.math.Size | null ) : boolean ;
  }
  class Size_Instance {
    private noStructuralTyping_: any;
    /**
     * Class for representing sizes consisting of a width and height. Undefined
     * width and height support is deprecated and results in compiler warning.
     * @param width Width.
     * @param height Height.
     */
    constructor (width : number , height : number ) ;
    /**
     * Height
     */
    height : number ;
    /**
     * Width
     */
    width : number ;
    area ( ) : number ;
    aspectRatio ( ) : number ;
    /**
     * Clamps the width and height parameters upward to integer values.
     */
    ceil ( ) : ಠ_ಠ.clutz.goog.math.Size ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.Size ;
    fitsInside (target : ಠ_ಠ.clutz.goog.math.Size ) : boolean ;
    /**
     * Clamps the width and height parameters downward to integer values.
     */
    floor ( ) : ಠ_ಠ.clutz.goog.math.Size ;
    getLongest ( ) : number ;
    getShortest ( ) : number ;
    isEmpty ( ) : boolean ;
    perimeter ( ) : number ;
    /**
     * Rounds the width and height parameters to integer values.
     */
    round ( ) : ಠ_ಠ.clutz.goog.math.Size ;
    /**
     * Scales this size by the given scale factors. The width and height are scaled
     * by {@code sx} and {@code opt_sy} respectively.  If {@code opt_sy} is not
     * given, then {@code sx} is used for both the width and height.
     * @param sx The scale factor to use for the width.
     * @param opt_sy The scale factor to use for the height.
     */
    scale (sx : number , opt_sy ? : number ) : ಠ_ಠ.clutz.goog.math.Size ;
    /**
     * Uniformly scales the size to perfectly cover the dimensions of a given size.
     * If the size is already larger than the target, it will be scaled down to the
     * minimum size at which it still covers the entire target. The original aspect
     * ratio will be preserved.
     *
     * This function assumes that both Sizes contain strictly positive dimensions.
     * @param target The target size.
     */
    scaleToCover (target : ಠ_ಠ.clutz.goog.math.Size ) : ಠ_ಠ.clutz.goog.math.Size ;
    /**
     * Uniformly scales the size to fit inside the dimensions of a given size. The
     * original aspect ratio will be preserved.
     *
     * This function assumes that both Sizes contain strictly positive dimensions.
     * @param target The target size.
     */
    scaleToFit (target : ಠ_ಠ.clutz.goog.math.Size ) : ಠ_ಠ.clutz.goog.math.Size ;
    /**
     * Returns a nice string representing size.
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Size'): typeof ಠ_ಠ.clutz.goog.math.Size;
}
declare module 'goog:goog.math.Size' {
  import alias = ಠ_ಠ.clutz.goog.math.Size;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Class for a two-dimensional vector object and assorted functions useful for
   * manipulating points.
   */
  class Vec2 extends Vec2_Instance {
    /**
     * Returns the determinant of two vectors.
     * @param a The first vector.
     * @param b The second vector.
     */
    static determinant (a : ಠ_ಠ.clutz.goog.math.Vec2 , b : ಠ_ಠ.clutz.goog.math.Vec2 ) : number ;
    /**
     * Returns the difference between two vectors as a new Vec2.
     * @param a The first vector.
     * @param b The second vector.
     */
    static difference (a : ಠ_ಠ.clutz.goog.math.Coordinate , b : ಠ_ಠ.clutz.goog.math.Coordinate ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
    /**
     * Returns the distance between two vectors.
     * @param a The first vector.
     * @param b The second vector.
     */
    static distance (a : ಠ_ಠ.clutz.goog.math.Coordinate , b : ಠ_ಠ.clutz.goog.math.Coordinate ) : number ;
    /**
     * Returns the dot-product of two vectors.
     * @param a The first vector.
     * @param b The second vector.
     */
    static dot (a : ಠ_ಠ.clutz.goog.math.Coordinate , b : ಠ_ಠ.clutz.goog.math.Coordinate ) : number ;
    /**
     * Compares vectors for equality.
     * @param a The first vector.
     * @param b The second vector.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.Coordinate , b : ಠ_ಠ.clutz.goog.math.Coordinate ) : boolean ;
    /**
     * Returns a new Vec2 object from a given coordinate.
     * @param a The coordinate.
     */
    static fromCoordinate (a : ಠ_ಠ.clutz.goog.math.Coordinate ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
    /**
     * Returns a new Vec2 that is the linear interpolant between vectors a and b at
     * scale-value x.
     * @param a Vector a.
     * @param b Vector b.
     * @param x The proportion between a and b.
     */
    static lerp (a : ಠ_ಠ.clutz.goog.math.Coordinate , b : ಠ_ಠ.clutz.goog.math.Coordinate , x : number ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
    static random ( ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
    static randomUnit ( ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
    /**
     * Rotates a vector by a given angle, specified in radians, relative to a given
     * axis rotation point. The returned vector is a newly created instance - no
     * in-place changes are done.
     * @param v A vector.
     * @param axisPoint The rotation axis point.
     * @param angle The angle, in radians.
     */
    static rotateAroundPoint (v : ಠ_ಠ.clutz.goog.math.Vec2 , axisPoint : ಠ_ಠ.clutz.goog.math.Vec2 , angle : number ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
    /**
     * Returns the squared distance between two vectors.
     * @param a The first vector.
     * @param b The second vector.
     */
    static squaredDistance (a : ಠ_ಠ.clutz.goog.math.Coordinate , b : ಠ_ಠ.clutz.goog.math.Coordinate ) : number ;
    /**
     * Returns the sum of two vectors as a new Vec2.
     * @param a The first vector.
     * @param b The second vector.
     */
    static sum (a : ಠ_ಠ.clutz.goog.math.Coordinate , b : ಠ_ಠ.clutz.goog.math.Coordinate ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
  }
  class Vec2_Instance extends ಠ_ಠ.clutz.goog.math.Coordinate_Instance {
    /**
     * Class for a two-dimensional vector object and assorted functions useful for
     * manipulating points.
     * @param x The x coordinate for the vector.
     * @param y The y coordinate for the vector.
     */
    constructor (x : number , y : number ) ;
    /**
     * X-value
     */
    x : number ;
    /**
     * Y-value
     */
    y : number ;
    /**
     * Adds another vector to this vector in-place.
     * @param b The vector to add.
     */
    add (b : ಠ_ಠ.clutz.goog.math.Coordinate ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
    /**
     * Compares this vector with another for equality.
     * @param b The other vector.
     */
    equals (b : ಠ_ಠ.clutz.goog.math.Vec2 ) : boolean ;
    /**
     * Reverses the sign of the vector. Equivalent to scaling the vector by -1.
     */
    invert ( ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
    /**
     * Returns the magnitude of the vector measured from the origin.
     */
    magnitude ( ) : number ;
    /**
     * Normalizes the current vector to have a magnitude of 1.
     */
    normalize ( ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
    /**
     * Rotates this vector in-place by a given angle, specified in radians.
     * @param angle The angle, in radians.
     */
    rotate (angle : number ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
    scale (a : number , b ? : number ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
    /**
     * Returns the squared magnitude of the vector measured from the origin.
     * NOTE(brenneman): Leaving out the square root is not a significant
     * optimization in JavaScript.
     */
    squaredMagnitude ( ) : number ;
    /**
     * Subtracts another vector from this vector in-place.
     * @param b The vector to subtract.
     */
    subtract (b : ಠ_ಠ.clutz.goog.math.Coordinate ) : ಠ_ಠ.clutz.goog.math.Vec2 ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Vec2'): typeof ಠ_ಠ.clutz.goog.math.Vec2;
}
declare module 'goog:goog.math.Vec2' {
  import alias = ಠ_ಠ.clutz.goog.math.Vec2;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Class for a three-dimensional vector object and assorted functions useful for
   * manipulation.
   *
   * Inherits from goog.math.Coordinate3 so that a Vec3 may be passed in to any
   * function that requires a Coordinate.
   */
  class Vec3 extends Vec3_Instance {
    /**
     * Returns the cross-product of two vectors.
     * @param a The first vector.
     * @param b The second vector.
     */
    static cross (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns the difference of two vectors as a new Vec3.
     * @param a The first vector.
     * @param b The second vector.
     */
    static difference (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns the distance between two vectors.
     * @param a The first vector.
     * @param b The second vector.
     */
    static distance (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : number ;
    /**
     * Returns the dot-product of two vectors.
     * @param a The first vector.
     * @param b The second vector.
     */
    static dot (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : number ;
    /**
     * Compares vectors for equality.
     * @param a The first vector.
     * @param b The second vector.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : boolean ;
    /**
     * Returns a new Vec3 object from a given coordinate.
     * @param a The coordinate.
     */
    static fromCoordinate3 (a : ಠ_ಠ.clutz.goog.math.Coordinate3 | null ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns a new Vec3 that is the linear interpolant between vectors a and b at
     * scale-value x.
     * @param a Vector a.
     * @param b Vector b.
     * @param x The proportion between a and b.
     */
    static lerp (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null , x : number ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Generates a random vector inside the unit sphere.
     */
    static random ( ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Generates a random unit vector.
     *
     * http://mathworld.wolfram.com/SpherePointPicking.html
     * Using (6), (7), and (8) to generate coordinates.
     */
    static randomUnit ( ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns the squared distance between two vectors.
     * @param a The first vector.
     * @param b The second vector.
     */
    static squaredDistance (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : number ;
    /**
     * Returns the sum of two vectors as a new Vec3.
     * @param a The first vector.
     * @param b The second vector.
     */
    static sum (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
  }
  class Vec3_Instance extends ಠ_ಠ.clutz.goog.math.Coordinate3_Instance {
    /**
     * Class for a three-dimensional vector object and assorted functions useful for
     * manipulation.
     *
     * Inherits from goog.math.Coordinate3 so that a Vec3 may be passed in to any
     * function that requires a Coordinate.
     * @param x The x value for the vector.
     * @param y The y value for the vector.
     * @param z The z value for the vector.
     */
    constructor (x : number , y : number , z : number ) ;
    /**
     * X-value
     */
    x : number ;
    /**
     * Y-value
     */
    y : number ;
    /**
     * Z-value
     */
    z : number ;
    /**
     * Adds another vector to this vector in-place.
     * @param b The vector to add.
     */
    add (b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Creates a new copy of this Vec3.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Compares this vector with another for equality.
     * @param b The other vector.
     */
    equals (b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : boolean ;
    /**
     * Reverses the sign of the vector. Equivalent to scaling the vector by -1.
     */
    invert ( ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns the magnitude of the vector measured from the origin.
     */
    magnitude ( ) : number ;
    /**
     * Normalizes the current vector to have a magnitude of 1.
     */
    normalize ( ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Scales the current vector by a constant.
     * @param s The scale factor.
     */
    scale (s : number ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns the squared magnitude of the vector measured from the origin.
     * NOTE(brenneman): Leaving out the square root is not a significant
     * optimization in JavaScript.
     */
    squaredMagnitude ( ) : number ;
    /**
     * Subtracts another vector from this vector in-place.
     * @param b The vector to subtract.
     */
    subtract (b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.Vec3'): typeof ಠ_ಠ.clutz.goog.math.Vec3;
}
declare module 'goog:goog.math.Vec3' {
  import alias = ಠ_ಠ.clutz.goog.math.Vec3;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.interpolator {
  /**
   * An interface for one dimensional data interpolation.
   */
  interface Interpolator1 {
    /**
     * Computes the inverse interpolator. That is, it returns invInterp s.t.
     * this.interpolate(invInterp.interpolate(t))) = t. Note that the inverse
     * interpolator is only well defined if the data being interpolated is
     * 'invertible', i.e. it represents a bijective function.
     * In addition, the returned interpolator is only guaranteed to give the exact
     * inverse at the input data passed in getData.
     * If 'this' has no data, the returned Interpolator will be empty as well.
     */
    getInverse ( ) : ಠ_ಠ.clutz.goog.math.interpolator.Interpolator1 ;
    /**
     * Computes the interpolated value at abscissa x. If x is outside the range
     * of the data points passed in setData, the value is extrapolated.
     * @param x The abscissa to sample at.
     */
    interpolate (a : number ) : number ;
    /**
     * Sets the data to be interpolated. Note that the data points are expected
     * to be sorted according to their abscissa values and not have duplicate
     * values. E.g. calling setData([0, 0, 1], [1, 1, 3]) may give undefined
     * results, the correct call should be setData([0, 1], [1, 3]).
     * Calling setData multiple times does not merge the data samples. The last
     * call to setData is the one used when computing the interpolation.
     * @param x The abscissa of the data points.
     * @param y The ordinate of the data points.
     */
    setData (a : number [] , b : number [] ) : any ;
  }
}
declare module 'goog:goog.math.interpolator.Interpolator1' {
  import alias = ಠ_ಠ.clutz.goog.math.interpolator.Interpolator1;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.interpolator {
  /**
   * A one dimensional linear interpolator.
   */
  class Linear1 extends Linear1_Instance {
  }
  class Linear1_Instance implements ಠ_ಠ.clutz.goog.math.interpolator.Interpolator1 {
    private noStructuralTyping_: any;
    getInverse ( ) : ಠ_ಠ.clutz.goog.math.interpolator.Interpolator1 ;
    interpolate (x : number ) : number ;
    setData (x : number [] , y : number [] ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.interpolator.Linear1'): typeof ಠ_ಠ.clutz.goog.math.interpolator.Linear1;
}
declare module 'goog:goog.math.interpolator.Linear1' {
  import alias = ಠ_ಠ.clutz.goog.math.interpolator.Linear1;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.interpolator {
  /**
   * A one dimensional monotone cubic spline interpolator.
   */
  class Pchip1 extends Pchip1_Instance {
  }
  class Pchip1_Instance extends ಠ_ಠ.clutz.goog.math.interpolator.Spline1_Instance {
    computeDerivatives (dx : number [] | null , slope : number [] | null ) : number [] ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.interpolator.Pchip1'): typeof ಠ_ಠ.clutz.goog.math.interpolator.Pchip1;
}
declare module 'goog:goog.math.interpolator.Pchip1' {
  import alias = ಠ_ಠ.clutz.goog.math.interpolator.Pchip1;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.interpolator {
  /**
   * A one dimensional cubic spline interpolator with natural boundary conditions.
   */
  class Spline1 extends Spline1_Instance {
  }
  class Spline1_Instance implements ಠ_ಠ.clutz.goog.math.interpolator.Interpolator1 {
    private noStructuralTyping_: any;
    /**
     * Computes the derivative at each point of the spline such that
     * the curve is C2. It uses not-a-knot boundary conditions.
     * @param dx The spacing between consecutive data points.
     * @param slope The slopes between consecutive data points.
     */
    computeDerivatives (dx : number [] | null , slope : number [] | null ) : number [] ;
    /**
     * Note that the inverse of a cubic spline is not a cubic spline in general.
     * As a result the inverse implementation is only approximate. In
     * particular, it only guarantees the exact inverse at the original input data
     * points passed to setData.
     */
    getInverse ( ) : ಠ_ಠ.clutz.goog.math.interpolator.Interpolator1 ;
    interpolate (x : number ) : number ;
    setData (x : number [] , y : number [] ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.interpolator.Spline1'): typeof ಠ_ಠ.clutz.goog.math.interpolator.Spline1;
}
declare module 'goog:goog.math.interpolator.Spline1' {
  import alias = ಠ_ಠ.clutz.goog.math.interpolator.Spline1;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.paths {
  /**
   * Defines an arrow.
   * @param a Point A.
   * @param b Point B.
   * @param aHead The size of the arrow head at point A. 0 omits the head.
   * @param bHead The size of the arrow head at point B. 0 omits the head.
   */
  function createArrow (a : ಠ_ಠ.clutz.goog.math.Coordinate | null , b : ಠ_ಠ.clutz.goog.math.Coordinate | null , aHead : number | null , bHead : number | null ) : ಠ_ಠ.clutz.goog.math.Path ;
  /**
   * Defines a regular n-gon by specifing the center, a vertex, and the total
   * number of vertices.
   * @param center The center point.
   * @param vertex The vertex, which implicitly defines a radius as well.
   * @param n The number of vertices.
   */
  function createRegularNGon (center : ಠ_ಠ.clutz.goog.math.Coordinate | null , vertex : ಠ_ಠ.clutz.goog.math.Coordinate | null , n : number ) : ಠ_ಠ.clutz.goog.math.Path ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.paths'): typeof ಠ_ಠ.clutz.goog.math.paths;
}
declare module 'goog:goog.math.paths' {
  import alias = ಠ_ಠ.clutz.goog.math.paths;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.tdma {
  /**
   * Solves a linear system where the matrix is square tri-diagonal. That is,
   * given a system of equations:
   *
   * A * result = vecRight,
   *
   * this class computes result = inv(A) * vecRight, where A has the special form
   * of a tri-diagonal matrix:
   *
   * |dia(0) sup(0)   0    0     ...   0|
   * |sub(0) dia(1) sup(1) 0     ...   0|
   * A =|                ...               |
   * |0 ... 0 sub(n-2) dia(n-1) sup(n-1)|
   * |0 ... 0    0     sub(n-1)   dia(n)|
   * @param subDiag The sub diagonal of the matrix.
   * @param mainDiag The main diagonal of the matrix.
   * @param supDiag The super diagonal of the matrix.
   * @param vecRight The right vector of the system of equations.
   * @param opt_result The optional array to store the result.
   */
  function solve (subDiag : number [] , mainDiag : number [] , supDiag : number [] , vecRight : number [] , opt_result ? : number [] | null ) : number [] ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.math.tdma'): typeof ಠ_ಠ.clutz.goog.math.tdma;
}
declare module 'goog:goog.math.tdma' {
  import alias = ಠ_ಠ.clutz.goog.math.tdma;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * Decorator around functions that caches the inner function's return values.
   *
   * To cache parameterless functions, see goog.functions.cacheReturnValue.
   * @param f The function to wrap. Its return value may only depend on its arguments and 'this' context. There may be further restrictions on the arguments depending on the capabilities of the serializer used.
   * @param opt_serializer A function to serialize f's arguments. It must have the same signature as goog.memoize.simpleSerializer. It defaults to that function.
   */
  function memoize (f : ( ( ...a : any [] ) => any ) | null , opt_serializer ? : (a : number , b : Object | null ) => string ) : ( ...a : any [] ) => any ;
}
declare module 'goog:goog.memoize' {
  import alias = ಠ_ಠ.clutz.goog.memoize;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
  /**
   * Creates a bidirectional pipe between two message channels.
   * @param channel1 The first channel.
   * @param channel2 The second channel.
   */
  function pipe (channel1 : ಠ_ಠ.clutz.goog.messaging.MessageChannel | null , channel2 : ಠ_ಠ.clutz.goog.messaging.MessageChannel | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.messaging'): typeof ಠ_ಠ.clutz.goog.messaging;
}
declare module 'goog:goog.messaging' {
  import alias = ಠ_ಠ.clutz.goog.messaging;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
  /**
   * Creates an abstract message channel.
   */
  class AbstractChannel extends AbstractChannel_Instance {
  }
  class AbstractChannel_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance implements ಠ_ಠ.clutz.goog.messaging.MessageChannel {
    /**
     * Immediately calls opt_connectCb if given, and is otherwise a no-op. If
     * subclasses have configuration that needs to happen before the channel is
     * connected, they should override this and {@link #isConnected}.
     */
    connect (opt_connectCb ? : ( ( ...a : any [] ) => any ) | null ) : void ;
    /**
     * Converts the message payload into the format expected by the registered
     * service (either JSON or string).
     * @param serviceName The name of the service receiving the message.
     * @param payload The contents of the message.
     * @param objectPayload Whether the service expects an object or a plain string.
     */
    decodePayload (serviceName : string , payload : string | Object , objectPayload : boolean ) : string | Object | null ;
    /**
     * Delivers a message to the appropriate service. This is meant to be called by
     * subclasses when they receive messages.
     *
     * This method takes into account both explicitly-registered and default
     * services, as well as making sure that JSON payloads are decoded when
     * necessary. If the subclass is capable of passing objects as payloads, those
     * objects can be passed in to this method directly. Otherwise, the (potentially
     * JSON-encoded) strings should be passed in.
     * @param serviceName The name of the service receiving the message.
     * @param payload The contents of the message.
     */
    deliver (serviceName : string , payload : string | Object ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Find the service object for a given service name. If there's no service
     * explicitly registered, but there is a default service, a service object is
     * constructed for it.
     * @param serviceName The name of the service receiving the message.
     * @param payload The contents of the message.
     */
    getService (serviceName : string , payload : string | Object ) : { callback : (a : string | Object ) => any , objectPayload : boolean } | null ;
    /**
     * Always returns true. If subclasses have configuration that needs to happen
     * before the channel is connected, they should override this and
     * {@link #connect}.
     */
    isConnected ( ) : boolean ;
    /**
     * Logger for this class.
     */
    logger : ಠ_ಠ.clutz.goog.debug.Logger | null ;
    registerDefaultService (callback : (a : string , b : string | Object ) => any ) : void ;
    registerService (serviceName : string , callback : (a : string | Object ) => any , opt_objectPayload ? : boolean ) : void ;
    send ( ...a : any [] ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.messaging.AbstractChannel'): typeof ಠ_ಠ.clutz.goog.messaging.AbstractChannel;
}
declare module 'goog:goog.messaging.AbstractChannel' {
  import alias = ಠ_ಠ.clutz.goog.messaging.AbstractChannel;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
  /**
   * Creates a new BufferedChannel, which operates like its underlying channel
   * except that it buffers calls to send until it receives a message from its
   * peer claiming that the peer is ready to receive.  The peer is also expected
   * to be a BufferedChannel, though this is not enforced.
   */
  class BufferedChannel extends BufferedChannel_Instance {
  }
  class BufferedChannel_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance implements ಠ_ಠ.clutz.goog.messaging.MessageChannel {
    /**
     * Creates a new BufferedChannel, which operates like its underlying channel
     * except that it buffers calls to send until it receives a message from its
     * peer claiming that the peer is ready to receive.  The peer is also expected
     * to be a BufferedChannel, though this is not enforced.
     * @param messageChannel The MessageChannel we're wrapping.
     * @param opt_interval Polling interval for sending ready notifications to peer, in ms.  Default is 50.
     */
    constructor (messageChannel : ಠ_ಠ.clutz.goog.messaging.MessageChannel , opt_interval ? : number ) ;
    connect (opt_connectCb ? : ( ( ...a : any [] ) => any ) | null ) : void ;
    disposeInternal ( ) : void ;
    isConnected ( ) : boolean ;
    isPeerReady ( ) : boolean ;
    registerDefaultService (callback : (a : string , b : string | Object ) => any ) : void ;
    registerService (serviceName : string , callback : (a : string | Object ) => any , opt_objectPayload ? : boolean ) : void ;
    /**
     * Send a message over the channel.  If the peer is not ready, the message will
     * be buffered and sent once we've received a ready message from our peer.
     * @param serviceName The name of the service this message should be delivered to.
     * @param payload The value of the message. If this is an Object, it is serialized to JSON before sending.  It's the responsibility of implementors of this class to perform the serialization.
     */
    send (serviceName : string , payload : string | Object ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.messaging.BufferedChannel'): typeof ಠ_ಠ.clutz.goog.messaging.BufferedChannel;
}
declare module 'goog:goog.messaging.BufferedChannel' {
  import alias = ಠ_ಠ.clutz.goog.messaging.BufferedChannel;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
  /**
   * Creates a new DeferredChannel, which wraps a deferred MessageChannel and
   * enqueues messages to be sent once the wrapped channel is resolved.
   */
  class DeferredChannel extends DeferredChannel_Instance {
  }
  class DeferredChannel_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance implements ಠ_ಠ.clutz.goog.messaging.MessageChannel {
    /**
     * Creates a new DeferredChannel, which wraps a deferred MessageChannel and
     * enqueues messages to be sent once the wrapped channel is resolved.
     * @param deferredChannel The underlying deferred MessageChannel.
     */
    constructor (deferredChannel : any ) ;
    deferred_ : any ;
    /**
     * Cancels the wrapped Deferred.
     */
    cancel ( ) : void ;
    connect (opt_connectCb ? : ( ( ...a : any [] ) => any ) | null ) : void ;
    disposeInternal ( ) : void ;
    isConnected ( ) : boolean ;
    registerDefaultService (callback : (a : string , b : string | Object ) => any ) : void ;
    registerService (serviceName : string , callback : (a : string | Object ) => any , opt_objectPayload ? : boolean ) : void ;
    send (serviceName : string , payload : string | Object ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.messaging.DeferredChannel'): typeof ಠ_ಠ.clutz.goog.messaging.DeferredChannel;
}
declare module 'goog:goog.messaging.DeferredChannel' {
  import alias = ಠ_ಠ.clutz.goog.messaging.DeferredChannel;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
  /**
   * Creates a logger client that sends messages along a message channel for the
   * remote end to log. The remote end of the channel should use a
   * {goog.messaging.LoggerServer} with the same service name.
   */
  class LoggerClient extends LoggerClient_Instance {
  }
  class LoggerClient_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Creates a logger client that sends messages along a message channel for the
     * remote end to log. The remote end of the channel should use a
     * {goog.messaging.LoggerServer} with the same service name.
     * @param channel The channel that on which to send the log messages.
     * @param serviceName The name of the logging service to use.
     */
    constructor (channel : ಠ_ಠ.clutz.goog.messaging.MessageChannel , serviceName : string ) ;
    disposeInternal ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.messaging.LoggerClient'): typeof ಠ_ಠ.clutz.goog.messaging.LoggerClient;
}
declare module 'goog:goog.messaging.LoggerClient' {
  import alias = ಠ_ಠ.clutz.goog.messaging.LoggerClient;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
  /**
   * Creates a logger server that logs messages on behalf of the remote end of a
   * message channel. The remote end of the channel should use a
   * {goog.messaging.LoggerClient} with the same service name.
   */
  class LoggerServer extends LoggerServer_Instance {
  }
  class LoggerServer_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Creates a logger server that logs messages on behalf of the remote end of a
     * message channel. The remote end of the channel should use a
     * {goog.messaging.LoggerClient} with the same service name.
     * @param channel The channel that is sending the log messages.
     * @param serviceName The name of the logging service to listen for.
     * @param opt_channelName The name of this channel. Used to help distinguish this client's messages.
     */
    constructor (channel : ಠ_ಠ.clutz.goog.messaging.MessageChannel , serviceName : string , opt_channelName ? : string ) ;
    disposeInternal ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.messaging.LoggerServer'): typeof ಠ_ಠ.clutz.goog.messaging.LoggerServer;
}
declare module 'goog:goog.messaging.LoggerServer' {
  import alias = ಠ_ಠ.clutz.goog.messaging.LoggerServer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
  interface MessageChannel {
    /**
     * Initiates the channel connection. When this method is called, all the
     * information needed to connect the channel has to be available.
     *
     * Implementers should only require this method to be called if the channel
     * needs to be configured in some way between when it's created and when it
     * becomes active. Otherwise, the channel should be immediately active and this
     * method should do nothing but immediately call opt_connectCb.
     * @param opt_connectCb Called when the channel has been connected and is ready to use.
     */
    connect (opt_connectCb ? : ( ( ...a : any [] ) => any ) | null ) : void ;
    /**
     * Gets whether the channel is connected.
     *
     * If {@link #connect} is not required for this class, this should always return
     * true. Otherwise, this should return true by the time the callback passed to
     * {@link #connect} has been called and always after that.
     */
    isConnected ( ) : boolean ;
    /**
     * Registers a service to be called when a message is received that doesn't
     * match any other services.
     * @param callback The callback to process the incoming messages. Passed the service name and the payload. Since some channels can pass objects natively, the payload may be either an object or a string.
     */
    registerDefaultService (callback : (a : string , b : string | Object ) => any ) : void ;
    /**
     * Registers a service to be called when a message is received.
     *
     * Implementers shouldn't impose any restrictions on the service names that may
     * be registered. If some services are needed as control codes,
     * {@link goog.messaging.MultiMessageChannel} can be used to safely split the
     * channel into "public" and "control" virtual channels.
     * @param serviceName The name of the service.
     * @param callback The callback to process the incoming messages. Passed the payload. If opt_objectPayload is set, the payload is decoded and passed as an object.
     * @param opt_objectPayload If true, incoming messages for this service are expected to contain an object, and will be deserialized from a string automatically if necessary. It's the responsibility of implementors of this class to perform the deserialization.
     */
    registerService (serviceName : string , callback : (a : string | Object ) => any , opt_objectPayload ? : boolean ) : void ;
    /**
     * Sends a message over the channel.
     * @param serviceName The name of the service this message should be delivered to.
     * @param payload The value of the message. If this is an Object, it is serialized to a string before sending if necessary. It's the responsibility of implementors of this class to perform the serialization.
     */
    send (serviceName : string , payload : string | Object ) : void ;
  }
}
declare module 'goog:goog.messaging.MessageChannel' {
  import alias = ಠ_ಠ.clutz.goog.messaging.MessageChannel;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
  /**
   * Creates a new MultiChannel wrapping a single MessageChannel. The
   * underlying channel shouldn't have any other listeners registered, but it
   * should be connected.
   *
   * Note that the other side of the channel should also be connected to a
   * MultiChannel with the same number of virtual channels.
   */
  class MultiChannel extends MultiChannel_Instance {
  }
  class MultiChannel_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Creates a new MultiChannel wrapping a single MessageChannel. The
     * underlying channel shouldn't have any other listeners registered, but it
     * should be connected.
     *
     * Note that the other side of the channel should also be connected to a
     * MultiChannel with the same number of virtual channels.
     * @param underlyingChannel The underlying channel to use as transport for the virtual channels.
     */
    constructor (underlyingChannel : ಠ_ಠ.clutz.goog.messaging.MessageChannel | null ) ;
    /**
     * Creates a new virtual channel that will communicate across the underlying
     * channel.
     * @param name The name of the virtual channel. Must be unique for this MultiChannel. Cannot contain colons.
     */
    createVirtualChannel (name : string ) : ಠ_ಠ.clutz.goog.messaging.MultiChannel.VirtualChannel ;
    disposeInternal ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.messaging.MultiChannel'): typeof ಠ_ಠ.clutz.goog.messaging.MultiChannel;
}
declare module 'goog:goog.messaging.MultiChannel' {
  import alias = ಠ_ಠ.clutz.goog.messaging.MultiChannel;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging.MultiChannel {
  /**
   * A message channel that proxies its messages over another underlying channel.
   */
  class VirtualChannel extends VirtualChannel_Instance {
  }
  class VirtualChannel_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance implements ಠ_ಠ.clutz.goog.messaging.MessageChannel {
    /**
     * A message channel that proxies its messages over another underlying channel.
     * @param parent The MultiChannel which created this channel, and which contains the underlying MessageChannel that's used as the transport.
     * @param name The name of this virtual channel. Unique among the virtual channels in parent.
     */
    constructor (parent : ಠ_ಠ.clutz.goog.messaging.MultiChannel | null , name : string ) ;
    /**
     * This is a no-op, since the underlying channel is expected to already be
     * initialized when it's passed in.
     */
    connect (opt_connectCb ? : ( ( ...a : any [] ) => any ) | null ) : void ;
    disposeInternal ( ) : void ;
    /**
     * This always returns true, since the underlying channel is expected to already
     * be initialized when it's passed in.
     */
    isConnected ( ) : boolean ;
    registerDefaultService (callback : (a : string , b : string | Object ) => any ) : void ;
    registerService (serviceName : string , callback : (a : string | Object ) => any , opt_objectPayload ? : boolean ) : void ;
    send (serviceName : string , payload : string | Object ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.messaging.MultiChannel.VirtualChannel'): typeof ಠ_ಠ.clutz.goog.messaging.MultiChannel.VirtualChannel;
}
declare module 'goog:goog.messaging.MultiChannel.VirtualChannel' {
  import alias = ಠ_ಠ.clutz.goog.messaging.MultiChannel.VirtualChannel;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
  /**
   * The leaf node of a network.
   */
  class PortCaller extends PortCaller_Instance {
  }
  class PortCaller_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance implements ಠ_ಠ.clutz.goog.messaging.PortNetwork {
    /**
     * The leaf node of a network.
     * @param operatorPort The channel for communicating with the operator. The other side of this channel should be passed to {@link goog.messaging.PortOperator#addPort}. Must be either a {@link goog.messaging.PortChannel} or a decorator wrapping a PortChannel; in particular, it must be able to send and receive {@link MessagePort}s.
     */
    constructor (operatorPort : ಠ_ಠ.clutz.goog.messaging.MessageChannel ) ;
    dial (name : string ) : ಠ_ಠ.clutz.goog.messaging.MessageChannel | null ;
    disposeInternal ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.messaging.PortCaller'): typeof ಠ_ಠ.clutz.goog.messaging.PortCaller;
}
declare module 'goog:goog.messaging.PortCaller' {
  import alias = ಠ_ಠ.clutz.goog.messaging.PortCaller;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
  /**
   * A wrapper for several types of HTML5 message-passing entities
   * ({@link MessagePort}s and {@link WebWorker}s). This class implements the
   * {@link goog.messaging.MessageChannel} interface.
   *
   * This class can be used in conjunction with other communication on the port.
   * It sets {@link goog.messaging.PortChannel.FLAG} to true on all messages it
   * sends.
   */
  class PortChannel extends PortChannel_Instance {
    /**
     * The flag added to messages that are sent by a PortChannel, and are meant to
     * be handled by one on the other side.
     */
    static FLAG : string ;
    /**
     * Create a PortChannel that communicates with a window embedded in the current
     * page (e.g. an iframe contentWindow). The code within the window should call
     * {@link forGlobalWindow} to establish the connection.
     *
     * It's possible to use this channel in conjunction with other messages to the
     * embedded window. However, only one PortChannel should be used for a given
     * window at a time.
     * @param window The window object to communicate with.
     * @param peerOrigin The expected origin of the window. See http://dev.w3.org/html5/postmsg/#dom-window-postmessage.
     * @param opt_timer The timer that regulates how often the initial connection message is attempted. This will be automatically disposed once the connection is established, or when the connection is cancelled.
     */
    static forEmbeddedWindow (window : Window , peerOrigin : string , opt_timer ? : ಠ_ಠ.clutz.goog.Timer | null ) : ಠ_ಠ.clutz.goog.messaging.DeferredChannel ;
    /**
     * Create a PortChannel that communicates with the document in which this window
     * is embedded (e.g. within an iframe). The enclosing document should call
     * {@link forEmbeddedWindow} to establish the connection.
     *
     * It's possible to use this channel in conjunction with other messages posted
     * to the global window. However, only one PortChannel should be used for the
     * global window at a time.
     * @param peerOrigin The expected origin of the enclosing document. See http://dev.w3.org/html5/postmsg/#dom-window-postmessage.
     */
    static forGlobalWindow (peerOrigin : string ) : ಠ_ಠ.clutz.goog.messaging.MessageChannel ;
  }
  class PortChannel_Instance extends ಠ_ಠ.clutz.goog.messaging.AbstractChannel_Instance {
    /**
     * A wrapper for several types of HTML5 message-passing entities
     * ({@link MessagePort}s and {@link WebWorker}s). This class implements the
     * {@link goog.messaging.MessageChannel} interface.
     *
     * This class can be used in conjunction with other communication on the port.
     * It sets {@link goog.messaging.PortChannel.FLAG} to true on all messages it
     * sends.
     * @param underlyingPort The message-passing entity to wrap. If this is a {@link MessagePort}, it should be started. The remote end should also be wrapped in a PortChannel. This will be disposed along with the PortChannel; this means terminating it if it's a worker or removing it from the DOM if it's an iframe.
     */
    constructor (underlyingPort : MessagePort | WebWorker ) ;
    disposeInternal ( ) : void ;
    /**
     * Logger for this class.
     */
    logger : ಠ_ಠ.clutz.goog.debug.Logger | null ;
    /**
     * Sends a message over the channel.
     *
     * As an addition to the basic MessageChannel send API, PortChannels can send
     * objects that contain MessagePorts. Note that only plain Objects and Arrays,
     * not their subclasses, can contain MessagePorts.
     *
     * As per {@link http://www.w3.org/TR/html5/comms.html#clone-a-port}, once a
     * port is copied to be sent across a channel, the original port will cease
     * being able to send or receive messages.
     * @param serviceName The name of the service this message should be delivered to.
     * @param payload The value of the message. May contain MessagePorts or be a MessagePort.
     */
    send (serviceName : string , payload : string | Object ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.messaging.PortChannel'): typeof ಠ_ಠ.clutz.goog.messaging.PortChannel;
}
declare module 'goog:goog.messaging.PortChannel' {
  import alias = ಠ_ಠ.clutz.goog.messaging.PortChannel;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
  interface PortNetwork {
    /**
     * Returns a message channel that communicates with the named context. If no
     * such port exists, an error will either be thrown immediately or after a round
     * trip with the operator, depending on whether this pool is the operator or a
     * caller.
     *
     * If context A calls dial('B') and context B calls dial('A'), the two
     * ports returned will be connected to one another.
     * @param name The name of the context to get.
     */
    dial (name : string ) : ಠ_ಠ.clutz.goog.messaging.MessageChannel | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.messaging.PortNetwork {
  var GRANT_CONNECTION_SERVICE : string ;
  var REQUEST_CONNECTION_SERVICE : string ;
}
declare module 'goog:goog.messaging.PortNetwork' {
  import alias = ಠ_ಠ.clutz.goog.messaging.PortNetwork;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
  /**
   * The central node of a PortNetwork.
   */
  class PortOperator extends PortOperator_Instance {
  }
  class PortOperator_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance implements ಠ_ಠ.clutz.goog.messaging.PortNetwork {
    /**
     * The central node of a PortNetwork.
     * @param name The name of this node.
     */
    constructor (name : string ) ;
    /**
     * Adds a caller to the network with the given name. This port should have no
     * services registered on it. It will be disposed along with the PortOperator.
     * @param name The name of the port to add.
     * @param port The port to add. Must be either a {@link goog.messaging.PortChannel} or a decorator wrapping a PortChannel; in particular, it must be able to send and receive {@link MessagePort}s.
     */
    addPort (name : string , port : ಠ_ಠ.clutz.goog.messaging.MessageChannel ) : void ;
    dial (name : string ) : ಠ_ಠ.clutz.goog.messaging.MessageChannel | null ;
    disposeInternal ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.messaging.PortOperator'): typeof ಠ_ಠ.clutz.goog.messaging.PortOperator;
}
declare module 'goog:goog.messaging.PortOperator' {
  import alias = ಠ_ಠ.clutz.goog.messaging.PortOperator;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
  /**
   * Creates a new RespondingChannel wrapping a single MessageChannel.
   */
  class RespondingChannel extends RespondingChannel_Instance {
  }
  class RespondingChannel_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Creates a new RespondingChannel wrapping a single MessageChannel.
     * @param messageChannel The messageChannel to to wrap and allow for responses. This channel must not have any existing services registered. All service registration must be done through the {@link RespondingChannel#registerService} api instead. The other end of channel must also be a RespondingChannel.
     */
    constructor (messageChannel : ಠ_ಠ.clutz.goog.messaging.MessageChannel | null ) ;
    disposeInternal ( ) : void ;
    /**
     * Registers a service to be called when a message is received.
     * @param serviceName The name of the service.
     * @param callback The callback to process the incoming messages. Passed the payload.
     */
    registerService (serviceName : string , callback : (a : Object ) => any ) : void ;
    /**
     * Sends a message over the channel.
     * @param serviceName The name of the service this message should be delivered to.
     * @param payload The value of the message. If this is an Object, it is serialized to a string before sending if necessary.
     * @param callback The callback invoked with the result of the service call.
     */
    send (serviceName : string , payload : string | Object , callback : (a : Object | null ) => any ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.messaging.RespondingChannel'): typeof ಠ_ಠ.clutz.goog.messaging.RespondingChannel;
}
declare module 'goog:goog.messaging.RespondingChannel' {
  import alias = ಠ_ಠ.clutz.goog.messaging.RespondingChannel;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Default factory to use when creating xhr objects.  You probably shouldn't be
   * instantiating this directly, but rather using it via goog.net.XmlHttp.
   */
  class DefaultXmlHttpFactory extends DefaultXmlHttpFactory_Instance {
  }
  class DefaultXmlHttpFactory_Instance extends ಠ_ಠ.clutz.goog.net.XmlHttpFactory_Instance {
    createInstance ( ) : ಠ_ಠ.clutz.goog.net.XhrLike | XMLHttpRequest ;
    internalGetOptions ( ) : Object | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.net.DefaultXmlHttpFactory'): typeof ಠ_ಠ.clutz.goog.net.DefaultXmlHttpFactory;
}
declare module 'goog:goog.net.DefaultXmlHttpFactory' {
  import alias = ಠ_ಠ.clutz.goog.net.DefaultXmlHttpFactory;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Error codes
   */
  type ErrorCode = number ;
  var ErrorCode : {
    ABORT : ErrorCode ,
    ACCESS_DENIED : ErrorCode ,
    CUSTOM_ERROR : ErrorCode ,
    EXCEPTION : ErrorCode ,
    FF_SILENT_ERROR : ErrorCode ,
    FILE_NOT_FOUND : ErrorCode ,
    HTTP_ERROR : ErrorCode ,
    NO_ERROR : ErrorCode ,
    OFFLINE : ErrorCode ,
    TIMEOUT : ErrorCode ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.net.ErrorCode'): typeof ಠ_ಠ.clutz.goog.net.ErrorCode;
}
declare module 'goog:goog.net.ErrorCode' {
  import alias = ಠ_ಠ.clutz.goog.net.ErrorCode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Event names for network events
   */
  type EventType = string ;
  var EventType : {
    ABORT : EventType ,
    COMPLETE : EventType ,
    DOWNLOAD_PROGRESS : EventType ,
    ERROR : EventType ,
    INCREMENTAL_DATA : EventType ,
    PROGRESS : EventType ,
    READY : EventType ,
    READY_STATE_CHANGE : EventType ,
    SUCCESS : EventType ,
    TIMEOUT : EventType ,
    UPLOAD_PROGRESS : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.net.EventType'): typeof ಠ_ಠ.clutz.goog.net.EventType;
}
declare module 'goog:goog.net.EventType' {
  import alias = ಠ_ಠ.clutz.goog.net.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * HTTP Status Codes defined in RFC 2616 and RFC 6585.
   */
  type HttpStatus = number ;
  var HttpStatus : {
    ACCEPTED : HttpStatus ,
    BAD_GATEWAY : HttpStatus ,
    BAD_REQUEST : HttpStatus ,
    CONFLICT : HttpStatus ,
    CONTINUE : HttpStatus ,
    CREATED : HttpStatus ,
    EXPECTATION_FAILED : HttpStatus ,
    FORBIDDEN : HttpStatus ,
    FOUND : HttpStatus ,
    GATEWAY_TIMEOUT : HttpStatus ,
    GONE : HttpStatus ,
    HTTP_VERSION_NOT_SUPPORTED : HttpStatus ,
    INTERNAL_SERVER_ERROR : HttpStatus ,
    LENGTH_REQUIRED : HttpStatus ,
    METHOD_NOT_ALLOWED : HttpStatus ,
    MOVED_PERMANENTLY : HttpStatus ,
    MULTIPLE_CHOICES : HttpStatus ,
    NETWORK_AUTHENTICATION_REQUIRED : HttpStatus ,
    NON_AUTHORITATIVE_INFORMATION : HttpStatus ,
    NOT_ACCEPTABLE : HttpStatus ,
    NOT_FOUND : HttpStatus ,
    NOT_IMPLEMENTED : HttpStatus ,
    NOT_MODIFIED : HttpStatus ,
    NO_CONTENT : HttpStatus ,
    OK : HttpStatus ,
    PARTIAL_CONTENT : HttpStatus ,
    PAYMENT_REQUIRED : HttpStatus ,
    PRECONDITION_FAILED : HttpStatus ,
    PRECONDITION_REQUIRED : HttpStatus ,
    PROXY_AUTHENTICATION_REQUIRED : HttpStatus ,
    QUIRK_IE_NO_CONTENT : HttpStatus ,
    REQUEST_ENTITY_TOO_LARGE : HttpStatus ,
    REQUEST_HEADER_FIELDS_TOO_LARGE : HttpStatus ,
    REQUEST_RANGE_NOT_SATISFIABLE : HttpStatus ,
    REQUEST_TIMEOUT : HttpStatus ,
    REQUEST_URI_TOO_LONG : HttpStatus ,
    RESET_CONTENT : HttpStatus ,
    SEE_OTHER : HttpStatus ,
    SERVICE_UNAVAILABLE : HttpStatus ,
    SWITCHING_PROTOCOLS : HttpStatus ,
    TEMPORARY_REDIRECT : HttpStatus ,
    TOO_MANY_REQUESTS : HttpStatus ,
    UNAUTHORIZED : HttpStatus ,
    UNSUPPORTED_MEDIA_TYPE : HttpStatus ,
    USE_PROXY : HttpStatus ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.net.HttpStatus'): typeof ಠ_ಠ.clutz.goog.net.HttpStatus;
}
declare module 'goog:goog.net.HttpStatus' {
  import alias = ಠ_ಠ.clutz.goog.net.HttpStatus;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Base class for network status information providers.
   */
  interface NetworkStatusMonitor extends ಠ_ಠ.clutz.goog.events.Listenable {
    isOnline ( ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.net.NetworkStatusMonitor {
  type EventType = string ;
  var EventType : {
    OFFLINE : EventType ,
    ONLINE : EventType ,
  };
}
declare module 'goog:goog.net.NetworkStatusMonitor' {
  import alias = ಠ_ಠ.clutz.goog.net.NetworkStatusMonitor;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * A WebChannel represents a logical bi-directional channel over which the
   * client communicates with a remote server that holds the other endpoint
   * of the channel. A WebChannel is always created in the context of a shared
   * {@link WebChannelTransport} instance. It is up to the underlying client-side
   * and server-side implementations to decide how or when multiplexing is
   * to be enabled.
   */
  interface WebChannel extends EventTarget {
    /**
     * Close the WebChannel.
     */
    close ( ...a : any [] ) : any ;
    getRuntimeProperties ( ) : ಠ_ಠ.clutz.goog.net.WebChannel.RuntimeProperties ;
    /**
     * Open the WebChannel against the URI specified in the constructor.
     */
    open ( ...a : any [] ) : any ;
    /**
     * Sends a message to the server that maintains the other end point of
     * the WebChannel.
     * @param message The message to send.
     */
    send (a : ArrayBuffer | Blob | { [ key: string ]: string } | any [] ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.net.WebChannel {
  class ErrorEvent extends ErrorEvent_Instance {
  }
  class ErrorEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * The error status.
     */
    status : ಠ_ಠ.clutz.goog.net.WebChannel.ErrorStatus ;
  }
  type ErrorStatus = number ;
  var ErrorStatus : {
    NETWORK_ERROR : ErrorStatus ,
    OK : ErrorStatus ,
    SERVER_ERROR : ErrorStatus ,
  };
  type EventType = string ;
  var EventType : {
    CLOSE : EventType ,
    ERROR : EventType ,
    MESSAGE : EventType ,
    OPEN : EventType ,
  };
  type MessageData = ArrayBuffer | null | Blob | { [ key: string ]: string } | any [] ;
  class MessageEvent extends MessageEvent_Instance {
  }
  class MessageEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * The content of the message received from the server.
     */
    data : ArrayBuffer | Blob | { [ key: string ]: string } | any [] ;
  }
  type Options = { clientProtocolHeaderRequired ? : boolean , concurrentRequestLimit ? : number , messageHeaders ? : { [ key: string ]: string } , messageUrlParams ? : { [ key: string ]: string } , sendRawJson ? : boolean , supportsCrossDomainXhr ? : boolean , testUrl ? : string } ;
  interface RuntimeProperties {
    /**
     * This method is used by the application to generate an ack-commit response
     * for the given commitId. Commit protocol spec:
     * https://github.com/bidiweb/webchannel/blob/master/commit.md
     * @param commitId The commitId which denotes the commit request from the server that needs be ack'ed.
     */
    ackCommit (a : Object ) : any ;
    /**
     * This method generates an in-band commit request to the server, which will
     * ack the commit request as soon as all messages sent prior to this commit
     * request have been committed by the application.
     *
     * Committing a message has a stronger semantics than delivering a message
     * to the application. Detail spec:
     * https://github.com/bidiweb/webchannel/blob/master/commit.md
     *
     * Timeout or cancellation is not supported and the application may have to
     * abort the channel if the commit-ack fails to arrive in time.
     * @param callback The callback will be invoked once an ack has been received for the current commit or any newly issued commit.
     */
    commit (a : ( ) => any ) : any ;
    getConcurrentRequestLimit ( ) : number ;
    getLastStatusCode ( ) : number ;
    /**
     * This method may be used by the application to recover from a peer failure
     * or to enable sender-initiated flow-control.
     *
     * Detail spec: https://github.com/bidiweb/webchannel/blob/master/commit.md
     */
    getNonAckedMessageCount ( ) : number ;
    /**
     * For applications that need support multiple channels (e.g. from
     * different tabs) to the same origin, use this method to decide if SPDY is
     * enabled and therefore it is safe to open multiple channels.
     *
     * If SPDY is disabled, the application may choose to limit the number of active
     * channels to one or use other means such as sub-domains to work around
     * the browser connection limit.
     */
    isSpdyEnabled ( ) : boolean ;
    /**
     * This method registers a callback to handle the commit request sent
     * by the server. Commit protocol spec:
     * https://github.com/bidiweb/webchannel/blob/master/commit.md
     * @param callback The callback will take an opaque commitId which needs be passed back to the server when an ack-commit response is generated by the client application, via ackCommit().
     */
    onCommit (a : (a : Object ) => any ) : any ;
  }
  var X_CLIENT_PROTOCOL : string ;
  var X_CLIENT_PROTOCOL_WEB_CHANNEL : string ;
}
declare module 'goog:goog.net.WebChannel' {
  import alias = ಠ_ಠ.clutz.goog.net.WebChannel;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * A WebChannelTransport instance represents a shared context of logical
   * connectivity between a browser client and a remote origin.
   *
   * Over a single WebChannelTransport instance, multiple WebChannels may be
   * created against different URLs, which may all share the same
   * underlying connectivity (i.e. TCP connection) whenever possible.
   *
   * When multi-domains are supported, such as CORS, multiple origins may be
   * supported over a single WebChannelTransport instance at the same time.
   *
   * Sharing between different window contexts such as tabs is not addressed
   * by WebChannelTransport. Applications may choose HTML5 shared workers
   * or other techniques to access the same transport instance
   * across different window contexts.
   */
  interface WebChannelTransport {
    /**
     * Create a new WebChannel instance.
     *
     * The new WebChannel is to be opened against the server-side resource
     * as specified by the given URL. See {@link goog.net.WebChannel} for detailed
     * semantics.
     * @param url The URL path for the new WebChannel instance.
     * @param opt_options Configuration for the new WebChannel instance. The configuration object is reusable after the new channel instance is created.
     */
    createWebChannel (a : string , b ? : ಠ_ಠ.clutz.goog.net.WebChannel.Options ) : ಠ_ಠ.clutz.goog.net.WebChannel ;
  }
}
declare module 'goog:goog.net.WebChannelTransport' {
  import alias = ಠ_ಠ.clutz.goog.net.WebChannelTransport;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * An xhr factory subclass which can be constructed using two factory methods.
   * This exists partly to allow the preservation of goog.net.XmlHttp.setFactory()
   * with an unchanged signature.
   */
  class WrapperXmlHttpFactory extends WrapperXmlHttpFactory_Instance {
  }
  class WrapperXmlHttpFactory_Instance extends ಠ_ಠ.clutz.goog.net.XmlHttpFactory_Instance {
    /**
     * An xhr factory subclass which can be constructed using two factory methods.
     * This exists partly to allow the preservation of goog.net.XmlHttp.setFactory()
     * with an unchanged signature.
     * @param xhrFactory A function which returns a new XHR object.
     * @param optionsFactory A function which returns the options associated with xhr objects from this factory.
     */
    constructor (xhrFactory : ( ) => ಠ_ಠ.clutz.goog.net.XhrLike | XMLHttpRequest , optionsFactory : ( ) => Object ) ;
    createInstance ( ) : ಠ_ಠ.clutz.goog.net.XhrLike | XMLHttpRequest ;
    getOptions ( ) : Object | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.net.WrapperXmlHttpFactory'): typeof ಠ_ಠ.clutz.goog.net.WrapperXmlHttpFactory;
}
declare module 'goog:goog.net.WrapperXmlHttpFactory' {
  import alias = ಠ_ಠ.clutz.goog.net.WrapperXmlHttpFactory;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Basic class for handling XMLHttpRequests.
   */
  class XhrIo extends XhrIo_Instance {
    /**
     * The Content-Type HTTP header name
     */
    static CONTENT_TYPE_HEADER : string ;
    /**
     * The Content-Type HTTP header value for a url-encoded form
     */
    static FORM_CONTENT_TYPE : string ;
    /**
     * The pattern matching the 'http' and 'https' URI schemes
     */
    static HTTP_SCHEME_PATTERN : RegExp ;
    /**
     * The methods that typically come along with form data.  We set different
     * headers depending on whether the HTTP action is one of these.
     */
    static METHODS_WITH_FORM_DATA : any [] ;
    /**
     * Disposes all non-disposed instances of goog.net.XhrIo created by
     * {@link goog.net.XhrIo.send}.
     * {@link goog.net.XhrIo.send} cleans up the goog.net.XhrIo instance
     * it creates when the request completes or fails.  However, if
     * the request never completes, then the goog.net.XhrIo is not disposed.
     * This can occur if the window is unloaded before the request completes.
     * We could have {@link goog.net.XhrIo.send} return the goog.net.XhrIo
     * it creates and make the client of {@link goog.net.XhrIo.send} be
     * responsible for disposing it in this case.  However, this makes things
     * significantly more complicated for the client, and the whole point
     * of {@link goog.net.XhrIo.send} is that it's simple and easy to use.
     * Clients of {@link goog.net.XhrIo.send} should call
     * {@link goog.net.XhrIo.cleanup} when doing final
     * cleanup on window unload.
     */
    static cleanup ( ) : void ;
    /**
     * Installs exception protection for all entry point introduced by
     * goog.net.XhrIo instances which are not protected by
     * {@link goog.debug.ErrorHandler#protectWindowSetTimeout},
     * {@link goog.debug.ErrorHandler#protectWindowSetInterval}, or
     * {@link goog.events.protectBrowserEventEntryPoint}.
     * @param errorHandler Error handler with which to protect the entry point(s).
     */
    static protectEntryPoints (errorHandler : ಠ_ಠ.clutz.goog.debug.ErrorHandler | null ) : void ;
    /**
     * Static send that creates a short lived instance of XhrIo to send the
     * request.
     * @param url Uri to make request to.
     * @param opt_callback Callback function for when request is complete.
     * @param opt_method Send method, default: GET.
     * @param opt_content Body data.
     * @param opt_headers Map of headers to add to the request.
     * @param opt_timeoutInterval Number of milliseconds after which an incomplete request will be aborted; 0 means no timeout is set.
     * @param opt_withCredentials Whether to send credentials with the request. Default to false. See {@link goog.net.XhrIo#setWithCredentials}.
     */
    static send (url : string | ಠ_ಠ.clutz.goog.Uri | null , opt_callback ? : ( (a : any ) => any ) | null , opt_method ? : string , opt_content ? : ArrayBuffer | null | ArrayBufferView | Blob | Document | FormData | string , opt_headers ? : Object | null , opt_timeoutInterval ? : number , opt_withCredentials ? : boolean ) : ಠ_ಠ.clutz.goog.net.XhrIo ;
  }
  class XhrIo_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Basic class for handling XMLHttpRequests.
     * @param opt_xmlHttpFactory Factory to use when creating XMLHttpRequest objects.
     */
    constructor (opt_xmlHttpFactory ? : ಠ_ಠ.clutz.goog.net.XmlHttpFactory | null ) ;
    /**
     * Map of default headers to add to every request, use:
     * XhrIo.headers.set(name, value)
     */
    headers : ಠ_ಠ.clutz.goog.structs.Map < any , any > ;
    /**
     * Abort the current XMLHttpRequest
     * @param opt_failureCode Optional error code to use - defaults to ABORT.
     */
    abort (opt_failureCode ? : ಠ_ಠ.clutz.goog.net.ErrorCode ) : void ;
    /**
     * Creates a new XHR object.
     */
    createXhr ( ) : ಠ_ಠ.clutz.goog.net.XhrLike | XMLHttpRequest ;
    /**
     * Nullifies all callbacks to reduce risks of leaks.
     */
    disposeInternal ( ) : void ;
    /**
     * Gets the text of all the headers in the response.
     * Will only return correct result when called from the context of a callback
     * and the request has completed.
     */
    getAllResponseHeaders ( ) : string ;
    /**
     * Get the last error message
     */
    getLastError ( ) : string ;
    /**
     * Get the last error message
     */
    getLastErrorCode ( ) : ಠ_ಠ.clutz.goog.net.ErrorCode ;
    /**
     * Get the last Uri that was requested
     */
    getLastUri ( ) : string ;
    /**
     * Gets whether progress events are enabled.
     */
    getProgressEventsEnabled ( ) : boolean ;
    /**
     * Get the readystate from the Xhr object
     * Will only return correct result when called from the context of a callback
     */
    getReadyState ( ) : ಠ_ಠ.clutz.goog.net.XmlHttp.ReadyState ;
    /**
     * Get the response as the type specificed by {@link #setResponseType}. At time
     * of writing, this is only directly supported in very recent versions of WebKit
     * (10.0.612.1 dev and later). If the field is not supported directly, we will
     * try to emulate it.
     *
     * Emulating the response means following the rules laid out at
     * http://www.w3.org/TR/XMLHttpRequest/#the-response-attribute
     *
     * On browsers with no support for this (Chrome < 10, Firefox < 4, etc), only
     * response types of DEFAULT or TEXT may be used, and the response returned will
     * be the text response.
     *
     * On browsers with Mozilla's draft support for array buffers (Firefox 4, 5),
     * only response types of DEFAULT, TEXT, and ARRAY_BUFFER may be used, and the
     * response returned will be either the text response or the Mozilla
     * implementation of the array buffer response.
     *
     * On browsers will full support, any valid response type supported by the
     * browser may be used, and the response provided by the browser will be
     * returned.
     */
    getResponse ( ) : any ;
    /**
     * Get the response body from the Xhr object. This property is only available
     * in IE since version 7 according to MSDN:
     * http://msdn.microsoft.com/en-us/library/ie/ms534368(v=vs.85).aspx
     * Will only return correct result when called from the context of a callback.
     *
     * One option is to construct a VBArray from the returned object and convert
     * it to a JavaScript array using the toArray method:
     * {@code (new window['VBArray'](xhrIo.getResponseBody())).toArray()}
     * This will result in an array of numbers in the range of [0..255]
     *
     * Another option is to use the VBScript CStr method to convert it into a
     * string as outlined in http://stackoverflow.com/questions/1919972
     */
    getResponseBody ( ) : Object | null ;
    /**
     * Get the value of the response-header with the given name from the Xhr object
     * Will only return correct result when called from the context of a callback
     * and the request has completed
     * @param key The name of the response-header to retrieve.
     */
    getResponseHeader (key : string ) : string | undefined ;
    /**
     * Returns all response headers as a key-value map.
     * Multiple values for the same header key can be combined into one,
     * separated by a comma and a space.
     * Note that the native getResponseHeader method for retrieving a single header
     * does a case insensitive match on the header name. This method does not
     * include any case normalization logic, it will just return a key-value
     * representation of the headers.
     * See: http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method
     */
    getResponseHeaders ( ) : { [ key: string ]: string } ;
    /**
     * Get the response and evaluates it as JSON from the Xhr object
     * Will only return correct result when called from the context of a callback
     * @param opt_xssiPrefix Optional XSSI prefix string to use for stripping of the response before parsing. This needs to be set only if your backend server prepends the same prefix string to the JSON response.
     */
    getResponseJson (opt_xssiPrefix ? : string ) : Object | null | undefined ;
    /**
     * Get the response text from the Xhr object
     * Will only return correct result when called from the context of a callback.
     */
    getResponseText ( ) : string ;
    /**
     * Gets the desired type for the response.
     */
    getResponseType ( ) : ಠ_ಠ.clutz.goog.net.XhrIo.ResponseType ;
    /**
     * Get the response XML from the Xhr object
     * Will only return correct result when called from the context of a callback.
     */
    getResponseXml ( ) : Document | null ;
    /**
     * Get the status from the Xhr object
     * Will only return correct result when called from the context of a callback
     */
    getStatus ( ) : number ;
    /**
     * Get the status text from the Xhr object
     * Will only return correct result when called from the context of a callback
     */
    getStatusText ( ) : string ;
    /**
     * Returns the number of milliseconds after which an incomplete request will be
     * aborted, or 0 if no timeout is set.
     */
    getTimeoutInterval ( ) : number ;
    /**
     * Gets whether a "credentialed" request is to be sent.
     */
    getWithCredentials ( ) : boolean ;
    isActive ( ) : boolean ;
    isComplete ( ) : boolean ;
    isSuccess ( ) : boolean ;
    /**
     * Instance send that actually uses XMLHttpRequest to make a server call.
     * @param url Uri to make request to.
     * @param opt_method Send method, default: GET.
     * @param opt_content Body data.
     * @param opt_headers Map of headers to add to the request.
     */
    send (url : string | ಠ_ಠ.clutz.goog.Uri | null , opt_method ? : string , opt_content ? : ArrayBuffer | null | ArrayBufferView | Blob | Document | FormData | string , opt_headers ? : Object | null ) : void ;
    /**
     * Sets whether progress events are enabled for this request. Note
     * that progress events require pre-flight OPTIONS request handling
     * for CORS requests, and may cause trouble with older browsers. See
     * progressEventsEnabled_ for details.
     * @param enabled Whether progress events should be enabled.
     */
    setProgressEventsEnabled (enabled : boolean ) : void ;
    /**
     * Sets the desired type for the response. At time of writing, this is only
     * supported in very recent versions of WebKit (10.0.612.1 dev and later).
     *
     * If this is used, the response may only be accessed via {@link #getResponse}.
     * @param type The desired type for the response.
     */
    setResponseType (type : ಠ_ಠ.clutz.goog.net.XhrIo.ResponseType ) : void ;
    /**
     * Sets the number of milliseconds after which an incomplete request will be
     * aborted and a {@link goog.net.EventType.TIMEOUT} event raised; 0 means no
     * timeout is set.
     * @param ms Timeout interval in milliseconds; 0 means none.
     */
    setTimeoutInterval (ms : number ) : void ;
    /**
     * Sets whether a "credentialed" request that is aware of cookie and
     * authentication information should be made. This option is only supported by
     * browsers that support HTTP Access Control. As of this writing, this option
     * is not supported in IE.
     * @param withCredentials Whether this should be a "credentialed" request.
     */
    setWithCredentials (withCredentials : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.net.XhrIo'): typeof ಠ_ಠ.clutz.goog.net.XhrIo;
}
declare module 'goog:goog.net.XhrIo' {
  import alias = ಠ_ಠ.clutz.goog.net.XhrIo;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.XhrIo {
  /**
   * Response types that may be requested for XMLHttpRequests.
   */
  type ResponseType = string ;
  var ResponseType : {
    ARRAY_BUFFER : ResponseType ,
    BLOB : ResponseType ,
    DEFAULT : ResponseType ,
    DOCUMENT : ResponseType ,
    TEXT : ResponseType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.net.XhrIo.ResponseType'): typeof ಠ_ಠ.clutz.goog.net.XhrIo.ResponseType;
}
declare module 'goog:goog.net.XhrIo.ResponseType' {
  import alias = ಠ_ಠ.clutz.goog.net.XhrIo.ResponseType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Interface for the common parts of XMLHttpRequest.
   *
   * Mostly copied from externs/w3c_xml.js.
   */
  interface XhrLike {
    abort ( ) : void ;
    getAllResponseHeaders ( ) : string ;
    getResponseHeader (header : string ) : string ;
    onreadystatechange : ( ( ) => any ) | null | undefined ;
    open (method : string , url : string , opt_async ? : boolean | null , opt_user ? : string | null , opt_password ? : string | null ) : void ;
    readyState : number ;
    responseText : string ;
    responseXML : Document | null ;
    send (opt_data ? : ArrayBuffer | null | ArrayBufferView | Blob | Document | FormData | string ) : void ;
    setRequestHeader (header : string , value : string ) : void ;
    status : number ;
    statusText : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.net.XhrLike {
  type OrNative = ಠ_ಠ.clutz.goog.net.XhrLike | XMLHttpRequest ;
}
declare module 'goog:goog.net.XhrLike' {
  import alias = ಠ_ಠ.clutz.goog.net.XhrLike;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Static class for creating XMLHttpRequest objects.
   */
  function XmlHttp ( ) : ಠ_ಠ.clutz.goog.net.XhrLike | XMLHttpRequest ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.net.XmlHttp'): typeof ಠ_ಠ.clutz.goog.net.XmlHttp;
}
declare module 'goog:goog.net.XmlHttp' {
  import alias = ಠ_ಠ.clutz.goog.net.XmlHttp;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.XmlHttp {
  /**
   * Type of options that an XmlHttp object can have.
   */
  type OptionType = number ;
  var OptionType : {
    LOCAL_REQUEST_ERROR : OptionType ,
    USE_NULL_FUNCTION : OptionType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.net.XmlHttp.OptionType'): typeof ಠ_ಠ.clutz.goog.net.XmlHttp.OptionType;
}
declare module 'goog:goog.net.XmlHttp.OptionType' {
  import alias = ಠ_ಠ.clutz.goog.net.XmlHttp.OptionType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.XmlHttp {
  /**
   * Status constants for XMLHTTP, matches:
   * https://msdn.microsoft.com/en-us/library/ms534361(v=vs.85).aspx
   */
  type ReadyState = number ;
  var ReadyState : {
    COMPLETE : ReadyState ,
    INTERACTIVE : ReadyState ,
    LOADED : ReadyState ,
    LOADING : ReadyState ,
    UNINITIALIZED : ReadyState ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.net.XmlHttp.ReadyState'): typeof ಠ_ಠ.clutz.goog.net.XmlHttp.ReadyState;
}
declare module 'goog:goog.net.XmlHttp.ReadyState' {
  import alias = ಠ_ಠ.clutz.goog.net.XmlHttp.ReadyState;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.XmlHttpDefines {
  var ASSUME_NATIVE_XHR : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.net.XmlHttpDefines'): typeof ಠ_ಠ.clutz.goog.net.XmlHttpDefines;
}
declare module 'goog:goog.net.XmlHttpDefines' {
  import alias = ಠ_ಠ.clutz.goog.net.XmlHttpDefines;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Abstract base class for an XmlHttpRequest factory.
   */
  class XmlHttpFactory extends XmlHttpFactory_Instance {
  }
  class XmlHttpFactory_Instance {
    private noStructuralTyping_: any;
    createInstance ( ) : ಠ_ಠ.clutz.goog.net.XhrLike | XMLHttpRequest ;
    getOptions ( ) : Object | null ;
    /**
     * Override this method in subclasses to preserve the caching offered by
     * getOptions().
     */
    internalGetOptions ( ) : Object | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.net.XmlHttpFactory'): typeof ಠ_ಠ.clutz.goog.net.XmlHttpFactory;
}
declare module 'goog:goog.net.XmlHttpFactory' {
  import alias = ಠ_ಠ.clutz.goog.net.XmlHttpFactory;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Create a new WebChannelTransport instance using the default implementation.
   * Throws an error message if no default transport available in the current
   * environment.
   */
  function createWebChannelTransport ( ) : ಠ_ಠ.clutz.goog.net.WebChannelTransport ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.net.createWebChannelTransport'): typeof ಠ_ಠ.clutz.goog.net.createWebChannelTransport;
}
declare module 'goog:goog.net.createWebChannelTransport' {
  import alias = ಠ_ಠ.clutz.goog.net.createWebChannelTransport;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.object {
  /**
   * Adds a key-value pair to the object. Throws an exception if the key is
   * already in use. Use set if you want to change an existing pair.
   * @param obj The object to which to add the key-value pair.
   * @param key The key to add.
   * @param val The value to add.
   */
  function add < K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , key : string , val : V ) : void ;
  /**
   * Removes all key value pairs from the object/map/hash.
   * @param obj The object to clear.
   */
  function clear (obj : Object | null ) : void ;
  /**
   * Returns a shallow clone of the object.
   * @param obj Object to clone.
   */
  function clone < K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null ) : { [ /* warning: coerced from K */ key: string ]: V } ;
  /**
   * Whether the object/hash/map contains the given object as a value.
   * An alias for goog.object.containsValue(obj, val).
   * @param obj The object in which to look for val.
   * @param val The object for which to check.
   */
  function contains < K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , val : V ) : boolean ;
  /**
   * Whether the object/map/hash contains the given key.
   * @param obj The object in which to look for key.
   * @param key The key for which to check.
   */
  function containsKey (obj : Object | null , key : any ) : boolean ;
  /**
   * Whether the object/map/hash contains the given value. This is O(n).
   * @param obj The object in which to look for val.
   * @param val The value for which to check.
   */
  function containsValue < K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , val : V ) : boolean ;
  /**
   * Creates a new object built from the key-value pairs provided as arguments.
   * @param var_args If only one argument is provided and it is an array then this is used as the arguments,  otherwise even arguments are used as the property names and odd arguments are used as the property values.
   */
  function create ( ...var_args : any [] ) : Object ;
  /**
   * Creates an immutable view of the underlying object, if the browser
   * supports immutable objects.
   *
   * In default mode, writes to this view will fail silently. In strict mode,
   * they will throw an error.
   * @param obj An object.
   */
  function createImmutableView < K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } ) : { [ /* warning: coerced from K */ key: string ]: V } ;
  /**
   * Creates a new object where the property names come from the arguments but
   * the value is always set to true
   * @param var_args If only one argument is provided and it is an array then this is used as the arguments,  otherwise the arguments are used as the property names.
   */
  function createSet ( ...var_args : any [] ) : Object ;
  /**
   * Compares two objects for equality using === on the values.
   */
  function equals < K , V > (a : { [ /* warning: coerced from K */ key: string ]: V } , b : { [ /* warning: coerced from K */ key: string ]: V } ) : boolean ;
  /**
   * Calls a function for each element in an object/map/hash. If
   * all calls return true, returns true. If any call returns false, returns
   * false at this point and does not continue to check the remaining elements.
   * @param obj The object to check.
   * @param f The function to call for every element. This function takes 3 arguments (the value, the key and the object) and should return a boolean.
   * @param opt_obj This is used as the 'this' object within f.
   */
  function every < T , K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : ( (a : V , b : any , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => boolean ) | null , opt_obj ? : T ) : boolean ;
  /**
   * Extends an object with another object.
   * This operates 'in-place'; it does not create a new Object.
   *
   * Example:
   * var o = {};
   * goog.object.extend(o, {a: 0, b: 1});
   * o; // {a: 0, b: 1}
   * goog.object.extend(o, {b: 2, c: 3});
   * o; // {a: 0, b: 2, c: 3}
   * @param target The object to modify. Existing properties will be overwritten if they are also present in one of the objects in {@code var_args}.
   * @param var_args The objects from which values will be copied.
   */
  function extend (target : Object | null ,  ...var_args : ( Object | null | undefined ) [] ) : void ;
  /**
   * Calls a function for each element in an object/map/hash. If that call returns
   * true, adds the element to a new object.
   * @param obj The object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the value, the key and the object) and should return a boolean. If the return value is true the element is added to the result object. If it is false the element is not included.
   * @param opt_obj This is used as the 'this' object within f.
   */
  function filter < T , K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : (a : V , b : any , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => boolean , opt_obj ? : T ) : { [ /* warning: coerced from K */ key: string ]: V } ;
  /**
   * Searches an object for an element that satisfies the given condition and
   * returns its key.
   * @param obj The object to search in.
   * @param f The function to call for every element. Takes 3 arguments (the value, the key and the object) and should return a boolean.
   * @param opt_this An optional "this" context for the function.
   */
  function findKey < T , K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : (a : V , b : string , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => boolean , opt_this ? : T ) : string | undefined ;
  /**
   * Searches an object for an element that satisfies the given condition and
   * returns its value.
   * @param obj The object to search in.
   * @param f The function to call for every element. Takes 3 arguments (the value, the key and the object) and should return a boolean.
   * @param opt_this An optional "this" context for the function.
   */
  function findValue < T , K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : (a : V , b : string , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => boolean , opt_this ? : T ) : V ;
  /**
   * Calls a function for each element in an object/map/hash.
   * @param obj The object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the value, the key and the object) and the return value is ignored.
   * @param opt_obj This is used as the 'this' object within f.
   */
  function forEach < T , K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : (a : V , b : any , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => any , opt_obj ? : T ) : void ;
  /**
   * Returns the value for the given key.
   * @param obj The object from which to get the value.
   * @param key The key for which to get the value.
   * @param opt_val The value to return if no item is found for the given key (default is undefined).
   */
  function get < K , V , R > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , key : string , opt_val ? : R ) : V | R | undefined ;
  /**
   * Returns one key from the object map, if any exists.
   * For map literals the returned key will be the first one in most of the
   * browsers (a know exception is Konqueror).
   * @param obj The object to pick a key from.
   */
  function getAnyKey (obj : Object | null ) : string | undefined ;
  /**
   * Returns one value from the object map, if any exists.
   * For map literals the returned value will be the first one in most of the
   * browsers (a know exception is Konqueror).
   * @param obj The object to pick a value from.
   */
  function getAnyValue < K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null ) : V | undefined ;
  /**
   * Returns the number of key-value pairs in the object map.
   * @param obj The object for which to get the number of key-value pairs.
   */
  function getCount (obj : Object | null ) : number ;
  /**
   * Returns the keys of the object/map/hash.
   * @param obj The object from which to get the keys.
   */
  function getKeys (obj : Object | null ) : string [] ;
  /**
   * Get a value from an object multiple levels deep.  This is useful for
   * pulling values from deeply nested objects, such as JSON responses.
   * Example usage: getValueByKeys(jsonObj, 'foo', 'entries', 3)
   * @param obj An object to get the value from.  Can be array-like.
   * @param var_args A number of keys (as strings, or numbers, for array-like objects).  Can also be specified as a single array of keys.
   */
  function getValueByKeys (obj : Object ,  ...var_args : ( string | number | IArrayLike < number | string > | undefined ) [] ) : any ;
  /**
   * Returns the values of the object/map/hash.
   * @param obj The object from which to get the values.
   */
  function getValues < K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null ) : V [] ;
  /**
   * Whether two values are not observably distinguishable. This
   * correctly detects that 0 is not the same as -0 and two NaNs are
   * practically equivalent.
   *
   * The implementation is as suggested by harmony:egal proposal.
   * @param v The first value to compare.
   * @param v2 The second value to compare.
   */
  function is (v : any , v2 : any ) : boolean ;
  /**
   * Whether the object/map/hash is empty.
   * @param obj The object to test.
   */
  function isEmpty (obj : Object | null ) : boolean ;
  function isImmutableView (obj : Object ) : boolean ;
  /**
   * For every element in an object/map/hash calls a function and inserts the
   * result into a new object.
   * @param obj The object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the value, the key and the object) and should return something. The result will be inserted into a new object.
   * @param opt_obj This is used as the 'this' object within f.
   */
  function map < T , K , V , R > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : (a : V , b : any , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => R , opt_obj ? : T ) : { [ /* warning: coerced from K */ key: string ]: R } ;
  /**
   * Removes a key-value pair based on the key.
   * @param obj The object from which to remove the key.
   * @param key The key to remove.
   */
  function remove (obj : Object | null , key : any ) : boolean ;
  /**
   * Adds a key-value pair to the object/map/hash.
   * @param obj The object to which to add the key-value pair.
   * @param key The key to add.
   * @param value The value to add.
   */
  function set < K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , key : string , value : V ) : void ;
  /**
   * Adds a key-value pair to the object/map/hash if it doesn't exist yet.
   * @param obj The object to which to add the key-value pair.
   * @param key The key to add.
   * @param value The value to add if the key wasn't present.
   */
  function setIfUndefined < K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , key : string , value : V ) : V ;
  /**
   * Sets a key and value to an object if the key is not set. The value will be
   * the return value of the given function. If the key already exists, the
   * object will not be changed and the function will not be called (the function
   * will be lazily evaluated -- only called if necessary).
   *
   * This function is particularly useful for use with a map used a as a cache.
   * @param obj The object to which to add the key-value pair.
   * @param key The key to add.
   * @param f The value to add if the key wasn't present.
   */
  function setWithReturnValueIfNotSet < K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } , key : string , f : ( ) => V ) : V ;
  /**
   * Calls a function for each element in an object/map/hash. If any
   * call returns true, returns true (without checking the rest). If
   * all calls return false, returns false.
   * @param obj The object to check.
   * @param f The function to call for every element. This function takes 3 arguments (the value, the key and the object) and should return a boolean.
   * @param opt_obj This is used as the 'this' object within f.
   */
  function some < T , K , V > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : (a : V , b : any , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => boolean , opt_obj ? : T ) : boolean ;
  /**
   * Returns a new object in which all the keys and values are interchanged
   * (keys become values and values become keys). If multiple keys map to the
   * same value, the chosen transposed value is implementation-dependent.
   * @param obj The object to transpose.
   */
  function transpose (obj : Object | null ) : Object ;
  /**
   * Clones a value. The input may be an Object, Array, or basic type. Objects and
   * arrays will be cloned recursively.
   *
   * WARNINGS:
   * <code>goog.object.unsafeClone</code> does not detect reference loops. Objects
   * that refer to themselves will cause infinite recursion.
   *
   * <code>goog.object.unsafeClone</code> is unaware of unique identifiers, and
   * copies UIDs created by <code>getUid</code> into cloned results.
   * @param obj The value to clone.
   */
  function unsafeClone (obj : any ) : any ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.object'): typeof ಠ_ಠ.clutz.goog.object;
}
declare module 'goog:goog.object' {
  import alias = ಠ_ಠ.clutz.goog.object;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
  /**
   * Returns the corner opposite the given one horizontally and vertically.
   * @param corner The popup corner used to flip.
   */
  function flipCorner (corner : ಠ_ಠ.clutz.goog.positioning.Corner ) : ಠ_ಠ.clutz.goog.positioning.Corner ;
  /**
   * Returns the corner opposite the given one horizontally.
   * @param corner The popup corner used to flip.
   */
  function flipCornerHorizontal (corner : ಠ_ಠ.clutz.goog.positioning.Corner ) : ಠ_ಠ.clutz.goog.positioning.Corner ;
  /**
   * Returns the corner opposite the given one vertically.
   * @param corner The popup corner used to flip.
   */
  function flipCornerVertical (corner : ಠ_ಠ.clutz.goog.positioning.Corner ) : ಠ_ಠ.clutz.goog.positioning.Corner ;
  /**
   * Returns an absolute corner (top/bottom left/right) given an absolute
   * or relative (top/bottom start/end) corner and the direction of an element.
   * Absolute corners remain unchanged.
   * @param element DOM element to test for RTL direction.
   * @param corner The popup corner used for positioning.
   */
  function getEffectiveCorner (element : Element | null , corner : ಠ_ಠ.clutz.goog.positioning.Corner ) : ಠ_ಠ.clutz.goog.positioning.Corner ;
  /**
   * Calculates the page offset of the given element's
   * offsetParent. This value can be used to translate any x- and
   * y-offset relative to the page to an offset relative to the
   * offsetParent, which can then be used directly with as position
   * coordinate for {@code positionWithCoordinate}.
   * @param movableElement The element to calculate.
   */
  function getOffsetParentPageOffset (movableElement : Element ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Computes the position for an element to be placed on-screen at the
   * specified coordinates. Returns an object containing both the resulting
   * rectangle, and the overflow status bitmap.
   * @param absolutePos The coordinate to position the element at.
   * @param elementSize The size of the element to be positioned.
   * @param elementCorner The corner of the movableElement that that should be positioned.
   * @param opt_margin A margin specified in pixels. After the normal positioning algorithm is applied and any offset, the margin is then applied. Positive coordinates move the popup away from the spot it was positioned towards its center. Negative coordinates move it towards the spot it was positioned away from its center.
   * @param opt_viewport Box object describing the dimensions of the viewport. Required if opt_overflow is specified.
   * @param opt_overflow Overflow handling mode. Defaults to IGNORE if not specified, {@see goog.positioning.Overflow}.
   */
  function getPositionAtCoordinate (absolutePos : ಠ_ಠ.clutz.goog.math.Coordinate , elementSize : ಠ_ಠ.clutz.goog.math.Size , elementCorner : ಠ_ಠ.clutz.goog.positioning.Corner , opt_margin ? : ಠ_ಠ.clutz.goog.math.Box | null , opt_viewport ? : ಠ_ಠ.clutz.goog.math.Box | null , opt_overflow ? : number | null ) : { rect : ಠ_ಠ.clutz.goog.math.Rect , status : ಠ_ಠ.clutz.goog.positioning.OverflowStatus } ;
  /**
   * Positions a movable element relative to an anchor element. The caller
   * specifies the corners that should touch. This functions then moves the
   * movable element accordingly.
   * @param anchorElement The element that is the anchor for where the movable element should position itself.
   * @param anchorElementCorner The corner of the anchorElement for positioning the movable element.
   * @param movableElement The element to move.
   * @param movableElementCorner The corner of the movableElement that that should be positioned adjacent to the anchor element.
   * @param opt_offset An offset specified in pixels. After the normal positioning algorithm is applied, the offset is then applied. Positive coordinates move the popup closer to the center of the anchor element. Negative coordinates move the popup away from the center of the anchor element.
   * @param opt_margin A margin specified in pixels. After the normal positioning algorithm is applied and any offset, the margin is then applied. Positive coordinates move the popup away from the spot it was positioned towards its center. Negative coordinates move it towards the spot it was positioned away from its center.
   * @param opt_overflow Overflow handling mode. Defaults to IGNORE if not specified. Bitmap, {@see goog.positioning.Overflow}.
   * @param opt_preferredSize The preferred size of the movableElement.
   * @param opt_viewport Box object describing the dimensions of the viewport. The viewport is specified relative to offsetParent of {@code movableElement}. In other words, the viewport can be thought of as describing a "position: absolute" element contained in the offsetParent. It defaults to visible area of nearest scrollable ancestor of {@code movableElement} (see {@code goog.style.getVisibleRectForElement}).
   */
  function positionAtAnchor (anchorElement : Element | null , anchorElementCorner : ಠ_ಠ.clutz.goog.positioning.Corner , movableElement : Element | null , movableElementCorner : ಠ_ಠ.clutz.goog.positioning.Corner , opt_offset ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_margin ? : ಠ_ಠ.clutz.goog.math.Box | null , opt_overflow ? : number | null , opt_preferredSize ? : ಠ_ಠ.clutz.goog.math.Size | null , opt_viewport ? : ಠ_ಠ.clutz.goog.math.Box | null ) : ಠ_ಠ.clutz.goog.positioning.OverflowStatus ;
  /**
   * Positions the specified corner of the movable element at the
   * specified coordinate.
   * @param absolutePos The coordinate to position the element at.
   * @param movableElement The element to be positioned.
   * @param movableElementCorner The corner of the movableElement that that should be positioned.
   * @param opt_margin A margin specified in pixels. After the normal positioning algorithm is applied and any offset, the margin is then applied. Positive coordinates move the popup away from the spot it was positioned towards its center. Negative coordinates move it towards the spot it was positioned away from its center.
   * @param opt_viewport Box object describing the dimensions of the viewport. Required if opt_overflow is specified.
   * @param opt_overflow Overflow handling mode. Defaults to IGNORE if not specified, {@see goog.positioning.Overflow}.
   * @param opt_preferredSize The preferred size of the movableElement. Defaults to the current size.
   */
  function positionAtCoordinate (absolutePos : ಠ_ಠ.clutz.goog.math.Coordinate | null , movableElement : Element | null , movableElementCorner : ಠ_ಠ.clutz.goog.positioning.Corner , opt_margin ? : ಠ_ಠ.clutz.goog.math.Box | null , opt_viewport ? : ಠ_ಠ.clutz.goog.math.Box | null , opt_overflow ? : number | null , opt_preferredSize ? : ಠ_ಠ.clutz.goog.math.Size | null ) : ಠ_ಠ.clutz.goog.positioning.OverflowStatus ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.positioning'): typeof ಠ_ಠ.clutz.goog.positioning;
}
declare module 'goog:goog.positioning' {
  import alias = ಠ_ಠ.clutz.goog.positioning;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
  /**
   * Enum for representing an element corner for positioning the popup.
   *
   * The START constants map to LEFT if element directionality is left
   * to right and RIGHT if the directionality is right to left.
   * Likewise END maps to RIGHT or LEFT depending on the directionality.
   */
  type Corner = number ;
  var Corner : {
    BOTTOM_CENTER : Corner ,
    BOTTOM_END : Corner ,
    BOTTOM_LEFT : Corner ,
    BOTTOM_RIGHT : Corner ,
    BOTTOM_START : Corner ,
    TOP_CENTER : Corner ,
    TOP_END : Corner ,
    TOP_LEFT : Corner ,
    TOP_RIGHT : Corner ,
    TOP_START : Corner ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.positioning.Corner'): typeof ಠ_ಠ.clutz.goog.positioning.Corner;
}
declare module 'goog:goog.positioning.Corner' {
  import alias = ಠ_ಠ.clutz.goog.positioning.Corner;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
  /**
   * Enum for bits in the {@see goog.positioning.Corner) bitmap.
   */
  type CornerBit = number ;
  var CornerBit : {
    BOTTOM : CornerBit ,
    CENTER : CornerBit ,
    FLIP_RTL : CornerBit ,
    RIGHT : CornerBit ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.positioning.CornerBit'): typeof ಠ_ಠ.clutz.goog.positioning.CornerBit;
}
declare module 'goog:goog.positioning.CornerBit' {
  import alias = ಠ_ಠ.clutz.goog.positioning.CornerBit;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
  /**
   * Enum for representing position handling in cases where the element would be
   * positioned outside the viewport.
   */
  type Overflow = number ;
  var Overflow : {
    ADJUST_X : Overflow ,
    ADJUST_X_EXCEPT_OFFSCREEN : Overflow ,
    ADJUST_Y : Overflow ,
    ADJUST_Y_EXCEPT_OFFSCREEN : Overflow ,
    FAIL_X : Overflow ,
    FAIL_Y : Overflow ,
    IGNORE : Overflow ,
    RESIZE_HEIGHT : Overflow ,
    RESIZE_WIDTH : Overflow ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.positioning.Overflow'): typeof ಠ_ಠ.clutz.goog.positioning.Overflow;
}
declare module 'goog:goog.positioning.Overflow' {
  import alias = ಠ_ಠ.clutz.goog.positioning.Overflow;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
  /**
   * Enum for representing the outcome of a positioning call.
   */
  type OverflowStatus = number ;
  var OverflowStatus : {
    ADJUSTED_X : OverflowStatus ,
    ADJUSTED_Y : OverflowStatus ,
    FAILED_BOTTOM : OverflowStatus ,
    FAILED_LEFT : OverflowStatus ,
    FAILED_OUTSIDE_VIEWPORT : OverflowStatus ,
    FAILED_RIGHT : OverflowStatus ,
    FAILED_TOP : OverflowStatus ,
    HEIGHT_ADJUSTED : OverflowStatus ,
    NONE : OverflowStatus ,
    WIDTH_ADJUSTED : OverflowStatus ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.positioning.OverflowStatus'): typeof ಠ_ಠ.clutz.goog.positioning.OverflowStatus;
}
declare module 'goog:goog.positioning.OverflowStatus' {
  import alias = ಠ_ಠ.clutz.goog.positioning.OverflowStatus;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.promise {
  /**
   * Resolver interface for promises. The resolver is a convenience interface that
   * bundles the promise and its associated resolve and reject functions together,
   * for cases where the resolver needs to be persisted internally.
   */
  interface Resolver < TYPE > {
    /**
     * The promise that created this resolver.
     */
    promise : ಠ_ಠ.clutz.goog.Promise < any , any > ;
    /**
     * Rejects this resolver with the specified reason.
     */
    reject (a ? : any ) : void ;
    /**
     * Resolves this resolver with the specified value.
     */
    resolve (a ? : TYPE | null | { then : any } ) : any ;
  }
}
declare module 'goog:goog.promise.Resolver' {
  import alias = ಠ_ಠ.clutz.goog.promise.Resolver;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.pubsub {
  /**
   * Topic-based publish/subscribe channel.  Maintains a map of topics to
   * subscriptions.  When a message is published to a topic, all functions
   * subscribed to that topic are invoked in the order they were added.
   * Uncaught errors abort publishing.
   *
   * Topics may be identified by any nonempty string, <strong>except</strong>
   * strings corresponding to native Object properties, e.g. "constructor",
   * "toString", "hasOwnProperty", etc.
   */
  class PubSub extends PubSub_Instance {
  }
  class PubSub_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Topic-based publish/subscribe channel.  Maintains a map of topics to
     * subscriptions.  When a message is published to a topic, all functions
     * subscribed to that topic are invoked in the order they were added.
     * Uncaught errors abort publishing.
     *
     * Topics may be identified by any nonempty string, <strong>except</strong>
     * strings corresponding to native Object properties, e.g. "constructor",
     * "toString", "hasOwnProperty", etc.
     * @param opt_async Enable asynchronous behavior.  Recommended for new code.  See notes on the publish() method.
     */
    constructor (opt_async ? : boolean ) ;
    /**
     * Clears the subscription list for a topic, or all topics if unspecified.
     * @param opt_topic Topic to clear (all topics if unspecified).
     */
    clear (opt_topic ? : string ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns the number of subscriptions to the given topic (or all topics if
     * unspecified). This number will not change while publishing any messages.
     * @param opt_topic The topic (all topics if unspecified).
     */
    getCount (opt_topic ? : string ) : number ;
    /**
     * Publishes a message to a topic.  Calls functions subscribed to the topic in
     * the order in which they were added, passing all arguments along.
     *
     * If this object was created with async=true, subscribed functions are called
     * via goog.async.run().  Otherwise, the functions are called directly, and if
     * any of them throw an uncaught error, publishing is aborted.
     * @param topic Topic to publish to.
     * @param var_args Arguments that are applied to each subscription function.
     */
    publish (topic : string ,  ...var_args : any [] ) : boolean ;
    /**
     * Subscribes a function to a topic.  The function is invoked as a method on
     * the given {@code opt_context} object, or in the global scope if no context
     * is specified.  Subscribing the same function to the same topic multiple
     * times will result in multiple function invocations while publishing.
     * Returns a subscription key that can be used to unsubscribe the function from
     * the topic via {@link #unsubscribeByKey}.
     * @param topic Topic to subscribe to.
     * @param fn Function to be invoked when a message is published to the given topic.
     * @param opt_context Object in whose context the function is to be called (the global scope if none).
     */
    subscribe (topic : string , fn : ( ( ...a : any [] ) => any ) | null , opt_context ? : Object | null ) : number ;
    /**
     * Subscribes a single-use function to a topic.  The function is invoked as a
     * method on the given {@code opt_context} object, or in the global scope if
     * no context is specified, and is then unsubscribed.  Returns a subscription
     * key that can be used to unsubscribe the function from the topic via
     * {@link #unsubscribeByKey}.
     * @param topic Topic to subscribe to.
     * @param fn Function to be invoked once and then unsubscribed when a message is published to the given topic.
     * @param opt_context Object in whose context the function is to be called (the global scope if none).
     */
    subscribeOnce (topic : string , fn : ( ( ...a : any [] ) => any ) | null , opt_context ? : Object | null ) : number ;
    /**
     * Unsubscribes a function from a topic.  Only deletes the first match found.
     * Returns a Boolean indicating whether a subscription was removed.
     * @param topic Topic to unsubscribe from.
     * @param fn Function to unsubscribe.
     * @param opt_context Object in whose context the function was to be called (the global scope if none).
     */
    unsubscribe (topic : string , fn : ( ( ...a : any [] ) => any ) | null , opt_context ? : Object | null ) : boolean ;
    /**
     * Removes a subscription based on the key returned by {@link #subscribe}.
     * No-op if no matching subscription is found.  Returns a Boolean indicating
     * whether a subscription was removed.
     * @param key Subscription key.
     */
    unsubscribeByKey (key : number ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.pubsub.PubSub'): typeof ಠ_ಠ.clutz.goog.pubsub.PubSub;
}
declare module 'goog:goog.pubsub.PubSub' {
  import alias = ಠ_ಠ.clutz.goog.pubsub.PubSub;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.reflect {
  /**
   * Retrieves a value from a cache given a key. The compiler provides special
   * consideration for this call such that it is generally considered side-effect
   * free. However, if the {@code opt_keyFn} or {@code valueFn} have side-effects
   * then the entire call is considered to have side-effects.
   *
   * Conventionally storing the value on the cache would be considered a
   * side-effect and preclude unused calls from being pruned, ie. even if
   * the value was never used, it would still always be stored in the cache.
   *
   * Providing a side-effect free {@code valueFn} and {@code opt_keyFn}
   * allows unused calls to {@code goog.cache} to be pruned.
   * @param cacheObj The object that contains the cached values.
   * @param key The key to lookup in the cache. If it is not string or number then a {@code opt_keyFn} should be provided. The key is also used as the parameter to the {@code valueFn}.
   * @param valueFn The value provider to use to calculate the value to store in the cache. This function should be side-effect free to take advantage of the optimization.
   * @param opt_keyFn The key provider to determine the cache map key. This should be used if the given key is not a string or number. If not provided then the given key is used. This function should be side-effect free to take advantage of the optimization.
   */
  function cache < K , V > (cacheObj : { [ /* warning: coerced from K */ key: string ]: V } , key : any , valueFn : (a : any ) => V , opt_keyFn ? : (a : any ) => K ) : V ;
  /**
   * Check if a property can be accessed without throwing an exception.
   * @param obj The owner of the property.
   * @param prop The property name.
   */
  function canAccessProperty (obj : Object | null , prop : string ) : boolean ;
  /**
   * Syntax for object literal casts.
   * @param type Type to cast to.
   * @param object Object literal to cast.
   */
  function object (type : ( ...a : any [] ) => any , object : Object | null ) : Object | null ;
  /**
   * Syntax for renaming property strings.
   * @param prop Name of the property
   * @param object Instance of the object whose type will be used for renaming
   */
  function objectProperty (prop : string , object : Object ) : string ;
  /**
   * To assert to the compiler that an operation is needed when it would
   * otherwise be stripped. For example:
   * <code>
   * // Force a layout
   * goog.reflect.sinkValue(dialog.offsetHeight);
   * </code>
   */
  function sinkValue < T > (x : T ) : T ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.reflect'): typeof ಠ_ಠ.clutz.goog.reflect;
}
declare module 'goog:goog.reflect' {
  import alias = ಠ_ಠ.clutz.goog.reflect;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage {
  /**
   * Provides a storage with expiring keys and a collection method.
   */
  class CollectableStorage extends CollectableStorage_Instance {
  }
  class CollectableStorage_Instance extends ಠ_ಠ.clutz.goog.storage.ExpiringStorage_Instance {
    /**
     * Provides a storage with expiring keys and a collection method.
     * @param mechanism The underlying storage mechanism.
     */
    constructor (mechanism : ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism ) ;
    /**
     * Cleans up the storage by removing expired keys.
     * @param opt_strict Also remove invalid keys.
     */
    collect (opt_strict ? : boolean ) : void ;
    /**
     * Cleans up the storage by removing expired keys.
     * @param keys List of all keys.
     * @param opt_strict Also remove invalid keys.
     */
    collectInternal (keys : null | { length : number } | { __iterator__ : any } , opt_strict ? : boolean ) : string [] ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.storage.CollectableStorage'): typeof ಠ_ಠ.clutz.goog.storage.CollectableStorage;
}
declare module 'goog:goog.storage.CollectableStorage' {
  import alias = ಠ_ಠ.clutz.goog.storage.CollectableStorage;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage {
  /**
   * Errors thrown by the storage.
   */
  type ErrorCode = string ;
  var ErrorCode : {
    DECRYPTION_ERROR : ErrorCode ,
    INVALID_VALUE : ErrorCode ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.storage.ErrorCode'): typeof ಠ_ಠ.clutz.goog.storage.ErrorCode;
}
declare module 'goog:goog.storage.ErrorCode' {
  import alias = ಠ_ಠ.clutz.goog.storage.ErrorCode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage {
  /**
   * Provides a storage with expiring keys.
   */
  class ExpiringStorage extends ExpiringStorage_Instance {
    /**
     * Metadata key under which the creation time is stored.
     */
    static CREATION_TIME_KEY : string ;
    /**
     * Metadata key under which the expiration time is stored.
     */
    static EXPIRATION_TIME_KEY : string ;
    /**
     * Returns the wrapper creation time.
     * @param wrapper The wrapper.
     */
    static getCreationTime (wrapper : Object ) : number | undefined ;
    /**
     * Returns the wrapper expiration time.
     * @param wrapper The wrapper.
     */
    static getExpirationTime (wrapper : Object ) : number | undefined ;
    /**
     * Checks if the data item has expired.
     * @param wrapper The wrapper.
     */
    static isExpired (wrapper : Object ) : boolean ;
  }
  class ExpiringStorage_Instance extends ಠ_ಠ.clutz.goog.storage.RichStorage_Instance {
    /**
     * Provides a storage with expiring keys.
     * @param mechanism The underlying storage mechanism.
     */
    constructor (mechanism : ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism ) ;
    /**
     * Get an item wrapper (the item and its metadata) from the storage.
     * @param key The key to get.
     * @param opt_expired If true, return expired wrappers as well.
     */
    getWrapper (key : string , opt_expired ? : boolean ) : Object | undefined ;
    /**
     * Set an item in the storage.
     * @param key The key to set.
     * @param value The value to serialize to a string and save.
     * @param opt_expiration The number of miliseconds since epoch (as in goog.now()) when the value is to expire. If the expiration time is not provided, the value will persist as long as possible.
     */
    set (key : string , value : any , opt_expiration ? : number ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.storage.ExpiringStorage'): typeof ಠ_ಠ.clutz.goog.storage.ExpiringStorage;
}
declare module 'goog:goog.storage.ExpiringStorage' {
  import alias = ಠ_ಠ.clutz.goog.storage.ExpiringStorage;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage {
  /**
   * Provides a storage for data with attached metadata.
   */
  class RichStorage extends RichStorage_Instance {
    /**
     * Metadata key under which the actual data is stored.
     */
    static DATA_KEY : string ;
  }
  class RichStorage_Instance extends ಠ_ಠ.clutz.goog.storage.Storage_Instance {
    /**
     * Provides a storage for data with attached metadata.
     * @param mechanism The underlying storage mechanism.
     */
    constructor (mechanism : ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism ) ;
    get (key : string ) : any ;
    /**
     * Get an item wrapper (the item and its metadata) from the storage.
     *
     * WARNING: This returns an Object, which once used to be
     * goog.storage.RichStorage.Wrapper. This is due to the fact
     * that deserialized objects lose type information and it
     * is hard to do proper typecasting in JavaScript. Be sure
     * you know what you are doing when using the returned value.
     * @param key The key to get.
     */
    getWrapper (key : string ) : Object | undefined ;
    set (key : string , value : any ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.storage.RichStorage'): typeof ಠ_ಠ.clutz.goog.storage.RichStorage;
}
declare module 'goog:goog.storage.RichStorage' {
  import alias = ಠ_ಠ.clutz.goog.storage.RichStorage;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.RichStorage {
  /**
   * Wraps a value so metadata can be associated with it. You probably want
   * to use goog.storage.RichStorage.Wrapper.wrapIfNecessary to avoid multiple
   * embeddings.
   */
  class Wrapper extends Wrapper_Instance {
    /**
     * Unwraps a value, any metadata is discarded (not returned). You might want to
     * use goog.storage.RichStorage.Wrapper.unwrapIfPossible to handle cases where
     * the wrapper is missing.
     * @param wrapper The wrapper.
     */
    static unwrap (wrapper : Object ) : any ;
    /**
     * Convenience method for unwrapping a value. Returns undefined if the
     * wrapper is missing.
     * @param wrapper The wrapper.
     */
    static unwrapIfPossible (wrapper : Object | undefined ) : any ;
    /**
     * Convenience method for wrapping a value so metadata can be associated with
     * it. No-op if the value is already wrapped or is undefined.
     * @param value The value to wrap.
     */
    static wrapIfNecessary (value : any ) : ಠ_ಠ.clutz.goog.storage.RichStorage.Wrapper | undefined ;
  }
  class Wrapper_Instance {
    private noStructuralTyping_: any;
    /**
     * Wraps a value so metadata can be associated with it. You probably want
     * to use goog.storage.RichStorage.Wrapper.wrapIfNecessary to avoid multiple
     * embeddings.
     * @param value The value to wrap.
     */
    constructor (value : any ) ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.storage.RichStorage.Wrapper'): typeof ಠ_ಠ.clutz.goog.storage.RichStorage.Wrapper;
}
declare module 'goog:goog.storage.RichStorage.Wrapper' {
  import alias = ಠ_ಠ.clutz.goog.storage.RichStorage.Wrapper;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage {
  /**
   * The base implementation for all storage APIs.
   */
  class Storage extends Storage_Instance {
  }
  class Storage_Instance {
    private noStructuralTyping_: any;
    /**
     * The base implementation for all storage APIs.
     * @param mechanism The underlying storage mechanism.
     */
    constructor (mechanism : ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism ) ;
    /**
     * The mechanism used to persist key-value pairs.
     */
    mechanism : ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism | null ;
    /**
     * Gets an item from the data storage.
     * @param key The key to get.
     */
    get (key : string ) : any ;
    /**
     * Removes an item from the data storage.
     * @param key The key to remove.
     */
    remove (key : string ) : void ;
    /**
     * Sets an item in the data storage.
     * @param key The key to set.
     * @param value The value to serialize to a string and save.
     */
    set (key : string , value : any ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.storage.Storage'): typeof ಠ_ಠ.clutz.goog.storage.Storage;
}
declare module 'goog:goog.storage.Storage' {
  import alias = ಠ_ಠ.clutz.goog.storage.Storage;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
  /**
   * Errors thrown by storage mechanisms.
   */
  type ErrorCode = string ;
  var ErrorCode : {
    INVALID_VALUE : ErrorCode ,
    QUOTA_EXCEEDED : ErrorCode ,
    STORAGE_DISABLED : ErrorCode ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.storage.mechanism.ErrorCode'): typeof ಠ_ಠ.clutz.goog.storage.mechanism.ErrorCode;
}
declare module 'goog:goog.storage.mechanism.ErrorCode' {
  import alias = ಠ_ಠ.clutz.goog.storage.mechanism.ErrorCode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
  /**
   * Provides a storage mechanism that uses HTML5 local storage.
   */
  class HTML5LocalStorage extends HTML5LocalStorage_Instance {
  }
  class HTML5LocalStorage_Instance extends ಠ_ಠ.clutz.goog.storage.mechanism.HTML5WebStorage_Instance {
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.storage.mechanism.HTML5LocalStorage'): typeof ಠ_ಠ.clutz.goog.storage.mechanism.HTML5LocalStorage;
}
declare module 'goog:goog.storage.mechanism.HTML5LocalStorage' {
  import alias = ಠ_ಠ.clutz.goog.storage.mechanism.HTML5LocalStorage;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
  /**
   * Provides a storage mechanism that uses HTML5 Web storage.
   */
  class HTML5WebStorage extends HTML5WebStorage_Instance {
  }
  class HTML5WebStorage_Instance extends ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism_Instance {
    /**
     * Provides a storage mechanism that uses HTML5 Web storage.
     * @param storage The Web storage object.
     */
    constructor (storage : Storage | null ) ;
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.iter.Iterator < any > ;
    clear ( ) : void ;
    get (key : string ) : string | null ;
    getCount ( ) : number ;
    /**
     * Determines whether or not the mechanism is available.
     * It works only if the provided web storage object exists and is enabled.
     */
    isAvailable ( ) : boolean ;
    /**
     * Gets the key for a given key index. If an index outside of
     * [0..this.getCount()) is specified, this function returns null.
     * @param index A key index.
     */
    key (index : number ) : string | null ;
    remove (key : string ) : any ;
    set (key : string , value : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.storage.mechanism.HTML5WebStorage'): typeof ಠ_ಠ.clutz.goog.storage.mechanism.HTML5WebStorage;
}
declare module 'goog:goog.storage.mechanism.HTML5WebStorage' {
  import alias = ಠ_ಠ.clutz.goog.storage.mechanism.HTML5WebStorage;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
  /**
   * Interface for all iterable storage mechanisms.
   */
  class IterableMechanism extends IterableMechanism_Instance {
  }
  class IterableMechanism_Instance extends ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism_Instance {
    /**
     * Returns an iterator that iterates over the elements in the storage. Will
     * throw goog.iter.StopIteration after the last element.
     * @param opt_keys True to iterate over the keys. False to iterate over the values.  The default value is false.
     */
    __iterator__ (a ? : boolean ) : ಠ_ಠ.clutz.goog.iter.Iterator < any > ;
    /**
     * Remove all key-value pairs.
     *
     * Could be overridden in a subclass, as the default implementation is not very
     * efficient - it iterates over all keys.
     */
    clear ( ) : void ;
    /**
     * Get the number of stored key-value pairs.
     *
     * Could be overridden in a subclass, as the default implementation is not very
     * efficient - it iterates over all keys.
     */
    getCount ( ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.storage.mechanism.IterableMechanism'): typeof ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism;
}
declare module 'goog:goog.storage.mechanism.IterableMechanism' {
  import alias = ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
  /**
   * Basic interface for all storage mechanisms.
   */
  class Mechanism extends Mechanism_Instance {
  }
  class Mechanism_Instance {
    private noStructuralTyping_: any;
    /**
     * Get the value stored under a key.
     * @param key The key to get.
     */
    get (a : string ) : string | null ;
    /**
     * Remove a key and its value.
     * @param key The key to remove.
     */
    remove (a : string ) : any ;
    /**
     * Set a value for a key.
     * @param key The key to set.
     * @param value The string to save.
     */
    set (a : string , b : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.storage.mechanism.Mechanism'): typeof ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism;
}
declare module 'goog:goog.storage.mechanism.Mechanism' {
  import alias = ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
  var DETECT_DOUBLE_ESCAPING : boolean ;
  var FORCE_NON_DOM_HTML_UNESCAPING : boolean ;
  /**
   * Concatenates string expressions. This is useful
   * since some browsers are very inefficient when it comes to using plus to
   * concat strings. Be careful when using null and undefined here since
   * these will not be included in the result. If you need to represent these
   * be sure to cast the argument to a String first.
   * For example:
   * <pre>buildString('a', 'b', 'c', 'd') -> 'abcd'
   * buildString(null, undefined) -> ''
   * </pre>
   * @param var_args A list of strings to concatenate. If not a string, it will be casted to one.
   */
  function buildString ( ...var_args : any [] ) : string ;
  /**
   * Replaces Windows and Mac new lines with unix style: \r or \r\n with \n.
   * @param str The string to in which to canonicalize newlines.
   */
  function canonicalizeNewlines (str : string ) : string ;
  /**
   * Capitalizes a string, i.e. converts the first letter to uppercase
   * and all other letters to lowercase, e.g.:
   *
   * goog.string.capitalize('one')     => 'One'
   * goog.string.capitalize('ONE')     => 'One'
   * goog.string.capitalize('one two') => 'One two'
   *
   * Note that this function does not trim initial whitespace.
   * @param str String value to capitalize.
   */
  function capitalize (str : string ) : string ;
  /**
   * A string comparator that ignores case.
   * -1 = str1 less than str2
   * 0 = str1 equals str2
   * 1 = str1 greater than str2
   * @param str1 The string to compare.
   * @param str2 The string to compare {@code str1} to.
   */
  function caseInsensitiveCompare (str1 : string , str2 : string ) : number ;
  /**
   * Determines whether a string contains a substring, ignoring case.
   * @param str The string to search.
   * @param subString The substring to search for.
   */
  function caseInsensitiveContains (str : string , subString : string ) : boolean ;
  /**
   * Case-insensitive suffix-checker.
   * @param str The string to check.
   * @param suffix A string to look for at the end of {@code str}.
   */
  function caseInsensitiveEndsWith (str : string , suffix : string ) : boolean ;
  /**
   * Case-insensitive equality checker.
   * @param str1 First string to check.
   * @param str2 Second string to check.
   */
  function caseInsensitiveEquals (str1 : string , str2 : string ) : boolean ;
  /**
   * Case-insensitive prefix-checker.
   * @param str The string to check.
   * @param prefix A string to look for at the end of {@code str}.
   */
  function caseInsensitiveStartsWith (str : string , prefix : string ) : boolean ;
  /**
   * Removes the breaking spaces from the left and right of the string and
   * collapses the sequences of breaking spaces in the middle into single spaces.
   * The original and the result strings render the same way in HTML.
   * @param str A string in which to collapse spaces.
   */
  function collapseBreakingSpaces (str : string ) : string ;
  /**
   * Converts multiple whitespace chars (spaces, non-breaking-spaces, new lines
   * and tabs) to a single space, and strips leading and trailing whitespace.
   * @param str Input string.
   */
  function collapseWhitespace (str : string ) : string ;
  /**
   * Compares two version numbers.
   * @param version1 Version of first item.
   * @param version2 Version of second item.
   */
  function compareVersions (version1 : string | number , version2 : string | number ) : number ;
  /**
   * Determines whether a string contains a substring.
   * @param str The string to search.
   * @param subString The substring to search for.
   */
  function contains (str : string , subString : string ) : boolean ;
  /**
   * Returns the non-overlapping occurrences of ss in s.
   * If either s or ss evalutes to false, then returns zero.
   * @param s The string to look in.
   * @param ss The string to look for.
   */
  function countOf (s : string , ss : string ) : number ;
  /**
   * Generates and returns a string which is unique in the current document.
   * This is useful, for example, to create unique IDs for DOM elements.
   */
  function createUniqueString ( ) : string ;
  /**
   * Computes the Levenshtein edit distance between two strings.
   */
  function editDistance (a : string , b : string ) : number ;
  /**
   * Fast suffix-checker.
   * @param str The string to check.
   * @param suffix A string to look for at the end of {@code str}.
   */
  function endsWith (str : string , suffix : string ) : boolean ;
  /**
   * Takes a character and returns the escaped string for that character. For
   * example escapeChar(String.fromCharCode(15)) -> "\\x0E".
   * @param c The character to escape.
   */
  function escapeChar (c : string ) : string ;
  /**
   * Takes a string and returns the escaped string for that character.
   * @param str The string to escape.
   */
  function escapeString (str : string ) : string ;
  /**
   * String comparison function that handles non-negative integer and fractional
   * numbers in a way humans might expect. Using this function, the string
   * 'File 2.jpg' sorts before 'File 10.jpg', and '3.14' before '3.2'. Equivalent
   * to {@link goog.string.intAwareCompare} apart from the way how it interprets
   * dots.
   * @param str1 The string to compare in a numerically sensitive way.
   * @param str2 The string to compare {@code str1} to.
   */
  function floatAwareCompare (str1 : string , str2 : string ) : number ;
  /**
   * Returns a string with at least 64-bits of randomness.
   *
   * Doesn't trust Javascript's random function entirely. Uses a combination of
   * random and current timestamp, and then encodes the string in base-36 to
   * make it shorter.
   */
  function getRandomString ( ) : string ;
  /**
   * String hash function similar to java.lang.String.hashCode().
   * The hash code for a string is computed as
   * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
   * where s[i] is the ith character of the string and n is the length of
   * the string. We mod the result to make it between 0 (inclusive) and 2^32
   * (exclusive).
   * @param str A string.
   */
  function hashCode (str : string ) : number ;
  /**
   * Escapes double quote '"' and single quote '\'' characters in addition to
   * '&', '<', and '>' so that a string can be included in an HTML tag attribute
   * value within double or single quotes.
   *
   * It should be noted that > doesn't need to be escaped for the HTML or XML to
   * be valid, but it has been decided to escape it for consistency with other
   * implementations.
   *
   * With goog.string.DETECT_DOUBLE_ESCAPING, this function escapes also the
   * lowercase letter "e".
   *
   * NOTE(user):
   * HtmlEscape is often called during the generation of large blocks of HTML.
   * Using statics for the regular expressions and strings is an optimization
   * that can more than half the amount of time IE spends in this function for
   * large apps, since strings and regexes both contribute to GC allocations.
   *
   * Testing for the presence of a character before escaping increases the number
   * of function calls, but actually provides a speed increase for the average
   * case -- since the average case often doesn't require the escaping of all 4
   * characters and indexOf() is much cheaper than replace().
   * The worst case does suffer slightly from the additional calls, therefore the
   * opt_isLikelyToContainHtmlChars option has been included for situations
   * where all 4 HTML entities are very likely to be present and need escaping.
   *
   * Some benchmarks (times tended to fluctuate +-0.05ms):
   * FireFox                     IE6
   * (no chars / average (mix of cases) / all 4 chars)
   * no checks                     0.13 / 0.22 / 0.22         0.23 / 0.53 / 0.80
   * indexOf                       0.08 / 0.17 / 0.26         0.22 / 0.54 / 0.84
   * indexOf + re test             0.07 / 0.17 / 0.28         0.19 / 0.50 / 0.85
   *
   * An additional advantage of checking if replace actually needs to be called
   * is a reduction in the number of object allocations, so as the size of the
   * application grows the difference between the various methods would increase.
   * @param str string to be escaped.
   * @param opt_isLikelyToContainHtmlChars Don't perform a check to see if the character needs replacing - use this option if you expect each of the characters to appear often. Leave false if you expect few html characters to occur in your strings, such as if you are escaping HTML.
   */
  function htmlEscape (str : string , opt_isLikelyToContainHtmlChars ? : boolean ) : string ;
  /**
   * String comparison function that handles non-negative integer numbers in a
   * way humans might expect. Using this function, the string 'File 2.jpg' sorts
   * before 'File 10.jpg', and 'Version 1.9' before 'Version 1.10'. The comparison
   * is mostly case-insensitive, though strings that are identical except for case
   * are sorted with the upper-case strings before lower-case.
   *
   * This comparison function is up to 50x slower than either the default or the
   * case-insensitive compare. It should not be used in time-critical code, but
   * should be fast enough to sort several hundred short strings (like filenames)
   * with a reasonable delay.
   * @param str1 The string to compare in a numerically sensitive way.
   * @param str2 The string to compare {@code str1} to.
   */
  function intAwareCompare (str1 : string , str2 : string ) : number ;
  /**
   * Checks if a string contains all letters.
   * @param str string to check.
   */
  function isAlpha (str : string ) : boolean ;
  /**
   * Checks if a string contains only numbers or letters.
   * @param str string to check.
   */
  function isAlphaNumeric (str : string ) : boolean ;
  /**
   * Checks if a string is all breaking whitespace.
   * @param str The string to check.
   */
  function isBreakingWhitespace (str : string ) : boolean ;
  /**
   * Checks if a string is empty or contains only whitespaces.
   *
   * TODO(user): Deprecate this when clients have been switched over to
   * goog.string.isEmptyOrWhitespace.
   * @param str The string to check.
   */
  function isEmpty (a : string ) : boolean ;
  /**
   * Checks if a string is empty or contains only whitespaces.
   * @param str The string to check.
   */
  function isEmptyOrWhitespace (str : string ) : boolean ;
  /**
   * Checks if a string is null, undefined, empty or contains only whitespaces.
   * @param str The string to check.
   */
  function isEmptyOrWhitespaceSafe (str : any ) : boolean ;
  /**
   * Checks if a string is null, undefined, empty or contains only whitespaces.
   *
   * TODO(user): Deprecate this when clients have been switched over to
   * goog.string.isEmptyOrWhitespaceSafe.
   * @param str The string to check.
   */
  function isEmptySafe (a : any ) : boolean ;
  /**
   * Checks if a string is empty.
   * @param str The string to check.
   */
  function isEmptyString (str : string ) : boolean ;
  /**
   * Returns whether the given string is lower camel case (e.g. "isFooBar").
   *
   * Note that this assumes the string is entirely letters.
   * @param str String to test.
   */
  function isLowerCamelCase (str : string ) : boolean ;
  /**
   * Checks if a string contains only numbers.
   * @param str string to check. If not a string, it will be casted to one.
   */
  function isNumeric (str : any ) : boolean ;
  /**
   * Checks if a character is a space character.
   * @param ch Character to check.
   */
  function isSpace (ch : string ) : boolean ;
  /**
   * Checks if a character is a valid unicode character.
   * @param ch Character to check.
   */
  function isUnicodeChar (ch : string ) : boolean ;
  /**
   * Returns whether the given string is upper camel case (e.g. "FooBarBaz").
   *
   * Note that this assumes the string is entirely letters.
   * @param str String to test.
   */
  function isUpperCamelCase (str : string ) : boolean ;
  /**
   * Finds the characters to the right of the last instance of any separator
   *
   * This function is similar to goog.string.path.baseName, except it can take a
   * list of characters to split the string on. It will return the rightmost
   * grouping of characters to the right of any separator as a left-to-right
   * oriented string.
   * @param str The string
   * @param separators A list of separator characters
   */
  function lastComponent (str : string , separators : string | string [] ) : string ;
  /**
   * Returns a string representation of the given object, with
   * null and undefined being returned as the empty string.
   * @param obj The object to convert.
   */
  function makeSafe (obj : any ) : string ;
  /**
   * Converts \n to <br>s or <br />s.
   * @param str The string in which to convert newlines.
   * @param opt_xml Whether to use XML compatible tags.
   */
  function newLineToBr (str : string , opt_xml ? : boolean ) : string ;
  /**
   * Normalizes spaces in a string, replacing all consecutive spaces and tabs
   * with a single space. Replaces non-breaking space with a space.
   * @param str The string in which to normalize spaces.
   */
  function normalizeSpaces (str : string ) : string ;
  /**
   * Normalizes whitespace in a string, replacing all whitespace chars with
   * a space.
   * @param str The string in which to normalize whitespace.
   */
  function normalizeWhitespace (str : string ) : string ;
  /**
   * Alias for {@link goog.string.floatAwareCompare}.
   */
  function numerateCompare (a : string , b : string ) : number ;
  /**
   * Pads number to given length and optionally rounds it to a given precision.
   * For example:
   * <pre>padNumber(1.25, 2, 3) -> '01.250'
   * padNumber(1.25, 2) -> '01.25'
   * padNumber(1.25, 2, 1) -> '01.3'
   * padNumber(1.25, 0) -> '1.25'</pre>
   * @param num The number to pad.
   * @param length The desired length.
   * @param opt_precision The desired precision.
   */
  function padNumber (num : number , length : number , opt_precision ? : number ) : string ;
  /**
   * Parse a string in decimal or hexidecimal ('0xFFFF') form.
   *
   * To parse a particular radix, please use parseInt(string, radix) directly. See
   * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt
   *
   * This is a wrapper for the built-in parseInt function that will only parse
   * numbers as base 10 or base 16.  Some JS implementations assume strings
   * starting with "0" are intended to be octal. ES3 allowed but discouraged
   * this behavior. ES5 forbids it.  This function emulates the ES5 behavior.
   *
   * For more information, see Mozilla JS Reference: http://goo.gl/8RiFj
   * @param value The value to be parsed.
   */
  function parseInt (value : string | number | null | undefined ) : number ;
  /**
   * Preserve spaces that would be otherwise collapsed in HTML by replacing them
   * with non-breaking space Unicode characters.
   * @param str The string in which to preserve whitespace.
   */
  function preserveSpaces (str : string ) : string ;
  /**
   * Encloses a string in double quotes and escapes characters so that the
   * string is a valid JS string. The resulting string is safe to embed in
   * `<script>` tags as "<" is escaped.
   * @param s The string to quote.
   */
  function quote (s : string ) : string ;
  /**
   * Escapes characters in the string that are not safe to use in a RegExp.
   * @param s The string to escape. If not a string, it will be casted to one.
   */
  function regExpEscape (s : any ) : string ;
  /**
   * Removes the first occurrence of a substring from a string.
   * @param s The base string from which to remove.
   * @param ss The string to remove.
   */
  function remove (s : string , ss : string ) : string ;
  /**
   * Removes all occurrences of a substring from a string.
   * @param s The base string from which to remove.
   * @param ss The string to remove.
   */
  function removeAll (s : string , ss : string ) : string ;
  /**
   * Removes a substring of a specified length at a specific
   * index in a string.
   * @param s The base string from which to remove.
   * @param index The index at which to remove the substring.
   * @param stringLength The length of the substring to remove.
   */
  function removeAt (s : string , index : number , stringLength : number ) : string ;
  /**
   * Repeats a string n times.
   * @param string The string to repeat.
   * @param length The number of times to repeat.
   */
  function repeat (a : string , b : number ) : string ;
  /**
   * Splits a string on a separator a limited number of times.
   *
   * This implementation is more similar to Python or Java, where the limit
   * parameter specifies the maximum number of splits rather than truncating
   * the number of results.
   *
   * See http://docs.python.org/2/library/stdtypes.html#str.split
   * See JavaDoc: http://goo.gl/F2AsY
   * See Mozilla reference: http://goo.gl/dZdZs
   * @param str String to split.
   * @param separator The separator.
   * @param limit The limit to the number of splits. The resulting array will have a maximum length of limit+1.  Negative numbers are the same as zero.
   */
  function splitLimit (str : string , separator : string , limit : number ) : string [] ;
  /**
   * Fast prefix-checker.
   * @param str The string to check.
   * @param prefix A string to look for at the start of {@code str}.
   */
  function startsWith (str : string , prefix : string ) : boolean ;
  /**
   * Takes a string and replaces newlines with a space. Multiple lines are
   * replaced with a single space.
   * @param str The string from which to strip newlines.
   */
  function stripNewlines (str : string ) : string ;
  /**
   * Strip quote characters around a string.  The second argument is a string of
   * characters to treat as quotes.  This can be a single character or a string of
   * multiple character and in that case each of those are treated as possible
   * quote characters. For example:
   *
   * <pre>
   * goog.string.stripQuotes('"abc"', '"`') --> 'abc'
   * goog.string.stripQuotes('`abc`', '"`') --> 'abc'
   * </pre>
   * @param str The string to strip.
   * @param quoteChars The quote characters to strip.
   */
  function stripQuotes (str : string , quoteChars : string ) : string ;
  /**
   * Does simple python-style string substitution.
   * subs("foo%s hot%s", "bar", "dog") becomes "foobar hotdog".
   * @param str The string containing the pattern.
   * @param var_args The items to substitute into the pattern.
   */
  function subs (str : string ,  ...var_args : any [] ) : string ;
  /**
   * Converts a string from selector-case to camelCase (e.g. from
   * "multi-part-string" to "multiPartString"), useful for converting
   * CSS selectors and HTML dataset keys to their equivalent JS properties.
   * @param str The string in selector-case form.
   */
  function toCamelCase (str : string ) : string ;
  /**
   * Converts the supplied string to a number, which may be Infinity or NaN.
   * This function strips whitespace: (toNumber(' 123') === 123)
   * This function accepts scientific notation: (toNumber('1e1') === 10)
   *
   * This is better than Javascript's built-in conversions because, sadly:
   * (Number(' ') === 0) and (parseFloat('123a') === 123)
   * @param str The string to convert.
   */
  function toNumber (str : string ) : number ;
  /**
   * Converts a string from camelCase to selector-case (e.g. from
   * "multiPartString" to "multi-part-string"), useful for converting JS
   * style and dataset properties to equivalent CSS selectors and HTML keys.
   * @param str The string in camelCase form.
   */
  function toSelectorCase (str : string ) : string ;
  /**
   * Converts a string into TitleCase. First character of the string is always
   * capitalized in addition to the first letter of every subsequent word.
   * Words are delimited by one or more whitespaces by default. Custom delimiters
   * can optionally be specified to replace the default, which doesn't preserve
   * whitespace delimiters and instead must be explicitly included if needed.
   *
   * Default delimiter => " ":
   * goog.string.toTitleCase('oneTwoThree')    => 'OneTwoThree'
   * goog.string.toTitleCase('one two three')  => 'One Two Three'
   * goog.string.toTitleCase('  one   two   ') => '  One   Two   '
   * goog.string.toTitleCase('one_two_three')  => 'One_two_three'
   * goog.string.toTitleCase('one-two-three')  => 'One-two-three'
   *
   * Custom delimiter => "_-.":
   * goog.string.toTitleCase('oneTwoThree', '_-.')       => 'OneTwoThree'
   * goog.string.toTitleCase('one two three', '_-.')     => 'One two three'
   * goog.string.toTitleCase('  one   two   ', '_-.')    => '  one   two   '
   * goog.string.toTitleCase('one_two_three', '_-.')     => 'One_Two_Three'
   * goog.string.toTitleCase('one-two-three', '_-.')     => 'One-Two-Three'
   * goog.string.toTitleCase('one...two...three', '_-.') => 'One...Two...Three'
   * goog.string.toTitleCase('one. two. three', '_-.')   => 'One. two. three'
   * goog.string.toTitleCase('one-two.three', '_-.')     => 'One-Two.Three'
   * @param str String value in camelCase form.
   * @param opt_delimiters Custom delimiter character set used to distinguish words in the string value. Each character represents a single delimiter. When provided, default whitespace delimiter is overridden and must be explicitly included if needed.
   */
  function toTitleCase (str : string , opt_delimiters ? : string ) : string ;
  /**
   * Trims white spaces to the left and right of a string.
   * @param str The string to trim.
   */
  function trim (a : string ) : string ;
  /**
   * Trims whitespaces at the left end of a string.
   * @param str The string to left trim.
   */
  function trimLeft (str : string ) : string ;
  /**
   * Trims whitespaces at the right end of a string.
   * @param str The string to right trim.
   */
  function trimRight (str : string ) : string ;
  /**
   * Truncates a string to a certain length and adds '...' if necessary.  The
   * length also accounts for the ellipsis, so a maximum length of 10 and a string
   * 'Hello World!' produces 'Hello W...'.
   * @param str The string to truncate.
   * @param chars Max number of characters.
   * @param opt_protectEscapedCharacters Whether to protect escaped characters from being cut off in the middle.
   */
  function truncate (str : string , chars : number , opt_protectEscapedCharacters ? : boolean ) : string ;
  /**
   * Truncate a string in the middle, adding "..." if necessary,
   * and favoring the beginning of the string.
   * @param str The string to truncate the middle of.
   * @param chars Max number of characters.
   * @param opt_protectEscapedCharacters Whether to protect escaped characters from being cutoff in the middle.
   * @param opt_trailingChars Optional number of trailing characters to leave at the end of the string, instead of truncating as close to the middle as possible.
   */
  function truncateMiddle (str : string , chars : number , opt_protectEscapedCharacters ? : boolean , opt_trailingChars ? : number ) : string ;
  /**
   * Unescapes an HTML string.
   * @param str The string to unescape.
   */
  function unescapeEntities (str : string ) : string ;
  /**
   * Unescapes a HTML string using the provided document.
   * @param str The string to unescape.
   * @param document A document to use in escaping the string.
   */
  function unescapeEntitiesWithDocument (str : string , document : Document ) : string ;
  /**
   * URL-decodes the string. We need to specially handle '+'s because
   * the javascript library doesn't convert them to spaces.
   * @param str The string to url decode.
   */
  function urlDecode (str : string ) : string ;
  /**
   * URL-encodes a string
   * @param str The string to url-encode.
   */
  function urlEncode (str : any ) : string ;
  /**
   * Do escaping of whitespace to preserve spatial formatting. We use character
   * entity #160 to make it safer for xml.
   * @param str The string in which to escape whitespace.
   * @param opt_xml Whether to use XML compatible tags.
   */
  function whitespaceEscape (str : string , opt_xml ? : boolean ) : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.string'): typeof ಠ_ಠ.clutz.goog.string;
}
declare module 'goog:goog.string' {
  import alias = ಠ_ಠ.clutz.goog.string;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
  /**
   * Wrapper for compile-time-constant strings.
   *
   * Const is a wrapper for strings that can only be created from program
   * constants (i.e., string literals).  This property relies on a custom Closure
   * compiler check that {@code goog.string.Const.from} is only invoked on
   * compile-time-constant expressions.
   *
   * Const is useful in APIs whose correct and secure use requires that certain
   * arguments are not attacker controlled: Compile-time constants are inherently
   * under the control of the application and not under control of external
   * attackers, and hence are safe to use in such contexts.
   *
   * Instances of this type must be created via its factory method
   * {@code goog.string.Const.from} and not by invoking its constructor.  The
   * constructor intentionally takes no parameters and the type is immutable;
   * hence only a default instance corresponding to the empty string can be
   * obtained via constructor invocation.
   */
  class Const extends Const_Instance {
    /**
     * Creates a Const object from a compile-time constant string.
     *
     * It is illegal to invoke this function on an expression whose
     * compile-time-contant value cannot be determined by the Closure compiler.
     *
     * Correct invocations include,
     * <pre>
     * var s = goog.string.Const.from('hello');
     * var t = goog.string.Const.from('hello' + 'world');
     * </pre>
     *
     * In contrast, the following are illegal:
     * <pre>
     * var s = goog.string.Const.from(getHello());
     * var t = goog.string.Const.from('hello' + world);
     * </pre>
     *
     * TODO(xtof): Compile-time checks that this function is only called
     * with compile-time constant expressions.
     * @param s A constant string from which to create a Const.
     */
    static from (s : string ) : ಠ_ಠ.clutz.goog.string.Const ;
    /**
     * Performs a runtime check that the provided object is indeed an instance
     * of {@code goog.string.Const}, and returns its value.
     * @param stringConst The object to extract from.
     */
    static unwrap (stringConst : ಠ_ಠ.clutz.goog.string.Const ) : string ;
  }
  class Const_Instance implements ಠ_ಠ.clutz.goog.string.TypedString {
    private noStructuralTyping_: any;
    /**
     * Returns this Const's value a string.
     *
     * IMPORTANT: In code where it is security-relevant that an object's type is
     * indeed {@code goog.string.Const}, use {@code goog.string.Const.unwrap}
     * instead of this method.
     */
    getTypedStringValue ( ) : string ;
    implementsGoogStringTypedString : boolean ;
    /**
     * Returns a debug-string representation of this value.
     *
     * To obtain the actual string value wrapped inside an object of this type,
     * use {@code goog.string.Const.unwrap}.
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.string.Const'): typeof ಠ_ಠ.clutz.goog.string.Const;
}
declare module 'goog:goog.string.Const' {
  import alias = ಠ_ಠ.clutz.goog.string.Const;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
  /**
   * An interface for parsing strings into objects.
   */
  interface Parser {
    /**
     * Parses a string into an object and returns the result.
     * Agnostic to the format of string and object.
     * @param s The string to parse.
     */
    parse (a : string ) : any ;
  }
}
declare module 'goog:goog.string.Parser' {
  import alias = ಠ_ಠ.clutz.goog.string.Parser;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
  /**
   * Utility class to facilitate string concatenation.
   */
  class StringBuffer extends StringBuffer_Instance {
  }
  class StringBuffer_Instance {
    private noStructuralTyping_: any;
    /**
     * Utility class to facilitate string concatenation.
     * @param opt_a1 Optional first initial item to append.
     * @param var_args Other initial items to append, e.g., new goog.string.StringBuffer('foo', 'bar').
     */
    constructor (opt_a1 ? : any ,  ...var_args : any [] ) ;
    /**
     * Appends one or more items to the buffer.
     *
     * Calling this with null, undefined, or empty arguments is an error.
     * @param a1 Required first string.
     * @param opt_a2 Optional second string.
     * @param var_args Other items to append, e.g., sb.append('foo', 'bar', 'baz').
     */
    append (a1 : any , opt_a2 ? : any ,  ...var_args : any [] ) : ಠ_ಠ.clutz.goog.string.StringBuffer ;
    /**
     * Clears the internal buffer.
     */
    clear ( ) : void ;
    getLength ( ) : number ;
    /**
     * Sets the contents of the string buffer object, replacing what's currently
     * there.
     * @param s String to set.
     */
    set (s : any ) : void ;
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.string.StringBuffer'): typeof ಠ_ಠ.clutz.goog.string.StringBuffer;
}
declare module 'goog:goog.string.StringBuffer' {
  import alias = ಠ_ಠ.clutz.goog.string.StringBuffer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
  /**
   * An interface for serializing objects into strings.
   */
  interface Stringifier {
    /**
     * Serializes an object or a value to a string.
     * Agnostic to the particular format of object and string.
     * @param object The object to stringify.
     */
    stringify (a : any ) : string ;
  }
}
declare module 'goog:goog.string.Stringifier' {
  import alias = ಠ_ಠ.clutz.goog.string.Stringifier;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
  /**
   * Wrapper for strings that conform to a data type or language.
   *
   * Implementations of this interface are wrappers for strings, and typically
   * associate a type contract with the wrapped string.  Concrete implementations
   * of this interface may choose to implement additional run-time type checking,
   * see for example {@code goog.html.SafeHtml}. If available, client code that
   * needs to ensure type membership of an object should use the type's function
   * to assert type membership, such as {@code goog.html.SafeHtml.unwrap}.
   */
  interface TypedString {
    /**
     * Retrieves this wrapped string's value.
     */
    getTypedStringValue ( ) : string ;
    /**
     * Interface marker of the TypedString interface.
     *
     * This property can be used to determine at runtime whether or not an object
     * implements this interface.  All implementations of this interface set this
     * property to {@code true}.
     */
    implementsGoogStringTypedString : boolean ;
  }
}
declare module 'goog:goog.string.TypedString' {
  import alias = ಠ_ಠ.clutz.goog.string.TypedString;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
  /**
   * Common Unicode string characters.
   */
  type Unicode = string ;
  var Unicode : {
    NBSP : Unicode ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.string.Unicode'): typeof ಠ_ಠ.clutz.goog.string.Unicode;
}
declare module 'goog:goog.string.Unicode' {
  import alias = ಠ_ಠ.clutz.goog.string.Unicode;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
  /**
   * Performs sprintf-like conversion, i.e. puts the values in a template.
   * DO NOT use it instead of built-in conversions in simple cases such as
   * 'Cost: %.2f' as it would introduce unnecessary latency opposed to
   * 'Cost: ' + cost.toFixed(2).
   * @param formatString Template string containing % specifiers.
   * @param var_args Values formatString is to be filled with.
   */
  function format (formatString : string ,  ...var_args : ( string | number | undefined ) [] ) : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.string.format'): typeof ಠ_ಠ.clutz.goog.string.format;
}
declare module 'goog:goog.string.format' {
  import alias = ಠ_ಠ.clutz.goog.string.format;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string.newlines {
  /**
   * Splits a string into an array of line metadata.
   * @param str String to split.
   */
  function getLines (str : string ) : ಠ_ಠ.clutz.goog.string.newlines.Line [] ;
  /**
   * Splits a string into lines, properly handling universal newlines.
   * @param str String to split.
   * @param opt_keepNewlines Whether to keep the newlines in the resulting strings. Defaults to false.
   */
  function splitLines (str : string , opt_keepNewlines ? : boolean ) : string [] ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.string.newlines'): typeof ಠ_ಠ.clutz.goog.string.newlines;
}
declare module 'goog:goog.string.newlines' {
  import alias = ಠ_ಠ.clutz.goog.string.newlines;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.string.newlines {
  /**
   * Line metadata class that records the start/end indicies of lines
   * in a string.  Can be used to implement common newline use cases such as
   * splitLines() or determining line/column of an index in a string.
   * Also implements methods to get line contents.
   *
   * Indexes are expressed as string indicies into string.substring(), inclusive
   * at the start, exclusive at the end.
   *
   * Create an array of these with goog.string.newlines.getLines().
   */
  class Line extends Line_Instance {
  }
  class Line_Instance {
    private noStructuralTyping_: any;
    /**
     * Line metadata class that records the start/end indicies of lines
     * in a string.  Can be used to implement common newline use cases such as
     * splitLines() or determining line/column of an index in a string.
     * Also implements methods to get line contents.
     *
     * Indexes are expressed as string indicies into string.substring(), inclusive
     * at the start, exclusive at the end.
     *
     * Create an array of these with goog.string.newlines.getLines().
     * @param string The original string.
     * @param startLineIndex The index of the start of the line.
     * @param endContentIndex The index of the end of the line, excluding newlines.
     * @param endLineIndex The index of the end of the line, index newlines.
     */
    constructor (string : string , startLineIndex : number , endContentIndex : number , endLineIndex : number ) ;
    /**
     * Index of the end of the line, excluding any newline characters.
     * Index is the first character after the line, suitable for
     * String.substring().
     */
    endContentIndex : number ;
    /**
     * Index of the end of the line, excluding any newline characters.
     * Index is the first character after the line, suitable for
     * String.substring().
     */
    endLineIndex : number ;
    /**
     * Index of the start of the line.
     */
    startLineIndex : number ;
    /**
     * The original string.
     */
    string : string ;
    getContent ( ) : string ;
    getFullLine ( ) : string ;
    getNewline ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.string.newlines.Line'): typeof ಠ_ಠ.clutz.goog.string.newlines.Line;
}
declare module 'goog:goog.string.newlines.Line' {
  import alias = ಠ_ಠ.clutz.goog.string.newlines.Line;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string.path {
  /**
   * Returns the final component of a pathname.
   * See http://docs.python.org/library/os.path.html#os.path.basename
   * @param path A pathname.
   */
  function baseName (path : string ) : string ;
  /**
   * Alias to goog.string.path.baseName.
   * @param path A pathname.
   */
  function basename (a : string ) : string ;
  /**
   * Returns the directory component of a pathname.
   * See http://docs.python.org/library/os.path.html#os.path.dirname
   * @param path A pathname.
   */
  function dirname (path : string ) : string ;
  /**
   * Extracts the extension part of a pathname.
   * @param path The path name to process.
   */
  function extension (path : string ) : string ;
  /**
   * Joins one or more path components (e.g. 'foo/' and 'bar' make 'foo/bar').
   * An absolute component will discard all previous component.
   * See http://docs.python.org/library/os.path.html#os.path.join
   * @param var_args One of more path components.
   */
  function join ( ...var_args : ( string | undefined ) [] ) : string ;
  /**
   * Normalizes a pathname by collapsing duplicate separators, parent directory
   * references ('..'), and current directory references ('.').
   * See http://docs.python.org/library/os.path.html#os.path.normpath
   * @param path One or more path components.
   */
  function normalizePath (path : string ) : string ;
  /**
   * Splits a pathname into "dirname" and "baseName" components, where "baseName"
   * is everything after the final slash. Either part may return an empty string.
   * See http://docs.python.org/library/os.path.html#os.path.split
   * @param path A pathname.
   */
  function split (path : string ) : string [] ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.string.path'): typeof ಠ_ಠ.clutz.goog.string.path;
}
declare module 'goog:goog.string.path' {
  import alias = ಠ_ಠ.clutz.goog.string.path;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * Removes all the elements from the collection.
   * @param col The collection-like object.
   */
  function clear (col : Object | null ) : void ;
  /**
   * Whether the collection contains the given value. This is O(n) and uses
   * equals (==) to test the existence.
   * @param col The collection-like object.
   * @param val The value to check for.
   */
  function contains (col : Object | null , val : any ) : boolean ;
  /**
   * Calls f for each value in a collection. If all calls return true this return
   * true this returns true. If any returns false this returns false at this point
   * and does not continue to check the remaining values.
   * @param col The collection-like object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, the key or undefined if the collection has no notion of keys, and the collection) and should return a boolean.
   * @param opt_obj The object to be used as the value of 'this' within {@code f}.
   */
  function every < T , S > (col : S , f : (a : any , b : any , c : S ) => boolean , opt_obj ? : T ) : boolean ;
  /**
   * Calls a function for every value in the collection. When a call returns true,
   * adds the value to a new collection (Array is returned by default).
   * @param col The collection-like object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, the key or undefined if the collection has no notion of keys, and the collection) and should return a Boolean. If the return value is true the value is added to the result collection. If it is false the value is not included.
   * @param opt_obj The object to be used as the value of 'this' within {@code f}.
   */
  function filter < T , S > (col : S , f : (a : any , b : any , c : S ) => boolean , opt_obj ? : T ) : Object ;
  /**
   * Calls a function for each value in a collection. The function takes
   * three arguments; the value, the key and the collection.
   *
   * NOTE: This will be deprecated soon! Please use a more specific method if
   * possible, e.g. goog.array.forEach, goog.object.forEach, etc.
   * @param col The collection-like object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, the key or undefined if the collection has no notion of keys, and the collection) and the return value is irrelevant.
   * @param opt_obj The object to be used as the value of 'this' within {@code f}.
   */
  function forEach < T , S > (col : S , f : (a : any , b : any , c : S ) => any , opt_obj ? : T ) : void ;
  /**
   * Returns the number of values in the collection-like object.
   * @param col The collection-like object.
   */
  function getCount (col : Object | null ) : number ;
  /**
   * Returns the keys of the collection. Some collections have no notion of
   * keys/indexes and this function will return undefined in those cases.
   * @param col The collection-like object.
   */
  function getKeys (col : Object | null ) : any [] | undefined ;
  /**
   * Returns the values of the collection-like object.
   * @param col The collection-like object.
   */
  function getValues (col : Object | null ) : any [] ;
  /**
   * Whether the collection is empty.
   * @param col The collection-like object.
   */
  function isEmpty (col : Object | null ) : boolean ;
  /**
   * Calls a function for every value in the collection and adds the result into a
   * new collection (defaults to creating a new Array).
   * @param col The collection-like object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, the key or undefined if the collection has no notion of keys, and the collection) and should return something. The result will be used as the value in the new collection.
   * @param opt_obj The object to be used as the value of 'this' within {@code f}.
   */
  function map < T , S , V > (col : S , f : (a : any , b : any , c : S ) => V , opt_obj ? : T ) : { [ /* warning: coerced from ? */ key: string ]: V } | V [] ;
  /**
   * Calls f for each value in a collection. If any call returns true this returns
   * true (without checking the rest). If all returns false this returns false.
   * @param col The collection-like object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, the key or undefined if the collection has no notion of keys, and the collection) and should return a boolean.
   * @param opt_obj The object to be used as the value of 'this' within {@code f}.
   */
  function some < T , S > (col : S , f : (a : any , b : any , c : S ) => boolean , opt_obj ? : T ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.structs'): typeof ಠ_ಠ.clutz.goog.structs;
}
declare module 'goog:goog.structs' {
  import alias = ಠ_ಠ.clutz.goog.structs;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * Class for CircularBuffer.
   */
  class CircularBuffer < T > extends CircularBuffer_Instance < T > {
  }
  class CircularBuffer_Instance < T > {
    private noStructuralTyping_: any;
    /**
     * Class for CircularBuffer.
     * @param opt_maxSize The maximum size of the buffer.
     */
    constructor (opt_maxSize ? : number ) ;
    /**
     * Adds an item to the buffer. May remove the oldest item if the buffer is at
     * max size.
     * @param item The item to add.
     */
    add (item : T ) : T | undefined ;
    /**
     * Empties the current buffer.
     */
    clear ( ) : void ;
    /**
     * Whether the buffer contains the key/index.
     * @param key The key/index to check for.
     */
    containsKey (key : number ) : boolean ;
    /**
     * Whether the buffer contains the given value.
     * @param value The value to check for.
     */
    containsValue (value : T ) : boolean ;
    /**
     * Returns the item at the specified index.
     * @param index The index of the item. The index of an item can change after calls to {@code add()} if the buffer is at maximum size.
     */
    get (index : number ) : T ;
    /**
     * Returns the current number of items in the buffer.
     */
    getCount ( ) : number ;
    getKeys ( ) : number [] ;
    /**
     * Returns the last item inserted into the buffer.
     */
    getLast ( ) : T | null ;
    /**
     * Returns the newest values in the buffer up to {@code count}.
     * @param maxCount The maximum number of values to get. Should be a positive number.
     */
    getNewestValues (maxCount : number ) : T [] ;
    getValues ( ) : T [] ;
    isEmpty ( ) : boolean ;
    /**
     * Sets the item at the specified index.
     * @param index The index of the item. The index of an item can change after calls to {@code add()} if the buffer is at maximum size.
     * @param item The item to add.
     */
    set (index : number , item : T ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.structs.CircularBuffer'): typeof ಠ_ಠ.clutz.goog.structs.CircularBuffer;
}
declare module 'goog:goog.structs.CircularBuffer' {
  import alias = ಠ_ಠ.clutz.goog.structs.CircularBuffer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * An interface for a collection of values.
   */
  interface Collection < T > {
    add (a : T ) : any ;
    contains (a : T ) : boolean ;
    getCount ( ) : number ;
    remove (a : T ) : any ;
  }
}
declare module 'goog:goog.structs.Collection' {
  import alias = ಠ_ಠ.clutz.goog.structs.Collection;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * Maps ranges to values.
   */
  class InversionMap < T > extends InversionMap_Instance < T > {
  }
  class InversionMap_Instance < T > {
    private noStructuralTyping_: any;
    /**
     * Maps ranges to values.
     * @param rangeArray An array of monotonically increasing integer values, with at least one instance.
     * @param valueArray An array of corresponding values. Length must be the same as rangeArray.
     * @param opt_delta If true, saves only delta from previous value.
     */
    constructor (rangeArray : number [] | null , valueArray : T [] | null , opt_delta ? : boolean ) ;
    rangeArray : number [] | null ;
    values : T [] | null ;
    /**
     * Gets the value corresponding to a number from the inversion map.
     * @param intKey The number for which value needs to be retrieved from inversion map.
     */
    at (intKey : number ) : T | null ;
    /**
     * Gets the largest index such that rangeArray[index] <= intKey from the
     * inversion map.
     * @param intKey The probe for which rangeArray is searched.
     */
    getLeast (intKey : number ) : number ;
    /**
     * Splices a range -> value map into this inversion map.
     * @param rangeArray An array of monotonically increasing integer values, with at least one instance.
     * @param valueArray An array of corresponding values. Length must be the same as rangeArray.
     * @param opt_delta If true, saves only delta from previous value.
     */
    spliceInversion (rangeArray : number [] | null , valueArray : T [] | null , opt_delta ? : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.structs.InversionMap'): typeof ಠ_ಠ.clutz.goog.structs.InversionMap;
}
declare module 'goog:goog.structs.InversionMap' {
  import alias = ಠ_ಠ.clutz.goog.structs.InversionMap;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * Class for Hash Map datastructure.
   */
  class Map < K , V > extends Map_Instance < K , V > {
    /**
     * Default equality test for values.
     * @param a The first value.
     * @param b The second value.
     */
    static defaultEquals (a : any , b : any ) : boolean ;
  }
  class Map_Instance < K , V > {
    private noStructuralTyping_: any;
    /**
     * Class for Hash Map datastructure.
     * @param opt_map Map or Object to initialize the map with.
     * @param var_args If 2 or more arguments are present then they will be used as key-value pairs.
     */
    constructor (opt_map ? : any ,  ...var_args : any [] ) ;
    /**
     * Returns an iterator that iterates over the values or the keys in the map.
     * This throws an exception if the map was mutated since the iterator was
     * created.
     * @param opt_keys True to iterate over the keys. False to iterate over the values.  The default value is false.
     */
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.iter.Iterator < any > ;
    /**
     * Adds multiple key-value pairs from another goog.structs.Map or Object.
     * @param map Object containing the data to add.
     */
    addAll (map : Object | null ) : void ;
    /**
     * Removes all key-value pairs from the map.
     */
    clear ( ) : void ;
    /**
     * Clones a map and returns a new map.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.structs.Map < any , any > ;
    /**
     * Whether the map contains the given key.
     * @param key The key to check for.
     */
    containsKey (key : any ) : boolean ;
    /**
     * Whether the map contains the given value. This is O(n).
     * @param val The value to check for.
     */
    containsValue (val : V ) : boolean ;
    /**
     * Whether this map is equal to the argument map.
     * @param otherMap The map against which to test equality.
     * @param opt_equalityFn Optional equality function to test equality of values. If not specified, this will test whether the values contained in each map are identical objects.
     */
    equals (otherMap : ಠ_ಠ.clutz.goog.structs.Map < any , any > | null , opt_equalityFn ? : (a : V , b : V ) => boolean ) : boolean ;
    /**
     * Calls the given function on each entry in the map.
     * @param opt_obj The value of "this" inside f.
     */
    forEach < T > (f : (a : V , b : K , c : ಠ_ಠ.clutz.goog.structs.Map < K , V > | null ) => any , opt_obj ? : T ) : void ;
    /**
     * Returns the value for the given key.  If the key is not found and the default
     * value is not given this will return {@code undefined}.
     * @param key The key to get the value for.
     * @param opt_val The value to return if no item is found for the given key, defaults to undefined.
     */
    get < DEFAULT > (key : any , opt_val ? : DEFAULT ) : V | DEFAULT ;
    getCount ( ) : number ;
    /**
     * Returns an iterator that iterates over the keys in the map.  Removal of keys
     * while iterating might have undesired side effects.
     */
    getKeyIterator ( ) : ಠ_ಠ.clutz.goog.iter.Iterator < any > ;
    /**
     * Returns the keys of the map.
     */
    getKeys ( ) : string [] ;
    /**
     * Returns an iterator that iterates over the values in the map.  Removal of
     * keys while iterating might have undesired side effects.
     */
    getValueIterator ( ) : ಠ_ಠ.clutz.goog.iter.Iterator < any > ;
    /**
     * Returns the values of the map.
     */
    getValues ( ) : V [] ;
    isEmpty ( ) : boolean ;
    /**
     * Removes a key-value pair based on the key. This is O(logN) amortized due to
     * updating the keys array whenever the count becomes half the size of the keys
     * in the keys array.
     * @param key The key to remove.
     */
    remove (key : any ) : boolean ;
    /**
     * Adds a key-value pair to the map.
     * @param key The key.
     * @param value The value to add.
     */
    set (key : any , value : V ) : any ;
    toObject ( ) : Object ;
    /**
     * Returns a new map in which all the keys and values are interchanged
     * (keys become values and values become keys). If multiple keys map to the
     * same value, the chosen transposed value is implementation-dependent.
     *
     * It acts very similarly to {goog.object.transpose(Object)}.
     */
    transpose ( ) : ಠ_ಠ.clutz.goog.structs.Map < any , any > ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.structs.Map'): typeof ಠ_ಠ.clutz.goog.structs.Map;
}
declare module 'goog:goog.structs.Map' {
  import alias = ಠ_ಠ.clutz.goog.structs.Map;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * A set that can contain both primitives and objects.  Adding and removing
   * elements is O(1).  Primitives are treated as identical if they have the same
   * type and convert to the same string.  Objects are treated as identical only
   * if they are references to the same object.  WARNING: A goog.structs.Set can
   * contain both 1 and (new Number(1)), because they are not the same.  WARNING:
   * Adding (new Number(1)) twice will yield two distinct elements, because they
   * are two different objects.  WARNING: Any object that is added to a
   * goog.structs.Set will be modified!  Because goog.getUid() is used to
   * identify objects, every object in the set will be mutated.
   */
  class Set < T > extends Set_Instance < T > {
  }
  class Set_Instance < T > implements ಠ_ಠ.clutz.goog.structs.Collection < T > {
    private noStructuralTyping_: any;
    /**
     * A set that can contain both primitives and objects.  Adding and removing
     * elements is O(1).  Primitives are treated as identical if they have the same
     * type and convert to the same string.  Objects are treated as identical only
     * if they are references to the same object.  WARNING: A goog.structs.Set can
     * contain both 1 and (new Number(1)), because they are not the same.  WARNING:
     * Adding (new Number(1)) twice will yield two distinct elements, because they
     * are two different objects.  WARNING: Any object that is added to a
     * goog.structs.Set will be modified!  Because goog.getUid() is used to
     * identify objects, every object in the set will be mutated.
     * @param opt_values Initial values to start with.
     */
    constructor (opt_values ? : T [] | null | { [ /* warning: coerced from ? */ key: string ]: T } ) ;
    map_ : ಠ_ಠ.clutz.goog.structs.Map < any , any > ;
    /**
     * Returns an iterator that iterates over the elements in this set.
     * @param opt_keys This argument is ignored.
     */
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.iter.Iterator < any > ;
    /**
     * Add a primitive or an object to the set.
     * @param element The primitive or object to add.
     */
    add (element : T ) : any ;
    /**
     * Adds all the values in the given collection to this set.
     * @param col A collection containing the elements to add.
     */
    addAll (col : T [] | null | ಠ_ಠ.clutz.goog.structs.Collection < T > | { [ /* warning: coerced from ? */ key: string ]: T } ) : void ;
    /**
     * Removes all elements from this set.
     */
    clear ( ) : void ;
    /**
     * Creates a shallow clone of this set.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.structs.Set < T > ;
    /**
     * Tests whether this set contains the given element.
     * @param element The primitive or object to test for.
     */
    contains (element : T ) : boolean ;
    /**
     * Tests whether this set contains all the values in a given collection.
     * Repeated elements in the collection are ignored, e.g.  (new
     * goog.structs.Set([1, 2])).containsAll([1, 1]) is True.
     * @param col A collection-like object.
     */
    containsAll (col : ಠ_ಠ.clutz.goog.structs.Collection < T > | null | Object ) : boolean ;
    /**
     * Finds all values that are present in this set and not in the given
     * collection.
     * @param col A collection.
     */
    difference (col : T [] | null | ಠ_ಠ.clutz.goog.structs.Collection < T > | { [ /* warning: coerced from ? */ key: string ]: T } ) : ಠ_ಠ.clutz.goog.structs.Set < any > ;
    /**
     * Tests whether the given collection consists of the same elements as this set,
     * regardless of order, without repetition.  Primitives are treated as equal if
     * they have the same type and convert to the same string; objects are treated
     * as equal if they are references to the same object.  This operation is O(n).
     * @param col A collection.
     */
    equals (col : ಠ_ಠ.clutz.goog.structs.Collection < T > | null | Object ) : boolean ;
    getCount ( ) : number ;
    /**
     * Returns an array containing all the elements in this set.
     */
    getValues ( ) : T [] ;
    /**
     * Finds all values that are present in both this set and the given collection.
     * @param col A collection.
     */
    intersection < S > (col : S [] | null | { [ /* warning: coerced from ? */ key: string ]: S } ) : ಠ_ಠ.clutz.goog.structs.Set < T | S > ;
    /**
     * Tests whether this set is empty.
     */
    isEmpty ( ) : boolean ;
    /**
     * Tests whether the given collection contains all the elements in this set.
     * Primitives are treated as equal if they have the same type and convert to the
     * same string; objects are treated as equal if they are references to the same
     * object.  This operation is O(n).
     * @param col A collection.
     */
    isSubsetOf (col : ಠ_ಠ.clutz.goog.structs.Collection < T > | null | Object ) : boolean ;
    /**
     * Removes the given element from this set.
     * @param element The primitive or object to remove.
     */
    remove (element : T ) : boolean ;
    /**
     * Removes all values in the given collection from this set.
     * @param col A collection containing the elements to remove.
     */
    removeAll (col : T [] | null | ಠ_ಠ.clutz.goog.structs.Collection < T > | { [ /* warning: coerced from ? */ key: string ]: T } ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.structs.Set'): typeof ಠ_ಠ.clutz.goog.structs.Set;
}
declare module 'goog:goog.structs.Set' {
  import alias = ಠ_ಠ.clutz.goog.structs.Set;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * A generic pool class. Simpler and more efficient than goog.structs.Pool
   * because it doesn't maintain a list of objects that are in use. This class
   * has constant overhead and doesn't create any additional objects as part of
   * the pool management after construction time.
   *
   * IMPORTANT: If the objects being pooled are arrays or maps that can have
   * unlimited number of properties, they need to be cleaned before being
   * returned to the pool.
   *
   * Also note that {@see goog.object.clean} actually allocates an array to clean
   * the object passed to it, so simply using this function would defy the
   * purpose of using the pool.
   */
  class SimplePool < T > extends SimplePool_Instance < T > {
  }
  class SimplePool_Instance < T > extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * A generic pool class. Simpler and more efficient than goog.structs.Pool
     * because it doesn't maintain a list of objects that are in use. This class
     * has constant overhead and doesn't create any additional objects as part of
     * the pool management after construction time.
     *
     * IMPORTANT: If the objects being pooled are arrays or maps that can have
     * unlimited number of properties, they need to be cleaned before being
     * returned to the pool.
     *
     * Also note that {@see goog.object.clean} actually allocates an array to clean
     * the object passed to it, so simply using this function would defy the
     * purpose of using the pool.
     * @param initialCount Initial number of objects to populate the free pool at construction time.
     * @param maxCount Maximum number of objects to keep in the free pool.
     */
    constructor (initialCount : number , maxCount : number ) ;
    /**
     * Should be overridden by sub-classes to return an instance of the object type
     * that is expected in the pool.
     */
    createObject ( ) : T ;
    /**
     * Disposes of the pool and all objects currently held in the pool.
     */
    disposeInternal ( ) : void ;
    /**
     * Should be overrideen to dispose of an object. Default implementation is to
     * remove all of the object's members, which should render it useless. Calls the
     * object's dispose method, if available.
     * @param obj The object to dispose.
     */
    disposeObject (obj : T ) : void ;
    /**
     * Gets an unused object from the the pool, if there is one available,
     * otherwise creates a new one.
     */
    getObject ( ) : T ;
    /**
     * Returns an object to the pool so that it can be reused. If the pool is
     * already full, the object is disposed instead.
     * @param obj The object to release.
     */
    releaseObject (obj : T ) : void ;
    /**
     * Sets the {@code createObject} function which is used for creating a new
     * object in the pool.
     * @param createObjectFn Create object function which returns the newly created object.
     */
    setCreateObjectFn (createObjectFn : ( ( ...a : any [] ) => any ) | null ) : void ;
    /**
     * Sets the {@code disposeObject} function which is used for disposing of an
     * object in the pool.
     * @param disposeObjectFn Dispose object function which takes the object to dispose as a parameter.
     */
    setDisposeObjectFn (disposeObjectFn : ( ( ...a : any [] ) => any ) | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.structs.SimplePool'): typeof ಠ_ಠ.clutz.goog.structs.SimplePool;
}
declare module 'goog:goog.structs.SimplePool' {
  import alias = ಠ_ಠ.clutz.goog.structs.SimplePool;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.style {
  /**
   * Clears the background image of an element in a browser independent manner.
   * @param el The element to clear background image for.
   */
  function clearTransparentBackgroundImage (el : Element | null ) : void ;
  /**
   * Retrieves the computed background color string for a given element. The
   * string returned is suitable for assigning to another element's
   * background-color, but is not guaranteed to be in any particular string
   * format. Accessing the color in a numeric form may not be possible in all
   * browsers or with all input.
   *
   * If the background color for the element is defined as a hexadecimal value,
   * the resulting string can be parsed by goog.color.parse in all supported
   * browsers.
   *
   * Whether named colors like "red" or "lightblue" get translated into a
   * format which can be parsed is browser dependent. Calling this function on
   * transparent elements will return "transparent" in most browsers or
   * "rgba(0, 0, 0, 0)" in WebKit.
   * @param element The element to get the background color of.
   */
  function getBackgroundColor (element : Element | null ) : string ;
  /**
   * Gets the computed border widths (on all sides) in pixels
   * @param element The element to get the border widths for.
   */
  function getBorderBox (element : Element | null ) : ಠ_ಠ.clutz.goog.math.Box ;
  /**
   * Gets the border box size for an element.
   * @param element The element to get the size for.
   */
  function getBorderBoxSize (element : Element | null ) : ಠ_ಠ.clutz.goog.math.Size ;
  /**
   * Returns a bounding rectangle for a given element in page space.
   * @param element Element to get bounds of. Must not be display none.
   */
  function getBounds (element : Element | null ) : ಠ_ಠ.clutz.goog.math.Rect ;
  /**
   * Gets the cascaded style value of a node, or null if the value cannot be
   * computed (only Internet Explorer can do this).
   * @param element Element to get style of.
   * @param style Property to get (camel-case).
   */
  function getCascadedStyle (element : Element | null , style : string ) : string ;
  /**
   * Returns clientLeft (width of the left border and, if the directionality is
   * right to left, the vertical scrollbar) and clientTop as a coordinate object.
   * @param el Element to get clientLeft for.
   */
  function getClientLeftTop (el : Element | null ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Returns the position of the event or the element's border box relative to
   * the client viewport. If an event is passed, and if this event is a "touch"
   * event, then the position of the first changedTouches will be returned.
   * @param el Element or a mouse / touch event.
   */
  function getClientPosition (el : Element | null | GlobalEvent | ಠ_ಠ.clutz.goog.events.Event ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Returns the viewport element for a particular document
   * @param opt_node DOM node (Document is OK) to get the viewport element of.
   */
  function getClientViewportElement (opt_node ? : Node | null ) : Element | null ;
  /**
   * Retrieves the computed value of the box-sizing CSS attribute.
   * Browser support: http://caniuse.com/css3-boxsizing.
   * @param element The element whose box-sizing to get.
   */
  function getComputedBoxSizing (element : Element ) : string | null ;
  /**
   * Retrieves the computed value of the cursor CSS attribute.
   * @param element The element to get the cursor of.
   */
  function getComputedCursor (element : Element | null ) : string ;
  /**
   * Retrieves the computed value of the overflow-x CSS attribute.
   * @param element The element to get the overflow-x of.
   */
  function getComputedOverflowX (element : Element | null ) : string ;
  /**
   * Retrieves the computed value of the overflow-y CSS attribute.
   * @param element The element to get the overflow-y of.
   */
  function getComputedOverflowY (element : Element | null ) : string ;
  /**
   * Retrieves the computed value of the position CSS attribute.
   * @param element The element to get the position of.
   */
  function getComputedPosition (element : Element | null ) : string ;
  /**
   * Retrieves a computed style value of a node. It returns empty string if the
   * value cannot be computed (which will be the case in Internet Explorer) or
   * "none" if the property requested is an SVG one and it has not been
   * explicitly set (firefox and webkit).
   * @param element Element to get style of.
   * @param property Property to get (camel-case).
   */
  function getComputedStyle (element : Element | null , property : string ) : string ;
  /**
   * Retrieves the computed value of the text-align CSS attribute.
   * @param element The element to get the text-align of.
   */
  function getComputedTextAlign (element : Element | null ) : string ;
  /**
   * Retrieves the computed value of the CSS transform attribute.
   * @param element The element to get the transform of.
   */
  function getComputedTransform (element : Element | null ) : string ;
  /**
   * Retrieves the computed value of the z-index CSS attribute.
   * @param element The element to get the z-index of.
   */
  function getComputedZIndex (element : Element | null ) : string | number ;
  /**
   * Calculate the scroll position of {@code container} with the minimum amount so
   * that the content and the borders of the given {@code element} become visible.
   * If the element is bigger than the container, its top left corner will be
   * aligned as close to the container's top left corner as possible.
   * @param element The element to make visible.
   * @param opt_container The container to scroll. If not set, then the document scroll element will be used.
   * @param opt_center Whether to center the element in the container. Defaults to false.
   */
  function getContainerOffsetToScrollInto (element : Element | null , opt_container ? : Element | null , opt_center ? : boolean ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Gets the content box size for an element.  This is potentially expensive in
   * all browsers.
   * @param element The element to get the size for.
   */
  function getContentBoxSize (element : Element | null ) : ಠ_ಠ.clutz.goog.math.Size ;
  /**
   * Returns the x,y translation component of any CSS transforms applied to the
   * element, in pixels.
   * @param element The element to get the translation of.
   */
  function getCssTranslation (element : Element ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Gets value of explicitly-set float CSS property on an element.
   * @param el The element to get float property of.
   */
  function getFloat (el : Element | null ) : string ;
  /**
   * Returns the font face applied to a given node. Opera and IE should return
   * the font actually displayed. Firefox returns the author's most-preferred
   * font (whether the browser is capable of displaying it or not.)
   * @param el The element whose font family is returned.
   */
  function getFontFamily (el : Element | null ) : string ;
  /**
   * Returns the font size, in pixels, of text in an element.
   * @param el The element whose font size is returned.
   */
  function getFontSize (el : Element | null ) : number ;
  /**
   * Returns a Coordinate object relative to the top-left of an HTML document
   * in an ancestor frame of this element. Used for measuring the position of
   * an element inside a frame relative to a containing frame.
   * @param el Element to get the page offset for.
   * @param relativeWin The window to measure relative to. If relativeWin is not in the ancestor frame chain of the element, we measure relative to the top-most window.
   */
  function getFramedPageOffset (el : Element | null , relativeWin : Window | null ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Returns the units used for a CSS length measurement.
   * @param value A CSS length quantity.
   */
  function getLengthUnits (value : string ) : string | null ;
  /**
   * Gets the computed margins (on all sides) in pixels.
   * @param element The element to get the margins for.
   */
  function getMarginBox (element : Element | null ) : ಠ_ಠ.clutz.goog.math.Box ;
  /**
   * Returns the first parent that could affect the position of a given element.
   * @param element The element to get the offset parent for.
   */
  function getOffsetParent (element : Element | null ) : Element | null ;
  /**
   * Gets the opacity of a node (x-browser). This gets the inline style opacity
   * of the node, and does not take into account the cascaded or the computed
   * style for this node.
   * @param el Element whose opacity has to be found.
   */
  function getOpacity (el : Element | null ) : number | string ;
  /**
   * Gets the computed paddings (on all sides) in pixels.
   * @param element The element to get the padding for.
   */
  function getPaddingBox (element : Element | null ) : ಠ_ಠ.clutz.goog.math.Box ;
  /**
   * Returns a Coordinate object relative to the top-left of the HTML document.
   * Implemented as a single function to save having to do two recursive loops in
   * opera and safari just to get both coordinates.  If you just want one value do
   * use goog.style.getPageOffsetLeft() and goog.style.getPageOffsetTop(), but
   * note if you call both those methods the tree will be analysed twice.
   * @param el Element to get the page offset for.
   */
  function getPageOffset (el : Element | null ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Returns the left coordinate of an element relative to the HTML document
   * @param el Elements.
   */
  function getPageOffsetLeft (el : Element | null ) : number ;
  /**
   * Returns the top coordinate of an element relative to the HTML document
   * @param el Elements.
   */
  function getPageOffsetTop (el : Element | null ) : number ;
  /**
   * Gets the offsetLeft and offsetTop properties of an element and returns them
   * in a Coordinate object
   * @param element Element.
   */
  function getPosition (element : Element | null ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Returns the position of an element relative to another element in the
   * document.  A relative to B
   * @param a Element or mouse event whose position we're calculating.
   * @param b Element or mouse event position is relative to.
   */
  function getRelativePosition (a : Element | null | GlobalEvent | ಠ_ಠ.clutz.goog.events.Event , b : Element | null | GlobalEvent | ಠ_ಠ.clutz.goog.events.Event ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Returns the scroll bar width (represents the width of both horizontal
   * and vertical scroll).
   * @param opt_className An optional class name (or names) to apply to the invisible div created to measure the scrollbar. This is necessary if some scrollbars are styled differently than others.
   */
  function getScrollbarWidth (opt_className ? : string ) : number ;
  /**
   * Gets the height and width of an element, even if its display is none.
   *
   * Specifically, this returns the height and width of the border box,
   * irrespective of the box model in effect.
   *
   * Note that this function does not take CSS transforms into account. Please see
   * {@code goog.style.getTransformedSize}.
   * @param element Element to get size of.
   */
  function getSize (element : Element | null ) : ಠ_ಠ.clutz.goog.math.Size ;
  /**
   * Retrieves an explicitly-set style value of a node. This returns '' if there
   * isn't a style attribute on the element or if this style property has not been
   * explicitly set in script.
   * @param element Element to get style of.
   * @param property Property to get, css-style (if you have a camel-case property, use element.style[style]).
   */
  function getStyle (element : Element | null , property : string ) : string ;
  /**
   * Gets the height and width of an element, post transform, even if its display
   * is none.
   *
   * This is like {@code goog.style.getSize}, except:
   * <ol>
   * <li>Takes webkitTransforms such as rotate and scale into account.
   * <li>Will return null if {@code element} doesn't respond to
   * {@code getBoundingClientRect}.
   * <li>Currently doesn't make sense on non-WebKit browsers which don't support
   * webkitTransforms.
   * </ol>
   * @param element Element to get size of.
   */
  function getTransformedSize (element : Element ) : ಠ_ಠ.clutz.goog.math.Size | null ;
  /**
   * Calculates the viewport coordinates relative to the page/document
   * containing the node. The viewport may be the browser viewport for
   * non-iframe document, or the iframe container for iframe'd document.
   * @param doc The document to use as the reference point.
   */
  function getViewportPageOffset (doc : Document ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Calculates and returns the visible rectangle for a given element. Returns a
   * box describing the visible portion of the nearest scrollable offset ancestor.
   * Coordinates are given relative to the document.
   * @param element Element to get the visible rect for.
   */
  function getVisibleRectForElement (element : Element | null ) : ಠ_ಠ.clutz.goog.math.Box | null ;
  /**
   * Installs the style sheet into the window that contains opt_node.  If
   * opt_node is null, the main window is used.
   * @param safeStyleSheet The style sheet to install.
   * @param opt_node Node whose parent document should have the styles installed.
   */
  function installSafeStyleSheet (safeStyleSheet : ಠ_ಠ.clutz.goog.html.SafeStyleSheet , opt_node ? : Node | null ) : Element | StyleSheet ;
  /**
   * Installs the styles string into the window that contains opt_node.  If
   * opt_node is null, the main window is used.
   * @param stylesString The style string to install.
   * @param opt_node Node whose parent document should have the styles installed.
   */
  function installStyles (stylesString : string , opt_node ? : Node | null ) : Element | StyleSheet ;
  /**
   * Test whether the given element has been shown or hidden via a call to
   * {@link #setElementShown}.
   *
   * Note this is strictly a companion method for a call
   * to {@link #setElementShown} and the same caveats apply; in particular, this
   * method does not guarantee that the return value will be consistent with
   * whether or not the element is actually visible.
   * @param el The element to test.
   */
  function isElementShown (el : Element | null ) : boolean ;
  /**
   * Returns true if the element is using right to left (rtl) direction.
   * @param el The element to test.
   */
  function isRightToLeft (el : Element | null ) : boolean ;
  /**
   * Returns true if the element is set to be unselectable, false otherwise.
   * Note that on some platforms (e.g. Mozilla), even if an element isn't set
   * to be unselectable, it will behave as such if any of its ancestors is
   * unselectable.
   * @param el Element to check.
   */
  function isUnselectable (el : Element | null ) : boolean ;
  /**
   * Parses a style attribute value.  Converts CSS property names to camel case.
   * @param value The style attribute value.
   */
  function parseStyleAttribute (value : string ) : Object ;
  /**
   * Changes the scroll position of {@code container} with the minimum amount so
   * that the content and the borders of the given {@code element} become visible.
   * If the element is bigger than the container, its top left corner will be
   * aligned as close to the container's top left corner as possible.
   * @param element The element to make visible.
   * @param opt_container The container to scroll. If not set, then the document scroll element will be used.
   * @param opt_center Whether to center the element in the container. Defaults to false.
   */
  function scrollIntoContainerView (element : Element | null , opt_container ? : Element | null , opt_center ? : boolean ) : void ;
  /**
   * Sets the border box size of an element. This is potentially expensive in IE
   * if the document is CSS1Compat mode
   * @param element The element to set the size on.
   * @param size The new size.
   */
  function setBorderBoxSize (element : Element | null , size : ಠ_ಠ.clutz.goog.math.Size | null ) : void ;
  /**
   * Sets the content box size of an element. This is potentially expensive in IE
   * if the document is BackCompat mode.
   * @param element The element to set the size on.
   * @param size The new size.
   */
  function setContentBoxSize (element : Element | null , size : ಠ_ಠ.clutz.goog.math.Size | null ) : void ;
  /**
   * Shows or hides an element from the page. Hiding the element is done by
   * setting the display property to "none", removing the element from the
   * rendering hierarchy so it takes up no space. To show the element, the default
   * inherited display property is restored (defined either in stylesheets or by
   * the browser's default style rules).
   *
   * Caveat 1: if the inherited display property for the element is set to "none"
   * by the stylesheets, that is the property that will be restored by a call to
   * setElementShown(), effectively toggling the display between "none" and
   * "none".
   *
   * Caveat 2: if the element display style is set inline (by setting either
   * element.style.display or a style attribute in the HTML), a call to
   * setElementShown will clear that setting and defer to the inherited style in
   * the stylesheet.
   * @param el Element to show or hide.
   * @param isShown True to render the element in its default style, false to disable rendering the element.
   */
  function setElementShown (el : Element | null , isShown : any ) : void ;
  /**
   * Sets CSS float property on an element.
   * @param el The element to set float property on.
   * @param value The value of float CSS property to set on this element.
   */
  function setFloat (el : Element | null , value : string ) : void ;
  /**
   * Set the height of an element.  Sets the element's style property.
   * @param element Element to set the height of.
   * @param height The height value to set.  If a number, 'px' will be appended, otherwise the value will be applied directly.
   */
  function setHeight (element : Element | null , height : string | number ) : void ;
  /**
   * Sets 'display: inline-block' for an element (cross-browser).
   * @param el Element to which the inline-block display style is to be applied.
   */
  function setInlineBlock (el : Element | null ) : void ;
  /**
   * Sets the opacity of a node (x-browser).
   * @param el Elements whose opacity has to be set.
   * @param alpha Opacity between 0 and 1 or an empty string {@code ''} to clear the opacity.
   */
  function setOpacity (el : Element | null , alpha : number | string ) : void ;
  /**
   * Moves an element to the given coordinates relative to the client viewport.
   * @param el Absolutely positioned element to set page offset for. It must be in the document.
   * @param x Left position of the element's margin box or a coordinate object.
   * @param opt_y Top position of the element's margin box.
   */
  function setPageOffset (el : Element | null , x : number | ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_y ? : number ) : void ;
  /**
   * Sets the top/left values of an element.  If no unit is specified in the
   * argument then it will add px. The second argument is required if the first
   * argument is a string or number and is ignored if the first argument
   * is a coordinate.
   * @param el Element to move.
   * @param arg1 Left position or coordinate.
   * @param opt_arg2 Top position.
   */
  function setPosition (el : Element | null , arg1 : string | number | ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_arg2 ? : string | number ) : void ;
  /**
   * Sets 'white-space: pre-wrap' for a node (x-browser).
   *
   * There are as many ways of specifying pre-wrap as there are browsers.
   *
   * CSS3/IE8: white-space: pre-wrap;
   * Mozilla:  white-space: -moz-pre-wrap;
   * Opera:    white-space: -o-pre-wrap;
   * IE6/7:    white-space: pre; word-wrap: break-word;
   * @param el Element to enable pre-wrap for.
   */
  function setPreWrap (el : Element | null ) : void ;
  /**
   * Sets the content of a style element.  The style element can be any valid
   * style element.  This element will have its content completely replaced by
   * the safeStyleSheet.
   * @param element A stylesheet element as returned by installStyles.
   * @param safeStyleSheet The new content of the stylesheet.
   */
  function setSafeStyleSheet (element : Element | StyleSheet , safeStyleSheet : ಠ_ಠ.clutz.goog.html.SafeStyleSheet ) : void ;
  /**
   * Sets the width/height values of an element.  If an argument is numeric,
   * or a goog.math.Size is passed, it is assumed to be pixels and will add
   * 'px' after converting it to an integer in string form. (This just sets the
   * CSS width and height properties so it might set content-box or border-box
   * size depending on the box model the browser is using.)
   * @param element Element to set the size of.
   * @param w Width of the element, or a size object.
   * @param opt_h Height of the element. Required if w is not a size object.
   */
  function setSize (element : Element | null , w : string | number | ಠ_ಠ.clutz.goog.math.Size | null , opt_h ? : string | number ) : void ;
  /**
   * Sets a style value on an element.
   *
   * This function is not indended to patch issues in the browser's style
   * handling, but to allow easy programmatic access to setting dash-separated
   * style properties.  An example is setting a batch of properties from a data
   * object without overwriting old styles.  When possible, use native APIs:
   * elem.style.propertyKey = 'value' or (if obliterating old styles is fine)
   * elem.style.cssText = 'property1: value1; property2: value2'.
   * @param element The element to change.
   * @param style If a string, a style name. If an object, a hash of style names to style values.
   * @param opt_value If style was a string, then this should be the value.
   */
  function setStyle (element : Element | null , style : string | Object | null , opt_value ? : string | number | boolean ) : void ;
  /**
   * Sets the content of a style element.  The style element can be any valid
   * style element.  This element will have its content completely replaced by
   * the stylesString.
   * @param element A stylesheet element as returned by installStyles.
   * @param stylesString The new content of the stylesheet.
   */
  function setStyles (element : Element | null | StyleSheet , stylesString : string ) : void ;
  /**
   * Sets the background of an element to a transparent image in a browser-
   * independent manner.
   *
   * This function does not support repeating backgrounds or alternate background
   * positions to match the behavior of Internet Explorer. It also does not
   * support sizingMethods other than crop since they cannot be replicated in
   * browsers other than Internet Explorer.
   * @param el The element to set background on.
   * @param src The image source URL.
   */
  function setTransparentBackgroundImage (el : Element | null , src : string ) : void ;
  /**
   * Makes the element and its descendants selectable or unselectable.  Note
   * that on some platforms (e.g. Mozilla), even if an element isn't set to
   * be unselectable, it will behave as such if any of its ancestors is
   * unselectable.
   * @param el The element to alter.
   * @param unselectable Whether the element and its descendants should be made unselectable.
   * @param opt_noRecurse Whether to only alter the element's own selectable state, and leave its descendants alone; defaults to false.
   */
  function setUnselectable (el : Element | null , unselectable : boolean , opt_noRecurse ? : boolean ) : void ;
  /**
   * Set the width of an element.  Sets the element's style property.
   * @param element Element to set the width of.
   * @param width The width value to set.  If a number, 'px' will be appended, otherwise the value will be applied directly.
   */
  function setWidth (element : Element | null , width : string | number ) : void ;
  /**
   * Shows or hides an element from the page. Hiding the element is done by
   * setting the display property to "none", removing the element from the
   * rendering hierarchy so it takes up no space. To show the element, the default
   * inherited display property is restored (defined either in stylesheets or by
   * the browser's default style rules.)
   *
   * Caveat 1: if the inherited display property for the element is set to "none"
   * by the stylesheets, that is the property that will be restored by a call to
   * showElement(), effectively toggling the display between "none" and "none".
   *
   * Caveat 2: if the element display style is set inline (by setting either
   * element.style.display or a style attribute in the HTML), a call to
   * showElement will clear that setting and defer to the inherited style in the
   * stylesheet.
   * @param el Element to show or hide.
   * @param display True to render the element in its default style, false to disable rendering the element.
   */
  function showElement (el : Element | null , display : any ) : void ;
  /**
   * Converts a CSS selector in the form style-property to styleProperty.
   * @param selector CSS Selector.
   */
  function toCamelCase (selector : any ) : string ;
  /**
   * Converts a CSS selector in the form styleProperty to style-property.
   * @param selector Camel case selector.
   */
  function toSelectorCase (selector : string ) : string ;
  /**
   * Reverse of parseStyleAttribute; that is, takes a style object and returns the
   * corresponding attribute value.  Converts camel case property names to proper
   * CSS selector names.
   * @param obj Map of CSS properties to values.
   */
  function toStyleAttribute (obj : Object | null ) : string ;
  /**
   * Translates the specified rect relative to origBase page, for newBase page.
   * If origBase and newBase are the same, this function does nothing.
   * @param rect The source rectangle relative to origBase page, and it will have the translated result.
   * @param origBase The DomHelper for the input rectangle.
   * @param newBase The DomHelper for the resultant coordinate.  This must be a DOM for an ancestor frame of origBase or the same as origBase.
   */
  function translateRectForAnotherFrame (rect : ಠ_ಠ.clutz.goog.math.Rect | null , origBase : ಠ_ಠ.clutz.goog.dom.DomHelper | null , newBase : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) : void ;
  /**
   * Removes the styles added by {@link #installStyles}.
   * @param styleSheet The value returned by {@link #installStyles}.
   */
  function uninstallStyles (styleSheet : Element | null | StyleSheet ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.style'): typeof ಠ_ಠ.clutz.goog.style;
}
declare module 'goog:goog.style' {
  import alias = ಠ_ಠ.clutz.goog.style;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.style.bidi {
  /**
   * Returns the "offsetStart" of an element, analogous to offsetLeft but
   * normalized for right-to-left environments and various browser
   * inconsistencies. This value returned can always be passed to setScrollOffset
   * to scroll to an element's left edge in a left-to-right offsetParent or
   * right edge in a right-to-left offsetParent.
   *
   * For example, here offsetStart is 10px in an LTR environment and 5px in RTL:
   *
   * <pre>
   * |          xxxxxxxxxx     |
   * ^^^^^^^^^^   ^^^^   ^^^^^
   * 10px      elem    5px
   * </pre>
   *
   * If an element is positioned before the start of its offsetParent, the
   * startOffset may be negative.  This can be used with setScrollOffset to
   * reliably scroll to an element:
   *
   * <pre>
   * var scrollOffset = goog.style.bidi.getOffsetStart(element);
   * goog.style.bidi.setScrollOffset(element.offsetParent, scrollOffset);
   * </pre>
   * @param element The element for which we need to determine the offsetStart position.
   */
  function getOffsetStart (element : Element | null ) : number ;
  /**
   * Returns the normalized scrollLeft position for a scrolled element.
   * @param element The scrolled element.
   */
  function getScrollLeft (element : Element | null ) : number ;
  /**
   * Sets the element's left style attribute in LTR or right style attribute in
   * RTL.  Also clears the left attribute in RTL and the right attribute in LTR.
   * @param elem The element to position.
   * @param left The left position in LTR; will be set as right in RTL.
   * @param top The top position.  If null only the left/right is set.
   * @param isRtl Whether we are in RTL mode.
   */
  function setPosition (elem : Element | null , left : number , top : number | null , isRtl : boolean ) : void ;
  /**
   * Sets the element's scrollLeft attribute so it is correctly scrolled by
   * offsetStart pixels.  This takes into account whether the element is RTL and
   * the nuances of different browsers.  To scroll to the "beginning" of an
   * element use getOffsetStart to obtain the element's offsetStart value and then
   * pass the value to setScrollOffset.
   * @param element The element to set scrollLeft on.
   * @param offsetStart The number of pixels to scroll the element. If this value is < 0, 0 is used.
   */
  function setScrollOffset (element : Element | null , offsetStart : number ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.style.bidi'): typeof ಠ_ಠ.clutz.goog.style.bidi;
}
declare module 'goog:goog.style.bidi' {
  import alias = ಠ_ಠ.clutz.goog.style.bidi;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.style.transition {
  function isSupported ( ) : boolean ;
  /**
   * Removes any programmatically-added CSS3 transition in the given element.
   * @param element The element to remove transition from.
   */
  function removeAll (element : Element | null ) : void ;
  /**
   * Sets the element CSS3 transition to properties.
   * @param element The element to set transition on.
   * @param properties A single CSS3 transition property or array of properties.
   */
  function set (element : Element | null , properties : { delay : number , duration : number , property : string , timing : string } | string | ( { delay : number , duration : number , property : string , timing : string } | string ) [] | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.style.transition'): typeof ಠ_ಠ.clutz.goog.style.transition;
}
declare module 'goog:goog.style.transition' {
  import alias = ಠ_ಠ.clutz.goog.style.transition;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.style.transition {
  /**
   * A typedef to represent a CSS3 transition property. Duration and delay
   * are both in seconds. Timing is CSS3 timing function string, such as
   * 'easein', 'linear'.
   *
   * Alternatively, specifying string in the form of '[property] [duration]
   * [timing] [delay]' as specified in CSS3 transition is fine too.
   */
  type Css3Property = { delay : number , duration : number , property : string , timing : string } | string ;
}
declare module 'goog:goog.style.transition.Css3Property' {
  import alias = ಠ_ಠ.clutz.goog.style.transition.Css3Property;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Convenience method for creating a mock for a constructor. Copies class
   * members to the mock.
   *
   * <p>When mocking a constructor to return a mocked instance, remember to create
   * the instance mock before mocking the constructor. If you mock the constructor
   * first, then the mock framework will be unable to examine the prototype chain
   * when creating the mock instance.
   * @param scope The scope of the constructor to be mocked out.
   * @param constructorName The name of the constructor we're going to mock.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function createConstructorMock (scope : Object | null , constructorName : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
  /**
   * Convenience method for creating a mock for a function.
   * @param opt_functionName The optional name of the function to mock set to '[anonymous mocked function]' if not passed in.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function createFunctionMock (opt_functionName ? : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
  /**
   * Convenience method for creating a mocks for a global / top-level function.
   * @param functionName The name of the function we're going to mock.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function createGlobalFunctionMock (functionName : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
  /**
   * Convenience method for creating a mock for a method.
   * @param scope The scope of the method to be mocked out.
   * @param functionName The name of the function we're going to mock.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function createMethodMock (scope : Object | null , functionName : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing'): typeof ಠ_ಠ.clutz.goog.testing;
}
declare module 'goog:goog.testing' {
  import alias = ಠ_ಠ.clutz.goog.testing;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Class used to mock a function. Useful for mocking closures and anonymous
   * callbacks etc. Creates a function object that extends goog.testing.Mock.
   * @param opt_functionName The optional name of the function to mock. Set to '[anonymous mocked function]' if not passed in.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function FunctionMock (opt_functionName ? : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.FunctionMock'): typeof ಠ_ಠ.clutz.goog.testing.FunctionMock;
}
declare module 'goog:goog.testing.FunctionMock' {
  import alias = ಠ_ಠ.clutz.goog.testing.FunctionMock;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Mocks a global / top-level function. Creates a goog.testing.MethodMock
   * in the global scope with the name specified by functionName.
   * @param functionName The name of the function we're going to mock.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function GlobalFunctionMock (functionName : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.GlobalFunctionMock'): typeof ಠ_ಠ.clutz.goog.testing.GlobalFunctionMock;
}
declare module 'goog:goog.testing.GlobalFunctionMock' {
  import alias = ಠ_ಠ.clutz.goog.testing.GlobalFunctionMock;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  class JsUnitException extends JsUnitException_Instance {
  }
  class JsUnitException_Instance extends GlobalError {
    constructor (comment : string , opt_message ? : string | null ) ;
    comment : string | null ;
    isJsUnitException : boolean ;
    jsUnitMessage : string ;
    message : string ;
    stack : string ;
    stackTrace : string ;
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.JsUnitException'): typeof ಠ_ಠ.clutz.goog.testing.JsUnitException;
}
declare module 'goog:goog.testing.JsUnitException' {
  import alias = ಠ_ಠ.clutz.goog.testing.JsUnitException;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * This class is an ordered collection of expectations for one method. Since
   * the loose mock does most of its verification at the time of $verify, this
   * class is necessary to manage the return/throw behavior when the mock is
   * being called.
   */
  class LooseExpectationCollection extends LooseExpectationCollection_Instance {
  }
  class LooseExpectationCollection_Instance {
    private noStructuralTyping_: any;
    /**
     * Adds an expectation to this collection.
     * @param expectation The expectation to add.
     */
    addExpectation (expectation : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) : void ;
    /**
     * Gets the list of expectations in this collection.
     */
    getExpectations ( ) : ( ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) [] | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.LooseExpectationCollection'): typeof ಠ_ಠ.clutz.goog.testing.LooseExpectationCollection;
}
declare module 'goog:goog.testing.LooseExpectationCollection' {
  import alias = ಠ_ಠ.clutz.goog.testing.LooseExpectationCollection;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * This is a mock that does not care about the order of method calls. As a
   * result, it won't throw exceptions until verify() is called. The only
   * exception is that if a method is called that has no expectations, then an
   * exception will be thrown.
   */
  class LooseMock extends LooseMock_Instance {
  }
  class LooseMock_Instance extends ಠ_ಠ.clutz.goog.testing.Mock_Instance {
    /**
     * This is a mock that does not care about the order of method calls. As a
     * result, it won't throw exceptions until verify() is called. The only
     * exception is that if a method is called that has no expectations, then an
     * exception will be thrown.
     * @param objectToMock The object that should be mocked, or the constructor of an object to mock.
     * @param opt_ignoreUnexpectedCalls Whether to ignore unexpected calls.
     * @param opt_mockStaticMethods An optional argument denoting that a mock should be constructed from the static functions of a class.
     * @param opt_createProxy An optional argument denoting that a proxy for the target mock should be created.
     */
    constructor (objectToMock : Object | null , opt_ignoreUnexpectedCalls ? : boolean , opt_mockStaticMethods ? : boolean , opt_createProxy ? : boolean ) ;
    $recordCall (name : string , args : any [] | null ) : any ;
    $recordExpectation ( ) : void ;
    $replay ( ) : void ;
    $reset ( ) : void ;
    /**
     * A setter for the ignoreUnexpectedCalls field.
     * @param ignoreUnexpectedCalls Whether to ignore unexpected calls.
     */
    $setIgnoreUnexpectedCalls (ignoreUnexpectedCalls : boolean ) : ಠ_ಠ.clutz.goog.testing.LooseMock ;
    $verify ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.LooseMock'): typeof ಠ_ಠ.clutz.goog.testing.LooseMock;
}
declare module 'goog:goog.testing.LooseMock' {
  import alias = ಠ_ಠ.clutz.goog.testing.LooseMock;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Mocks an existing function. Creates a goog.testing.FunctionMock
   * and registers it in the given scope with the name specified by functionName.
   * @param scope The scope of the method to be mocked out.
   * @param functionName The name of the function we're going to mock.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function MethodMock (scope : Object | null , functionName : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.MethodMock'): typeof ಠ_ಠ.clutz.goog.testing.MethodMock;
}
declare module 'goog:goog.testing.MethodMock' {
  import alias = ಠ_ಠ.clutz.goog.testing.MethodMock;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * The base class for a mock object.
   */
  class Mock extends Mock_Instance {
    /**
     * Option that may be passed when constructing function, method, and
     * constructor mocks. Indicates that the expected calls should be accepted in
     * any order.
     */
    static LOOSE : number ;
    /**
     * Option that may be passed when constructing function, method, and
     * constructor mocks. Indicates that the expected calls should be accepted in
     * the recorded order only.
     */
    static STRICT : number ;
  }
  class Mock_Instance implements ಠ_ಠ.clutz.goog.testing.MockInterface {
    private noStructuralTyping_: any;
    /**
     * The base class for a mock object.
     * @param objectToMock The object that should be mocked, or the constructor of an object to mock.
     * @param opt_mockStaticMethods An optional argument denoting that a mock should be constructed from the static functions of a class.
     * @param opt_createProxy An optional argument denoting that a proxy for the target mock should be created.
     */
    constructor (objectToMock : Object | null , opt_mockStaticMethods ? : boolean , opt_createProxy ? : boolean ) ;
    /**
     * Allows the expectation to be called any number of times.
     */
    $anyTimes ( ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Map of argument name to optional argument list verifier function.
     */
    $argumentListVerifiers_ : Object | null ;
    /**
     * Render the provided argument array to a string to help
     * clients with debugging tests.
     * @param args The arguments passed to the mock.
     */
    $argumentsAsString (args : ಠ_ಠ.clutz.goog.uri.utils.QueryArray | null ) : string ;
    /**
     * Allows the expectation to be called any number of times, as long as it's
     * called once.
     */
    $atLeastOnce ( ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Allows the expectation to be called 0 or 1 times.
     */
    $atMostOnce ( ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * If this expectation defines a function to be called,
     * it will be called and its result will be returned.
     * Otherwise, if the expectation expects to throw, it will throw.
     * Otherwise, this method will return defined value.
     * @param expectation The expectation.
     * @param args The arguments to the method.
     */
    $do (expectation : ಠ_ಠ.clutz.goog.testing.MockExpectation | null , args : any [] | null ) : any ;
    /**
     * Specifies a function to call for currently pending expectation.
     * Note, that using this method overrides declarations made
     * using $returns() and $throws() methods.
     * @param func The function to call.
     */
    $does (func : ( ( ...a : any [] ) => any ) | null ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * If the expectation expects to throw, this method will throw.
     * @param expectation The expectation.
     */
    $maybeThrow (expectation : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) : void ;
    /**
     * The function that replaces all methods on the mock object.
     * @param name The name of the method being mocked.
     */
    $mockMethod (name : string ) : any ;
    /**
     * Disallows the expectation from being called.
     */
    $never ( ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Allows the expectation to be called exactly once.
     */
    $once ( ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * The expectation currently being created. All methods that modify the
     * current expectation return the Mock object for easy chaining, so this is
     * where we keep track of the expectation that's currently being modified.
     */
    $pendingExpectation : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ;
    /**
     * A proxy for the mock.  This can be used for dependency injection in lieu of
     * the mock if the test requires a strict instanceof check.
     */
    $proxy : Object | null ;
    /**
     * Throws an exception and records that an exception was thrown.
     * @param ex Exception.
     */
    $recordAndThrow (ex : Object | null ) : void ;
    /**
     * Records an actual method call, intended to be overridden by a
     * subclass. The subclass must find the pending expectation and return the
     * correct value.
     * @param name The name of the method being called.
     * @param args The arguments to the method.
     */
    $recordCall (name : string , args : any [] | null ) : any ;
    /**
     * Records the currently pending expectation, intended to be overridden by a
     * subclass.
     */
    $recordExpectation ( ) : void ;
    /**
     * Registers a verifier function to use when verifying method argument lists.
     * @param methodName The name of the method for which the verifierFn should be used.
     * @param fn Argument list verifier function.  Should take 2 argument arrays as arguments, and return true if they are considered equivalent.
     */
    $registerArgumentListVerifier (methodName : string , fn : ( ( ...a : any [] ) => any ) | null ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Switches from recording to replay mode.
     */
    $replay ( ) : void ;
    /**
     * Resets the state of this mock object. This clears all pending expectations
     * without verifying, and puts the mock in recording mode.
     */
    $reset ( ) : void ;
    /**
     * Specifies a return value for the currently pending expectation.
     * @param val The return value.
     */
    $returns (val : any ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Throw an exception based on an incorrect method call.
     * @param name Name of method called.
     * @param args Arguments passed to the mock.
     * @param opt_expectation Expected next call, if any.
     */
    $throwCallException (name : string , args : ಠ_ಠ.clutz.goog.uri.utils.QueryArray | null , opt_expectation ? : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) : void ;
    /**
     * Throws an exception and records that an exception was thrown.
     * @param comment A short comment about the exception.
     * @param opt_message A longer message about the exception.
     */
    $throwException (comment : string , opt_message ? : string | null ) : void ;
    /**
     * Specifies a value for the currently pending expectation to throw.
     * @param val The value to throw.
     */
    $throws (val : any ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Specifies the number of times the expectation should be called.
     * @param times The number of times this method will be called.
     */
    $times (times : number ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Verify that all of the expectations were met. Should be overridden by
     * subclasses.
     */
    $verify ( ) : void ;
    /**
     * Verifies that a method call matches an expectation.
     * @param expectation The expectation to check.
     * @param name The name of the called method.
     * @param args The arguments passed to the mock.
     */
    $verifyCall (expectation : ಠ_ಠ.clutz.goog.testing.MockExpectation | null , name : string , args : ಠ_ಠ.clutz.goog.uri.utils.QueryArray | null ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.Mock'): typeof ಠ_ಠ.clutz.goog.testing.Mock;
}
declare module 'goog:goog.testing.Mock' {
  import alias = ಠ_ಠ.clutz.goog.testing.Mock;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Class for unit testing code that uses setTimeout and clearTimeout.
   *
   * NOTE: If you are using MockClock to test code that makes use of
   * goog.fx.Animation, then you must either:
   *
   * 1. Install and dispose of the MockClock in setUpPage() and tearDownPage()
   * respectively (rather than setUp()/tearDown()).
   *
   * or
   *
   * 2. Ensure that every test clears the animation queue by calling
   * mockClock.tick(x) at the end of each test function (where `x` is large
   * enough to complete all animations).
   *
   * Otherwise, if any animation is left pending at the time that
   * MockClock.dispose() is called, that will permanently prevent any future
   * animations from playing on the page.
   */
  class MockClock extends MockClock_Instance {
    /**
     * Default wait timeout for mocking requestAnimationFrame (in milliseconds).
     */
    static REQUEST_ANIMATION_FRAME_TIMEOUT : number ;
    /**
     * ID to use for next timeout.  Timeout IDs must never be reused, even across
     * MockClock instances.
     */
    static nextId : number ;
  }
  class MockClock_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Class for unit testing code that uses setTimeout and clearTimeout.
     *
     * NOTE: If you are using MockClock to test code that makes use of
     * goog.fx.Animation, then you must either:
     *
     * 1. Install and dispose of the MockClock in setUpPage() and tearDownPage()
     * respectively (rather than setUp()/tearDown()).
     *
     * or
     *
     * 2. Ensure that every test clears the animation queue by calling
     * mockClock.tick(x) at the end of each test function (where `x` is large
     * enough to complete all animations).
     *
     * Otherwise, if any animation is left pending at the time that
     * MockClock.dispose() is called, that will permanently prevent any future
     * animations from playing on the page.
     * @param opt_autoInstall Install the MockClock at construction time.
     */
    constructor (opt_autoInstall ? : boolean ) ;
    disposeInternal ( ) : void ;
    getCurrentTime ( ) : number ;
    getTimeoutDelay ( ) : number ;
    getTimeoutsMade ( ) : number ;
    /**
     * Installs the MockClock by overriding the global object's implementation of
     * setTimeout, setInterval, clearTimeout and clearInterval.
     */
    install ( ) : void ;
    isTimeoutSet (timeoutKey : number ) : boolean ;
    /**
     * Resets the MockClock, removing all timeouts that are scheduled and resets
     * the fake timer count.
     */
    reset ( ) : void ;
    /**
     * Sets the amount of time between when a timeout is scheduled to fire and when
     * it actually fires.
     * @param delay The delay in milliseconds.  May be negative.
     */
    setTimeoutDelay (delay : number ) : void ;
    /**
     * Increments the MockClock's time by a given number of milliseconds, running
     * any functions that are now overdue.
     * @param opt_millis Number of milliseconds to increment the counter. If not specified, clock ticks 1 millisecond.
     */
    tick (opt_millis ? : number ) : number ;
    /**
     * Takes a promise and then ticks the mock clock. If the promise successfully
     * resolves, returns the value produced by the promise. If the promise is
     * rejected, it throws the rejection as an exception. If the promise is not
     * resolved at all, throws an exception.
     * Also ticks the general clock by the specified amount.
     * @param promise A promise that should be resolved after the mockClock is ticked for the given opt_millis.
     * @param opt_millis Number of milliseconds to increment the counter. If not specified, clock ticks 1 millisecond.
     */
    tickPromise < T > (promise : ಠ_ಠ.clutz.goog.Thenable < T > , opt_millis ? : number ) : T ;
    /**
     * Removes the MockClock's hooks into the global object's functions and revert
     * to their original values.
     */
    uninstall ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.MockClock'): typeof ಠ_ಠ.clutz.goog.testing.MockClock;
}
declare module 'goog:goog.testing.MockClock' {
  import alias = ಠ_ಠ.clutz.goog.testing.MockClock;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Controls a set of mocks.  Controlled mocks are replayed, verified, and
   * cleaned-up at the same time.
   */
  class MockControl extends MockControl_Instance {
  }
  class MockControl_Instance {
    private noStructuralTyping_: any;
    /**
     * Calls replay on each controlled mock.
     */
    $replayAll ( ) : void ;
    /**
     * Calls reset on each controlled mock.
     */
    $resetAll ( ) : void ;
    /**
     * Calls tearDown on each controlled mock, if necesssary.
     */
    $tearDown ( ) : void ;
    /**
     * Calls verify on each controlled mock.
     */
    $verifyAll ( ) : void ;
    /**
     * Takes control of this mock.
     * @param mock Mock to be controlled.
     */
    addMock (mock : ಠ_ಠ.clutz.goog.testing.MockInterface | null ) : ಠ_ಠ.clutz.goog.testing.MockInterface | null ;
    /**
     * Creates a controlled MethodMock for a constructor.  Passes its arguments
     * through to the MethodMock constructor. See
     * {@link goog.testing.createConstructorMock} for details.
     * @param scope The scope of the constructor to be mocked out.
     * @param constructorName The name of the function we're going to mock.
     * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
     */
    createConstructorMock (scope : Object | null , constructorName : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
    /**
     * Creates a controlled FunctionMock.  Passes its arguments through to the
     * FunctionMock constructor.
     * @param opt_functionName The optional name of the function to mock set to '[anonymous mocked function]' if not passed in.
     * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
     */
    createFunctionMock (opt_functionName ? : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
    /**
     * Creates a controlled GlobalFunctionMock.  Passes its arguments through to the
     * GlobalFunctionMock constructor.
     * @param functionName The name of the function we're going to mock.
     * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
     */
    createGlobalFunctionMock (functionName : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
    /**
     * Creates a controlled LooseMock.  Passes its arguments through to the
     * LooseMock constructor.
     * @param objectToMock The object that should be mocked, or the constructor of an object to mock.
     * @param opt_ignoreUnexpectedCalls Whether to ignore unexpected calls.
     * @param opt_mockStaticMethods An optional argument denoting that a mock should be constructed from the static functions of a class.
     * @param opt_createProxy An optional argument denoting that a proxy for the target mock should be created.
     */
    createLooseMock (objectToMock : Object | null , opt_ignoreUnexpectedCalls ? : boolean , opt_mockStaticMethods ? : boolean , opt_createProxy ? : boolean ) : ಠ_ಠ.clutz.goog.testing.LooseMock ;
    /**
     * Creates a controlled MethodMock.  Passes its arguments through to the
     * MethodMock constructor.
     * @param scope The scope of the method to be mocked out.
     * @param functionName The name of the function we're going to mock.
     * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
     */
    createMethodMock (scope : Object | null , functionName : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
    /**
     * Creates a controlled StrictMock.  Passes its arguments through to the
     * StrictMock constructor.
     * @param objectToMock The object that should be mocked, or the constructor of an object to mock.
     * @param opt_mockStaticMethods An optional argument denoting that a mock should be constructed from the static functions of a class.
     * @param opt_createProxy An optional argument denoting that a proxy for the target mock should be created.
     */
    createStrictMock (objectToMock : Object | null , opt_mockStaticMethods ? : boolean , opt_createProxy ? : boolean ) : ಠ_ಠ.clutz.goog.testing.StrictMock ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.MockControl'): typeof ಠ_ಠ.clutz.goog.testing.MockControl;
}
declare module 'goog:goog.testing.MockControl' {
  import alias = ಠ_ಠ.clutz.goog.testing.MockControl;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * This is a class that represents an expectation.
   */
  class MockExpectation extends MockExpectation_Instance {
  }
  class MockExpectation_Instance {
    private noStructuralTyping_: any;
    /**
     * This is a class that represents an expectation.
     * @param name The name of the method for this expectation.
     */
    constructor (name : string ) ;
    /**
     * An array of error messages for expectations not met.
     */
    errorMessages : string [] | null ;
    /**
     * The name of the method that is expected to be called.
     */
    name : string ;
    /**
     * The number of times this method is called by real code.
     */
    actualCalls : number ;
    /**
     * Allow expectation failures to include messages.
     * @param message The failure message.
     */
    addErrorMessage (message : string ) : void ;
    /**
     * The arguments that are expected to be passed to this function
     */
    argumentList : ಠ_ಠ.clutz.goog.uri.utils.QueryArray | null ;
    /**
     * The value that will be thrown when the method is called
     */
    exceptionToThrow : any ;
    /**
     * Get the error messages seen so far.
     */
    getErrorMessage ( ) : string ;
    /**
     * Get how many error messages have been seen so far.
     */
    getErrorMessageCount ( ) : number ;
    /**
     * The maximum number of times this method should be called.
     */
    maxCalls : number ;
    /**
     * The minimum number of times this method should be called.
     */
    minCalls : number ;
    /**
     * The value that this method should return.
     */
    returnValue : any ;
    /**
     * The function which will be executed when this method is called.
     * Method arguments will be passed to this function, and return value
     * of this function will be returned by the method.
     */
    toDo : ( ( ...a : any [] ) => any ) | null ;
    /**
     * The number of times this method is called during the verification phase.
     */
    verificationCalls : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.MockExpectation'): typeof ಠ_ಠ.clutz.goog.testing.MockExpectation;
}
declare module 'goog:goog.testing.MockExpectation' {
  import alias = ಠ_ಠ.clutz.goog.testing.MockExpectation;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  interface MockInterface {
    /**
     * Write down all the expected functions that have been called on the
     * mock so far. From here on out, future function calls will be
     * compared against this list.
     */
    $replay ( ) : void ;
    /**
     * Reset the mock.
     */
    $reset ( ) : void ;
    /**
     * Assert that the expected function calls match the actual calls.
     */
    $verify ( ) : void ;
  }
}
declare module 'goog:goog.testing.MockInterface' {
  import alias = ಠ_ಠ.clutz.goog.testing.MockInterface;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Object to pass a property name as a string literal and its containing object
   * when the JSCompiler is rewriting these names. This should only be used in
   * test code.
   */
  class ObjectPropertyString extends ObjectPropertyString_Instance {
  }
  class ObjectPropertyString_Instance {
    private noStructuralTyping_: any;
    /**
     * Object to pass a property name as a string literal and its containing object
     * when the JSCompiler is rewriting these names. This should only be used in
     * test code.
     * @param object The containing object.
     * @param propertyString Property name as a string literal.
     */
    constructor (object : Object | null , propertyString : Object | null | string ) ;
    getObject ( ) : Object | null ;
    getPropertyString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.ObjectPropertyString'): typeof ಠ_ಠ.clutz.goog.testing.ObjectPropertyString;
}
declare module 'goog:goog.testing.ObjectPropertyString' {
  import alias = ಠ_ಠ.clutz.goog.testing.ObjectPropertyString;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Helper class for stubbing out variables and object properties for unit tests.
   * This class can change the value of some variables before running the test
   * cases, and to reset them in the tearDown phase.
   * See googletest.StubOutForTesting as an analogy in Python:
   * http://protobuf.googlecode.com/svn/trunk/python/stubout.py
   *
   * Example usage:
   *
   * var stubs = new goog.testing.PropertyReplacer();
   *
   * function setUp() {
   * // Mock functions used in all test cases.
   * stubs.set(Math, 'random', function() {
   * return 4;  // Chosen by fair dice roll. Guaranteed to be random.
   * });
   * }
   *
   * function tearDown() {
   * stubs.reset();
   * }
   *
   * function testThreeDice() {
   * // Mock a constant used only in this test case.
   * stubs.set(goog.global, 'DICE_COUNT', 3);
   * assertEquals(12, rollAllDice());
   * }
   *
   * Constraints on altered objects:
   * <ul>
   * <li>DOM subclasses aren't supported.
   * <li>The value of the objects' constructor property must either be equal to
   * the real constructor or kept untouched.
   * </ul>
   */
  class PropertyReplacer extends PropertyReplacer_Instance {
  }
  class PropertyReplacer_Instance {
    private noStructuralTyping_: any;
    /**
     * Deletes the key from the object while saving its original value.
     * @param obj The JavaScript or native object or function to alter. See the constraints in the class description.
     * @param key The key to delete.
     */
    remove (obj : Object | null , key : string ) : void ;
    /**
     * Changes an existing value in an object to another one of the same type while
     * saving its original state. The advantage of {@code replace} over {@link #set}
     * is that {@code replace} protects against typos and erroneously passing tests
     * after some members have been renamed during a refactoring.
     * @param obj The JavaScript or native object or function to alter. See the constraints in the class description.
     * @param key The key to change the value for. It has to be present either in {@code obj} or in its prototype chain.
     * @param value The new value to set. It has to have the same type as the original value. The types are compared with {@link goog.typeOf}.
     */
    replace (obj : Object | null , key : string , value : any ) : void ;
    /**
     * Resets all changes made by goog.testing.PropertyReplacer.prototype.set.
     */
    reset ( ) : void ;
    /**
     * Restore the original state of key in an object.
     * @param obj The JavaScript or native object whose state should be restored.
     * @param key The key to restore the original value for.
     */
    restore (obj : Object , key : string ) : void ;
    /**
     * Adds or changes a value in an object while saving its original state.
     * @param obj The JavaScript or native object or function to alter. See the constraints in the class description.
     * @param key The key to change the value for.
     * @param value The new value to set.
     */
    set (obj : Object | null , key : string , value : any ) : void ;
    /**
     * Builds an object structure for the provided namespace path.  Doesn't
     * overwrite those prefixes of the path that are already objects or functions.
     * @param path The path to create or alter, e.g. 'goog.ui.Menu'.
     * @param value The value to set.
     */
    setPath (path : string , value : any ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.PropertyReplacer'): typeof ಠ_ಠ.clutz.goog.testing.PropertyReplacer;
}
declare module 'goog:goog.testing.PropertyReplacer' {
  import alias = ಠ_ಠ.clutz.goog.testing.PropertyReplacer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Class for unit testing code that uses Math.random. Generates deterministic
   * random numbers.
   */
  class PseudoRandom extends PseudoRandom_Instance {
    /**
     * Constant used as part of the algorithm.
     */
    static A : number ;
    /**
     * Constant used as part of the algorithm. 2^31 - 1.
     */
    static M : number ;
    /**
     * Constant used as part of the algorithm to get values from range [0, 1).
     */
    static ONE_OVER_M_MINUS_ONE : number ;
    /**
     * Constant used as part of the algorithm. It is equal to M / A.
     */
    static Q : number ;
    /**
     * Constant used as part of the algorithm. It is equal to M % A.
     */
    static R : number ;
  }
  class PseudoRandom_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
    /**
     * Class for unit testing code that uses Math.random. Generates deterministic
     * random numbers.
     * @param opt_seed The seed to use.
     * @param opt_install Whether to install the PseudoRandom at construction time.
     */
    constructor (opt_seed ? : number , opt_install ? : boolean ) ;
    disposeInternal ( ) : void ;
    /**
     * Installs this PseudoRandom as the system number generator.
     */
    install ( ) : void ;
    random ( ) : number ;
    /**
     * Seed the generator.
     * @param opt_seed The seed to use.
     */
    seed (opt_seed ? : number ) : void ;
    /**
     * Uninstalls the PseudoRandom.
     */
    uninstall ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.PseudoRandom'): typeof ಠ_ಠ.clutz.goog.testing.PseudoRandom;
}
declare module 'goog:goog.testing.PseudoRandom' {
  import alias = ಠ_ಠ.clutz.goog.testing.PseudoRandom;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * This is a mock that verifies that methods are called in the order that they
   * are specified during the recording phase. Since it verifies order, it
   * follows 'fail fast' semantics. If it detects a deviation from the
   * expectations, it will throw an exception and not wait for verify to be
   * called.
   */
  class StrictMock extends StrictMock_Instance {
  }
  class StrictMock_Instance extends ಠ_ಠ.clutz.goog.testing.Mock_Instance {
    /**
     * This is a mock that verifies that methods are called in the order that they
     * are specified during the recording phase. Since it verifies order, it
     * follows 'fail fast' semantics. If it detects a deviation from the
     * expectations, it will throw an exception and not wait for verify to be
     * called.
     * @param objectToMock The object that should be mocked, or the constructor of an object to mock.
     * @param opt_mockStaticMethods An optional argument denoting that a mock should be constructed from the static functions of a class.
     * @param opt_createProxy An optional argument denoting that a proxy for the target mock should be created.
     */
    constructor (objectToMock : Object | null , opt_mockStaticMethods ? : boolean , opt_createProxy ? : boolean ) ;
    $recordCall (name : string , args : any [] | null ) : any ;
    $recordExpectation ( ) : void ;
    $reset ( ) : void ;
    $verify ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.StrictMock'): typeof ಠ_ಠ.clutz.goog.testing.StrictMock;
}
declare module 'goog:goog.testing.StrictMock' {
  import alias = ಠ_ಠ.clutz.goog.testing.StrictMock;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * A class representing a JsUnit test case. A TestCase is made up of a number
   * of test functions which can be run. Individual test cases can override the
   * following functions to set up their test environment:
   * - runTests - completely override the test's runner
   * - setUpPage - called before any of the test functions are run
   * - tearDownPage - called after all tests are finished
   * - setUp - called before each of the test functions
   * - tearDown - called after each of the test functions
   * - shouldRunTests - called before a test run, all tests are skipped if it
   * returns false. Can be used to disable tests on browsers
   * where they aren't expected to pass.
   * <p>
   * TestCase objects are usually constructed by inspecting the global environment
   * to discover functions that begin with the prefix <code>test</code>.
   * (See {@link #autoDiscoverLifecycle} and {@link #autoDiscoverTests}.)
   * </p>
   *
   * <h2>Testing asychronous code with promises</h2>
   *
   * <p>
   * In the simplest cases, the behavior that the developer wants to test
   * is synchronous, and the test functions exercising the behavior execute
   * synchronously. But TestCase can also be used to exercise asynchronous code
   * through the use of <a
   * href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">
   * promises</a>. If a test function returns an object that has a
   * <code>then</code> method defined on it, the test framework switches to an
   * asynchronous execution strategy: the next test function will not begin
   * execution until the returned promise is resolved or rejected. Instead of
   * writing test assertions at the top level inside a test function, the test
   * author chains them on the end of the returned promise. For example:
   * </p>
   * <pre>
   * function testPromiseBasedAPI() {
   * return promiseBasedAPI().then(function(value) {
   * // Will run when the promise resolves, and before the next
   * // test function begins execution.
   * assertEquals('foo', value.bar);
   * });
   * }
   * </pre>
   * <p>
   * Synchronous and asynchronous tests can be mixed in the same TestCase.
   * Test functions that return an object with a <code>then</code> method are
   * executed asynchronously, and all other test functions are executed
   * synchronously. While this is convenient for test authors (since it doesn't
   * require any explicit configuration for asynchronous tests), it can lead to
   * confusion if the test author forgets to return the promise from the test
   * function. For example:
   * </p>
   * <pre>
   * function testPromiseBasedAPI() {
   * // This test should never succeed.
   * promiseBasedAPI().then(fail, fail);
   * // Oops! The promise isn't returned to the framework,
   * // so this test actually does succeed.
   * }
   * </pre>
   * <p>
   * Since the test framework knows nothing about the promise created
   * in the test function, it will run the function synchronously, record
   * a success, and proceed immediately to the next test function.
   * </p>
   * <p>
   * Promises returned from test functions can time out. If a returned promise
   * is not resolved or rejected within {@link promiseTimeout} milliseconds,
   * the test framework rejects the promise without a timeout error message.
   * Test cases can configure the value of {@code promiseTimeout} by setting
   * <pre>
   * goog.testing.TestCase.getActiveTestCase().promiseTimeout = ...
   * </pre>
   * in their {@code setUpPage} methods.
   * </p>
   */
  class TestCase extends TestCase_Instance {
    /**
     * Avoid a dependency on goog.userAgent and keep our own reference of whether
     * the browser is IE.
     */
    static IS_IE : boolean ;
    /**
     * TODO(user) replace this with prototype.currentTest.
     * Name of the current test that is running, or null if none is running.
     */
    static currentTestName : string | null ;
    static getActiveTestCase ( ) : ಠ_ಠ.clutz.goog.testing.TestCase | null ;
    /**
     * Gets list of objects that potentially contain test cases. For IE 8 and below,
     * this is the global "this" (for properties set directly on the global this or
     * window) and the RuntimeObject (for global variables and functions). For all
     * other browsers, the array simply contains the global this.
     * @param opt_prefix An optional prefix. If specified, only get things under this prefix. Note that the prefix is only honored in IE, since it supports the RuntimeObject: http://msdn.microsoft.com/en-us/library/ff521039%28VS.85%29.aspx TODO: Remove this option.
     */
    static getGlobals (opt_prefix ? : string ) : Object [] ;
    /**
     * Initializes the given test case with the global test runner 'G_testRunner'.
     * @param testCase The test case to install.
     */
    static initializeTestRunner (testCase : ಠ_ಠ.clutz.goog.testing.TestCase | null ) : void ;
    /**
     * Calls {@link goog.testing.TestCase.prototype.invalidateAssertionException} on
     * the active test case if it is installed, and logs an error otherwise.
     * @param e The exception object to invalidate.
     */
    static invalidateAssertionException (e : ಠ_ಠ.clutz.goog.testing.JsUnitException ) : void ;
    /**
     * The maximum amount of time in milliseconds that the test case can take
     * before it is forced to yield and reschedule. This prevents the test runner
     * from blocking the browser and potentially hurting the test harness.
     */
    static maxRunTime : number ;
  }
  class TestCase_Instance {
    private noStructuralTyping_: any;
    /**
     * A class representing a JsUnit test case. A TestCase is made up of a number
     * of test functions which can be run. Individual test cases can override the
     * following functions to set up their test environment:
     * - runTests - completely override the test's runner
     * - setUpPage - called before any of the test functions are run
     * - tearDownPage - called after all tests are finished
     * - setUp - called before each of the test functions
     * - tearDown - called after each of the test functions
     * - shouldRunTests - called before a test run, all tests are skipped if it
     * returns false. Can be used to disable tests on browsers
     * where they aren't expected to pass.
     * <p>
     * TestCase objects are usually constructed by inspecting the global environment
     * to discover functions that begin with the prefix <code>test</code>.
     * (See {@link #autoDiscoverLifecycle} and {@link #autoDiscoverTests}.)
     * </p>
     *
     * <h2>Testing asychronous code with promises</h2>
     *
     * <p>
     * In the simplest cases, the behavior that the developer wants to test
     * is synchronous, and the test functions exercising the behavior execute
     * synchronously. But TestCase can also be used to exercise asynchronous code
     * through the use of <a
     * href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">
     * promises</a>. If a test function returns an object that has a
     * <code>then</code> method defined on it, the test framework switches to an
     * asynchronous execution strategy: the next test function will not begin
     * execution until the returned promise is resolved or rejected. Instead of
     * writing test assertions at the top level inside a test function, the test
     * author chains them on the end of the returned promise. For example:
     * </p>
     * <pre>
     * function testPromiseBasedAPI() {
     * return promiseBasedAPI().then(function(value) {
     * // Will run when the promise resolves, and before the next
     * // test function begins execution.
     * assertEquals('foo', value.bar);
     * });
     * }
     * </pre>
     * <p>
     * Synchronous and asynchronous tests can be mixed in the same TestCase.
     * Test functions that return an object with a <code>then</code> method are
     * executed asynchronously, and all other test functions are executed
     * synchronously. While this is convenient for test authors (since it doesn't
     * require any explicit configuration for asynchronous tests), it can lead to
     * confusion if the test author forgets to return the promise from the test
     * function. For example:
     * </p>
     * <pre>
     * function testPromiseBasedAPI() {
     * // This test should never succeed.
     * promiseBasedAPI().then(fail, fail);
     * // Oops! The promise isn't returned to the framework,
     * // so this test actually does succeed.
     * }
     * </pre>
     * <p>
     * Since the test framework knows nothing about the promise created
     * in the test function, it will run the function synchronously, record
     * a success, and proceed immediately to the next test function.
     * </p>
     * <p>
     * Promises returned from test functions can time out. If a returned promise
     * is not resolved or rejected within {@link promiseTimeout} milliseconds,
     * the test framework rejects the promise without a timeout error message.
     * Test cases can configure the value of {@code promiseTimeout} by setting
     * <pre>
     * goog.testing.TestCase.getActiveTestCase().promiseTimeout = ...
     * </pre>
     * in their {@code setUpPage} methods.
     * </p>
     * @param opt_name The name of the test case, defaults to 'Untitled Test Case'.
     */
    constructor (opt_name ? : string ) ;
    /**
     * Whether the test should fail if exceptions arising from an assert statement
     * never bubbled up to the testing framework.
     */
    failOnUnreportedAsserts : boolean ;
    /**
     * The order to run the auto-discovered tests in.
     */
    order : string ;
    /**
     * The maximum time in milliseconds a promise returned from a test function
     * may remain pending before the test fails due to timeout.
     */
    promiseTimeout : number ;
    /**
     * Object used to encapsulate the test results.
     */
    result_ : ಠ_ಠ.clutz.goog.testing.TestCase.Result ;
    /**
     * Adds a new test to the test case.
     * @param test The test to add.
     */
    add (test : ಠ_ಠ.clutz.goog.testing.TestCase.Test ) : void ;
    /**
     * Creates and adds a new test.
     *
     * Convenience function to make syntax less awkward when not using automatic
     * test discovery.
     * @param name The test name.
     * @param ref Reference to the test function.
     * @param opt_scope Optional scope that the test function should be called in.
     */
    addNewTest (name : string , ref : ( ...a : any [] ) => any , opt_scope ? : Object ) : void ;
    /**
     * Adds any functions defined on 'obj' (the global object, by default)
     * that correspond to lifecycle events for the test case. Overrides
     * setUp, tearDown, setUpPage, tearDownPage, runTests, and shouldRunTests
     * if they are defined on 'obj'.
     * @param opt_obj Defaults to goog.global.
     */
    autoDiscoverLifecycle (opt_obj ? : Object ) : void ;
    /**
     * Adds any functions defined in the global scope that are prefixed with "test"
     * to the test case.
     */
    autoDiscoverTests ( ) : void ;
    /**
     * Clears a timeout created by {@code this.timeout()}.
     * @param id A timeout id.
     */
    clearTimeout (id : number ) : void ;
    /**
     * Creates a {@code goog.testing.TestCase.Test} from an auto-discovered
     * function.
     * @param name The name of the function.
     * @param ref The auto-discovered function.
     */
    createTestFromAutoDiscoveredFunction (name : string , ref : ( ) => undefined ) : ಠ_ಠ.clutz.goog.testing.TestCase.Test ;
    /**
     * Cycles through the tests, yielding asynchronously if the execution time
     * exceeds {@link #maxRunTime}. In particular, there is no guarantee that
     * the test case has finished execution once this method has returned.
     * To be notified when the test case has finished execution, use
     * {@link #setCompletedCallback} or {@link #runTestsReturningPromise}.
     */
    cycleTests ( ) : void ;
    /**
     * Handles a test that failed.
     * @param test The test that failed.
     * @param opt_e The exception object associated with the failure or a string.
     */
    doError (test : ಠ_ಠ.clutz.goog.testing.TestCase.Test | null , opt_e ? : any ) : void ;
    /**
     * Handles a test that passed.
     * @param test The test that passed.
     */
    doSuccess (test : ಠ_ಠ.clutz.goog.testing.TestCase.Test | null ) : void ;
    /**
     * Exception object that was detected before a test runs.
     */
    exceptionBeforeTest : any ;
    /**
     * Executes the tests, yielding asynchronously if execution time exceeds
     * {@link maxRunTime}. There is no guarantee that the test case has finished
     * once this method has returned. To be notified when the test case
     * has finished, use {@link #setCompletedCallback} or
     * {@link #runTestsReturningPromise}.
     */
    execute ( ) : void ;
    /**
     * Finalizes the test case, called when the tests have finished executing.
     */
    finalize ( ) : void ;
    /**
     * Returns the number of tests actually run in the test case, i.e. subtracting
     * any which are skipped.
     */
    getActuallyRunCount ( ) : number ;
    getAutoDiscoveryPrefix ( ) : string ;
    getBatchTime ( ) : number ;
    /**
     * Returns the number of tests contained in the test case.
     */
    getCount ( ) : number ;
    /**
     * Gets list of objects that potentially contain test cases. For IE 8 and below,
     * this is the global "this" (for properties set directly on the global this or
     * window) and the RuntimeObject (for global variables and functions). For all
     * other browsers, the array simply contains the global this.
     * @param opt_prefix An optional prefix. If specified, only get things under this prefix. Note that the prefix is only honored in IE, since it supports the RuntimeObject: http://msdn.microsoft.com/en-us/library/ff521039%28VS.85%29.aspx TODO: Remove this option.
     */
    getGlobals (opt_prefix ? : string ) : Object [] ;
    getName ( ) : string ;
    /**
     * Returns the number of script files that were loaded in order to run the test.
     */
    getNumFilesLoaded ( ) : number ;
    /**
     * Returns a string detailing the results from the test.
     * @param opt_verbose If true results will include data about all tests, not just what failed.
     */
    getReport (opt_verbose ? : boolean ) : string ;
    /**
     * Returns the test results.
     */
    getResult ( ) : ಠ_ಠ.clutz.goog.testing.TestCase.Result ;
    /**
     * Returns the amount of time it took for the test to run.
     */
    getRunTime ( ) : number ;
    /**
     * Returns the test results object: a map from test names to a list of test
     * failures (if any exist).
     */
    getTestResults ( ) : { [ key: string ]: string [] } ;
    /**
     * Gets the tests.
     */
    getTests ( ) : ( ಠ_ಠ.clutz.goog.testing.TestCase.Test | null ) [] ;
    /**
     * Removes the specified exception from being tracked. This only needs to be
     * called for internal functions that intentionally catch an exception, such as
     * {@code #assertThrowsJsUnitException}.
     * @param e The exception object to invalidate.
     */
    invalidateAssertionException (e : ಠ_ಠ.clutz.goog.testing.JsUnitException ) : void ;
    isInsideMultiTestRunner ( ) : boolean ;
    isSuccess ( ) : boolean ;
    /**
     * Logs an object to the console, if available.
     * @param val The value to log. Will be ToString'd.
     */
    log (val : any ) : void ;
    logError (name : string , opt_e ? : any ) : ಠ_ಠ.clutz.goog.testing.TestCase.Error ;
    /**
     * Checks to see if the test should be marked as failed before it is run.
     *
     * If there was an error in setUpPage, we treat that as a failure for all tests
     * and mark them all as having failed.
     * @param testCase The current test case.
     */
    maybeFailTestEarly (testCase : ಠ_ಠ.clutz.goog.testing.TestCase.Test | null ) : boolean ;
    /**
     * Returns the current test and increments the pointer.
     */
    next ( ) : ಠ_ಠ.clutz.goog.testing.TestCase.Test | null ;
    now ( ) : number ;
    /**
     * Makes note of an exception arising from an assertion, and then throws it. If
     * the test otherwise passes (i.e., because something else caught the exception
     * on its way to the test framework), it will be forced to fail.
     * @param e The exception object being thrown.
     */
    raiseAssertionException (e : ಠ_ಠ.clutz.goog.testing.JsUnitException ) : void ;
    /**
     * Resets the test case pointer, so that next returns the first test.
     */
    reset ( ) : void ;
    /**
     * Executes each of the tests, yielding asynchronously if execution time
     * exceeds {@link #maxRunTime}. There is no guarantee that the test case
     * has finished execution once this method has returned.
     * To be notified when the test case has finished execution, use
     * {@link #setCompletedCallback} or {@link #runTestsReturningPromise}.
     *
     * Overridable by the individual test case.  This allows test cases to defer
     * when the test is actually started.  If overridden, finalize must be called
     * by the test to indicate it has finished.
     */
    runTests ( ) : void ;
    /**
     * Executes each of the tests, returning a promise that resolves with the
     * test results once they are done running.
     */
    runTestsReturningPromise ( ) : IThenable < ಠ_ಠ.clutz.goog.testing.TestCase.Result > ;
    /**
     * Whether the test case is running.
     */
    running : boolean ;
    /**
     * Saves a message to the result set.
     * @param message The message to save.
     */
    saveMessage (message : string ) : void ;
    setBatchTime (batchTime : number ) : void ;
    /**
     * Sets the callback function that should be executed when the tests have
     * completed.
     * @param fn The callback function.
     */
    setCompletedCallback (fn : ( ( ...a : any [] ) => any ) | null ) : void ;
    setOrder (order : ಠ_ಠ.clutz.goog.testing.TestCase.Order ) : void ;
    setTestObj (obj : Object ) : void ;
    /**
     * Sets the tests.
     * @param tests A new test array.
     */
    setTests (tests : ( ಠ_ಠ.clutz.goog.testing.TestCase.Test | null ) [] ) : void ;
    setTestsToRun (testsToRun : { [ key: string ]: boolean } | null ) : void ;
    /**
     * Gets called before every goog.testing.TestCase.Test is been executed. Can be
     * overridden to add set up functionality to each test.
     */
    setUp ( ) : { then : any } | undefined ;
    /**
     * Gets called before any tests are executed.  Can be overridden to set up the
     * environment for the whole test case.
     */
    setUpPage ( ) : void ;
    /**
     * Can be overridden in test classes to indicate whether the tests in a case
     * should be run in that particular situation.  For example, this could be used
     * to stop tests running in a particular browser, where browser support for
     * the class under test was absent.
     */
    shouldRunTests ( ) : boolean ;
    /**
     * Whether the test case has ever tried to execute.
     */
    started : boolean ;
    /**
     * Gets called after every goog.testing.TestCase.Test has been executed. Can be
     * overriden to add tear down functionality to each test.
     */
    tearDown ( ) : { then : any } | undefined ;
    /**
     * Gets called after all tests have been executed.  Can be overridden to tear
     * down the entire test case.
     */
    tearDownPage ( ) : void ;
    /**
     * Calls a function after a delay, using the protected timeout.
     * @param fn The function to call.
     * @param time Delay in milliseconds.
     */
    timeout (fn : ( ( ...a : any [] ) => any ) | null , time : number ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.TestCase'): typeof ಠ_ಠ.clutz.goog.testing.TestCase;
}
declare module 'goog:goog.testing.TestCase' {
  import alias = ಠ_ಠ.clutz.goog.testing.TestCase;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.TestCase {
  /**
   * A class representing an error thrown by the test
   */
  class Error extends Error_Instance {
  }
  class Error_Instance {
    private noStructuralTyping_: any;
    /**
     * A class representing an error thrown by the test
     * @param source The name of the test which threw the error.
     * @param message The error message.
     * @param opt_stack A string showing the execution stack.
     */
    constructor (source : string , message : string , opt_stack ? : string ) ;
    /**
     * Reference to the test function.
     */
    message : string ;
    /**
     * The name of the test which threw the error.
     */
    source : string ;
    /**
     * The stack.
     */
    stack : string | null ;
    /**
     * Returns a string representing the error object.
     */
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.TestCase.Error'): typeof ಠ_ಠ.clutz.goog.testing.TestCase.Error;
}
declare module 'goog:goog.testing.TestCase.Error' {
  import alias = ಠ_ಠ.clutz.goog.testing.TestCase.Error;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.TestCase {
  /**
   * The order to run the auto-discovered tests.
   */
  type Order = string ;
  var Order : {
    NATURAL : Order ,
    RANDOM : Order ,
    SORTED : Order ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.TestCase.Order'): typeof ಠ_ಠ.clutz.goog.testing.TestCase.Order;
}
declare module 'goog:goog.testing.TestCase.Order' {
  import alias = ಠ_ಠ.clutz.goog.testing.TestCase.Order;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.TestCase {
  /**
   * A class for representing test results.  A bag of public properties.
   */
  class Result extends Result_Instance {
  }
  class Result_Instance {
    private noStructuralTyping_: any;
    /**
     * A class for representing test results.  A bag of public properties.
     * @param testCase The test case that owns this result.
     */
    constructor (testCase : ಠ_ಠ.clutz.goog.testing.TestCase | null ) ;
    /**
     * Whether the tests have completed.
     */
    complete : boolean ;
    /**
     * Errors encountered while running the test.
     */
    errors : ( ಠ_ಠ.clutz.goog.testing.TestCase.Error | null ) [] ;
    /**
     * Messages to show the user after running the test.
     */
    messages : string [] ;
    /**
     * The number of files loaded to run this test.
     */
    numFilesLoaded : number ;
    /**
     * Test results for each test that was run. The test name is always added
     * as the key in the map, and the array of strings is an optional list
     * of failure messages. If the array is empty, the test passed. Otherwise,
     * the test failed.
     */
    resultsByName : { [ key: string ]: string [] } ;
    /**
     * Total number of tests that were actually run.
     */
    runCount : number ;
    /**
     * The amount of time the tests took to run.
     */
    runTime : number ;
    /**
     * Number of successful tests.
     */
    successCount : number ;
    /**
     * Whether this test case was suppressed by shouldRunTests() returning false.
     */
    testSuppressed : boolean ;
    /**
     * Total number of tests that should have been run.
     */
    totalCount : number ;
    getSummary ( ) : string ;
    isSuccess ( ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.TestCase.Result'): typeof ಠ_ಠ.clutz.goog.testing.TestCase.Result;
}
declare module 'goog:goog.testing.TestCase.Result' {
  import alias = ಠ_ಠ.clutz.goog.testing.TestCase.Result;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.TestCase {
  /**
   * A class representing a single test function.
   */
  class Test extends Test_Instance {
  }
  class Test_Instance {
    private noStructuralTyping_: any;
    /**
     * A class representing a single test function.
     * @param name The test name.
     * @param ref Reference to the test function.
     * @param opt_scope Optional scope that the test function should be called in.
     */
    constructor (name : string , ref : ( ( ...a : any [] ) => any ) | null , opt_scope ? : Object | null ) ;
    /**
     * The name of the test.
     */
    name : string ;
    /**
     * Reference to the test function.
     */
    ref : ( ( ...a : any [] ) => any ) | null ;
    /**
     * Scope that the test function should be called in.
     */
    scope : Object | null ;
    /**
     * Executes the test function.
     */
    execute ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.TestCase.Test'): typeof ಠ_ಠ.clutz.goog.testing.TestCase.Test;
}
declare module 'goog:goog.testing.TestCase.Test' {
  import alias = ಠ_ಠ.clutz.goog.testing.TestCase.Test;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Construct a test runner.
   *
   * NOTE(user): This is currently pretty weird, I'm essentially trying to
   * create a wrapper that the Selenium test can hook into to query the state of
   * the running test case, while making goog.testing.TestCase general.
   */
  class TestRunner extends TestRunner_Instance {
  }
  class TestRunner_Instance {
    private noStructuralTyping_: any;
    /**
     * Errors that occurred in the window.
     */
    errors : string [] ;
    /**
     * Whether the test runner has been initialized yet.
     */
    initialized : boolean ;
    /**
     * Reference to the active test case.
     */
    testCase : ಠ_ಠ.clutz.goog.testing.TestCase | null ;
    /**
     * Executes a test case and prints the results to the window.
     */
    execute ( ) : void ;
    /**
     * Returns the number of script files that were loaded in order to run the test.
     */
    getNumFilesLoaded ( ) : number ;
    /**
     * Returns a report of the test case that ran.
     * Used by Selenium Hooks.
     * @param opt_verbose If true results will include data about all tests, not just what failed.
     */
    getReport (opt_verbose ? : boolean ) : string ;
    /**
     * Returns the amount of time it took for the test to run.
     * Used by Selenium Hooks.
     */
    getRunTime ( ) : number ;
    getTestResults ( ) : { [ key: string ]: string [] } | null ;
    /**
     * Returns true if the test case runner has errors that were caught outside of
     * the test case.
     */
    hasErrors ( ) : boolean ;
    /**
     * Initializes the test runner.
     * @param testCase The test case to initialize with.
     */
    initialize (testCase : ಠ_ಠ.clutz.goog.testing.TestCase | null ) : void ;
    /**
     * Returns true if the test runner is finished.
     * Used by Selenium Hooks.
     */
    isFinished ( ) : boolean ;
    /**
     * Returns true if the test runner is initialized.
     * Used by Selenium Hooks.
     */
    isInitialized ( ) : boolean ;
    isStrict ( ) : boolean ;
    /**
     * Returns true if the test case didn't fail.
     * Used by Selenium Hooks.
     */
    isSuccess ( ) : boolean ;
    /**
     * Logs a message to the current test case.
     * @param s The text to output to the log.
     */
    log (s : string ) : void ;
    /**
     * Logs an error that occurred.  Used in the case of environment setting up
     * an onerror handler.
     * @param msg Error message.
     */
    logError (msg : string ) : void ;
    /**
     * Log failure in current running test.
     * @param ex Exception.
     */
    logTestFailure (ex : GlobalError | null ) : void ;
    /**
     * Sets a function to use as a filter for errors.
     * @param fn Filter function.
     */
    setErrorFilter (fn : (a : string ) => any ) : void ;
    /**
     * By default, the test runner is strict, and fails if it runs an empty
     * test case.
     * @param strict Whether the test runner should fail on an empty test case.
     */
    setStrict (strict : boolean ) : void ;
    /**
     * Writes a nicely formatted log out to the document.
     * @param log The string to write.
     */
    writeLog (log : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.TestRunner'): typeof ಠ_ಠ.clutz.goog.testing.TestRunner;
}
declare module 'goog:goog.testing.TestRunner' {
  import alias = ಠ_ಠ.clutz.goog.testing.TestRunner;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.asserts {
  /**
   * The return value of the equality predicate passed to findDifferences below,
   * in cases where the predicate can't test the input variables for equality.
   */
  var EQUALITY_PREDICATE_CANT_PROCESS : string | null ;
  /**
   * The return value of the equality predicate passed to findDifferences below,
   * in cases where the input vriables are equal.
   */
  var EQUALITY_PREDICATE_VARS_ARE_EQUAL : string | null ;
  /**
   * Runs a function in an environment where test failures are not logged. This is
   * useful for testing test code, where failures can be a normal part of a test.
   * @param fn Function to run without logging failures.
   */
  function callWithoutLogging (fn : ( ) => undefined ) : void ;
  /**
   * Determines if two items of any type match, and formulates an error message
   * if not.
   * @param expected Expected argument to match.
   * @param actual Argument as a result of performing the test.
   * @param opt_equalityPredicate An optional function that can be used to check equality of variables. It accepts 3 arguments: type-of-variables, var1, var2 (in that order) and returns an error message if the variables are not equal, goog.testing.asserts.EQUALITY_PREDICATE_VARS_ARE_EQUAL if the variables are equal, or goog.testing.asserts.EQUALITY_PREDICATE_CANT_PROCESS if the predicate couldn't check the input variables. The function will be called only if the types of var1 and var2 are identical.
   */
  function findDifferences (expected : any , actual : any , opt_equalityPredicate ? : (a : string , b : any , c : any ) => string | null ) : string | null ;
  /**
   * Raises a JsUnit exception with the given comment. If the exception is
   * unexpectedly caught during a unit test, it will be rethrown so that it is
   * seen by the test framework.
   * @param comment A summary for the exception.
   * @param opt_message A description of the exception.
   */
  function raiseException (comment : string , opt_message ? : string ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.asserts'): typeof ಠ_ಠ.clutz.goog.testing.asserts;
}
declare module 'goog:goog.testing.asserts' {
  import alias = ಠ_ಠ.clutz.goog.testing.asserts;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.events {
  /**
   * Simulate a blur event on the given target.
   * @param target The target for the event.
   */
  function fireBlurEvent (target : EventTarget | null ) : boolean ;
  /**
   * Simulates an event's capturing and bubbling phases.
   * @param event A simulated native event. It will be wrapped in a normalized BrowserEvent and dispatched to Closure listeners on all ancestors of its target (inclusive).
   */
  function fireBrowserEvent (event : GlobalEvent | null ) : boolean ;
  /**
   * Simulates a click event on the given target. IE only supports click with
   * the left mouse button.
   * @param target The target for the event.
   * @param opt_button Mouse button; defaults to {@code goog.events.BrowserEvent.MouseButton.LEFT}.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireClickEvent (target : EventTarget | null , opt_button ? : ಠ_ಠ.clutz.goog.events.BrowserEvent.MouseButton , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : Object | null ) : boolean ;
  /**
   * Simulates a mousedown, mouseup, and then click on the given event target,
   * with the left mouse button.
   * @param target The target for the event.
   * @param opt_button Mouse button; defaults to {@code goog.events.BrowserEvent.MouseButton.LEFT}.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireClickSequence (target : EventTarget | null , opt_button ? : ಠ_ಠ.clutz.goog.events.BrowserEvent.MouseButton , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : Object | null ) : boolean ;
  /**
   * Simulates a contextmenu event on the given target.
   * @param target The target for the event.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireContextMenuEvent (target : EventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : boolean ;
  /**
   * Simulates a mousedown, contextmenu, and the mouseup on the given event
   * target, with the right mouse button.
   * @param target The target for the event.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireContextMenuSequence (target : EventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : boolean ;
  /**
   * Simulates a double-click event on the given target. Always double-clicks
   * with the left mouse button since no browser supports double-clicking with
   * any other buttons.
   * @param target The target for the event.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireDoubleClickEvent (target : EventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : Object | null ) : boolean ;
  /**
   * Simulates the sequence of events fired by the browser when the user double-
   * clicks the given target.
   * @param target The target for the event.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireDoubleClickSequence (target : EventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : Object | null ) : boolean ;
  /**
   * Simulate a focus event on the given target.
   * @param target The target for the event.
   */
  function fireFocusEvent (target : EventTarget | null ) : boolean ;
  /**
   * Simulate a focus-in event on the given target.
   * @param target The target for the event.
   */
  function fireFocusInEvent (target : EventTarget ) : boolean ;
  /**
   * Simulates a complete keystroke (keydown, keypress, and keyup). Note that
   * if preventDefault is called on the keydown, the keypress will not fire.
   * @param target The target for the event.
   * @param keyCode The keycode of the key pressed.
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireKeySequence (target : EventTarget | null , keyCode : number , opt_eventProperties ? : Object | null ) : boolean ;
  /**
   * Simulates a mousedown event on the given target.
   * @param target The target for the event.
   * @param opt_button Mouse button; defaults to {@code goog.events.BrowserEvent.MouseButton.LEFT}.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireMouseDownEvent (target : EventTarget | null , opt_button ? : ಠ_ಠ.clutz.goog.events.BrowserEvent.MouseButton , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : Object | null ) : boolean ;
  /**
   * Simulates a mouseenter event on the given target.
   * @param target The target for the event.
   * @param relatedTarget The related target for the event (e.g., the node that the mouse is being moved out of).
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireMouseEnterEvent (target : EventTarget , relatedTarget : EventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate ) : boolean ;
  /**
   * Simulates a mouseleave event on the given target.
   * @param target The target for the event.
   * @param relatedTarget The related target for the event (e.g., the node that the mouse is being moved into).
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireMouseLeaveEvent (target : EventTarget , relatedTarget : EventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate ) : boolean ;
  /**
   * Simulates a mousemove event on the given target.
   * @param target The target for the event.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireMouseMoveEvent (target : EventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : boolean ;
  /**
   * Simulates a mouseout event on the given target.
   * @param target The target for the event.
   * @param relatedTarget The related target for the event (e.g., the node that the mouse is being moved into).
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireMouseOutEvent (target : EventTarget | null , relatedTarget : EventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : boolean ;
  /**
   * Simulates a mouseover event on the given target.
   * @param target The target for the event.
   * @param relatedTarget The related target for the event (e.g., the node that the mouse is being moved out of).
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireMouseOverEvent (target : EventTarget | null , relatedTarget : EventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : boolean ;
  /**
   * Simulates a mouseup event on the given target.
   * @param target The target for the event.
   * @param opt_button Mouse button; defaults to {@code goog.events.BrowserEvent.MouseButton.LEFT}.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireMouseUpEvent (target : EventTarget | null , opt_button ? : ಠ_ಠ.clutz.goog.events.BrowserEvent.MouseButton , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : Object | null ) : boolean ;
  /**
   * Simulates a complete keystroke (keydown, keypress, and keyup) when typing
   * a non-ASCII character. Same as fireKeySequence, the keypress will not fire
   * if preventDefault is called on the keydown.
   * @param target The target for the event.
   * @param keyCode The keycode of the keydown and keyup events.
   * @param keyPressKeyCode The keycode of the keypress event.
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireNonAsciiKeySequence (target : EventTarget | null , keyCode : number , keyPressKeyCode : number , opt_eventProperties ? : Object | null ) : boolean ;
  /**
   * Simulates a popstate event on the given target.
   * @param target The target for the event.
   * @param state History state object.
   */
  function firePopStateEvent (target : EventTarget | null , state : Object | null ) : boolean ;
  /**
   * Simulates a touchend event on the given target.
   * @param target The target for the event.
   * @param opt_coords Touch position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireTouchEndEvent (target : EventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : Object | null ) : boolean ;
  /**
   * Simulates a touchmove event on the given target.
   * @param target The target for the event.
   * @param opt_coords Touch position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireTouchMoveEvent (target : EventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : Object | null ) : boolean ;
  /**
   * Simulates a simple touch sequence on the given target.
   * @param target The target for the event.
   * @param opt_coords Touch position. Defaults to event target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireTouchSequence (target : EventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : Object | null ) : boolean ;
  /**
   * Simulates a touchstart event on the given target.
   * @param target The target for the event.
   * @param opt_coords Touch position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireTouchStartEvent (target : EventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : Object | null ) : boolean ;
  /**
   * Mixins a listenable into the given object. This turns the object
   * into a goog.events.Listenable. This is useful, for example, when
   * you need to mock a implementation of listenable and still want it
   * to work with goog.events.
   * @param obj The object to mixin into.
   */
  function mixinListenable (obj : Object ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.events'): typeof ಠ_ಠ.clutz.goog.testing.events;
}
declare module 'goog:goog.testing.events' {
  import alias = ಠ_ಠ.clutz.goog.testing.events;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.events {
  /**
   * goog.events.BrowserEvent expects an Event so we provide one for JSCompiler.
   *
   * This clones a lot of the functionality of goog.events.Event. This used to
   * use a mixin, but the mixin results in confusing the two types when compiled.
   */
  class Event extends Event_Instance {
  }
  class Event_Instance extends GlobalEvent {
    /**
     * goog.events.BrowserEvent expects an Event so we provide one for JSCompiler.
     *
     * This clones a lot of the functionality of goog.events.Event. This used to
     * use a mixin, but the mixin results in confusing the two types when compiled.
     * @param type Event Type.
     * @param opt_target Reference to the object that is the target of this event.
     */
    constructor (type : string , opt_target ? : Object | null ) ;
    button : number ;
    ctrlKey : boolean ;
    currentTarget : EventTarget | null ;
    defaultPrevented : boolean ;
    keyCode : number ;
    relatedTarget : EventTarget | null | undefined ;
    target : EventTarget | null ;
    type : string ;
    preventDefault ( ) : void ;
    /**
     * Whether to cancel the event in internal capture/bubble processing for IE.
     */
    propagationStopped_ : boolean ;
    /**
     * Return value for in internal capture/bubble processing for IE.
     */
    returnValue_ : boolean ;
    stopPropagation ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.events.Event'): typeof ಠ_ಠ.clutz.goog.testing.events.Event;
}
declare module 'goog:goog.testing.events.Event' {
  import alias = ಠ_ಠ.clutz.goog.testing.events.Event;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.jsunit {
  var AUTO_RUN_DELAY_IN_MS : number ;
  var AUTO_RUN_ONLOAD : boolean ;
  /**
   * Base path for JsUnit app files, relative to Closure's base path.
   */
  var BASE_PATH : string ;
  /**
   * Filename for the core JS Unit script.
   */
  var CORE_SCRIPT : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.jsunit'): typeof ಠ_ಠ.clutz.goog.testing.jsunit;
}
declare module 'goog:goog.testing.jsunit' {
  import alias = ಠ_ಠ.clutz.goog.testing.jsunit;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A function that checks to see if an array matches a given set of
   * expectations.  The expectations array can be a mix of ArgumentMatcher
   * implementations and values.  True will be returned if values are identical or
   * if a matcher returns a positive result.
   * @param expectedArr An array of expectations which can be either values to check for equality or ArgumentMatchers.
   * @param arr The array to match.
   * @param opt_expectation The expectation for this match.
   */
  function flexibleArrayMatcher (expectedArr : any [] | null , arr : any [] | null , opt_expectation ? : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) : boolean ;
  /**
   * An instance of the IgnoreArgument matcher. Returns true for all matches.
   */
  var ignoreArgument : ಠ_ಠ.clutz.goog.testing.mockmatchers.IgnoreArgument | null ;
  /**
   * A matcher that verifies that an argument is an array.
   */
  var isArray : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher | null ;
  /**
   * A matcher that verifies that an argument is a array-like.  A NodeList is an
   * example of a collection that is very close to an array.
   */
  var isArrayLike : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher | null ;
  /**
   * A matcher that verifies that an argument is a boolean.
   */
  var isBoolean : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher | null ;
  /**
   * A matcher that verifies that an argument is a date-like.
   */
  var isDateLike : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher | null ;
  /**
   * A matcher that verifies that an argument is a function.
   */
  var isFunction : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher | null ;
  /**
   * A matcher that verifies that an argument is like a DOM node.
   */
  var isNodeLike : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher | null ;
  /**
   * A matcher that verifies that an argument is a number.
   */
  var isNumber : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher | null ;
  /**
   * A matcher that verifies that an argument is an object.
   */
  var isObject : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher | null ;
  /**
   * A matcher that verifies that an argument is a string.
   */
  var isString : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher | null ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.mockmatchers'): typeof ಠ_ಠ.clutz.goog.testing.mockmatchers;
}
declare module 'goog:goog.testing.mockmatchers' {
  import alias = ಠ_ಠ.clutz.goog.testing.mockmatchers;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A simple interface for executing argument matching.  A match in this case is
   * testing to see if a supplied object fits a given criteria.  True is returned
   * if the given criteria is met.
   */
  class ArgumentMatcher extends ArgumentMatcher_Instance {
  }
  class ArgumentMatcher_Instance {
    private noStructuralTyping_: any;
    /**
     * A simple interface for executing argument matching.  A match in this case is
     * testing to see if a supplied object fits a given criteria.  True is returned
     * if the given criteria is met.
     * @param opt_matchFn A function that evaluates a given argument and returns true if it meets a given criteria.
     * @param opt_matchName The name expressing intent as part of an error message for when a match fails.
     */
    constructor (opt_matchFn ? : ( ( ...a : any [] ) => any ) | null , opt_matchName ? : string | null ) ;
    /**
     * A function that takes a match argument and an optional MockExpectation
     * which (if provided) will get error information and returns whether or
     * not it matches.
     * @param toVerify The argument that should be verified.
     * @param opt_expectation The expectation for this match.
     */
    matches (toVerify : any , opt_expectation ? : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.mockmatchers.ArgumentMatcher'): typeof ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher;
}
declare module 'goog:goog.testing.mockmatchers.ArgumentMatcher' {
  import alias = ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A matcher that always returns true. It is useful when the user does not care
   * for some arguments.
   * For example: mockFunction('username', 'password', IgnoreArgument);
   */
  class IgnoreArgument extends IgnoreArgument_Instance {
  }
  class IgnoreArgument_Instance extends ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher_Instance {
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.mockmatchers.IgnoreArgument'): typeof ಠ_ಠ.clutz.goog.testing.mockmatchers.IgnoreArgument;
}
declare module 'goog:goog.testing.mockmatchers.IgnoreArgument' {
  import alias = ಠ_ಠ.clutz.goog.testing.mockmatchers.IgnoreArgument;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A matcher that verifies that an argument is an instance of a given class.
   */
  class InstanceOf extends InstanceOf_Instance {
  }
  class InstanceOf_Instance extends ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher_Instance {
    /**
     * A matcher that verifies that an argument is an instance of a given class.
     * @param ctor The class that will be used for verification.
     */
    constructor (ctor : ( ( ...a : any [] ) => any ) | null ) ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.mockmatchers.InstanceOf'): typeof ಠ_ಠ.clutz.goog.testing.mockmatchers.InstanceOf;
}
declare module 'goog:goog.testing.mockmatchers.InstanceOf' {
  import alias = ಠ_ಠ.clutz.goog.testing.mockmatchers.InstanceOf;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A matcher that verifies that the argument is an object that equals the given
   * expected object, using a deep comparison.
   */
  class ObjectEquals extends ObjectEquals_Instance {
  }
  class ObjectEquals_Instance extends ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher_Instance {
    /**
     * A matcher that verifies that the argument is an object that equals the given
     * expected object, using a deep comparison.
     * @param expectedObject An object to match against when verifying the argument.
     */
    constructor (expectedObject : Object | null ) ;
    matches (toVerify : any , opt_expectation ? : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.mockmatchers.ObjectEquals'): typeof ಠ_ಠ.clutz.goog.testing.mockmatchers.ObjectEquals;
}
declare module 'goog:goog.testing.mockmatchers.ObjectEquals' {
  import alias = ಠ_ಠ.clutz.goog.testing.mockmatchers.ObjectEquals;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A matcher that verifies that an argument matches a given RegExp.
   */
  class RegexpMatch extends RegexpMatch_Instance {
  }
  class RegexpMatch_Instance extends ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher_Instance {
    /**
     * A matcher that verifies that an argument matches a given RegExp.
     * @param regexp The regular expression that the argument must match.
     */
    constructor (regexp : RegExp | null ) ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.mockmatchers.RegexpMatch'): typeof ಠ_ಠ.clutz.goog.testing.mockmatchers.RegexpMatch;
}
declare module 'goog:goog.testing.mockmatchers.RegexpMatch' {
  import alias = ಠ_ಠ.clutz.goog.testing.mockmatchers.RegexpMatch;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A matcher that saves the argument that it is verifying so that your unit test
   * can perform extra tests with this argument later.  For example, if the
   * argument is a callback method, the unit test can then later call this
   * callback to test the asynchronous portion of the call.
   */
  class SaveArgument extends SaveArgument_Instance {
  }
  class SaveArgument_Instance extends ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher_Instance {
    /**
     * A matcher that saves the argument that it is verifying so that your unit test
     * can perform extra tests with this argument later.  For example, if the
     * argument is a callback method, the unit test can then later call this
     * callback to test the asynchronous portion of the call.
     * @param opt_matcher Argument matcher or matching function that will be used to validate the argument.  By default, argument will always be valid.
     * @param opt_matchName The name expressing intent as part of an error message for when a match fails.
     */
    constructor (opt_matcher ? : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher | null | ( ( ...a : any [] ) => any ) , opt_matchName ? : string | null ) ;
    /**
     * Saved argument that was verified.
     */
    arg : any ;
    matches (toVerify : any , opt_expectation ? : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.mockmatchers.SaveArgument'): typeof ಠ_ಠ.clutz.goog.testing.mockmatchers.SaveArgument;
}
declare module 'goog:goog.testing.mockmatchers.SaveArgument' {
  import alias = ಠ_ಠ.clutz.goog.testing.mockmatchers.SaveArgument;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A matcher that verifies that an argument is of a given type (e.g. "object").
   */
  class TypeOf extends TypeOf_Instance {
  }
  class TypeOf_Instance extends ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher_Instance {
    /**
     * A matcher that verifies that an argument is of a given type (e.g. "object").
     * @param type The type that a given argument must have.
     */
    constructor (type : string ) ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.mockmatchers.TypeOf'): typeof ಠ_ಠ.clutz.goog.testing.mockmatchers.TypeOf;
}
declare module 'goog:goog.testing.mockmatchers.TypeOf' {
  import alias = ಠ_ಠ.clutz.goog.testing.mockmatchers.TypeOf;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.stacktrace {
  /**
   * Brings the stack trace into a common format across browsers.
   * @param stack Browser-specific stack trace.
   */
  function canonicalize (stack : string ) : string ;
  /**
   * Gets the native stack trace if available otherwise follows the call chain.
   */
  function get ( ) : string ;
  /**
   * Sets function to deobfuscate function names.
   * @param fn function to deobfuscate function names.
   */
  function setDeobfuscateFunctionName (fn : (a : string ) => string ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.stacktrace'): typeof ಠ_ಠ.clutz.goog.testing.stacktrace;
}
declare module 'goog:goog.testing.stacktrace' {
  import alias = ಠ_ಠ.clutz.goog.testing.stacktrace;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.testing.stacktrace {
  /**
   * Class representing one stack frame.
   */
  class Frame extends Frame_Instance {
  }
  class Frame_Instance {
    private noStructuralTyping_: any;
    /**
     * Class representing one stack frame.
     * @param context Context object, empty in case of global functions or if the browser doesn't provide this information.
     * @param name Function name, empty in case of anonymous functions.
     * @param alias Alias of the function if available. For example the function name will be 'c' and the alias will be 'b' if the function is defined as <code>a.b = function c() {};</code>.
     * @param path File path or URL including line number and optionally column number separated by colons.
     */
    constructor (context : string , name : string , alias : string , path : string ) ;
    alias_ : string ;
    context_ : string ;
    name_ : string ;
    path_ : string ;
    getName ( ) : string ;
    isAnonymous ( ) : boolean ;
    /**
     * Brings one frame of the stack trace into a common format across browsers.
     */
    toCanonicalString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.testing.stacktrace.Frame'): typeof ಠ_ಠ.clutz.goog.testing.stacktrace.Frame;
}
declare module 'goog:goog.testing.stacktrace.Frame' {
  import alias = ಠ_ಠ.clutz.goog.testing.stacktrace.Frame;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * A button control, rendered as a native browser button by default.
   */
  class Button extends Button_Instance {
  }
  class Button_Instance extends ಠ_ಠ.clutz.goog.ui.Control_Instance {
    /**
     * A button control, rendered as a native browser button by default.
     * @param opt_content Text caption or existing DOM structure to display as the button's caption (if any).
     * @param opt_renderer Renderer used to render or decorate the button; defaults to {@link goog.ui.NativeButtonRenderer}.
     * @param opt_domHelper Optional DOM helper, used for document interaction.
     */
    constructor (opt_content ? : string | Node | null | Node [] | NodeList < Node > , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.ButtonRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    /**
     * Returns the tooltip for the button.
     */
    getTooltip ( ) : string | undefined ;
    /**
     * Returns the value associated with the button.
     */
    getValue ( ) : any ;
    /**
     * Attempts to handle a keyboard event; returns true if the event was handled,
     * false otherwise.  If the button is enabled and the Enter/Space key was
     * pressed, handles the event by dispatching an {@code ACTION} event,
     * and returns true. Overrides {@link goog.ui.Control#handleKeyEventInternal}.
     * @param e Key event to handle.
     */
    handleKeyEventInternal (e : ಠ_ಠ.clutz.goog.events.KeyEvent | null ) : boolean ;
    /**
     * Collapses the border on one or both sides of the button, allowing it to be
     * combined with the adjancent button(s), forming a single UI componenet with
     * multiple targets.
     * @param sides Bitmap of one or more {@link goog.ui.ButtonSide}s for which borders should be collapsed.
     */
    setCollapsed (sides : number ) : void ;
    /**
     * Sets the tooltip for the button, and updates its DOM.
     * @param tooltip New tooltip text.
     */
    setTooltip (tooltip : string ) : void ;
    /**
     * Sets the tooltip for the button.  Unlike {@link #setTooltip}, doesn't update
     * the button's DOM.  Considered protected; to be called only by renderer code
     * during element decoration.
     * @param tooltip New tooltip text.
     */
    setTooltipInternal (tooltip : string ) : void ;
    /**
     * Sets the value associated with the button, and updates its DOM.
     * @param value New button value.
     */
    setValue (value : any ) : void ;
    /**
     * Sets the value associated with the button.  Unlike {@link #setValue},
     * doesn't update the button's DOM.  Considered protected; to be called only
     * by renderer code during element decoration.
     * @param value New button value.
     */
    setValueInternal (value : any ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Button'): typeof ಠ_ಠ.clutz.goog.ui.Button;
}
declare module 'goog:goog.ui.Button' {
  import alias = ಠ_ಠ.clutz.goog.ui.Button;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Button {
  /**
   * Constants for button sides, see {@link goog.ui.Button.prototype.setCollapsed}
   * for details. Aliased from goog.ui.ButtonSide to support legacy users without
   * creating a circular dependency in {@link goog.ui.ButtonRenderer}.
   */
  type Side = number ;
  var Side : {
    BOTH : Side ,
    END : Side ,
    NONE : Side ,
    START : Side ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Button.Side'): typeof ಠ_ಠ.clutz.goog.ui.Button.Side;
}
declare module 'goog:goog.ui.Button.Side' {
  import alias = ಠ_ಠ.clutz.goog.ui.Button.Side;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Default renderer for {@link goog.ui.Button}s.  Extends the superclass with
   * the following button-specific API methods:
   * <ul>
   * <li>{@code getValue} - returns the button element's value
   * <li>{@code setValue} - updates the button element to reflect its new value
   * <li>{@code getTooltip} - returns the button element's tooltip text
   * <li>{@code setTooltip} - updates the button element's tooltip text
   * <li>{@code setCollapsed} - removes one or both of the button element's
   * borders
   * </ul>
   * For alternate renderers, see {@link goog.ui.NativeButtonRenderer},
   * {@link goog.ui.CustomButtonRenderer}, and {@link goog.ui.FlatButtonRenderer}.
   */
  class ButtonRenderer extends ButtonRenderer_Instance {
    /**
     * Default CSS class to be applied to the root element of components rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.ButtonRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.ButtonRenderer ;
  }
  class ButtonRenderer_Instance extends ಠ_ಠ.clutz.goog.ui.ControlRenderer_Instance {
    createDom (button : ಠ_ಠ.clutz.goog.ui.Control | null ) : Element | null ;
    decorate (button : ಠ_ಠ.clutz.goog.ui.Control | null , element : Element | null ) : Element | null ;
    /**
     * Returns the ARIA role to be applied to buttons.
     */
    getAriaRole ( ) : ಠ_ಠ.clutz.goog.a11y.aria.Role | undefined ;
    getCssClass ( ) : string ;
    /**
     * Takes a button's root element, and returns its tooltip text.
     * @param element The button's root element.
     */
    getTooltip (element : Element | null ) : string | undefined ;
    /**
     * Takes a button's root element, and returns the value associated with it.
     * No-op in the base class.
     * @param element The button's root element.
     */
    getValue (a : Element | null ) : string | undefined ;
    /**
     * Collapses the border on one or both sides of the button, allowing it to be
     * combined with the adjacent button(s), forming a single UI componenet with
     * multiple targets.
     * @param button Button to update.
     * @param sides Bitmap of one or more {@link goog.ui.ButtonSide}s for which borders should be collapsed.
     */
    setCollapsed (button : ಠ_ಠ.clutz.goog.ui.Button | null , sides : number ) : void ;
    /**
     * Takes a button's root element and a tooltip string, and updates the element
     * with the new tooltip.
     * @param element The button's root element.
     * @param tooltip New tooltip text.
     */
    setTooltip (element : Element | null , tooltip : string ) : void ;
    /**
     * Takes a button's root element and a value, and updates the element to reflect
     * the new value.  No-op in the base class.
     * @param element The button's root element.
     * @param value New value.
     */
    setValue (a : Element | null , b : string ) : any ;
    /**
     * Updates the button's ARIA (accessibility) state if the button is being
     * treated as a checkbox. Also makes sure that attributes which aren't
     * supported by buttons aren't being added.
     * @param element Element whose ARIA state is to be updated.
     * @param state Component state being enabled or disabled.
     * @param enable Whether the state is being enabled or disabled.
     */
    updateAriaState (element : Element | null , state : ಠ_ಠ.clutz.goog.ui.Component.State , enable : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.ButtonRenderer'): typeof ಠ_ಠ.clutz.goog.ui.ButtonRenderer;
}
declare module 'goog:goog.ui.ButtonRenderer' {
  import alias = ಠ_ಠ.clutz.goog.ui.ButtonRenderer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Constants for button sides, see {@link goog.ui.Button.prototype.setCollapsed}
   * for details.
   */
  type ButtonSide = number ;
  var ButtonSide : {
    BOTH : ButtonSide ,
    END : ButtonSide ,
    NONE : ButtonSide ,
    START : ButtonSide ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.ButtonSide'): typeof ಠ_ಠ.clutz.goog.ui.ButtonSide;
}
declare module 'goog:goog.ui.ButtonSide' {
  import alias = ಠ_ಠ.clutz.goog.ui.ButtonSide;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Default implementation of UI component.
   */
  class Component extends Component_Instance {
    static ALLOW_DETACHED_DECORATION : boolean ;
    static DEFAULT_BIDI_DIR : number ;
    /**
     * Static helper method; returns the type of event components are expected to
     * dispatch when transitioning to or from the given state.
     * @param state State to/from which the component is transitioning.
     * @param isEntering Whether the component is entering or leaving the state.
     */
    static getStateTransitionEvent (state : ಠ_ಠ.clutz.goog.ui.Component.State , isEntering : boolean ) : ಠ_ಠ.clutz.goog.ui.Component.EventType ;
    /**
     * Set the default right-to-left value. This causes all component's created from
     * this point forward to have the given value. This is useful for cases where
     * a given page is always in one directionality, avoiding unnecessary
     * right to left determinations.
     * @param rightToLeft Whether the components should be rendered right-to-left. Null iff components should determine their directionality.
     */
    static setDefaultRightToLeft (rightToLeft : boolean | null ) : void ;
  }
  class Component_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Default implementation of UI component.
     * @param opt_domHelper Optional DOM helper.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * DomHelper used to interact with the document, allowing components to be
     * created in a different window.
     */
    dom_ : ಠ_ಠ.clutz.goog.dom.DomHelper ;
    /**
     * Adds the specified component as the last child of this component.  See
     * {@link goog.ui.Component#addChildAt} for detailed semantics.
     * @param child The new child component.
     * @param opt_render If true, the child component will be rendered into the parent.
     */
    addChild (child : ಠ_ಠ.clutz.goog.ui.Component | null , opt_render ? : boolean ) : void ;
    /**
     * Adds the specified component as a child of this component at the given
     * 0-based index.
     *
     * Both {@code addChild} and {@code addChildAt} assume the following contract
     * between parent and child components:
     * <ul>
     * <li>the child component's element must be a descendant of the parent
     * component's element, and
     * <li>the DOM state of the child component must be consistent with the DOM
     * state of the parent component (see {@code isInDocument}) in the
     * steady state -- the exception is to addChildAt(child, i, false) and
     * then immediately decorate/render the child.
     * </ul>
     *
     * In particular, {@code parent.addChild(child)} will throw an error if the
     * child component is already in the document, but the parent isn't.
     *
     * Clients of this API may call {@code addChild} and {@code addChildAt} with
     * {@code opt_render} set to true.  If {@code opt_render} is true, calling these
     * methods will automatically render the child component's element into the
     * parent component's element. If the parent does not yet have an element, then
     * {@code createDom} will automatically be invoked on the parent before
     * rendering the child.
     *
     * Invoking {@code parent.addChild(child, true)} will throw an error if the
     * child component is already in the document, regardless of the parent's DOM
     * state.
     *
     * If {@code opt_render} is true and the parent component is not already
     * in the document, {@code enterDocument} will not be called on this component
     * at this point.
     *
     * Finally, this method also throws an error if the new child already has a
     * different parent, or the given index is out of bounds.
     * @param child The new child component.
     * @param index 0-based index at which the new child component is to be added; must be between 0 and the current child count (inclusive).
     * @param opt_render If true, the child component will be rendered into the parent.
     */
    addChildAt (child : ಠ_ಠ.clutz.goog.ui.Component | null , index : number , opt_render ? : boolean ) : void ;
    /**
     * Determines if a given element can be decorated by this type of component.
     * This method should be overridden by inheriting objects.
     * @param element Element to decorate.
     */
    canDecorate (element : Element | null ) : boolean ;
    /**
     * Creates the initial DOM representation for the component.  The default
     * implementation is to set this.element_ = div.
     */
    createDom ( ) : void ;
    /**
     * Decorates the element for the UI component. If the element is in the
     * document, the enterDocument method will be called.
     *
     * If goog.ui.Component.ALLOW_DETACHED_DECORATION is false, the caller must
     * pass an element that is in the document.
     * @param element Element to decorate.
     */
    decorate (element : Element | null ) : void ;
    /**
     * Actually decorates the element. Should be overridden by inheriting objects.
     * This method can assume there are checks to ensure the component has not
     * already been rendered have occurred and that enter document will be called
     * afterwards. This method is considered protected.
     * @param element Element to decorate.
     */
    decorateInternal (element : Element | null ) : void ;
    /**
     * Disposes of the component.  Calls {@code exitDocument}, which is expected to
     * remove event handlers and clean up the component.  Propagates the call to
     * the component's children, if any. Removes the component's DOM from the
     * document unless it was decorated.
     */
    disposeInternal ( ) : void ;
    /**
     * Called when the component's element is known to be in the document. Anything
     * using document.getElementById etc. should be done at this stage.
     *
     * If the component contains child components, this call is propagated to its
     * children.
     */
    enterDocument ( ) : void ;
    /**
     * Called by dispose to clean up the elements and listeners created by a
     * component, or by a parent component/application who has removed the
     * component from the document but wants to reuse it later.
     *
     * If the component contains child components, this call is propagated to its
     * children.
     *
     * It should be possible for the component to be rendered again once this method
     * has been called.
     */
    exitDocument ( ) : void ;
    /**
     * Calls the given function on each of this component's children in order.  If
     * {@code opt_obj} is provided, it will be used as the 'this' object in the
     * function when called.  The function should take two arguments:  the child
     * component and its 0-based index.  The return value is ignored.
     * @param f The function to call for every child component; should take 2 arguments (the child and its index).
     * @param opt_obj Used as the 'this' object in f when called.
     */
    forEachChild < T > (f : (a : any , b : number ) => any , opt_obj ? : T ) : void ;
    /**
     * Returns the child with the given ID, or null if no such child exists.
     * @param id Child component ID.
     */
    getChild (id : string ) : ಠ_ಠ.clutz.goog.ui.Component | null ;
    /**
     * Returns the child at the given index, or null if the index is out of bounds.
     * @param index 0-based index.
     */
    getChildAt (index : number ) : ಠ_ಠ.clutz.goog.ui.Component | null ;
    /**
     * Returns the number of children of this component.
     */
    getChildCount ( ) : number ;
    /**
     * Returns an array containing the IDs of the children of this component, or an
     * empty array if the component has no children.
     */
    getChildIds ( ) : string [] ;
    /**
     * Returns the DOM element into which child components are to be rendered,
     * or null if the component itself hasn't been rendered yet.  This default
     * implementation returns the component's root element.  Subclasses with
     * complex DOM structures must override this method.
     */
    getContentElement ( ) : Element | null ;
    /**
     * Returns the dom helper that is being used on this component.
     */
    getDomHelper ( ) : ಠ_ಠ.clutz.goog.dom.DomHelper ;
    /**
     * Gets the component's element.
     */
    getElement ( ) : Element | null ;
    /**
     * Returns the first element in this component's DOM with the provided
     * className.
     * @param className The name of the class to look for.
     */
    getElementByClass (className : string ) : Element | null ;
    /**
     * Helper function for returning an element in the document with a unique id
     * generated using makeId().
     * @param idFragment The partial id.
     */
    getElementByFragment (idFragment : string ) : Element | null ;
    /**
     * Gets the component's element. This differs from getElement in that
     * it assumes that the element exists (i.e. the component has been
     * rendered/decorated) and will cause an assertion error otherwise (if
     * assertion is enabled).
     */
    getElementStrict ( ) : Element ;
    /**
     * Returns an array of all the elements in this component's DOM with the
     * provided className.
     * @param className The name of the class to look for.
     */
    getElementsByClass (className : string ) : IArrayLike < Element > ;
    /**
     * Helper function for returning the fragment portion of an id generated using
     * makeId().
     * @param id Id generated with makeId().
     */
    getFragmentFromId (id : string ) : string ;
    /**
     * Returns the event handler for this component, lazily created the first time
     * this method is called.
     */
    getHandler < T > ( ) : ಠ_ಠ.clutz.goog.events.EventHandler < T > ;
    /**
     * Gets the unique ID for the instance of this component.  If the instance
     * doesn't already have an ID, generates one on the fly.
     */
    getId ( ) : string ;
    /**
     * Returns the model associated with the UI component.
     */
    getModel ( ) : any ;
    /**
     * Returns the component's parent, if any.
     */
    getParent ( ) : ಠ_ಠ.clutz.goog.ui.Component | null ;
    /**
     * Similar to {@code getElementByClass} except that it expects the
     * element to be present in the dom thus returning a required value. Otherwise,
     * will assert.
     * @param className The name of the class to look for.
     */
    getRequiredElementByClass (className : string ) : Element ;
    /**
     * Returns true if the component has children.
     */
    hasChildren ( ) : boolean ;
    /**
     * Returns the 0-based index of the given child component, or -1 if no such
     * child is found.
     * @param child The child component.
     */
    indexOfChild (child : ಠ_ಠ.clutz.goog.ui.Component | null ) : number ;
    /**
     * Determines whether the component has been added to the document.
     */
    isInDocument ( ) : boolean ;
    /**
     * Returns true if the component is rendered right-to-left, false otherwise.
     * The first time this function is invoked, the right-to-left rendering property
     * is set if it has not been already.
     */
    isRightToLeft ( ) : boolean ;
    /**
     * Helper function for subclasses that gets a unique id for a given fragment,
     * this can be used by components to generate unique string ids for DOM
     * elements.
     * @param idFragment A partial id.
     */
    makeId (idFragment : string ) : string ;
    /**
     * Makes a collection of ids.  This is a convenience method for makeId.  The
     * object's values are the id fragments and the new values are the generated
     * ids.  The key will remain the same.
     * @param object The object that will be used to create the ids.
     */
    makeIds (object : Object | null ) : Object ;
    /**
     * Removes the given child from this component, and returns it.  Throws an error
     * if the argument is invalid or if the specified child isn't found in the
     * parent component.  The argument can either be a string (interpreted as the
     * ID of the child component to remove) or the child component itself.
     *
     * If {@code opt_unrender} is true, calls {@link goog.ui.component#exitDocument}
     * on the removed child, and subsequently detaches the child's DOM from the
     * document.  Otherwise it is the caller's responsibility to clean up the child
     * component's DOM.
     * @param child The ID of the child to remove, or the child component itself.
     * @param opt_unrender If true, calls {@code exitDocument} on the removed child component, and detaches its DOM from the document.
     */
    removeChild (child : string | ಠ_ಠ.clutz.goog.ui.Component | null , opt_unrender ? : boolean ) : ಠ_ಠ.clutz.goog.ui.Component | null ;
    /**
     * Removes the child at the given index from this component, and returns it.
     * Throws an error if the argument is out of bounds, or if the specified child
     * isn't found in the parent.  See {@link goog.ui.Component#removeChild} for
     * detailed semantics.
     * @param index 0-based index of the child to remove.
     * @param opt_unrender If true, calls {@code exitDocument} on the removed child component, and detaches its DOM from the document.
     */
    removeChildAt (index : number , opt_unrender ? : boolean ) : ಠ_ಠ.clutz.goog.ui.Component | null ;
    /**
     * Removes every child component attached to this one and returns them.
     * @param opt_unrender If true, calls {@link #exitDocument} on the removed child components, and detaches their DOM from the document.
     */
    removeChildren (opt_unrender ? : boolean ) : ( ಠ_ಠ.clutz.goog.ui.Component | null ) [] ;
    /**
     * Renders the component.  If a parent element is supplied, the component's
     * element will be appended to it.  If there is no optional parent element and
     * the element doesn't have a parentNode then it will be appended to the
     * document body.
     *
     * If this component has a parent component, and the parent component is
     * not in the document already, then this will not call {@code enterDocument}
     * on this component.
     *
     * Throws an Error if the component is already rendered.
     * @param opt_parentElement Optional parent element to render the component into.
     */
    render (opt_parentElement ? : Element | null ) : void ;
    /**
     * Renders the component before another element. The other element should be in
     * the document already.
     *
     * Throws an Error if the component is already rendered.
     * @param sibling Node to render the component before.
     */
    renderBefore (sibling : Node | null ) : void ;
    /**
     * Sets the component's root element to the given element.  Considered
     * protected and final.
     *
     * This should generally only be called during createDom. Setting the element
     * does not actually change which element is rendered, only the element that is
     * associated with this UI component.
     *
     * This should only be used by subclasses and its associated renderers.
     * @param element Root element for the component.
     */
    setElementInternal (element : Element | null ) : void ;
    /**
     * Assigns an ID to this component instance.  It is the caller's responsibility
     * to guarantee that the ID is unique.  If the component is a child of a parent
     * component, then the parent component's child index is updated to reflect the
     * new ID; this may throw an error if the parent already has a child with an ID
     * that conflicts with the new ID.
     * @param id Unique component ID.
     */
    setId (id : string ) : void ;
    /**
     * Sets the model associated with the UI component.
     * @param obj The model.
     */
    setModel (obj : any ) : void ;
    /**
     * Sets the parent of this component to use for event bubbling.  Throws an error
     * if the component already has a parent or if an attempt is made to add a
     * component to itself as a child.  Callers must use {@code removeChild}
     * or {@code removeChildAt} to remove components from their containers before
     * calling this method.
     * @param parent The parent component.
     */
    setParent (parent : ಠ_ಠ.clutz.goog.ui.Component | null ) : void ;
    /**
     * Overrides {@link goog.events.EventTarget#setParentEventTarget} to throw an
     * error if the parent component is set, and the argument is not the parent.
     */
    setParentEventTarget (parent : ಠ_ಠ.clutz.goog.events.EventTarget | null ) : void ;
    /**
     * Set is right-to-left. This function should be used if the component needs
     * to know the rendering direction during dom creation (i.e. before
     * {@link #enterDocument} is called and is right-to-left is set).
     * @param rightToLeft Whether the component is rendered right-to-left.
     */
    setRightToLeft (rightToLeft : boolean ) : void ;
    wasDecorated ( ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Component'): typeof ಠ_ಠ.clutz.goog.ui.Component;
}
declare module 'goog:goog.ui.Component' {
  import alias = ಠ_ಠ.clutz.goog.ui.Component;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Component {
  /**
   * Errors thrown by the component.
   */
  type Error = string ;
  var Error : {
    ALREADY_RENDERED : Error ,
    CHILD_INDEX_OUT_OF_BOUNDS : Error ,
    DECORATE_INVALID : Error ,
    NOT_IN_DOCUMENT : Error ,
    NOT_OUR_CHILD : Error ,
    NOT_SUPPORTED : Error ,
    PARENT_UNABLE_TO_BE_SET : Error ,
    STATE_INVALID : Error ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Component.Error'): typeof ಠ_ಠ.clutz.goog.ui.Component.Error;
}
declare module 'goog:goog.ui.Component.Error' {
  import alias = ಠ_ಠ.clutz.goog.ui.Component.Error;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Component {
  /**
   * Common events fired by components so that event propagation is useful.  Not
   * all components are expected to dispatch or listen for all event types.
   * Events dispatched before a state transition should be cancelable to prevent
   * the corresponding state change.
   */
  type EventType = string ;
  var EventType : {
    ACTION : EventType ,
    ACTIVATE : EventType ,
    BEFORE_SHOW : EventType ,
    BLUR : EventType ,
    CHANGE : EventType ,
    CHECK : EventType ,
    CLOSE : EventType ,
    DEACTIVATE : EventType ,
    DISABLE : EventType ,
    ENABLE : EventType ,
    ENTER : EventType ,
    FOCUS : EventType ,
    HIDE : EventType ,
    HIGHLIGHT : EventType ,
    LEAVE : EventType ,
    OPEN : EventType ,
    SELECT : EventType ,
    SHOW : EventType ,
    UNCHECK : EventType ,
    UNHIGHLIGHT : EventType ,
    UNSELECT : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Component.EventType'): typeof ಠ_ಠ.clutz.goog.ui.Component.EventType;
}
declare module 'goog:goog.ui.Component.EventType' {
  import alias = ಠ_ಠ.clutz.goog.ui.Component.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Component {
  /**
   * Common component states.  Components may have distinct appearance depending
   * on what state(s) apply to them.  Not all components are expected to support
   * all states.
   */
  type State = number ;
  var State : {
    ACTIVE : State ,
    ALL : State ,
    CHECKED : State ,
    DISABLED : State ,
    FOCUSED : State ,
    HOVER : State ,
    OPENED : State ,
    SELECTED : State ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Component.State'): typeof ಠ_ಠ.clutz.goog.ui.Component.State;
}
declare module 'goog:goog.ui.Component.State' {
  import alias = ಠ_ಠ.clutz.goog.ui.Component.State;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Base class for containers.  Extends {@link goog.ui.Component} by adding
   * the following:
   * <ul>
   * <li>a {@link goog.events.KeyHandler}, to simplify keyboard handling,
   * <li>a pluggable <em>renderer</em> framework, to simplify the creation of
   * containers without the need to subclass this class,
   * <li>methods to manage child controls hosted in the container,
   * <li>default mouse and keyboard event handling methods.
   * </ul>
   */
  class Container extends Container_Instance {
  }
  class Container_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
    /**
     * Base class for containers.  Extends {@link goog.ui.Component} by adding
     * the following:
     * <ul>
     * <li>a {@link goog.events.KeyHandler}, to simplify keyboard handling,
     * <li>a pluggable <em>renderer</em> framework, to simplify the creation of
     * containers without the need to subclass this class,
     * <li>methods to manage child controls hosted in the container,
     * <li>default mouse and keyboard event handling methods.
     * </ul>
     * @param opt_orientation Container orientation; defaults to {@code VERTICAL}.
     * @param opt_renderer Renderer used to render or decorate the container; defaults to {@link goog.ui.ContainerRenderer}.
     * @param opt_domHelper DOM helper, used for document interaction.
     */
    constructor (opt_orientation ? : ಠ_ಠ.clutz.goog.ui.Container.Orientation | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.ContainerRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Adds the specified control as the last child of this container.  See
     * {@link goog.ui.Container#addChildAt} for detailed semantics.
     * @param child The new child control.
     * @param opt_render Whether the new child should be rendered immediately after being added (defaults to false).
     */
    addChild (child : ಠ_ಠ.clutz.goog.ui.Component | null , opt_render ? : boolean ) : void ;
    /**
     * Adds the control as a child of this container at the given 0-based index.
     * Overrides {@link goog.ui.Component#addChildAt} by also updating the
     * container's highlight index.  Since {@link goog.ui.Component#addChild} uses
     * {@link #addChildAt} internally, we only need to override this method.
     * @param control New child.
     * @param index Index at which the new child is to be added.
     * @param opt_render Whether the new child should be rendered immediately after being added (defaults to false).
     */
    addChildAt (control : ಠ_ಠ.clutz.goog.ui.Component | null , index : number , opt_render ? : boolean ) : void ;
    /**
     * Returns true if the given element can be decorated by this container.
     * Overrides {@link goog.ui.Component#canDecorate}.
     * @param element Element to decorate.
     */
    canDecorate (element : Element | null ) : boolean ;
    /**
     * Returns whether the given item can be highlighted.
     * @param item The item to check.
     */
    canHighlightItem (item : ಠ_ಠ.clutz.goog.ui.Control | null ) : boolean ;
    /**
     * Creates the container's DOM.
     */
    createDom ( ) : void ;
    /**
     * Decorates the given element with this container. Overrides {@link
     * goog.ui.Component#decorateInternal}.  Considered protected.
     * @param element Element to decorate.
     */
    decorateInternal (element : Element | null ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Configures the container after its DOM has been rendered, and sets up event
     * handling.  Overrides {@link goog.ui.Component#enterDocument}.
     */
    enterDocument ( ) : void ;
    /**
     * Cleans up the container before its DOM is removed from the document, and
     * removes event handlers.  Overrides {@link goog.ui.Component#exitDocument}.
     */
    exitDocument ( ) : void ;
    /**
     * Overrides {@link goog.ui.Container#getChild} to make it clear that it
     * only returns {@link goog.ui.Control}s.
     * @param id Child component ID.
     */
    getChild (a : string ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Overrides {@link goog.ui.Container#getChildAt} to make it clear that it
     * only returns {@link goog.ui.Control}s.
     * @param index 0-based index.
     */
    getChildAt (a : number ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Returns the DOM element into which child components are to be rendered,
     * or null if the container itself hasn't been rendered yet.  Overrides
     * {@link goog.ui.Component#getContentElement} by delegating to the renderer.
     */
    getContentElement ( ) : Element | null ;
    /**
     * Returns the currently highlighted item (if any).
     */
    getHighlighted ( ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Returns the index of the currently highlighted item (-1 if none).
     */
    getHighlightedIndex ( ) : number ;
    /**
     * Returns the DOM element on which the container is listening for keyboard
     * events (null if none).
     */
    getKeyEventTarget ( ) : Element | null ;
    /**
     * Returns the keyboard event handler for this container, lazily created the
     * first time this method is called.  The keyboard event handler listens for
     * keyboard events on the container's key event target, as determined by its
     * renderer.
     */
    getKeyHandler ( ) : ಠ_ಠ.clutz.goog.events.KeyHandler ;
    /**
     * Returns the currently open (expanded) control in the container (null if
     * none).
     */
    getOpenItem ( ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Returns the container's orientation.
     */
    getOrientation ( ) : ಠ_ಠ.clutz.goog.ui.Container.Orientation | null ;
    /**
     * Returns the child control that owns the given DOM node, or null if no such
     * control is found.
     * @param node DOM node whose owner is to be returned.
     */
    getOwnerControl (node : Node | null ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Returns the renderer used by this container to render itself or to decorate
     * an existing element.
     */
    getRenderer ( ) : ಠ_ಠ.clutz.goog.ui.ContainerRenderer | null ;
    /**
     * Handles blur events raised when the container's key event target loses
     * keyboard focus.  The default implementation clears the highlight index.
     * @param e Blur event to handle.
     */
    handleBlur (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles mouse events originating from nodes belonging to the controls hosted
     * in the container.  Locates the child control based on the DOM node that
     * dispatched the event, and forwards the event to the control for handling.
     * @param e Mouse event to handle.
     */
    handleChildMouseEvents (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles CLOSE events dispatched by items in the container when they are
     * closed.
     * @param e Close event to handle.
     */
    handleCloseItem (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles mouseup events over the document.  The default implementation
     * clears the "mouse button pressed" flag.
     * @param e Mouseup event to handle.
     */
    handleDocumentMouseUp (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles ENTER events raised by child controls when they are navigated to.
     * @param e ENTER event to handle.
     */
    handleEnterItem (e : ಠ_ಠ.clutz.goog.events.Event | null ) : boolean ;
    /**
     * Handles focus events raised when the container's key event target receives
     * keyboard focus.
     * @param e Focus event to handle.
     */
    handleFocus (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles HIGHLIGHT events dispatched by items in the container when
     * they are highlighted.
     * @param e Highlight event to handle.
     */
    handleHighlightItem (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Attempts to handle a keyboard event, if the control is enabled, by calling
     * {@link handleKeyEventInternal}.  Considered protected; should only be used
     * within this package and by subclasses.
     * @param e Key event to handle.
     */
    handleKeyEvent (e : ಠ_ಠ.clutz.goog.events.KeyEvent | null ) : boolean ;
    /**
     * Attempts to handle a keyboard event; returns true if the event was handled,
     * false otherwise.  If the container is enabled, and a child is highlighted,
     * calls the child control's {@code handleKeyEvent} method to give the control
     * a chance to handle the event first.
     * @param e Key event to handle.
     */
    handleKeyEventInternal (e : ಠ_ಠ.clutz.goog.events.KeyEvent | null ) : boolean ;
    /**
     * Handles mousedown events over the container.  The default implementation
     * sets the "mouse button pressed" flag and, if the container is focusable,
     * grabs keyboard focus.
     * @param e Mousedown event to handle.
     */
    handleMouseDown (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles OPEN events dispatched by items in the container when they are
     * opened.
     * @param e Open event to handle.
     */
    handleOpenItem (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles UNHIGHLIGHT events dispatched by items in the container when
     * they are unhighlighted.
     * @param e Unhighlight event to handle.
     */
    handleUnHighlightItem (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Highlights the first highlightable item in the container
     */
    highlightFirst ( ) : void ;
    /**
     * Helper function that manages the details of moving the highlight among
     * child controls in response to keyboard events.
     * @param fn Function that accepts the current and maximum indices, and returns the next index to check.
     * @param startIndex Start index.
     */
    highlightHelper (fn : (a : number , b : number ) => number , startIndex : number ) : boolean ;
    /**
     * Highlights the last highlightable item in the container.
     */
    highlightLast ( ) : void ;
    /**
     * Highlights the next highlightable item (or the first if nothing is currently
     * highlighted).
     */
    highlightNext ( ) : void ;
    /**
     * Highlights the previous highlightable item (or the last if nothing is
     * currently highlighted).
     */
    highlightPrevious ( ) : void ;
    /**
     * Returns true if the container is enabled, false otherwise.
     */
    isEnabled ( ) : boolean ;
    /**
     * Returns true if the container is focusable, false otherwise.  The default
     * is true.  Focusable containers always have a tab index and allocate a key
     * handler to handle keyboard events while focused.
     */
    isFocusable ( ) : boolean ;
    /**
     * Returns true if the container allows children to be focusable, false
     * otherwise.  Only effective if the container is not focusable.
     */
    isFocusableChildrenAllowed ( ) : boolean ;
    /**
     * Returns true if the mouse button is pressed, false otherwise.
     */
    isMouseButtonPressed ( ) : boolean ;
    isOpenFollowsHighlight ( ) : boolean ;
    /**
     * Returns true if the container's visibility is set to visible, false if
     * it is set to hidden.  A container that is set to hidden is guaranteed
     * to be hidden from the user, but the reverse isn't necessarily true.
     * A container may be set to visible but can otherwise be obscured by another
     * element, rendered off-screen, or hidden using direct CSS manipulation.
     */
    isVisible ( ) : boolean ;
    /**
     * Removes a child control.  Overrides {@link goog.ui.Component#removeChild} by
     * updating the highlight index.  Since {@link goog.ui.Component#removeChildAt}
     * uses {@link #removeChild} internally, we only need to override this method.
     * @param control The ID of the child to remove, or the control itself.
     * @param opt_unrender Whether to call {@code exitDocument} on the removed control, and detach its DOM from the document (defaults to false).
     */
    removeChild (control : string | ಠ_ಠ.clutz.goog.ui.Component | null , opt_unrender ? : boolean ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Enables/disables the container based on the {@code enable} argument.
     * Dispatches an {@code ENABLED} or {@code DISABLED} event prior to changing
     * the container's state, which may be caught and canceled to prevent the
     * container from changing state.  Also enables/disables child controls.
     * @param enable Whether to enable or disable the container.
     */
    setEnabled (enable : boolean ) : void ;
    /**
     * Sets whether the container is focusable.  The default is true.  Focusable
     * containers always have a tab index and allocate a key handler to handle
     * keyboard events while focused.
     * @param focusable Whether the component is to be focusable.
     */
    setFocusable (focusable : boolean ) : void ;
    /**
     * Sets whether the container allows children to be focusable, false
     * otherwise.  Only effective if the container is not focusable.
     * @param focusable Whether the children should be focusable.
     */
    setFocusableChildrenAllowed (focusable : boolean ) : void ;
    /**
     * Highlights the given item if it exists and is a child of the container;
     * otherwise un-highlights the currently highlighted item.
     * @param item Item to highlight.
     */
    setHighlighted (item : ಠ_ಠ.clutz.goog.ui.Control | null ) : void ;
    /**
     * Highlights the item at the given 0-based index (if any).  If another item
     * was previously highlighted, it is un-highlighted.
     * @param index Index of item to highlight (-1 removes the current highlight).
     */
    setHighlightedIndex (index : number ) : void ;
    /**
     * Helper method that sets the highlighted index to the given index in response
     * to a keyboard event.  The base class implementation simply calls the
     * {@link #setHighlightedIndex} method, but subclasses can override this
     * behavior as needed.
     * @param index Index of item to highlight.
     */
    setHighlightedIndexFromKeyEvent (index : number ) : void ;
    /**
     * Attaches an element on which to listen for key events.
     * @param element The element to attach, or null/undefined to attach to the default element.
     */
    setKeyEventTarget (element : Element | null | undefined ) : void ;
    /**
     * Sets or clears the "mouse button pressed" flag.
     * @param pressed Whether the mouse button is presed.
     */
    setMouseButtonPressed (pressed : boolean ) : void ;
    /**
     * Sets whether highlighting a child component should also open it.
     * @param follow Whether highlighting a child component also opens it.
     */
    setOpenFollowsHighlight (follow : boolean ) : void ;
    /**
     * Sets the container's orientation.
     * @param orientation Container orientation.
     */
    setOrientation (orientation : ಠ_ಠ.clutz.goog.ui.Container.Orientation ) : void ;
    /**
     * Registers the given renderer with the container.  Changing renderers after
     * the container has already been rendered or decorated is an error.
     * @param renderer Renderer used by the container.
     */
    setRenderer (renderer : ಠ_ಠ.clutz.goog.ui.ContainerRenderer | null ) : void ;
    /**
     * Shows or hides the container.  Does nothing if the container already has
     * the requested visibility.  Otherwise, dispatches a SHOW or HIDE event as
     * appropriate, giving listeners a chance to prevent the visibility change.
     * @param visible Whether to show or hide the container.
     * @param opt_force If true, doesn't check whether the container already has the requested visibility, and doesn't dispatch any events.
     */
    setVisible (visible : boolean , opt_force ? : boolean ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Container'): typeof ಠ_ಠ.clutz.goog.ui.Container;
}
declare module 'goog:goog.ui.Container' {
  import alias = ಠ_ಠ.clutz.goog.ui.Container;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Container {
  /**
   * Container-specific events.
   */
  type EventType = string ;
  var EventType : {
    AFTER_HIDE : EventType ,
    AFTER_SHOW : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Container.EventType'): typeof ಠ_ಠ.clutz.goog.ui.Container.EventType;
}
declare module 'goog:goog.ui.Container.EventType' {
  import alias = ಠ_ಠ.clutz.goog.ui.Container.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Container {
  /**
   * Container orientation constants.
   */
  type Orientation = string ;
  var Orientation : {
    HORIZONTAL : Orientation ,
    VERTICAL : Orientation ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Container.Orientation'): typeof ಠ_ಠ.clutz.goog.ui.Container.Orientation;
}
declare module 'goog:goog.ui.Container.Orientation' {
  import alias = ಠ_ಠ.clutz.goog.ui.Container.Orientation;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Default renderer for {@link goog.ui.Container}.  Can be used as-is, but
   * subclasses of Container will probably want to use renderers specifically
   * tailored for them by extending this class.
   */
  class ContainerRenderer extends ContainerRenderer_Instance {
    /**
     * Default CSS class to be applied to the root element of containers rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    /**
     * Constructs a new renderer and sets the CSS class that the renderer will use
     * as the base CSS class to apply to all elements rendered by that renderer.
     * An example to use this function using a menu is:
     *
     * <pre>
     * var myCustomRenderer = goog.ui.ContainerRenderer.getCustomRenderer(
     * goog.ui.MenuRenderer, 'my-special-menu');
     * var newMenu = new goog.ui.Menu(opt_domHelper, myCustomRenderer);
     * </pre>
     *
     * Your styles for the menu can now be:
     * <pre>
     * .my-special-menu { }
     * </pre>
     *
     * <em>instead</em> of
     * <pre>
     * .CSS_MY_SPECIAL_MENU .goog-menu { }
     * </pre>
     *
     * You would want to use this functionality when you want an instance of a
     * component to have specific styles different than the other components of the
     * same type in your application.  This avoids using descendant selectors to
     * apply the specific styles to this component.
     * @param ctor The constructor of the renderer you want to create.
     * @param cssClassName The name of the CSS class for this renderer.
     */
    static getCustomRenderer (ctor : ( ( ...a : any [] ) => any ) | null , cssClassName : string ) : ಠ_ಠ.clutz.goog.ui.ContainerRenderer | null ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.ContainerRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.ContainerRenderer ;
  }
  class ContainerRenderer_Instance {
    private noStructuralTyping_: any;
    /**
     * Default renderer for {@link goog.ui.Container}.  Can be used as-is, but
     * subclasses of Container will probably want to use renderers specifically
     * tailored for them by extending this class.
     * @param opt_ariaRole Optional ARIA role used for the element.
     */
    constructor (opt_ariaRole ? : string ) ;
    /**
     * Default implementation of {@code canDecorate}; returns true if the element
     * is a DIV, false otherwise.
     * @param element Element to decorate.
     */
    canDecorate (element : Element | null ) : boolean ;
    /**
     * Creates and returns the container's root element.  The default
     * simply creates a DIV and applies the renderer's own CSS class name to it.
     * To be overridden in subclasses.
     * @param container Container to render.
     */
    createDom (container : ಠ_ಠ.clutz.goog.ui.Container | null ) : Element | null ;
    /**
     * Default implementation of {@code decorate} for {@link goog.ui.Container}s.
     * Decorates the element with the container, and attempts to decorate its child
     * elements.  Returns the decorated element.
     * @param container Container to decorate the element.
     * @param element Element to decorate.
     */
    decorate (container : ಠ_ಠ.clutz.goog.ui.Container | null , element : Element | null ) : Element ;
    /**
     * Takes a container and an element that may contain child elements, decorates
     * the child elements, and adds the corresponding components to the container
     * as child components.  Any non-element child nodes (e.g. empty text nodes
     * introduced by line breaks in the HTML source) are removed from the element.
     * @param container Container whose children are to be discovered.
     * @param element Element whose children are to be decorated.
     * @param opt_firstChild the first child to be decorated.
     */
    decorateChildren (container : ಠ_ಠ.clutz.goog.ui.Container | null , element : Element | null , opt_firstChild ? : Element | null ) : void ;
    /**
     * Enables or disables the tab index of the element.  Only elements with a
     * valid tab index can receive focus.
     * @param element Element whose tab index is to be changed.
     * @param enable Whether to add or remove the element's tab index.
     */
    enableTabIndex (element : Element | null , enable : boolean ) : void ;
    /**
     * Returns the ARIA role to be applied to the container.
     * See http://wiki/Main/ARIA for more info.
     */
    getAriaRole ( ) : undefined | string ;
    /**
     * Returns all CSS class names applicable to the given container, based on its
     * state.  The array of class names returned includes the renderer's own CSS
     * class, followed by a CSS class indicating the container's orientation,
     * followed by any state-specific CSS classes.
     * @param container Container whose CSS classes are to be returned.
     */
    getClassNames (container : ಠ_ಠ.clutz.goog.ui.Container | null ) : string [] ;
    /**
     * Returns the DOM element into which child components are to be rendered,
     * or null if the container hasn't been rendered yet.
     * @param element Root element of the container whose content element is to be returned.
     */
    getContentElement (element : Element | null ) : Element | null ;
    /**
     * Returns the CSS class to be applied to the root element of containers
     * rendered using this renderer.
     */
    getCssClass ( ) : string ;
    /**
     * Inspects the element, and creates an instance of {@link goog.ui.Control} or
     * an appropriate subclass best suited to decorate it.  Returns the control (or
     * null if no suitable class was found).  This default implementation uses the
     * element's CSS class to find the appropriate control class to instantiate.
     * May be overridden in subclasses.
     * @param element Element to decorate.
     */
    getDecoratorForChild (element : Element | null ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Returns the default orientation of containers rendered or decorated by this
     * renderer.  The base class implementation returns {@code VERTICAL}.
     */
    getDefaultOrientation ( ) : ಠ_ಠ.clutz.goog.ui.Container.Orientation ;
    /**
     * Returns the element within the container's DOM that should receive keyboard
     * focus (null if none).  The default implementation returns the container's
     * root element.
     * @param container Container whose key event target is to be returned.
     */
    getKeyEventTarget (container : ಠ_ಠ.clutz.goog.ui.Container | null ) : Element | null ;
    /**
     * Initializes the container's DOM when the container enters the document.
     * Called from {@link goog.ui.Container#enterDocument}.
     * @param container Container whose DOM is to be initialized as it enters the document.
     */
    initializeDom (container : ಠ_ಠ.clutz.goog.ui.Container | null ) : void ;
    /**
     * Sets the container's state based on the given CSS class name, encountered
     * during decoration.  CSS class names that don't represent container states
     * are ignored.  Considered protected; subclasses should override this method
     * to support more states and CSS class names.
     * @param container Container to update.
     * @param className CSS class name.
     * @param baseClass Base class name used as the root of state-specific class names (typically the renderer's own class name).
     */
    setStateFromClassName (container : ಠ_ಠ.clutz.goog.ui.Container | null , className : string , baseClass : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.ContainerRenderer'): typeof ಠ_ಠ.clutz.goog.ui.ContainerRenderer;
}
declare module 'goog:goog.ui.ContainerRenderer' {
  import alias = ಠ_ಠ.clutz.goog.ui.ContainerRenderer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Base class for UI controls.  Extends {@link goog.ui.Component} by adding
   * the following:
   * <ul>
   * <li>a {@link goog.events.KeyHandler}, to simplify keyboard handling,
   * <li>a pluggable <em>renderer</em> framework, to simplify the creation of
   * simple controls without the need to subclass this class,
   * <li>the notion of component <em>content</em>, like a text caption or DOM
   * structure displayed in the component (e.g. a button label),
   * <li>getter and setter for component content, as well as a getter and
   * setter specifically for caption text (for convenience),
   * <li>support for hiding/showing the component,
   * <li>fine-grained control over supported states and state transition
   * events, and
   * <li>default mouse and keyboard event handling.
   * </ul>
   * This class has sufficient built-in functionality for most simple UI controls.
   * All controls dispatch SHOW, HIDE, ENTER, LEAVE, and ACTION events on show,
   * hide, mouseover, mouseout, and user action, respectively.  Additional states
   * are also supported.  See closure/demos/control.html
   * for example usage.
   */
  class Control extends Control_Instance {
    /**
     * Takes an element and returns a new instance of {@link goog.ui.Control}
     * or a subclass, suitable to decorate it (based on the element's CSS class).
     * @param element Element to decorate.
     */
    static getDecorator (a : Element | null ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Maps a CSS class name to a function that returns a new instance of
     * {@link goog.ui.Control} or a subclass thereof, suitable to decorate
     * an element that has the specified CSS class.  UI components that extend
     * {@link goog.ui.Control} and want {@link goog.ui.Container}s to be able
     * to discover and decorate elements using them should register a factory
     * function via this API.
     * @param className CSS class name.
     * @param decoratorFunction Function that takes no arguments and returns a new instance of a control to decorate an element with the given class.
     */
    static registerDecorator (a : string , b : ( ( ...a : any [] ) => any ) | null ) : any ;
  }
  class Control_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
    /**
     * Base class for UI controls.  Extends {@link goog.ui.Component} by adding
     * the following:
     * <ul>
     * <li>a {@link goog.events.KeyHandler}, to simplify keyboard handling,
     * <li>a pluggable <em>renderer</em> framework, to simplify the creation of
     * simple controls without the need to subclass this class,
     * <li>the notion of component <em>content</em>, like a text caption or DOM
     * structure displayed in the component (e.g. a button label),
     * <li>getter and setter for component content, as well as a getter and
     * setter specifically for caption text (for convenience),
     * <li>support for hiding/showing the component,
     * <li>fine-grained control over supported states and state transition
     * events, and
     * <li>default mouse and keyboard event handling.
     * </ul>
     * This class has sufficient built-in functionality for most simple UI controls.
     * All controls dispatch SHOW, HIDE, ENTER, LEAVE, and ACTION events on show,
     * hide, mouseover, mouseout, and user action, respectively.  Additional states
     * are also supported.  See closure/demos/control.html
     * for example usage.
     * @param opt_content Text caption or DOM structure to display as the content of the control (if any).
     * @param opt_renderer Renderer used to render or decorate the component; defaults to {@link goog.ui.ControlRenderer}.
     * @param opt_domHelper Optional DOM helper, used for document interaction.
     */
    constructor (opt_content ? : string | Node | null | Node [] | NodeList < Node > , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.ControlRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Adds the given class name to the list of classes to be applied to the
     * component's root element.
     * @param className Additional class name to be applied to the component's root element.
     */
    addClassName (className : string ) : void ;
    /**
     * Returns true if the given element can be decorated by this component.
     * Overrides {@link goog.ui.Component#canDecorate}.
     * @param element Element to decorate.
     */
    canDecorate (element : Element | null ) : boolean ;
    /**
     * Creates the control's DOM.  Overrides {@link goog.ui.Component#createDom} by
     * delegating DOM manipulation to the control's renderer.
     */
    createDom ( ) : void ;
    /**
     * Decorates the given element with this component. Overrides {@link
     * goog.ui.Component#decorateInternal} by delegating DOM manipulation
     * to the control's renderer.
     * @param element Element to decorate.
     */
    decorateInternal (element : Element | null ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Adds or removes the given class name to/from the list of classes to be
     * applied to the component's root element.
     * @param className CSS class name to add or remove.
     * @param enable Whether to add or remove the class name.
     */
    enableClassName (className : string , enable : boolean ) : void ;
    /**
     * Configures the component after its DOM has been rendered, and sets up event
     * handling.  Overrides {@link goog.ui.Component#enterDocument}.
     */
    enterDocument ( ) : void ;
    /**
     * Cleans up the component before its DOM is removed from the document, and
     * removes event handlers.  Overrides {@link goog.ui.Component#exitDocument}
     * by making sure that components that are removed from the document aren't
     * focusable (i.e. have no tab index).
     */
    exitDocument ( ) : void ;
    /**
     * Gets the control's aria label.
     */
    getAriaLabel ( ) : string | null ;
    getCaption ( ) : string ;
    /**
     * Returns the text caption or DOM structure displayed in the component.
     */
    getContent ( ) : string | Node | null | Node [] | NodeList < Node > ;
    /**
     * Returns the DOM element into which child components are to be rendered,
     * or null if the control itself hasn't been rendered yet.  Overrides
     * {@link goog.ui.Component#getContentElement} by delegating to the renderer.
     */
    getContentElement ( ) : Element | null ;
    /**
     * Returns any additional class name(s) to be applied to the component's
     * root element, or null if no extra class names are needed.
     */
    getExtraClassNames ( ) : string [] | null ;
    /**
     * Returns the DOM element on which the control is listening for keyboard
     * events (null if none).
     */
    getKeyEventTarget ( ) : Element | null ;
    /**
     * Returns the keyboard event handler for this component, lazily created the
     * first time this method is called.  Considered protected; should only be
     * used within this package and by subclasses.
     */
    getKeyHandler ( ) : ಠ_ಠ.clutz.goog.events.KeyHandler ;
    /**
     * Returns the control's preferred ARIA role. This can be used by a control to
     * override the role that would be assigned by the renderer.  This is useful in
     * cases where a different ARIA role is appropriate for a control because of the
     * context in which it's used.  E.g., a {@link goog.ui.MenuButton} added to a
     * {@link goog.ui.Select} should have an ARIA role of LISTBOX and not MENUITEM.
     */
    getPreferredAriaRole ( ) : ಠ_ಠ.clutz.goog.a11y.aria.Role | null ;
    /**
     * Returns the renderer used by this component to render itself or to decorate
     * an existing element.
     */
    getRenderer ( ) : ಠ_ಠ.clutz.goog.ui.ControlRenderer | null | undefined ;
    /**
     * Returns the component's state as a bit mask of {@link
     * goog.ui.Component.State}s.
     */
    getState ( ) : number ;
    /**
     * Handles blur events on the component's key event target element.  Always
     * deactivates the component.  In addition, if the component is focusable,
     * updates its state and styling to indicate that it no longer has keyboard
     * focus.  Considered protected; should only be used within this package and
     * by subclasses.  <b>Warning:</b> IE dispatches focus and blur events
     * asynchronously!
     * @param e Blur event to handle.
     */
    handleBlur (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles contextmenu events.
     * @param e Event to handle.
     */
    handleContextMenu (a : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : any ;
    /**
     * Handles dblclick events.  Should only be registered if the user agent is
     * IE.  If the component is enabled, performs its associated action by calling
     * {@link performActionInternal}.  This is used to allow more performant
     * buttons in IE.  In IE, no mousedown event is fired when that mousedown will
     * trigger a dblclick event.  Because of this, a user clicking quickly will
     * only cause ACTION events to fire on every other click.  This is a workaround
     * to generate ACTION events for every click.  Unfortunately, this workaround
     * won't ever trigger the ACTIVE state.  This is roughly the same behaviour as
     * if this were a 'button' element with a listener on mouseup.  Considered
     * protected; should only be used within this package and by subclasses.
     * @param e Mouse event to handle.
     */
    handleDblClick (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles focus events on the component's key event target element.  If the
     * component is focusable, updates its state and styling to indicate that it
     * now has keyboard focus.  Considered protected; should only be used within
     * this package and by subclasses.  <b>Warning:</b> IE dispatches focus and
     * blur events asynchronously!
     * @param e Focus event to handle.
     */
    handleFocus (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Attempts to handle a keyboard event, if the component is enabled and visible,
     * by calling {@link handleKeyEventInternal}.  Considered protected; should only
     * be used within this package and by subclasses.
     * @param e Key event to handle.
     */
    handleKeyEvent (e : ಠ_ಠ.clutz.goog.events.KeyEvent | null ) : boolean ;
    /**
     * Attempts to handle a keyboard event; returns true if the event was handled,
     * false otherwise.  Considered protected; should only be used within this
     * package and by subclasses.
     * @param e Key event to handle.
     */
    handleKeyEventInternal (e : ಠ_ಠ.clutz.goog.events.KeyEvent | null ) : boolean ;
    /**
     * Handles mousedown events.  If the component is enabled, highlights and
     * activates it.  If the component isn't configured for keyboard access,
     * prevents it from receiving keyboard focus.  Considered protected; should
     * only be used within this package and by subclasses.
     * @param e Mouse event to handle.
     */
    handleMouseDown (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles mouseout events.  Dispatches a LEAVE event; if the event isn't
     * canceled, and the component supports auto-highlighting, deactivates and
     * un-highlights the component.  Considered protected; should only be used
     * within this package and by subclasses.
     * @param e Mouse event to handle.
     */
    handleMouseOut (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles mouseover events.  Dispatches an ENTER event; if the event isn't
     * canceled, the component is enabled, and it supports auto-highlighting,
     * highlights the component.  Considered protected; should only be used
     * within this package and by subclasses.
     * @param e Mouse event to handle.
     */
    handleMouseOver (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles mouseup events.  If the component is enabled, highlights it.  If
     * the component has previously been activated, performs its associated action
     * by calling {@link performActionInternal}, then deactivates it.  Considered
     * protected; should only be used within this package and by subclasses.
     * @param e Mouse event to handle.
     */
    handleMouseUp (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Returns true if the component is in the specified state, false otherwise.
     * @param state State to check.
     */
    hasState (state : ಠ_ಠ.clutz.goog.ui.Component.State ) : boolean ;
    /**
     * Returns true if the component is active (pressed), false otherwise.
     */
    isActive ( ) : boolean ;
    /**
     * Returns true if the control allows text selection within its DOM, false
     * otherwise.  Controls that disallow text selection have the appropriate
     * unselectable styling applied to their elements.  Note that controls hosted
     * in containers will report that they allow text selection even if their
     * container disallows text selection.
     */
    isAllowTextSelection ( ) : boolean ;
    /**
     * Returns true if the component provides default event handling for the state,
     * false otherwise.
     * @param state State to check.
     */
    isAutoState (state : ಠ_ಠ.clutz.goog.ui.Component.State ) : boolean ;
    /**
     * Returns true if the component is checked, false otherwise.
     */
    isChecked ( ) : boolean ;
    /**
     * Returns true if the component is set to dispatch transition events for the
     * given state, false otherwise.
     * @param state State to check.
     */
    isDispatchTransitionEvents (state : ಠ_ಠ.clutz.goog.ui.Component.State ) : boolean ;
    /**
     * Returns true if the component is enabled, false otherwise.
     */
    isEnabled ( ) : boolean ;
    /**
     * Returns true if the component is styled to indicate that it has keyboard
     * focus, false otherwise.  Note that {@code isFocused()} returning true
     * doesn't guarantee that the component's key event target has keyborad focus,
     * only that it is styled as such.
     */
    isFocused ( ) : boolean ;
    /**
     * Returns true if the control is configured to handle its own mouse events,
     * false otherwise.  Controls not hosted in {@link goog.ui.Container}s have
     * to handle their own mouse events, but controls hosted in containers may
     * allow their parent to handle mouse events on their behalf.  Considered
     * protected; should only be used within this package and by subclasses.
     */
    isHandleMouseEvents ( ) : boolean ;
    /**
     * Returns true if the component is currently highlighted, false otherwise.
     */
    isHighlighted ( ) : boolean ;
    /**
     * Returns true if the component is open (expanded), false otherwise.
     */
    isOpen ( ) : boolean ;
    /**
     * Returns true if the component is selected, false otherwise.
     */
    isSelected ( ) : boolean ;
    /**
     * Returns true if the component supports the specified state, false otherwise.
     * @param state State to check.
     */
    isSupportedState (state : ಠ_ಠ.clutz.goog.ui.Component.State ) : boolean ;
    /**
     * Returns true if the transition into or out of the given state is allowed to
     * proceed, false otherwise.  A state transition is allowed under the following
     * conditions:
     * <ul>
     * <li>the component supports the state,
     * <li>the component isn't already in the target state,
     * <li>either the component is configured not to dispatch events for this
     * state transition, or a transition event was dispatched and wasn't
     * canceled by any event listener, and
     * <li>the component hasn't been disposed of
     * </ul>
     * Considered protected; should only be used within this package and by
     * subclasses.
     * @param state State to/from which the control is transitioning.
     * @param enable Whether the control is entering or leaving the state.
     */
    isTransitionAllowed (state : ಠ_ಠ.clutz.goog.ui.Component.State , enable : boolean ) : boolean ;
    /**
     * Returns true if the component's visibility is set to visible, false if
     * it is set to hidden.  A component that is set to hidden is guaranteed
     * to be hidden from the user, but the reverse isn't necessarily true.
     * A component may be set to visible but can otherwise be obscured by another
     * element, rendered off-screen, or hidden using direct CSS manipulation.
     */
    isVisible ( ) : boolean ;
    /**
     * Performs the appropriate action when the control is activated by the user.
     * The default implementation first updates the checked and selected state of
     * controls that support them, then dispatches an ACTION event.  Considered
     * protected; should only be used within this package and by subclasses.
     * @param e Event that triggered the action.
     */
    performActionInternal (e : ಠ_ಠ.clutz.goog.events.Event | null ) : boolean ;
    /**
     * Removes the given class name from the list of classes to be applied to
     * the component's root element.
     * @param className Class name to be removed from the component's root element.
     */
    removeClassName (className : string ) : void ;
    /**
     * Activates or deactivates the component.  Does nothing if this state
     * transition is disallowed.
     * @param active Whether to activate or deactivate the component.
     */
    setActive (active : boolean ) : void ;
    /**
     * Allows or disallows text selection within the control's DOM.
     * @param allow Whether the control should allow text selection.
     */
    setAllowTextSelection (allow : boolean ) : void ;
    /**
     * Sets the control's aria label. This can be used to assign aria label to the
     * element after it is rendered.
     * @param label The string to set as the aria label for this control. No escaping is done on this value.
     */
    setAriaLabel (label : string ) : void ;
    /**
     * Enables or disables automatic event handling for the given state(s).
     * @param states Bit mask of {@link goog.ui.Component.State}s for which default event handling is to be enabled or disabled.
     * @param enable Whether the component should provide default event handling for the state(s).
     */
    setAutoStates (states : number , enable : boolean ) : void ;
    /**
     * Sets the text caption of the component.
     * @param caption Text caption of the component.
     */
    setCaption (caption : string ) : void ;
    /**
     * Checks or unchecks the component.  Does nothing if this state transition
     * is disallowed.
     * @param check Whether to check or uncheck the component.
     */
    setChecked (check : boolean ) : void ;
    /**
     * Sets the component's content to the given text caption, element, or array of
     * nodes.  (If the argument is an array of nodes, it must be an actual array,
     * not an array-like object.)
     * @param content Text caption or DOM structure to set as the component's contents.
     */
    setContent (content : string | Node | null | Node [] | NodeList < Node > ) : void ;
    /**
     * Sets the component's content to the given text caption, element, or array
     * of nodes.  Unlike {@link #setContent}, doesn't modify the component's DOM.
     * Called by renderers during element decoration.
     *
     * This should only be used by subclasses and its associated renderers.
     * @param content Text caption or DOM structure to set as the component's contents.
     */
    setContentInternal (content : string | Node | null | Node [] | NodeList < Node > ) : void ;
    /**
     * Enables or disables transition events for the given state(s).  Controls
     * handle state transitions internally by default, and only dispatch state
     * transition events if explicitly requested to do so by calling this method.
     * @param states Bit mask of {@link goog.ui.Component.State}s for which transition events should be enabled or disabled.
     * @param enable Whether transition events should be enabled.
     */
    setDispatchTransitionEvents (states : number , enable : boolean ) : void ;
    /**
     * Enables or disables the component.  Does nothing if this state transition
     * is disallowed.  If the component is both visible and focusable, updates its
     * focused state and tab index as needed.  If the component is being disabled,
     * ensures that it is also deactivated and un-highlighted first.  Note that the
     * component's enabled/disabled state is "locked" as long as it is hosted in a
     * {@link goog.ui.Container} that is itself disabled; this is to prevent clients
     * from accidentally re-enabling a control that is in a disabled container.
     * @param enable Whether to enable or disable the component.
     */
    setEnabled (enable : boolean ) : void ;
    /**
     * Applies or removes styling indicating that the component has keyboard focus.
     * Note that unlike the other "set" methods, this method is called as a result
     * of the component's element having received or lost keyboard focus, not the
     * other way around, so calling {@code setFocused(true)} doesn't guarantee that
     * the component's key event target has keyboard focus, only that it is styled
     * as such.
     * @param focused Whether to apply or remove styling to indicate that the component's element has keyboard focus.
     */
    setFocused (focused : boolean ) : void ;
    /**
     * Enables or disables mouse event handling for the control.  Containers may
     * use this method to disable mouse event handling in their child controls.
     * Considered protected; should only be used within this package and by
     * subclasses.
     * @param enable Whether to enable or disable mouse event handling.
     */
    setHandleMouseEvents (enable : boolean ) : void ;
    /**
     * Highlights or unhighlights the component.  Does nothing if this state
     * transition is disallowed.
     * @param highlight Whether to highlight or unhighlight the component.
     */
    setHighlighted (highlight : boolean ) : void ;
    /**
     * Opens (expands) or closes (collapses) the component.  Does nothing if this
     * state transition is disallowed.
     * @param open Whether to open or close the component.
     */
    setOpen (open : boolean ) : void ;
    /**
     * Sets the control's preferred ARIA role. This can be used to override the role
     * that would be assigned by the renderer.  This is useful in cases where a
     * different ARIA role is appropriate for a control because of the
     * context in which it's used.  E.g., a {@link goog.ui.MenuButton} added to a
     * {@link goog.ui.Select} should have an ARIA role of LISTBOX and not MENUITEM.
     * @param role This control's preferred ARIA role.
     */
    setPreferredAriaRole (role : ಠ_ಠ.clutz.goog.a11y.aria.Role ) : void ;
    /**
     * Registers the given renderer with the component.  Changing renderers after
     * the component has entered the document is an error.
     * @param renderer Renderer used by the component.
     */
    setRenderer (renderer : ಠ_ಠ.clutz.goog.ui.ControlRenderer | null ) : void ;
    setRightToLeft (rightToLeft : boolean ) : void ;
    /**
     * Selects or unselects the component.  Does nothing if this state transition
     * is disallowed.
     * @param select Whether to select or unselect the component.
     */
    setSelected (select : boolean ) : void ;
    /**
     * Sets or clears the given state on the component, and updates its styling
     * accordingly.  Does nothing if the component is already in the correct state
     * or if it doesn't support the specified state.  Doesn't dispatch any state
     * transition events; use advisedly.
     * @param state State to set or clear.
     * @param enable Whether to set or clear the state (if supported).
     * @param opt_calledFrom Prevents looping with setEnabled.
     */
    setState (state : ಠ_ಠ.clutz.goog.ui.Component.State , enable : boolean , opt_calledFrom ? : boolean ) : void ;
    /**
     * Sets the component's state to the state represented by a bit mask of
     * {@link goog.ui.Component.State}s.  Unlike {@link #setState}, doesn't
     * update the component's styling, and doesn't reject unsupported states.
     * Called by renderers during element decoration.  Considered protected;
     * should only be used within this package and by subclasses.
     *
     * This should only be used by subclasses and its associated renderers.
     * @param state Bit mask representing component state.
     */
    setStateInternal (state : number ) : void ;
    /**
     * Enables or disables support for the given state. Disabling support
     * for a state while the component is in that state is an error.
     * @param state State to support or de-support.
     * @param support Whether the component should support the state.
     */
    setSupportedState (state : ಠ_ಠ.clutz.goog.ui.Component.State , support : boolean ) : void ;
    /**
     * Shows or hides the component.  Does nothing if the component already has
     * the requested visibility.  Otherwise, dispatches a SHOW or HIDE event as
     * appropriate, giving listeners a chance to prevent the visibility change.
     * When showing a component that is both enabled and focusable, ensures that
     * its key target has a tab index.  When hiding a component that is enabled
     * and focusable, blurs its key target and removes its tab index.
     * @param visible Whether to show or hide the component.
     * @param opt_force If true, doesn't check whether the component already has the requested visibility, and doesn't dispatch any events.
     */
    setVisible (visible : boolean , opt_force ? : boolean ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Control'): typeof ಠ_ಠ.clutz.goog.ui.Control;
}
declare module 'goog:goog.ui.Control' {
  import alias = ಠ_ಠ.clutz.goog.ui.Control;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Type declaration for text caption or DOM structure to be used as the content
   * of {@link goog.ui.Control}s.
   */
  type ControlContent = string | Node | null | Node [] | NodeList < Node > ;
}
declare module 'goog:goog.ui.ControlContent' {
  import alias = ಠ_ಠ.clutz.goog.ui.ControlContent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Default renderer for {@link goog.ui.Control}s.  Can be used as-is, but
   * subclasses of Control will probably want to use renderers specifically
   * tailored for them by extending this class.  Controls that use renderers
   * delegate one or more of the following API methods to the renderer:
   * <ul>
   * <li>{@code createDom} - renders the DOM for the component
   * <li>{@code canDecorate} - determines whether an element can be decorated
   * by the component
   * <li>{@code decorate} - decorates an existing element with the component
   * <li>{@code setState} - updates the appearance of the component based on
   * its state
   * <li>{@code getContent} - returns the component's content
   * <li>{@code setContent} - sets the component's content
   * </ul>
   * Controls are stateful; renderers, on the other hand, should be stateless and
   * reusable.
   */
  class ControlRenderer extends ControlRenderer_Instance {
    /**
     * Default CSS class to be applied to the root element of components rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    /**
     * Array of arrays of CSS classes that we want composite classes added and
     * removed for in IE6 and lower as a workaround for lack of multi-class CSS
     * selector support.
     *
     * Subclasses that have accompanying CSS requiring this workaround should define
     * their own static IE6_CLASS_COMBINATIONS constant and override
     * getIe6ClassCombinations to return it.
     *
     * For example, if your stylesheet uses the selector .button.collapse-left
     * (and is compiled to .button_collapse-left for the IE6 version of the
     * stylesheet,) you should include ['button', 'collapse-left'] in this array
     * and the class button_collapse-left will be applied to the root element
     * whenever both button and collapse-left are applied individually.
     *
     * Members of each class name combination will be joined with underscores in the
     * order that they're defined in the array. You should alphabetize them (for
     * compatibility with the CSS compiler) unless you are doing something special.
     */
    static IE6_CLASS_COMBINATIONS : ( string [] | null ) [] | null ;
    /**
     * Constructs a new renderer and sets the CSS class that the renderer will use
     * as the base CSS class to apply to all elements rendered by that renderer.
     * An example to use this function using a color palette:
     *
     * <pre>
     * var myCustomRenderer = goog.ui.ControlRenderer.getCustomRenderer(
     * goog.ui.PaletteRenderer, 'my-special-palette');
     * var newColorPalette = new goog.ui.ColorPalette(
     * colors, myCustomRenderer, opt_domHelper);
     * </pre>
     *
     * Your CSS can look like this now:
     * <pre>
     * .my-special-palette { }
     * .my-special-palette-table { }
     * .my-special-palette-cell { }
     * etc.
     * </pre>
     *
     * <em>instead</em> of
     * <pre>
     * .CSS_MY_SPECIAL_PALETTE .goog-palette { }
     * .CSS_MY_SPECIAL_PALETTE .goog-palette-table { }
     * .CSS_MY_SPECIAL_PALETTE .goog-palette-cell { }
     * etc.
     * </pre>
     *
     * You would want to use this functionality when you want an instance of a
     * component to have specific styles different than the other components of the
     * same type in your application.  This avoids using descendant selectors to
     * apply the specific styles to this component.
     * @param ctor The constructor of the renderer you are trying to create.
     * @param cssClassName The name of the CSS class for this renderer.
     */
    static getCustomRenderer (ctor : ( ( ...a : any [] ) => any ) | null , cssClassName : string ) : ಠ_ಠ.clutz.goog.ui.ControlRenderer | null ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.ControlRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.ControlRenderer ;
  }
  class ControlRenderer_Instance {
    private noStructuralTyping_: any;
    /**
     * Returns true if this renderer can decorate the element, false otherwise.
     * The default implementation always returns true.
     * @param element Element to decorate.
     */
    canDecorate (element : Element | null ) : boolean ;
    /**
     * Returns the control's contents wrapped in a DIV, with the renderer's own
     * CSS class and additional state-specific classes applied to it.
     * @param control Control to render.
     */
    createDom (control : ಠ_ಠ.clutz.goog.ui.Control | null ) : Element | null ;
    /**
     * Default implementation of {@code decorate} for {@link goog.ui.Control}s.
     * Initializes the control's ID, content, and state based on the ID of the
     * element, its child nodes, and its CSS classes, respectively.  Returns the
     * element.
     * @param control Control instance to decorate the element.
     * @param element Element to decorate.
     */
    decorate (control : ಠ_ಠ.clutz.goog.ui.Control | null , element : Element | null ) : Element | null ;
    /**
     * Updates the control's DOM by adding or removing the specified class name
     * to/from its root element. May add additional combined classes as needed in
     * IE6 and lower. Because of this, subclasses should use this method when
     * modifying class names on the control's root element.
     * @param control Control instance (or root element) to be updated.
     * @param className CSS class name to add or remove.
     * @param enable Whether to add or remove the class name.
     */
    enableClassName (control : ಠ_ಠ.clutz.goog.ui.Control | null | Element , className : string , enable : boolean ) : void ;
    /**
     * Updates the control's DOM by adding or removing the specified extra class
     * name to/from its element.
     * @param control Control to be updated.
     * @param className CSS class name to add or remove.
     * @param enable Whether to add or remove the class name.
     */
    enableExtraClassName (control : ಠ_ಠ.clutz.goog.ui.Control | null , className : string , enable : boolean ) : void ;
    /**
     * Returns the ARIA role to be applied to the control.
     * See http://wiki/Main/ARIA for more info.
     */
    getAriaRole ( ) : ಠ_ಠ.clutz.goog.a11y.aria.Role | undefined ;
    /**
     * Takes a single {@link goog.ui.Component.State}, and returns the
     * corresponding CSS class name (null if none).
     * @param state Component state.
     */
    getClassForState (state : ಠ_ಠ.clutz.goog.ui.Component.State ) : string | undefined ;
    /**
     * Returns all CSS class names applicable to the given control, based on its
     * state.  The return value is an array of strings containing
     * <ol>
     * <li>the renderer-specific CSS class returned by {@link #getCssClass},
     * followed by
     * <li>the structural CSS class returned by {@link getStructuralCssClass} (if
     * different from the renderer-specific CSS class), followed by
     * <li>any state-specific classes returned by {@link #getClassNamesForState},
     * followed by
     * <li>any extra classes returned by the control's {@code getExtraClassNames}
     * method and
     * <li>for IE6 and lower, additional combined classes from
     * {@link getAppliedCombinedClassNames_}.
     * </ol>
     * Since all controls have at least one renderer-specific CSS class name, this
     * method is guaranteed to return an array of at least one element.
     * @param control Control whose CSS classes are to be returned.
     */
    getClassNames (control : ಠ_ಠ.clutz.goog.ui.Control | null ) : string [] ;
    /**
     * Takes a bit mask of {@link goog.ui.Component.State}s, and returns an array
     * of the appropriate class names representing the given state, suitable to be
     * applied to the root element of a component rendered using this renderer, or
     * null if no state-specific classes need to be applied.  This default
     * implementation uses the renderer's {@link getClassForState} method to
     * generate each state-specific class.
     * @param state Bit mask of component states.
     */
    getClassNamesForState (state : number ) : string [] ;
    /**
     * Takes the control's root element and returns the parent element of the
     * control's contents.  Since by default controls are rendered as a single
     * DIV, the default implementation returns the element itself.  Subclasses
     * with more complex DOM structures must override this method as needed.
     * @param element Root element of the control whose content element is to be returned.
     */
    getContentElement (element : Element | null ) : Element | null ;
    /**
     * Returns the CSS class name to be applied to the root element of all
     * components rendered or decorated using this renderer.  The class name
     * is expected to uniquely identify the renderer class, i.e. no two
     * renderer classes are expected to share the same CSS class name.
     */
    getCssClass ( ) : string ;
    /**
     * Returns an array of combinations of classes to apply combined class names for
     * in IE6 and below. See {@link IE6_CLASS_COMBINATIONS} for more detail. This
     * method doesn't reference {@link IE6_CLASS_COMBINATIONS} so that it can be
     * compiled out, but subclasses should return their IE6_CLASS_COMBINATIONS
     * static constant instead.
     */
    getIe6ClassCombinations ( ) : ( string [] | null ) [] | null ;
    /**
     * Returns the element within the component's DOM that should receive keyboard
     * focus (null if none).  The default implementation returns the control's root
     * element.
     * @param control Control whose key event target is to be returned.
     */
    getKeyEventTarget (control : ಠ_ಠ.clutz.goog.ui.Control | null ) : Element | null ;
    /**
     * Takes a single CSS class name which may represent a component state, and
     * returns the corresponding component state (0x00 if none).
     * @param className CSS class name, possibly representing a component state.
     */
    getStateFromClass (className : string ) : ಠ_ಠ.clutz.goog.ui.Component.State ;
    /**
     * Returns the name of a DOM structure-specific CSS class to be applied to the
     * root element of all components rendered or decorated using this renderer.
     * Unlike the class name returned by {@link #getCssClass}, the structural class
     * name may be shared among different renderers that generate similar DOM
     * structures.  The structural class name also serves as the basis of derived
     * class names used to identify and style structural elements of the control's
     * DOM, as well as the basis for state-specific class names.  The default
     * implementation returns the same class name as {@link #getCssClass}, but
     * subclasses are expected to override this method as needed.
     */
    getStructuralCssClass ( ) : string ;
    /**
     * Initializes the control's DOM by configuring properties that can only be set
     * after the DOM has entered the document.  This implementation sets up BiDi
     * and keyboard focus.  Called from {@link goog.ui.Control#enterDocument}.
     * @param control Control whose DOM is to be initialized as it enters the document.
     */
    initializeDom (control : ಠ_ಠ.clutz.goog.ui.Control | null ) : void ;
    /**
     * Returns true if the control's key event target supports keyboard focus
     * (based on its {@code tabIndex} attribute), false otherwise.
     * @param control Control whose key event target is to be checked.
     */
    isFocusable (control : ಠ_ಠ.clutz.goog.ui.Control | null ) : boolean ;
    /**
     * Allows or disallows text selection within the control's DOM.
     * @param element The control's root element.
     * @param allow Whether the element should allow text selection.
     */
    setAllowTextSelection (element : Element | null , allow : boolean ) : void ;
    /**
     * Sets the element's ARIA label. This should be overriden by subclasses that
     * don't apply the role directly on control.element_.
     * @param element Element whose ARIA label is to be updated.
     * @param ariaLabel Label to add to the element.
     */
    setAriaLabel (element : Element , ariaLabel : string ) : void ;
    /**
     * Sets the element's ARIA role.
     * @param element Element to update.
     * @param opt_preferredRole The preferred ARIA role.
     */
    setAriaRole (element : Element | null , opt_preferredRole ? : ಠ_ಠ.clutz.goog.a11y.aria.Role | null ) : void ;
    /**
     * Sets the element's ARIA attributes, including distinguishing between
     * universally supported ARIA properties and ARIA states that are only
     * supported by certain ARIA roles. Only attributes which are initialized to be
     * true will be set.
     * @param control Control whose ARIA state will be updated.
     * @param element Element whose ARIA state is to be updated.
     */
    setAriaStates (control : ಠ_ಠ.clutz.goog.ui.Control , element : Element ) : void ;
    /**
     * Takes a control's root element, and sets its content to the given text
     * caption or DOM structure.  The default implementation replaces the children
     * of the given element.  Renderers that create more complex DOM structures
     * must override this method accordingly.
     * @param element The control's root element.
     * @param content Text caption or DOM structure to be set as the control's content. The DOM nodes will not be cloned, they will only moved under the content element of the control.
     */
    setContent (element : Element | null , content : string | Node | null | Node [] | NodeList < Node > ) : void ;
    /**
     * Updates the control's key event target to make it focusable or non-focusable
     * via its {@code tabIndex} attribute.  Does nothing if the control doesn't
     * support the {@code FOCUSED} state, or if it has no key event target.
     * @param control Control whose key event target is to be updated.
     * @param focusable Whether to enable keyboard focus support on the control's key event target.
     */
    setFocusable (control : ಠ_ಠ.clutz.goog.ui.Control | null , focusable : boolean ) : void ;
    /**
     * Applies special styling to/from the control's element if it is rendered
     * right-to-left, and removes it if it is rendered left-to-right.
     * @param element The control's root element.
     * @param rightToLeft Whether the component is rendered right-to-left.
     */
    setRightToLeft (element : Element | null , rightToLeft : boolean ) : void ;
    /**
     * Updates the appearance of the control in response to a state change.
     * @param control Control instance to update.
     * @param state State to enable or disable.
     * @param enable Whether the control is entering or exiting the state.
     */
    setState (control : ಠ_ಠ.clutz.goog.ui.Control | null , state : ಠ_ಠ.clutz.goog.ui.Component.State , enable : boolean ) : void ;
    /**
     * Shows or hides the element.
     * @param element Element to update.
     * @param visible Whether to show the element.
     */
    setVisible (element : Element | null , visible : boolean ) : void ;
    /**
     * Updates the element's ARIA (accessibility) attributes , including
     * distinguishing between universally supported ARIA properties and ARIA states
     * that are only supported by certain ARIA roles.
     * @param element Element whose ARIA state is to be updated.
     * @param state Component state being enabled or disabled.
     * @param enable Whether the state is being enabled or disabled.
     */
    updateAriaState (element : Element | null , state : ಠ_ಠ.clutz.goog.ui.Component.State , enable : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.ControlRenderer'): typeof ಠ_ಠ.clutz.goog.ui.ControlRenderer;
}
declare module 'goog:goog.ui.ControlRenderer' {
  import alias = ಠ_ಠ.clutz.goog.ui.ControlRenderer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Class for showing simple dialog boxes.
   * The Html structure of the dialog box is:
   * <pre>
   * Element         Function                Class-name, modal-dialog = default
   * ----------------------------------------------------------------------------
   * - iframe         Iframe mask              modal-dialog-bg
   * - div            Background mask          modal-dialog-bg
   * - div            Dialog area              modal-dialog
   * - div        Title bar                modal-dialog-title
   * - span                             modal-dialog-title-text
   * - text  Title text               N/A
   * - span                             modal-dialog-title-close
   * - ??    Close box                N/A
   * - div        Content area             modal-dialog-content
   * - ??      User specified content   N/A
   * - div        Button area              modal-dialog-buttons
   * - button                           N/A
   * - button
   * - ...
   * </pre>
   */
  class Dialog extends Dialog_Instance {
    /**
     * Event type constant for dialog events.
     * TODO(attila): Change this to goog.ui.Dialog.EventType.SELECT.
     */
    static SELECT_EVENT : string ;
  }
  class Dialog_Instance extends ಠ_ಠ.clutz.goog.ui.ModalPopup_Instance {
    /**
     * Class for showing simple dialog boxes.
     * The Html structure of the dialog box is:
     * <pre>
     * Element         Function                Class-name, modal-dialog = default
     * ----------------------------------------------------------------------------
     * - iframe         Iframe mask              modal-dialog-bg
     * - div            Background mask          modal-dialog-bg
     * - div            Dialog area              modal-dialog
     * - div        Title bar                modal-dialog-title
     * - span                             modal-dialog-title-text
     * - text  Title text               N/A
     * - span                             modal-dialog-title-close
     * - ??    Close box                N/A
     * - div        Content area             modal-dialog-content
     * - ??      User specified content   N/A
     * - div        Button area              modal-dialog-buttons
     * - button                           N/A
     * - button
     * - ...
     * </pre>
     * @param opt_class CSS class name for the dialog element, also used as a class name prefix for related elements; defaults to modal-dialog. This should be a single, valid CSS class name.
     * @param opt_useIframeMask Work around windowed controls z-index issue by using an iframe instead of a div for bg element.
     * @param opt_domHelper Optional DOM helper; see {@link goog.ui.Component} for semantics.
     */
    constructor (opt_class ? : string , opt_useIframeMask ? : boolean , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    createDom ( ) : void ;
    /**
     * Returns a dragger for moving the dialog and adds a class for the move cursor.
     * Defaults to allow dragging of the title only, but can be overridden if
     * different drag targets or dragging behavior is desired.
     */
    createDragger ( ) : ಠ_ಠ.clutz.goog.fx.Dragger ;
    decorateInternal (element : Element | null ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    exitDocument ( ) : void ;
    /**
     * Returns the background mask element so that more complicated things can be
     * done with the background region.  Renders if the DOM is not yet created.
     */
    getBackgroundElement ( ) : Element | null ;
    /**
     * Gets the opacity of the background mask.
     */
    getBackgroundElementOpacity ( ) : number ;
    /**
     * Returns the button element so that more complicated things can be done with
     * the button area.  Renders if the DOM is not yet created.
     */
    getButtonElement ( ) : Element | null ;
    /**
     * Returns the button set being used.
     */
    getButtonSet ( ) : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet | null ;
    getClass ( ) : string ;
    /**
     * Gets the content HTML of the content element as a plain string.
     *
     * Note that this method returns the HTML markup that was previously set via
     * setContent(). In particular, the HTML returned by this method does not
     * reflect any changes to the content element's DOM that were made my means
     * other than setContent().
     */
    getContent ( ) : string ;
    /**
     * Returns the content element so that more complicated things can be done with
     * the content area.  Renders if the DOM is not yet created.  Overrides
     * {@link goog.ui.Component#getContentElement}.
     */
    getContentElement ( ) : Element | null ;
    getCssClass ( ) : string ;
    /**
     * Returns the dialog element so that more complicated things can be done with
     * the dialog box.  Renders if the DOM is not yet created.
     */
    getDialogElement ( ) : Element | null ;
    getDisposeOnHide ( ) : boolean ;
    getDraggable ( ) : boolean ;
    getHasTitleCloseButton ( ) : boolean ;
    getModal ( ) : boolean ;
    /**
     * Returns the dialog's preferred ARIA role. This can be used to override the
     * default dialog role, e.g. with an ARIA role of ALERTDIALOG for a simple
     * warning or confirmation dialog.
     */
    getPreferredAriaRole ( ) : ಠ_ಠ.clutz.goog.a11y.aria.Role ;
    /**
     * Gets the content HTML of the content element.
     */
    getSafeHtmlContent ( ) : ಠ_ಠ.clutz.goog.html.SafeHtml | null ;
    /**
     * Gets the title.
     */
    getTitle ( ) : string ;
    /**
     * Returns the title close element so that more complicated things can be done
     * with the close area of the title.  Renders if the DOM is not yet created.
     */
    getTitleCloseElement ( ) : Element | null ;
    /**
     * Returns the title element so that more complicated things can be done with
     * the title.  Renders if the DOM is not yet created.
     */
    getTitleElement ( ) : Element | null ;
    /**
     * Returns the title text element so that more complicated things can be done
     * with the text of the title.  Renders if the DOM is not yet created.
     */
    getTitleTextElement ( ) : Element | null ;
    isEscapeToCancel ( ) : boolean ;
    onHide ( ) : void ;
    onShow ( ) : void ;
    /**
     * Sets the opacity of the background mask.
     * @param opacity Background mask opacity.
     */
    setBackgroundElementOpacity (opacity : number ) : void ;
    /**
     * Sets the button set to use.
     * Note: Passing in null will cause no button set to be rendered.
     * @param buttons The button set to use.
     */
    setButtonSet (buttons : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet | null ) : void ;
    /**
     * Sets whether the dialog should be disposed when it is hidden.  By default
     * dialogs are not disposed when they are hidden.
     * @param b Whether the dialog should get disposed when it gets hidden.
     */
    setDisposeOnHide (b : boolean ) : void ;
    /**
     * Sets whether the dialog can be dragged.
     * @param draggable Whether the dialog can be dragged.
     */
    setDraggable (draggable : boolean ) : void ;
    setEscapeToCancel (b : boolean ) : void ;
    /**
     * Sets whether the dialog should have a close button in the title bar. There
     * will always be an element for the title close button, but setting this
     * parameter to false will cause it to be hidden and have no active listener.
     * @param b Whether this dialog should have a title close button.
     */
    setHasTitleCloseButton (b : boolean ) : void ;
    /**
     * Sets the modal property of the dialog. In case the dialog is already
     * inDocument, renders the modal background elements according to the specified
     * modal parameter.
     *
     * Note that non-modal dialogs cannot use an iframe mask.
     * @param modal Whether the dialog is modal.
     */
    setModal (modal : boolean ) : void ;
    /**
     * Sets the dialog's preferred ARIA role. This can be used to override the
     * default dialog role, e.g. with an ARIA role of ALERTDIALOG for a simple
     * warning or confirmation dialog.
     * @param role This dialog's preferred ARIA role.
     */
    setPreferredAriaRole (role : ಠ_ಠ.clutz.goog.a11y.aria.Role ) : void ;
    /**
     * Allows arbitrary HTML to be set in the content element.
     * @param html Content HTML.
     */
    setSafeHtmlContent (html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
    /**
     * Allows plain text to be set in the content element.
     * @param text Content plain text. Newlines are preserved.
     */
    setTextContent (text : string ) : void ;
    /**
     * Sets the title.
     * @param title The title text.
     */
    setTitle (title : string ) : void ;
    /**
     * Sets the visibility of the dialog box and moves focus to the
     * default button. Lazily renders the component if needed. After this
     * method returns, isVisible() will always return the new state, even
     * if there is a transition.
     * @param visible Whether the dialog should be visible.
     */
    setVisible (visible : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Dialog'): typeof ಠ_ಠ.clutz.goog.ui.Dialog;
}
declare module 'goog:goog.ui.Dialog' {
  import alias = ಠ_ಠ.clutz.goog.ui.Dialog;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Dialog {
  /**
   * A button set defines the behaviour of a set of buttons that the dialog can
   * show.  Uses the {@link goog.structs.Map} interface.
   */
  class ButtonSet extends ButtonSet_Instance {
    static CONTINUE_SAVE_CANCEL : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet ;
    static OK : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet ;
    static OK_CANCEL : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet ;
    static YES_NO : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet ;
    static YES_NO_CANCEL : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet ;
    /**
     * Creates a new ButtonSet with 'Continue', 'Save', and 'Cancel' (default)
     * buttons.
     */
    static createContinueSaveCancel ( ) : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet ;
    /**
     * Creates a new ButtonSet with a single 'OK' button, which is also set with
     * cancel button semantics so that pressing escape will close the dialog.
     */
    static createOk ( ) : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet ;
    /**
     * Creates a new ButtonSet with 'OK' (default) and 'Cancel' buttons.
     */
    static createOkCancel ( ) : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet ;
    /**
     * Creates a new ButtonSet with 'Yes' (default) and 'No' buttons.
     */
    static createYesNo ( ) : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet ;
    /**
     * Creates a new ButtonSet with 'Yes', 'No' (default), and 'Cancel' buttons.
     */
    static createYesNoCancel ( ) : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet ;
  }
  class ButtonSet_Instance extends ಠ_ಠ.clutz.goog.structs.Map < any , any > {
    /**
     * A button set defines the behaviour of a set of buttons that the dialog can
     * show.  Uses the {@link goog.structs.Map} interface.
     * @param opt_domHelper Optional DOM helper; see {@link goog.ui.Component} for semantics.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    dom_ : ಠ_ಠ.clutz.goog.dom.DomHelper ;
    /**
     * Adds a button (an object with a key and caption) to this button set. Buttons
     * will be displayed in the order they are added.
     * @param button The button key and caption.
     * @param opt_isDefault Whether this button is the default button. Dialog will dispatch for this button if enter is pressed.
     * @param opt_isCancel Whether this button has the same behavior as cancel. If escape is pressed this button will fire.
     */
    addButton (button : { caption : string , key : string } , opt_isDefault ? : boolean , opt_isCancel ? : boolean ) : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet ;
    /**
     * Attaches the button set to an element, rendering it inside.
     * @param el Container.
     */
    attachToElement (el : Element | null ) : void ;
    /**
     * Decorates the given element by adding any {@code button} elements found
     * among its descendants to the button set.  The first button found is assumed
     * to be the default and will receive focus when the button set is rendered.
     * If a button with a name of {@link goog.ui.Dialog.DefaultButtonKeys.CANCEL}
     * is found, it is assumed to have "Cancel" semantics.
     * TODO(attila):  ButtonSet should be a goog.ui.Component.  Really.
     * @param element The element to decorate; should contain buttons.
     */
    decorate (element : Element | null ) : void ;
    /**
     * Returns all the HTML Button elements in the button set container.
     */
    getAllButtons ( ) : NodeList < any > ;
    /**
     * Returns the HTML Button element.
     * @param key The button to return.
     */
    getButton (key : string ) : Element | null ;
    /**
     * Returns the cancel button.
     */
    getCancel ( ) : string | null ;
    /**
     * Returns the default button.
     */
    getDefault ( ) : string | null ;
    /**
     * Returns the dom helper that is being used on this component.
     */
    getDomHelper ( ) : ಠ_ಠ.clutz.goog.dom.DomHelper ;
    /**
     * Gets the component's element.
     */
    getElement ( ) : Element | null ;
    /**
     * Renders the button set inside its container element.
     */
    render ( ) : void ;
    /**
     * Adds a button to the button set.  Buttons will be displayed in the order they
     * are added.
     * @param key Key used to identify the button in events.
     * @param caption A string caption or a DOM node that can be appended to a button element.
     * @param opt_isDefault Whether this button is the default button, Dialog will dispatch for this button if enter is pressed.
     * @param opt_isCancel Whether this button has the same behaviour as cancel.  If escape is pressed this button will fire.
     */
    set (key : any , caption : any , opt_isDefault ? : boolean , opt_isCancel ? : boolean ) : ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet ;
    /**
     * Enables or disables all of the buttons in this set.
     * @param enabled True to enable; false to disable.
     */
    setAllButtonsEnabled (enabled : boolean ) : void ;
    /**
     * Enables or disables a button in this set by key. If the button is not found,
     * does nothing.
     * @param key The button to enable or disable.
     * @param enabled True to enable; false to disable.
     */
    setButtonEnabled (key : string , enabled : boolean ) : void ;
    /**
     * Sets the cancel button.
     * @param key The cancel button.
     */
    setCancel (key : string | null ) : void ;
    /**
     * Sets the default button.
     * @param key The default button.
     */
    setDefault (key : string | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Dialog.ButtonSet'): typeof ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
}
declare module 'goog:goog.ui.Dialog.ButtonSet' {
  import alias = ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet {
  /**
   * The standard buttons (keys associated with captions).
   */
  type DefaultButtons = { caption : string , key : string } ;
  var DefaultButtons : {
    CANCEL : DefaultButtons ,
    CONTINUE : DefaultButtons ,
    NO : DefaultButtons ,
    OK : DefaultButtons ,
    SAVE : DefaultButtons ,
    YES : DefaultButtons ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Dialog.ButtonSet.DefaultButtons'): typeof ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet.DefaultButtons;
}
declare module 'goog:goog.ui.Dialog.ButtonSet.DefaultButtons' {
  import alias = ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet.DefaultButtons;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Dialog {
  /**
   * The default captions for the default buttons.
   */
  type DefaultButtonCaptions = string ;
  var DefaultButtonCaptions : {
    CANCEL : DefaultButtonCaptions ,
    CONTINUE : DefaultButtonCaptions ,
    NO : DefaultButtonCaptions ,
    OK : DefaultButtonCaptions ,
    SAVE : DefaultButtonCaptions ,
    YES : DefaultButtonCaptions ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Dialog.DefaultButtonCaptions'): typeof ಠ_ಠ.clutz.goog.ui.Dialog.DefaultButtonCaptions;
}
declare module 'goog:goog.ui.Dialog.DefaultButtonCaptions' {
  import alias = ಠ_ಠ.clutz.goog.ui.Dialog.DefaultButtonCaptions;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Dialog {
  /**
   * The keys used to identify standard buttons in events.
   */
  type DefaultButtonKeys = string ;
  var DefaultButtonKeys : {
    CANCEL : DefaultButtonKeys ,
    CONTINUE : DefaultButtonKeys ,
    NO : DefaultButtonKeys ,
    OK : DefaultButtonKeys ,
    SAVE : DefaultButtonKeys ,
    YES : DefaultButtonKeys ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Dialog.DefaultButtonKeys'): typeof ಠ_ಠ.clutz.goog.ui.Dialog.DefaultButtonKeys;
}
declare module 'goog:goog.ui.Dialog.DefaultButtonKeys' {
  import alias = ಠ_ಠ.clutz.goog.ui.Dialog.DefaultButtonKeys;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Dialog {
  /**
   * Dialog event class.
   */
  class Event extends Event_Instance {
  }
  class Event_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * Dialog event class.
     * @param key Key identifier for the button.
     * @param caption Caption on the button (might be i18nlized).
     */
    constructor (key : string , caption : string | Element | null ) ;
    caption : string | Element | null ;
    key : string ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Dialog.Event'): typeof ಠ_ಠ.clutz.goog.ui.Dialog.Event;
}
declare module 'goog:goog.ui.Dialog.Event' {
  import alias = ಠ_ಠ.clutz.goog.ui.Dialog.Event;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Dialog {
  /**
   * Events dispatched by dialogs.
   */
  type EventType = string ;
  var EventType : {
    AFTER_HIDE : EventType ,
    AFTER_SHOW : EventType ,
    SELECT : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Dialog.EventType'): typeof ಠ_ಠ.clutz.goog.ui.Dialog.EventType;
}
declare module 'goog:goog.ui.Dialog.EventType' {
  import alias = ಠ_ಠ.clutz.goog.ui.Dialog.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Flat renderer for {@link goog.ui.Button}s.  Flat buttons can contain
   * almost arbitrary HTML content, will flow like inline elements, but can be
   * styled like block-level elements.
   */
  class FlatButtonRenderer extends FlatButtonRenderer_Instance {
    /**
     * Default CSS class to be applied to the root element of components rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.FlatButtonRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.FlatButtonRenderer ;
  }
  class FlatButtonRenderer_Instance extends ಠ_ಠ.clutz.goog.ui.ButtonRenderer_Instance {
    /**
     * Returns true if this renderer can decorate the element.  Overrides
     * {@link goog.ui.ButtonRenderer#canDecorate} by returning true if the
     * element is a DIV, false otherwise.
     * @param element Element to decorate.
     */
    canDecorate (element : Element | null ) : boolean ;
    /**
     * Returns the control's contents wrapped in a div element, with
     * the renderer's own CSS class and additional state-specific classes applied
     * to it, and the button's disabled attribute set or cleared as needed.
     * Overrides {@link goog.ui.ButtonRenderer#createDom}.
     * @param button Button to render.
     */
    createDom (button : ಠ_ಠ.clutz.goog.ui.Control | null ) : Element ;
    /**
     * Takes an existing element and decorates it with the flat button control.
     * Initializes the control's ID, content, tooltip, value, and state based
     * on the ID of the element, its child nodes, and its CSS classes, respectively.
     * Returns the element.  Overrides {@link goog.ui.ButtonRenderer#decorate}.
     * @param button Button instance to decorate the element.
     * @param element Element to decorate.
     */
    decorate (button : ಠ_ಠ.clutz.goog.ui.Control | null , element : Element | null ) : Element | null ;
    /**
     * Returns the ARIA role to be applied to flat buttons.
     */
    getAriaRole ( ) : ಠ_ಠ.clutz.goog.a11y.aria.Role | undefined ;
    /**
     * Returns the CSS class to be applied to the root element of components
     * rendered using this renderer.
     */
    getCssClass ( ) : string ;
    /**
     * Flat buttons can't use the value attribute since they are div elements.
     * Overrides {@link goog.ui.ButtonRenderer#getValue} to prevent trying to
     * access the element's value.
     * @param element The button control's root element.
     */
    getValue (element : Element | null ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.FlatButtonRenderer'): typeof ಠ_ಠ.clutz.goog.ui.FlatButtonRenderer;
}
declare module 'goog:goog.ui.FlatButtonRenderer' {
  import alias = ಠ_ಠ.clutz.goog.ui.FlatButtonRenderer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * CSS class name for applying the "display: inline-block" property in a
   * cross-browser way.
   */
  var INLINE_BLOCK_CLASSNAME : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.INLINE_BLOCK_CLASSNAME'): typeof ಠ_ಠ.clutz.goog.ui.INLINE_BLOCK_CLASSNAME;
}
declare module 'goog:goog.ui.INLINE_BLOCK_CLASSNAME' {
  import alias = ಠ_ಠ.clutz.goog.ui.INLINE_BLOCK_CLASSNAME;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Creates a new id generator.
   */
  class IdGenerator extends IdGenerator_Instance {
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.IdGenerator ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.IdGenerator ;
  }
  class IdGenerator_Instance {
    private noStructuralTyping_: any;
    /**
     * Gets the next unique ID.
     */
    getNextUniqueId ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.IdGenerator'): typeof ಠ_ಠ.clutz.goog.ui.IdGenerator;
}
declare module 'goog:goog.ui.IdGenerator' {
  import alias = ಠ_ಠ.clutz.goog.ui.IdGenerator;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Link renderer for {@link goog.ui.Button}s.  Link buttons can contain
   * almost arbitrary HTML content, will flow like inline elements, but can be
   * styled like block-level elements.
   */
  class LinkButtonRenderer extends LinkButtonRenderer_Instance {
    /**
     * Default CSS class to be applied to the root element of components rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.LinkButtonRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.LinkButtonRenderer ;
  }
  class LinkButtonRenderer_Instance extends ಠ_ಠ.clutz.goog.ui.FlatButtonRenderer_Instance {
    getCssClass ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.LinkButtonRenderer'): typeof ಠ_ಠ.clutz.goog.ui.LinkButtonRenderer;
}
declare module 'goog:goog.ui.LinkButtonRenderer' {
  import alias = ಠ_ಠ.clutz.goog.ui.LinkButtonRenderer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Helper object to control aria visibility of the rest of the page (background)
   * for a given element. Example usage is to restrict screenreader focus to
   * a modal popup while it is visible.
   *
   * WARNING: This will work only if the element is rendered directly in the
   * 'body' element.
   */
  class ModalAriaVisibilityHelper extends ModalAriaVisibilityHelper_Instance {
  }
  class ModalAriaVisibilityHelper_Instance {
    private noStructuralTyping_: any;
    /**
     * Helper object to control aria visibility of the rest of the page (background)
     * for a given element. Example usage is to restrict screenreader focus to
     * a modal popup while it is visible.
     *
     * WARNING: This will work only if the element is rendered directly in the
     * 'body' element.
     * @param element The given element.
     * @param domHelper DomHelper for the page.
     */
    constructor (element : Element , domHelper : ಠ_ಠ.clutz.goog.dom.DomHelper ) ;
    /**
     * Sets aria-hidden on the rest of the page to restrict screen reader focus.
     * Top-level elements with an explicit aria-hidden state are not altered.
     * @param hide Whether to hide or show the rest of the page.
     */
    setBackgroundVisibility (hide : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.ModalAriaVisibilityHelper'): typeof ಠ_ಠ.clutz.goog.ui.ModalAriaVisibilityHelper;
}
declare module 'goog:goog.ui.ModalAriaVisibilityHelper' {
  import alias = ಠ_ಠ.clutz.goog.ui.ModalAriaVisibilityHelper;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Base class for modal popup UI components. This can also be used as
   * a standalone component to render a modal popup with an empty div.
   *
   * WARNING: goog.ui.ModalPopup is only guaranteed to work when it is rendered
   * directly in the 'body' element.
   *
   * The Html structure of the modal popup is:
   * <pre>
   * Element         Function              Class-name, goog-modalpopup = default
   * ----------------------------------------------------------------------------
   * - iframe         Iframe mask           goog-modalpopup-bg
   * - div            Background mask       goog-modalpopup-bg
   * - div            Modal popup area      goog-modalpopup
   * - span           Tab catcher
   * </pre>
   */
  class ModalPopup extends ModalPopup_Instance {
  }
  class ModalPopup_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
    /**
     * Base class for modal popup UI components. This can also be used as
     * a standalone component to render a modal popup with an empty div.
     *
     * WARNING: goog.ui.ModalPopup is only guaranteed to work when it is rendered
     * directly in the 'body' element.
     *
     * The Html structure of the modal popup is:
     * <pre>
     * Element         Function              Class-name, goog-modalpopup = default
     * ----------------------------------------------------------------------------
     * - iframe         Iframe mask           goog-modalpopup-bg
     * - div            Background mask       goog-modalpopup-bg
     * - div            Modal popup area      goog-modalpopup
     * - span           Tab catcher
     * </pre>
     * @param opt_useIframeMask Work around windowed controls z-index issue by using an iframe instead of a div for bg element.
     * @param opt_domHelper Optional DOM helper; see {@link goog.ui.Component} for semantics.
     */
    constructor (opt_useIframeMask ? : boolean , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    canDecorate (element : Element | null ) : boolean ;
    /**
     * Creates the initial DOM representation for the modal popup.
     */
    createDom ( ) : void ;
    decorateInternal (element : Element | null ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    exitDocument ( ) : void ;
    /**
     * Focuses on the modal popup.
     */
    focus ( ) : void ;
    /**
     * Returns the background mask element.
     */
    getBackgroundElement ( ) : Element | null ;
    /**
     * Returns the background iframe mask element, if any.
     */
    getBackgroundIframe ( ) : Element | null ;
    getCssClass ( ) : string ;
    /**
     * Returns the magic tab catcher element used to detect when the user has
     * rolled focus off of the popup content.  It is automatically created during
     * the createDom method() and can be used by subclasses to implement custom
     * tab-loop behavior.
     */
    getTabCatcherElement ( ) : Element | null ;
    isVisible ( ) : boolean ;
    /**
     * Handles focus events.  Makes sure that if the user tabs past the
     * elements in the modal popup, the focus wraps back to the beginning, and that
     * if the user shift-tabs past the front of the modal popup, focus wraps around
     * to the end.
     * @param e Browser's event object.
     */
    onFocus (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Called after the popup is hidden. If there is a transition, this
     * will be called after the transition completed or stopped.
     */
    onHide ( ) : void ;
    /**
     * Called after the popup is shown. If there is a transition, this
     * will be called after the transition completed or stopped.
     */
    onShow ( ) : void ;
    /**
     * Centers the modal popup in the viewport, taking scrolling into account.
     */
    reposition ( ) : void ;
    /**
     * Sets aria-hidden on the rest of the page to restrict screen reader focus.
     * Top-level elements with an explicit aria-hidden state are not altered.
     * @param hide Whether to hide or show the rest of the page.
     */
    setA11YDetectBackground (hide : boolean ) : void ;
    /**
     * Sets the transitions to show and hide the popup and background.
     * @param popupShowTransition Transition to show the popup.
     * @param popupHideTransition Transition to hide the popup.
     * @param bgShowTransition Transition to show the background.
     * @param bgHideTransition Transition to hide the background.
     */
    setTransition (popupShowTransition : ಠ_ಠ.clutz.goog.fx.Transition , popupHideTransition : ಠ_ಠ.clutz.goog.fx.Transition , bgShowTransition : ಠ_ಠ.clutz.goog.fx.Transition , bgHideTransition : ಠ_ಠ.clutz.goog.fx.Transition ) : void ;
    /**
     * Sets the visibility of the modal popup box and focus to the popup.
     * @param visible Whether the modal popup should be visible.
     */
    setVisible (visible : boolean ) : void ;
    /**
     * Allow a shift-tab from the top of the modal popup to the last tabbable
     * element by moving focus to the tab catcher. This should be called after
     * catching a wrapping shift-tab event and before allowing it to propagate, so
     * that focus will land on the last tabbable element before the tab catcher.
     */
    setupBackwardTabWrap ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.ModalPopup'): typeof ಠ_ಠ.clutz.goog.ui.ModalPopup;
}
declare module 'goog:goog.ui.ModalPopup' {
  import alias = ಠ_ಠ.clutz.goog.ui.ModalPopup;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Renderer for {@link goog.ui.Button}s.  Renders and decorates native HTML
   * button elements.  Since native HTML buttons have built-in support for many
   * features, overrides many expensive (and redundant) superclass methods to
   * be no-ops.
   */
  class NativeButtonRenderer extends NativeButtonRenderer_Instance {
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.NativeButtonRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.NativeButtonRenderer ;
  }
  class NativeButtonRenderer_Instance extends ಠ_ಠ.clutz.goog.ui.ButtonRenderer_Instance {
    /**
     * Overrides {@link goog.ui.ButtonRenderer#canDecorate} by returning true only
     * if the element is an HTML button.
     * @param element Element to decorate.
     */
    canDecorate (element : Element | null ) : boolean ;
    /**
     * Returns the button's contents wrapped in a native HTML button element.  Sets
     * the button's disabled attribute as needed.
     * @param button Button to render.
     */
    createDom (button : ಠ_ಠ.clutz.goog.ui.Control | null ) : Element | null ;
    decorate (button : ಠ_ಠ.clutz.goog.ui.Control | null , element : Element | null ) : Element | null ;
    getAriaRole ( ) : ಠ_ಠ.clutz.goog.a11y.aria.Role | undefined ;
    getValue (element : Element | null ) : string | undefined ;
    /**
     * Native buttons natively support BiDi and keyboard focus.
     */
    initializeDom (button : ಠ_ಠ.clutz.goog.ui.Control | null ) : void ;
    isFocusable (button : ಠ_ಠ.clutz.goog.ui.Control | null ) : boolean ;
    setState (button : ಠ_ಠ.clutz.goog.ui.Control | null , state : ಠ_ಠ.clutz.goog.ui.Component.State , enable : boolean ) : void ;
    setValue (element : Element | null , value : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.NativeButtonRenderer'): typeof ಠ_ಠ.clutz.goog.ui.NativeButtonRenderer;
}
declare module 'goog:goog.ui.NativeButtonRenderer' {
  import alias = ಠ_ಠ.clutz.goog.ui.NativeButtonRenderer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * The PopupBase class provides functionality for showing and hiding a generic
   * container element. It also provides the option for hiding the popup element
   * if the user clicks outside the popup or the popup loses focus.
   */
  class PopupBase extends PopupBase_Instance {
    /**
     * A time in ms used to debounce events that happen right after each other.
     *
     * A note about why this is necessary. There are two cases to consider.
     * First case, a popup will usually see a focus event right after it's launched
     * because it's typical for it to be launched in a mouse-down event which will
     * then move focus to the launching button. We don't want to think this is a
     * separate user action moving focus. Second case, a user clicks on the
     * launcher button to close the menu. In that case, we'll close the menu in the
     * focus event and then show it again because of the mouse down event, even
     * though the intention is to just close the menu. This workaround appears to
     * be the least intrusive fix.
     */
    static DEBOUNCE_DELAY_MS : number ;
  }
  class PopupBase_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * The PopupBase class provides functionality for showing and hiding a generic
     * container element. It also provides the option for hiding the popup element
     * if the user clicks outside the popup or the popup loses focus.
     * @param opt_element A DOM element for the popup.
     * @param opt_type Type of popup.
     */
    constructor (opt_element ? : Element | null , opt_type ? : ಠ_ಠ.clutz.goog.ui.PopupBase.Type ) ;
    /**
     * Mouse events that occur within an autoHide partner will not hide a popup
     * set to autoHide.
     * @param partner The auto hide partner element.
     */
    addAutoHidePartner (partner : Element ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns whether the Popup dismisses itself when the user clicks outside of
     * it.
     */
    getAutoHide ( ) : boolean ;
    /**
     * Returns the region inside which the Popup dismisses itself when the user
     * clicks, or null if it's the entire document.
     */
    getAutoHideRegion ( ) : Element | null ;
    /**
     * Returns the dom element that should be used for the popup.
     */
    getElement ( ) : Element | null ;
    getEnableCrossIframeDismissal ( ) : boolean ;
    /**
     * Returns the event handler for the popup. All event listeners belonging to
     * this handler are removed when the tooltip is hidden. Therefore,
     * the recommended usage of this handler is to listen on events in
     * {@link #onShow}.
     */
    getHandler < T > ( ) : ಠ_ಠ.clutz.goog.events.EventHandler < T > | null ;
    getHideOnEscape ( ) : boolean ;
    /**
     * Returns the time when the popup was last hidden.
     */
    getLastHideTime ( ) : number ;
    /**
     * Returns the time when the popup was last shown.
     */
    getLastShowTime ( ) : number ;
    getType ( ) : ಠ_ಠ.clutz.goog.ui.PopupBase.Type ;
    /**
     * Hides the popup element.
     */
    hidePopupElement ( ) : void ;
    /**
     * Returns whether the popup is currently visible or was visible within about
     * 150 ms ago. This is used by clients to handle a very specific, but common,
     * popup scenario. The button that launches the popup should close the popup
     * on mouse down if the popup is alrady open. The problem is that the popup
     * closes itself during the capture phase of the mouse down and thus the button
     * thinks it's hidden and this should show it again. This method provides a
     * good heuristic for clients. Typically in their event handler they will have
     * code that is:
     *
     * if (menu.isOrWasRecentlyVisible()) {
     * menu.setVisible(false);
     * } else {
     * ... // code to position menu and initialize other state
     * menu.setVisible(true);
     * }
     */
    isOrWasRecentlyVisible ( ) : boolean ;
    /**
     * Returns whether the popup is currently visible.
     */
    isVisible ( ) : boolean ;
    /**
     * Called before the popup is hidden. Derived classes can override to hook this
     * event but should make sure to call the parent class method.
     * @param opt_target Target of the event causing the hide.
     */
    onBeforeHide (opt_target ? : Node | null ) : boolean ;
    /**
     * Called before the popup is shown. Derived classes can override to hook this
     * event but should make sure to call the parent class method.
     */
    onBeforeShow ( ) : boolean ;
    /**
     * Called after the popup is hidden. Derived classes can override to hook this
     * event but should make sure to call the parent class method.
     * @param opt_target Target of the event causing the hide.
     */
    onHide (opt_target ? : Node | null ) : void ;
    /**
     * Called after the popup is shown. Derived classes can override to hook this
     * event but should make sure to call the parent class method.
     */
    onShow ( ) : void ;
    /**
     * Removes a previously registered auto hide partner.
     * @param partner The auto hide partner element.
     */
    removeAutoHidePartner (partner : Element ) : void ;
    /**
     * Repositions the popup according to the current state.
     * Should be overriden by subclases.
     */
    reposition ( ) : void ;
    /**
     * Sets whether the Popup dismisses itself when the user clicks outside of it.
     * @param autoHide Whether to autohide on an external click.
     */
    setAutoHide (autoHide : boolean ) : void ;
    /**
     * Sets the region inside which the Popup dismisses itself when the user
     * clicks.
     * @param element The DOM element for autohide.
     */
    setAutoHideRegion (element : Element | null ) : void ;
    /**
     * Specifies the dom element that should be used for the popup.
     * @param elt A DOM element for the popup.
     */
    setElement (elt : Element | null ) : void ;
    /**
     * Sets whether clicks in other iframes should dismiss this popup.  In some
     * cases it should be disabled, because it can cause spurious
     * @param enable Whether to enable cross iframe dismissal.
     */
    setEnableCrossIframeDismissal (enable : boolean ) : void ;
    /**
     * Sets whether the Popup dismisses itself on the escape key.
     * @param hideOnEscape Whether to autohide on the escape key.
     */
    setHideOnEscape (hideOnEscape : boolean ) : void ;
    /**
     * Sets whether the popup should hide itself asynchronously using a timeout
     * instead of synchronously.
     * @param b Whether to hide async.
     */
    setShouldHideAsync (b : boolean ) : void ;
    /**
     * Sets transition animation on showing and hiding the popup.
     * @param opt_showTransition Transition to play on showing the popup.
     * @param opt_hideTransition Transition to play on hiding the popup.
     */
    setTransition (opt_showTransition ? : ಠ_ಠ.clutz.goog.fx.Transition | null , opt_hideTransition ? : ಠ_ಠ.clutz.goog.fx.Transition | null ) : void ;
    /**
     * Specifies the type of popup to use.
     * @param type Type of popup.
     */
    setType (type : ಠ_ಠ.clutz.goog.ui.PopupBase.Type ) : void ;
    /**
     * Sets whether the popup should be visible. After this method
     * returns, isVisible() will always return the new state, even if
     * there is a transition.
     * @param visible Desired visibility state.
     */
    setVisible (visible : boolean ) : void ;
    /**
     * Returns whether the popup should hide itself asynchronously using a timeout
     * instead of synchronously.
     */
    shouldHideAsync ( ) : boolean ;
    /**
     * Shows the popup element.
     */
    showPopupElement ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.PopupBase'): typeof ಠ_ಠ.clutz.goog.ui.PopupBase;
}
declare module 'goog:goog.ui.PopupBase' {
  import alias = ಠ_ಠ.clutz.goog.ui.PopupBase;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.PopupBase {
  /**
   * Constants for event type fired by Popup
   */
  type EventType = string ;
  var EventType : {
    BEFORE_HIDE : EventType ,
    BEFORE_SHOW : EventType ,
    HIDE : EventType ,
    SHOW : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.PopupBase.EventType'): typeof ಠ_ಠ.clutz.goog.ui.PopupBase.EventType;
}
declare module 'goog:goog.ui.PopupBase.EventType' {
  import alias = ಠ_ಠ.clutz.goog.ui.PopupBase.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.PopupBase {
  /**
   * Constants for type of Popup
   */
  type Type = string ;
  var Type : {
    MOVE_OFFSCREEN : Type ,
    TOGGLE_DISPLAY : Type ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.PopupBase.Type'): typeof ಠ_ಠ.clutz.goog.ui.PopupBase.Type;
}
declare module 'goog:goog.ui.PopupBase.Type' {
  import alias = ಠ_ಠ.clutz.goog.ui.PopupBase.Type;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Tab control, designed to be hosted in a {@link goog.ui.TabBar}.  The tab's
   * DOM may be different based on the configuration of the containing tab bar,
   * so tabs should only be rendered or decorated as children of a tab bar.
   */
  class Tab extends Tab_Instance {
  }
  class Tab_Instance extends ಠ_ಠ.clutz.goog.ui.Control_Instance {
    /**
     * Tab control, designed to be hosted in a {@link goog.ui.TabBar}.  The tab's
     * DOM may be different based on the configuration of the containing tab bar,
     * so tabs should only be rendered or decorated as children of a tab bar.
     * @param content Text caption or DOM structure to display as the tab's caption (if any).
     * @param opt_renderer Optional renderer used to render or decorate the tab.
     * @param opt_domHelper Optional DOM helper, used for document interaction.
     */
    constructor (content : string | Node | null | Node [] | NodeList < Node > , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.TabRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    getTooltip ( ) : string | undefined ;
    /**
     * Sets the tab tooltip text.  If the tab has already been rendered, updates
     * its tooltip.
     * @param tooltip New tooltip text.
     */
    setTooltip (tooltip : string ) : void ;
    /**
     * Sets the tab tooltip text.  Considered protected; to be called only by the
     * renderer during element decoration.
     * @param tooltip New tooltip text.
     */
    setTooltipInternal (tooltip : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.Tab'): typeof ಠ_ಠ.clutz.goog.ui.Tab;
}
declare module 'goog:goog.ui.Tab' {
  import alias = ಠ_ಠ.clutz.goog.ui.Tab;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Tab bar UI component.  A tab bar contains tabs, rendered above, below,
   * before, or after tab contents.  Tabs in tab bars dispatch the following
   * events:
   * <ul>
   * <li>{@link goog.ui.Component.EventType.ACTION} when activated via the
   * keyboard or the mouse,
   * <li>{@link goog.ui.Component.EventType.SELECT} when selected, and
   * <li>{@link goog.ui.Component.EventType.UNSELECT} when deselected.
   * </ul>
   * Clients may listen for all of the above events on the tab bar itself, and
   * refer to the event target to identify the tab that dispatched the event.
   * When an unselected tab is clicked for the first time, it dispatches both a
   * {@code SELECT} event and an {@code ACTION} event; subsequent clicks on an
   * already selected tab only result in {@code ACTION} events.
   */
  class TabBar extends TabBar_Instance {
    /**
     * Returns the {@link goog.ui.Container.Orientation} that is implied by the
     * given {@link goog.ui.TabBar.Location}.
     * @param location Tab bar location.
     */
    static getOrientationFromLocation (location : ಠ_ಠ.clutz.goog.ui.TabBar.Location ) : ಠ_ಠ.clutz.goog.ui.Container.Orientation ;
  }
  class TabBar_Instance extends ಠ_ಠ.clutz.goog.ui.Container_Instance {
    /**
     * Tab bar UI component.  A tab bar contains tabs, rendered above, below,
     * before, or after tab contents.  Tabs in tab bars dispatch the following
     * events:
     * <ul>
     * <li>{@link goog.ui.Component.EventType.ACTION} when activated via the
     * keyboard or the mouse,
     * <li>{@link goog.ui.Component.EventType.SELECT} when selected, and
     * <li>{@link goog.ui.Component.EventType.UNSELECT} when deselected.
     * </ul>
     * Clients may listen for all of the above events on the tab bar itself, and
     * refer to the event target to identify the tab that dispatched the event.
     * When an unselected tab is clicked for the first time, it dispatches both a
     * {@code SELECT} event and an {@code ACTION} event; subsequent clicks on an
     * already selected tab only result in {@code ACTION} events.
     * @param opt_location Tab bar location; defaults to {@link goog.ui.TabBar.Location.TOP}.
     * @param opt_renderer Renderer used to render or decorate the container; defaults to {@link goog.ui.TabBarRenderer}.
     * @param opt_domHelper DOM helper, used for document interaction.
     */
    constructor (opt_location ? : ಠ_ಠ.clutz.goog.ui.TabBar.Location , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.TabBarRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * If the specified tab is the currently selected tab, deselects it, and
     * selects the closest selectable tab in the tab bar (first looking before,
     * then after the deselected tab).  Does nothing if the argument is not the
     * currently selected tab.  Called internally when a tab is removed, hidden,
     * or disabled, to ensure that another tab is selected instead.
     * @param tab Tab to deselect (if any).
     */
    deselectIfSelected (tab : ಠ_ಠ.clutz.goog.ui.Control | null ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    getLocation ( ) : ಠ_ಠ.clutz.goog.ui.TabBar.Location ;
    getSelectedTab ( ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    getSelectedTabIndex ( ) : number ;
    /**
     * Handles focus events dispatched by the tab bar's key event target.  If no tab
     * is currently highlighted, highlights the selected tab or the first tab if no
     * tab is selected either.
     * @param e Focus event to handle.
     */
    handleFocus (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles {@code DISABLE} events displayed by tabs.
     * @param e Disable event to handle.
     */
    handleTabDisable (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles {@code HIDE} events displayed by tabs.
     * @param e Hide event to handle.
     */
    handleTabHide (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles {@code SELECT} events dispatched by tabs as they become selected.
     * @param e Select event to handle.
     */
    handleTabSelect (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles {@code UNSELECT} events dispatched by tabs as they become deselected.
     * @param e Unselect event to handle.
     */
    handleTabUnselect (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    isAutoSelectTabs ( ) : boolean ;
    /**
     * Returns true if the tab is selectable, false otherwise.  Only visible and
     * enabled tabs are selectable.
     * @param tab Tab to check.
     */
    isSelectableTab (tab : ಠ_ಠ.clutz.goog.ui.Control | null ) : boolean ;
    /**
     * Removes the tab from the tab bar.  Overrides the superclass implementation
     * by deselecting the tab being removed.  Since {@link #removeChildAt} uses
     * {@link #removeChild} internally, we only need to override this method.
     * @param tab Tab to remove.
     * @param opt_unrender Whether to call {@code exitDocument} on the removed tab, and detach its DOM from the document (defaults to false).
     */
    removeChild (tab : string | ಠ_ಠ.clutz.goog.ui.Component | null , opt_unrender ? : boolean ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Enables or disables auto-selecting tabs using the keyboard.  If auto-select
     * is enabled, keyboard navigation switches tabs immediately, otherwise it just
     * moves the highlight.
     * @param enable Whether keyboard navigation should change the selected tab, or just move the highlight.
     */
    setAutoSelectTabs (enable : boolean ) : void ;
    /**
     * Highlights the tab at the given index in response to a keyboard event.
     * Overrides the superclass implementation by also selecting the tab if
     * {@link #isAutoSelectTabs} returns true.
     * @param index Index of tab to highlight.
     */
    setHighlightedIndexFromKeyEvent (index : number ) : void ;
    /**
     * Sets the location of the tab bar relative to tab contents.
     * @param location Tab bar location relative to tab contents.
     */
    setLocation (location : ಠ_ಠ.clutz.goog.ui.TabBar.Location ) : void ;
    /**
     * Selects the given tab.
     * @param tab Tab to select (null to select none).
     */
    setSelectedTab (tab : ಠ_ಠ.clutz.goog.ui.Control | null ) : void ;
    /**
     * Selects the tab at the given index.
     * @param index Index of the tab to select (-1 to select none).
     */
    setSelectedTabIndex (index : number ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.TabBar'): typeof ಠ_ಠ.clutz.goog.ui.TabBar;
}
declare module 'goog:goog.ui.TabBar' {
  import alias = ಠ_ಠ.clutz.goog.ui.TabBar;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.TabBar {
  /**
   * Tab bar location relative to tab contents.
   */
  type Location = string ;
  var Location : {
    BOTTOM : Location ,
    END : Location ,
    START : Location ,
    TOP : Location ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.TabBar.Location'): typeof ಠ_ಠ.clutz.goog.ui.TabBar.Location;
}
declare module 'goog:goog.ui.TabBar.Location' {
  import alias = ಠ_ಠ.clutz.goog.ui.TabBar.Location;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Default renderer for {@link goog.ui.TabBar}s, based on the {@code TabPane}
   * code.  The tab bar's DOM structure is determined by its orientation and
   * location relative to tab contents.  For example, a horizontal tab bar
   * located above tab contents looks like this:
   *
   * <div class="goog-tab-bar goog-tab-bar-horizontal goog-tab-bar-top">
   * ...(tabs here)...
   * </div>
   */
  class TabBarRenderer extends TabBarRenderer_Instance {
    /**
     * Default CSS class to be applied to the root element of components rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.TabBarRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.TabBarRenderer ;
  }
  class TabBarRenderer_Instance extends ಠ_ಠ.clutz.goog.ui.ContainerRenderer_Instance {
    /**
     * Returns all CSS class names applicable to the tab bar, based on its state.
     * Overrides the superclass implementation by appending the location-specific
     * class name to the list.
     * @param tabBar Tab bar whose CSS classes are to be returned.
     */
    getClassNames (tabBar : ಠ_ಠ.clutz.goog.ui.Container | null ) : string [] ;
    /**
     * Returns the CSS class name to be applied to the root element of all tab bars
     * rendered or decorated using this renderer.
     */
    getCssClass ( ) : string ;
    /**
     * Sets the tab bar's state based on the given CSS class name, encountered
     * during decoration.  Overrides the superclass implementation by recognizing
     * class names representing tab bar orientation and location.
     * @param tabBar Tab bar to configure.
     * @param className CSS class name.
     * @param baseClass Base class name used as the root of state-specific class names (typically the renderer's own class name).
     */
    setStateFromClassName (tabBar : ಠ_ಠ.clutz.goog.ui.Container | null , className : string , baseClass : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.TabBarRenderer'): typeof ಠ_ಠ.clutz.goog.ui.TabBarRenderer;
}
declare module 'goog:goog.ui.TabBarRenderer' {
  import alias = ಠ_ಠ.clutz.goog.ui.TabBarRenderer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Default renderer for {@link goog.ui.Tab}s, based on the {@code TabPane} code.
   */
  class TabRenderer extends TabRenderer_Instance {
    /**
     * Default CSS class to be applied to the root element of components rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.TabRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.TabRenderer ;
  }
  class TabRenderer_Instance extends ಠ_ಠ.clutz.goog.ui.ControlRenderer_Instance {
    /**
     * Returns the tab's contents wrapped in a DIV, with the renderer's own CSS
     * class and additional state-specific classes applied to it.  Creates the
     * following DOM structure:
     *
     * <div class="goog-tab" title="Title">Content</div>
     * @param tab Tab to render.
     */
    createDom (tab : ಠ_ಠ.clutz.goog.ui.Control | null ) : Element | null ;
    /**
     * Decorates the element with the tab.  Initializes the tab's ID, content,
     * tooltip, and state based on the ID of the element, its title, child nodes,
     * and CSS classes, respectively.  Returns the element.
     * @param tab Tab to decorate the element.
     * @param element Element to decorate.
     */
    decorate (tab : ಠ_ಠ.clutz.goog.ui.Control | null , element : Element | null ) : Element | null ;
    /**
     * Returns the ARIA role to be applied to the tab element.
     * See http://wiki/Main/ARIA for more info.
     */
    getAriaRole ( ) : ಠ_ಠ.clutz.goog.a11y.aria.Role ;
    /**
     * Returns the CSS class name to be applied to the root element of all tabs
     * rendered or decorated using this renderer.
     */
    getCssClass ( ) : string ;
    /**
     * Takes a tab's root element, and returns its tooltip text, or the empty
     * string if the element has no tooltip.
     * @param element The tab's root element.
     */
    getTooltip (element : Element | null ) : string ;
    /**
     * Takes a tab's root element and a tooltip string, and updates the element
     * with the new tooltip.  If the new tooltip is null or undefined, sets the
     * element's title to the empty string.
     * @param element The tab's root element.
     * @param tooltip New tooltip text (if any).
     */
    setTooltip (element : Element | null , tooltip : string | null | undefined ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.TabRenderer'): typeof ಠ_ಠ.clutz.goog.ui.TabRenderer;
}
declare module 'goog:goog.ui.TabRenderer' {
  import alias = ಠ_ಠ.clutz.goog.ui.TabRenderer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
  /**
   * Creates an object that represents a dialog box.
   */
  class AbstractDialog extends AbstractDialog_Instance {
  }
  class AbstractDialog_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Creates an object that represents a dialog box.
     * @param domHelper DomHelper to be used to create the dialog's dom structure.
     */
    constructor (domHelper : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Creates and returns the goog.ui.Dialog control that is being wrapped
     * by this object.
     */
    createDialogControl ( ) : ಠ_ಠ.clutz.goog.ui.Dialog ;
    /**
     * Creates and returns the event object to be used when dispatching the OK
     * event to listeners, or returns null to prevent the dialog from closing.
     * Subclasses should override this to return their own subclass of
     * goog.events.Event that includes all data a plugin would need from the dialog.
     * @param e The event object dispatched by the wrapped dialog.
     */
    createOkEvent (a : ಠ_ಠ.clutz.goog.events.Event | null ) : ಠ_ಠ.clutz.goog.events.Event | null ;
    /**
     * Disposes of the dialog. If the dialog is open, it will be hidden and
     * AFTER_HIDE will be dispatched.
     */
    disposeInternal ( ) : void ;
    /**
     * The DOM helper for the parent document.
     */
    dom : ಠ_ಠ.clutz.goog.dom.DomHelper | null ;
    /**
     * Returns the HTML Button element for the button added to this dialog with
     * the given button id.
     * @param buttonId The id of the button to get.
     */
    getButtonElement (buttonId : string ) : Element | null ;
    /**
     * Returns the HTML Button element for the Cancel button in this dialog.
     */
    getCancelButtonElement ( ) : Element | null ;
    /**
     * Returns the HTML Button element for the OK button in this dialog.
     */
    getOkButtonElement ( ) : Element | null ;
    /**
     * Handles the event dispatched by the wrapped dialog control when the user
     * clicks the Cancel button. Simply dispatches a CANCEL event.
     */
    handleCancel ( ) : boolean ;
    /**
     * Handles the event dispatched by the wrapped dialog control when the user
     * clicks the OK button. Attempts to create the OK event object and dispatches
     * it if successful.
     * @param e wrapped dialog OK event object.
     */
    handleOk (e : ಠ_ಠ.clutz.goog.ui.Dialog.Event | null ) : boolean ;
    /**
     * Hides the dialog, causing AFTER_HIDE to fire.
     */
    hide ( ) : void ;
    isOpen ( ) : boolean ;
    /**
     * Runs the handler registered on the OK button event and closes the dialog if
     * that handler succeeds.
     * This is useful in cases such as double-clicking an item in the dialog is
     * equivalent to selecting it and clicking the default button.
     */
    processOkAndClose ( ) : void ;
    /**
     * Causes the dialog box to appear, centered on the screen. Lazily creates the
     * dialog if needed.
     */
    show ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.editor.AbstractDialog'): typeof ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog;
}
declare module 'goog:goog.ui.editor.AbstractDialog' {
  import alias = ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog {
  /**
   * A builder class for the dialog control. All methods except build return this.
   */
  class Builder extends Builder_Instance {
  }
  class Builder_Instance {
    private noStructuralTyping_: any;
    /**
     * A builder class for the dialog control. All methods except build return this.
     * @param editorDialog Editor dialog object that will wrap the wrapped dialog object this builder will create.
     */
    constructor (editorDialog : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog | null ) ;
    /**
     * Adds a custom button to the dialog.
     * @param label The caption for the button.
     * @param handler Function called when the button is clicked. It is recommended that this function be a method in the concrete subclass of AbstractDialog using this Builder, and that it dispatch an event (see {@link handleOk}).
     * @param opt_buttonId Identifier to be used to access the button when calling AbstractDialog.getButtonElement().
     */
    addButton (label : string , handler : (a : ಠ_ಠ.clutz.goog.ui.Dialog.EventType ) => any , opt_buttonId ? : string ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder ;
    /**
     * Adds a Cancel button to the dialog. Clicking this button will cause {@link
     * handleCancel} to run, subsequently dispatching a CANCEL event.
     * @param opt_label The caption for the button, if not "Cancel".
     */
    addCancelButton (opt_label ? : string ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder ;
    /**
     * Puts a CSS class on the dialog's main element.
     * @param className The class to add.
     */
    addClassName (className : string ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder ;
    /**
     * Adds an OK button to the dialog. Clicking this button will cause {@link
     * handleOk} to run, subsequently dispatching an OK event.
     * @param opt_label The caption for the button, if not "OK".
     */
    addOkButton (opt_label ? : string ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder ;
    /**
     * Builds the wrapped dialog control. May only be called once, after which
     * no more methods may be called on this builder.
     */
    build ( ) : ಠ_ಠ.clutz.goog.ui.Dialog ;
    /**
     * Sets the content element of the dialog.
     * @param contentElem An element for the main body.
     */
    setContent (contentElem : Element | null ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder ;
    /**
     * Sets the title of the dialog.
     * @param title Title HTML (escaped).
     */
    setTitle (title : string ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.editor.AbstractDialog.Builder'): typeof ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder;
}
declare module 'goog:goog.ui.editor.AbstractDialog.Builder' {
  import alias = ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog {
  /**
   * Event type constants for events the dialog fires.
   */
  type EventType = string ;
  var EventType : {
    AFTER_HIDE : EventType ,
    CANCEL : EventType ,
    OK : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.editor.AbstractDialog.EventType'): typeof ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.EventType;
}
declare module 'goog:goog.ui.editor.AbstractDialog.EventType' {
  import alias = ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
  /**
   * Property bubble UI element.
   */
  class Bubble extends Bubble_Instance {
    /**
     * The css class name of the bubble container element.
     */
    static BUBBLE_CLASSNAME : string ;
  }
  class Bubble_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Property bubble UI element.
     * @param parent The parent element for this bubble.
     * @param zIndex The z index to draw the bubble at.
     */
    constructor (parent : Element | null , zIndex : number ) ;
    /**
     * Adds a panel to the bubble.
     * @param type The type of bubble panel this is.  Should usually be the same as the tagName of the targetElement.  This ensures multiple bubble panels don't appear for the same element.
     * @param title The title of the panel.
     * @param targetElement The target element of the bubble.
     * @param contentFn Function that when called with a container element, will add relevant panel content to it.
     * @param opt_preferTopPosition Whether to prefer placing the bubble above the element instead of below it.  Defaults to preferring below. If any panel prefers the top position, the top position is used.
     */
    addPanel (type : string , title : string , targetElement : Element | null , contentFn : (a : Element | null ) => undefined , opt_preferTopPosition ? : boolean ) : string ;
    /**
     * Creates and adds DOM for the bubble UI to the given container.  This default
     * implementation just returns the container itself.
     * @param dom DOM helper to use.
     * @param container Element to add the new elements to.
     */
    createBubbleDom (dom : ಠ_ಠ.clutz.goog.dom.DomHelper , container : Element ) : Element ;
    disposeInternal ( ) : void ;
    getContainerElement ( ) : Element | null ;
    getContentElement ( ) : Element | null ;
    getEventHandler < T > ( ) : ಠ_ಠ.clutz.goog.events.EventHandler < T > | null ;
    /**
     * Returns the margin box.
     */
    getMarginBox ( ) : ಠ_ಠ.clutz.goog.math.Box | null ;
    /**
     * Returns the viewport box to use when positioning the bubble.
     */
    getViewportBox ( ) : ಠ_ಠ.clutz.goog.math.Box | null ;
    /**
     * Handles the popup's hide event by removing all panels and dispatching a
     * HIDE event.
     */
    handlePopupHide ( ) : void ;
    /**
     * Returns whether there is already a panel of the given type.
     * @param type Type of panel to check.
     */
    hasPanelOfType (type : string ) : boolean ;
    /**
     * Returns the visibility of the bubble.
     */
    isVisible ( ) : boolean ;
    /**
     * A logger for goog.ui.editor.Bubble.
     */
    logger : ಠ_ಠ.clutz.goog.debug.Logger | null ;
    /**
     * Removes the panel with the given id.
     * @param id The id of the panel.
     */
    removePanel (id : string ) : void ;
    /**
     * Positions and displays this bubble below its targetElement. Assumes that
     * the bubbleContainer is already contained in the document object it applies
     * to.
     */
    reposition ( ) : void ;
    /**
     * Sets whether the bubble dismisses itself when the user clicks outside of it.
     * @param autoHide Whether to autohide on an external click.
     */
    setAutoHide (autoHide : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.editor.Bubble'): typeof ಠ_ಠ.clutz.goog.ui.editor.Bubble;
}
declare module 'goog:goog.ui.editor.Bubble' {
  import alias = ಠ_ಠ.clutz.goog.ui.editor.Bubble;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
  /**
   * A type of goog.ui.editor.AbstractDialog for editing/creating a link.
   */
  class LinkDialog extends LinkDialog_Instance {
    /**
     * Checks if {@code str} contains {@code "nofollow"} as a separate word.
     * @param str String to be tested.  This is usually {@code rel} attribute of an {@code HTMLAnchorElement} object.
     */
    static hasNoFollow (str : string ) : boolean ;
    /**
     * Removes {@code "nofollow"} from {@code rel} if it's present as a separate
     * word.
     * @param rel Input string.  This is usually {@code rel} attribute of an {@code HTMLAnchorElement} object.
     */
    static removeNoFollow (rel : string ) : string ;
  }
  class LinkDialog_Instance extends ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog_Instance {
    /**
     * A type of goog.ui.editor.AbstractDialog for editing/creating a link.
     * @param domHelper DomHelper to be used to create the dialog's dom structure.
     * @param link The target link.
     */
    constructor (domHelper : ಠ_ಠ.clutz.goog.dom.DomHelper | null , link : ಠ_ಠ.clutz.goog.editor.Link | null ) ;
    createDialogControl ( ) : ಠ_ಠ.clutz.goog.ui.Dialog ;
    /**
     * Creates and returns the event object to be used when dispatching the OK
     * event to listeners based on which tab is currently selected and the contents
     * of the input fields of that tab.
     */
    createOkEvent (a ? : ಠ_ಠ.clutz.goog.events.Event | null ) : ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.OkEvent ;
    hide ( ) : void ;
    /**
     * Tells the dialog whether the autogeneration of text to display is to be
     * enabled.
     * @param enable Whether to enable the feature.
     */
    setAutogenFeatureEnabled (enable : boolean ) : void ;
    /**
     * Sets the warning message to show to users about including email addresses on
     * public web pages.
     * @param emailWarning Warning message to show users about including email addresses on the web.
     */
    setEmailWarning (emailWarning : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
    /**
     * Tells the plugin whether to stop leaking the page's url via the referrer
     * header when the "test this link" link is clicked.
     * @param stop Whether to stop leaking the referrer.
     */
    setStopReferrerLeaks (stop : boolean ) : void ;
    /**
     * Tells the dialog whether to show the 'text to display' div.
     * When the target element of the dialog is an image, there is no link text
     * to modify. This function can be used for this kind of situations.
     * @param visible Whether to make 'text to display' div visible.
     */
    setTextToDisplayVisible (visible : boolean ) : void ;
    show ( ) : void ;
    /**
     * Tells the dialog to show a checkbox where the user can choose to have the
     * link open in a new window.
     * @param startChecked Whether to check the checkbox the first time the dialog is shown. Subesquent times the checkbox will remember its previous state.
     */
    showOpenLinkInNewWindow (startChecked : boolean ) : void ;
    /**
     * Tells the dialog to show a checkbox where the user can choose to add
     * 'rel=nofollow' attribute to the link.
     */
    showRelNoFollow ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.editor.LinkDialog'): typeof ಠ_ಠ.clutz.goog.ui.editor.LinkDialog;
}
declare module 'goog:goog.ui.editor.LinkDialog' {
  import alias = ಠ_ಠ.clutz.goog.ui.editor.LinkDialog;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.LinkDialog {
  /**
   * Event fired before testing a link by opening it in another window.
   * Calling preventDefault will stop the link from being opened.
   */
  class BeforeTestLinkEvent extends BeforeTestLinkEvent_Instance {
  }
  class BeforeTestLinkEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * Event fired before testing a link by opening it in another window.
     * Calling preventDefault will stop the link from being opened.
     * @param url Url of the link being tested.
     */
    constructor (url : string ) ;
    /**
     * The url of the link being tested.
     */
    url : string ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.editor.LinkDialog.BeforeTestLinkEvent'): typeof ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.BeforeTestLinkEvent;
}
declare module 'goog:goog.ui.editor.LinkDialog.BeforeTestLinkEvent' {
  import alias = ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.BeforeTestLinkEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.LinkDialog {
  /**
   * Events specific to the link dialog.
   */
  type EventType = string ;
  var EventType : {
    BEFORE_TEST_LINK : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.editor.LinkDialog.EventType'): typeof ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.EventType;
}
declare module 'goog:goog.ui.editor.LinkDialog.EventType' {
  import alias = ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.LinkDialog {
  /**
   * OK event object for the link dialog.
   */
  class OkEvent extends OkEvent_Instance {
  }
  class OkEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
    /**
     * OK event object for the link dialog.
     * @param linkText Text the user chose to display for the link.
     * @param linkUrl Url the user chose for the link to point to.
     * @param openInNewWindow Whether the link should open in a new window when clicked.
     * @param noFollow Whether the link should have 'rel=nofollow' attribute.
     */
    constructor (linkText : string , linkUrl : string , openInNewWindow : boolean , noFollow : boolean ) ;
    /**
     * The text of the link edited in the dialog.
     */
    linkText : string ;
    /**
     * The url of the link edited in the dialog.
     */
    linkUrl : string ;
    /**
     * Whether the link should have 'rel=nofollow' attribute.
     */
    noFollow : boolean ;
    /**
     * Whether the link should open in a new window when clicked.
     */
    openInNewWindow : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.editor.LinkDialog.OkEvent'): typeof ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.OkEvent;
}
declare module 'goog:goog.ui.editor.LinkDialog.OkEvent' {
  import alias = ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.OkEvent;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
  /**
   * Creates a new Editor-style tab pane.
   */
  class TabPane extends TabPane_Instance {
  }
  class TabPane_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
    /**
     * Creates a new Editor-style tab pane.
     * @param dom The dom helper for the window to create this tab pane in.
     * @param opt_caption Optional caption of the tab pane.
     */
    constructor (dom : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_caption ? : string ) ;
    /**
     * Adds a tab to the tab pane.
     * @param id The id of the tab to add.
     * @param caption The caption of the tab.
     * @param tooltip The tooltip for the tab.
     * @param groupName for the radio button group.
     * @param content The content element to show when this tab is selected.
     */
    addTab (id : string , caption : string , tooltip : string , groupName : string , content : Element | null ) : void ;
    enterDocument ( ) : void ;
    getCurrentTabId ( ) : string ;
    /**
     * Selects the tab with the given id.
     * @param id Id of the tab to select.
     */
    setSelectedTabId (id : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.editor.TabPane'): typeof ಠ_ಠ.clutz.goog.ui.editor.TabPane;
}
declare module 'goog:goog.ui.editor.TabPane' {
  import alias = ಠ_ಠ.clutz.goog.ui.editor.TabPane;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.messages {
  function getEmailExplanationSafeHtml ( ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
  function getTrLinkExplanationSafeHtml ( ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.editor.messages'): typeof ಠ_ಠ.clutz.goog.ui.editor.messages;
}
declare module 'goog:goog.ui.editor.messages' {
  import alias = ಠ_ಠ.clutz.goog.ui.editor.messages;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.emoji {
  /**
   * Creates an emoji.
   *
   * A simple wrapper for an emoji.
   */
  class Emoji extends Emoji_Instance {
    /**
     * The name of the goomoji attribute, used for emoji image elements.
     */
    static ATTRIBUTE : string ;
    /**
     * The name of the goomoji data-attribute, used for emoji image elements. Data
     * attributes are the preferred way in HTML5 to set custom attributes.
     */
    static DATA_ATTRIBUTE : string ;
  }
  class Emoji_Instance {
    private noStructuralTyping_: any;
    /**
     * Creates an emoji.
     *
     * A simple wrapper for an emoji.
     * @param url URL pointing to the source image for the emoji.
     * @param id The id of the emoji, e.g., 'std.1'.
     * @param opt_height The height of the emoji, if undefined the natural height of the emoji is used.
     * @param opt_width The width of the emoji, if undefined the natural width of the emoji is used.
     * @param opt_altText The alt text for the emoji image, eg. the unicode character representation of the emoji.
     */
    constructor (url : string , id : string , opt_height ? : number , opt_width ? : number , opt_altText ? : string ) ;
    getAltText ( ) : string | null ;
    getHeight ( ) : number | null ;
    getId ( ) : string ;
    getUrl ( ) : string ;
    getWidth ( ) : number | null ;
  }
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.emoji.Emoji'): typeof ಠ_ಠ.clutz.goog.ui.emoji.Emoji;
}
declare module 'goog:goog.ui.emoji.Emoji' {
  import alias = ಠ_ಠ.clutz.goog.ui.emoji.Emoji;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.registry {
  /**
   * Returns an instance of {@link goog.ui.Component} or a subclass suitable to
   * decorate the given element, based on its CSS class.
   *
   * TODO(nnaze): Type of element should be {!Element}.
   * @param element Element to decorate.
   */
  function getDecorator (element : Element | null ) : ಠ_ಠ.clutz.goog.ui.Component | null ;
  /**
   * Returns the {@link goog.ui.Component} instance created by the decorator
   * factory function registered for the given CSS class name, or null if no
   * decorator factory function was found.
   * @param className CSS class name.
   */
  function getDecoratorByClassName (className : string ) : ಠ_ಠ.clutz.goog.ui.Component | null ;
  /**
   * Given a {@link goog.ui.Component} constructor, returns an instance of its
   * default renderer.  If the default renderer is a singleton, returns the
   * singleton instance; otherwise returns a new instance of the renderer class.
   * @param componentCtor Component constructor function (for example {@code goog.ui.Button}).
   */
  function getDefaultRenderer (componentCtor : ( ( ...a : any [] ) => any ) | null ) : ಠ_ಠ.clutz.goog.ui.ControlRenderer | null ;
  /**
   * Resets the global renderer and decorator registry.
   */
  function reset ( ) : void ;
  /**
   * Maps a CSS class name to a function that returns a new instance of
   * {@link goog.ui.Component} or a subclass, suitable to decorate an element
   * that has the specified CSS class.
   * @param className CSS class name.
   * @param decoratorFn No-argument function that returns a new instance of a {@link goog.ui.Component} to decorate an element.
   */
  function setDecoratorByClassName (className : string , decoratorFn : ( ( ...a : any [] ) => any ) | null ) : void ;
  /**
   * Sets the default renderer for the given {@link goog.ui.Component}
   * constructor.
   * @param componentCtor Component constructor function (for example {@code goog.ui.Button}).
   * @param rendererCtor Renderer constructor function (for example {@code goog.ui.ButtonRenderer}).
   */
  function setDefaultRenderer (componentCtor : ( ( ...a : any [] ) => any ) | null , rendererCtor : ( ( ...a : any [] ) => any ) | null ) : void ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.ui.registry'): typeof ಠ_ಠ.clutz.goog.ui.registry;
}
declare module 'goog:goog.ui.registry' {
  import alias = ಠ_ಠ.clutz.goog.ui.registry;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.uri.utils {
  /**
   * Appends a single URI parameter.
   *
   * Repeated calls to this can exhibit quadratic behavior in IE6 due to the
   * way string append works, though it should be limited given the 2kb limit.
   * @param uri The original URI, which may already have query data.
   * @param key The key, which must already be URI encoded.
   * @param opt_value The value, which will be stringized and encoded (assumed not already to be encoded).  If omitted, undefined, or null, the key will be added as a valueless parameter.
   */
  function appendParam (uri : string , key : string , opt_value ? : any ) : string ;
  /**
   * Appends URI parameters to an existing URI.
   *
   * The variable arguments may contain alternating keys and values.  Keys are
   * assumed to be already URI encoded.  The values should not be URI-encoded,
   * and will instead be encoded by this function.
   * <pre>
   * appendParams('http://www.foo.com?existing=true',
   * 'key1', 'value1',
   * 'key2', 'value?willBeEncoded',
   * 'key3', ['valueA', 'valueB', 'valueC'],
   * 'key4', null);
   * result: 'http://www.foo.com?existing=true&' +
   * 'key1=value1&' +
   * 'key2=value%3FwillBeEncoded&' +
   * 'key3=valueA&key3=valueB&key3=valueC'
   * </pre>
   *
   * A single call to this function will not exhibit quadratic behavior in IE,
   * whereas multiple repeated calls may, although the effect is limited by
   * fact that URL's generally can't exceed 2kb.
   * @param uri The original URI, which may already have query data.
   * @param var_args An array or argument list conforming to goog.uri.utils.QueryArray.
   */
  function appendParams (uri : string ,  ...var_args : any [] ) : string ;
  /**
   * Appends query parameters from a map.
   * @param uri The original URI, which may already have query data.
   * @param map An object where keys are URI-encoded parameter keys, and the values are arbitrary types or arrays. Keys with a null value are dropped.
   */
  function appendParamsFromMap (uri : string , map : { [ /* warning: coerced from ? */ key: string ]: any } ) : string ;
  /**
   * Generates a URI path using a given URI and a path with checks to
   * prevent consecutive "//". The baseUri passed in must not contain
   * query or fragment identifiers. The path to append may not contain query or
   * fragment identifiers.
   * @param baseUri URI to use as the base.
   * @param path Path to append.
   */
  function appendPath (baseUri : string , path : string ) : string ;
  /**
   * Builds a URI string from already-encoded parts.
   *
   * No encoding is performed.  Any component may be omitted as either null or
   * undefined.
   * @param opt_scheme The scheme such as 'http'.
   * @param opt_userInfo The user name before the '@'.
   * @param opt_domain The domain such as 'www.google.com', already URI-encoded.
   * @param opt_port The port number.
   * @param opt_path The path, already URI-encoded.  If it is not empty, it must begin with a slash.
   * @param opt_queryData The URI-encoded query data.
   * @param opt_fragment The URI-encoded fragment identifier.
   */
  function buildFromEncodedParts (opt_scheme ? : string | null , opt_userInfo ? : string | null , opt_domain ? : string | null , opt_port ? : string | number | null , opt_path ? : string | null , opt_queryData ? : string | null , opt_fragment ? : string | null ) : string ;
  /**
   * Builds a query data string from a sequence of alternating keys and values.
   * Currently generates "&key&" for empty args.
   * @param keysAndValues Alternating keys and values.  See the typedef.
   * @param opt_startIndex A start offset into the arary, defaults to 0.
   */
  function buildQueryData (keysAndValues : ಠ_ಠ.clutz.goog.uri.utils.QueryArray , opt_startIndex ? : number ) : string ;
  /**
   * Builds a query data string from a map.
   * Currently generates "&key&" for empty args.
   * @param map An object where keys are URI-encoded parameter keys, and the values are arbitrary types or arrays. Keys with a null value are dropped.
   */
  function buildQueryDataFromMap (map : { [ key: string ]: any } ) : string ;
  function getDomain (uri : string ) : string | null ;
  function getDomainEncoded (uri : string ) : string | null ;
  /**
   * Gets the effective scheme for the URL.  If the URL is relative then the
   * scheme is derived from the page's location.
   * @param uri The URI to examine.
   */
  function getEffectiveScheme (uri : string ) : string ;
  function getFragment (uri : string ) : string | null ;
  function getFragmentEncoded (uri : string ) : string | null ;
  /**
   * Extracts everything up to the port of the URI.
   * @param uri The URI string.
   */
  function getHost (uri : string ) : string ;
  /**
   * Gets the first value of a query parameter.
   * @param uri The URI to process.  May contain a fragment.
   * @param keyEncoded The URI-encoded key.  Case-sensitive.
   */
  function getParamValue (uri : string , keyEncoded : string ) : string | null ;
  /**
   * Gets all values of a query parameter.
   * @param uri The URI to process.  May contain a fragment.
   * @param keyEncoded The URI-encoded key.  Case-sensitive.
   */
  function getParamValues (uri : string , keyEncoded : string ) : string [] ;
  function getPath (uri : string ) : string | null ;
  /**
   * Extracts the path of the URL and everything after.
   * @param uri The URI string.
   */
  function getPathAndAfter (uri : string ) : string ;
  function getPathEncoded (uri : string ) : string | null ;
  function getPort (uri : string ) : number | null ;
  function getQueryData (uri : string ) : string | null ;
  function getScheme (uri : string ) : string | null ;
  function getUserInfo (uri : string ) : string | null ;
  function getUserInfoEncoded (uri : string ) : string | null ;
  /**
   * Determines if the URI contains a specific key.
   *
   * Performs no object instantiations.
   * @param uri The URI to process.  May contain a fragment identifier.
   * @param keyEncoded The URI-encoded key.  Case-sensitive.
   */
  function hasParam (uri : string , keyEncoded : string ) : boolean ;
  /**
   * Ensures that two URI's have the exact same domain, scheme, and port.
   *
   * Unlike the version in goog.Uri, this checks protocol, and therefore is
   * suitable for checking against the browser's same-origin policy.
   * @param uri1 The first URI.
   * @param uri2 The second URI.
   */
  function haveSameDomain (uri1 : string , uri2 : string ) : boolean ;
  /**
   * Sets the zx parameter of a URI to a random value.
   * @param uri Any URI.
   */
  function makeUnique (uri : string ) : string ;
  /**
   * Parses encoded query parameters and calls callback function for every
   * parameter found in the string.
   *
   * Missing value of parameter (e.g. “…&key&…”) is treated as if the value was an
   * empty string.  Keys may be empty strings (e.g. “…&=value&…”) which also means
   * that “…&=&…” and “…&&…” will result in an empty key and value.
   * @param encodedQuery Encoded query string excluding question mark at the beginning.
   * @param callback Function called for every parameter found in query string.  The first argument (name) will not be urldecoded (so the function is consistent with buildQueryData), but the second will.  If the parameter has no value (i.e. “=” was not present) the second argument (value) will be an empty string.
   */
  function parseQueryData (encodedQuery : string , callback : (a : string , b : string ) => any ) : void ;
  /**
   * Gets the URI with the fragment identifier removed.
   * @param uri The URI to examine.
   */
  function removeFragment (uri : string ) : string ;
  /**
   * Removes all instances of a query parameter.
   * @param uri The URI to process.  Must not contain a fragment.
   * @param keyEncoded The URI-encoded key.
   */
  function removeParam (uri : string , keyEncoded : string ) : string ;
  function setFragmentEncoded (uri : string , fragment : string | null ) : string ;
  /**
   * Replaces all existing definitions of a parameter with a single definition.
   *
   * Repeated calls to this can exhibit quadratic behavior due to the need to
   * find existing instances and reconstruct the string, though it should be
   * limited given the 2kb limit.  Consider using appendParams to append multiple
   * parameters in bulk.
   * @param uri The original URI, which may already have query data.
   * @param keyEncoded The key, which must already be URI encoded.
   * @param value The value, which will be stringized and encoded (assumed not already to be encoded).
   */
  function setParam (uri : string , keyEncoded : string , value : any ) : string ;
  /**
   * Replaces the path.
   * @param uri URI to use as the base.
   * @param path New path.
   */
  function setPath (uri : string , path : string ) : string ;
  /**
   * Splits a URI into its component parts.
   *
   * Each component can be accessed via the component indices; for example:
   * <pre>
   * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
   * </pre>
   * @param uri The URI string to examine.
   */
  function split (uri : string ) : ( string | undefined ) [] ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.uri.utils'): typeof ಠ_ಠ.clutz.goog.uri.utils;
}
declare module 'goog:goog.uri.utils' {
  import alias = ಠ_ಠ.clutz.goog.uri.utils;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.uri.utils {
  /**
   * The index of each URI component in the return value of goog.uri.utils.split.
   */
  type ComponentIndex = number ;
  var ComponentIndex : {
    DOMAIN : ComponentIndex ,
    FRAGMENT : ComponentIndex ,
    PATH : ComponentIndex ,
    PORT : ComponentIndex ,
    QUERY_DATA : ComponentIndex ,
    SCHEME : ComponentIndex ,
    USER_INFO : ComponentIndex ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.uri.utils.ComponentIndex'): typeof ಠ_ಠ.clutz.goog.uri.utils.ComponentIndex;
}
declare module 'goog:goog.uri.utils.ComponentIndex' {
  import alias = ಠ_ಠ.clutz.goog.uri.utils.ComponentIndex;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.uri.utils {
  /**
   * An array representing a set of query parameters with alternating keys
   * and values.
   *
   * Keys are assumed to be URI encoded already and live at even indices.  See
   * goog.uri.utils.QueryValue for details on how parameter values are encoded.
   *
   * Example:
   * <pre>
   * var data = [
   * // Simple param: ?name=BobBarker
   * 'name', 'BobBarker',
   * // Conditional param -- may be omitted entirely.
   * 'specialDietaryNeeds', hasDietaryNeeds() ? getDietaryNeeds() : null,
   * // Multi-valued param: &house=LosAngeles&house=NewYork&house=null
   * 'house', ['LosAngeles', 'NewYork', null]
   * ];
   * </pre>
   */
  type QueryArray = any [] ;
}
declare module 'goog:goog.uri.utils.QueryArray' {
  import alias = ಠ_ಠ.clutz.goog.uri.utils.QueryArray;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.uri.utils {
  /**
   * Supported query parameter values by the parameter serializing utilities.
   *
   * If a value is null or undefined, the key-value pair is skipped, as an easy
   * way to omit parameters conditionally.  Non-array parameters are converted
   * to a string and URI encoded.  Array values are expanded into multiple
   * &key=value pairs, with each element stringized and URI-encoded.
   */
  type QueryValue = any ;
}
declare module 'goog:goog.uri.utils.QueryValue' {
  import alias = ಠ_ಠ.clutz.goog.uri.utils.QueryValue;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.uri.utils {
  /**
   * Standard supported query parameters.
   */
  type StandardQueryParam = string ;
  var StandardQueryParam : {
    RANDOM : StandardQueryParam ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.uri.utils.StandardQueryParam'): typeof ಠ_ಠ.clutz.goog.uri.utils.StandardQueryParam;
}
declare module 'goog:goog.uri.utils.StandardQueryParam' {
  import alias = ಠ_ಠ.clutz.goog.uri.utils.StandardQueryParam;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.userAgent {
  /**
   * Whether the user agent is running on Android.
   */
  var ANDROID : boolean ;
  var ASSUME_ANDROID : boolean ;
  var ASSUME_ANY_VERSION : boolean ;
  var ASSUME_EDGE : boolean ;
  var ASSUME_GECKO : boolean ;
  var ASSUME_IE : boolean ;
  var ASSUME_IPAD : boolean ;
  var ASSUME_IPHONE : boolean ;
  var ASSUME_IPOD : boolean ;
  var ASSUME_LINUX : boolean ;
  var ASSUME_MAC : boolean ;
  var ASSUME_MOBILE_WEBKIT : boolean ;
  var ASSUME_OPERA : boolean ;
  var ASSUME_WEBKIT : boolean ;
  var ASSUME_WINDOWS : boolean ;
  var ASSUME_X11 : boolean ;
  /**
   * For IE version < 7, documentMode is undefined, so attempt to use the
   * CSS1Compat property to see if we are in standards mode. If we are in
   * standards mode, treat the browser version as the document mode. Otherwise,
   * IE is emulating version 5.
   */
  var DOCUMENT_MODE : number | undefined ;
  /**
   * Whether the user agent is Microsoft Edge.
   */
  var EDGE : boolean ;
  /**
   * Whether the user agent is MS Internet Explorer or MS Edge.
   */
  var EDGE_OR_IE : boolean ;
  /**
   * Whether the user agent is Gecko. Gecko is the rendering engine used by
   * Mozilla, Firefox, and others.
   */
  var GECKO : boolean ;
  /**
   * Whether the user agent is Internet Explorer.
   */
  var IE : boolean ;
  /**
   * Whether the user agent is running on an iPad.
   */
  var IPAD : boolean ;
  /**
   * Whether the user agent is running on an iPhone.
   */
  var IPHONE : boolean ;
  /**
   * Whether the user agent is running on an iPod.
   */
  var IPOD : boolean ;
  /**
   * Whether the user agent is running on a Linux operating system.
   *
   * Note that goog.userAgent.LINUX considers ChromeOS to be Linux,
   * while goog.labs.userAgent.platform considers ChromeOS and
   * Linux to be different OSes.
   */
  var LINUX : boolean ;
  /**
   * Whether the user agent is running on a Macintosh operating system.
   */
  var MAC : boolean ;
  /**
   * Whether the user agent is running on a mobile device.
   *
   * TODO(nnaze): Consider deprecating MOBILE when labs.userAgent
   * is promoted as the gecko/webkit logic is likely inaccurate.
   */
  var MOBILE : boolean ;
  /**
   * Whether the user agent is Opera.
   */
  var OPERA : boolean ;
  /**
   * The platform (operating system) the user agent is running on. Default to
   * empty string because navigator.platform may not be defined (on Rhino, for
   * example).
   */
  var PLATFORM : string ;
  /**
   * Used while transitioning code to use WEBKIT instead.
   */
  var SAFARI : boolean ;
  /**
   * The version of the user agent. This is a string because it might contain
   * 'b' (as in beta) as well as multiple dots.
   */
  var VERSION : string ;
  /**
   * Whether the user agent is WebKit. WebKit is the rendering engine that
   * Safari, Android and others use.
   */
  var WEBKIT : boolean ;
  /**
   * Whether the user agent is running on a Windows operating system.
   */
  var WINDOWS : boolean ;
  /**
   * Whether the user agent is running on a X11 windowing system.
   */
  var X11 : boolean ;
  /**
   * Compares two version numbers.
   * @param v1 Version of first item.
   * @param v2 Version of second item.
   */
  function compare (v1 : string , v2 : string ) : number ;
  /**
   * TODO(nnaze): Change type to "Navigator" and update compilation targets.
   */
  function getNavigator ( ) : Object | null ;
  /**
   * Returns the userAgent string for the current browser.
   */
  function getUserAgentString ( ) : string ;
  /**
   * Deprecated alias to {@code goog.userAgent.isDocumentModeOrHigher}.
   * @param version The version to check.
   */
  function isDocumentMode (a : number ) : boolean ;
  /**
   * Whether the IE effective document mode is higher or the same as the given
   * document mode version.
   * NOTE: Only for IE, return false for another browser.
   * @param documentMode The document mode version to check.
   */
  function isDocumentModeOrHigher (documentMode : number ) : boolean ;
  /**
   * Deprecated alias to {@code goog.userAgent.isVersionOrHigher}.
   * @param version The version to check.
   */
  function isVersion (a : string | number ) : boolean ;
  /**
   * Whether the user agent version is higher or the same as the given version.
   * NOTE: When checking the version numbers for Firefox and Safari, be sure to
   * use the engine's version, not the browser's version number.  For example,
   * Firefox 3.0 corresponds to Gecko 1.9 and Safari 3.0 to Webkit 522.11.
   * Opera and Internet Explorer versions match the product release number.<br>
   * @param version The version to check.
   */
  function isVersionOrHigher (version : string | number ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.userAgent'): typeof ಠ_ಠ.clutz.goog.userAgent;
}
declare module 'goog:goog.userAgent' {
  import alias = ಠ_ಠ.clutz.goog.userAgent;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.userAgent.product {
  /**
   * Whether the code is running on AOSP browser or WebView inside
   * a pre KitKat Android phone or tablet.
   */
  var ANDROID : boolean ;
  var ASSUME_ANDROID : boolean ;
  var ASSUME_CHROME : boolean ;
  var ASSUME_FIREFOX : boolean ;
  var ASSUME_IPAD : boolean ;
  var ASSUME_IPHONE : boolean ;
  var ASSUME_SAFARI : boolean ;
  /**
   * Whether the code is running on the Chrome web browser on any platform
   * or AOSP browser or WebView in a KitKat+ Android phone or tablet.
   */
  var CHROME : boolean ;
  /**
   * Whether the code is running on an Edge web browser.
   */
  var EDGE : boolean ;
  /**
   * Whether the code is running on the Firefox web browser.
   */
  var FIREFOX : boolean ;
  /**
   * Whether the code is running on an IE web browser.
   */
  var IE : boolean ;
  /**
   * Whether the code is running on an iPad.
   */
  var IPAD : boolean ;
  /**
   * Whether the code is running on an iPhone or iPod touch.
   *
   * iPod touch is considered an iPhone for legacy reasons.
   */
  var IPHONE : boolean ;
  /**
   * Whether the code is running on the Opera web browser.
   */
  var OPERA : boolean ;
  /**
   * Whether the code is running on the desktop Safari web browser.
   * Note: the legacy behavior here is only true for Safari not running
   * on iOS.
   */
  var SAFARI : boolean ;
  /**
   * The version of the user agent. This is a string because it might contain
   * 'b' (as in beta) as well as multiple dots.
   */
  var VERSION : string ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.userAgent.product'): typeof ಠ_ಠ.clutz.goog.userAgent.product;
}
declare module 'goog:goog.userAgent.product' {
  import alias = ಠ_ಠ.clutz.goog.userAgent.product;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.userAgent.product {
  /**
   * Whether the user agent product version is higher or the same as the given
   * version.
   * @param version The version to check.
   */
  function isVersion (version : string | number ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.userAgent.product.isVersion'): typeof ಠ_ಠ.clutz.goog.userAgent.product.isVersion;
}
declare module 'goog:goog.userAgent.product.isVersion' {
  import alias = ಠ_ಠ.clutz.goog.userAgent.product.isVersion;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.window {
  /**
   * Default height for popup windows
   */
  var DEFAULT_POPUP_HEIGHT : number ;
  /**
   * Default target for popup windows
   */
  var DEFAULT_POPUP_TARGET : string ;
  /**
   * Default width for popup windows
   */
  var DEFAULT_POPUP_WIDTH : number ;
  /**
   * Opens a new window.
   * @param linkRef If an Object with an 'href' attribute (such as HTMLAnchorElement) is passed then the value of 'href' is used, otherwise  otherwise its toString method is called. Note that if a string|Object is used, it will be sanitized with SafeUrl.sanitize().
   * @param opt_options supports the following options: 'target': (string) target (window name). If null, linkRef.target will be used. 'width': (number) window width. 'height': (number) window height. 'top': (number) distance from top of screen 'left': (number) distance from left of screen 'toolbar': (boolean) show toolbar 'scrollbars': (boolean) show scrollbars 'location': (boolean) show location 'statusbar': (boolean) show statusbar 'menubar': (boolean) show menubar 'resizable': (boolean) resizable 'noreferrer': (boolean) whether to attempt to remove the referrer header from the request headers. Does this by opening a blank window that then redirects to the target url, so users may see some flickering.
   * @param opt_parentWin Parent window that should be used to open the new window.
   */
  function open (linkRef : null | string | Object , opt_options ? : Object | null , opt_parentWin ? : Window | null ) : Window | null ;
  /**
   * Opens a new window without any real content in it.
   *
   * This can be used to get around popup blockers if you need to open a window
   * in response to a user event, but need to do asynchronous work to determine
   * the URL to open, and then set the URL later.
   *
   * Example usage:
   *
   * var newWin = goog.window.openBlank('Loading...');
   * setTimeout(
   * function() {
   * newWin.location.href = 'http://www.google.com';
   * }, 100);
   * @param opt_message String to show in the new window. This string will be HTML-escaped to avoid XSS issues.
   * @param opt_options Options to open window with. {@see goog.window.open for exact option semantics}.
   * @param opt_parentWin Parent window that should be used to open the new window.
   */
  function openBlank (opt_message ? : string , opt_options ? : Object | null , opt_parentWin ? : Window | null ) : Window | null ;
  /**
   * Raise a help popup window, defaulting to "Google standard" size and name.
   *
   * (If your project is using GXPs, consider using {@link PopUpLink.gxp}.)
   * @param linkRef If an Object with an 'href' attribute (such as HTMLAnchorElement) is passed then the value of 'href' is used, otherwise  otherwise its toString method is called. Note that if a string|Object is used, it will be sanitized with SafeUrl.sanitize().
   * @param opt_options Options to open window with. {@see goog.window.open for exact option semantics} Additional wrinkles to the options: - if 'target' field is null, linkRef.target will be used. If *that's* null, the default is "google_popup". - if 'width' field is not specified, the default is 690. - if 'height' field is not specified, the default is 500.
   */
  function popup (linkRef : null | string | Object , opt_options ? : Object | null ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.window'): typeof ಠ_ಠ.clutz.goog.window;
}
declare module 'goog:goog.window' {
  import alias = ಠ_ಠ.clutz.goog.window;
  export = alias;
}
declare namespace ಠ_ಠ.clutz {
  class ANGLE_instanced_arrays extends ANGLE_instanced_arrays_Instance {
  }
  class ANGLE_instanced_arrays_Instance {
    private noStructuralTyping_: any;
    VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE : number ;
    drawArraysInstancedANGLE (mode : number , first : number , count : number , primcount : number ) : any ;
    drawElementsInstancedANGLE (mode : number , count : number , type : number , offset : number , primcount : number ) : any ;
    vertexAttribDivisorANGLE (index : number , divisor : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  function ActiveXObject ( ...a : any [] ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  class AlphaFilter extends AlphaFilter_Instance {
  }
  class AlphaFilter_Instance extends HTMLFilter_Instance {
    Opacity : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class AlphaImageLoaderFilter extends AlphaImageLoaderFilter_Instance {
  }
  class AlphaImageLoaderFilter_Instance extends HTMLFilter_Instance {
    sizingMethod : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Arguments < T > extends Arguments_Instance < T > {
  }
  class Arguments_Instance < T > implements IArrayLike < T > {
    private noStructuralTyping_: any;
    [ key: number ]: T ;
    callee : ( ( ...a : any [] ) => any ) | null ;
    /**
     * Use the non-standard {@see Function.prototype.caller} property of a function
     * object instead.
     */
    caller : ( ( ...a : any [] ) => any ) | null ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Array < T > extends Array_Instance < T > {
    static every < T , S > (arr : IArrayLike < T > | null , callback : ( (a : T , b : number , c : any ) => any ) | null , opt_context ? : S ) : boolean ;
    static filter < T , S > (arr : IArrayLike < T > | null , callback : ( (a : T , b : number , c : any ) => any ) | null , opt_context ? : S ) : T [] ;
    static forEach < T , S > (arr : IArrayLike < T > | null , callback : ( (a : T , b : number , c : any ) => any ) | null , opt_context ? : S ) : any ;
    static from < T , S , R > (arrayLike : string | IArrayLike < T > | Iterable < T > , opt_mapFn ? : (a : string | T , b : number , c : string | IArrayLike < T > | Iterable < T > ) => R , opt_this ? : S ) : R [] ;
    /**
     * Mozilla 1.6+ only.
     */
    static indexOf < T > (arr : IArrayLike < T > | null , obj : T , opt_fromIndex ? : number ) : number ;
    /**
     * Introduced in 1.8.5.
     */
    static isArray (arr : any ) : boolean ;
    /**
     * Mozilla 1.6+ only.
     */
    static lastIndexOf < T > (arr : IArrayLike < T > | null , obj : T , opt_fromIndex ? : number ) : number ;
    static map < T , S , R > (arr : IArrayLike < T > | null , callback : ( (a : T , b : number , c : T [] ) => R ) | null , opt_context ? : S ) : R [] ;
    static of < T > ( ...var_args : ( T | undefined ) [] ) : T [] ;
    static some < T , S > (arr : IArrayLike < T > | null , callback : ( (a : T , b : number , c : any ) => any ) | null , opt_context ? : S ) : boolean ;
  }
  class Array_Instance < T > implements IArrayLike < T > {
    private noStructuralTyping_: any;
    constructor ( ...var_args : any [] ) ;
    [ key: number ]: T ;
    /**
     * Returns a new array comprised of this array joined with other array(s)
     * and/or value(s).
     */
    concat ( ...var_args : any [] ) : any [] ;
    copyWithin (target : number , start : number , opt_end ? : number ) : any ;
    entries ( ) : IteratorIterable < ( number | T ) [] > ;
    /**
     * Available in ECMAScript 5, Mozilla 1.6+.
     */
    every < S > (callback : ( (a : T , b : number , c : T [] ) => any ) | null , opt_thisobj ? : S ) : boolean ;
    fill (value : T , opt_begin ? : number , opt_end ? : number ) : IArrayLike < T > ;
    /**
     * Available in ECMAScript 5, Mozilla 1.6+.
     */
    filter < S > (callback : ( (a : T , b : number , c : T [] ) => any ) | null , opt_thisobj ? : S ) : T [] ;
    find < S > (predicate : (a : T , b : number , c : T [] ) => boolean , opt_this ? : S ) : T | undefined ;
    findIndex < S > (predicate : (a : T , b : number , c : T [] ) => boolean , opt_this ? : S ) : number ;
    /**
     * Available in ECMAScript 5, Mozilla 1.6+.
     */
    forEach < S > (callback : ( (a : T , b : number , c : T [] ) => any ) | null , opt_thisobj ? : S ) : any ;
    includes (searchElement : T , opt_fromIndex ? : number ) : boolean ;
    index : number ;
    /**
     * Available in ECMAScript 5, Mozilla 1.6+.
     */
    indexOf (obj : T , opt_fromIndex ? : number ) : number ;
    input : string | null ;
    /**
     * Joins all elements of an array into a string.
     * @param opt_separator Specifies a string to separate each element of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma.
     */
    join (opt_separator ? : any ) : string ;
    keys ( ) : IteratorIterable < number > ;
    /**
     * Available in ECMAScript 5, Mozilla 1.6+.
     */
    lastIndexOf (obj : T , opt_fromIndex ? : number ) : number ;
    length : number ;
    /**
     * Available in ECMAScript 5, Mozilla 1.6+.
     */
    map < S , R > (callback : ( (a : T , b : number , c : T [] ) => R ) | null , opt_thisobj ? : S ) : R [] ;
    /**
     * Removes the last element from an array and returns that element.
     */
    pop ( ) : T ;
    /**
     * Mutates an array by appending the given elements and returning the new
     * length of the array.
     */
    push ( ...var_args : ( T | undefined ) [] ) : number ;
    /**
     * Apply a function simultaneously against two values of the array (from
     * left-to-right) as to reduce it to a single value.
     */
    reduce < R > (callback : ( (a : any , b : T , c : number , d : T [] ) => R ) | null , opt_initialValue ? : any ) : R ;
    /**
     * Apply a function simultaneously against two values of the array (from
     * right-to-left) as to reduce it to a single value.
     */
    reduceRight < R > (callback : ( (a : any , b : T , c : number , d : T [] ) => R ) | null , opt_initialValue ? : any ) : R ;
    /**
     * Transposes the elements of an array in place: the first array element becomes the
     * last and the last becomes the first. The mutated array is also returned.
     */
    reverse < THIS > ( ) : THIS ;
    /**
     * Removes the first element from an array and returns that element. This
     * method changes the length of the array.
     */
    shift ( ) : T ;
    /**
     * Extracts a section of an array and returns a new array.
     * @param opt_begin Zero-based index at which to begin extraction.  A non-number type will be auto-cast by the browser to a number.
     * @param opt_end Zero-based index at which to end extraction.  slice extracts up to but not including end.
     */
    slice (opt_begin ? : any , opt_end ? : any ) : T [] ;
    /**
     * Available in ECMAScript 5, Mozilla 1.6+.
     */
    some < S > (callback : ( (a : T , b : number , c : T [] ) => any ) | null , opt_thisobj ? : S ) : boolean ;
    /**
     * Sorts the elements of an array in place.
     * @param opt_compareFunction Specifies a function that defines the sort order.
     */
    sort (opt_compareFunction ? : (a : T , b : T ) => number ) : any ;
    /**
     * Changes the content of an array, adding new elements while removing old
     * elements.
     * @param opt_index Index at which to start changing the array. If negative, will begin that many elements from the end.  A non-number type will be auto-cast by the browser to a number.
     * @param opt_howMany An integer indicating the number of old array elements to remove.
     */
    splice (opt_index ? : any , opt_howMany ? : any ,  ...var_args : ( T | undefined ) [] ) : T [] ;
    toSource ( ) : string ;
    toString ( ) : string ;
    /**
     * Adds one or more elements to the beginning of an array and returns the new
     * length of the array.
     */
    unshift ( ...var_args : any [] ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz.Array {
  function every < T , S > (arr : IArrayLike < T > | null , callback : ( (a : T , b : number , c : any ) => any ) | null , opt_context ? : S ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Array {
  function filter < T , S > (arr : IArrayLike < T > | null , callback : ( (a : T , b : number , c : any ) => any ) | null , opt_context ? : S ) : T [] ;
}
declare namespace ಠ_ಠ.clutz.Array {
  function forEach < T , S > (arr : IArrayLike < T > | null , callback : ( (a : T , b : number , c : any ) => any ) | null , opt_context ? : S ) : any ;
}
declare namespace ಠ_ಠ.clutz.Array {
  function from < T , S , R > (arrayLike : string | IArrayLike < T > | Iterable < T > , opt_mapFn ? : (a : string | T , b : number , c : string | IArrayLike < T > | Iterable < T > ) => R , opt_this ? : S ) : R [] ;
}
declare namespace ಠ_ಠ.clutz.Array {
  /**
   * Mozilla 1.6+ only.
   */
  function indexOf < T > (arr : IArrayLike < T > | null , obj : T , opt_fromIndex ? : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Array {
  /**
   * Introduced in 1.8.5.
   */
  function isArray (arr : any ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Array {
  /**
   * Mozilla 1.6+ only.
   */
  function lastIndexOf < T > (arr : IArrayLike < T > | null , obj : T , opt_fromIndex ? : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Array {
  function map < T , S , R > (arr : IArrayLike < T > | null , callback : ( (a : T , b : number , c : T [] ) => R ) | null , opt_context ? : S ) : R [] ;
}
declare namespace ಠ_ಠ.clutz.Array {
  function of < T > ( ...var_args : ( T | undefined ) [] ) : T [] ;
}
declare namespace ಠ_ಠ.clutz.Array {
  function some < T , S > (arr : IArrayLike < T > | null , callback : ( (a : T , b : number , c : any ) => any ) | null , opt_context ? : S ) : boolean ;
}
declare namespace ಠ_ಠ.clutz {
  class ArrayBuffer extends ArrayBuffer_Instance {
  }
  class ArrayBuffer_Instance implements Transferable {
    private noStructuralTyping_: any;
    constructor (length : number ) ;
    byteLength : number ;
    slice (begin : number , opt_end ? : number ) : ArrayBuffer ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ArrayBufferView extends ArrayBufferView_Instance {
  }
  class ArrayBufferView_Instance {
    private noStructuralTyping_: any;
    buffer : ArrayBuffer ;
    byteLength : number ;
    byteOffset : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Attr extends Attr_Instance {
  }
  class Attr_Instance extends Node_Instance {
    isId : boolean ;
    name : string ;
    ownerElement : Element | null ;
    schemaTypeInfo : TypeInfo | null ;
    specified : boolean ;
    value : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Audio extends Audio_Instance {
  }
  class Audio_Instance extends HTMLAudioElement_Instance {
    constructor (src ? : string ) ;
    mozCurrentSampleOffset ( ) : number ;
    mozSetup (channels : number , rate : number ) : any ;
    mozWriteAudio (buffer : any [] | null | Float32Array ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class AudioBuffer extends AudioBuffer_Instance {
  }
  class AudioBuffer_Instance {
    private noStructuralTyping_: any;
    duration : number ;
    /**
     * To be deprecated.
     */
    gain : AudioGain | null ;
    getChannelData (channel : number ) : Float32Array | null ;
    length : number ;
    numberOfChannels : number ;
    sampleRate : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class AudioBufferSourceNode extends AudioBufferSourceNode_Instance {
  }
  class AudioBufferSourceNode_Instance extends AudioSourceNode_Instance {
    /**
     * To be deprecated.
     */
    FINISHED_STATE : number ;
    /**
     * To be deprecated.
     */
    PLAYING_STATE : number ;
    /**
     * To be deprecated.
     */
    SCHEDULED_STATE : number ;
    /**
     * To be deprecated.
     */
    UNSCHEDULED_STATE : number ;
    buffer : AudioBuffer | null ;
    /**
     * To be deprecated.
     */
    gain : number ;
    loop : boolean ;
    loopEnd : number ;
    loopStart : number ;
    /**
     * To be deprecated.
     */
    noteGrainOn (when : number , grainOffset : number , grainDuration : number ) : any ;
    /**
     * To be deprecated.
     */
    noteOff (when : number ) : any ;
    /**
     * To be deprecated.
     */
    noteOn (when : number ) : any ;
    playbackRate : AudioParam ;
    /**
     * To be deprecated.
     */
    playbackState : number ;
    start (when : number , opt_offset ? : number , opt_duration ? : number ) : any ;
    stop (when : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class AudioChannelMerger extends AudioChannelMerger_Instance {
  }
  class AudioChannelMerger_Instance extends AudioNode_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class AudioChannelSplitter extends AudioChannelSplitter_Instance {
  }
  class AudioChannelSplitter_Instance extends AudioNode_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class AudioContext extends AudioContext_Instance {
  }
  class AudioContext_Instance {
    private noStructuralTyping_: any;
    createAnalyser ( ) : RealtimeAnalyserNode ;
    createBiquadFilter ( ) : BiquadFilterNode ;
    createBuffer (numberOfChannels : number , length : number , sampleRate : number ) : AudioBuffer ;
    createBufferSource ( ) : AudioBufferSourceNode ;
    createChannelMerger (numberOfInputs ? : number ) : AudioChannelMerger ;
    createChannelSplitter (numberOfOutputs ? : number ) : AudioChannelSplitter ;
    createConvolver ( ) : ConvolverNode ;
    createDelay (maxDelayTime ? : number ) : DelayNode ;
    /**
     * To be deprecated. Use createDelay instead.
     */
    createDelayNode (maxDelayTime ? : number ) : DelayNode ;
    createDynamicsCompressor ( ) : DynamicsCompressorNode ;
    createGain ( ) : GainNode ;
    createGainNode ( ) : GainNode ;
    /**
     * To be deprecated. Use createScriptProcessor instead.
     */
    createJavaScriptNode (bufferSize : number , numberOfInputs : number , numberOfOuputs : number ) : ScriptProcessorNode ;
    createMediaElementSource (mediaElement : HTMLMediaElement | null ) : MediaElementAudioSourceNode ;
    createMediaStreamDestination ( ) : MediaStreamAudioDestinationNode ;
    createMediaStreamSource (mediaStream : MediaStream | null ) : MediaStreamAudioSourceNode ;
    createOscillator ( ) : OscillatorNode ;
    createPanner ( ) : AudioPannerNode ;
    createPeriodicWave (real : Float32Array | null , imag : Float32Array | null ) : PeriodicWave ;
    createScriptProcessor (bufferSize : number , numberOfInputChannels_opt ? : number , numberOfOutputChannels_opt ? : number ) : ScriptProcessorNode ;
    createStereoPanner ( ) : StereoPannerNode ;
    createWaveShaper ( ) : WaveShaperNode ;
    currentTime : number ;
    decodeAudioData (audioData : ArrayBuffer | null , successCallback ? : (a : AudioBuffer | null ) => any , errorCallback ? : (a : any ) => any ) : Promise < AudioBuffer | null > ;
    destination : AudioDestinationNode ;
    listener : AudioListener ;
    sampleRate : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class AudioDestinationNode extends AudioDestinationNode_Instance {
  }
  class AudioDestinationNode_Instance extends AudioNode_Instance {
    maxChannelCount : number ;
    /**
     * To be deprecated. Use maxChannelCount instead.
     */
    numberOfChannels : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class AudioGain extends AudioGain_Instance {
  }
  class AudioGain_Instance extends AudioParam_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class AudioListener extends AudioListener_Instance {
  }
  class AudioListener_Instance {
    private noStructuralTyping_: any;
    dopplerFactor : number ;
    /**
     * To be deprecated.
     */
    gain : number ;
    setOrientation (x : number , y : number , z : number , xUp : number , yUp : number , zUp : number ) : any ;
    setPosition (x : number , y : number , z : number ) : any ;
    setVelocity (x : number , y : number , z : number ) : any ;
    speedOfSound : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class AudioNode extends AudioNode_Instance {
  }
  class AudioNode_Instance {
    private noStructuralTyping_: any;
    channelCount : number ;
    channelCountMode : string ;
    channelInterpretation : string ;
    connect (destination : AudioNode | null | AudioParam , output ? : number , input ? : number ) : any ;
    context : AudioContext ;
    disconnect (output ? : number ) : any ;
    numberOfInputs : number ;
    numberOfOutputs : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class AudioPannerNode extends AudioPannerNode_Instance {
  }
  class AudioPannerNode_Instance extends AudioNode_Instance {
    /**
     * To be deprecated. Use 'equalpower' instead.
     */
    EQUALPOWER : number ;
    /**
     * To be deprecated. Use 'exponential' instead.
     */
    EXPONENTIAL_DISTANCE : number ;
    /**
     * To be deprecated. Use 'HRTF' instead.
     */
    HRTF : number ;
    /**
     * To be deprecated. Use 'inverse' instead.
     */
    INVERSE_DISTANCE : number ;
    /**
     * To be deprecated. Use 'linear' instead.
     */
    LINEAR_DISTANCE : number ;
    /**
     * To be deprecated.
     */
    SOUNDFIELD : number ;
    /**
     * To be deprecated.
     */
    coneGain : AudioGain | null ;
    coneInnerAngle : number ;
    coneOuterAngle : number ;
    coneOuterGain : number ;
    /**
     * To be deprecated.
     */
    distanceGain : AudioGain | null ;
    distanceModel : number | string ;
    maxDistance : number ;
    panningModel : number | string ;
    refDistance : number ;
    rolloffFactor : number ;
    setOrientation (x : number , y : number , z : number ) : any ;
    setPosition (x : number , y : number , z : number ) : any ;
    setVelocity (x : number , y : number , z : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class AudioParam extends AudioParam_Instance {
  }
  class AudioParam_Instance {
    private noStructuralTyping_: any;
    cancelScheduledValues (startTime : number ) : any ;
    defaultValue : number ;
    exponentialRampToValueAtTime (value : number , endTime : number ) : any ;
    linearRampToValueAtTime (value : number , endTime : number ) : any ;
    /**
     * To be deprecated.
     */
    maxValue : number ;
    /**
     * To be deprecated.
     */
    minValue : number ;
    setTargetAtTime (target : number , startTime : number , timeConstant : number ) : any ;
    setTargetValueAtTime (target : number , startTime : number , timeConstant : number ) : any ;
    setValueAtTime (value : number , startTime : number ) : any ;
    setValueCurveAtTime (values : Float32Array | null , startTime : number , duration : number ) : any ;
    /**
     * To be deprecated.
     */
    units : number ;
    value : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class AudioProcessingEvent extends AudioProcessingEvent_Instance {
  }
  class AudioProcessingEvent_Instance extends GlobalEvent {
    inputBuffer : AudioBuffer | null ;
    node : ScriptProcessorNode | null ;
    outputBuffer : AudioBuffer | null ;
    playbackTime : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class AudioSourceNode extends AudioSourceNode_Instance {
  }
  class AudioSourceNode_Instance extends AudioNode_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  interface BatteryManager extends EventTarget {
    charging : boolean ;
    chargingTime : number ;
    dischargingTime : number ;
    level : number ;
    onchargingchange : ( (a : GlobalEvent ) => any ) | null ;
    onchargingtimechange : ( (a : GlobalEvent ) => any ) | null ;
    ondischargingtimechange : ( (a : GlobalEvent ) => any ) | null ;
    onlevelchange : ( (a : GlobalEvent ) => any ) | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class BiquadFilterNode extends BiquadFilterNode_Instance {
  }
  class BiquadFilterNode_Instance extends AudioNode_Instance {
    Q : AudioParam ;
    detune : AudioParam ;
    frequency : AudioParam ;
    gain : AudioParam ;
    getFrequencyResponse (frequencyHz : Float32Array | null , magResponse : Float32Array | null , phaseResponse : Float32Array | null ) : any ;
    /**
     * A read-able and write-able string that specifies the type of the filter.
     * See http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface
     * for valid values.
     */
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Blob extends Blob_Instance {
  }
  class Blob_Instance {
    private noStructuralTyping_: any;
    constructor (opt_blobParts ? : ( ArrayBufferView | null | Blob | string ) [] | null , opt_options ? : Object | null ) ;
    /**
     * This replaces Blob.slice in Firefox.
     */
    mozSlice (start : number , end : number , opt_contentType ? : string ) : Blob ;
    size : number ;
    slice (start : number , length : number , opt_contentType ? : string ) : Blob ;
    type : string ;
    /**
     * This replaces Blob.slice in Chrome since WebKit revision 84005.
     */
    webkitSlice (start : number , end : number , opt_contentType ? : string ) : Blob ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class BlobBuilder extends BlobBuilder_Instance {
  }
  class BlobBuilder_Instance {
    private noStructuralTyping_: any;
    append (data : string | Blob | null | ArrayBuffer , endings ? : string ) : any ;
    getBlob (contentType ? : string ) : Blob ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Boolean extends Boolean_Instance {
  }
  class Boolean_Instance {
    private noStructuralTyping_: any;
    constructor (opt_value ? : any ) ;
    toSource ( ) : string ;
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class BoxObject extends BoxObject_Instance {
  }
  class BoxObject_Instance {
    private noStructuralTyping_: any;
    element : Element | null ;
    screenX : number ;
    screenY : number ;
    width : number ;
    x : number ;
    y : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ByteLengthQueuingStrategy extends ByteLengthQueuingStrategy_Instance {
  }
  class ByteLengthQueuingStrategy_Instance {
    private noStructuralTyping_: any;
    constructor (config : { highWaterMark : number } ) ;
    size (chunk : any ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CDATASection extends CDATASection_Instance {
  }
  class CDATASection_Instance extends Text_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * TODO(nicksantos): This suppress tag probably isn't needed, and
   * should be removed.
   */
  var CSS : CSSInterface | null ;
}
declare namespace ಠ_ಠ.clutz {
  class CSSCharsetRule extends CSSCharsetRule_Instance {
  }
  class CSSCharsetRule_Instance extends CSSRule_Instance {
    encoding : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSFontFaceRule extends CSSFontFaceRule_Instance {
  }
  class CSSFontFaceRule_Instance extends CSSRule_Instance {
    style : CSSStyleDeclaration | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSImportRule extends CSSImportRule_Instance {
  }
  class CSSImportRule_Instance extends CSSRule_Instance {
    href : string ;
    media : MediaList | null ;
    styleSheet : CSSStyleSheet | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSInterface extends CSSInterface_Instance {
  }
  class CSSInterface_Instance {
    private noStructuralTyping_: any;
    escape (ident : string ) : string ;
    supports (property : string , opt_value ? : string ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSMatrix extends CSSMatrix_Instance {
  }
  class CSSMatrix_Instance {
    private noStructuralTyping_: any;
    constructor (opt_matrix ? : string ) ;
    inverse ( ) : CSSMatrix | null ;
    m11 : number ;
    m12 : number ;
    m13 : number ;
    m14 : number ;
    m21 : number ;
    m22 : number ;
    m23 : number ;
    m24 : number ;
    m31 : number ;
    m32 : number ;
    m33 : number ;
    m34 : number ;
    m41 : number ;
    m42 : number ;
    m43 : number ;
    m44 : number ;
    multiply (secondMatrix : CSSMatrix ) : CSSMatrix ;
    rotate (opt_rotX ? : number , opt_rotY ? : number , opt_rotZ ? : number ) : CSSMatrix ;
    rotateAxisAngle (opt_x ? : number , opt_y ? : number , opt_z ? : number , opt_angle ? : number ) : CSSMatrix ;
    scale (opt_scaleX ? : number , opt_scaleY ? : number , opt_scaleZ ? : number ) : CSSMatrix ;
    setMatrixValue (string : string ) : void ;
    translate (opt_x ? : number , opt_y ? : number , opt_z ? : number ) : CSSMatrix ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSMediaRule extends CSSMediaRule_Instance {
  }
  class CSSMediaRule_Instance extends CSSRule_Instance {
    cssRules : CSSRuleList | null ;
    deleteRule (index : number ) : any ;
    insertRule (rule : string , index : number ) : number ;
    media : MediaList | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSPageRule extends CSSPageRule_Instance {
  }
  class CSSPageRule_Instance extends CSSRule_Instance {
    selectorText : string ;
    style : CSSStyleDeclaration | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSPrimitiveValue extends CSSPrimitiveValue_Instance {
    static CSS_ATTR : number ;
    static CSS_CM : number ;
    static CSS_COUNTER : number ;
    static CSS_DEG : number ;
    static CSS_DIMENSION : number ;
    static CSS_EMS : number ;
    static CSS_EXS : number ;
    static CSS_GRAD : number ;
    static CSS_HZ : number ;
    static CSS_IDENT : number ;
    static CSS_IN : number ;
    static CSS_KHZ : number ;
    static CSS_MM : number ;
    static CSS_MS : number ;
    static CSS_NUMBER : number ;
    static CSS_PC : number ;
    static CSS_PERCENTAGE : number ;
    static CSS_PT : number ;
    static CSS_PX : number ;
    static CSS_RAD : number ;
    static CSS_RECT : number ;
    static CSS_RGBCOLOR : number ;
    static CSS_S : number ;
    static CSS_STRING : number ;
    static CSS_UNKNOWN : number ;
    static CSS_URI : number ;
  }
  class CSSPrimitiveValue_Instance extends CSSValue_Instance {
    getCounterValue ( ) : Counter | null ;
    getFloatValue (unitType : number ) : number ;
    getRGBColorValue ( ) : RGBColor | null ;
    getRectValue ( ) : Rect | null ;
    getStringValue ( ) : string ;
    primitiveType : number ;
    setFloatValue (unitType : number , floatValue : number ) : void ;
    setStringValue (stringType : number , stringValue : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSProperties extends CSSProperties_Instance {
  }
  class CSSProperties_Instance {
    private noStructuralTyping_: any;
    MozAppearance : string ;
    MozBackfaceVisibility : string ;
    MozBackgroundClip : string ;
    MozBackgroundInlinePolicy : string ;
    MozBackgroundOrigin : string ;
    MozBinding : string ;
    MozBorderBottomColors : string ;
    MozBorderEnd : string ;
    MozBorderEndColor : string ;
    MozBorderEndStyle : string ;
    MozBorderEndWidth : string ;
    MozBorderImage : string ;
    MozBorderLeftColors : string ;
    MozBorderRadius : string ;
    MozBorderRadiusBottomleft : string ;
    MozBorderRadiusBottomright : string ;
    MozBorderRadiusTopleft : string ;
    MozBorderRadiusTopright : string ;
    MozBorderRightColors : string ;
    MozBorderStart : string ;
    MozBorderStartColor : string ;
    MozBorderStartStyle : string ;
    MozBorderStartWidth : string ;
    MozBorderTopColors : string ;
    MozBoxAlign : string ;
    MozBoxDirection : string ;
    MozBoxFlex : string ;
    MozBoxOrdinalGroup : string ;
    MozBoxOrient : string ;
    MozBoxPack : string ;
    MozBoxShadow : string ;
    MozBoxSizing : string ;
    MozColumnCount : string ;
    MozColumnGap : string ;
    MozColumnRule : string ;
    MozColumnRuleColor : string ;
    MozColumnRuleStyle : string ;
    MozColumnRuleWidth : string ;
    MozColumnWidth : string ;
    MozFloatEdge : string ;
    MozFontFeatureSettings : string ;
    MozFontLanguageOverride : string ;
    MozForceBrokenImageIcon : string ;
    MozImageRegion : string ;
    MozMarginEnd : string ;
    MozMarginStart : string ;
    MozOpacity : number | string ;
    MozOutline : string ;
    MozOutlineColor : string ;
    MozOutlineOffset : string ;
    MozOutlineRadius : string ;
    MozOutlineRadiusBottomleft : string ;
    MozOutlineRadiusBottomright : string ;
    MozOutlineRadiusTopleft : string ;
    MozOutlineRadiusTopright : string ;
    MozOutlineStyle : string ;
    MozOutlineWidth : string ;
    MozPaddingEnd : string ;
    MozPaddingStart : string ;
    MozPerspective : string ;
    MozStackSizing : string ;
    MozTabSize : string ;
    MozTransform : string ;
    MozTransformOrigin : string ;
    MozTransition : string ;
    MozTransitionDelay : string ;
    MozTransitionDuration : string ;
    MozTransitionProperty : string ;
    MozTransitionTimingFunction : string ;
    MozUserFocus : string ;
    MozUserInput : string ;
    MozUserModify : string ;
    MozUserSelect : string ;
    MozWindowShadow : string ;
    MsAccelerator : string ;
    MsBackgroundPositionX : string ;
    MsBackgroundPositionY : string ;
    MsBehavior : string ;
    MsBlockProgression : string ;
    MsFilter : string ;
    MsImeMode : string ;
    MsInterpolationMode : string ;
    MsLayoutGrid : string ;
    MsLayoutGridChar : string ;
    MsLayoutGridLine : string ;
    MsLayoutGridMode : string ;
    MsLayoutGridType : string ;
    MsLineBreak : string ;
    MsLineGridMode : string ;
    MsOverflowX : string ;
    MsOverflowY : string ;
    MsScrollbar3dlightColor : string ;
    MsScrollbarArrowColor : string ;
    MsScrollbarBaseColor : string ;
    MsScrollbarDarkshadowColor : string ;
    MsScrollbarFaceColor : string ;
    MsScrollbarHighlightColor : any ;
    MsScrollbarShadowColor : string ;
    MsScrollbarTrackColor : string ;
    MsTextAlignLast : string ;
    MsTextAutospace : string ;
    MsTextJustify : string ;
    MsTextKashidaSpace : string ;
    MsTextOverflow : string ;
    MsTextUnderlinePosition : string ;
    MsWordBreak : string ;
    MsWordWrap : string ;
    MsWritingMode : string ;
    MsZoom : string ;
    WebkitAlignContent : string ;
    WebkitAlignItems : string ;
    WebkitAlignSelf : string ;
    WebkitAnimation : string ;
    WebkitAnimationDelay : string ;
    WebkitAnimationDirection : string ;
    WebkitAnimationDuration : string ;
    WebkitAnimationFillMode : string ;
    WebkitAnimationIterationCount : string ;
    WebkitAnimationName : string ;
    WebkitAnimationPlayState : string ;
    WebkitAnimationTimingFunction : string ;
    WebkitAppRegion : string ;
    WebkitAppearance : string ;
    WebkitAspectRatio : string ;
    WebkitBackfaceVisibility : string ;
    WebkitBackgroundClip : string ;
    WebkitBackgroundComposite : string ;
    WebkitBackgroundOrigin : string ;
    WebkitBackgroundSize : string ;
    WebkitBinding : string ;
    WebkitBlendMode : string ;
    WebkitBorderAfter : string ;
    WebkitBorderAfterColor : string ;
    WebkitBorderAfterStyle : string ;
    WebkitBorderAfterWidth : string ;
    WebkitBorderBefore : string ;
    WebkitBorderBeforeColor : string ;
    WebkitBorderBeforeStyle : string ;
    WebkitBorderBeforeWidth : string ;
    WebkitBorderBottomLeftRadius : string ;
    WebkitBorderBottomRightRadius : string ;
    WebkitBorderEnd : string ;
    WebkitBorderEndColor : string ;
    WebkitBorderEndStyle : string ;
    WebkitBorderEndWidth : string ;
    WebkitBorderFit : string ;
    WebkitBorderHorizontalSpacing : string ;
    WebkitBorderImage : string ;
    WebkitBorderRadius : string ;
    WebkitBorderStart : string ;
    WebkitBorderStartColor : string ;
    WebkitBorderStartStyle : string ;
    WebkitBorderStartWidth : string ;
    WebkitBorderTopLeftRadius : string ;
    WebkitBorderTopRightRadius : string ;
    WebkitBorderVerticalSpacing : string ;
    WebkitBoxAlign : string ;
    WebkitBoxDecorationBreak : string ;
    WebkitBoxDirection : string ;
    WebkitBoxFlex : string ;
    WebkitBoxFlexGroup : string ;
    WebkitBoxLines : string ;
    WebkitBoxOrdinalGroup : string ;
    WebkitBoxOrient : string ;
    WebkitBoxPack : string ;
    WebkitBoxReflect : string ;
    WebkitBoxShadow : string ;
    WebkitBoxSizing : string ;
    WebkitColorCorrection : string ;
    WebkitColumnAxis : string ;
    WebkitColumnBreakAfter : string ;
    WebkitColumnBreakBefore : string ;
    WebkitColumnBreakInside : string ;
    WebkitColumnCount : string ;
    WebkitColumnGap : string ;
    WebkitColumnProgression : string ;
    WebkitColumnRule : string ;
    WebkitColumnRuleColor : string ;
    WebkitColumnRuleStyle : string ;
    WebkitColumnRuleWidth : string ;
    WebkitColumnSpan : string ;
    WebkitColumnWidth : string ;
    WebkitColumns : string ;
    WebkitDashboardRegion : string ;
    WebkitFilter : string ;
    WebkitFlex : string ;
    WebkitFlexBasis : string ;
    WebkitFlexDirection : string ;
    WebkitFlexFlow : string ;
    WebkitFlexGrow : string ;
    WebkitFlexShrink : string ;
    WebkitFlexWrap : string ;
    WebkitFlowFrom : string ;
    WebkitFlowInto : string ;
    WebkitFontSizeDelta : string ;
    WebkitFontSmoothing : string ;
    WebkitGridColumn : string ;
    WebkitGridColumns : string ;
    WebkitGridRow : string ;
    WebkitGridRows : string ;
    WebkitHighlight : string ;
    WebkitHyphenateCharacter : string ;
    WebkitHyphenateLimitAfter : string ;
    WebkitHyphenateLimitBefore : string ;
    WebkitHyphenateLimitLines : string ;
    WebkitHyphens : string ;
    WebkitJustifyContent : string ;
    WebkitLineAlign : string ;
    WebkitLineBoxContain : string ;
    WebkitLineBreak : string ;
    WebkitLineClamp : string ;
    WebkitLineGrid : string ;
    WebkitLineSnap : string ;
    WebkitLocale : string ;
    WebkitLogicalHeight : string ;
    WebkitLogicalWidth : string ;
    WebkitMarginAfter : string ;
    WebkitMarginAfterCollapse : string ;
    WebkitMarginBefore : string ;
    WebkitMarginBeforeCollapse : string ;
    WebkitMarginBottomCollapse : string ;
    WebkitMarginCollapse : string ;
    WebkitMarginEnd : string ;
    WebkitMarginStart : string ;
    WebkitMarginTopCollapse : string ;
    WebkitMarquee : string ;
    WebkitMarqueeDirection : string ;
    WebkitMarqueeIncrement : string ;
    WebkitMarqueeRepetition : string ;
    WebkitMarqueeSpeed : string ;
    WebkitMarqueeStyle : string ;
    WebkitMask : string ;
    WebkitMaskAttachment : string ;
    WebkitMaskBoxImage : string ;
    WebkitMaskBoxImageOutset : string ;
    WebkitMaskBoxImageRepeat : string ;
    WebkitMaskBoxImageSlice : string ;
    WebkitMaskBoxImageSource : string ;
    WebkitMaskBoxImageWidth : string ;
    WebkitMaskClip : string ;
    WebkitMaskComposite : string ;
    WebkitMaskImage : string ;
    WebkitMaskOrigin : string ;
    WebkitMaskPosition : string ;
    WebkitMaskPositionX : string ;
    WebkitMaskPositionY : string ;
    WebkitMaskRepeat : string ;
    WebkitMaskRepeatX : string ;
    WebkitMaskRepeatY : string ;
    WebkitMaskSize : string ;
    WebkitMatchNearestMailBlockquoteColor : string ;
    WebkitMaxLogicalHeight : string ;
    WebkitMaxLogicalWidth : string ;
    WebkitMinLogicalHeight : string ;
    WebkitMinLogicalWidth : string ;
    WebkitNbspMode : string ;
    WebkitOrder : string ;
    WebkitOverflowScrolling : string ;
    WebkitPaddingAfter : string ;
    WebkitPaddingBefore : string ;
    WebkitPaddingEnd : string ;
    WebkitPaddingStart : string ;
    WebkitPerspective : string ;
    WebkitPerspectiveOrigin : string ;
    WebkitPerspectiveOriginX : string ;
    WebkitPerspectiveOriginY : string ;
    WebkitPrintColorAdjust : string ;
    WebkitRegionBreakAfter : string ;
    WebkitRegionBreakBefore : string ;
    WebkitRegionBreakInside : string ;
    WebkitRegionOverflow : string ;
    WebkitRtlOrdering : string ;
    WebkitRubyPosition : string ;
    WebkitShapeInside : string ;
    WebkitShapeMargin : string ;
    WebkitShapeOutside : string ;
    WebkitShapePadding : string ;
    WebkitTapHighlightColor : string ;
    WebkitTextAlignLast : string ;
    WebkitTextCombine : string ;
    WebkitTextDecorationLine : string ;
    WebkitTextDecorationStyle : string ;
    WebkitTextDecorationsInEffect : string ;
    WebkitTextEmphasis : string ;
    WebkitTextEmphasisColor : string ;
    WebkitTextEmphasisPosition : string ;
    WebkitTextEmphasisStyle : string ;
    WebkitTextFillColor : string ;
    WebkitTextOrientation : string ;
    WebkitTextSecurity : string ;
    WebkitTextSizeAdjust : string ;
    WebkitTextStroke : string ;
    WebkitTextStrokeColor : string ;
    WebkitTextStrokeWidth : string ;
    WebkitTransform : string ;
    WebkitTransformOrigin : string ;
    WebkitTransformOriginX : string ;
    WebkitTransformOriginY : string ;
    WebkitTransformOriginZ : string ;
    WebkitTransformStyle : string ;
    WebkitTransition : string ;
    WebkitTransitionDelay : string ;
    WebkitTransitionDuration : string ;
    WebkitTransitionProperty : string ;
    WebkitTransitionRepeatCount : string ;
    WebkitTransitionTimingFunction : string ;
    WebkitUserDrag : string ;
    WebkitUserModify : string ;
    WebkitUserSelect : string ;
    WebkitWrap : string ;
    WebkitWrapFlow : string ;
    WebkitWrapThrough : string ;
    WebkitWritingMode : string ;
    alignContent : string ;
    alignItems : string ;
    alignSelf : string ;
    azimuth : string ;
    backfaceVisibility : string ;
    background : string ;
    backgroundAttachment : string ;
    backgroundColor : string ;
    backgroundImage : string ;
    backgroundPosition : string ;
    backgroundPositionX : string ;
    backgroundPositionY : string ;
    backgroundRepeat : string ;
    backgroundSize : string ;
    behavior : any ;
    border : string ;
    borderBottom : string ;
    borderBottomColor : string ;
    borderBottomLeftRadius : string | number ;
    borderBottomRightRadius : string | number ;
    borderBottomStyle : string ;
    borderBottomWidth : string | number ;
    borderCollapse : string ;
    borderColor : string ;
    borderImage : string ;
    borderImageOutset : string | number ;
    borderImageRepeat : string ;
    borderImageSlice : string | number ;
    borderImageSource : string ;
    borderImageWidth : string | number ;
    borderLeft : string ;
    borderLeftColor : string ;
    borderLeftStyle : string ;
    borderLeftWidth : string | number ;
    borderRadius : string | number ;
    borderRight : string ;
    borderRightColor : string ;
    borderRightStyle : string ;
    borderRightWidth : string | number ;
    borderSpacing : string ;
    borderStyle : string ;
    borderTop : string ;
    borderTopColor : string ;
    borderTopLeftRadius : string | number ;
    borderTopRightRadius : string | number ;
    borderTopStyle : string ;
    borderTopWidth : string | number ;
    borderWidth : string | number ;
    bottom : string ;
    boxShadow : string ;
    boxSizing : string ;
    captionSide : string ;
    clear : string ;
    clip : string ;
    color : string ;
    content : string ;
    counterIncrement : string ;
    counterReset : string ;
    cssFloat : string ;
    /**
     * This is not an official part of the W3C spec. In practice, this is a settable
     * property that works cross-browser. It is used in goog.dom.setProperties() and
     * needs to be extern'd so the --disambiguate_properties JS compiler pass works.
     */
    cssText : string ;
    cue : string ;
    cueAfter : string ;
    cueBefore : string ;
    cursor : string ;
    direction : string ;
    display : string ;
    elevation : string ;
    emptyCells : string ;
    flex : string ;
    flexBasis : string ;
    flexDirection : string ;
    flexFlow : string ;
    flexGrow : number ;
    flexShrink : number ;
    flexWrap : string ;
    font : string ;
    fontFamily : string ;
    fontSize : string | number ;
    fontSizeAdjust : string ;
    fontStretch : string ;
    fontStyle : string ;
    fontVariant : string ;
    fontWeight : string ;
    height : string | number ;
    imeMode : string ;
    justifyContent : string ;
    left : string ;
    letterSpacing : string ;
    lineHeight : string | number ;
    listStyle : string ;
    listStyleImage : string ;
    listStylePosition : string ;
    listStyleType : string ;
    margin : string | number ;
    marginBottom : string | number ;
    marginLeft : string | number ;
    marginRight : string | number ;
    marginTop : string | number ;
    markerOffset : string ;
    marks : string ;
    maxHeight : string | number ;
    maxWidth : string | number ;
    minHeight : string | number ;
    minWidth : string | number ;
    msContentZooming : string ;
    msInterpolationMode : string ;
    msTouchAction : string ;
    msTransform : string ;
    msTransition : string ;
    opacity : string | number ;
    order : number ;
    orphans : string ;
    outline : string ;
    outlineColor : string ;
    outlineStyle : string ;
    outlineWidth : string | number ;
    overflow : string ;
    overflowX : string ;
    overflowY : string ;
    padding : string | number ;
    paddingBottom : string | number ;
    paddingLeft : string | number ;
    paddingRight : string | number ;
    paddingTop : string | number ;
    page : string ;
    pageBreakAfter : string ;
    pageBreakBefore : string ;
    pageBreakInside : string ;
    pause : string ;
    pauseAfter : string ;
    pauseBefore : string ;
    perspective : string ;
    perspectiveOrigin : string | number ;
    pitch : string ;
    pitchRange : string ;
    pixelHeight : number ;
    pixelLeft : number ;
    pixelTop : number ;
    pixelWidth : number ;
    playDuring : string ;
    pointerEvents : string ;
    position : string ;
    quotes : string ;
    resize : string ;
    richness : string ;
    right : string ;
    size : string ;
    speak : string ;
    speakHeader : string ;
    speakNumeral : string ;
    speakPunctuation : string ;
    speechRate : string ;
    stress : string ;
    styleFloat : string ;
    tableLayout : string ;
    textAlign : string ;
    textDecoration : string ;
    textIndent : string ;
    textOverflow : string ;
    textShadow : string ;
    textTransform : string ;
    top : string ;
    transform : string ;
    transformOrigin : string | number ;
    transformStyle : string ;
    transition : string ;
    transitionDelay : string ;
    transitionDuration : string ;
    transitionProperty : string ;
    transitionTimingFunction : string ;
    unicodeBidi : string ;
    verticalAlign : string ;
    visibility : string ;
    voiceFamily : string ;
    volume : string ;
    webkitAlignContent : string ;
    webkitAlignItems : string ;
    webkitAlignSelf : string ;
    webkitAnimation : string ;
    webkitAnimationDelay : string ;
    webkitAnimationDirection : string ;
    webkitAnimationDuration : string ;
    webkitAnimationFillMode : string ;
    webkitAnimationIterationCount : string ;
    webkitAnimationName : string ;
    webkitAnimationPlayState : string ;
    webkitAnimationTimingFunction : string ;
    webkitAppRegion : string ;
    webkitAppearance : string ;
    webkitAspectRatio : string ;
    webkitBackfaceVisibility : string ;
    webkitBackgroundClip : string ;
    webkitBackgroundComposite : string ;
    webkitBackgroundOrigin : string ;
    webkitBackgroundSize : string ;
    webkitBinding : string ;
    webkitBlendMode : string ;
    webkitBorderAfter : string ;
    webkitBorderAfterColor : string ;
    webkitBorderAfterStyle : string ;
    webkitBorderAfterWidth : string ;
    webkitBorderBefore : string ;
    webkitBorderBeforeColor : string ;
    webkitBorderBeforeStyle : string ;
    webkitBorderBeforeWidth : string ;
    webkitBorderBottomLeftRadius : string ;
    webkitBorderBottomRightRadius : string ;
    webkitBorderEnd : string ;
    webkitBorderEndColor : string ;
    webkitBorderEndStyle : string ;
    webkitBorderEndWidth : string ;
    webkitBorderFit : string ;
    webkitBorderHorizontalSpacing : string ;
    webkitBorderImage : string ;
    webkitBorderRadius : string ;
    webkitBorderStart : string ;
    webkitBorderStartColor : string ;
    webkitBorderStartStyle : string ;
    webkitBorderStartWidth : string ;
    webkitBorderTopLeftRadius : string ;
    webkitBorderTopRightRadius : string ;
    webkitBorderVerticalSpacing : string ;
    webkitBoxAlign : string ;
    webkitBoxDecorationBreak : string ;
    webkitBoxDirection : string ;
    webkitBoxFlex : string ;
    webkitBoxFlexGroup : string ;
    webkitBoxLines : string ;
    webkitBoxOrdinalGroup : string ;
    webkitBoxOrient : string ;
    webkitBoxPack : string ;
    webkitBoxReflect : string ;
    webkitBoxShadow : string ;
    webkitBoxSizing : string ;
    webkitColorCorrection : string ;
    webkitColumnAxis : string ;
    webkitColumnBreakAfter : string ;
    webkitColumnBreakBefore : string ;
    webkitColumnBreakInside : string ;
    webkitColumnCount : string ;
    webkitColumnGap : string ;
    webkitColumnProgression : string ;
    webkitColumnRule : string ;
    webkitColumnRuleColor : string ;
    webkitColumnRuleStyle : string ;
    webkitColumnRuleWidth : string ;
    webkitColumnSpan : string ;
    webkitColumnWidth : string ;
    webkitColumns : string ;
    webkitDashboardRegion : string ;
    webkitFilter : string ;
    webkitFlex : string ;
    webkitFlexBasis : string ;
    webkitFlexDirection : string ;
    webkitFlexFlow : string ;
    webkitFlexGrow : string ;
    webkitFlexShrink : string ;
    webkitFlexWrap : string ;
    webkitFlowFrom : string ;
    webkitFlowInto : string ;
    webkitFontSizeDelta : string ;
    webkitFontSmoothing : string ;
    webkitGridColumn : string ;
    webkitGridColumns : string ;
    webkitGridRow : string ;
    webkitGridRows : string ;
    webkitHighlight : string ;
    webkitHyphenateCharacter : string ;
    webkitHyphenateLimitAfter : string ;
    webkitHyphenateLimitBefore : string ;
    webkitHyphenateLimitLines : string ;
    webkitHyphens : string ;
    webkitJustifyContent : string ;
    webkitLineAlign : string ;
    webkitLineBoxContain : string ;
    webkitLineBreak : string ;
    webkitLineClamp : string ;
    webkitLineGrid : string ;
    webkitLineSnap : string ;
    webkitLocale : string ;
    webkitLogicalHeight : string ;
    webkitLogicalWidth : string ;
    webkitMarginAfter : string ;
    webkitMarginAfterCollapse : string ;
    webkitMarginBefore : string ;
    webkitMarginBeforeCollapse : string ;
    webkitMarginBottomCollapse : string ;
    webkitMarginCollapse : string ;
    webkitMarginEnd : string ;
    webkitMarginStart : string ;
    webkitMarginTopCollapse : string ;
    webkitMarquee : string ;
    webkitMarqueeDirection : string ;
    webkitMarqueeIncrement : string ;
    webkitMarqueeRepetition : string ;
    webkitMarqueeSpeed : string ;
    webkitMarqueeStyle : string ;
    webkitMask : string ;
    webkitMaskAttachment : string ;
    webkitMaskBoxImage : string ;
    webkitMaskBoxImageOutset : string ;
    webkitMaskBoxImageRepeat : string ;
    webkitMaskBoxImageSlice : string ;
    webkitMaskBoxImageSource : string ;
    webkitMaskBoxImageWidth : string ;
    webkitMaskClip : string ;
    webkitMaskComposite : string ;
    webkitMaskImage : string ;
    webkitMaskOrigin : string ;
    webkitMaskPosition : string ;
    webkitMaskPositionX : string ;
    webkitMaskPositionY : string ;
    webkitMaskRepeat : string ;
    webkitMaskRepeatX : string ;
    webkitMaskRepeatY : string ;
    webkitMaskSize : string ;
    webkitMatchNearestMailBlockquoteColor : string ;
    webkitMaxLogicalHeight : string ;
    webkitMaxLogicalWidth : string ;
    webkitMinLogicalHeight : string ;
    webkitMinLogicalWidth : string ;
    webkitNbspMode : string ;
    webkitOrder : string ;
    webkitOverflowScrolling : string ;
    webkitPaddingAfter : string ;
    webkitPaddingBefore : string ;
    webkitPaddingEnd : string ;
    webkitPaddingStart : string ;
    webkitPerspective : string ;
    webkitPerspectiveOrigin : string ;
    webkitPerspectiveOriginX : string ;
    webkitPerspectiveOriginY : string ;
    webkitPrintColorAdjust : string ;
    webkitRegionBreakAfter : string ;
    webkitRegionBreakBefore : string ;
    webkitRegionBreakInside : string ;
    webkitRegionOverflow : string ;
    webkitRtlOrdering : string ;
    webkitRubyPosition : string ;
    webkitShapeInside : string ;
    webkitShapeMargin : string ;
    webkitShapeOutside : string ;
    webkitShapePadding : string ;
    webkitTapHighlightColor : string ;
    webkitTextAlignLast : string ;
    webkitTextCombine : string ;
    webkitTextDecorationLine : string ;
    webkitTextDecorationStyle : string ;
    webkitTextDecorationsInEffect : string ;
    webkitTextEmphasis : string ;
    webkitTextEmphasisColor : string ;
    webkitTextEmphasisPosition : string ;
    webkitTextEmphasisStyle : string ;
    webkitTextFillColor : string ;
    webkitTextOrientation : string ;
    webkitTextSecurity : string ;
    webkitTextSizeAdjust : string ;
    webkitTextStroke : string ;
    webkitTextStrokeColor : string ;
    webkitTextStrokeWidth : string ;
    webkitTransform : string ;
    webkitTransformOrigin : string ;
    webkitTransformOriginX : string ;
    webkitTransformOriginY : string ;
    webkitTransformOriginZ : string ;
    webkitTransformStyle : string ;
    webkitTransition : string ;
    webkitTransitionDelay : string ;
    webkitTransitionDuration : string ;
    webkitTransitionProperty : string ;
    webkitTransitionRepeatCount : string ;
    webkitTransitionTimingFunction : string ;
    webkitUserDrag : string ;
    webkitUserModify : string ;
    webkitUserSelect : string ;
    webkitWrap : string ;
    webkitWrapFlow : string ;
    webkitWrapThrough : string ;
    webkitWritingMode : string ;
    whiteSpace : string ;
    widows : string ;
    width : string | number ;
    wordSpacing : string ;
    wordWrap : string ;
    writingMode : string ;
    zIndex : string | number ;
    zoom : string | number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSRule extends CSSRule_Instance {
    /**
     * Indicates that the rule is a {@see CSSCharsetRule}.
     */
    static CHARSET_RULE : number ;
    /**
     * Indicates that the rule is a {@see CSSFontFaceRule}.
     */
    static FONT_FACE_RULE : number ;
    /**
     * Indicates that the rule is a {@see CSSImportRule}.
     */
    static IMPORT_RULE : number ;
    /**
     * Indicates that the rule is a {@see CSSMediaRule}.
     */
    static MEDIA_RULE : number ;
    /**
     * Indicates that the rule is a {@see CSSPageRule}.
     */
    static PAGE_RULE : number ;
    /**
     * Indicates that the rule is a {@see CSSStyleRule}.
     */
    static STYLE_RULE : number ;
    /**
     * Indicates that the rule is a {@see CSSUnknownRule}.
     */
    static UNKNOWN_RULE : number ;
  }
  class CSSRule_Instance {
    private noStructuralTyping_: any;
    cssText : string ;
    parentRule : CSSRule | null ;
    parentStyleSheet : CSSStyleSheet | null ;
    style : CSSStyleDeclaration | null ;
    type : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSRuleList extends CSSRuleList_Instance {
  }
  class CSSRuleList_Instance implements IArrayLike < CSSRule > {
    private noStructuralTyping_: any;
    [ key: number ]: CSSRule ;
    item (index : number ) : CSSRule | null ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSStyleDeclaration extends CSSStyleDeclaration_Instance {
  }
  class CSSStyleDeclaration_Instance extends CSSProperties_Instance {
    MozBoxSizing : string ;
    MozOpacity : number | string ;
    WebkitBoxSizing : string ;
    backgroundColor : string ;
    backgroundImage : string ;
    backgroundPosition : string ;
    backgroundPositionX : string ;
    backgroundPositionY : string ;
    backgroundRepeat : string ;
    border : string ;
    boxSizing : string ;
    clip : string ;
    color : string ;
    display : string ;
    font : string ;
    fontFamily : string ;
    fontSize : string | number ;
    fontStyle : string ;
    fontWeight : string ;
    height : string | number ;
    left : string ;
    lineHeight : string | number ;
    margin : string | number ;
    marginBottom : string | number ;
    marginTop : string | number ;
    opacity : string | number ;
    overflow : string ;
    padding : string | number ;
    pixelHeight : number ;
    pixelWidth : number ;
    position : string ;
    right : string ;
    textAlign : string ;
    top : string ;
    verticalAlign : string ;
    visibility : string ;
    whiteSpace : string ;
    width : string | number ;
    wordWrap : string ;
    zoom : string | number ;
    cssText : string ;
    getAttribute (name : string , opt_flags ? : number ) : string | number | boolean | null ;
    getExpression (name : string ) : string | number | boolean | null ;
    getPropertyCSSValue (propertyName : string ) : CSSValue | null ;
    getPropertyPriority (propertyName : string ) : string ;
    getPropertyValue (propertyName : string ) : string ;
    item (index : number ) : string ;
    length : number ;
    parentRule : CSSRule | null ;
    removeAttribute (name : string , opt_flags ? : number ) : boolean ;
    removeExpression (name : string ) : boolean ;
    removeProperty (propertyName : string ) : string ;
    setAttribute (name : string , value : any , opt_flags ? : number ) : any ;
    setExpression (name : string , expr : string , opt_language ? : string ) : void ;
    setProperty (propertyName : string , value : string , opt_priority ? : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSStyleRule extends CSSStyleRule_Instance {
  }
  class CSSStyleRule_Instance extends CSSRule_Instance {
    selectorText : string ;
    style : CSSStyleDeclaration | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSStyleSheet extends CSSStyleSheet_Instance {
  }
  class CSSStyleSheet_Instance extends StyleSheet_Instance {
    cssRules : CSSRuleList | null ;
    deleteRule (index : number ) : any ;
    insertRule (rule : string , index : number ) : number ;
    ownerRule : CSSRule | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSUnknownRule extends CSSUnknownRule_Instance {
  }
  class CSSUnknownRule_Instance extends CSSRule_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSValue extends CSSValue_Instance {
    static CSS_CUSTOM : number ;
    static CSS_INHERIT : number ;
    static CSS_PRIMITIVE_VALUE : number ;
    static CSS_VALUE_LIST : number ;
  }
  class CSSValue_Instance {
    private noStructuralTyping_: any;
    cssText : string ;
    cssValueType : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CSSValueList extends CSSValueList_Instance {
  }
  class CSSValueList_Instance extends CSSValue_Instance implements IArrayLike < CSSValue > {
    [ key: number ]: CSSValue ;
    item (index : number ) : CSSValue | null ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface Cache {
    add (request : Request | string ) : Promise < undefined > ;
    addAll (requests : ( Request | string ) [] ) : Promise < undefined > ;
    delete (request : Request | string , opt_options ? : { cacheName ? : string , ignoreMethod ? : boolean , ignoreSearch ? : boolean , ignoreVary ? : boolean , prefixMatch ? : boolean } ) : Promise < boolean > ;
    keys (opt_request ? : Request | string , opt_options ? : { cacheName ? : string , ignoreMethod ? : boolean , ignoreSearch ? : boolean , ignoreVary ? : boolean , prefixMatch ? : boolean } ) : Promise < Request [] > ;
    match (request : Request | string , opt_options ? : { cacheName ? : string , ignoreMethod ? : boolean , ignoreSearch ? : boolean , ignoreVary ? : boolean , prefixMatch ? : boolean } ) : Promise < Response | undefined > ;
    matchAll (opt_request ? : Request | string , opt_options ? : { cacheName ? : string , ignoreMethod ? : boolean , ignoreSearch ? : boolean , ignoreVary ? : boolean , prefixMatch ? : boolean } ) : Promise < Response [] > ;
    put (request : Request | string , response : Response ) : Promise < undefined > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface CacheStorage {
    delete (cacheName : string ) : Promise < boolean > ;
    has (cacheName : string ) : Promise < boolean > ;
    keys ( ) : Promise < string [] > ;
    match (request : Request | string , opt_options ? : { cacheName ? : string , ignoreMethod ? : boolean , ignoreSearch ? : boolean , ignoreVary ? : boolean , prefixMatch ? : boolean } ) : Promise < Response | undefined > ;
    open (cacheName : string ) : Promise < Cache > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Stack frame elements in V8.
   */
  class CallSite extends CallSite_Instance {
  }
  class CallSite_Instance {
    private noStructuralTyping_: any;
    /**
     * If this function was defined in a script returns the current column number.
     */
    getColumnNumber ( ) : number | undefined ;
    /**
     * If this function was created using a call to eval, returns a CallSite object
     * representing the location where eval was called
     */
    getEvalOrigin ( ) : CallSite | null | undefined ;
    /**
     * If this function was defined in a script returns the name of the script
     */
    getFileName ( ) : string | undefined ;
    /**
     * Returns the current function.
     */
    getFunction ( ) : ( ( ...a : any [] ) => any ) | undefined ;
    /**
     * Returns the name of the current function, typically its name property. If a
     * name property is not available an attempt will be made to try to infer a name
     * from the function's context.
     */
    getFunctionName ( ) : string | undefined ;
    /**
     * If this function was defined in a script returns the current line number.
     */
    getLineNumber ( ) : number | undefined ;
    /**
     * Returns the name of the property of this or one of its prototypes that holds
     * the current function.
     */
    getMethodName ( ) : string | undefined ;
    /**
     * Returns the value of this.
     */
    getThis ( ) : Object | null | undefined ;
    /**
     * Returns the type of this as a string. This is the name of the function stored
     * in the constructor field of this, if available, otherwise the object's
     * [[Class]] internal property.
     */
    getTypeName ( ) : string | undefined ;
    /**
     * Is this a constructor call?
     */
    isConstructor ( ) : boolean ;
    /**
     * Does this call take place in code defined by a call to eval?
     */
    isEval ( ) : boolean ;
    /**
     * Is this call in native V8 code?
     */
    isNative ( ) : boolean ;
    /**
     * Is this a toplevel invocation, that is, is this the global object?
     */
    isToplevel ( ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CanvasGradient extends CanvasGradient_Instance {
  }
  class CanvasGradient_Instance {
    private noStructuralTyping_: any;
    addColorStop (offset : number , color : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CanvasPattern extends CanvasPattern_Instance {
  }
  class CanvasPattern_Instance {
    private noStructuralTyping_: any;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CanvasRenderingContext2D extends CanvasRenderingContext2D_Instance {
  }
  class CanvasRenderingContext2D_Instance {
    private noStructuralTyping_: any;
    arc (x : number , y : number , radius : number , startAngle : number , endAngle : number , opt_anticlockwise ? : boolean ) : void ;
    arcTo (x1 : number , y1 : number , x2 : number , y2 : number , radius : number ) : void ;
    beginPath ( ) : void ;
    bezierCurveTo (cp1x : number , cp1y : number , cp2x : number , cp2y : number , x : number , y : number ) : void ;
    canvas : HTMLCanvasElement ;
    clearRect (x : number , y : number , w : number , h : number ) : void ;
    clip (opt_fillRule ? : string ) : void ;
    closePath ( ) : void ;
    createImageData (sw : number , sh : number ) : ImageData | null ;
    createLinearGradient (x0 : number , y0 : number , x1 : number , y1 : number ) : CanvasGradient | null ;
    createPattern (image : HTMLImageElement | null | HTMLCanvasElement , repetition : string ) : CanvasPattern | null ;
    createRadialGradient (x0 : number , y0 : number , r0 : number , x1 : number , y1 : number , r1 : number ) : CanvasGradient | null ;
    drawImage (image : HTMLImageElement | null | HTMLCanvasElement | HTMLVideoElement , dx : number , dy : number , opt_dw ? : number , opt_dh ? : number , opt_sx ? : number , opt_sy ? : number , opt_sw ? : number , opt_sh ? : number ) : void ;
    fill (opt_fillRule ? : string ) : void ;
    fillColor : string ;
    fillRect (x : number , y : number , w : number , h : number ) : void ;
    fillStyle : string ;
    fillText (text : string , x : number , y : number , opt_maxWidth ? : number ) : void ;
    font : string ;
    getImageData (sx : number , sy : number , sw : number , sh : number ) : ImageData | null ;
    getLineDash ( ) : number [] | null ;
    globalAlpha : number ;
    globalCompositeOperation : string ;
    isPointInPath (x : number , y : number , opt_fillRule ? : string ) : boolean ;
    isPointInStroke (x : number , y : number ) : boolean ;
    lineCap : string ;
    lineDashOffset : number ;
    lineJoin : string ;
    lineTo (x : number , y : number ) : void ;
    lineWidth : number ;
    measureText (text : string ) : TextMetrics | null ;
    miterLimit : number ;
    moveTo (x : number , y : number ) : void ;
    putImageData (imagedata : ImageData | null , dx : number , dy : number , opt_dirtyX ? : number , opt_dirtyY ? : number , opt_dirtyWidth ? : number , opt_dirtyHeight ? : number ) : void ;
    quadraticCurveTo (cpx : number , cpy : number , x : number , y : number ) : void ;
    rect (x : number , y : number , w : number , h : number ) : void ;
    restore ( ) : void ;
    rotate (angle : number ) : void ;
    save ( ) : void ;
    scale (x : number , y : number ) : void ;
    /**
     * Note: WebKit only
     */
    setFillColor (a ? : number | string , b ? : number , c ? : number , d ? : number , e ? : number ) : void ;
    setLineDash (a : number [] | null ) : void ;
    /**
     * Note: WebKit only
     */
    setStrokeColor (a ? : number | string , b ? : number , c ? : number , d ? : number , e ? : number ) : void ;
    setTransform (m11 : number , m12 : number , m21 : number , m22 : number , dx : number , dy : number ) : void ;
    shadowBlur : number ;
    shadowColor : string ;
    shadowOffsetX : number ;
    shadowOffsetY : number ;
    stroke ( ) : void ;
    strokeColor : string ;
    strokeRect (x : number , y : number , w : number , h : number ) : void ;
    strokeStyle : string ;
    strokeText (text : string , x : number , y : number , opt_maxWidth ? : number ) : void ;
    textAlign : string ;
    textBaseline : string ;
    transform (m11 : number , m12 : number , m21 : number , m22 : number , dx : number , dy : number ) : void ;
    translate (x : number , y : number ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CaretPosition extends CaretPosition_Instance {
  }
  class CaretPosition_Instance {
    private noStructuralTyping_: any;
    offset : number ;
    offsetNode : Node | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CharacterData extends CharacterData_Instance {
  }
  class CharacterData_Instance extends Node_Instance {
    appendData (arg : string ) : void ;
    data : string ;
    deleteData (offset : number , count : number ) : void ;
    insertData (offset : number , arg : string ) : void ;
    length : number ;
    nextElementSibling : Element | null ;
    previousElementSibling : Element | null ;
    remove ( ) : void ;
    replaceData (offset : number , count : number , arg : string ) : void ;
    substringData (offset : number , count : number ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Event whose listeners take a boolean parameter.
   */
  class ChromeBooleanEvent extends ChromeBooleanEvent_Instance {
  }
  class ChromeBooleanEvent_Instance {
    private noStructuralTyping_: any;
    addListener (callback : (a : boolean ) => undefined ) : any ;
    hasListener (callback : (a : boolean ) => undefined ) : boolean ;
    hasListeners ( ) : boolean ;
    removeListener (callback : (a : boolean ) => undefined ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * The data object given by chrome.csi().
   */
  class ChromeCsiInfo extends ChromeCsiInfo_Instance {
  }
  class ChromeCsiInfo_Instance {
    private noStructuralTyping_: any;
    /**
     * Same as chrome.loadTimes().finishDocumentLoadTime but in milliseconds and
     * truncated.
     */
    onloadT : number ;
    /**
     * The time since startE in milliseconds.
     */
    pageT : number ;
    /**
     * Same as chrome.loadTimes().requestTime, if defined.
     * Otherwise, gives the same value as chrome.loadTimes().startLoadTime.
     * In milliseconds, truncated.
     */
    startE : number ;
    tran : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ChromeEvent extends ChromeEvent_Instance {
  }
  class ChromeEvent_Instance {
    private noStructuralTyping_: any;
    addListener (callback : ( ...a : any [] ) => any ) : void ;
    hasListener (callback : ( ...a : any [] ) => any ) : boolean ;
    hasListeners ( ) : boolean ;
    removeListener (callback : ( ...a : any [] ) => any ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * The data object given by chrome.loadTimes().
   */
  class ChromeLoadTimes extends ChromeLoadTimes_Instance {
  }
  class ChromeLoadTimes_Instance {
    private noStructuralTyping_: any;
    commitLoadTime : number ;
    connectionInfo : string ;
    finishDocumentLoadTime : number ;
    finishLoadTime : number ;
    firstPaintAfterLoadTime : number ;
    firstPaintTime : number ;
    navigationType : number ;
    npnNegotiatedProtocol : string ;
    requestTime : number ;
    startLoadTime : number ;
    wasAlternateProtocolAvailable : boolean ;
    /**
     * True iff the resource was fetched over SPDY.
     */
    wasFetchedViaSpdy : boolean ;
    wasNpnNegotiated : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Event whose listeners take a number parameter.
   */
  class ChromeNumberEvent extends ChromeNumberEvent_Instance {
  }
  class ChromeNumberEvent_Instance {
    private noStructuralTyping_: any;
    addListener (callback : (a : number ) => undefined ) : any ;
    hasListener (callback : (a : number ) => undefined ) : boolean ;
    hasListeners ( ) : boolean ;
    removeListener (callback : (a : number ) => undefined ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Event whose listeners take an Object parameter.
   */
  class ChromeObjectEvent extends ChromeObjectEvent_Instance {
  }
  class ChromeObjectEvent_Instance {
    private noStructuralTyping_: any;
    addListener (callback : (a : Object ) => undefined ) : any ;
    hasListener (callback : (a : Object ) => undefined ) : boolean ;
    hasListeners ( ) : boolean ;
    removeListener (callback : (a : Object ) => undefined ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Event whose listeners take a string array parameter.
   */
  class ChromeStringArrayEvent extends ChromeStringArrayEvent_Instance {
  }
  class ChromeStringArrayEvent_Instance {
    private noStructuralTyping_: any;
    addListener (callback : (a : string [] ) => undefined ) : any ;
    hasListener (callback : (a : string [] ) => undefined ) : boolean ;
    hasListeners ( ) : boolean ;
    removeListener (callback : (a : string [] ) => undefined ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Event whose listeners take a string parameter.
   */
  class ChromeStringEvent extends ChromeStringEvent_Instance {
  }
  class ChromeStringEvent_Instance {
    private noStructuralTyping_: any;
    addListener (callback : (a : string ) => undefined ) : any ;
    hasListener (callback : (a : string ) => undefined ) : boolean ;
    hasListeners ( ) : boolean ;
    removeListener (callback : (a : string ) => undefined ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Event whose listeners take two strings as parameters.
   */
  class ChromeStringStringEvent extends ChromeStringStringEvent_Instance {
  }
  class ChromeStringStringEvent_Instance {
    private noStructuralTyping_: any;
    addListener (callback : (a : string , b : string ) => undefined ) : any ;
    hasListener (callback : (a : string , b : string ) => undefined ) : boolean ;
    hasListeners ( ) : boolean ;
    removeListener (callback : (a : string , b : string ) => undefined ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ClientInformation extends ClientInformation_Instance {
  }
  class ClientInformation_Instance {
    private noStructuralTyping_: any;
    onLine : boolean ;
    registerContentHandler (mimeType : string , uri : string , title : string ) : void ;
    registerProtocolHandler (protocol : string , uri : string , title : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ClientRect extends ClientRect_Instance {
  }
  class ClientRect_Instance {
    private noStructuralTyping_: any;
    bottom : number ;
    height : number ;
    left : number ;
    right : number ;
    top : number ;
    width : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ClientRectList extends ClientRectList_Instance {
  }
  class ClientRectList_Instance implements IArrayLike < ClientRect > {
    private noStructuralTyping_: any;
    [ key: number ]: ClientRect ;
    item (index : number ) : ClientRect | null ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ClipboardData extends ClipboardData_Instance {
  }
  class ClipboardData_Instance {
    private noStructuralTyping_: any;
    clearData (opt_type ? : string ) : any ;
    getData (type : string ) : string ;
    setData (type : string , data : string ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Comment extends Comment_Instance {
  }
  class Comment_Instance extends CharacterData_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class Console extends Console_Instance {
  }
  class Console_Instance {
    private noStructuralTyping_: any;
    assert (condition : any ,  ...var_args : any [] ) : any ;
    clear ( ) : any ;
    count (value : any ) : any ;
    debug ( ...var_args : any [] ) : any ;
    dir (value : any ) : any ;
    dirxml ( ...var_args : any [] ) : any ;
    error ( ...var_args : any [] ) : any ;
    group ( ...var_args : any [] ) : any ;
    groupCollapsed ( ...var_args : any [] ) : any ;
    groupEnd ( ) : any ;
    info ( ...var_args : any [] ) : any ;
    log ( ...var_args : any [] ) : any ;
    markTimeline (value : any ) : any ;
    memory : MemoryInfo | null ;
    profile (opt_title ? : string ) : any ;
    profileEnd (opt_title ? : string ) : any ;
    profiles : ( ScriptProfile | null ) [] | null ;
    table (data : Object , opt_columns ? : any ) : any ;
    time (name : string ) : any ;
    timeEnd (name : string ) : any ;
    timeStamp (value : any ) : any ;
    trace ( ...var_args : any [] ) : any ;
    warn ( ...var_args : any [] ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ControlRange extends ControlRange_Instance {
  }
  class ControlRange_Instance {
    private noStructuralTyping_: any;
    add : any ;
    addElement : any ;
    execCommand : any ;
    item : any ;
    queryCommandEnabled : any ;
    queryCommandIndeterm : any ;
    queryCommandState : any ;
    queryCommandSupported : any ;
    queryCommandValue : any ;
    remove : any ;
    scrollIntoView : any ;
    select : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ConvolverNode extends ConvolverNode_Instance {
  }
  class ConvolverNode_Instance extends AudioNode_Instance {
    buffer : AudioBuffer | null ;
    normalize : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CountQueuingStrategy extends CountQueuingStrategy_Instance {
  }
  class CountQueuingStrategy_Instance {
    private noStructuralTyping_: any;
    constructor (config : { highWaterMark : number } ) ;
    size (chunk : any ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Counter extends Counter_Instance {
  }
  class Counter_Instance {
    private noStructuralTyping_: any;
    identifier : string ;
    listStyle : string ;
    separator : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class CustomEvent extends CustomEvent_Instance {
  }
  class CustomEvent_Instance extends GlobalEvent {
    constructor (type : string , opt_eventInitDict ? : { bubbles ? : boolean , cancelable ? : boolean , detail : any } ) ;
    detail : any ;
    initCustomEvent (eventType : string , bubbles : boolean , cancelable : boolean , detail : any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DOMApplicationCache extends DOMApplicationCache_Instance {
  }
  class DOMApplicationCache_Instance implements EventTarget {
    private noStructuralTyping_: any;
    /**
     * The update has started but the resources are not downloaded yet - for
     * example, this can happen when the manifest file is fetched.
     */
    CHECKING : number ;
    /**
     * The resources are being downloaded into the cache.
     */
    DOWNLOADING : number ;
    /**
     * The cache is idle.
     */
    IDLE : number ;
    /**
     * The cache is obsolete.
     */
    OBSOLETE : number ;
    /**
     * The object isn't associated with an application cache. This can occur if the
     * update process fails and there is no previous cache to revert to, or if there
     * is no manifest file.
     */
    UNCACHED : number ;
    /**
     * Resources have finished downloading and the new cache is ready to be used.
     */
    UPDATEREADY : number ;
    addEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    dispatchEvent (evt : any ) : any ;
    /**
     * Sent when the update process finishes for the first time; that is, the first
     * time an application cache is saved.
     */
    oncached : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * Sent when the cache update process begins.
     */
    onchecking : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * Sent when the update process begins downloading resources in the manifest
     * file.
     */
    ondownloading : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * Sent when an error occurs.
     */
    onerror : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * Sent when the update process finishes but the manifest file does not change.
     */
    onnoupdate : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * Sent when each resource in the manifest file begins to download.
     */
    onprogress : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * Sent when there is an existing application cache, the update process
     * finishes, and there is a new application cache ready for use.
     */
    onupdateready : ( (a : GlobalEvent ) => any ) | null ;
    removeEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    /**
     * The current status of the application cache.
     */
    status : number ;
    /**
     * Replaces the active cache with the latest version.
     */
    swapCache ( ) : any ;
    /**
     * Manually triggers the update process.
     */
    update ( ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DOMConfiguration extends DOMConfiguration_Instance {
  }
  class DOMConfiguration_Instance {
    private noStructuralTyping_: any;
    canSetParameter (name : string ) : boolean ;
    getParameter (name : string ) : any ;
    parameterNames : DOMStringList | null ;
    setParameter (name : string , value : any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DOMError extends DOMError_Instance {
    static SEVERITY_ERROR : number ;
    static SEVERITY_FATAL_ERROR : number ;
    static SEVERITY_WARNING : number ;
  }
  class DOMError_Instance {
    private noStructuralTyping_: any;
    location : DOMLocator | null ;
    message : string ;
    name : string ;
    relatedData : Object | null ;
    relatedException : Object | null ;
    severity : number ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DOMErrorHandler extends DOMErrorHandler_Instance {
  }
  class DOMErrorHandler_Instance {
    private noStructuralTyping_: any;
    handleError (error : DOMError | null ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DOMException extends DOMException_Instance {
    static DOMSTRING_SIZE_ERR : number ;
    static HIERARCHY_REQUEST_ERR : number ;
    static INDEX_SIZE_ERR : number ;
    static INUSE_ATTRIBUTE_ERR : number ;
    static INVALID_ACCESS_ERR : number ;
    static INVALID_CHARACTER_ERR : number ;
    static INVALID_MODIFICATION_ERR : number ;
    static INVALID_STATE_ERR : number ;
    static NAMESPACE_ERR : number ;
    static NOT_FOUND_ERR : number ;
    static NOT_SUPPORTED_ERR : number ;
    static NO_DATA_ALLOWED_ERR : number ;
    static NO_MODIFICATION_ALLOWED_ERR : number ;
    static SYNTAX_ERR : number ;
    static TYPE_MISMATCH_ERR : number ;
    static VALIDATION_ERR : number ;
    static WRONG_DOCUMENT_ERR : number ;
  }
  class DOMException_Instance {
    private noStructuralTyping_: any;
    code : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DOMImplementation extends DOMImplementation_Instance {
  }
  class DOMImplementation_Instance {
    private noStructuralTyping_: any;
    createDocument (namespaceURI : string , publicId : string , doctype : DocumentType | null ) : Document | null ;
    createDocumentType (qualifiedName : string , publicId : string , systemId : string ) : DocumentType | null ;
    createHTMLDocument (opt_title ? : string ) : HTMLDocument ;
    getFeature (feature : string , version : string ) : Object | null ;
    hasFeature (feature : string , version : string ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DOMImplementationCSS extends DOMImplementationCSS_Instance {
  }
  class DOMImplementationCSS_Instance {
    private noStructuralTyping_: any;
    createCSSStyleSheet (title : string , media : string ) : CSSStyleSheet | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DOMImplementationList extends DOMImplementationList_Instance {
  }
  class DOMImplementationList_Instance implements IArrayLike < DOMImplementation > {
    private noStructuralTyping_: any;
    [ key: number ]: DOMImplementation ;
    item (index : number ) : DOMImplementation | null ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DOMImplementationSource extends DOMImplementationSource_Instance {
  }
  class DOMImplementationSource_Instance {
    private noStructuralTyping_: any;
    getDOMImplementation (features : string ) : DOMImplementation | null ;
    getDOMImplementationList (features : string ) : DOMImplementationList | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DOMLocator extends DOMLocator_Instance {
  }
  class DOMLocator_Instance {
    private noStructuralTyping_: any;
    byteOffset : number ;
    columnNumber : number ;
    lineNumber : number ;
    relatedNode : Node | null ;
    uri : string ;
    utf16Offset : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * DOMParser is mainly useful for applications and extensions based on Mozilla
   * platform. While it's available to web pages, it's not part of any standard and
   * level of support in other browsers is unknown.
   */
  class DOMParser extends DOMParser_Instance {
  }
  class DOMParser_Instance {
    private noStructuralTyping_: any;
    /**
     * The string passed in is parsed into a DOM document.
     *
     * Example:
     * var parser = new DOMParser();
     * var doc = parser.parseFromString(aStr, "text/xml");
     * @param src The UTF16 string to be parsed.
     * @param type The content type of the string.
     */
    parseFromString (src : string , type : string ) : Document | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DOMStringList extends DOMStringList_Instance {
  }
  class DOMStringList_Instance implements IArrayLike < string > {
    private noStructuralTyping_: any;
    [ key: number ]: string ;
    contains (str : string ) : boolean ;
    item (index : number ) : string ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DOMTokenList extends DOMTokenList_Instance {
  }
  class DOMTokenList_Instance implements IArrayLike < string > {
    private noStructuralTyping_: any;
    [ key: number ]: string ;
    add ( ...var_args : ( string | undefined ) [] ) : any ;
    contains (token : string ) : boolean ;
    item (index : number ) : string ;
    /**
     * Returns the number of CSS classes applied to this Element.
     */
    length : number ;
    remove ( ...var_args : ( string | undefined ) [] ) : any ;
    toString ( ) : string ;
    toggle (token : string , opt_force ? : boolean ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * HTML5 DataTransfer class.
   *
   * We say that this extends ClipboardData, because Event.prototype.clipboardData
   * is a DataTransfer on WebKit but a ClipboardData on IE. The interfaces are so
   * similar that it's easier to merge them.
   */
  class DataTransfer extends DataTransfer_Instance {
  }
  class DataTransfer_Instance extends ClipboardData_Instance {
    addElement (elem : HTMLElement | null ) : any ;
    clearData (opt_format ? : string ) : any ;
    dropEffect : string ;
    effectAllowed : string ;
    files : FileList | null ;
    getData (format : string ) : string ;
    items : DataTransferItemList ;
    setData (format : string , data : string ) : any ;
    setDragImage (img : HTMLElement | null , x : number , y : number ) : any ;
    types : string [] | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * HTML5 DataTransferItem class.
   */
  class DataTransferItem extends DataTransferItem_Instance {
  }
  class DataTransferItem_Instance {
    private noStructuralTyping_: any;
    getAsFile ( ) : File | null ;
    getAsString (callback : (a : string ) => any ) : any ;
    kind : string ;
    type : string ;
    webkitGetAsEntry ( ) : Entry | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * HTML5 DataTransferItemList class. There are some discrepancies in the docs
   * on the whatwg.org site. When in doubt, these prototypes match what is
   * implemented as of Chrome 30.
   */
  class DataTransferItemList extends DataTransferItemList_Instance {
  }
  class DataTransferItemList_Instance implements IArrayLike < DataTransferItem > {
    private noStructuralTyping_: any;
    [ key: number ]: DataTransferItem ;
    /**
     * Adds an item to the list.
     * @param data Data for the item being added.
     * @param opt_type Mime type of the item being added. MUST be present if the {@code data} parameter is a string.
     */
    add (data : string | File , opt_type ? : string ) : any ;
    /**
     * Removes all items from the list.
     */
    clear ( ) : any ;
    item (i : number ) : DataTransferItem | null ;
    length : number ;
    /**
     * Removes an item from the list.
     * @param i File to remove from the list.
     */
    remove (i : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DataView extends DataView_Instance {
  }
  class DataView_Instance extends ArrayBufferView_Instance {
    constructor (buffer : ArrayBuffer | null , opt_byteOffset ? : number , opt_byteLength ? : number ) ;
    getFloat32 (byteOffset : number , opt_littleEndian ? : boolean ) : number ;
    getFloat64 (byteOffset : number , opt_littleEndian ? : boolean ) : number ;
    getInt16 (byteOffset : number , opt_littleEndian ? : boolean ) : number ;
    getInt32 (byteOffset : number , opt_littleEndian ? : boolean ) : number ;
    getInt8 (byteOffset : number ) : number ;
    getUint16 (byteOffset : number , opt_littleEndian ? : boolean ) : number ;
    getUint32 (byteOffset : number , opt_littleEndian ? : boolean ) : number ;
    getUint8 (byteOffset : number ) : number ;
    setFloat32 (byteOffset : number , value : number , opt_littleEndian ? : boolean ) : any ;
    setFloat64 (byteOffset : number , value : number , opt_littleEndian ? : boolean ) : any ;
    setInt16 (byteOffset : number , value : number , opt_littleEndian ? : boolean ) : any ;
    setInt32 (byteOffset : number , value : number , opt_littleEndian ? : boolean ) : any ;
    setInt8 (byteOffset : number , value : number ) : any ;
    setUint16 (byteOffset : number , value : number , opt_littleEndian ? : boolean ) : any ;
    setUint32 (byteOffset : number , value : number , opt_littleEndian ? : boolean ) : any ;
    setUint8 (byteOffset : number , value : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Database extends Database_Instance {
  }
  class Database_Instance {
    private noStructuralTyping_: any;
    changeVersion (oldVersion : string , newVersion : string , callback : (a : SQLTransaction ) => undefined , errorCallback : (a : SQLError ) => undefined , successCallback : ( ( ...a : any [] ) => any ) | null ) : any ;
    readTransaction (callback : (a : SQLTransaction ) => undefined , opt_errorCallback ? : (a : SQLError ) => undefined , opt_Callback ? : ( ( ...a : any [] ) => any ) | null ) : any ;
    transaction (callback : (a : SQLTransaction ) => undefined , opt_errorCallback ? : (a : SQLError ) => undefined , opt_Callback ? : ( ( ...a : any [] ) => any ) | null ) : any ;
    version : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface DatabaseCallback {
    handleEvent (db : Database ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Date extends Date_Instance {
    static UTC (year : number , month : number , opt_date ? : number , opt_hours ? : number , opt_minute ? : number , opt_second ? : number , opt_ms ? : number ) : number ;
    static now ( ) : number ;
    /**
     * Parses a string representation of a date, and returns the number
     * of milliseconds since January 1, 1970, 00:00:00, local time.
     */
    static parse (date : any ) : number ;
  }
  class Date_Instance {
    private noStructuralTyping_: any;
    constructor (opt_yr_num ? : any , opt_mo_num ? : any , opt_day_num ? : any , opt_hr_num ? : any , opt_min_num ? : any , opt_sec_num ? : any , opt_ms_num ? : any ) ;
    getDate ( ) : number ;
    getDay ( ) : number ;
    getFullYear ( ) : number ;
    getHours ( ) : number ;
    getMilliseconds ( ) : number ;
    getMinutes ( ) : number ;
    getMonth ( ) : number ;
    getSeconds ( ) : number ;
    getTime ( ) : number ;
    getTimezoneOffset ( ) : number ;
    getUTCDate ( ) : number ;
    getUTCDay ( ) : number ;
    getUTCFullYear ( ) : number ;
    getUTCHours ( ) : number ;
    getUTCMilliseconds ( ) : number ;
    getUTCMinutes ( ) : number ;
    getUTCMonth ( ) : number ;
    getUTCSeconds ( ) : number ;
    getYear ( ) : number ;
    /**
     * Sets the day of the month for a specified date according to local time.
     */
    setDate (dayValue : number ) : any ;
    /**
     * Sets the full year for a specified date according to local time.
     */
    setFullYear (yearValue : number , opt_monthValue ? : number , opt_dayValue ? : number ) : any ;
    /**
     * Sets the hours for a specified date according to local time.
     */
    setHours (hoursValue : number , opt_minutesValue ? : number , opt_secondsValue ? : number , opt_msValue ? : number ) : any ;
    /**
     * Sets the milliseconds for a specified date according to local time.
     */
    setMilliseconds (millisecondsValue : number ) : any ;
    /**
     * Sets the minutes for a specified date according to local time.
     */
    setMinutes (minutesValue : number , opt_secondsValue ? : number , opt_msValue ? : number ) : any ;
    /**
     * Set the month for a specified date according to local time.
     */
    setMonth (monthValue : number , opt_dayValue ? : number ) : any ;
    /**
     * Sets the seconds for a specified date according to local time.
     */
    setSeconds (secondsValue : number , opt_msValue ? : number ) : any ;
    /**
     * Sets the Date object to the time represented by a number of milliseconds
     * since January 1, 1970, 00:00:00 UTC.
     */
    setTime (timeValue : number ) : any ;
    /**
     * Sets the day of the month for a specified date according to universal time.
     */
    setUTCDate (dayValue : number ) : any ;
    /**
     * Sets the full year for a specified date according to universal time.
     */
    setUTCFullYear (yearValue : number , opt_monthValue ? : number , opt_dayValue ? : number ) : any ;
    /**
     * Sets the hour for a specified date according to universal time.
     */
    setUTCHours (hoursValue : number , opt_minutesValue ? : number , opt_secondsValue ? : number , opt_msValue ? : number ) : any ;
    /**
     * Sets the milliseconds for a specified date according to universal time.
     */
    setUTCMilliseconds (millisecondsValue : number ) : any ;
    /**
     * Sets the minutes for a specified date according to universal time.
     */
    setUTCMinutes (minutesValue : number , opt_secondsValue ? : number , opt_msValue ? : number ) : any ;
    /**
     * Sets the month for a specified date according to universal time.
     */
    setUTCMonth (monthValue : number , opt_dayValue ? : number ) : any ;
    /**
     * Sets the seconds for a specified date according to universal time.
     */
    setUTCSeconds (secondsValue : number , opt_msValue ? : number ) : any ;
    /**
     * Sets the year for a specified date according to local time.
     */
    setYear (yearValue : number ) : any ;
    toDateString ( ) : string ;
    toGMTString ( ) : string ;
    toISOString ( ) : string ;
    toJSON (opt_ignoredKey ? : any ) : string ;
    toLocaleDateString (opt_locales ? : string | string [] | null , opt_options ? : Object | null ) : string ;
    toLocaleFormat (formatString : string ) : string ;
    toLocaleString (opt_locales ? : string | string [] | null , opt_options ? : Object | null ) : string ;
    toLocaleTimeString (opt_locales ? : string | string [] | null , opt_options ? : Object | null ) : string ;
    toSource ( ) : string ;
    toString ( ) : string ;
    toTimeString ( ) : string ;
    toUTCString ( ) : string ;
    valueOf ( ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz.Date {
  function UTC (year : number , month : number , opt_date ? : number , opt_hours ? : number , opt_minute ? : number , opt_second ? : number , opt_ms ? : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Date {
  function now ( ) : number ;
}
declare namespace ಠ_ಠ.clutz.Date {
  /**
   * Parses a string representation of a date, and returns the number
   * of milliseconds since January 1, 1970, 00:00:00, local time.
   */
  function parse (date : any ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  interface DedicatedWorkerGlobalScope extends WorkerGlobalScope {
    /**
     * Sent when the creator posts a message to this worker.
     */
    onmessage : ( (a : MessageEvent < any > ) => any ) | null ;
    /**
     * Posts a message to creator of this worker.
     */
    postMessage (message : any , opt_transfer ? : Transferable [] | null ) : any ;
    /**
     * Posts a message to creator of this worker.
     */
    webkitPostMessage (message : any , opt_transfer ? : Transferable [] | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DelayNode extends DelayNode_Instance {
  }
  class DelayNode_Instance extends AudioNode_Instance {
    delayTime : AudioParam | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DeviceAcceleration extends DeviceAcceleration_Instance {
  }
  class DeviceAcceleration_Instance {
    private noStructuralTyping_: any;
    x : number | null ;
    y : number | null ;
    z : number | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DeviceMotionEvent extends DeviceMotionEvent_Instance {
  }
  class DeviceMotionEvent_Instance extends GlobalEvent {
    acceleration : DeviceAcceleration | null ;
    accelerationIncludingGravity : DeviceAcceleration | null ;
    interval : number | null ;
    rotationRate : DeviceRotationRate | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DeviceOrientationEvent extends DeviceOrientationEvent_Instance {
  }
  class DeviceOrientationEvent_Instance extends GlobalEvent {
    absolute : boolean ;
    alpha : number | null ;
    beta : number | null ;
    gamma : number | null ;
    webkitCompassAccuracy : number | null ;
    webkitCompassHeading : number | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DeviceRotationRate extends DeviceRotationRate_Instance {
  }
  class DeviceRotationRate_Instance {
    private noStructuralTyping_: any;
    alpha : number | null ;
    beta : number | null ;
    gamma : number | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DirectoryEntry extends DirectoryEntry_Instance {
  }
  class DirectoryEntry_Instance extends Entry_Instance {
    createReader ( ) : DirectoryReader ;
    getDirectory (path : string , options ? : Object | null , successCallback ? : (a : DirectoryEntry ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
    getFile (path : string , options ? : Object | null , successCallback ? : (a : FileEntry ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
    removeRecursively (successCallback : ( ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DirectoryReader extends DirectoryReader_Instance {
  }
  class DirectoryReader_Instance {
    private noStructuralTyping_: any;
    readEntries (successCallback : (a : Entry [] ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Document extends Document_Instance {
  }
  class Document_Instance extends Node_Instance {
    URL : string ;
    URLUnencoded : any ;
    XMLDocument : any ;
    XSLDocument : any ;
    activeElement : any ;
    adoptNode (externalNode : Node | null ) : Node | null ;
    alinkColor : string ;
    all : any ;
    anchors : HTMLCollection < any > | null ;
    applets : HTMLCollection < any > | null ;
    async : boolean ;
    attachEvent (a : string , b : ( ( ...a : any [] ) => any ) | null ) : any ;
    baseURI : string | null ;
    bgColor : string ;
    body : HTMLBodyElement | null ;
    caretPositionFromPoint (x : number , y : number ) : CaretPosition | null ;
    characterSet : any ;
    charset : any ;
    childElementCount : number ;
    clear ( ) : any ;
    close : any ;
    compatMode : string ;
    contentType : any ;
    cookie : string ;
    createAttribute (name : string ) : Attr ;
    createAttributeNS (namespaceURI : string | null , qualifiedName : string ) : Attr ;
    createCDATASection (data : string ) : CDATASection ;
    createComment (data : string ) : Comment ;
    createDocumentFragment ( ) : DocumentFragment ;
    /**
     * Create a DOM element.
     *
     * Web components introduced the second parameter as a way of extending existing
     * tags (e.g. document.createElement('button', 'fancy-button')).
     */
    createElement (tagName : string , opt_typeExtension ? : string ) : Element ;
    createElementNS (namespaceURI : string | null , qualifiedName : string , opt_typeExtension ? : string ) : Element ;
    createEntityReference (name : string ) : EntityReference ;
    createEvent (type : string ) : GlobalEvent | null ;
    createEventObject : any ;
    createNSResolver : any ;
    createProcessingInstruction (target : string , data : string ) : ProcessingInstruction ;
    createRange ( ) : Range | null ;
    createStyleSheet : any ;
    createTextNode (data : number | string ) : Text ;
    /**
     * Creates a new Touch object.
     */
    createTouch (view : Window | null , target : EventTarget | null , identifier : number , pageX : number , pageY : number , screenX : number , screenY : number ) : Touch | null ;
    /**
     * Creates a new TouchList object.
     */
    createTouchList (touches : ( Touch | null ) [] | null ) : TouchList | null ;
    createTreeWalker : any ;
    currentScript : any ;
    defaultCharset : any ;
    defaultView : any ;
    designMode : string ;
    detachEvent (a : string , b : ( ( ...a : any [] ) => any ) | null ) : any ;
    dir : any ;
    doctype : DocumentType | null ;
    documentElement : Element ;
    documentMode : any ;
    documentURI : string ;
    documentURIObject : any ;
    domConfig : DOMConfiguration | null ;
    domain : string ;
    elementFromPoint (x : number , y : number ) : Element | null ;
    embeds : HTMLCollection < any > | null ;
    evaluate : any ;
    execCommand (a : string , b ? : boolean | null , c ? : any ) : any ;
    exitFullscreen ( ) : any ;
    expando : any ;
    fgColor : string ;
    fileCreatedDate : any ;
    fileModifiedDate : any ;
    fileSize : any ;
    firstChild : Element | null ;
    firstElementChild : Element | null ;
    focus : any ;
    fonts : FontFaceSet ;
    forms : HTMLCollection < any > | null ;
    frames : any ;
    fullscreenElement : Element | null ;
    fullscreenEnabled : boolean ;
    getBoxObjectFor (element : any ) : BoxObject | null ;
    getCSSCanvasContext (contextId : string , name : string , width : number , height : number ) : any ;
    getElementById (s : string ) : Element | null ;
    getElementsByClassName (name : string ) : NodeList < any > ;
    getElementsByTagName (tagname : string ) : NodeList < Element > ;
    getElementsByTagNameNS (namespace : string , name : string ) : NodeList < Element > ;
    hasFocus ( ) : boolean ;
    /**
     * Document head accessor.
     */
    head : HTMLHeadElement | null ;
    height : number ;
    hidden : boolean ;
    images : HTMLCollection < any > | null ;
    implementation : DOMImplementation | null ;
    importNode (externalNode : Node | null , deep : boolean ) : Node | null ;
    inputEncoding : string ;
    lastElementChild : Element | null ;
    lastModified : string ;
    linkColor : string ;
    links : HTMLCollection < any > | null ;
    load (uri : string ) : any ;
    loadOverlay : any ;
    loadXML : any ;
    location : Location ;
    mergeAttributes : any ;
    mozCancelFullScreen ( ) : any ;
    mozFullScreen : boolean ;
    mozFullScreenElement : Element | null ;
    mozFullScreenEnabled : boolean ;
    mozHidden : boolean ;
    mozVisibilityState : string ;
    msFullscreenElement : Element | null ;
    msFullscreenEnabled : boolean ;
    msHidden : boolean ;
    msVisibilityState : string ;
    namespaces : any ;
    nodePrincipal : any ;
    normalizeDocument ( ) : void ;
    onoffline : any ;
    ononline : any ;
    open : any ;
    parentWindow : any ;
    plugins : any ;
    popupNode : any ;
    /**
     * The postMessage method (as implemented in Opera).
     */
    postMessage (message : string ) : any ;
    protocol : any ;
    queryCommandEnabled : any ;
    queryCommandIndeterm : any ;
    queryCommandState : any ;
    queryCommandSupported (a : string ) : any ;
    queryCommandValue : any ;
    querySelector (selectors : string ) : Element | null ;
    querySelectorAll (selectors : string ) : NodeList < Element > ;
    recalc : any ;
    referrer : string ;
    /**
     * This method is deprecated and should be removed by the end of 2014.
     */
    register (a : string , b : { extends ? : string , prototype ? : Object | null } ) : any ;
    registerElement (a : string , b ? : { extends ? : string , prototype ? : Object | null } ) : ( ...a : any [] ) => any ;
    releaseCapture : any ;
    renameNode (n : Node | null , namespaceURI : string , qualifiedName : string ) : Node | null ;
    scripts : any ;
    scrollingElement : Element | null ;
    selection : Selection | null ;
    setActive : any ;
    strictErrorChecking : boolean ;
    styleSheets : StyleSheetList | null ;
    title : string | null ;
    tooltipNode : any ;
    uniqueID : any ;
    visibilityState : VisibilityState ;
    vlinkColor : string ;
    webkitCancelFullScreen ( ) : any ;
    webkitCurrentFullScreenElement : Element | null ;
    webkitFullScreenKeyboardInputAllowed : boolean ;
    webkitFullscreenElement : Element | null ;
    webkitHidden : boolean ;
    webkitIsFullScreen : boolean ;
    webkitVisibilityState : string ;
    width : number ;
    write (text : string ) : void ;
    writeln (text : string ) : void ;
    xmlEncoding : string ;
    xmlStandalone : boolean ;
    xmlVersion : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DocumentCSS extends DocumentCSS_Instance {
  }
  class DocumentCSS_Instance {
    private noStructuralTyping_: any;
    getOverrideStyle (elt : Element | null , pseudoElt : string ) : CSSStyleDeclaration | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface DocumentEvent {
    createEvent (eventType : string ) : GlobalEvent ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DocumentFragment extends DocumentFragment_Instance {
  }
  class DocumentFragment_Instance extends Node_Instance {
    childElementCount : number ;
    firstElementChild : Element | null ;
    lastElementChild : Element | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DocumentRange extends DocumentRange_Instance {
  }
  class DocumentRange_Instance {
    private noStructuralTyping_: any;
    createRange ( ) : Range | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DocumentStyle extends DocumentStyle_Instance {
  }
  class DocumentStyle_Instance {
    private noStructuralTyping_: any;
    styleSheets : StyleSheetList | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DocumentType extends DocumentType_Instance {
  }
  class DocumentType_Instance extends Node_Instance {
    entities : NamedNodeMap < Entity > | null ;
    internalSubset : string ;
    name : string ;
    notations : NamedNodeMap < Notation > | null ;
    publicId : string ;
    remove ( ) : void ;
    systemId : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DragEvent extends DragEvent_Instance {
  }
  class DragEvent_Instance extends MouseEvent_Instance {
    constructor (type : string , opt_eventInitDict ? : { altKey ? : boolean , bubbles ? : boolean , button ? : number , buttons ? : number , cancelable ? : boolean , clientX ? : number , clientY ? : number , ctrlKey ? : boolean , dataTransfer ? : DataTransfer | null , detail ? : number , metaKey ? : boolean , relatedTarget ? : EventTarget | null , screenX ? : number , screenY ? : number , shiftKey ? : boolean , view ? : Window | null } ) ;
    dataTransfer : DataTransfer | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class DynamicsCompressorNode extends DynamicsCompressorNode_Instance {
  }
  class DynamicsCompressorNode_Instance extends AudioNode_Instance {
    attack : AudioParam ;
    knee : AudioParam ;
    ratio : AudioParam ;
    reduction : AudioParam ;
    release : AudioParam ;
    threshold : AudioParam ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class EXT_texture_filter_anisotropic extends EXT_texture_filter_anisotropic_Instance {
  }
  class EXT_texture_filter_anisotropic_Instance {
    private noStructuralTyping_: any;
    MAX_TEXTURE_MAX_ANISOTROPY_EXT : number ;
    TEXTURE_MAX_ANISOTROPY_EXT : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Element extends Element_Instance {
    static ALLOW_KEYBOARD_INPUT : number ;
  }
  class Element_Instance extends Node_Instance {
    ALLOW_KEYBOARD_INPUT : number ;
    addBehavior (sUrl : string ) : number ;
    attachEvent (a : string , b : ( ( ...a : any [] ) => any ) | null ) : any ;
    blur ( ) : void ;
    canHaveChildren : boolean ;
    childElementCount : number ;
    children : NodeList < any > ;
    /**
     * A better interface to CSS classes than className.
     */
    classList : DOMTokenList ;
    className : any ;
    classid : string ;
    click ( ) : void ;
    clientHeight : number ;
    clientLeft : number ;
    clientTop : number ;
    clientWidth : number ;
    cloneNode (deep : any ) : Element ;
    /**
     * https://dom.spec.whatwg.org/#dom-element-closest
     * https://developer.mozilla.org/en-US/docs/Web/API/Element.closest
     */
    closest (selectors : string ) : Element | null ;
    componentFromPoint (iCoordX : number , iCoordY : number ) : string ;
    contentEditable : boolean ;
    coordorigin : Object | null | string ;
    coordsize : Object | null | string ;
    createTextRange ( ) : TextRange | null ;
    currentStyle : any ;
    detachEvent (a : string , b : ( ( ...a : any [] ) => any ) | null ) : any ;
    doScroll (opt_action ? : string ) : any ;
    fillcolor : string ;
    filled : boolean ;
    filters : HTMLFiltersCollection | null ;
    fireEvent : any ;
    /**
     * Firebug sets this property on elements it is inserting into the DOM.
     */
    firebugIgnore : boolean ;
    firstElementChild : Element | null ;
    focus ( ) : void ;
    getAttribute (name : string , opt_flags ? : number | null ) : string ;
    getAttributeNS (namespaceURI : string , localName : string ) : string ;
    getAttributeNode (name : string ) : Attr | null ;
    getAttributeNodeNS (namespaceURI : string , localName : string ) : Attr | null ;
    getBoundingClientRect ( ) : ClientRect ;
    getClientRects ( ) : ClientRectList ;
    getElementsByTagName (tagname : string ) : NodeList < Element > ;
    getElementsByTagNameNS (namespaceURI : string , localName : string ) : NodeList < Element > ;
    hasAttribute (name : string ) : boolean ;
    hasAttributeNS (namespaceURI : string , localName : string ) : boolean ;
    hideFocus : boolean ;
    /**
     * Note: According to the spec, id is actually defined on HTMLElement and
     * SVGElement, rather than Element. Deliberately ignore this so that saying
     * Element.id is allowed.
     */
    id : string ;
    innerHTML : string ;
    innerText : any ;
    isContentEditable : any ;
    lastElementChild : Element | null ;
    load : any ;
    /**
     * https://dom.spec.whatwg.org/#dom-element-matches
     * https://developer.mozilla.org/en-US/docs/Web/API/Element.matches
     */
    matches (selectors : string ) : boolean ;
    matchesSelector (selectors : string , refNodes ? : Node | null | NodeList < any > ) : boolean ;
    mozMatchesSelector (selectors : string ) : boolean ;
    mozRequestFullScreen ( ) : any ;
    mozRequestFullScreenWithKeys ( ) : any ;
    msExitFullscreen ( ) : void ;
    msMatchesSelector (selectors : string ) : boolean ;
    msReleasePointerCapture (pointerId : number ) : any ;
    msRequestFullscreen ( ) : void ;
    msSetPointerCapture (pointerId : number ) : any ;
    /**
     * Note: According to the spec, name is defined on specific types of
     * HTMLElements, rather than on Node, Element, or HTMLElement directly.
     * Ignore this.
     */
    name : string ;
    nextElementSibling : Element | null ;
    nodePrincipal : any ;
    oMatchesSelector (selectors : string ) : boolean ;
    onabort : ( (a : GlobalEvent | null ) => any ) | null ;
    onbeforedeactivate : ( (a : GlobalEvent | null ) => any ) | null ;
    onbeforeinput : ( (a : GlobalEvent | null ) => any ) | null ;
    onbeforeunload : ( (a : GlobalEvent | null ) => any ) | null ;
    onblur : ( (a : GlobalEvent | null ) => any ) | null ;
    onchange : ( (a : GlobalEvent | null ) => any ) | null ;
    onclick : ( (a : GlobalEvent | null ) => any ) | null ;
    oncompositionend : ( (a : GlobalEvent | null ) => any ) | null ;
    oncompositionstart : ( (a : GlobalEvent | null ) => any ) | null ;
    oncompositionupdate : ( (a : GlobalEvent | null ) => any ) | null ;
    oncontextmenu : ( (a : GlobalEvent | null ) => any ) | null ;
    oncopy : ( (a : GlobalEvent | null ) => any ) | null ;
    oncut : ( (a : GlobalEvent | null ) => any ) | null ;
    ondblclick : ( (a : GlobalEvent | null ) => any ) | null ;
    onerror : ( (a : GlobalEvent | null ) => any ) | null ;
    onfocus : ( (a : GlobalEvent | null ) => any ) | null ;
    onfocusin : ( (a : GlobalEvent | null ) => any ) | null ;
    onfocusout : ( (a : GlobalEvent | null ) => any ) | null ;
    /**
     * Specifies the JavaScript method to invoke when fingers are moved during a
     * gesture.
     */
    ongesturechange : ( (a : GestureEvent ) => any ) | null ;
    /**
     * Specifies the JavaScript method to invoke when a gesture ends (when there are
     * 0 or 1 fingers touching the surface).
     */
    ongestureend : ( (a : GestureEvent ) => any ) | null ;
    /**
     * Specifies the JavaScript method to invoke when a gesture is started by
     * two or more fingers touching the surface.
     */
    ongesturestart : ( (a : GestureEvent ) => any ) | null ;
    oninput : ( (a : GlobalEvent | null ) => any ) | null ;
    onkeydown : ( (a : GlobalEvent | null ) => any ) | null ;
    onkeypress : ( (a : GlobalEvent | null ) => any ) | null ;
    onkeyup : ( (a : GlobalEvent | null ) => any ) | null ;
    onload : ( (a : GlobalEvent | null ) => any ) | null ;
    onmousedown : ( (a : GlobalEvent | null ) => any ) | null ;
    onmouseenter : ( (a : GlobalEvent | null ) => any ) | null ;
    onmouseleave : ( (a : GlobalEvent | null ) => any ) | null ;
    onmousemove : ( (a : GlobalEvent | null ) => any ) | null ;
    onmouseout : ( (a : GlobalEvent | null ) => any ) | null ;
    onmouseover : ( (a : GlobalEvent | null ) => any ) | null ;
    onmouseup : ( (a : GlobalEvent | null ) => any ) | null ;
    onmousewheel : ( (a : GlobalEvent | null ) => any ) | null ;
    onpaste : ( (a : GlobalEvent | null ) => any ) | null ;
    onreset : ( (a : GlobalEvent | null ) => any ) | null ;
    onresize : ( (a : GlobalEvent | null ) => any ) | null ;
    onscroll : ( (a : GlobalEvent | null ) => any ) | null ;
    onselect : ( (a : GlobalEvent | null ) => any ) | null ;
    onselectstart : ( (a : GlobalEvent | null ) => any ) | null ;
    onsubmit : ( (a ? : GlobalEvent | null ) => any ) | null ;
    ontextinput : ( (a : GlobalEvent | null ) => any ) | null ;
    /**
     * Specifies the JavaScript method to invoke when the system cancels tracking
     * for the touch.
     */
    ontouchcancel : ( (a : TouchEvent ) => any ) | null ;
    /**
     * Specifies the JavaScript method to invoke when a given event lifts from the
     * surface.
     */
    ontouchend : ( (a : TouchEvent ) => any ) | null ;
    /**
     * Specifies the JavaScript method to invoke when a finger for a given event
     * moves on the surface.
     */
    ontouchmove : ( (a : TouchEvent ) => any ) | null ;
    /**
     * Specifies the JavaScript method to invoke when a finger for a given event
     * touches the surface.
     */
    ontouchstart : ( (a : TouchEvent ) => any ) | null ;
    onunload : ( (a : GlobalEvent | null ) => any ) | null ;
    onwheel : ( (a : GlobalEvent | null ) => any ) | null ;
    outerHTML : string ;
    path : string ;
    previousElementSibling : Element | null ;
    querySelector (selectors : string ) : Element | null ;
    querySelectorAll (selectors : string ) : NodeList < Element > ;
    releaseCapture ( ) : any ;
    remove ( ) : void ;
    removeAttribute (name : string ) : void ;
    removeAttributeNS (namespaceURI : string , localName : string ) : void ;
    removeAttributeNode (oldAttr : Attr | null ) : Attr | null ;
    removeBehavior (iID : number ) : boolean ;
    requestFullscreen ( ) : any ;
    rotation : number | string ;
    runtimeStyle : any ;
    save (sStoreName : string ) : any ;
    schemaTypeInfo : TypeInfo | null ;
    scrollHeight : number ;
    scrollIntoView (opt_top ? : boolean | { behavior : string , block : string } ) : any ;
    scrollIntoViewIfNeeded (opt_center ? : boolean ) : any ;
    scrollLeft : number ;
    scrollTop : number ;
    scrollWidth : number ;
    setAttribute (name : string , value : string | number | boolean ) : void ;
    setAttributeNS (namespaceURI : string , qualifiedName : string , value : string | number | boolean ) : void ;
    setAttributeNode (newAttr : Attr | null ) : Attr | null ;
    setAttributeNodeNS (newAttr : Attr | null ) : Attr | null ;
    setCapture (opt_bContainerCapture ? : boolean ) : any ;
    setIdAttribute (name : string , isId : boolean ) : void ;
    setIdAttributeNS (namespaceURI : string , localName : string , isId : boolean ) : void ;
    setIdAttributeNode (idAttr : Attr | null , isId : boolean ) : void ;
    sourceIndex : any ;
    strokecolor : string ;
    stroked : boolean ;
    strokeweight : number | string ;
    style : CSSStyleDeclaration ;
    tagName : string ;
    unselectable : string ;
    webkitMatchesSelector (selectors : string ) : boolean ;
    /**
     * The current fullscreen element for the document is set to this element.
     * Valid only for Webkit browsers.
     * @param opt_allowKeyboardInput Whether keyboard input is desired. Should use ALLOW_KEYBOARD_INPUT constant.
     */
    webkitRequestFullScreen (opt_allowKeyboardInput ? : number ) : any ;
    /**
     * The current fullscreen element for the document is set to this element.
     * Valid only for Webkit browsers.
     * @param opt_allowKeyboardInput Whether keyboard input is desired. Should use ALLOW_KEYBOARD_INPUT constant.
     */
    webkitRequestFullscreen (opt_allowKeyboardInput ? : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ElementCSSInlineStyle extends ElementCSSInlineStyle_Instance {
  }
  class ElementCSSInlineStyle_Instance {
    private noStructuralTyping_: any;
    style : CSSStyleDeclaration | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Entity extends Entity_Instance {
  }
  class Entity_Instance extends Node_Instance {
    inputEncoding : string ;
    notationName : string ;
    publicId : string ;
    systemId : string ;
    xmlEncoding : string ;
    xmlVersion : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class EntityReference extends EntityReference_Instance {
  }
  class EntityReference_Instance extends Node_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class Entry extends Entry_Instance {
  }
  class Entry_Instance {
    private noStructuralTyping_: any;
    copyTo (parent : DirectoryEntry , newName ? : string , successCallback ? : (a : Entry ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
    filesystem : FileSystem ;
    fullPath : string ;
    getMetadata (successCallback : (a : Metadata ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
    getParent (successCallback : (a : Entry ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
    isDirectory : boolean ;
    isFile : boolean ;
    moveTo (parent : DirectoryEntry , newName ? : string , successCallback ? : (a : Entry ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
    name : string ;
    remove (successCallback : ( ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
    toURL (mimeType ? : string ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Error extends Error_Instance {
    /**
     * Chrome/v8 specific, adds a stack trace to the error object. The optional
     * constructorOpt parameter allows you to pass in a function value. When
     * collecting the stack trace all frames above the topmost call to this
     * function, including that call, will be left out of the stack trace.
     * @param error The object to add the stack trace to.
     * @param opt_constructor A function in the stack trace
     */
    static captureStackTrace (error : Object | null , opt_constructor ? : ( ( ...a : any [] ) => any ) | null ) : any ;
    /**
     * Chrome/v8 specific, altering the maximum depth of the stack trace
     * (10 by default).
     */
    static stackTraceLimit : number ;
  }
  class Error_Instance {
    private noStructuralTyping_: any;
    constructor (opt_message ? : any , opt_file ? : any , opt_line ? : any ) ;
    /**
     * IE-only.
     */
    description : string ;
    /**
     * Mozilla-only
     */
    fileName : string ;
    /**
     * Mozilla-only.
     */
    lineNumber : number ;
    message : string ;
    name : string ;
    /**
     * Doesn't seem to exist, but closure/debug.js references it.
     */
    sourceURL : any ;
    stack : string ;
  }
}
declare namespace ಠ_ಠ.clutz.Error {
  /**
   * Chrome/v8 specific, adds a stack trace to the error object. The optional
   * constructorOpt parameter allows you to pass in a function value. When
   * collecting the stack trace all frames above the topmost call to this
   * function, including that call, will be left out of the stack trace.
   * @param error The object to add the stack trace to.
   * @param opt_constructor A function in the stack trace
   */
  function captureStackTrace (error : Object | null , opt_constructor ? : ( ( ...a : any [] ) => any ) | null ) : any ;
}
declare namespace ಠ_ಠ.clutz.Error {
  /**
   * Chrome/v8 specific, altering the maximum depth of the stack trace
   * (10 by default).
   */
  var stackTraceLimit : number ;
}
declare namespace ಠ_ಠ.clutz {
  class ErrorEvent extends ErrorEvent_Instance {
  }
  class ErrorEvent_Instance extends GlobalEvent {
    constructor (type : string , opt_eventInitDict ? : { bubbles ? : boolean , cancelable ? : boolean , colno : number , error : any , filename : string , lineno : number , message : string } ) ;
    colno : number ;
    error : any ;
    filename : string ;
    lineno : number ;
    message : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class EvalError extends EvalError_Instance {
  }
  class EvalError_Instance extends GlobalError {
    constructor (opt_message ? : any , opt_file ? : any , opt_line ? : any ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Event extends Event_Instance {
    static AT_TARGET : number ;
    static BUBBLING_PHASE : number ;
    static CAPTURING_PHASE : number ;
  }
  class Event_Instance {
    private noStructuralTyping_: any;
    constructor (type : string , opt_eventInitDict ? : { bubbles ? : boolean , cancelable ? : boolean } ) ;
    Abstract : string ;
    Banner : string ;
    HORIZONTAL_AXIS : number ;
    MoreInfo : string ;
    VERTICAL_AXIS : number ;
    altKey : boolean ;
    altLeft : boolean ;
    axis : number ;
    bubbles : boolean ;
    button : number ;
    cancelBubble : boolean ;
    cancelable : boolean ;
    charCode : number ;
    clientX : number ;
    clientY : number ;
    /**
     * A ClipboardData on IE, but a DataTransfer on WebKit.
     */
    clipboardData : ClipboardData | null | undefined ;
    contentOverflow : boolean ;
    ctrlKey : boolean ;
    ctrlLeft : boolean ;
    currentTarget : EventTarget | null ;
    dataFld : string ;
    /**
     * Present for events spawned in browsers that support shadow dom.
     */
    deepPath : ( ( ) => EventTarget [] | null ) | undefined ;
    defaultPrevented : boolean ;
    domain : any ;
    eventPhase : number ;
    explicitOriginalTarget : EventTarget | null ;
    fromElement : Element | null ;
    initEvent (eventTypeArg : string , canBubbleArg : boolean , cancelableArg : boolean ) : void ;
    initKeyEvent : any ;
    initMessageEvent : any ;
    initMouseEvent : any ;
    initUIEvent : any ;
    isChar : boolean ;
    isTrusted : boolean ;
    keyCode : number ;
    layerX : number ;
    layerY : number ;
    metaKey : boolean ;
    namespaceURI : string ;
    nextPage : string ;
    offsetX : number ;
    offsetY : number ;
    originalTarget : EventTarget | null ;
    pageX : number ;
    pageY : number ;
    /**
     * Present for events spawned in browsers that support shadow dom.
     */
    path : Element [] | null | undefined ;
    preventBubble : any ;
    preventCapture : any ;
    preventDefault ( ) : void ;
    propertyName : string ;
    qualifier : string ;
    reason : number ;
    recordset : { [ /* warning: coerced from ? */ key: string ]: any } | null ;
    relatedTarget : EventTarget | null | undefined ;
    repeat : boolean ;
    returnValue : boolean | string | undefined ;
    saveType : string ;
    scheme : any ;
    screenX : number ;
    screenY : number ;
    shiftKey : boolean ;
    shiftLeft : boolean ;
    source : Window | null ;
    srcElement : Element | null ;
    srcFilter : any ;
    srcUrn : string ;
    stopImmediatePropagation ( ) : void ;
    stopPropagation ( ) : void ;
    target : EventTarget | null ;
    timeStamp : number ;
    toElement : Element | null ;
    type : string ;
    userName : any ;
    view : Window | null ;
    wheelDelta : number ;
    wheelDeltaX : number ;
    wheelDeltaY : number ;
    which : number ;
    x : number ;
    y : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface EventListener {
    handleEvent (evt : GlobalEvent ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface EventTarget {
    addEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , useCapture : boolean ) : void ;
    dispatchEvent (evt : GlobalEvent ) : boolean ;
    removeEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , useCapture : boolean ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ExceptionCode extends ExceptionCode_Instance {
  }
  class ExceptionCode_Instance {
    private noStructuralTyping_: any;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ExtendableEvent extends ExtendableEvent_Instance {
  }
  class ExtendableEvent_Instance extends GlobalEvent {
    constructor (type : string , opt_eventInitDict ? : { bubbles ? : boolean , cancelable ? : boolean } ) ;
    activeWorker : ServiceWorker | null ;
    waitUntil (f : IThenable < any > | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class FetchEvent extends FetchEvent_Instance {
  }
  class FetchEvent_Instance extends GlobalEvent {
    constructor (type : string , opt_eventInitDict ? : { bubbles ? : boolean , cancelable ? : boolean , client ? : ServiceWorkerClient , isReload ? : boolean , request ? : Request } ) ;
    client : ServiceWorkerClient ;
    default ( ) : Promise < Response > ;
    forwardTo (url : string ) : Promise < Response > ;
    isReload : boolean ;
    request : Request ;
    respondWith (r : Response | null | Promise < Response | null > ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class File extends File_Instance {
  }
  class File_Instance extends Blob_Instance {
    constructor (opt_contents ? : ( string | Blob | ArrayBuffer ) [] , opt_name ? : string , opt_properties ? : { lastModified ? : number , type ? : string } ) ;
    /**
     * Chrome uses this instead of name.
     */
    fileName : string ;
    /**
     * Chrome uses this instead of size.
     */
    fileSize : string ;
    lastModified : number ;
    lastModifiedDate : Date | null ;
    name : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class FileEntry extends FileEntry_Instance {
  }
  class FileEntry_Instance extends Entry_Instance {
    createWriter (successCallback : (a : FileWriter ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
    file (successCallback : (a : File ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class FileError extends FileError_Instance {
    static ABORT_ERR : number ;
    static ENCODING_ERR : number ;
    static INVALID_MODIFICATION_ERR : number ;
    static INVALID_STATE_ERR : number ;
    static NOT_FOUND_ERR : number ;
    static NOT_READABLE_ERR : number ;
    static NO_MODIFICATION_ALLOWED_ERR : number ;
    static PATH_EXISTS_ERR : number ;
    static QUOTA_EXCEEDED_ERR : number ;
    static SECURITY_ERR : number ;
    static SYNTAX_ERR : number ;
    static TYPE_MISMATCH_ERR : number ;
  }
  class FileError_Instance extends DOMError_Instance {
    ABORT_ERR : number ;
    ENCODING_ERR : number ;
    INVALID_MODIFICATION_ERR : number ;
    INVALID_STATE_ERR : number ;
    NOT_FOUND_ERR : number ;
    NOT_READABLE_ERR : number ;
    NO_MODIFICATION_ALLOWED_ERR : number ;
    PATH_EXISTS_ERR : number ;
    QUOTA_EXCEEDED_ERR : number ;
    SECURITY_ERR : number ;
    SYNTAX_ERR : number ;
    TYPE_MISMATCH_ERR : number ;
    code : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class FileList extends FileList_Instance {
  }
  class FileList_Instance {
    private noStructuralTyping_: any;
    item (i : number ) : File | null ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class FileReader extends FileReader_Instance {
    static DONE : number ;
    static EMPTY : number ;
    static LOADING : number ;
  }
  class FileReader_Instance implements EventTarget {
    private noStructuralTyping_: any;
    DONE : number ;
    EMPTY : number ;
    LOADING : number ;
    abort ( ) : any ;
    addEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    dispatchEvent (evt : any ) : any ;
    error : FileError | null ;
    onabort : ( (a : ProgressEvent ) => any ) | null ;
    onerror : ( (a : ProgressEvent ) => any ) | null ;
    onload : ( (a : ProgressEvent ) => any ) | null ;
    onloadend : ( (a : ProgressEvent ) => any ) | null ;
    onloadstart : ( (a : ProgressEvent ) => any ) | null ;
    onprogress : ( (a : ProgressEvent ) => any ) | null ;
    readAsArrayBuffer (blob : Blob ) : any ;
    readAsBinaryString (blob : Blob ) : any ;
    readAsDataURL (blob : Blob ) : any ;
    readAsText (blob : Blob , encoding ? : string ) : any ;
    readyState : number ;
    removeEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    result : string | Blob | null | ArrayBuffer ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class FileSaver extends FileSaver_Instance {
  }
  class FileSaver_Instance {
    private noStructuralTyping_: any;
    DONE : number ;
    INIT : number ;
    WRITING : number ;
    abort ( ) : any ;
    error : FileError | null ;
    onabort : ( (a : ProgressEvent ) => any ) | null ;
    onerror : ( (a : ProgressEvent ) => any ) | null ;
    onprogress : ( (a : ProgressEvent ) => any ) | null ;
    onwrite : ( (a : ProgressEvent ) => any ) | null ;
    onwriteend : ( (a : ProgressEvent ) => any ) | null ;
    onwritestart : ( (a : ProgressEvent ) => any ) | null ;
    readyState : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class FileSystem extends FileSystem_Instance {
  }
  class FileSystem_Instance {
    private noStructuralTyping_: any;
    name : string ;
    root : DirectoryEntry ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class FileWriter extends FileWriter_Instance {
  }
  class FileWriter_Instance extends FileSaver_Instance {
    length : number ;
    position : number ;
    seek (offset : number ) : any ;
    truncate (size : number ) : any ;
    write (blob : Blob ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Float32Array extends Float32Array_Instance {
    static BYTES_PER_ELEMENT : number ;
    static from < S > (source : number [] , opt_mapFn ? : (a : number ) => number , opt_this ? : S ) : Float32Array ;
    static of ( ...var_args : ( number | undefined ) [] ) : Float32Array ;
  }
  class Float32Array_Instance extends ArrayBufferView_Instance implements ITypedArray {
    constructor (length : number | ArrayBufferView | null | number [] | ArrayBuffer , opt_byteOffset ? : number , opt_length ? : number ) ;
    [ key: number ]: number ;
    BYTES_PER_ELEMENT : number ;
    copyWithin (target : number , start : number , opt_end ? : number ) : any ;
    fill (value : number , opt_begin ? : number , opt_end ? : number ) : Float32Array ;
    length : number ;
    set (array : ArrayBufferView | null | number [] , opt_offset ? : number ) : any ;
    subarray (begin : number , opt_end ? : number ) : Float32Array ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Float64Array extends Float64Array_Instance {
    static BYTES_PER_ELEMENT : number ;
    static from < S > (source : number [] , opt_mapFn ? : (a : number ) => number , opt_this ? : S ) : Float64Array ;
    static of ( ...var_args : ( number | undefined ) [] ) : Float64Array ;
  }
  class Float64Array_Instance extends ArrayBufferView_Instance implements ITypedArray {
    constructor (length : number | ArrayBufferView | null | number [] | ArrayBuffer , opt_byteOffset ? : number , opt_length ? : number ) ;
    [ key: number ]: number ;
    BYTES_PER_ELEMENT : number ;
    copyWithin (target : number , start : number , opt_end ? : number ) : any ;
    fill (value : number , opt_begin ? : number , opt_end ? : number ) : Float64Array ;
    length : number ;
    set (array : ArrayBufferView | null | number [] , opt_offset ? : number ) : any ;
    subarray (begin : number , opt_end ? : number ) : Float64Array ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * The FocusEvent interface provides specific contextual information associated
   * with Focus events.
   * http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent
   */
  class FocusEvent extends FocusEvent_Instance {
  }
  class FocusEvent_Instance extends UIEvent_Instance {
    /**
     * The FocusEvent interface provides specific contextual information associated
     * with Focus events.
     * http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent
     */
    constructor (type : string , opt_eventInitDict ? : { bubbles ? : boolean , cancelable ? : boolean , detail ? : number , relatedTarget ? : EventTarget | null , view ? : Window | null } ) ;
    relatedTarget : EventTarget | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class FontFace extends FontFace_Instance {
  }
  class FontFace_Instance {
    private noStructuralTyping_: any;
    constructor (fontFamily : string , source : string | ArrayBuffer | null | ArrayBufferView , descriptors : { featureSettings ? : string , stretch ? : string , style ? : string , unicodeRange ? : string , variant ? : string , weight ? : string } ) ;
    family : string ;
    featureSettings : string ;
    load ( ) : Promise < FontFace > ;
    status : FontFaceLoadStatus ;
    stretch : string ;
    style : string ;
    unicodeRange : string ;
    variant : string ;
    weight : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  type FontFaceLoadStatus = string ;
  var FontFaceLoadStatus : {
    ERROR : FontFaceLoadStatus ,
    LOADED : FontFaceLoadStatus ,
    LOADING : FontFaceLoadStatus ,
    UNLOADED : FontFaceLoadStatus ,
  };
}
declare namespace ಠ_ಠ.clutz {
  interface FontFaceSet {
    add (value : FontFace ) : any ;
    check (font : string , opt_text ? : string ) : boolean ;
    clear ( ) : any ;
    delete (value : FontFace ) : any ;
    forEach (cb : (a : FontFace , b : number , c : FontFaceSet ) => any , opt_selfObj ? : Object | null ) : any ;
    has (font : FontFace ) : boolean ;
    load (font : string , opt_text ? : string ) : Promise < FontFace [] > ;
    onloading : ( (a : GlobalEvent | null ) => any ) | null ;
    onloadingdone : ( (a : GlobalEvent | null ) => any ) | null ;
    onloadingerror : ( (a : GlobalEvent | null ) => any ) | null ;
    ready : Promise < FontFaceSet > ;
    status : FontFaceSetLoadStatus ;
  }
}
declare namespace ಠ_ಠ.clutz {
  type FontFaceSetLoadStatus = number ;
  var FontFaceSetLoadStatus : {
    LOADED : FontFaceSetLoadStatus ,
    LOADING : FontFaceSetLoadStatus ,
  };
}
declare namespace ಠ_ಠ.clutz {
  /**
   * The FormData object represents an ordered collection of entries. Each entry
   * has a name and value.
   */
  class FormData extends FormData_Instance {
  }
  class FormData_Instance {
    private noStructuralTyping_: any;
    /**
     * The FormData object represents an ordered collection of entries. Each entry
     * has a name and value.
     * @param opt_form An optional form to use for constructing the form data set.
     */
    constructor (opt_form ? : Element | null ) ;
    append (name : string , value : Blob | null | string , opt_filename ? : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  function Function ( ...var_args : any [] ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  class GainNode extends GainNode_Instance {
  }
  class GainNode_Instance extends AudioNode_Instance {
    gain : AudioGain | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Generator < VALUE > extends Generator_Instance < VALUE > {
  }
  class Generator_Instance < VALUE > implements IteratorIterable < VALUE > {
    private noStructuralTyping_: any;
    next (opt_value ? : any ) : IIterableResult < VALUE > ;
    return (value : VALUE ) : IIterableResult < VALUE > ;
    throw (exception : any ) : IIterableResult < VALUE > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Geolocation extends Geolocation_Instance {
  }
  class Geolocation_Instance {
    private noStructuralTyping_: any;
    clearWatch (watchId : number ) : any ;
    getCurrentPosition (successCallback : (a : GeolocationPosition | null ) => any , opt_errorCallback ? : ( (a : GeolocationPositionError | null ) => any ) | null , opt_options ? : GeolocationPositionOptions | null ) : any ;
    watchPosition (successCallback : (a : GeolocationPosition | null ) => any , opt_errorCallback ? : ( (a : GeolocationPositionError | null ) => any ) | null , opt_options ? : GeolocationPositionOptions | null ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class GeolocationCoordinates extends GeolocationCoordinates_Instance {
  }
  class GeolocationCoordinates_Instance {
    private noStructuralTyping_: any;
    accuracy : number ;
    altitude : number ;
    altitudeAccuracy : number ;
    heading : number ;
    latitude : number ;
    longitude : number ;
    speed : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class GeolocationPosition extends GeolocationPosition_Instance {
  }
  class GeolocationPosition_Instance {
    private noStructuralTyping_: any;
    coords : GeolocationCoordinates | null ;
    timestamp : Date | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class GeolocationPositionError extends GeolocationPositionError_Instance {
  }
  class GeolocationPositionError_Instance {
    private noStructuralTyping_: any;
    PERMISSION_DENIED : number ;
    POSITION_UNAVAILABLE : number ;
    TIMEOUT : number ;
    UNKNOWN_ERROR : number ;
    code : number ;
    message : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class GeolocationPositionOptions extends GeolocationPositionOptions_Instance {
  }
  class GeolocationPositionOptions_Instance {
    private noStructuralTyping_: any;
    enableHighAccuracy : boolean ;
    maximumAge : number ;
    timeout : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * The GestureEvent class encapsulates information about a multi-touch gesture.
   *
   * GestureEvent objects are high-level events that encapsulate the low-level
   * TouchEvent objects. Both GestureEvent and TouchEvent events are sent during
   * a multi-touch sequence. Gesture events contain scaling and rotation
   * information allowing gestures to be combined, if supported by the platform.
   * If not supported, one gesture ends before another starts. Listen for
   * GestureEvent events if you want to respond to gestures only, not process
   * the low-level TouchEvent objects.
   */
  class GestureEvent extends GestureEvent_Instance {
  }
  class GestureEvent_Instance extends UIEvent_Instance {
    /**
     * Initializes a newly created GestureEvent object.
     */
    initGestureEvent (type : string , canBubble : boolean , cancelable : boolean , view : Window | null , detail : number , screenX : number , screenY : number , clientX : number , clientY : number , ctrlKey : boolean , altKey : boolean , shiftKey : boolean , metaKey : boolean , target : EventTarget | null , scale : number , rotation : number ) : any ;
    /**
     * The delta rotation since the start of an event, in degrees, where clockwise
     * is positive and counter-clockwise is negative. The initial value is 0.0.
     */
    rotation : number ;
    /**
     * The distance between two fingers since the start of an event as a multiplier
     * of the initial distance. The initial value is 1.0. If less than 1.0, the
     * gesture is pinch close (to zoom out). If greater than 1.0, the gesture is
     * pinch open (to zoom in).
     */
    scale : number ;
    /**
     * The target of this gesture.
     */
    target : EventTarget | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLAnchorElement extends HTMLAnchorElement_Instance {
  }
  class HTMLAnchorElement_Instance extends HTMLElement_Instance {
    accessKey : string ;
    blur ( ) : void ;
    charset : string ;
    coords : string ;
    download : string ;
    focus ( ) : void ;
    hash : string ;
    host : string ;
    hostname : string ;
    href : string ;
    hreflang : string ;
    name : string ;
    pathname : string ;
    /**
     * The 'ping' attribute is known to be supported in recent versions (as of
     * mid-2014) of Chrome, Safari, and Firefox, and is not supported in any
     * current version of Internet Explorer.
     */
    ping : string ;
    port : string ;
    protocol : string ;
    rel : string ;
    rev : string ;
    search : string ;
    shape : string ;
    tabIndex : number ;
    target : string ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLAppletElement extends HTMLAppletElement_Instance {
  }
  class HTMLAppletElement_Instance extends HTMLElement_Instance {
    align : string ;
    alt : string ;
    archive : string ;
    code : string ;
    codeBase : string ;
    height : string ;
    hspace : number ;
    name : string ;
    object : string ;
    vspace : number ;
    width : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLAreaElement extends HTMLAreaElement_Instance {
  }
  class HTMLAreaElement_Instance extends HTMLElement_Instance {
    accessKey : string ;
    alt : string ;
    coords : string ;
    download : string ;
    href : string ;
    noHref : boolean ;
    ping : string ;
    shape : string ;
    tabIndex : number ;
    target : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLAudioElement extends HTMLAudioElement_Instance {
  }
  class HTMLAudioElement_Instance extends HTMLMediaElement_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLBRElement extends HTMLBRElement_Instance {
  }
  class HTMLBRElement_Instance extends HTMLElement_Instance {
    clear : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLBaseElement extends HTMLBaseElement_Instance {
  }
  class HTMLBaseElement_Instance extends HTMLElement_Instance {
    href : string ;
    target : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLBaseFontElement extends HTMLBaseFontElement_Instance {
  }
  class HTMLBaseFontElement_Instance extends HTMLElement_Instance {
    color : string ;
    face : string ;
    size : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLBodyElement extends HTMLBodyElement_Instance {
  }
  class HTMLBodyElement_Instance extends HTMLElement_Instance {
    className : string ;
    contentEditable : boolean ;
    hideFocus : boolean ;
    id : string ;
    innerHTML : string ;
    aLink : string ;
    background : string ;
    bgColor : string ;
    createControlRange : any ;
    link : string ;
    text : string ;
    vLink : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLButtonElement extends HTMLButtonElement_Instance {
  }
  class HTMLButtonElement_Instance extends HTMLElement_Instance {
    accessKey : string ;
    autofocus : boolean ;
    checkValidity ( ) : boolean ;
    disabled : boolean ;
    form : HTMLFormElement | null ;
    formAction : string ;
    formEnctype : string ;
    formMethod : string ;
    formTarget : string ;
    labels : NodeList < any > | null ;
    name : string ;
    reportValidity ( ) : boolean ;
    setCustomValidity (message : string ) : any ;
    tabIndex : number ;
    type : string ;
    validationMessage : string ;
    validity : ValidityState | null ;
    value : string ;
    willValidate : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLCanvasElement extends HTMLCanvasElement_Instance {
  }
  class HTMLCanvasElement_Instance extends HTMLElement_Instance {
    getContext (contextId : string , opt_args ? : Object | null ) : Object | null ;
    height : number ;
    toDataURL (opt_type ? : string ,  ...var_args : any [] ) : string ;
    width : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLCollection < T > extends HTMLCollection_Instance < T > {
  }
  class HTMLCollection_Instance < T > implements IObject < string | number , T > , IArrayLike < T > {
    private noStructuralTyping_: any;
    [ /* warning: coerced from (number|string) */ key: string ]: T ;
    [ key: number ]: T ;
    item (index : number ) : T | null ;
    length : number ;
    namedItem (name : string ) : T | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLContentElement extends HTMLContentElement_Instance {
  }
  class HTMLContentElement_Instance extends HTMLElement_Instance {
    getDistributedNodes ( ) : NodeList < any > ;
    select : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLDListElement extends HTMLDListElement_Instance {
  }
  class HTMLDListElement_Instance extends HTMLElement_Instance {
    compact : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLDataListElement extends HTMLDataListElement_Instance {
  }
  class HTMLDataListElement_Instance extends HTMLElement_Instance {
    options : HTMLCollection < any > | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLDetailsElement extends HTMLDetailsElement_Instance {
  }
  class HTMLDetailsElement_Instance extends HTMLElement_Instance {
    open : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLDialogElement extends HTMLDialogElement_Instance {
  }
  class HTMLDialogElement_Instance extends HTMLElement_Instance {
    close (opt_returnValue ? : string ) : any ;
    open : boolean ;
    returnValue : string ;
    show (opt_anchor ? : MouseEvent | null | Element ) : any ;
    showModal (opt_anchor ? : MouseEvent | null | Element ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLDirectoryElement extends HTMLDirectoryElement_Instance {
  }
  class HTMLDirectoryElement_Instance extends HTMLElement_Instance {
    compact : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLDivElement extends HTMLDivElement_Instance {
  }
  class HTMLDivElement_Instance extends HTMLElement_Instance {
    align : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLDocument extends HTMLDocument_Instance {
  }
  class HTMLDocument_Instance extends Document_Instance {
    URL : string ;
    anchors : HTMLCollection < HTMLAnchorElement > | null ;
    applets : HTMLCollection < HTMLAppletElement > | null ;
    body : HTMLBodyElement | null ;
    close : ( ) => undefined ;
    cookie : string ;
    createNodeIterator (root : Node | null , whatToShow ? : number , filter ? : NodeFilter | null , entityReferenceExpansion ? : boolean ) : NodeIterator ;
    createTreeWalker : (root : Node | null , whatToShow ? : number , filter ? : NodeFilter | null , entityReferenceExpansion ? : boolean ) => TreeWalker ;
    domain : string ;
    forms : HTMLCollection < HTMLFormElement > | null ;
    getElementsByName (elementName : string ) : NodeList < Element > ;
    images : HTMLCollection < HTMLImageElement > | null ;
    links : HTMLCollection < HTMLAnchorElement | HTMLAreaElement > | null ;
    open : ( ) => undefined ;
    readyState : string ;
    referrer : string ;
    title : string ;
    write (text : string ) : void ;
    writeln (text : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLElement extends HTMLElement_Instance {
  }
  class HTMLElement_Instance extends Element_Instance {
    scrollTop : number ;
    attachedCallback ( ) : any ;
    className : string ;
    contextMenu : Element | null ;
    createShadowRoot ( ) : ShadowRoot ;
    createdCallback ( ) : any ;
    /**
     * Dataset collection.
     * This is really a DOMStringMap but it behaves close enough to an object to
     * pass as an object.
     */
    dataset : Object | null ;
    detachedCallback ( ) : any ;
    dir : string ;
    draggable : boolean ;
    /**
     * This is actually a DOMSettableTokenList property. However since that
     * interface isn't currently defined and no known browsers implement this
     * feature, just define the property for now.
     */
    dropzone : Object | null ;
    getDestinationInsertionPoints ( ) : NodeList < any > ;
    getElementsByClassName (classNames : string ) : NodeList < any > ;
    hidden : boolean ;
    id : string ;
    lang : string ;
    offsetHeight : number ;
    offsetLeft : number ;
    offsetParent : Element | null ;
    offsetTop : number ;
    offsetWidth : number ;
    shadowRoot : ShadowRoot | null ;
    spellcheck : boolean ;
    style : CSSStyleDeclaration ;
    tabIndex : number ;
    title : string ;
    webkitCreateShadowRoot ( ) : ShadowRoot ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLEmbedElement extends HTMLEmbedElement_Instance {
  }
  class HTMLEmbedElement_Instance extends HTMLElement_Instance {
    height : string ;
    postMessage (message : string | Object ) : any ;
    src : string ;
    type : string ;
    width : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLFieldSetElement extends HTMLFieldSetElement_Instance {
  }
  class HTMLFieldSetElement_Instance extends HTMLElement_Instance {
    checkValidity ( ) : boolean ;
    disabled : boolean ;
    elements : HTMLCollection < any > | null ;
    form : HTMLFormElement | null ;
    name : string ;
    setCustomValidity (message : string ) : any ;
    type : string ;
    validationMessage : string ;
    validity : ValidityState | null ;
    willValidate : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLFilter extends HTMLFilter_Instance {
  }
  class HTMLFilter_Instance {
    private noStructuralTyping_: any;
    apply ( ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLFiltersCollection extends HTMLFiltersCollection_Instance {
  }
  class HTMLFiltersCollection_Instance {
    private noStructuralTyping_: any;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLFontElement extends HTMLFontElement_Instance {
  }
  class HTMLFontElement_Instance extends HTMLElement_Instance {
    color : string ;
    face : string ;
    size : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLFormControlsCollection < T > extends HTMLFormControlsCollection_Instance < T > {
  }
  class HTMLFormControlsCollection_Instance < T > extends HTMLCollection_Instance < T > implements IObject < string , T | RadioNodeList < any > | null > , IArrayLike < T > {
    [ key: string ]: T | RadioNodeList < any > | null ;
    [ key: number ]: T ;
    namedItem (name : string ) : T | RadioNodeList < any > | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLFormElement extends HTMLFormElement_Instance {
  }
  class HTMLFormElement_Instance extends HTMLElement_Instance {
    acceptCharset : string ;
    action : string ;
    checkValidity ( ) : boolean ;
    elements : HTMLFormControlsCollection < HTMLElement > | null ;
    enctype : string ;
    length : number ;
    method : string ;
    name : string ;
    noValidate : boolean ;
    reportValidity ( ) : boolean ;
    reset ( ) : void ;
    submit ( ) : void ;
    target : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLFrameElement extends HTMLFrameElement_Instance {
  }
  class HTMLFrameElement_Instance extends HTMLElement_Instance {
    allowTransparency : boolean ;
    contentDocument : Document | null ;
    contentWindow : Window | null ;
    frameBorder : string ;
    longDesc : string ;
    marginHeight : string ;
    marginWidth : string ;
    name : string ;
    noResize : boolean ;
    scrolling : string ;
    src : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLFrameSetElement extends HTMLFrameSetElement_Instance {
  }
  class HTMLFrameSetElement_Instance extends HTMLElement_Instance {
    cols : string ;
    rows : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLHRElement extends HTMLHRElement_Instance {
  }
  class HTMLHRElement_Instance extends HTMLElement_Instance {
    align : string ;
    noShade : boolean ;
    size : string ;
    width : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLHeadElement extends HTMLHeadElement_Instance {
  }
  class HTMLHeadElement_Instance extends HTMLElement_Instance {
    profile : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLHeadingElement extends HTMLHeadingElement_Instance {
  }
  class HTMLHeadingElement_Instance extends HTMLElement_Instance {
    align : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLHtmlElement extends HTMLHtmlElement_Instance {
  }
  class HTMLHtmlElement_Instance extends HTMLElement_Instance {
    version : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLIFrameElement extends HTMLIFrameElement_Instance {
  }
  class HTMLIFrameElement_Instance extends HTMLElement_Instance {
    className : string ;
    id : string ;
    align : string ;
    allowTransparency : boolean ;
    contentDocument : Document | null ;
    contentWindow : Window | null ;
    frameBorder : string ;
    height : string ;
    longDesc : string ;
    marginHeight : string ;
    marginWidth : string ;
    name : string ;
    readyState : string ;
    sandbox : string | null ;
    scrolling : string ;
    src : string ;
    srcdoc : string ;
    width : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLImageElement extends HTMLImageElement_Instance {
  }
  class HTMLImageElement_Instance extends HTMLElement_Instance {
    align : string ;
    alt : string ;
    border : string ;
    complete : boolean ;
    crossOrigin : string ;
    height : number ;
    hspace : number ;
    isMap : boolean ;
    longDesc : string ;
    lowSrc : string ;
    name : string ;
    naturalHeight : number ;
    naturalWidth : number ;
    onerror : ( (a : GlobalEvent | null ) => any ) | null ;
    onload : ( (a : GlobalEvent | null ) => any ) | null ;
    readyState : string ;
    sizes : string ;
    src : string ;
    srcset : string ;
    useMap : string ;
    vspace : number ;
    width : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLInputElement extends HTMLInputElement_Instance {
  }
  class HTMLInputElement_Instance extends HTMLElement_Instance {
    accept : string ;
    accessKey : string ;
    align : string ;
    alt : string ;
    autocapitalize : boolean ;
    autocomplete : string ;
    autocorrect : boolean ;
    autofocus : boolean ;
    blur ( ) : void ;
    checkValidity ( ) : boolean ;
    checked : boolean ;
    click ( ) : void ;
    defaultChecked : boolean ;
    defaultValue : string ;
    dirname : string ;
    disabled : boolean ;
    files : FileList | null ;
    focus ( ) : void ;
    form : HTMLFormElement | null ;
    formAction : string ;
    formEnctype : string ;
    formMethod : string ;
    formNoValidate : boolean ;
    formTarget : string ;
    indeterminate : boolean ;
    labels : NodeList < any > | null ;
    list : string ;
    max : string ;
    maxLength : number ;
    min : string ;
    multiple : boolean ;
    name : string ;
    pattern : string ;
    placeholder : string ;
    readOnly : boolean ;
    reportValidity ( ) : boolean ;
    required : boolean ;
    select ( ) : void ;
    selectionEnd : number ;
    selectionStart : number ;
    setCustomValidity (message : string ) : any ;
    setSelectionRange (selectionStart : number , selectionEnd : number ) : any ;
    size : number ;
    src : string ;
    step : string ;
    /**
     * Changes the form control's value by the value given in the step attribute
     * multiplied by opt_n.
     * @param opt_n step multiplier.  Defaults to 1.
     */
    stepDown (opt_n ? : number ) : any ;
    /**
     * Changes the form control's value by the value given in the step attribute
     * multiplied by opt_n.
     * @param opt_n step multiplier.  Defaults to 1.
     */
    stepUp (opt_n ? : number ) : any ;
    tabIndex : number ;
    type : string ;
    useMap : string ;
    validationMessage : string ;
    validity : ValidityState | null ;
    value : string ;
    valueAsDate : Date | null ;
    valueAsNumber : number ;
    willValidate : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLIsIndexElement extends HTMLIsIndexElement_Instance {
  }
  class HTMLIsIndexElement_Instance extends HTMLElement_Instance {
    form : HTMLFormElement | null ;
    prompt : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLLIElement extends HTMLLIElement_Instance {
  }
  class HTMLLIElement_Instance extends HTMLElement_Instance {
    type : string ;
    value : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLLabelElement extends HTMLLabelElement_Instance {
  }
  class HTMLLabelElement_Instance extends HTMLElement_Instance {
    accessKey : string ;
    control : Element | null ;
    form : HTMLFormElement | null ;
    htmlFor : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLLegendElement extends HTMLLegendElement_Instance {
  }
  class HTMLLegendElement_Instance extends HTMLElement_Instance {
    accessKey : string ;
    align : string ;
    form : HTMLFormElement | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLLinkElement extends HTMLLinkElement_Instance {
  }
  class HTMLLinkElement_Instance extends HTMLElement_Instance implements LinkStyle {
    charset : string ;
    disabled : boolean ;
    href : string ;
    hreflang : string ;
    import : Document | null ;
    media : string ;
    rel : string ;
    rev : string ;
    sheet : StyleSheet | null ;
    target : string ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLMapElement extends HTMLMapElement_Instance {
  }
  class HTMLMapElement_Instance extends HTMLElement_Instance {
    areas : HTMLCollection < HTMLAreaElement > | null ;
    name : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLMediaElement extends HTMLMediaElement_Instance {
    static HAVE_CURRENT_DATA : number ;
    static HAVE_ENOUGH_DATA : number ;
    static HAVE_FUTURE_DATA : number ;
    static HAVE_METADATA : number ;
    static HAVE_NOTHING : number ;
  }
  class HTMLMediaElement_Instance extends HTMLElement_Instance {
    addTextTrack (kind : string , opt_label ? : string , opt_language ? : string ) : TextTrack | null ;
    autobuffer : boolean ;
    autoplay : boolean ;
    buffered : TimeRanges | null ;
    canPlayType (type : string ) : string ;
    controls : boolean ;
    currentSrc : string ;
    /**
     * The current time, in seconds.
     */
    currentTime : number ;
    defaultPlaybackRate : number ;
    /**
     * The length of the media in seconds.
     */
    duration : number ;
    ended : boolean ;
    error : MediaError | null ;
    /**
     * The absolute timeline offset.
     */
    getStartDate ( ) : Date ;
    /**
     * Loads the media element.
     */
    load : ( ) => any ;
    loop : boolean ;
    muted : boolean ;
    networkState : number ;
    onabort : ( (a : GlobalEvent | null ) => any ) | null ;
    oncanplay : ( (a : GlobalEvent ) => any ) | null ;
    oncanplaythrough : ( (a : GlobalEvent ) => any ) | null ;
    ondurationchange : ( (a : GlobalEvent ) => any ) | null ;
    onemptied : ( (a : GlobalEvent ) => any ) | null ;
    onended : ( (a : GlobalEvent ) => any ) | null ;
    onerror : ( (a : GlobalEvent | null ) => any ) | null ;
    onloadeddata : ( (a : GlobalEvent ) => any ) | null ;
    onloadedmetadata : ( (a : GlobalEvent ) => any ) | null ;
    onloadstart : ( (a : GlobalEvent ) => any ) | null ;
    onpause : ( (a : GlobalEvent ) => any ) | null ;
    onplay : ( (a : GlobalEvent ) => any ) | null ;
    onplaying : ( (a : GlobalEvent ) => any ) | null ;
    onprogress : ( (a : GlobalEvent ) => any ) | null ;
    onratechange : ( (a : GlobalEvent ) => any ) | null ;
    onseeked : ( (a : GlobalEvent ) => any ) | null ;
    onseeking : ( (a : GlobalEvent ) => any ) | null ;
    onstalled : ( (a : GlobalEvent ) => any ) | null ;
    onsuspend : ( (a : GlobalEvent ) => any ) | null ;
    ontimeupdate : ( (a : GlobalEvent ) => any ) | null ;
    onvolumechange : ( (a : GlobalEvent ) => any ) | null ;
    onwaiting : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * Pauses the media.
     */
    pause ( ) : any ;
    paused : boolean ;
    /**
     * Starts playing the media.
     */
    play ( ) : any ;
    playbackRate : number ;
    played : TimeRanges | null ;
    readyState : number ;
    seekable : TimeRanges | null ;
    seeking : boolean ;
    src : string ;
    textTracks : TextTrackList | null ;
    /**
     * The audio volume, from 0.0 (silent) to 1.0 (loudest).
     */
    volume : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLMenuElement extends HTMLMenuElement_Instance {
  }
  class HTMLMenuElement_Instance extends HTMLElement_Instance {
    compact : boolean ;
    label : string ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLMenuItemElement extends HTMLMenuItemElement_Instance {
  }
  class HTMLMenuItemElement_Instance extends HTMLElement_Instance {
    checked : boolean ;
    default : boolean ;
    disabled : boolean ;
    icon : string ;
    label : string ;
    radiogroup : string ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLMetaElement extends HTMLMetaElement_Instance {
  }
  class HTMLMetaElement_Instance extends HTMLElement_Instance {
    content : string ;
    httpEquiv : string ;
    name : string ;
    scheme : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLMeterElement extends HTMLMeterElement_Instance {
  }
  class HTMLMeterElement_Instance extends HTMLElement_Instance {
    high : number ;
    labels : NodeList < any > | null ;
    low : number ;
    max : number ;
    min : number ;
    optimum : number ;
    value : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLModElement extends HTMLModElement_Instance {
  }
  class HTMLModElement_Instance extends HTMLElement_Instance {
    cite : string ;
    dateTime : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLOListElement extends HTMLOListElement_Instance {
  }
  class HTMLOListElement_Instance extends HTMLElement_Instance {
    compact : boolean ;
    start : number ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLObjectElement extends HTMLObjectElement_Instance {
  }
  class HTMLObjectElement_Instance extends HTMLElement_Instance {
    /**
     * Call a Flash function exported by ExternalInterface.
     * @param xmlString The XML string passed to Flash. The outer element should be {@code <invoke>}. A sample invocation string: {@code <invoke name="function_name" returntype="javascript"> <string>test</string></invoke>}
     */
    CallFunction (xmlString : string ) : string ;
    /**
     * Returns the value of the Flash variable specified by varName or null if the
     * variable does not exist.
     * @param varName The variable name.
     */
    GetVariable (varName : string ) : string | null ;
    /**
     * Activates the frame number specified by {@code frameNumber} in the current
     * movie.
     * @param frameNumber A non-negative integer frame number.
     */
    GotoFrame (frameNumber : number ) : any ;
    IsPlaying ( ) : boolean ;
    /**
     * Loads the movie identified by {@code url} to the layer specified by {@code
     * layerNumber}.
     * @param layerNumber The layer number.
     * @param url The movie URL.
     */
    LoadMovie (layerNumber : number , url : string ) : any ;
    /**
     * Pans a zoomed-in movie to the coordinates specified by x and y. Use mode to
     * specify whether the values for x and y are pixels or a percent of the window.
     * When mode is 0, the coordinates are pixels; when mode is 1, the coordinates
     * are percent of the window.
     * @param x The x-coordinate.
     * @param y The y-coordinate.
     * @param mode The mode.
     */
    Pan (x : number , y : number , mode : number ) : any ;
    PercentLoaded ( ) : number ;
    /**
     * Starts playing the movie.
     */
    Play ( ) : any ;
    /**
     * Goes to the first frame.
     */
    Rewind ( ) : any ;
    /**
     * Sets the value of the flash variable.
     * @param variableName The variable name.
     * @param value The value.
     */
    SetVariable (variableName : string , value : string ) : any ;
    /**
     * Zooms in on a rectangular area of the movie. The units of the coordinates
     * are in twips (1440 units per inch).
     * @param left The left coordinate.
     * @param top The top coordinate.
     * @param right The right coordinate.
     * @param bottom The bottom coordinate.
     */
    SetZoomRect (left : number , top : number , right : number , bottom : number ) : any ;
    /**
     * Stops playing the movie.
     */
    StopPlay ( ) : any ;
    /**
     * Executes the action in the timeline specified by {@code target} in the
     * specified frame.
     * @param target The timeline.
     * @param frameNumber The frame number.
     */
    TCallFrame (target : string , frameNumber : number ) : any ;
    /**
     * Executes the action in the timeline specified by {@code target} in the
     * specified frame.
     * @param target The timeline.
     * @param label The frame label.
     */
    TCallLabel (target : string , label : string ) : any ;
    /**
     * Returns the number of the current frame for the specified timeline.
     * @param target The timeline.
     */
    TCurentFrame (target : string ) : number ;
    /**
     * Returns the label of the current frame for the specified timeline.
     * @param target The timeline.
     */
    TCurrentLabel (target : string ) : string ;
    /**
     * Returns a string indicating the value of the property in the
     * specified timeline.
     * @param target The timeline.
     * @param property The integer corresponding to the desired property.
     */
    TGetProperty (target : string , property : number ) : string ;
    /**
     * Returns a number indicating the value of the property in the specified
     * timeline.
     * @param target The timeline.
     * @param property The integer corresponding to the desired property.
     */
    TGetPropertyAsNumber (target : string , property : number ) : number ;
    /**
     * Goes to the specified frame number in the specified timeline.
     * @param target The timeline.
     * @param frameNumber The frame number.
     */
    TGotoFrame (target : string , frameNumber : number ) : any ;
    /**
     * Goes to the specified frame label in the specified timeline.
     * @param target The timeline.
     * @param label The framelabel.
     */
    TGotoLabel (target : string , label : string ) : any ;
    /**
     * Plays the specified timeline.
     * @param target The timeline.
     */
    TPlay (target : number ) : any ;
    /**
     * Sets the value of the property in the specified timeline.
     * @param target The timeline.
     * @param property The integer corresponding to the desired property.
     * @param value The value.
     */
    TSetProperty (target : number , property : number , value : string | number ) : any ;
    /**
     * Stops the specified timeline.
     * @param target The timeline.
     */
    TStopPlay (target : number ) : any ;
    TotalFrames ( ) : number ;
    /**
     * Zooms the view by a relative scale factor.
     * @param percent The percentage scale factor, should be an integer.
     */
    Zoom (percent : number ) : any ;
    align : string ;
    archive : string ;
    border : string ;
    code : string ;
    codeBase : string ;
    codeType : string ;
    contentDocument : Document | null ;
    data : string ;
    declare : boolean ;
    form : HTMLFormElement | null ;
    height : string ;
    hspace : number ;
    name : string ;
    readyState : string ;
    standby : string ;
    tabIndex : number ;
    type : string ;
    useMap : string ;
    vspace : number ;
    width : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLOptGroupElement extends HTMLOptGroupElement_Instance {
  }
  class HTMLOptGroupElement_Instance extends HTMLElement_Instance {
    disabled : boolean ;
    label : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLOptionElement extends HTMLOptionElement_Instance {
  }
  class HTMLOptionElement_Instance extends HTMLElement_Instance {
    defaultSelected : boolean ;
    disabled : boolean ;
    form : HTMLFormElement | null ;
    index : number ;
    label : string ;
    selected : boolean ;
    text : string ;
    value : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLOptionsCollection extends HTMLOptionsCollection_Instance {
  }
  class HTMLOptionsCollection_Instance implements IObject < string | number , HTMLOptionElement | null > , IArrayLike < HTMLOptionElement > {
    private noStructuralTyping_: any;
    [ /* warning: coerced from (number|string) */ key: string ]: HTMLOptionElement | null ;
    [ key: number ]: HTMLOptionElement ;
    item (index : number ) : Node | null ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLOutputElement extends HTMLOutputElement_Instance {
  }
  class HTMLOutputElement_Instance extends HTMLElement_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLParagraphElement extends HTMLParagraphElement_Instance {
  }
  class HTMLParagraphElement_Instance extends HTMLElement_Instance {
    align : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLParamElement extends HTMLParamElement_Instance {
  }
  class HTMLParamElement_Instance extends HTMLElement_Instance {
    name : string ;
    type : string ;
    value : string ;
    valueType : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLPictureElement extends HTMLPictureElement_Instance {
  }
  class HTMLPictureElement_Instance extends HTMLElement_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLPreElement extends HTMLPreElement_Instance {
  }
  class HTMLPreElement_Instance extends HTMLElement_Instance {
    width : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLProgressElement extends HTMLProgressElement_Instance {
  }
  class HTMLProgressElement_Instance extends HTMLElement_Instance {
    labels : NodeList < any > | null ;
    max : number ;
    position : number ;
    value : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLQuoteElement extends HTMLQuoteElement_Instance {
  }
  class HTMLQuoteElement_Instance extends HTMLElement_Instance {
    cite : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLScriptElement extends HTMLScriptElement_Instance {
  }
  class HTMLScriptElement_Instance extends HTMLElement_Instance {
    charset : string ;
    defer : boolean ;
    event : string ;
    htmlFor : string ;
    readyState : string ;
    src : string ;
    text : string ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLSelectElement extends HTMLSelectElement_Instance {
  }
  class HTMLSelectElement_Instance extends HTMLElement_Instance {
    add (element : HTMLElement | null , opt_before ? : HTMLElement | null ) : void ;
    autofocus : boolean ;
    blur ( ) : void ;
    checkValidity ( ) : boolean ;
    disabled : boolean ;
    focus ( ) : void ;
    form : HTMLFormElement | null ;
    labels : NodeList < any > | null ;
    length : number ;
    multiple : boolean ;
    name : string ;
    options : HTMLOptionsCollection ;
    remove (opt_index ? : number ) : void ;
    reportValidity ( ) : boolean ;
    selectedIndex : number ;
    selectedOptions : HTMLCollection < any > | null ;
    setCustomValidity (message : string ) : any ;
    size : number ;
    type : string ;
    validationMessage : string ;
    validity : ValidityState | null ;
    value : string ;
    willValidate : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLShadowElement extends HTMLShadowElement_Instance {
  }
  class HTMLShadowElement_Instance extends HTMLElement_Instance {
    getDistributedNodes ( ) : NodeList < any > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLSourceElement extends HTMLSourceElement_Instance {
  }
  class HTMLSourceElement_Instance extends HTMLElement_Instance {
    media : string ;
    sizes : string ;
    src : string ;
    srcset : string ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Mozilla only???
   */
  class HTMLSpanElement extends HTMLSpanElement_Instance {
  }
  class HTMLSpanElement_Instance extends HTMLElement_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLStyleElement extends HTMLStyleElement_Instance {
  }
  class HTMLStyleElement_Instance extends HTMLElement_Instance implements LinkStyle {
    disabled : boolean ;
    media : string ;
    sheet : StyleSheet | null ;
    styleSheet : StyleSheet | null ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLTableCaptionElement extends HTMLTableCaptionElement_Instance {
  }
  class HTMLTableCaptionElement_Instance extends HTMLElement_Instance {
    align : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLTableCellElement extends HTMLTableCellElement_Instance {
  }
  class HTMLTableCellElement_Instance extends HTMLElement_Instance {
    abbr : string ;
    align : string ;
    axis : string ;
    bgColor : string ;
    cellIndex : number ;
    ch : string ;
    chOff : string ;
    colSpan : number ;
    headers : string ;
    height : string ;
    noWrap : boolean ;
    rowSpan : number ;
    scope : string ;
    vAlign : string ;
    width : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLTableColElement extends HTMLTableColElement_Instance {
  }
  class HTMLTableColElement_Instance extends HTMLElement_Instance {
    align : string ;
    ch : string ;
    chOff : string ;
    span : number ;
    vAlign : string ;
    width : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLTableElement extends HTMLTableElement_Instance {
  }
  class HTMLTableElement_Instance extends HTMLElement_Instance {
    align : string ;
    bgColor : string ;
    border : string ;
    caption : HTMLTableCaptionElement | null ;
    cellPadding : string ;
    cellSpacing : string ;
    createCaption ( ) : HTMLElement | null ;
    createTFoot ( ) : HTMLElement | null ;
    createTHead ( ) : HTMLElement | null ;
    deleteCaption ( ) : void ;
    deleteRow (index : number ) : HTMLElement | null ;
    deleteTFoot ( ) : void ;
    deleteTHead ( ) : void ;
    frame : string ;
    insertRow (index : number ) : HTMLElement | null ;
    rows : HTMLCollection < HTMLTableRowElement > | null ;
    rules : string ;
    summary : string ;
    tBodies : HTMLCollection < HTMLTableSectionElement > | null ;
    tFoot : HTMLTableSectionElement | null ;
    tHead : HTMLTableSectionElement | null ;
    width : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLTableRowElement extends HTMLTableRowElement_Instance {
  }
  class HTMLTableRowElement_Instance extends HTMLElement_Instance {
    align : string ;
    bgColor : string ;
    cells : HTMLCollection < HTMLTableCellElement > | null ;
    ch : string ;
    chOff : string ;
    deleteCell (index : number ) : void ;
    insertCell (index : number ) : HTMLElement | null ;
    rowIndex : number ;
    sectionRowIndex : number ;
    vAlign : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLTableSectionElement extends HTMLTableSectionElement_Instance {
  }
  class HTMLTableSectionElement_Instance extends HTMLElement_Instance {
    align : string ;
    ch : string ;
    chOff : string ;
    deleteRow (index : number ) : HTMLElement | null ;
    insertRow (index : number ) : HTMLElement | null ;
    rows : HTMLCollection < HTMLTableRowElement > | null ;
    vAlign : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLTemplateElement extends HTMLTemplateElement_Instance {
  }
  class HTMLTemplateElement_Instance extends HTMLElement_Instance {
    content : DocumentFragment ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLTextAreaElement extends HTMLTextAreaElement_Instance {
  }
  class HTMLTextAreaElement_Instance extends HTMLElement_Instance {
    accessKey : string ;
    autocapitalize : boolean ;
    autocorrect : boolean ;
    autofocus : boolean ;
    blur ( ) : void ;
    checkValidity ( ) : boolean ;
    cols : number ;
    defaultValue : string ;
    disabled : boolean ;
    focus ( ) : void ;
    form : HTMLFormElement | null ;
    labels : NodeList < any > | null ;
    name : string ;
    readOnly : boolean ;
    reportValidity ( ) : boolean ;
    rows : number ;
    select ( ) : void ;
    selectionEnd : number ;
    selectionStart : number ;
    setCustomValidity (message : string ) : any ;
    setSelectionRange (selectionStart : number , selectionEnd : number ) : any ;
    tabIndex : number ;
    type : string ;
    validationMessage : string ;
    validity : ValidityState | null ;
    value : string ;
    willValidate : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLTitleElement extends HTMLTitleElement_Instance {
  }
  class HTMLTitleElement_Instance extends HTMLElement_Instance {
    text : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLTrackElement extends HTMLTrackElement_Instance {
  }
  class HTMLTrackElement_Instance extends HTMLElement_Instance {
    default : boolean ;
    kind : string ;
    label : string ;
    readyState : number ;
    src : string ;
    srclang : string ;
    track : TextTrack | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLUListElement extends HTMLUListElement_Instance {
  }
  class HTMLUListElement_Instance extends HTMLElement_Instance {
    compact : boolean ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HTMLVideoElement extends HTMLVideoElement_Instance {
  }
  class HTMLVideoElement_Instance extends HTMLMediaElement_Instance {
    getVideoPlaybackQuality ( ) : { corruptedVideoFrames : number , creationTime : number , droppedVideoFrames : number , totalFrameDelay : number , totalVideoFrames : number } ;
    height : number ;
    poster : string ;
    videoHeight : number ;
    videoWidth : number ;
    webkitDecodedFrameCount : number ;
    webkitDisplayingFullscreen : boolean ;
    webkitDroppedFrameCount : number ;
    /**
     * Starts displaying the video in full screen mode.
     */
    webkitEnterFullScreen ( ) : any ;
    /**
     * Starts displaying the video in full screen mode.
     */
    webkitEnterFullscreen ( ) : any ;
    /**
     * Stops displaying the video in full screen mode.
     */
    webkitExitFullScreen ( ) : any ;
    /**
     * Stops displaying the video in full screen mode.
     */
    webkitExitFullscreen ( ) : any ;
    webkitSupportsFullscreen : boolean ;
    width : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class HashChangeEvent extends HashChangeEvent_Instance {
  }
  class HashChangeEvent_Instance extends GlobalEvent {
    constructor (type : string , opt_eventInitDict ? : { newURL : string , oldURL : string } ) ;
    /**
     * Initializes the event after it has been created with document.createEvent
     */
    initHashChangeEvent (typeArg : string , canBubbleArg : boolean , cancelableArg : boolean , oldURLArg : string , newURLArg : string ) : any ;
    newURL : string ;
    oldURL : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Headers extends Headers_Instance {
  }
  class Headers_Instance {
    private noStructuralTyping_: any;
    constructor (opt_headersInit ? : Headers | string [] [] ) ;
    append (name : string , value : string ) : any ;
    delete (name : string ) : any ;
    get (name : string ) : string | null ;
    getAll (name : string ) : string [] ;
    has (name : string ) : boolean ;
    set (name : string , value : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class History extends History_Instance {
  }
  class History_Instance {
    private noStructuralTyping_: any;
    back (opt_distance ? : number ) : any ;
    forward ( ) : any ;
    go (delta : number | string ) : any ;
    length : number ;
    /**
     * Pushes a new state into the session history.
     * @param data New state.
     * @param title The title for a new session history entry.
     * @param opt_url The URL for a new session history entry.
     */
    pushState (data : any , title : string , opt_url ? : string ) : any ;
    /**
     * Replaces the current state in the session history.
     * @param data New state.
     * @param title The title for a session history entry.
     * @param opt_url The URL for a new session history entry.
     */
    replaceState (data : any , title : string , opt_url ? : string ) : any ;
    /**
     * Allows web applications to explicitly set default scroll restoration behavior
     * on history navigation. This property can be either auto or manual.
     *
     * Non-standard. Only supported in Chrome 46+.
     */
    scrollRestoration : string ;
    /**
     * Pending state object.
     */
    state : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface IArrayLike < VALUE2 > extends IObject < number , VALUE2 > {
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class IDBCursor extends IDBCursor_Instance {
    static NEXT : number ;
    static NEXT_NO_DUPLICATE : number ;
    static PREV : number ;
    static PREV_NO_DUPLICATE : number ;
  }
  class IDBCursor_Instance {
    private noStructuralTyping_: any;
    advance (count : number ) : any ;
    /**
     * Note: Must be quoted to avoid parse error.
     * @param key Continue enumerating the cursor from the specified key (or next).
     */
    continue (key ? : number | string | Date | any [] ) : any ;
    /**
     * Note: Must be quoted to avoid parse error.
     */
    delete ( ) : IDBRequest ;
    direction : number ;
    key : number | string | Date | any [] ;
    primaryKey : number ;
    source : any ;
    update (value : any ) : IDBRequest ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class IDBCursorWithValue extends IDBCursorWithValue_Instance {
  }
  class IDBCursorWithValue_Instance extends IDBCursor_Instance {
    value : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class IDBDatabase extends IDBDatabase_Instance {
  }
  class IDBDatabase_Instance implements EventTarget {
    private noStructuralTyping_: any;
    addEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    /**
     * Closes the database connection.
     */
    close ( ) : any ;
    createObjectStore (name : string , opt_parameters ? : Object | null ) : IDBObjectStore ;
    deleteObjectStore (name : string ) : any ;
    description : string ;
    dispatchEvent (evt : GlobalEvent ) : boolean ;
    name : string ;
    objectStoreNames : DOMStringList | null ;
    onabort : ( ( ...a : any [] ) => any ) | null ;
    onerror : ( ( ...a : any [] ) => any ) | null ;
    onversionchange : ( ( ...a : any [] ) => any ) | null ;
    removeEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    setVersion (version : string ) : IDBRequest ;
    transaction (storeNames : string [] | null , mode ? : number | string ) : IDBTransaction ;
    version : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class IDBDatabaseException extends IDBDatabaseException_Instance {
    static ABORT_ERR : number ;
    static CONSTRAINT_ERR : number ;
    static DATA_ERR : number ;
    static NON_TRANSIENT_ERR : number ;
    static NOT_ALLOWED_ERR : number ;
    static NOT_FOUND_ERR : number ;
    static QUOTA_ERR : number ;
    static READ_ONLY_ERR : number ;
    static TIMEOUT_ERR : number ;
    static TRANSACTION_INACTIVE_ERR : number ;
    static UNKNOWN_ERR : number ;
  }
  class IDBDatabaseException_Instance {
    private noStructuralTyping_: any;
    code : number ;
    message : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class IDBFactory extends IDBFactory_Instance {
  }
  class IDBFactory_Instance {
    private noStructuralTyping_: any;
    deleteDatabase (name : string ) : IDBOpenDBRequest ;
    open (name : string , opt_version ? : number ) : IDBOpenDBRequest ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class IDBIndex extends IDBIndex_Instance {
  }
  class IDBIndex_Instance {
    private noStructuralTyping_: any;
    get (key : number | string | Date | any [] | IDBKeyRange ) : IDBRequest ;
    getKey (key : number | string | Date | any [] | IDBKeyRange ) : IDBRequest ;
    keyPath : string ;
    name : string ;
    objectStore : IDBObjectStore ;
    openCursor (range ? : IDBKeyRange | null , direction ? : number | string ) : IDBRequest ;
    openKeyCursor (range ? : IDBKeyRange | null , direction ? : number | string ) : IDBRequest ;
    unique : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class IDBKeyRange extends IDBKeyRange_Instance {
    static bound (left : number | string | Date | any [] , right : number | string | Date | any [] , openLeft ? : boolean , openRight ? : boolean ) : IDBKeyRange ;
    static lowerBound (bound : number | string | Date | any [] , open ? : boolean ) : IDBKeyRange ;
    static only (value : number | string | Date | any [] ) : IDBKeyRange ;
    static upperBound (bound : number | string | Date | any [] , open ? : boolean ) : IDBKeyRange ;
  }
  class IDBKeyRange_Instance {
    private noStructuralTyping_: any;
    lower : any ;
    lowerOpen : any ;
    upper : any ;
    upperOpen : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class IDBObjectStore extends IDBObjectStore_Instance {
  }
  class IDBObjectStore_Instance {
    private noStructuralTyping_: any;
    add (value : any , key ? : number | string | Date | any [] ) : IDBRequest ;
    autoIncrement : boolean ;
    clear ( ) : IDBRequest ;
    count (key ? : number | string | Date | any [] | IDBKeyRange | null ) : IDBRequest ;
    createIndex (name : string , keyPath : string | string [] , opt_paramters ? : Object | null ) : IDBIndex ;
    delete (key : number | string | Date | any [] ) : IDBRequest ;
    deleteIndex (indexName : string ) : any ;
    get (key : number | string | Date | any [] | IDBKeyRange ) : IDBRequest ;
    index (name : string ) : IDBIndex ;
    indexNames : DOMStringList | null ;
    keyPath : string ;
    name : string ;
    openCursor (range ? : IDBKeyRange | null , direction ? : number | string ) : IDBRequest ;
    put (value : any , key ? : number | string | Date | any [] ) : IDBRequest ;
    transaction : IDBTransaction | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class IDBOpenDBRequest extends IDBOpenDBRequest_Instance {
  }
  class IDBOpenDBRequest_Instance extends IDBRequest_Instance {
    onblocked (a : IDBVersionChangeEvent ) : any ;
    onupgradeneeded (a : IDBVersionChangeEvent ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class IDBRequest extends IDBRequest_Instance {
    static DONE : number ;
    static LOADING : number ;
  }
  class IDBRequest_Instance implements EventTarget {
    private noStructuralTyping_: any;
    addEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    dispatchEvent (evt : GlobalEvent ) : boolean ;
    error : DOMError ;
    errorCode : number ;
    onerror (a : GlobalEvent ) : any ;
    onsuccess (a : GlobalEvent ) : any ;
    readyState : number ;
    removeEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    result : any ;
    source : Object | null ;
    transaction : IDBTransaction | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class IDBTransaction extends IDBTransaction_Instance {
    static READ_ONLY : number ;
    static READ_WRITE : number ;
    static VERSION_CHANGE : number ;
  }
  class IDBTransaction_Instance {
    private noStructuralTyping_: any;
    /**
     * Aborts the transaction.
     */
    abort ( ) : any ;
    db : IDBDatabase | null ;
    mode : number | string ;
    objectStore (name : string ) : IDBObjectStore ;
    onabort : ( ( ...a : any [] ) => any ) | null ;
    oncomplete : ( ( ...a : any [] ) => any ) | null ;
    onerror : ( ( ...a : any [] ) => any ) | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class IDBVersionChangeEvent extends IDBVersionChangeEvent_Instance {
  }
  class IDBVersionChangeEvent_Instance extends GlobalEvent {
    newVersion : number | null ;
    oldVersion : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface IIterableResult < VALUE > {
    done : boolean ;
    value : VALUE ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface IObject < KEY1 , VALUE > {
  }
}
declare namespace ಠ_ಠ.clutz {
  interface ITemplateArray extends IArrayLike < string > {
    length : number ;
    raw : IArrayLike < string > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * This is not an official DOM interface. It is used to add generic typing
   * and respective type inference where available.
   * {@see goog.Thenable} inherits from this making all promises
   * interoperate.
   */
  interface IThenable < TYPE > {
    then < VALUE , RESULT > (opt_onFulfilled ? : ( (a : TYPE ) => VALUE ) | null , opt_onRejected ? : ( (a : any ) => any ) | null ) : RESULT ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * An artificial interface to describe methods available on all TypedArray
   * objects so that they can be operated on in type safe but generic way.
   */
  interface ITypedArray extends IArrayLike < number > {
    BYTES_PER_ELEMENT : number ;
    fill (value : number , opt_begin ? : number , opt_end ? : number ) : ITypedArray | null ;
    length : number ;
    set (array : ArrayBufferView | null | number [] , opt_offset ? : number ) : any ;
    subarray (begin : number , opt_end ? : number ) : ITypedArray | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * TODO(bemasc): Remove this definition once it is removed from the browser.
   */
  class IceCandidate extends IceCandidate_Instance {
  }
  class IceCandidate_Instance {
    private noStructuralTyping_: any;
    /**
     * TODO(bemasc): Remove this definition once it is removed from the browser.
     * @param label The label index (audio/video/data -> 0,1,2)
     * @param sdp The ICE candidate in SDP text form
     */
    constructor (label : string , sdp : string ) ;
    label : string | null ;
    toSdp ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Image extends Image_Instance {
  }
  class Image_Instance extends HTMLImageElement_Instance {
    constructor (opt_width ? : number , opt_height ? : number ) ;
    onabort : ( (a : GlobalEvent | null ) => any ) | null ;
    onerror : ( (a : GlobalEvent | null ) => any ) | null ;
    onload : ( (a : GlobalEvent | null ) => any ) | null ;
    src : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ImageData extends ImageData_Instance {
  }
  class ImageData_Instance {
    private noStructuralTyping_: any;
    constructor (dataOrWidth : Uint8ClampedArray | null | number , widthOrHeight : number , opt_height ? : number ) ;
    data : Uint8ClampedArray | null ;
    height : number ;
    width : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  var Infinity : number ;
}
declare namespace ಠ_ಠ.clutz {
  class InstallEvent extends InstallEvent_Instance {
  }
  class InstallEvent_Instance extends ExtendableEvent_Instance {
    constructor (type : string , opt_eventInitDict ? : { activeWorker ? : ServiceWorker , bubbles ? : boolean , cancelable ? : boolean } ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Int16Array extends Int16Array_Instance {
    static BYTES_PER_ELEMENT : number ;
    static from < S > (source : number [] , opt_mapFn ? : (a : number ) => number , opt_this ? : S ) : Int16Array ;
    static of ( ...var_args : ( number | undefined ) [] ) : Int16Array ;
  }
  class Int16Array_Instance extends ArrayBufferView_Instance implements ITypedArray {
    constructor (length : number | ArrayBufferView | null | number [] | ArrayBuffer , opt_byteOffset ? : number , opt_length ? : number ) ;
    [ key: number ]: number ;
    BYTES_PER_ELEMENT : number ;
    copyWithin (target : number , start : number , opt_end ? : number ) : any ;
    fill (value : number , opt_begin ? : number , opt_end ? : number ) : Int16Array ;
    length : number ;
    set (array : ArrayBufferView | null | number [] , opt_offset ? : number ) : any ;
    subarray (begin : number , opt_end ? : number ) : Int16Array ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Int32Array extends Int32Array_Instance {
    static BYTES_PER_ELEMENT : number ;
    static from < S > (source : number [] , opt_mapFn ? : (a : number ) => number , opt_this ? : S ) : Int32Array ;
    static of ( ...var_args : ( number | undefined ) [] ) : Int32Array ;
  }
  class Int32Array_Instance extends ArrayBufferView_Instance implements ITypedArray {
    constructor (length : number | ArrayBufferView | null | number [] | ArrayBuffer , opt_byteOffset ? : number , opt_length ? : number ) ;
    [ key: number ]: number ;
    BYTES_PER_ELEMENT : number ;
    copyWithin (target : number , start : number , opt_end ? : number ) : any ;
    fill (value : number , opt_begin ? : number , opt_end ? : number ) : Int32Array ;
    length : number ;
    set (array : ArrayBufferView | null | number [] , opt_offset ? : number ) : any ;
    subarray (begin : number , opt_end ? : number ) : Int32Array ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Int8Array extends Int8Array_Instance {
    static BYTES_PER_ELEMENT : number ;
    static from < S > (source : number [] , opt_mapFn ? : (a : number ) => number , opt_this ? : S ) : Int8Array ;
    static of ( ...var_args : ( number | undefined ) [] ) : Int8Array ;
  }
  class Int8Array_Instance extends ArrayBufferView_Instance implements ITypedArray {
    constructor (length : number | ArrayBufferView | null | number [] | ArrayBuffer , opt_byteOffset ? : number , opt_length ? : number ) ;
    [ key: number ]: number ;
    BYTES_PER_ELEMENT : number ;
    copyWithin (target : number , start : number , opt_end ? : number ) : any ;
    fill (value : number , opt_begin ? : number , opt_end ? : number ) : Int8Array ;
    length : number ;
    set (array : ArrayBufferView | null | number [] , opt_offset ? : number ) : any ;
    subarray (begin : number , opt_end ? : number ) : Int8Array ;
  }
}
declare namespace ಠ_ಠ.clutz.Intl {
  class Collator extends Collator_Instance {
    static supportedLocalesOf (locales : string [] | null , opt_options ? : { localeMatcher ? : string } ) : any ;
  }
  class Collator_Instance {
    private noStructuralTyping_: any;
    constructor (opt_locales ? : string | string [] | null , opt_options ? : { caseFirst ? : string , ignorePunctuation ? : boolean , localeMatcher ? : string , numeric ? : boolean , sensitivity ? : string , usage ? : string } ) ;
    compare (arg1 : string , arg2 : string ) : number ;
    resolvedOptions ( ) : { caseFirst : string , collation : string , ignorePunctuation : boolean , locale : string , numeric : boolean , sensitivity : string , usage : string } ;
  }
}
declare namespace ಠ_ಠ.clutz.Intl {
  class DateTimeFormat extends DateTimeFormat_Instance {
    static supportedLocalesOf (locales : string [] | null , opt_options ? : { localeMatcher : string } ) : any ;
  }
  class DateTimeFormat_Instance {
    private noStructuralTyping_: any;
    constructor (opt_locales ? : string | string [] | null , opt_options ? : { calendar ? : string , day ? : string , era ? : string , formatMatcher ? : string , hour ? : string , hour12 ? : boolean , localeMatcher ? : string , minute ? : string , month ? : string , numberingSystem ? : string , second ? : string , timeZoneName ? : string , tz ? : string , weekday ? : string , year ? : string } ) ;
    format (date ? : Date | number ) : string ;
    resolvedOptions ( ) : { calendar : string , day ? : string , era ? : string , hour ? : string , hour12 ? : boolean , locale : string , minute ? : string , month ? : string , numberingSystem : string , second ? : string , timeZone ? : string , timeZoneName ? : string , weekday ? : string , year ? : string } ;
  }
}
declare namespace ಠ_ಠ.clutz.Intl {
  class NumberFormat extends NumberFormat_Instance {
    static supportedLocalesOf (locales : string [] | null , opt_options ? : { localeMatcher ? : string } ) : any ;
  }
  class NumberFormat_Instance {
    private noStructuralTyping_: any;
    constructor (opt_locales ? : string | string [] | null , opt_options ? : { currency ? : string , currencyDisplay ? : string , localeMatcher ? : string , maximumFractionDigits ? : number , maximumSignificantDigits ? : number , minimumFractionDigits ? : number , minimumIntegerDigits ? : number , minimumSignificantDigits ? : number , numberingSystem ? : string , style ? : string , useGrouping ? : boolean } ) ;
    format (num : number ) : string ;
    resolvedOptions ( ) : { currency ? : string , currencyDisplay ? : string , locale : string , maximumFractionDigits : number , maximumSignificantDigits : number , minimumFractionDigits : number , minimumIntegerDigits : number , minimumSignificantDigits : number , numberingSystem : string , style : string , useGrouping : boolean } ;
  }
}
declare namespace ಠ_ಠ.clutz.Intl {
  /**
   * NOTE: this API is not from ecma402 and is subject to change.
   */
  class v8BreakIterator extends v8BreakIterator_Instance {
  }
  class v8BreakIterator_Instance {
    private noStructuralTyping_: any;
    /**
     * NOTE: this API is not from ecma402 and is subject to change.
     */
    constructor (opt_locales ? : string | string [] | null , opt_options ? : { type ? : string } ) ;
    adoptText (text : string ) : any ;
    breakType ( ) : string ;
    current ( ) : number ;
    first ( ) : number ;
    next ( ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface Iterable < VALUE > {
  }
}
declare namespace ಠ_ಠ.clutz {
  interface Iterator < VALUE > {
    next (a ? : VALUE ) : IIterableResult < VALUE > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Use this to indicate a type is both an Iterator and an Iterable.
   */
  interface IteratorIterable < T > extends Iterator < T > , Iterable < T > {
  }
}
declare namespace ಠ_ಠ.clutz {
  var JSON : JSONType ;
}
declare namespace ಠ_ಠ.clutz {
  /**
   * A fake type to model the JSON object.
   */
  class JSONType extends JSONType_Instance {
  }
  class JSONType_Instance {
    private noStructuralTyping_: any;
    parse (jsonStr : string , opt_reviver ? : (a : string , b : any ) => any ) : any ;
    stringify (jsonObj : any , opt_replacer ? : string [] | null | ( (a : string , b : any ) => any ) , opt_space ? : number | string ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * To be deprecated. Use ScriptProcessorNode instead.
   */
  class JavaScriptAudioNode extends JavaScriptAudioNode_Instance {
  }
  class JavaScriptAudioNode_Instance extends AudioNode_Instance {
    bufferSize : number ;
    onaudioprocess : EventListener | null | ( (a : AudioProcessingEvent ) => boolean | undefined ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class KeyboardEvent extends KeyboardEvent_Instance {
  }
  class KeyboardEvent_Instance extends UIEvent_Instance {
    constructor (type : string , opt_eventInitDict ? : { altKey ? : boolean , bubbles ? : boolean , cancelable ? : boolean , char ? : string , code ? : string , ctrlKey ? : boolean , detail ? : number , key ? : string , locale ? : string , location ? : number , metaKey ? : boolean , repeat ? : boolean , shiftKey ? : boolean , view ? : Window | null } ) ;
    altKey : boolean ;
    char : string ;
    code : string ;
    ctrlKey : boolean ;
    getModifierState (keyIdentifierArg : string ) : boolean ;
    initKeyboardEvent (typeArg : string , canBubbleArg : boolean , cancelableArg : boolean , viewArg : Window | null , keyIdentifierArg : string , keyLocationArg : number , modifiersList : string ) : any ;
    key : string ;
    keyIdentifier : string ;
    locale : string ;
    location : number ;
    metaKey : boolean ;
    repeat : boolean ;
    shiftKey : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface LinkStyle {
    sheet : StyleSheet | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * LocalFileSystem interface, implemented by Window and WorkerGlobalScope.
   */
  class LocalFileSystem extends LocalFileSystem_Instance {
  }
  class LocalFileSystem_Instance {
    private noStructuralTyping_: any;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Location extends Location_Instance {
  }
  class Location_Instance {
    private noStructuralTyping_: any;
    ancestorOrigins : DOMStringList | null ;
    assign (url : string ) : any ;
    hash : string ;
    host : string ;
    hostname : string ;
    href : string ;
    origin : string ;
    pathname : string ;
    port : any ;
    protocol : string ;
    reload (opt_forceReload ? : boolean ) : any ;
    replace (url : string ) : any ;
    search : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MSCSSMatrix extends MSCSSMatrix_Instance {
  }
  class MSCSSMatrix_Instance extends CSSMatrix_Instance {
    constructor (opt_matrix ? : string ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MSGesture extends MSGesture_Instance {
  }
  class MSGesture_Instance {
    private noStructuralTyping_: any;
    addPointer (pointerId : number ) : any ;
    stop ( ) : any ;
    target : Element | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MSGestureEvent extends MSGestureEvent_Instance {
  }
  class MSGestureEvent_Instance extends GlobalEvent {
    expansion : number ;
    gestureObject : MSGesture ;
    hwTimestamp : number ;
    initGestureEvent (a : string , b : boolean , c : boolean , d : Window | null , e : number , f : number , g : number , h : number , i : number , j : number , k : number , l : number , m : number , n : number , o : number , p : number , q : number , r : number , s : number , t : number , u : number , v : EventTarget | null ) : void ;
    rotation : number ;
    scale : number ;
    translationX : number ;
    translationY : number ;
    velocityAngular : number ;
    velocityExpansion : number ;
    velocityX : number ;
    velocityY : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MSPointerEvent extends MSPointerEvent_Instance {
    static MSPOINTER_TYPE_MOUSE : number ;
    static MSPOINTER_TYPE_PEN : number ;
    static MSPOINTER_TYPE_TOUCH : number ;
  }
  class MSPointerEvent_Instance extends GlobalEvent {
    height : number ;
    hwTimestamp : number ;
    initPointerEvent (a : string , b : boolean , c : boolean , d : Window | null , e : number , f : number , g : number , h : number , i : number , j : boolean , k : boolean , l : boolean , m : boolean , n : number , o : Element | null , p : number , q : number , r : number , s : number , t : number , u : number , v : number , w : number , x : number , y : number , z : number , p0 : boolean ) : void ;
    isPrimary : boolean ;
    msReleasePointerCapture (a : number ) : void ;
    msSetPointerCapture (a : number ) : void ;
    pointerId : number ;
    pointerType : number ;
    pressure : number ;
    rotation : number ;
    tiltX : number ;
    tiltY : number ;
    timeStamp : number ;
    width : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MSPointerPoint extends MSPointerPoint_Instance {
  }
  class MSPointerPoint_Instance {
    private noStructuralTyping_: any;
    pointerId : number ;
    pointerType : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Map < KEY , VALUE > extends Map_Instance < KEY , VALUE > {
  }
  class Map_Instance < KEY , VALUE > implements Iterable < any > {
    private noStructuralTyping_: any;
    constructor (opt_iterable ? : Iterable < any > | null | ( KEY | VALUE ) [] [] ) ;
    clear ( ) : void ;
    delete (a : KEY ) : boolean ;
    entries ( ) : IteratorIterable < any > ;
    forEach < MAP , THIS > (a : (a : VALUE , b : KEY , c : MAP ) => any , b ? : THIS ) : any ;
    get (a : KEY ) : VALUE ;
    has (a : KEY ) : boolean ;
    keys ( ) : IteratorIterable < any > ;
    set < THIS > (a : KEY , b : VALUE ) : THIS ;
    size : number ;
    values ( ) : IteratorIterable < any > ;
  }
}
declare namespace ಠ_ಠ.clutz.Math {
  var E : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  var LN10 : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  var LN2 : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  var LOG10E : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  var LOG2E : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  var PI : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  var SQRT1_2 : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  var SQRT2 : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function abs (x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function acos (x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function acosh (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function asin (x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function asinh (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function atan (x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function atan2 (y : any , x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function atanh (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function cbrt (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function ceil (x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function clz32 (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function cos (x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function cosh (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function exp (x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function expm1 (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function floor (x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function hypot (value1 : number ,  ...var_args : ( number | undefined ) [] ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function imul (value1 : number , value2 : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function log (x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function log10 (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function log1p (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function log2 (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function max ( ...var_args : any [] ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function min ( ...var_args : any [] ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function pow (x : any , y : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function random ( ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function round (x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function sign (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function sin (x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function sinh (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function sqrt (x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function tan (x : any ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function tanh (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function toSource ( ) : string ;
}
declare namespace ಠ_ಠ.clutz.Math {
  function trunc (value : number ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  var MediaConstraintSetInterface_ : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz {
  var MediaConstraintsInterface_ : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz {
  interface MediaDeviceInfo {
    deviceId : string ;
    groupIdlabel : string ;
    kind : string ;
    label : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface MediaDevices extends EventTarget {
    enumerateDevices ( ) : Promise < MediaDeviceInfo [] > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MediaElementAudioSourceNode extends MediaElementAudioSourceNode_Instance {
  }
  class MediaElementAudioSourceNode_Instance extends AudioSourceNode_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class MediaError extends MediaError_Instance {
  }
  class MediaError_Instance {
    private noStructuralTyping_: any;
    code : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MediaList extends MediaList_Instance {
  }
  class MediaList_Instance implements IArrayLike < MediaList > {
    private noStructuralTyping_: any;
    [ key: number ]: MediaList ;
    item (index : number ) : string ;
    length : number ;
    mediaText : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MediaQueryList extends MediaQueryList_Instance {
  }
  class MediaQueryList_Instance {
    private noStructuralTyping_: any;
    addListener (listener : (a : MediaQueryList ) => undefined ) : any ;
    matches : boolean ;
    media : string ;
    removeListener (listener : (a : MediaQueryList ) => undefined ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MediaSource extends MediaSource_Instance {
    static isTypeSupported (type : string ) : boolean ;
  }
  class MediaSource_Instance implements EventTarget {
    private noStructuralTyping_: any;
    activeSourceBuffers : ( SourceBuffer | null ) [] | null ;
    addEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    addSourceBuffer (type : string ) : SourceBuffer | null ;
    dispatchEvent (evt : any ) : any ;
    duration : number ;
    endOfStream (opt_error ? : string ) : any ;
    readyState : string ;
    removeEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    removeSourceBuffer (sourceBuffer : SourceBuffer | null ) : any ;
    sourceBuffers : ( SourceBuffer | null ) [] | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MediaStream extends MediaStream_Instance {
  }
  class MediaStream_Instance implements EventTarget {
    private noStructuralTyping_: any;
    constructor (streamOrTracks ? : MediaStream | MediaStreamTrack [] ) ;
    active : boolean ;
    addEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    addTrack (track : MediaStreamTrack ) : any ;
    clone ( ) : MediaStream ;
    dispatchEvent (evt : GlobalEvent ) : boolean ;
    ended : boolean ;
    getAudioTracks ( ) : MediaStreamTrack [] ;
    getTrackById (trackId : string ) : MediaStreamTrack | null ;
    getTracks ( ) : MediaStreamTrack [] ;
    getVideoTracks ( ) : MediaStreamTrack [] ;
    id : string ;
    /**
     * TODO(bemasc): Remove this property.
     */
    label : string ;
    onactive : ( (a : GlobalEvent ) => any ) | null ;
    onaddtrack : ( (a : ಠ_ಠ.clutz.PrivateType ) => any ) | null ;
    onended : ( (a : GlobalEvent ) => any ) | null ;
    oninactive : ( (a : GlobalEvent ) => any ) | null ;
    onremovetrack : ( (a : ಠ_ಠ.clutz.PrivateType ) => any ) | null ;
    removeEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    removeTrack (track : MediaStreamTrack ) : any ;
    stop ( ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MediaStreamAudioDestinationNode extends MediaStreamAudioDestinationNode_Instance {
  }
  class MediaStreamAudioDestinationNode_Instance extends AudioDestinationNode_Instance {
    stream : MediaStream ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MediaStreamAudioSourceNode extends MediaStreamAudioSourceNode_Instance {
  }
  class MediaStreamAudioSourceNode_Instance extends AudioSourceNode_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  var MediaStreamConstraintsInterface_ : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz {
  class MediaStreamEvent extends MediaStreamEvent_Instance {
  }
  class MediaStreamEvent_Instance {
    private noStructuralTyping_: any;
    constructor (type : string , eventInitDict : Object ) ;
    stream : MediaStream | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface MediaStreamTrack extends EventTarget {
    clone ( ) : MediaStreamTrack ;
    enabled : boolean ;
    id : string ;
    kind : string ;
    label : string ;
    muted : boolean ;
    onended : ( (a : GlobalEvent ) => any ) | null ;
    onmute : ( (a : GlobalEvent ) => any ) | null ;
    onunmute : ( (a : GlobalEvent ) => any ) | null ;
    readyState : string ;
    remote : boolean ;
    stop ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  var MediaStreamTrackEvent : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz {
  var MediaTrackConstraintSetInterface_ : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz {
  var MediaTrackConstraintsInterface_ : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz {
  class MemoryInfo extends MemoryInfo_Instance {
  }
  class MemoryInfo_Instance {
    private noStructuralTyping_: any;
    jsHeapSizeLimit : number ;
    totalJSHeapSize : number ;
    usedJSHeapSize : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MessageChannel extends MessageChannel_Instance {
  }
  class MessageChannel_Instance {
    private noStructuralTyping_: any;
    /**
     * Returns the first port.
     */
    port1 : MessagePort ;
    /**
     * Returns the second port.
     */
    port2 : MessagePort ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MessageEvent < T > extends MessageEvent_Instance < T > {
  }
  class MessageEvent_Instance < T > extends GlobalEvent {
    /**
     * The data payload of the message.
     */
    data : T ;
    /**
     * Initializes the event in a manner analogous to the similarly-named methods in
     * the DOM Events interfaces.
     */
    initMessageEvent : (typeArg : string , canBubbleArg : boolean , cancelableArg : boolean , dataArg : T , originArg : string , lastEventIdArg : string , sourceArg : Window | null , portsArg : ( MessagePort | null ) [] | null ) => any ;
    /**
     * Initializes the event in a manner analogous to the similarly-named methods in
     * the DOM Events interfaces.
     */
    initMessageEventNS (namespaceURI : string , typeArg : string , canBubbleArg : boolean , cancelableArg : boolean , dataArg : T , originArg : string , lastEventIdArg : string , sourceArg : Window | null , portsArg : ( MessagePort | null ) [] | null ) : any ;
    /**
     * The last event ID, for server-sent events.
     */
    lastEventId : string ;
    /**
     * The origin of the message, for server-sent events and cross-document
     * messaging.
     */
    origin : string ;
    /**
     * The Array of MessagePorts sent with the message, for cross-document
     * messaging and channel messaging.
     */
    ports : ( MessagePort | null ) [] | null ;
    /**
     * The window that dispatched the event.
     */
    source : Window | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MessagePort extends MessagePort_Instance {
  }
  class MessagePort_Instance implements EventTarget , Transferable {
    private noStructuralTyping_: any;
    addEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    /**
     * Disconnects the port, so that it is no longer active.
     */
    close ( ) : any ;
    dispatchEvent (evt : any ) : any ;
    /**
     * TODO(blickly): Change this to MessageEvent<*> and add casts as needed
     */
    onmessage : ( (a : MessageEvent < any > ) => any ) | null ;
    /**
     * Posts a message through the channel, optionally with the given
     * Array of Transferables.
     */
    postMessage (message : any , opt_transfer ? : Transferable [] | null ) : any ;
    removeEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    /**
     * Begins dispatching messages received on the port.
     */
    start ( ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MessageSender extends MessageSender_Instance {
  }
  class MessageSender_Instance {
    private noStructuralTyping_: any;
    frameId : number | undefined ;
    id : string | undefined ;
    tab : Tab | undefined ;
    tlsChannelId : string | undefined ;
    url : string | undefined ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Metadata interface.
   */
  class Metadata extends Metadata_Instance {
  }
  class Metadata_Instance {
    private noStructuralTyping_: any;
    modificationTime : Date ;
    size : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MimeType extends MimeType_Instance {
  }
  class MimeType_Instance {
    private noStructuralTyping_: any;
    description : string ;
    enabledPlugin : Plugin | null ;
    suffixes : string ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MimeTypeArray extends MimeTypeArray_Instance {
  }
  class MimeTypeArray_Instance implements IObject < string | number , MimeType > , IArrayLike < MimeType > {
    private noStructuralTyping_: any;
    [ /* warning: coerced from (number|string) */ key: string ]: MimeType ;
    [ key: number ]: MimeType ;
    item (index : number ) : MimeType | null ;
    length : number ;
    namedItem (name : string ) : MimeType | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MouseEvent extends MouseEvent_Instance {
  }
  class MouseEvent_Instance extends UIEvent_Instance {
    constructor (type : string , opt_eventInitDict ? : { altKey ? : boolean , bubbles ? : boolean , button ? : number , buttons ? : number , cancelable ? : boolean , clientX ? : number , clientY ? : number , ctrlKey ? : boolean , detail ? : number , metaKey ? : boolean , relatedTarget ? : EventTarget | null , screenX ? : number , screenY ? : number , shiftKey ? : boolean , view ? : Window | null } ) ;
    type : string ;
    altKey : boolean ;
    button : number ;
    buttons : number ;
    clientX : number ;
    clientY : number ;
    ctrlKey : boolean ;
    /**
     * Addition for accessing clipboard file data that are part of the proposed
     * HTML5 spec.
     */
    dataTransfer : DataTransfer | null ;
    getModifierState (keyIdentifierArg : string ) : boolean ;
    metaKey : boolean ;
    offsetX : number ;
    offsetY : number ;
    pageX : number ;
    pageY : number ;
    relatedTarget : EventTarget | null ;
    screenX : number ;
    screenY : number ;
    shiftKey : boolean ;
    x : number ;
    y : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MutationEvent extends MutationEvent_Instance {
  }
  class MutationEvent_Instance extends GlobalEvent {
    attrChange : number ;
    attrName : string ;
    initMutationEvent (typeArg : string , canBubbleArg : boolean , cancelableArg : boolean , relatedNodeArg : Node | null , prevValueArg : string , newValueArg : string , attrNameArg : string , attrChangeArg : number ) : void ;
    newValue : string ;
    prevValue : string ;
    relatedNode : Node | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MutationObserver extends MutationObserver_Instance {
  }
  class MutationObserver_Instance {
    private noStructuralTyping_: any;
    constructor (callback : (a : ( MutationRecord | null ) [] | null , b : MutationObserver | null ) => any ) ;
    disconnect ( ) : any ;
    observe (target : Node | null , options ? : { attributeFilter ? : string [] , attributeOldValue ? : boolean , attributes ? : boolean , characterData ? : boolean , characterDataOldValue ? : boolean , childList ? : boolean , subtree ? : boolean } ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class MutationRecord extends MutationRecord_Instance {
  }
  class MutationRecord_Instance {
    private noStructuralTyping_: any;
    addedNodes : NodeList < any > | null ;
    attributeName : string | null ;
    attributeNamespace : string | null ;
    nextSibling : Node | null ;
    oldValue : string | null ;
    previousSibling : Node | null ;
    removedNodes : NodeList < any > | null ;
    target : Node | null ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  var NaN : number ;
}
declare namespace ಠ_ಠ.clutz {
  class NameList extends NameList_Instance {
  }
  class NameList_Instance implements IArrayLike < string > {
    private noStructuralTyping_: any;
    [ key: number ]: string ;
    contains (str : string ) : boolean ;
    containsNS (namespaceURI : string , name : string ) : boolean ;
    getName (index : number ) : string ;
    getNamespaceURI (index : number ) : string ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class NamedNodeMap < T > extends NamedNodeMap_Instance < T > {
  }
  class NamedNodeMap_Instance < T > implements IObject < string | number , T > , IArrayLike < T > , Iterable < T > {
    private noStructuralTyping_: any;
    [ /* warning: coerced from (number|string) */ key: string ]: T ;
    [ key: number ]: T ;
    getNamedItem (name : string ) : Node | null ;
    item (index : number ) : Node | null ;
    length : number ;
    removeNamedItem (name : string ) : Node | null ;
    setNamedItem (arg : Node | null ) : Node | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Navigator extends Navigator_Instance {
  }
  class Navigator_Instance {
    private noStructuralTyping_: any;
    appCodeName : string ;
    appName : string ;
    appVersion : string ;
    browserLanguage : string ;
    buildID : string ;
    cookieEnabled : boolean ;
    geolocation : Geolocation | null ;
    getBattery ( ) : Promise < BatteryManager > ;
    javaEnabled ( ) : boolean ;
    language : string ;
    languages : string [] | undefined ;
    mediaDevices : MediaDevices ;
    mimeTypes : MimeTypeArray | null ;
    msMaxTouchPoints : number ;
    msPointerEnabled : boolean ;
    onLine : boolean ;
    oscpu : string ;
    permissions : Permissions | null ;
    platform : string ;
    plugins : PluginArray | null ;
    product : string ;
    productSub : string ;
    registerContentHandler (mimeType : string , url : string , title : string ) : any ;
    registerProtocolHandler (scheme : string , url : string , title : string ) : any ;
    securityPolicy : string ;
    sendBeacon (url : string , opt_data ? : ArrayBufferView | null | Blob | string | FormData ) : boolean ;
    serviceWorker : ServiceWorkerContainer ;
    taintEnabled ( ) : boolean ;
    unregisterContentHandler (mimeType : string , url : string ) : any ;
    unregisterProtocolHandler (scheme : string , url : string ) : any ;
    userAgent : string ;
    vendor : string ;
    vendorSub : string ;
    webkitGetUserMedia (constraints : Object | null , successCallback : (a : MediaStream ) => any , errorCallback ? : (a : NavigatorUserMediaError ) => any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface NavigatorUserMediaError {
    PERMISSION_DENIED : number ;
    code : number ;
    constraintName : string | null ;
    message : string | null ;
    name : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Node extends Node_Instance {
    static ATTRIBUTE_NODE : number ;
    static CDATA_SECTION_NODE : number ;
    static COMMENT_NODE : number ;
    static DOCUMENT_FRAGMENT_NODE : number ;
    static DOCUMENT_NODE : number ;
    static DOCUMENT_POSITION_CONTAINED_BY : number ;
    static DOCUMENT_POSITION_CONTAINS : number ;
    static DOCUMENT_POSITION_DISCONNECTED : number ;
    static DOCUMENT_POSITION_FOLLOWING : number ;
    static DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC : number ;
    static DOCUMENT_POSITION_PRECEDING : number ;
    static DOCUMENT_TYPE_NODE : number ;
    static ELEMENT_NODE : number ;
    static ENTITY_NODE : number ;
    static ENTITY_REFERENCE_NODE : number ;
    static NOTATION_NODE : number ;
    static PROCESSING_INSTRUCTION_NODE : number ;
    static TEXT_NODE : number ;
    static XPATH_NAMESPACE_NODE : number ;
  }
  class Node_Instance implements EventTarget {
    private noStructuralTyping_: any;
    addEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    appendChild (newChild : Node | null ) : Node | null ;
    attributes : NamedNodeMap < Attr > | null ;
    baseName : string ;
    baseURI : string | null ;
    childNodes : NodeList < Node > ;
    cloneNode (deep : boolean ) : Node ;
    compareDocumentPosition (other : Node | null ) : number ;
    /**
     * Note: In IE, the contains() method only exists on Elements, not Nodes.
     * Therefore, it is recommended that you use the Conformance framework to
     * prevent calling this on Nodes which are not Elements.
     * @param n The node to check
     */
    contains (n : Node | null ) : boolean ;
    dataType : string | null ;
    definition : Node | null ;
    dispatchEvent (evt : any ) : any ;
    /**
     * IE5 used document instead of ownerDocument.
     * Old versions of WebKit used document instead of contentDocument.
     */
    document : Document | null ;
    firstChild : Node | null ;
    getFeature (feature : string , version : string ) : Object | null ;
    getUserData (key : string ) : Object | null ;
    hasAttributes ( ) : boolean ;
    hasChildNodes ( ) : boolean ;
    /**
     * Inserts the given HTML text into the element at the location.
     * @param sWhere Where to insert the HTML text, one of 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'.
     * @param sText HTML text to insert.
     */
    insertAdjacentHTML (sWhere : string , sText : string ) : any ;
    insertBefore (newChild : Node | null , refChild : Node | null ) : Node ;
    isDefaultNamespace (namespaceURI : string ) : boolean ;
    isEqualNode (arg : Node | null ) : boolean ;
    isSameNode (other : Node | null ) : boolean ;
    isSupported (feature : string , version : string ) : boolean ;
    lastChild : Node | null ;
    localName : string ;
    lookupNamespaceURI (prefix : string ) : string ;
    lookupPrefix (namespaceURI : string ) : string ;
    namespaceURI : string ;
    nextSibling : Node | null ;
    nodeName : string ;
    nodeType : number ;
    nodeTypeString : string ;
    nodeTypedValue : any ;
    nodeValue : string ;
    normalize ( ) : void ;
    ownerDocument : Document | null ;
    parentElement : Element | null ;
    parentNode : Node | null ;
    parsed : boolean ;
    prefix : string ;
    previousSibling : Node | null ;
    querySelector (query : string ) : Element | null ;
    querySelectorAll (query : string ) : NodeList < Element > ;
    removeChild (oldChild : Node | null ) : Node ;
    removeEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    removeNode (opt_bRemoveChildren ? : boolean ) : Node | null ;
    replaceChild (newChild : Node | null , oldChild : Node | null ) : Node ;
    selectNodes (expression : string ) : NodeList < any > ;
    selectSingleNode (expression : string ) : Node | null ;
    setUserData (key : Object | null , data : Object | null , handler : UserDataHandler | null ) : Object | null ;
    specified : boolean ;
    text : string ;
    textContent : string ;
    transformNode (stylesheet : Node | null ) : string ;
    transformNodeToObject (stylesheet : Node | null , outputObject : Object | null ) : any ;
    xml : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface NodeFilter {
    acceptNode (n : Node | null ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface NodeIterator {
    /**
     * Detach and invalidate the NodeIterator.
     */
    detach ( ) : any ;
    nextNode ( ) : Node | null ;
    previousNode ( ) : Node | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class NodeList < T > extends NodeList_Instance < T > {
  }
  class NodeList_Instance < T > implements IArrayLike < T > , Iterable < T > {
    private noStructuralTyping_: any;
    [ key: number ]: T ;
    item (index : number ) : T | null ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Notation extends Notation_Instance {
  }
  class Notation_Instance extends Node_Instance {
    publicId : string ;
    systemId : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Notification extends Notification_Instance {
    static permission : string ;
    static requestPermission (opt_callback ? : (a : string ) => any ) : any ;
  }
  class Notification_Instance implements EventTarget {
    private noStructuralTyping_: any;
    constructor (title : string , opt_options ? : { body ? : string , dir ? : string , icon ? : string , lang ? : string , requireInteraction ? : boolean , tag ? : string } ) ;
    addEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    body : string ;
    /**
     * Prevents the notification from being displayed, or closes it if it is already
     * displayed.
     */
    cancel ( ) : any ;
    /**
     * Prevents the notification from being displayed, or closes it if it is already
     * displayed.
     */
    close ( ) : any ;
    /**
     * The string used by clients to specify the directionality (rtl/ltr) of the
     * notification.
     */
    dir : string ;
    dispatchEvent (evt : GlobalEvent ) : boolean ;
    icon : string ;
    /**
     * An event handler called when the notification has been clicked on.
     */
    onclick : ( (a : GlobalEvent | null ) => any ) | null ;
    /**
     * An event handler called when notification is closed.
     */
    onclose : ( (a : GlobalEvent | null ) => any ) | null ;
    /**
     * An event handler called when the notification has become visible.
     */
    ondisplay : ( (a : GlobalEvent | null ) => any ) | null ;
    /**
     * An event handler called if the notification could not be displayed due to
     * an error (i.e. resource could not be loaded).
     */
    onerror : ( (a : GlobalEvent | null ) => any ) | null ;
    /**
     * An event handler called when the notification has become visible.
     */
    onshow : ( (a : GlobalEvent | null ) => any ) | null ;
    removeEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    /**
     * The ID used by clients to uniquely identify notifications to eliminate
     * duplicate notifications.
     */
    replaceId : string ;
    /**
     * Displays the notification.
     */
    show ( ) : any ;
    /**
     * The string used by clients to identify the notification.
     */
    tag : string ;
    title : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class NotificationCenter extends NotificationCenter_Instance {
  }
  class NotificationCenter_Instance {
    private noStructuralTyping_: any;
    /**
     * Checks if the user has permission to display notifications.
     */
    checkPermission ( ) : number ;
    /**
     * Creates an HTML notification and displays it to the user.
     */
    createHTMLNotification (url : string ) : Notification | null ;
    /**
     * Creates a text+icon notification and displays it to the user.
     */
    createNotification (iconUrl : string , title : string , body : string ) : Notification | null ;
    /**
     * Requests permission from the user to display notifications.
     */
    requestPermission (opt_callback ? : ( ( ...a : any [] ) => any ) | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class NotificationEvent extends NotificationEvent_Instance {
  }
  class NotificationEvent_Instance extends ExtendableEvent_Instance {
    constructor (type : string , opt_eventInitDict ? : { bubbles ? : boolean , cancelable ? : boolean } ) ;
    notification : Notification | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface NotificationOptionsInterface_ {
    body : string ;
    dir : string ;
    icon : string ;
    lang : string ;
    requireInteraction : boolean ;
    tag : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Number extends Number_Instance {
    static EPSILON : number ;
    static MAX_SAFE_INTEGER : number ;
    static MAX_VALUE : number ;
    static MIN_SAFE_INTEGER : number ;
    static MIN_VALUE : number ;
    static NEGATIVE_INFINITY : number ;
    static NaN : number ;
    static POSITIVE_INFINITY : number ;
    static isFinite (value : number ) : boolean ;
    static isInteger (value : number ) : boolean ;
    static isNaN (value : number ) : boolean ;
    static isSafeInteger (value : number ) : boolean ;
    static parseFloat (string : string ) : number ;
    /**
     * Parse an integer. Use of {@code parseInt} without {@code base} is strictly
     * banned in Google. If you really want to parse octal or hex based on the
     * leader, then pass {@code undefined} as the base.
     */
    static parseInt (string : string , radix : number | undefined ) : number ;
  }
  class Number_Instance {
    private noStructuralTyping_: any;
    constructor (opt_value ? : any ) ;
    toExponential (opt_fractionDigits ? : number ) : string ;
    toFixed (opt_digits ? : any ) : string ;
    /**
     * Returns a language-sensitive string representation of this number.
     */
    toLocaleString (opt_locales ? : string | string [] , opt_options ? : Object | null ) : string ;
    toPrecision (opt_precision ? : number ) : string ;
    /**
     * Returns a string representing the number.
     * @param opt_radix An optional radix.
     */
    toString (opt_radix ? : number | Number | null ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.Number {
  var EPSILON : number ;
}
declare namespace ಠ_ಠ.clutz.Number {
  var MAX_SAFE_INTEGER : number ;
}
declare namespace ಠ_ಠ.clutz.Number {
  var MAX_VALUE : number ;
}
declare namespace ಠ_ಠ.clutz.Number {
  var MIN_SAFE_INTEGER : number ;
}
declare namespace ಠ_ಠ.clutz.Number {
  var MIN_VALUE : number ;
}
declare namespace ಠ_ಠ.clutz.Number {
  var NEGATIVE_INFINITY : number ;
}
declare namespace ಠ_ಠ.clutz.Number {
  var NaN : number ;
}
declare namespace ಠ_ಠ.clutz.Number {
  var POSITIVE_INFINITY : number ;
}
declare namespace ಠ_ಠ.clutz.Number {
  function isFinite (value : number ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Number {
  function isInteger (value : number ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Number {
  function isNaN (value : number ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Number {
  function isSafeInteger (value : number ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Number {
  function parseFloat (string : string ) : number ;
}
declare namespace ಠ_ಠ.clutz.Number {
  /**
   * Parse an integer. Use of {@code parseInt} without {@code base} is strictly
   * banned in Google. If you really want to parse octal or hex based on the
   * leader, then pass {@code undefined} as the base.
   */
  function parseInt (string : string , radix : number | undefined ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  class OES_depth_texture extends OES_depth_texture_Instance {
  }
  class OES_depth_texture_Instance {
    private noStructuralTyping_: any;
  }
}
declare namespace ಠ_ಠ.clutz {
  class OES_element_index_uint extends OES_element_index_uint_Instance {
  }
  class OES_element_index_uint_Instance {
    private noStructuralTyping_: any;
  }
}
declare namespace ಠ_ಠ.clutz {
  class OES_standard_derivatives extends OES_standard_derivatives_Instance {
  }
  class OES_standard_derivatives_Instance {
    private noStructuralTyping_: any;
    FRAGMENT_SHADER_DERIVATIVE_HINT_OES : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class OES_texture_float extends OES_texture_float_Instance {
  }
  class OES_texture_float_Instance {
    private noStructuralTyping_: any;
  }
}
declare namespace ಠ_ಠ.clutz {
  class OES_texture_half_float extends OES_texture_half_float_Instance {
  }
  class OES_texture_half_float_Instance {
    private noStructuralTyping_: any;
    HALF_FLOAT_OES : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class OES_vertex_array_object extends OES_vertex_array_object_Instance {
  }
  class OES_vertex_array_object_Instance {
    private noStructuralTyping_: any;
    VERTEX_ARRAY_BINDING_OES : number ;
    bindVertexArrayOES (arrayObject : WebGLVertexArrayObjectOES | null ) : any ;
    createVertexArrayOES ( ) : WebGLVertexArrayObjectOES | null ;
    deleteVertexArrayOES (arrayObject : WebGLVertexArrayObjectOES | null ) : any ;
    isVertexArrayOES (arrayObject : WebGLVertexArrayObjectOES | null ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Object extends Object_Instance {
    static assign (target : Object ,  ...var_args : ( Object | null | undefined ) [] ) : Object ;
    static create (proto : Object | null , opt_properties ? : Object | null ) : Object ;
    static defineProperties (obj : Object , props : Object ) : Object ;
    static defineProperty (obj : Object , prop : string , descriptor : Object ) : Object ;
    static freeze < T > (obj : T ) : T ;
    static getOwnPropertyDescriptor (obj : Object , prop : string ) : ObjectPropertyDescriptor | undefined ;
    static getOwnPropertyNames (obj : Object ) : string [] ;
    static getOwnPropertySymbols (obj : Object ) : any [] ;
    static getPrototypeOf (obj : Object ) : Object | null ;
    static is (a : any , b : any ) : boolean ;
    static isExtensible (obj : Object ) : boolean ;
    static isFrozen (obj : Object ) : boolean ;
    static isSealed (obj : Object ) : boolean ;
    static keys (obj : Object ) : string [] ;
    static preventExtensions < T > (obj : T ) : T ;
    static seal < T > (obj : T ) : T ;
    static setPrototypeOf (obj : Object , proto : Object | null ) : Object ;
  }
  class Object_Instance {
    private noStructuralTyping_: any;
    constructor (opt_value ? : any ) ;
    /**
     * Binds an object's property to a function to be called when that property is
     * looked up.
     * Mozilla-only.
     */
    __defineGetter__ (sprop : string , fun : ( ( ...a : any [] ) => any ) | null ) : any ;
    /**
     * Binds an object's property to a function to be called when an attempt is made
     * to set that property.
     * Mozilla-only.
     */
    __defineSetter__ (sprop : string , fun : ( ( ...a : any [] ) => any ) | null ) : any ;
    /**
     * Return the function bound as a getter to the specified property.
     * Mozilla-only.
     * @param sprop a string containing the name of the property whose getter should be returned
     */
    __lookupGetter__ (sprop : string ) : ( ( ...a : any [] ) => any ) | null ;
    /**
     * Return the function bound as a setter to the specified property.
     * Mozilla-only.
     * @param sprop a string containing the name of the property whose setter should be returned.
     */
    __lookupSetter__ (sprop : string ) : ( ( ...a : any [] ) => any ) | null ;
    /**
     * Executes a function when a non-existent method is called on an object.
     * Mozilla-only.
     */
    __noSuchMethod__ (fun : ( ( ...a : any [] ) => any ) | null ) : any ;
    /**
     * Points to an object's context.  For top-level objects, this is the e.g. window.
     * Mozilla-only.
     */
    __parent__ : Object | null ;
    /**
     * Points to the object which was used as prototype when the object was instantiated.
     * Mozilla-only.
     *
     * Will be null on Object.prototype.
     */
    __proto__ : Object | null ;
    /**
     * Returns whether the object has a property with the specified name.
     * @param propertyName Implicitly cast to a string.
     */
    hasOwnProperty (propertyName : any ) : boolean ;
    /**
     * Returns whether an object exists in another object's prototype chain.
     */
    isPrototypeOf (other : Object | null ) : boolean ;
    /**
     * Determine whether the specified property in an object can be enumerated by a
     * for..in loop, with the exception of properties inherited through the
     * prototype chain.
     */
    propertyIsEnumerable (propertyName : string ) : boolean ;
    toJSON (opt_key ? : string ) : any ;
    /**
     * Returns a localized string representing the object.
     */
    toLocaleString ( ) : string ;
    /**
     * Returns a string representing the source code of the object.
     * Mozilla-only.
     */
    toSource ( ) : string ;
    /**
     * Returns a string representing the object.
     */
    toString ( ) : string ;
    /**
     * Removes a watchpoint set with the {@see Object.prototype.watch} method.
     * Mozilla-only.
     * @param prop The name of a property of the object.
     */
    unwatch (prop : string ) : any ;
    /**
     * Returns the object's {@code this} value.
     */
    valueOf ( ) : any ;
    /**
     * Sets a watchpoint method.
     * Mozilla-only.
     * @param prop The name of a property of the object.
     * @param handler A function to call.
     */
    watch (prop : string , handler : ( ( ...a : any [] ) => any ) | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz.Object {
  function assign (target : Object ,  ...var_args : ( Object | null | undefined ) [] ) : Object ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function create (proto : Object | null , opt_properties ? : Object | null ) : Object ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function defineProperties (obj : Object , props : Object ) : Object ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function defineProperty (obj : Object , prop : string , descriptor : Object ) : Object ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function freeze < T > (obj : T ) : T ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function getOwnPropertyDescriptor (obj : Object , prop : string ) : ObjectPropertyDescriptor | undefined ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function getOwnPropertyNames (obj : Object ) : string [] ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function getOwnPropertySymbols (obj : Object ) : any [] ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function getPrototypeOf (obj : Object ) : Object | null ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function is (a : any , b : any ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function isExtensible (obj : Object ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function isFrozen (obj : Object ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function isSealed (obj : Object ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function keys (obj : Object ) : string [] ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function preventExtensions < T > (obj : T ) : T ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function seal < T > (obj : T ) : T ;
}
declare namespace ಠ_ಠ.clutz.Object {
  function setPrototypeOf (obj : Object , proto : Object | null ) : Object ;
}
declare namespace ಠ_ಠ.clutz {
  /**
   * A object property descriptor used by Object.create, Object.defineProperty,
   * Object.defineProperties, Object.getOwnPropertyDescriptor.
   *
   * Note: not a real constructor.
   */
  class ObjectPropertyDescriptor extends ObjectPropertyDescriptor_Instance {
  }
  class ObjectPropertyDescriptor_Instance {
    private noStructuralTyping_: any;
    configurable : boolean | undefined ;
    enumerable : boolean | undefined ;
    get : ( ( ) => any ) | undefined ;
    set : ( (a : any ) => undefined ) | undefined ;
    value : any ;
    writable : boolean | undefined ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class OfflineAudioCompletionEvent extends OfflineAudioCompletionEvent_Instance {
  }
  class OfflineAudioCompletionEvent_Instance extends GlobalEvent {
    renderedBuffer : AudioBuffer | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class OfflineAudioContext extends OfflineAudioContext_Instance {
  }
  class OfflineAudioContext_Instance extends AudioContext_Instance {
    constructor (numberOfChannels : number , length : number , sampleRate : number ) ;
    oncomplete (a : OfflineAudioCompletionEvent | null ) : any ;
    startRendering ( ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Option extends Option_Instance {
  }
  class Option_Instance extends HTMLOptionElement_Instance {
    constructor (opt_text ? : any , opt_value ? : any , opt_defaultSelected ? : any , opt_selected ? : any ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class OscillatorNode extends OscillatorNode_Instance {
  }
  class OscillatorNode_Instance extends AudioNode_Instance {
    detune : AudioParam ;
    frequency : AudioParam ;
    onended : EventListener | null ;
    /**
     * To be deprecated.
     */
    playbackState : number ;
    setPeriodicWave (a : PeriodicWave | null ) : any ;
    /**
     * To be deprecated.
     */
    setWaveTable (a : WaveTable | null ) : any ;
    start (a : number ) : any ;
    stop (a : number ) : any ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class PageTransitionEvent extends PageTransitionEvent_Instance {
  }
  class PageTransitionEvent_Instance extends GlobalEvent {
    constructor (type : string , opt_eventInitDict ? : { persisted : boolean } ) ;
    /**
     * Initializes the event after it has been created with document.createEvent
     */
    initPageTransitionEvent (typeArg : string , canBubbleArg : boolean , cancelableArg : boolean , persistedArg : any ) : any ;
    persisted : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Performance extends Performance_Instance {
  }
  class Performance_Instance {
    private noStructuralTyping_: any;
    clearMarks (opt_markName ? : string ) : any ;
    clearMeasures (opt_measureName ? : string ) : any ;
    /**
     * Clears the buffer used to store the current list of
     * PerformanceResourceTiming resources.
     */
    clearResourceTimings ( ) : void ;
    getEntries ( ) : ( PerformanceEntry | null ) [] | null ;
    getEntriesByName (name : string , opt_entryType ? : string ) : ( PerformanceEntry | null ) [] | null ;
    getEntriesByType (entryType : string ) : ( PerformanceEntry | null ) [] | null ;
    mark (markName : string ) : any ;
    measure (measureName : string , opt_startMark ? : string , opt_endMark ? : string ) : any ;
    memory : PerformanceMemory | null ;
    navigation : PerformanceNavigation | null ;
    now ( ) : number ;
    /**
     * Set the maximum number of PerformanceResourceTiming resources that may be
     * stored in the buffer.
     */
    setResourceTimingBufferSize (maxSize : number ) : any ;
    timing : PerformanceTiming | null ;
    /**
     * Clear out the buffer of performance timing events for webkit browsers.
     */
    webkitClearResourceTimings ( ) : void ;
    webkitNow ( ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class PerformanceEntry extends PerformanceEntry_Instance {
  }
  class PerformanceEntry_Instance {
    private noStructuralTyping_: any;
    duration : number ;
    entryType : string ;
    name : string ;
    startTime : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class PerformanceMemory extends PerformanceMemory_Instance {
  }
  class PerformanceMemory_Instance {
    private noStructuralTyping_: any;
    jsHeapSizeLimit : number ;
    totalJSHeapSize : number ;
    usedJSHeapSize : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class PerformanceNavigation extends PerformanceNavigation_Instance {
  }
  class PerformanceNavigation_Instance {
    private noStructuralTyping_: any;
    TYPE_BACK_FORWARD : number ;
    TYPE_NAVIGATE : number ;
    TYPE_RELOAD : number ;
    TYPE_RESERVED : number ;
    redirectCount : number ;
    type : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class PerformanceResourceTiming extends PerformanceResourceTiming_Instance {
  }
  class PerformanceResourceTiming_Instance extends PerformanceEntry_Instance {
    connectEnd : number ;
    connectStart : number ;
    domainLookupEnd : number ;
    domainLookupStart : number ;
    fetchStart : number ;
    initiatorType : string ;
    redirectEnd : number ;
    redirectStart : number ;
    requestStart : number ;
    responseEnd : number ;
    responseStart : number ;
    secureConnectionStart : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class PerformanceTiming extends PerformanceTiming_Instance {
  }
  class PerformanceTiming_Instance {
    private noStructuralTyping_: any;
    connectEnd : number ;
    connectStart : number ;
    domComplete : number ;
    domContentLoadedEventEnd : number ;
    domContentLoadedEventStart : number ;
    domInteractive : number ;
    domLoading : number ;
    domainLookupEnd : number ;
    domainLookupStart : number ;
    fetchStart : number ;
    loadEventEnd : number ;
    loadEventStart : number ;
    navigationStart : number ;
    redirectEnd : number ;
    redirectStart : number ;
    requestStart : number ;
    responseEnd : number ;
    responseStart : number ;
    secureConnectionStart : number ;
    unloadEventEnd : number ;
    unloadEventStart : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class PeriodicWave extends PeriodicWave_Instance {
  }
  class PeriodicWave_Instance {
    private noStructuralTyping_: any;
  }
}
declare namespace ಠ_ಠ.clutz {
  type PermissionName = string ;
  var PermissionName : {
    GEOLOCATION : PermissionName ,
    MIDI : PermissionName ,
    NOTIFICATIONS : PermissionName ,
    PUSH : PermissionName ,
  };
}
declare namespace ಠ_ಠ.clutz {
  type PermissionState = string ;
  var PermissionState : {
    DENIED : PermissionState ,
    GRANTED : PermissionState ,
    PROMPT : PermissionState ,
  };
}
declare namespace ಠ_ಠ.clutz {
  class PermissionStatus extends PermissionStatus_Instance {
  }
  class PermissionStatus_Instance implements EventTarget {
    private noStructuralTyping_: any;
    addEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    dispatchEvent (evt : GlobalEvent ) : boolean ;
    onchange : ( (a : GlobalEvent ) => any ) | null ;
    removeEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    state : PermissionState ;
    status : PermissionState ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Permissions extends Permissions_Instance {
  }
  class Permissions_Instance {
    private noStructuralTyping_: any;
    query (permission : { name : PermissionName } ) : Promise < PermissionStatus > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Plugin extends Plugin_Instance {
  }
  class Plugin_Instance {
    private noStructuralTyping_: any;
    description : string ;
    filename : string ;
    length : number ;
    name : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class PluginArray extends PluginArray_Instance {
  }
  class PluginArray_Instance implements IObject < string | number , Plugin > , IArrayLike < Plugin > {
    private noStructuralTyping_: any;
    [ /* warning: coerced from (number|string) */ key: string ]: Plugin ;
    [ key: number ]: Plugin ;
    item (index : number ) : Plugin | null ;
    length : number ;
    namedItem (name : string ) : Plugin | null ;
    refresh (reloadDocuments ? : boolean ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class PopStateEvent extends PopStateEvent_Instance {
  }
  class PopStateEvent_Instance extends GlobalEvent {
    constructor (type : string , opt_eventInitDict ? : { state : any } ) ;
    /**
     * Initializes the event after it has been created with document.createEvent
     */
    initPopStateEvent (typeArg : string , canBubbleArg : boolean , cancelableArg : boolean , stateArg : any ) : any ;
    state : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Port extends Port_Instance {
  }
  class Port_Instance {
    private noStructuralTyping_: any;
    disconnect ( ) : void ;
    name : string ;
    onDisconnect : ChromeEvent ;
    onMessage : ChromeEvent ;
    postMessage (obj : any ) : void ;
    sender : MessageSender | undefined ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ProcessingInstruction extends ProcessingInstruction_Instance {
  }
  class ProcessingInstruction_Instance extends Node_Instance {
    data : string ;
    target : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ProgressEvent extends ProgressEvent_Instance {
  }
  class ProgressEvent_Instance extends GlobalEvent {
    constructor (type : string , opt_progressEventInitDict ? : { lengthComputable ? : boolean , loaded ? : number , total ? : number } ) ;
    lengthComputable : boolean ;
    loaded : number ;
    total : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Promise < TYPE > extends Promise_Instance < TYPE > {
    static all < T > (iterable : ( T | Promise < T > ) [] | Iterable < T | Promise < T > > ) : Promise < T [] > ;
    static race < T > (iterable : T [] | Iterable < T > ) : Promise < T > ;
    static reject (opt_error ? : any ) : Promise < any > ;
    static resolve < VALUE , RESULT > (opt_value ? : VALUE ) : RESULT ;
  }
  class Promise_Instance < TYPE > implements IThenable < TYPE > {
    private noStructuralTyping_: any;
    constructor (resolver : (a : (a ? : TYPE | IThenable < TYPE > | null | { then : any } ) => any , b : (a ? : any ) => any ) => any ) ;
    catch < RESULT > (onRejected : (a : any ) => RESULT ) : Promise < RESULT > ;
    then < VALUE , RESULT > (opt_onFulfilled ? : ( (a : TYPE ) => VALUE ) | null , opt_onRejected ? : ( (a : any ) => any ) | null ) : RESULT ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class PushEvent extends PushEvent_Instance {
  }
  class PushEvent_Instance extends ExtendableEvent_Instance {
    constructor (type : string , opt_eventInitDict ? : { bubbles ? : boolean , cancelable ? : boolean } ) ;
    data : PushMessageData | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class PushManager extends PushManager_Instance {
  }
  class PushManager_Instance {
    private noStructuralTyping_: any;
    getSubscription ( ) : Promise < PushSubscription | null > ;
    subscribe (opt_options ? : { userVisibleOnly ? : boolean } ) : Promise < PushSubscription | null > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class PushMessageData extends PushMessageData_Instance {
  }
  class PushMessageData_Instance {
    private noStructuralTyping_: any;
    arrayBuffer ( ) : ArrayBuffer ;
    blob ( ) : Blob ;
    json ( ) : any ;
    text ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class PushSubscription extends PushSubscription_Instance {
  }
  class PushSubscription_Instance {
    private noStructuralTyping_: any;
    endpoint : string ;
    /**
     * Please note there is an intent to deprecate this field in Chrome 43 or 44.
     * See https://www.chromestatus.com/feature/5283829761703936.
     */
    subscriptionId : string ;
    unsubscribe ( ) : Promise < boolean > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class RGBColor extends RGBColor_Instance {
  }
  class RGBColor_Instance {
    private noStructuralTyping_: any;
    blue : CSSPrimitiveValue | null ;
    green : CSSPrimitiveValue | null ;
    red : CSSPrimitiveValue | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  var RTCConfigurationInterface_ : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz {
  interface RTCDataChannel {
    binaryType : string ;
    bufferedAmount : number ;
    close ( ) : any ;
    label : string ;
    onclose : ( (a : GlobalEvent ) => any ) | null ;
    onerror : ( (a : GlobalEvent ) => any ) | null ;
    onmessage : ( (a : MessageEvent < any > ) => any ) | null ;
    onopen : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * An enumerated string type (RTCDataChannelState) with values:
     * "connecting", "open", "closing", and "closed".
     */
    readyState : string ;
    reliable : boolean ;
    send (data : string | Blob | ArrayBuffer | ArrayBufferView ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  var RTCDataChannelEvent : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz {
  var RTCDataChannelInitInterface_ : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz {
  class RTCIceCandidate extends RTCIceCandidate_Instance {
  }
  class RTCIceCandidate_Instance {
    private noStructuralTyping_: any;
    constructor (candidateInitDict ? : Object ) ;
    candidate : string | null ;
    sdpMLineIndex : number | null ;
    sdpMid : string | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  var RTCIceServerInterface_ : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz {
  class RTCPeerConnection extends RTCPeerConnection_Instance {
  }
  class RTCPeerConnection_Instance implements EventTarget {
    private noStructuralTyping_: any;
    constructor (configuration : { iceServers : { url : string } [] } | null , constraints ? : Object | null ) ;
    addEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    addIceCandidate (candidate : RTCIceCandidate ) : any ;
    addStream (stream : MediaStream , constraints ? : Object ) : any ;
    close ( ) : any ;
    createAnswer (successCallback : (a : RTCSessionDescription ) => any , failureCallback ? : ( (a : string ) => any ) | null , constraints ? : Object ) : any ;
    createDataChannel (label : string | null , dataChannelDict ? : null | { reliable : boolean } ) : RTCDataChannel ;
    createOffer (successCallback : (a : RTCSessionDescription ) => any , failureCallback ? : (a : string ) => any , constraints ? : Object ) : any ;
    dispatchEvent (evt : GlobalEvent ) : boolean ;
    getLocalStreams ( ) : MediaStream [] ;
    getRemoteStreams ( ) : MediaStream [] ;
    getStats (successCallback : (a : RTCStatsResponse , b ? : MediaStreamTrack | null ) => any , selector ? : MediaStreamTrack | null ) : any ;
    getStreamById (streamId : string ) : MediaStream | null ;
    iceConnectionState : string ;
    iceGatheringState : string ;
    localDescription : RTCSessionDescription | null ;
    onaddstream : ( (a : MediaStreamEvent ) => any ) | null ;
    ondatachannel : ( (a : ಠ_ಠ.clutz.PrivateType ) => any ) | null ;
    onicecandidate : ( (a : RTCPeerConnectionIceEvent ) => any ) | null ;
    oniceconnectionstatechange : ( (a : GlobalEvent ) => any ) | null ;
    onnegotiationneeded : ( (a : GlobalEvent ) => any ) | null ;
    onremovestream : ( (a : MediaStreamEvent ) => any ) | null ;
    onsignalingstatechange : ( (a : GlobalEvent ) => any ) | null ;
    remoteDescription : RTCSessionDescription | null ;
    removeEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    removeStream (stream : MediaStream ) : any ;
    setLocalDescription (description : RTCSessionDescription , successCallback ? : ( ) => any , failureCallback ? : (a : string ) => any ) : any ;
    setRemoteDescription (description : RTCSessionDescription , successCallback ? : ( ) => any , failureCallback ? : (a : string ) => any ) : any ;
    signalingState : string ;
    updateIce (configuration ? : { iceServers : { url : string } [] } | null , constraints ? : Object | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class RTCPeerConnectionIceEvent extends RTCPeerConnectionIceEvent_Instance {
  }
  class RTCPeerConnectionIceEvent_Instance {
    private noStructuralTyping_: any;
    constructor (type : string , eventInitDict : Object ) ;
    candidate : RTCIceCandidate | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class RTCSessionDescription extends RTCSessionDescription_Instance {
  }
  class RTCSessionDescription_Instance {
    private noStructuralTyping_: any;
    constructor (descriptionInitDict ? : Object ) ;
    sdp : string | null ;
    type : string | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface RTCStatsReport {
    id : string ;
    local : RTCStatsReport | null ;
    names ( ) : string [] ;
    remote : RTCStatsReport | null ;
    stat (name : string ) : string ;
    timestamp : Date | null ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface RTCStatsResponse {
    result ( ) : RTCStatsReport [] ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class RadioNodeList < T > extends RadioNodeList_Instance < T > {
  }
  class RadioNodeList_Instance < T > extends NodeList < any > {
  }
}
declare namespace ಠ_ಠ.clutz {
  class Range extends Range_Instance {
  }
  class Range_Instance {
    private noStructuralTyping_: any;
    END_TO_END : number ;
    END_TO_START : number ;
    START_TO_END : number ;
    START_TO_START : number ;
    cloneContents ( ) : DocumentFragment | null ;
    cloneRange ( ) : Range | null ;
    collapse (toStart : boolean ) : void ;
    collapsed : boolean ;
    commonAncestorContainer : Node | null ;
    compareBoundaryPoints (how : number , sourceRange : Range | null ) : number ;
    compareNode (a : Node | null ) : number ;
    comparePoint (a : Node | null , b : number ) : number ;
    createContextualFragment (a : string ) : DocumentFragment | null ;
    deleteContents ( ) : number ;
    detach ( ) : void ;
    endContainer : Node | null ;
    endOffset : number ;
    extractContents ( ) : DocumentFragment | null ;
    getBoundingClientRect ( ) : ClientRect ;
    getClientRects ( ) : ClientRectList ;
    insertNode (newNode : Node | null ) : DocumentFragment | null ;
    intersectsNode (a : Node | null ) : boolean ;
    isPointInRange (a : Node | null , b : number ) : boolean ;
    selectNode (refNode : Node | null ) : void ;
    selectNodeContents (refNode : Node | null ) : void ;
    setEnd (refNode : Node | null , offset : number ) : void ;
    setEndAfter (refNode : Node | null ) : void ;
    setEndBefore (refNode : Node | null ) : void ;
    setStart (refNode : Node | null , offset : number ) : void ;
    setStartAfter (refNode : Node | null ) : void ;
    setStartBefore (refNode : Node | null ) : void ;
    startContainer : Node | null ;
    startOffset : number ;
    surroundContents (newParent : Node | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class RangeError extends RangeError_Instance {
  }
  class RangeError_Instance extends GlobalError {
    constructor (opt_message ? : any , opt_file ? : any , opt_line ? : any ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class RangeException extends RangeException_Instance {
  }
  class RangeException_Instance {
    private noStructuralTyping_: any;
    BAD_BOUNDARYPOINTS_ERR : number ;
    INVALID_NODE_TYPE_ERR : number ;
    code : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ReadableByteStream extends ReadableByteStream_Instance {
  }
  class ReadableByteStream_Instance {
    private noStructuralTyping_: any;
    constructor (opt_underlyingSource ? : { cancel ? : (a : any ) => Promise < any > | undefined , pull ? : (a : ReadableStreamController ) => Promise < any > | undefined , start ? : (a : ReadableStreamController ) => Promise < any > | undefined } | null , opt_strategy ? : CountQueuingStrategy | ByteLengthQueuingStrategy | { highWaterMark : number , size ? : (a : any ) => number } ) ;
    cancel (reason : any ) : any ;
    getReader ( ) : ReadableByteStreamReader ;
    locked : boolean ;
    pipeThrough (transform : { readable : ReadableStream , writable : WritableStream } , opt_options ? : { preventAbort ? : boolean , preventCancel ? : boolean , preventClose ? : boolean } ) : ReadableByteStream ;
    pipeTo (dest : WritableStream , opt_options ? : { preventAbort ? : boolean , preventCancel ? : boolean , preventClose ? : boolean } ) : Promise < any > ;
    tee ( ) : ReadableByteStream [] ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ReadableByteStreamController extends ReadableByteStreamController_Instance {
  }
  class ReadableByteStreamController_Instance {
    private noStructuralTyping_: any;
    constructor (stream : ReadableByteStream ) ;
    close ( ) : void ;
    desiredSize : number ;
    error (e : any ) : any ;
    resolve (chunk : any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ReadableByteStreamReader extends ReadableByteStreamReader_Instance {
  }
  class ReadableByteStreamReader_Instance {
    private noStructuralTyping_: any;
    constructor (stream : ReadableByteStream ) ;
    cancel (reason : any ) : any ;
    closed : boolean ;
    read ( ) : Promise < { done : boolean , value ? : any } > ;
    releaseLock ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ReadableStream extends ReadableStream_Instance {
  }
  class ReadableStream_Instance {
    private noStructuralTyping_: any;
    constructor (opt_underlyingSource ? : { cancel ? : (a : any ) => Promise < any > | undefined , pull ? : (a : ReadableStreamController ) => Promise < any > | undefined , start ? : (a : ReadableStreamController ) => Promise < any > | undefined } | null , opt_strategy ? : CountQueuingStrategy | ByteLengthQueuingStrategy | { highWaterMark : number , size ? : (a : any ) => number } ) ;
    cancel (reason : any ) : any ;
    getReader ( ) : ReadableStreamReader ;
    locked : boolean ;
    pipeThrough (transform : { readable : ReadableStream , writable : WritableStream } , opt_options ? : { preventAbort ? : boolean , preventCancel ? : boolean , preventClose ? : boolean } ) : ReadableStream ;
    pipeTo (dest : WritableStream , opt_options ? : { preventAbort ? : boolean , preventCancel ? : boolean , preventClose ? : boolean } ) : Promise < any > ;
    tee ( ) : ReadableStream [] ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ReadableStreamController extends ReadableStreamController_Instance {
  }
  class ReadableStreamController_Instance {
    private noStructuralTyping_: any;
    constructor (stream : ReadableStream ) ;
    close ( ) : void ;
    desiredSize : number ;
    enqueue (chunk : any ) : any ;
    error (e : any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ReadableStreamReader extends ReadableStreamReader_Instance {
  }
  class ReadableStreamReader_Instance {
    private noStructuralTyping_: any;
    constructor (stream : ReadableStream ) ;
    cancel (reason : any ) : any ;
    closed : boolean ;
    read ( ) : Promise < { done : boolean , value ? : any } > ;
    releaseLock ( ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class RealtimeAnalyserNode extends RealtimeAnalyserNode_Instance {
  }
  class RealtimeAnalyserNode_Instance extends AudioNode_Instance {
    fftSize : number ;
    frequencyBinCount : number ;
    getByteFrequencyData (array : Uint8Array | null ) : any ;
    getByteTimeDomainData (array : Uint8Array | null ) : any ;
    getFloatFrequencyData (array : Float32Array | null ) : any ;
    maxDecibels : number ;
    minDecibels : number ;
    smoothingTimeConstant : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Rect extends Rect_Instance {
  }
  class Rect_Instance {
    private noStructuralTyping_: any;
    bottom : CSSPrimitiveValue | null ;
    left : CSSPrimitiveValue | null ;
    right : CSSPrimitiveValue | null ;
    top : CSSPrimitiveValue | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ReferenceError extends ReferenceError_Instance {
  }
  class ReferenceError_Instance extends GlobalError {
    constructor (opt_message ? : any , opt_file ? : any , opt_line ? : any ) ;
  }
}
declare namespace ಠ_ಠ.clutz.Reflect {
  function apply < THIS , RESULT > (target : ( ...a : any [] ) => RESULT , thisArg : THIS , argList : any [] ) : RESULT ;
}
declare namespace ಠ_ಠ.clutz.Reflect {
  function construct < TARGET > (target : { new ( ...a : any [] ) : any } , argList : any [] , opt_newTarget ? : { new ( ) : TARGET } ) : TARGET ;
}
declare namespace ಠ_ಠ.clutz.Reflect {
  function defineProperty (target : Object , propertyKey : string , attributes : Object ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Reflect {
  function deleteProperty (target : Object , propertyKey : string ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Reflect {
  function get (target : Object , propertyKey : string , opt_receiver ? : Object ) : any ;
}
declare namespace ಠ_ಠ.clutz.Reflect {
  function getOwnPropertyDescriptor (target : Object , propertyKey : string ) : ObjectPropertyDescriptor | null ;
}
declare namespace ಠ_ಠ.clutz.Reflect {
  function getPrototypeOf (target : Object ) : Object | null ;
}
declare namespace ಠ_ಠ.clutz.Reflect {
  function has (target : Object , propertyKey : any ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Reflect {
  function isExtensible (target : Object , propertyKey : any ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Reflect {
  function ownKeys (target : Object ) : any [] ;
}
declare namespace ಠ_ಠ.clutz.Reflect {
  function preventExtensions (target : Object ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Reflect {
  function set (target : Object , propertyKey : any , value : any , opt_receiver ? : Object ) : boolean ;
}
declare namespace ಠ_ಠ.clutz.Reflect {
  function setPrototypeOf (target : Object , proto : Object | null ) : boolean ;
}
declare namespace ಠ_ಠ.clutz {
  class RegExp extends RegExp_Instance {
    static $1 : string ;
    static $2 : string ;
    static $3 : string ;
    static $4 : string ;
    static $5 : string ;
    static $6 : string ;
    static $7 : string ;
    static $8 : string ;
    static $9 : string ;
    /**
     * The string against which the last regexp was matched.
     */
    static input : string ;
    /**
     * The last matched characters.
     */
    static lastMatch : string ;
    /**
     * The last matched parenthesized substring, if any.
     */
    static lastParen : string ;
    /**
     * The substring of the input up to the characters most recently matched.
     */
    static leftContext : string ;
    /**
     * The substring of the input after the characters most recently matched.
     */
    static rightContext : string ;
  }
  class RegExp_Instance {
    private noStructuralTyping_: any;
    constructor (opt_pattern ? : any , opt_flags ? : any ) ;
    compile (pattern : any , opt_flags ? : any ) : void ;
    exec (str : any ) : string [] | null ;
    /**
     * Whether to test the regular expression against all possible matches
     * in a string, or only against the first.
     */
    global : boolean ;
    /**
     * Whether to ignore case while attempting a match in a string.
     */
    ignoreCase : boolean ;
    /**
     * The index at which to start the next match.
     */
    lastIndex : number ;
    /**
     * Whether or not to search in strings across multiple lines.
     */
    multiline : boolean ;
    /**
     * The text of the pattern.
     */
    source : string ;
    test (str : any ) : boolean ;
    toString ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.RegExp {
  var $1 : string ;
}
declare namespace ಠ_ಠ.clutz.RegExp {
  var $2 : string ;
}
declare namespace ಠ_ಠ.clutz.RegExp {
  var $3 : string ;
}
declare namespace ಠ_ಠ.clutz.RegExp {
  var $4 : string ;
}
declare namespace ಠ_ಠ.clutz.RegExp {
  var $5 : string ;
}
declare namespace ಠ_ಠ.clutz.RegExp {
  var $6 : string ;
}
declare namespace ಠ_ಠ.clutz.RegExp {
  var $7 : string ;
}
declare namespace ಠ_ಠ.clutz.RegExp {
  var $8 : string ;
}
declare namespace ಠ_ಠ.clutz.RegExp {
  var $9 : string ;
}
declare namespace ಠ_ಠ.clutz.RegExp {
  /**
   * The string against which the last regexp was matched.
   */
  var input : string ;
}
declare namespace ಠ_ಠ.clutz.RegExp {
  /**
   * The last matched characters.
   */
  var lastMatch : string ;
}
declare namespace ಠ_ಠ.clutz.RegExp {
  /**
   * The last matched parenthesized substring, if any.
   */
  var lastParen : string ;
}
declare namespace ಠ_ಠ.clutz.RegExp {
  /**
   * The substring of the input up to the characters most recently matched.
   */
  var leftContext : string ;
}
declare namespace ಠ_ಠ.clutz.RegExp {
  /**
   * The substring of the input after the characters most recently matched.
   */
  var rightContext : string ;
}
declare namespace ಠ_ಠ.clutz {
  class RelatedEvent extends RelatedEvent_Instance {
  }
  class RelatedEvent_Instance extends GlobalEvent {
    constructor (type : string , opt_eventInitDict ? : { relatedTarget ? : EventTarget | null } ) ;
    relatedTarget : EventTarget | null | undefined ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Request extends Request_Instance {
  }
  class Request_Instance {
    private noStructuralTyping_: any;
    constructor (input : Request | string , opt_init ? : { body ? : Blob | FormData | string , cache ? : RequestCache , credentials ? : RequestCredentials , headers ? : Headers | string [] [] , method ? : string , mode ? : RequestMode } ) ;
    arrayBuffer ( ) : Promise < ArrayBuffer > ;
    blob ( ) : Promise < Blob > ;
    bodyUsed : boolean ;
    cache : RequestCache ;
    clone ( ) : Request ;
    context : RequestContext ;
    credentials : RequestCredentials ;
    formData ( ) : Promise < FormData > ;
    headers : Headers ;
    json ( ) : Promise < Object > ;
    method : string ;
    mode : RequestMode ;
    referrer : string ;
    text ( ) : Promise < string > ;
    url : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  type RequestCache = string ;
  var RequestCache : {
    DEFAULT : RequestCache ,
    FORCE_CACHE : RequestCache ,
    NO_CACHE : RequestCache ,
    NO_STORE : RequestCache ,
    ONLY_IF_CACHED : RequestCache ,
    RELOAD : RequestCache ,
  };
}
declare namespace ಠ_ಠ.clutz {
  type RequestContext = string ;
  var RequestContext : {
    AUDIO : RequestContext ,
    BEACON : RequestContext ,
    CSPREPORT : RequestContext ,
    DOWNLOAD : RequestContext ,
    EMBED : RequestContext ,
    EVENTSOURCE : RequestContext ,
    FAVICON : RequestContext ,
    FETCH : RequestContext ,
    FONT : RequestContext ,
    FORM : RequestContext ,
    FRAME : RequestContext ,
    HYPERLINK : RequestContext ,
    IFRAME : RequestContext ,
    IMAGE : RequestContext ,
    IMAGESET : RequestContext ,
    IMPORT : RequestContext ,
    INTERNAL : RequestContext ,
    LOCATION : RequestContext ,
    MANIFEST : RequestContext ,
    OBJECT : RequestContext ,
    PING : RequestContext ,
    PLUGIN : RequestContext ,
    PREFETCH : RequestContext ,
    SCRIPT : RequestContext ,
    SERVICEWORKER : RequestContext ,
    SHAREDWORKER : RequestContext ,
    STYLE : RequestContext ,
    SUBRESOURCE : RequestContext ,
    TRACK : RequestContext ,
    VIDEO : RequestContext ,
    WORKER : RequestContext ,
    XMLHTTPREQUEST : RequestContext ,
    XSLT : RequestContext ,
  };
}
declare namespace ಠ_ಠ.clutz {
  type RequestCredentials = string ;
  var RequestCredentials : {
    INCLUDE : RequestCredentials ,
    OMIT : RequestCredentials ,
    SAME_ORIGIN : RequestCredentials ,
  };
}
declare namespace ಠ_ಠ.clutz {
  type RequestMode = string ;
  var RequestMode : {
    CORS : RequestMode ,
    NO_CORS : RequestMode ,
    SAME_ORIGIN : RequestMode ,
  };
}
declare namespace ಠ_ಠ.clutz {
  class Response extends Response_Instance {
    static error ( ) : Response | null ;
    static redirect (url : string , opt_status ? : number ) : Response | null ;
  }
  class Response_Instance {
    private noStructuralTyping_: any;
    constructor (opt_body ? : Blob | FormData | string , opt_init ? : { headers : Headers | string [] [] , status : number , statusText : string } ) ;
    arrayBuffer ( ) : Promise < ArrayBuffer > ;
    blob ( ) : Promise < Blob > ;
    body : ReadableByteStream ;
    bodyUsed : boolean ;
    clone ( ) : Response ;
    formData ( ) : Promise < FormData > ;
    headers : Headers ;
    json ( ) : Promise < Object > ;
    ok : boolean ;
    status : number ;
    statusText : string ;
    text ( ) : Promise < string > ;
    type : ResponseType ;
    url : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  type ResponseType = string ;
  var ResponseType : {
    BASIC : ResponseType ,
    CORS : ResponseType ,
    DEFAULT : ResponseType ,
    ERROR : ResponseType ,
    OPAQUE : ResponseType ,
  };
}
declare namespace ಠ_ಠ.clutz {
  function RuntimeObject (opt_str ? : any ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  class SQLError extends SQLError_Instance {
  }
  class SQLError_Instance {
    private noStructuralTyping_: any;
    code : number ;
    message : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class SQLResultSet extends SQLResultSet_Instance {
  }
  class SQLResultSet_Instance {
    private noStructuralTyping_: any;
    insertId : number ;
    rows : SQLResultSetRowList | null ;
    rowsAffected : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class SQLResultSetRowList extends SQLResultSetRowList_Instance {
  }
  class SQLResultSetRowList_Instance implements IArrayLike < Object > {
    private noStructuralTyping_: any;
    [ key: number ]: Object ;
    item (index : number ) : Object | null ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class SQLTransaction extends SQLTransaction_Instance {
  }
  class SQLTransaction_Instance {
    private noStructuralTyping_: any;
    executeSql (sqlStatement : string , opt_queryArgs ? : ಠ_ಠ.clutz.goog.uri.utils.QueryArray | null , opt_callback ? : (a : SQLTransaction , b : SQLResultSet ) => undefined , opt_errorCallback ? : (a : SQLTransaction , b : SQLError ) => boolean | undefined ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Screen extends Screen_Instance {
  }
  class Screen_Instance {
    private noStructuralTyping_: any;
    availHeight : number ;
    availLeft : number ;
    availTop : number ;
    availWidth : number ;
    colorDepth : number ;
    deviceXDPI : number ;
    height : number ;
    left : number ;
    logicalXDPI : number ;
    logicalYDPI : number ;
    pixelDepth : number ;
    top : number ;
    width : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  function ScriptEngine ( ) : string ;
}
declare namespace ಠ_ಠ.clutz {
  function ScriptEngineBuildVersion ( ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  function ScriptEngineMajorVersion ( ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  function ScriptEngineMinorVersion ( ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  class ScriptProcessorNode extends ScriptProcessorNode_Instance {
  }
  class ScriptProcessorNode_Instance extends AudioNode_Instance {
    bufferSize : number ;
    onaudioprocess : EventListener | null | ( (a : AudioProcessingEvent ) => boolean | undefined ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ScriptProfile extends ScriptProfile_Instance {
  }
  class ScriptProfile_Instance {
    private noStructuralTyping_: any;
    head : ScriptProfileNode | null ;
    title : string ;
    uid : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ScriptProfileNode extends ScriptProfileNode_Instance {
  }
  class ScriptProfileNode_Instance {
    private noStructuralTyping_: any;
    callUID : number ;
    children : ( ScriptProfileNode | null ) [] | null ;
    functionName : string ;
    lineNumber : number ;
    numberOfCalls : number ;
    selfTime : number ;
    totalTime : number ;
    url : string ;
    visible : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Selection extends Selection_Instance {
  }
  class Selection_Instance {
    private noStructuralTyping_: any;
    addRange (range : Range | null ) : void ;
    anchorNode : Node | null ;
    anchorOffset : number ;
    baseNode : Node | null ;
    baseOffset : number ;
    clear ( ) : void ;
    collapse (node : Node | null , index : number ) : void ;
    collapseToEnd ( ) : void ;
    collapseToStart ( ) : void ;
    containsNode (node : Node | null , partlyContained : boolean ) : boolean ;
    createRange ( ) : TextRange | null | ControlRange ;
    createRangeCollection ( ) : ( TextRange | null ) [] | null ;
    deleteFromDocument ( ) : any ;
    empty ( ) : void ;
    extend (parentNode : Node | null , offset : number ) : any ;
    extentNode : Node | null ;
    extentOffset : number ;
    focusNode : Node | null ;
    focusOffset : number ;
    getRangeAt (index : number ) : Range | null ;
    isCollapsed : boolean ;
    modify (alter : string , direction : string , granularity : string ) : void ;
    rangeCount : number ;
    removeAllRanges ( ) : any ;
    removeRange (range : Range | null ) : any ;
    selectAllChildren (a : Node | null ) : any ;
    selectionLanguageChange : any ;
    setBaseAndExtent (baseNode : Node | null , baseOffset : number , extentNode : Node | null , extentOffset : number ) : void ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ServiceWorker extends ServiceWorker_Instance {
  }
  class ServiceWorker_Instance extends Worker_Instance {
    onstatechange : ( (a : GlobalEvent ) => any ) | null ;
    scriptURL : string ;
    state : ServiceWorkerState ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ServiceWorkerClient extends ServiceWorkerClient_Instance {
  }
  class ServiceWorkerClient_Instance {
    private noStructuralTyping_: any;
    focus ( ) : Promise < any > ;
    focused : boolean ;
    /**
     * // TODO(mtragut): Possibly replace the type with enum ContextFrameType once
     * the enum is defined.
     */
    frameType : string ;
    hidden : boolean ;
    postMessage (message : any , opt_transfer ? : Transferable [] ) : any ;
    ready : Promise < undefined > ;
    url : string ;
    visibilityState : VisibilityState ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface ServiceWorkerClients {
    claim ( ) : Promise < undefined > ;
    /**
     * Deprecated in Chrome M43+, use matchAll instead. Reference:
     * https://github.com/slightlyoff/ServiceWorker/issues/610.
     * TODO(joeltine): Remove when getAll is fully deprecated.
     */
    getAll (opt_options ? : { includeUncontrolled ? : boolean } ) : Promise < ServiceWorkerClient [] > ;
    matchAll (opt_options ? : { includeUncontrolled ? : boolean } ) : Promise < ServiceWorkerClient [] > ;
    openWindow (url : string ) : Promise < ServiceWorkerClient > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface ServiceWorkerContainer extends EventTarget {
    controller : ServiceWorker | null ;
    getRegistration (opt_documentURL ? : string ) : Promise < ServiceWorkerRegistration | undefined > ;
    getRegistrations ( ) : Promise < ServiceWorkerRegistration [] | null > ;
    oncontrollerchange : ( (a : GlobalEvent ) => any ) | null ;
    onerror : ( (a : ErrorEvent ) => any ) | null ;
    ready : Promise < ServiceWorkerRegistration > ;
    register (scriptURL : string , opt_options ? : { scope : string } ) : Promise < ServiceWorkerRegistration > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface ServiceWorkerGlobalScope extends WorkerGlobalScope {
    caches : CacheStorage ;
    clients : ServiceWorkerClients ;
    console : Console ;
    indexedDB : IDBFactory | null ;
    onactivate : ( (a : ExtendableEvent ) => any ) | null ;
    /**
     * TODO(mtragut): This handler should get a custom event in the future.
     */
    onbeforeevicted : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * TODO(mtragut): This handler should get a custom event in the future.
     */
    onevicted : ( (a : GlobalEvent ) => any ) | null ;
    onfetch : ( (a : FetchEvent ) => any ) | null ;
    oninstall : ( (a : InstallEvent ) => any ) | null ;
    onmessage : ( (a : MessageEvent < any > ) => any ) | null ;
    registration : ServiceWorkerRegistration ;
    scope : string ;
    scriptCache : Cache ;
    skipWaiting ( ) : Promise < undefined > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface ServiceWorkerRegistration extends EventTarget {
    active : ServiceWorker | null ;
    getNotifications (opt_filter ? : { tag ? : string } ) : Promise < ( Notification | null ) [] | null > ;
    installing : ServiceWorker | null ;
    onupdatefound : ( (a : GlobalEvent ) => any ) | null ;
    pushManager : PushManager ;
    scope : string ;
    showNotification (title : string , opt_options ? : { body ? : string , dir ? : string , icon ? : string , lang ? : string , requireInteraction ? : boolean , tag ? : string } ) : Promise < undefined > ;
    unregister ( ) : Promise < boolean > ;
    update ( ) : any ;
    waiting : ServiceWorker | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  type ServiceWorkerState = string ;
  var ServiceWorkerState : {
    ACTIVATED : ServiceWorkerState ,
    ACTIVATING : ServiceWorkerState ,
    INSTALLED : ServiceWorkerState ,
    INSTALLING : ServiceWorkerState ,
    REDUNDANT : ServiceWorkerState ,
  };
}
declare namespace ಠ_ಠ.clutz {
  class Set < VALUE > extends Set_Instance < VALUE > {
  }
  class Set_Instance < VALUE > implements Iterable < any > {
    private noStructuralTyping_: any;
    constructor (opt_iterable ? : Iterable < any > | null | VALUE [] ) ;
    add < THIS > (a : VALUE ) : THIS ;
    clear ( ) : void ;
    delete (a : VALUE ) : boolean ;
    entries ( ) : IteratorIterable < any > ;
    forEach < SET , THIS > (a : (a : VALUE , b : VALUE , c : SET ) => any , b ? : THIS ) : any ;
    has (a : VALUE ) : boolean ;
    keys ( ) : IteratorIterable < any > ;
    size : number ;
    values ( ) : IteratorIterable < any > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Definition of ShadowRoot interface,
   */
  class ShadowRoot extends ShadowRoot_Instance {
  }
  class ShadowRoot_Instance extends DocumentFragment_Instance {
    activeElement : Element | null ;
    applyAuthorStyles : boolean ;
    elementFromPoint (x : number , y : number ) : Element | null ;
    getElementById (id : string ) : HTMLElement | null ;
    getElementsByClassName (className : string ) : NodeList < any > ;
    getElementsByTagName (tagName : string ) : NodeList < any > ;
    getElementsByTagNameNS (namespace : string , localName : string ) : NodeList < any > ;
    getSelection ( ) : Selection | null ;
    /**
     * The host element that a ShadowRoot is attached to.
     * Note: this is not yet W3C standard but is undergoing development.
     * W3C feature tracking bug:
     * https://www.w3.org/Bugs/Public/show_bug.cgi?id=22399
     * Draft specification:
     * https://dvcs.w3.org/hg/webcomponents/raw-file/6743f1ace623/spec/shadow/index.html#shadow-root-object
     */
    host : Element ;
    innerHTML : string ;
    olderShadowRoot : ShadowRoot | null ;
    resetStyleInheritance : boolean ;
    styleSheets : StyleSheetList ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class SharedWorker extends SharedWorker_Instance {
  }
  class SharedWorker_Instance implements EventTarget {
    private noStructuralTyping_: any;
    constructor (scriptURL : string , opt_name ? : string ) ;
    addEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    dispatchEvent (evt : any ) : any ;
    /**
     * Called on network errors for loading the initial script.
     * TODO(tbreisacher): Should this change to function(!ErrorEvent)?
     */
    onerror : ( (a : GlobalEvent ) => any ) | null ;
    port : MessagePort ;
    removeEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface SharedWorkerGlobalScope extends WorkerGlobalScope {
    name : string ;
    /**
     * Sent when a connection to this worker is opened.
     */
    onconnect : ( (a : GlobalEvent ) => any ) | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class SourceBuffer extends SourceBuffer_Instance {
  }
  class SourceBuffer_Instance implements EventTarget {
    private noStructuralTyping_: any;
    /**
     * Abort the current segment append sequence.
     */
    abort ( ) : any ;
    addEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    append (data : Uint8Array | null ) : any ;
    appendBuffer (data : ArrayBuffer | null | ArrayBufferView ) : any ;
    appendMode : string ;
    appendWindowEnd : number ;
    appendWindowStart : number ;
    buffered : TimeRanges | null ;
    dispatchEvent (evt : any ) : any ;
    remove (start : number , end : number ) : any ;
    removeEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    timestampOffset : number ;
    updating : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface SourceInfo {
    facing : boolean ;
    id : string ;
    kind : string ;
    label : string | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class StereoPannerNode extends StereoPannerNode_Instance {
  }
  class StereoPannerNode_Instance extends AudioNode_Instance {
    pan : AudioParam ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface Storage {
    clear ( ) : void ;
    getItem (key : string ) : string | null ;
    key (index : number ) : string | null ;
    length : number ;
    removeItem (key : string ) : void ;
    setItem (key : string , data : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * This is the storage event interface.
   */
  class StorageEvent extends StorageEvent_Instance {
  }
  class StorageEvent_Instance extends GlobalEvent {
    initStorageEvent (typeArg : string , canBubbleArg : boolean , cancelableArg : boolean , keyArg : string , oldValueArg : string | null , newValueArg : string | null , urlArg : string , storageAreaArg : Storage | null ) : void ;
    key : string ;
    newValue : string | null ;
    oldValue : string | null ;
    storageArea : Storage | null ;
    url : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class StorageInfo extends StorageInfo_Instance {
  }
  class StorageInfo_Instance {
    private noStructuralTyping_: any;
    PERSISTENT : number ;
    TEMPORARY : number ;
    queryUsageAndQuota (type : number , successCallback : (a : number , b : number ) => any , errorCallback ? : (a : DOMException ) => any ) : any ;
    requestQuota (type : number , size : number , successCallback : (a : number ) => any , errorCallback ? : (a : DOMException ) => any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class StorageQuota extends StorageQuota_Instance {
  }
  class StorageQuota_Instance {
    private noStructuralTyping_: any;
    queryUsageAndQuota (successCallback : (a : number , b : number ) => any , opt_errorCallback ? : (a : DOMException ) => any ) : any ;
    requestQuota (size : number , opt_successCallback ? : (a : number ) => any , opt_errorCallback ? : (a : DOMException ) => any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class String extends String_Instance {
    static fromCharCode ( ...var_args : ( number | undefined ) [] ) : string ;
    static fromCodePoint (codePoint : number ,  ...var_args : ( number | undefined ) [] ) : string ;
    static raw (template : ITemplateArray ,  ...var_args : any [] ) : string ;
  }
  class String_Instance {
    private noStructuralTyping_: any;
    constructor (opt_str ? : any ) ;
    anchor ( ) : string ;
    big ( ) : string ;
    blink ( ) : string ;
    bold ( ) : string ;
    /**
     * Returns the specified character from a string.
     */
    charAt (index : number ) : string ;
    /**
     * Returns a number indicating the Unicode value of the character at the given
     * index.
     */
    charCodeAt (opt_index ? : number ) : number ;
    codePointAt (index : number ) : number ;
    /**
     * Combines the text of two or more strings and returns a new string.
     */
    concat ( ...var_args : any [] ) : string ;
    endsWith (searchString : string , opt_position ? : number ) : boolean ;
    fixed ( ) : string ;
    fontcolor (color : string ) : string ;
    fontsize (size : number ) : string ;
    includes (searchString : string , opt_position ? : number ) : boolean ;
    /**
     * Returns the index within the calling String object of the first occurrence
     * of the specified value, starting the search at fromIndex, returns -1 if the
     * value is not found.
     */
    indexOf (searchValue : string | null , opt_fromIndex ? : number | null ) : number ;
    italics ( ) : string ;
    /**
     * Returns the index within the calling String object of the last occurrence of
     * the specified value, or -1 if not found. The calling string is searched
     * backward, starting at fromIndex.
     */
    lastIndexOf (searchValue : string | null , opt_fromIndex ? : number | null ) : number ;
    length : number ;
    link (hrefAttribute : string ) : string ;
    /**
     * Returns a number indicating whether a reference string comes before or after
     * or is the same as the given string in sort order.
     */
    localeCompare (compareString : string | null , locales ? : string | string [] | null , options ? : Object | null ) : number ;
    /**
     * Used to retrieve the matches when matching a string against a regular
     * expression.
     */
    match (regexp : any ) : string [] | null ;
    normalize (opt_form ? : string ) : string ;
    quote ( ) : string ;
    /**
     * Repeats the string the given number of times.
     * @param count The number of times the string is repeated.
     */
    repeat (count : number ) : string ;
    /**
     * Finds a match between a regular expression and a string, and replaces the
     * matched substring with a new substring.
     *
     * This may have side-effects if the replacement function has side-effects.
     */
    replace (regex : RegExp | null | string , str : string | ( ( ...a : any [] ) => any ) | null , opt_flags ? : string ) : string ;
    /**
     * Executes the search for a match between a regular expression and this String
     * object.
     */
    search (regexp : RegExp | null | string ) : number ;
    slice (begin : number , opt_end ? : number ) : string ;
    small ( ) : string ;
    split (opt_separator ? : any , opt_limit ? : number ) : string [] ;
    startsWith (searchString : string , opt_position ? : number ) : boolean ;
    strike ( ) : string ;
    sub ( ) : string ;
    substr (start : number , opt_length ? : number ) : string ;
    substring (start : number , opt_end ? : number ) : string ;
    sup ( ) : string ;
    toLocaleLowerCase ( ) : string ;
    toLocaleUpperCase ( ) : string ;
    toLowerCase ( ) : string ;
    toSource ( ) : string ;
    toString ( ) : string ;
    toUpperCase ( ) : string ;
    trim ( ) : string ;
    trimLeft ( ) : string ;
    trimRight ( ) : string ;
    valueOf ( ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz.String {
  function fromCharCode ( ...var_args : ( number | undefined ) [] ) : string ;
}
declare namespace ಠ_ಠ.clutz.String {
  function fromCodePoint (codePoint : number ,  ...var_args : ( number | undefined ) [] ) : string ;
}
declare namespace ಠ_ಠ.clutz.String {
  function raw (template : ITemplateArray ,  ...var_args : any [] ) : string ;
}
declare namespace ಠ_ಠ.clutz {
  class StyleSheet extends StyleSheet_Instance {
  }
  class StyleSheet_Instance {
    private noStructuralTyping_: any;
    addImport (a : string , b : number ) : number ;
    addRule (a : string , b : string , c ? : number ) : number ;
    cssText : string ;
    disabled : boolean ;
    getExpression (a : string ) : string ;
    href : string ;
    id : string ;
    imports : StyleSheetList | null ;
    media : MediaList | null ;
    ownerNode : Node | null ;
    owningElement : Element | null ;
    parentStyleSheet : StyleSheet | null ;
    readOnly : boolean ;
    removeExpression (a : string ) : void ;
    removeImport (a : number ) : any ;
    removeRule (a : number ) : any ;
    rules : CSSRuleList | null ;
    setExpression (a : string , b : string ) : void ;
    title : string ;
    type : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class StyleSheetList extends StyleSheetList_Instance {
  }
  class StyleSheetList_Instance implements IArrayLike < StyleSheet > {
    private noStructuralTyping_: any;
    [ key: number ]: StyleSheet ;
    item (index : number ) : StyleSheet | null ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  function Symbol (description : string ) : any ;
}
declare namespace ಠ_ಠ.clutz.Symbol {
  function for (a : string ) : any | undefined ;
}
declare namespace ಠ_ಠ.clutz.Symbol {
  function keyFor (a : any ) : string | undefined ;
}
declare namespace ಠ_ಠ.clutz {
  class SyntaxError extends SyntaxError_Instance {
  }
  class SyntaxError_Instance extends GlobalError {
    constructor (opt_message ? : any , opt_file ? : any , opt_line ? : any ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Tab extends Tab_Instance {
  }
  class Tab_Instance {
    private noStructuralTyping_: any;
    active : boolean ;
    favIconUrl : string ;
    height : number | undefined ;
    highlighted : boolean ;
    id : number ;
    incognito : boolean ;
    index : number ;
    openerTabId : number ;
    pinned : boolean ;
    sessionId : string | undefined ;
    status : string ;
    title : string ;
    url : string ;
    width : number | undefined ;
    windowId : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Text extends Text_Instance {
  }
  class Text_Instance extends CharacterData_Instance {
    data : string ;
    getDestinationInsertionPoints ( ) : NodeList < any > ;
    replaceWholeText (newText : string ) : Text | null ;
    splitText (offset : number ) : Text | null ;
    wholeText : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class TextDecoder extends TextDecoder_Instance {
  }
  class TextDecoder_Instance {
    private noStructuralTyping_: any;
    constructor (encoding ? : string , options ? : Object | null ) ;
    decode (input ? : ArrayBuffer | ArrayBufferView , options ? : Object | null ) : string ;
    encoding : string ;
    fatal : boolean ;
    ignoreBOM : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class TextEncoder extends TextEncoder_Instance {
  }
  class TextEncoder_Instance {
    private noStructuralTyping_: any;
    constructor (utfLabel ? : string ) ;
    encode (input ? : string ) : Uint8Array ;
    encoding : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class TextMetrics extends TextMetrics_Instance {
  }
  class TextMetrics_Instance {
    private noStructuralTyping_: any;
    width : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class TextRange extends TextRange_Instance {
  }
  class TextRange_Instance {
    private noStructuralTyping_: any;
    text : any ;
    boundingHeight : any ;
    boundingLeft : any ;
    boundingTop : any ;
    boundingWidth : any ;
    collapse : any ;
    compareEndPoints : any ;
    duplicate : any ;
    execCommand : any ;
    expand : any ;
    findText : any ;
    getBookmark : any ;
    getBoundingClientRect : any ;
    getClientRects : any ;
    htmlText : any ;
    inRange : any ;
    isEqual : any ;
    move : any ;
    moveEnd : any ;
    moveStart : any ;
    moveToBookmark : any ;
    moveToElementText : any ;
    moveToPoint : any ;
    offsetLeft : any ;
    offsetTop : any ;
    parentElement : any ;
    pasteHTML : any ;
    queryCommandEnabled : any ;
    queryCommandIndeterm : any ;
    queryCommandState : any ;
    queryCommandSupported : any ;
    queryCommandValue : any ;
    scrollIntoView : any ;
    select : any ;
    setEndPoint : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class TextTrack extends TextTrack_Instance {
  }
  class TextTrack_Instance implements EventTarget {
    private noStructuralTyping_: any;
    activeCues : TextTrackCueList | null ;
    addCue (cue : TextTrackCue | null ) : any ;
    addEventListener (type : any , listener : any , useCapture : any ) : any ;
    cues : TextTrackCueList | null ;
    dispatchEvent (evt : any ) : any ;
    removeCue (cue : TextTrackCue | null ) : any ;
    removeEventListener (type : any , listener : any , useCapture : any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class TextTrackCue extends TextTrackCue_Instance {
  }
  class TextTrackCue_Instance {
    private noStructuralTyping_: any;
    constructor (startTime : number , endTime : number , text : string ) ;
    endTime : number ;
    id : string ;
    startTime : number ;
    text : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class TextTrackCueList extends TextTrackCueList_Instance {
  }
  class TextTrackCueList_Instance implements IArrayLike < TextTrackCue > {
    private noStructuralTyping_: any;
    [ key: number ]: TextTrackCue ;
    getCueById (id : string ) : TextTrackCue | null ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class TextTrackList extends TextTrackList_Instance {
  }
  class TextTrackList_Instance implements IArrayLike < TextTrack > {
    private noStructuralTyping_: any;
    [ key: number ]: TextTrack ;
    getTrackById (id : string ) : TextTrack | null ;
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class TimeRanges extends TimeRanges_Instance {
  }
  class TimeRanges_Instance {
    private noStructuralTyping_: any;
    end (index : number ) : number ;
    length : number ;
    start (index : number ) : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * The Touch class represents a single touch on the surface. A touch is the
   * presence or movement of a finger that is part of a unique multi-touch
   * sequence.
   */
  class Touch extends Touch_Instance {
  }
  class Touch_Instance {
    private noStructuralTyping_: any;
    /**
     * The Touch class represents a single touch on the surface. A touch is the
     * presence or movement of a finger that is part of a unique multi-touch
     * sequence.
     */
    constructor (touchInitDict : { clientX ? : number , clientY ? : number , force ? : number , identifier : number , pageX ? : number , pageY ? : number , radiusX ? : number , radiusY ? : number , rotationAngle ? : number , screenX ? : number , screenY ? : number , target : EventTarget } ) ;
    /**
     * The x-coordinate of the touch's location relative to the window's viewport.
     */
    clientX : number ;
    /**
     * The y-coordinate of the touch's location relative to the window's viewport.
     */
    clientY : number ;
    force : number ;
    /**
     * The unique identifier for this touch object.
     */
    identifier : number ;
    /**
     * The x-coordinate of the touch's location in page coordinates.
     */
    pageX : number ;
    /**
     * The y-coordinate of the touch's location in page coordinates.
     */
    pageY : number ;
    radiusX : number ;
    radiusY : number ;
    rotationAngle : number ;
    /**
     * The x-coordinate of the touch's location in screen coordinates.
     */
    screenX : number ;
    /**
     * The y-coordinate of the touch's location in screen coordinates.
     */
    screenY : number ;
    /**
     * The target of this touch.
     */
    target : EventTarget | null ;
    webkitForce : number ;
    webkitRadiusX : number ;
    webkitRadiusY : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * The TouchEvent class encapsulates information about a touch event.
   *
   * <p>The system continually sends TouchEvent objects to an application as
   * fingers touch and move across a surface. A touch event provides a snapshot of
   * all touches during a multi-touch sequence, most importantly the touches that
   * are new or have changed for a particular target. A multi-touch sequence
   * begins when a finger first touches the surface. Other fingers may
   * subsequently touch the surface, and all fingers may move across the surface.
   * The sequence ends when the last of these fingers is lifted from the surface.
   * An application receives touch event objects during each phase of any touch.
   * </p>
   *
   * <p>The different types of TouchEvent objects that can occur are:
   * <ul>
   * <li>touchstart - Sent when a finger for a given event touches the surface.
   * <li>touchmove - Sent when a given event moves on the surface.
   * <li>touchend - Sent when a given event lifts from the surface.
   * <li>touchcancel - Sent when the system cancels tracking for the touch.
   * </ul>
   * TouchEvent objects are combined together to form high-level GestureEvent
   * objects that are also sent during a multi-touch sequence.</p>
   */
  class TouchEvent extends TouchEvent_Instance {
  }
  class TouchEvent_Instance extends UIEvent_Instance {
    /**
     * The TouchEvent class encapsulates information about a touch event.
     *
     * <p>The system continually sends TouchEvent objects to an application as
     * fingers touch and move across a surface. A touch event provides a snapshot of
     * all touches during a multi-touch sequence, most importantly the touches that
     * are new or have changed for a particular target. A multi-touch sequence
     * begins when a finger first touches the surface. Other fingers may
     * subsequently touch the surface, and all fingers may move across the surface.
     * The sequence ends when the last of these fingers is lifted from the surface.
     * An application receives touch event objects during each phase of any touch.
     * </p>
     *
     * <p>The different types of TouchEvent objects that can occur are:
     * <ul>
     * <li>touchstart - Sent when a finger for a given event touches the surface.
     * <li>touchmove - Sent when a given event moves on the surface.
     * <li>touchend - Sent when a given event lifts from the surface.
     * <li>touchcancel - Sent when the system cancels tracking for the touch.
     * </ul>
     * TouchEvent objects are combined together to form high-level GestureEvent
     * objects that are also sent during a multi-touch sequence.</p>
     */
    constructor (type : string , opt_eventInitDict ? : { bubbles ? : boolean , cancelable ? : boolean , changedTouches ? : ( Touch | null ) [] , detail ? : number , relatedTarget ? : EventTarget | null , targetTouches ? : ( Touch | null ) [] , touches ? : ( Touch | null ) [] , view ? : Window | null } ) ;
    altKey : boolean ;
    /**
     * A collection of Touch objects representing all touches that changed in this event.
     */
    changedTouches : TouchList | null ;
    ctrlKey : boolean ;
    /**
     * Initializes a newly created TouchEvent object.
     */
    initTouchEvent (type : string , canBubble : boolean , cancelable : boolean , view : Window | null , detail : number , screenX : number , screenY : number , clientX : number , clientY : number , ctrlKey : boolean , altKey : boolean , shiftKey : boolean , metaKey : boolean , touches : TouchList | null , targetTouches : TouchList | null , changedTouches : TouchList | null , scale : number , rotation : number ) : any ;
    metaKey : boolean ;
    /**
     * The delta rotation since the start of an event, in degrees, where clockwise
     * is positive and counter-clockwise is negative. The initial value is 0.0.
     */
    rotation : number ;
    /**
     * The distance between two fingers since the start of an event as a multiplier
     * of the initial distance. The initial value is 1.0. If less than 1.0, the
     * gesture is pinch close (to zoom out). If greater than 1.0, the gesture is
     * pinch open (to zoom in).
     */
    scale : number ;
    shiftKey : boolean ;
    /**
     * A collection of Touch objects representing all touches associated with this
     * target.
     */
    targetTouches : TouchList | null ;
    /**
     * A collection of Touch objects representing all touches associated with this
     * target.
     */
    touches : TouchList | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * The TouchList class is used to represent a collection of Touch objects.
   */
  class TouchList extends TouchList_Instance {
  }
  class TouchList_Instance implements IArrayLike < Touch > {
    private noStructuralTyping_: any;
    [ key: number ]: Touch ;
    identifiedTouch (identifier : number ) : Touch | null ;
    /**
     * Returns the Touch object at the given index.
     */
    item (index : number ) : Touch | null ;
    /**
     * The number of Touch objects in this TouchList object.
     */
    length : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface Transferable {
  }
}
declare namespace ಠ_ಠ.clutz {
  interface TreeWalker {
    currentNode : Node | null ;
    expandEntityReference : boolean ;
    filter : NodeFilter | null ;
    firstChild ( ) : Node | null ;
    lastChild ( ) : Node | null ;
    nextNode ( ) : Node | null ;
    nextSibling ( ) : Node | null ;
    parentNode ( ) : Node | null ;
    previousNode ( ) : Node | null ;
    previousSibling ( ) : Node | null ;
    root : Node | null ;
    whatToShow : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class TypeError extends TypeError_Instance {
  }
  class TypeError_Instance extends GlobalError {
    constructor (opt_message ? : any , opt_file ? : any , opt_line ? : any ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class TypeInfo extends TypeInfo_Instance {
  }
  class TypeInfo_Instance {
    private noStructuralTyping_: any;
    DERIVATION_EXTENSION : number ;
    DERIVATION_LIST : number ;
    DERIVATION_RESTRICTION : number ;
    DERIVATION_UNION : number ;
    isDerivedFrom (typeNamespaceArg : string , typeNameArg : string , derivationMethod : number ) : boolean ;
    typeName : string ;
    typeNamespace : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class UIEvent extends UIEvent_Instance {
  }
  class UIEvent_Instance extends GlobalEvent {
    constructor (type : string , opt_eventInitDict ? : { bubbles ? : boolean , cancelable ? : boolean , detail ? : number , view ? : Window | null } ) ;
    detail : number ;
    initUIEvent : (typeArg : string , canBubbleArg : boolean , cancelableArg : boolean , viewArg : Window | null , detailArg : number ) => undefined ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class URIError extends URIError_Instance {
  }
  class URIError_Instance extends GlobalError {
    constructor (opt_message ? : any , opt_file ? : any , opt_line ? : any ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class URL extends URL_Instance {
    static createObjectURL (obj : Blob | MediaSource | MediaStream ) : string ;
    static domainToASCII (domain : string ) : string ;
    static domainToUnicode (domain : string ) : string ;
    static revokeObjectURL (url : string ) : any ;
  }
  class URL_Instance {
    private noStructuralTyping_: any;
    constructor (url : string , base ? : string ) ;
    hash : string ;
    host : string ;
    hostname : string ;
    href : string ;
    origin : string ;
    password : string ;
    pathname : string ;
    port : string ;
    protocol : string ;
    search : string ;
    searchParams : URLSearchParams | null ;
    username : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class URLSearchParams extends URLSearchParams_Instance {
  }
  class URLSearchParams_Instance {
    private noStructuralTyping_: any;
    constructor (init ? : string | URLSearchParams ) ;
    append (name : string , value : string ) : any ;
    delete (name : string ) : any ;
    get (name : string ) : string | null ;
    getAll (name : string ) : string [] ;
    has (name : string ) : boolean ;
    set (name : string , value : string ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Uint16Array extends Uint16Array_Instance {
    static BYTES_PER_ELEMENT : number ;
    static from < S > (source : number [] , opt_mapFn ? : (a : number ) => number , opt_this ? : S ) : Uint16Array ;
    static of ( ...var_args : ( number | undefined ) [] ) : Uint16Array ;
  }
  class Uint16Array_Instance extends ArrayBufferView_Instance implements ITypedArray {
    constructor (length : number | ArrayBufferView | null | number [] | ArrayBuffer , opt_byteOffset ? : number , opt_length ? : number ) ;
    [ key: number ]: number ;
    BYTES_PER_ELEMENT : number ;
    copyWithin (target : number , start : number , opt_end ? : number ) : any ;
    fill (value : number , opt_begin ? : number , opt_end ? : number ) : Uint16Array ;
    length : number ;
    set (array : ArrayBufferView | null | number [] , opt_offset ? : number ) : any ;
    subarray (begin : number , opt_end ? : number ) : Uint16Array ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Uint32Array extends Uint32Array_Instance {
    static BYTES_PER_ELEMENT : number ;
    static from < S > (source : number [] , opt_mapFn ? : (a : number ) => number , opt_this ? : S ) : Uint32Array ;
    static of ( ...var_args : ( number | undefined ) [] ) : Uint32Array ;
  }
  class Uint32Array_Instance extends ArrayBufferView_Instance implements ITypedArray {
    constructor (length : number | ArrayBufferView | null | number [] | ArrayBuffer , opt_byteOffset ? : number , opt_length ? : number ) ;
    [ key: number ]: number ;
    BYTES_PER_ELEMENT : number ;
    copyWithin (target : number , start : number , opt_end ? : number ) : any ;
    fill (value : number , opt_begin ? : number , opt_end ? : number ) : Uint32Array ;
    length : number ;
    set (array : ArrayBufferView | null | number [] , opt_offset ? : number ) : any ;
    subarray (begin : number , opt_end ? : number ) : Uint32Array ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Uint8Array extends Uint8Array_Instance {
    static BYTES_PER_ELEMENT : number ;
    static from < S > (source : number [] , opt_mapFn ? : (a : number ) => number , opt_this ? : S ) : Uint8Array ;
    static of ( ...var_args : ( number | undefined ) [] ) : Uint8Array ;
  }
  class Uint8Array_Instance extends ArrayBufferView_Instance implements ITypedArray {
    constructor (length : number | ArrayBufferView | null | number [] | ArrayBuffer , opt_byteOffset ? : number , opt_length ? : number ) ;
    [ key: number ]: number ;
    BYTES_PER_ELEMENT : number ;
    copyWithin (target : number , start : number , opt_end ? : number ) : any ;
    fill (value : number , opt_begin ? : number , opt_end ? : number ) : Uint8Array ;
    length : number ;
    set (array : ArrayBufferView | null | number [] , opt_offset ? : number ) : any ;
    subarray (begin : number , opt_end ? : number ) : Uint8Array ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Uint8ClampedArray extends Uint8ClampedArray_Instance {
    static BYTES_PER_ELEMENT : number ;
    static from < S > (source : number [] , opt_mapFn ? : (a : number ) => number , opt_this ? : S ) : Uint8ClampedArray ;
    static of ( ...var_args : ( number | undefined ) [] ) : Uint8ClampedArray ;
  }
  class Uint8ClampedArray_Instance extends ArrayBufferView_Instance implements ITypedArray {
    constructor (length : number | ArrayBufferView | null | number [] | ArrayBuffer , opt_byteOffset ? : number , opt_length ? : number ) ;
    [ key: number ]: number ;
    BYTES_PER_ELEMENT : number ;
    copyWithin (target : number , start : number , opt_end ? : number ) : any ;
    fill (value : number , opt_begin ? : number , opt_end ? : number ) : Uint8ClampedArray ;
    length : number ;
    set (array : ArrayBufferView | null | number [] , opt_offset ? : number ) : any ;
    subarray (begin : number , opt_end ? : number ) : Uint8ClampedArray ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class UserDataHandler extends UserDataHandler_Instance {
  }
  class UserDataHandler_Instance {
    private noStructuralTyping_: any;
    NODE_ADOPTED : number ;
    NODE_CLONED : number ;
    NODE_DELETED : number ;
    NODE_IMPORTED : number ;
    NODE_RENAMED : number ;
    handle (operation : number , key : string , opt_data ? : any , opt_src ? : Node | null , opt_dst ? : Node | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class UserMessageHandler extends UserMessageHandler_Instance {
  }
  class UserMessageHandler_Instance {
    private noStructuralTyping_: any;
    postMessage (message : any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class UserMessageHandlersNamespace extends UserMessageHandlersNamespace_Instance {
  }
  class UserMessageHandlersNamespace_Instance implements IObject < string , UserMessageHandler | null > {
    private noStructuralTyping_: any;
    [ key: string ]: UserMessageHandler | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class VTTCue extends VTTCue_Instance {
  }
  class VTTCue_Instance extends TextTrackCue_Instance {
    constructor (startTime : any , endTime : any , text : any ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ValidityState extends ValidityState_Instance {
  }
  class ValidityState_Instance {
    private noStructuralTyping_: any;
    badInput : boolean ;
    customError : boolean ;
    patternMismatch : boolean ;
    rangeOverflow : boolean ;
    rangeUnderflow : boolean ;
    stepMismatch : boolean ;
    tooLong : boolean ;
    tooShort : boolean ;
    typeMismatch : boolean ;
    valid : boolean ;
    valueMissing : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class ViewCSS extends ViewCSS_Instance {
  }
  class ViewCSS_Instance {
    private noStructuralTyping_: any;
    getComputedStyle (elt : Element | null , opt_pseudoElt ? : string | null ) : CSSStyleDeclaration | null ;
    getMatchedCSSRules (element : Element | null , pseudoElement : string , opt_authorOnly ? : boolean ) : CSSRuleList | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  type VisibilityState = string ;
  var VisibilityState : {
    HIDDEN : VisibilityState ,
    PRERENDER : VisibilityState ,
    UNLOADED : VisibilityState ,
    VISIBLE : VisibilityState ,
  };
}
declare namespace ಠ_ಠ.clutz {
  class WEBGL_compressed_texture_s3tc extends WEBGL_compressed_texture_s3tc_Instance {
  }
  class WEBGL_compressed_texture_s3tc_Instance {
    private noStructuralTyping_: any;
    COMPRESSED_RGBA_S3TC_DXT1_EXT : number ;
    COMPRESSED_RGBA_S3TC_DXT3_EXT : number ;
    COMPRESSED_RGBA_S3TC_DXT5_EXT : number ;
    COMPRESSED_RGB_S3TC_DXT1_EXT : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WEBGL_debug_renderer_info extends WEBGL_debug_renderer_info_Instance {
  }
  class WEBGL_debug_renderer_info_Instance {
    private noStructuralTyping_: any;
    UNMASKED_RENDERER_WEBGL : number ;
    UNMASKED_VENDOR_WEBGL : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WEBGL_debug_shaders extends WEBGL_debug_shaders_Instance {
  }
  class WEBGL_debug_shaders_Instance {
    private noStructuralTyping_: any;
    getTranslatedShaderSource (shader : WebGLShader | null ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WEBGL_draw_buffers extends WEBGL_draw_buffers_Instance {
  }
  class WEBGL_draw_buffers_Instance {
    private noStructuralTyping_: any;
    COLOR_ATTACHMENT0_WEBGL : number ;
    COLOR_ATTACHMENT10_WEBGL : number ;
    COLOR_ATTACHMENT11_WEBGL : number ;
    COLOR_ATTACHMENT12_WEBGL : number ;
    COLOR_ATTACHMENT13_WEBGL : number ;
    COLOR_ATTACHMENT14_WEBGL : number ;
    COLOR_ATTACHMENT15_WEBGL : number ;
    COLOR_ATTACHMENT1_WEBGL : number ;
    COLOR_ATTACHMENT2_WEBGL : number ;
    COLOR_ATTACHMENT3_WEBGL : number ;
    COLOR_ATTACHMENT4_WEBGL : number ;
    COLOR_ATTACHMENT5_WEBGL : number ;
    COLOR_ATTACHMENT6_WEBGL : number ;
    COLOR_ATTACHMENT7_WEBGL : number ;
    COLOR_ATTACHMENT8_WEBGL : number ;
    COLOR_ATTACHMENT9_WEBGL : number ;
    DRAW_BUFFER0_WEBGL : number ;
    DRAW_BUFFER10_WEBGL : number ;
    DRAW_BUFFER11_WEBGL : number ;
    DRAW_BUFFER12_WEBGL : number ;
    DRAW_BUFFER13_WEBGL : number ;
    DRAW_BUFFER14_WEBGL : number ;
    DRAW_BUFFER15_WEBGL : number ;
    DRAW_BUFFER1_WEBGL : number ;
    DRAW_BUFFER2_WEBGL : number ;
    DRAW_BUFFER3_WEBGL : number ;
    DRAW_BUFFER4_WEBGL : number ;
    DRAW_BUFFER5_WEBGL : number ;
    DRAW_BUFFER6_WEBGL : number ;
    DRAW_BUFFER7_WEBGL : number ;
    DRAW_BUFFER8_WEBGL : number ;
    DRAW_BUFFER9_WEBGL : number ;
    MAX_COLOR_ATTACHMENTS_WEBGL : number ;
    MAX_DRAW_BUFFERS_WEBGL : number ;
    drawBuffersWEBGL (buffers : number [] | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WEBGL_lose_context extends WEBGL_lose_context_Instance {
  }
  class WEBGL_lose_context_Instance {
    private noStructuralTyping_: any;
    loseContext ( ) : any ;
    restoreContext ( ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WaveShaperNode extends WaveShaperNode_Instance {
  }
  class WaveShaperNode_Instance extends AudioNode_Instance {
    curve : Float32Array | null ;
    oversample : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WaveTable extends WaveTable_Instance {
  }
  class WaveTable_Instance {
    private noStructuralTyping_: any;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WeakMap < KEY , VALUE > extends WeakMap_Instance < KEY , VALUE > {
  }
  class WeakMap_Instance < KEY , VALUE > {
    private noStructuralTyping_: any;
    constructor (opt_iterable ? : Iterable < any > | null | ( KEY | VALUE ) [] [] ) ;
    clear ( ) : void ;
    delete (a : KEY ) : boolean ;
    get (a : KEY ) : VALUE ;
    has (a : KEY ) : boolean ;
    set < THIS > (a : KEY , b : VALUE ) : THIS ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WeakSet < VALUE > extends WeakSet_Instance < VALUE > {
  }
  class WeakSet_Instance < VALUE > {
    private noStructuralTyping_: any;
    constructor (opt_iterable ? : Iterable < any > | null | VALUE [] ) ;
    add < THIS > (a : VALUE ) : THIS ;
    clear ( ) : void ;
    delete (a : VALUE ) : boolean ;
    has (a : VALUE ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLActiveInfo extends WebGLActiveInfo_Instance {
  }
  class WebGLActiveInfo_Instance {
    private noStructuralTyping_: any;
    name : string ;
    size : number ;
    type : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLBuffer extends WebGLBuffer_Instance {
  }
  class WebGLBuffer_Instance extends WebGLObject_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLContextAttributes extends WebGLContextAttributes_Instance {
  }
  class WebGLContextAttributes_Instance {
    private noStructuralTyping_: any;
    alpha : boolean ;
    antialias : boolean ;
    depth : boolean ;
    failIfMajorPerformanceCaveat : boolean ;
    preferLowPowerToHighPerformance : boolean ;
    premultipliedAlpha : boolean ;
    preserveDrawingBuffer : boolean ;
    stencil : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLContextEvent extends WebGLContextEvent_Instance {
  }
  class WebGLContextEvent_Instance extends GlobalEvent {
    constructor (eventType : string ) ;
    statusMessage : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLFramebuffer extends WebGLFramebuffer_Instance {
  }
  class WebGLFramebuffer_Instance extends WebGLObject_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLObject extends WebGLObject_Instance {
  }
  class WebGLObject_Instance {
    private noStructuralTyping_: any;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLProgram extends WebGLProgram_Instance {
  }
  class WebGLProgram_Instance extends WebGLObject_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLRenderbuffer extends WebGLRenderbuffer_Instance {
  }
  class WebGLRenderbuffer_Instance extends WebGLObject_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLRenderingContext extends WebGLRenderingContext_Instance {
    static ACTIVE_ATTRIBUTES : number ;
    static ACTIVE_TEXTURE : number ;
    static ACTIVE_UNIFORMS : number ;
    static ALIASED_LINE_WIDTH_RANGE : number ;
    static ALIASED_POINT_SIZE_RANGE : number ;
    static ALPHA : number ;
    static ALPHA_BITS : number ;
    static ALWAYS : number ;
    static ARRAY_BUFFER : number ;
    static ARRAY_BUFFER_BINDING : number ;
    static ATTACHED_SHADERS : number ;
    static BACK : number ;
    static BLEND : number ;
    static BLEND_COLOR : number ;
    static BLEND_DST_ALPHA : number ;
    static BLEND_DST_RGB : number ;
    static BLEND_EQUATION : number ;
    static BLEND_EQUATION_ALPHA : number ;
    static BLEND_EQUATION_RGB : number ;
    static BLEND_SRC_ALPHA : number ;
    static BLEND_SRC_RGB : number ;
    static BLUE_BITS : number ;
    static BOOL : number ;
    static BOOL_VEC2 : number ;
    static BOOL_VEC3 : number ;
    static BOOL_VEC4 : number ;
    static BROWSER_DEFAULT_WEBGL : number ;
    static BUFFER_SIZE : number ;
    static BUFFER_USAGE : number ;
    static BYTE : number ;
    static CCW : number ;
    static CLAMP_TO_EDGE : number ;
    static COLOR_ATTACHMENT0 : number ;
    static COLOR_BUFFER_BIT : number ;
    static COLOR_CLEAR_VALUE : number ;
    static COLOR_WRITEMASK : number ;
    static COMPILE_STATUS : number ;
    static COMPRESSED_TEXTURE_FORMATS : number ;
    static CONSTANT_ALPHA : number ;
    static CONSTANT_COLOR : number ;
    static CONTEXT_LOST_WEBGL : number ;
    static CULL_FACE : number ;
    static CULL_FACE_MODE : number ;
    static CURRENT_PROGRAM : number ;
    static CURRENT_VERTEX_ATTRIB : number ;
    static CW : number ;
    static DECR : number ;
    static DECR_WRAP : number ;
    static DELETE_STATUS : number ;
    static DEPTH_ATTACHMENT : number ;
    static DEPTH_BITS : number ;
    static DEPTH_BUFFER_BIT : number ;
    static DEPTH_CLEAR_VALUE : number ;
    static DEPTH_COMPONENT : number ;
    static DEPTH_COMPONENT16 : number ;
    static DEPTH_FUNC : number ;
    static DEPTH_RANGE : number ;
    static DEPTH_STENCIL : number ;
    static DEPTH_STENCIL_ATTACHMENT : number ;
    static DEPTH_TEST : number ;
    static DEPTH_WRITEMASK : number ;
    static DITHER : number ;
    static DONT_CARE : number ;
    static DST_ALPHA : number ;
    static DST_COLOR : number ;
    static DYNAMIC_DRAW : number ;
    static ELEMENT_ARRAY_BUFFER : number ;
    static ELEMENT_ARRAY_BUFFER_BINDING : number ;
    static EQUAL : number ;
    static FASTEST : number ;
    static FLOAT : number ;
    static FLOAT_MAT2 : number ;
    static FLOAT_MAT3 : number ;
    static FLOAT_MAT4 : number ;
    static FLOAT_VEC2 : number ;
    static FLOAT_VEC3 : number ;
    static FLOAT_VEC4 : number ;
    static FRAGMENT_SHADER : number ;
    static FRAMEBUFFER : number ;
    static FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : number ;
    static FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : number ;
    static FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : number ;
    static FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : number ;
    static FRAMEBUFFER_BINDING : number ;
    static FRAMEBUFFER_COMPLETE : number ;
    static FRAMEBUFFER_INCOMPLETE_ATTACHMENT : number ;
    static FRAMEBUFFER_INCOMPLETE_DIMENSIONS : number ;
    static FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : number ;
    static FRAMEBUFFER_UNSUPPORTED : number ;
    static FRONT : number ;
    static FRONT_AND_BACK : number ;
    static FRONT_FACE : number ;
    static FUNC_ADD : number ;
    static FUNC_REVERSE_SUBTRACT : number ;
    static FUNC_SUBTRACT : number ;
    static GENERATE_MIPMAP_HINT : number ;
    static GEQUAL : number ;
    static GREATER : number ;
    static GREEN_BITS : number ;
    static HIGH_FLOAT : number ;
    static HIGH_INT : number ;
    static INCR : number ;
    static INCR_WRAP : number ;
    static INT : number ;
    static INT_VEC2 : number ;
    static INT_VEC3 : number ;
    static INT_VEC4 : number ;
    static INVALID_ENUM : number ;
    static INVALID_FRAMEBUFFER_OPERATION : number ;
    static INVALID_OPERATION : number ;
    static INVALID_VALUE : number ;
    static INVERT : number ;
    static KEEP : number ;
    static LEQUAL : number ;
    static LESS : number ;
    static LINEAR : number ;
    static LINEAR_MIPMAP_LINEAR : number ;
    static LINEAR_MIPMAP_NEAREST : number ;
    static LINES : number ;
    static LINE_LOOP : number ;
    static LINE_STRIP : number ;
    static LINE_WIDTH : number ;
    static LINK_STATUS : number ;
    static LOW_FLOAT : number ;
    static LOW_INT : number ;
    static LUMINANCE : number ;
    static LUMINANCE_ALPHA : number ;
    static MAX_COMBINED_TEXTURE_IMAGE_UNITS : number ;
    static MAX_CUBE_MAP_TEXTURE_SIZE : number ;
    static MAX_FRAGMENT_UNIFORM_VECTORS : number ;
    static MAX_RENDERBUFFER_SIZE : number ;
    static MAX_TEXTURE_IMAGE_UNITS : number ;
    static MAX_TEXTURE_SIZE : number ;
    static MAX_VARYING_VECTORS : number ;
    static MAX_VERTEX_ATTRIBS : number ;
    static MAX_VERTEX_TEXTURE_IMAGE_UNITS : number ;
    static MAX_VERTEX_UNIFORM_VECTORS : number ;
    static MAX_VIEWPORT_DIMS : number ;
    static MEDIUM_FLOAT : number ;
    static MEDIUM_INT : number ;
    static MIRRORED_REPEAT : number ;
    static NEAREST : number ;
    static NEAREST_MIPMAP_LINEAR : number ;
    static NEAREST_MIPMAP_NEAREST : number ;
    static NEVER : number ;
    static NICEST : number ;
    static NONE : number ;
    static NOTEQUAL : number ;
    static NO_ERROR : number ;
    static ONE : number ;
    static ONE_MINUS_CONSTANT_ALPHA : number ;
    static ONE_MINUS_CONSTANT_COLOR : number ;
    static ONE_MINUS_DST_ALPHA : number ;
    static ONE_MINUS_DST_COLOR : number ;
    static ONE_MINUS_SRC_ALPHA : number ;
    static ONE_MINUS_SRC_COLOR : number ;
    static OUT_OF_MEMORY : number ;
    static PACK_ALIGNMENT : number ;
    static POINTS : number ;
    static POLYGON_OFFSET_FACTOR : number ;
    static POLYGON_OFFSET_FILL : number ;
    static POLYGON_OFFSET_UNITS : number ;
    static RED_BITS : number ;
    static RENDERBUFFER : number ;
    static RENDERBUFFER_ALPHA_SIZE : number ;
    static RENDERBUFFER_BINDING : number ;
    static RENDERBUFFER_BLUE_SIZE : number ;
    static RENDERBUFFER_DEPTH_SIZE : number ;
    static RENDERBUFFER_GREEN_SIZE : number ;
    static RENDERBUFFER_HEIGHT : number ;
    static RENDERBUFFER_INTERNAL_FORMAT : number ;
    static RENDERBUFFER_RED_SIZE : number ;
    static RENDERBUFFER_STENCIL_SIZE : number ;
    static RENDERBUFFER_WIDTH : number ;
    static RENDERER : number ;
    static REPEAT : number ;
    static REPLACE : number ;
    static RGB : number ;
    static RGB565 : number ;
    static RGB5_A1 : number ;
    static RGBA : number ;
    static RGBA4 : number ;
    static SAMPLER_2D : number ;
    static SAMPLER_CUBE : number ;
    static SAMPLES : number ;
    static SAMPLE_ALPHA_TO_COVERAGE : number ;
    static SAMPLE_BUFFERS : number ;
    static SAMPLE_COVERAGE : number ;
    static SAMPLE_COVERAGE_INVERT : number ;
    static SAMPLE_COVERAGE_VALUE : number ;
    static SCISSOR_BOX : number ;
    static SCISSOR_TEST : number ;
    static SHADER_TYPE : number ;
    static SHADING_LANGUAGE_VERSION : number ;
    static SHORT : number ;
    static SRC_ALPHA : number ;
    static SRC_ALPHA_SATURATE : number ;
    static SRC_COLOR : number ;
    static STATIC_DRAW : number ;
    static STENCIL_ATTACHMENT : number ;
    static STENCIL_BACK_FAIL : number ;
    static STENCIL_BACK_FUNC : number ;
    static STENCIL_BACK_PASS_DEPTH_FAIL : number ;
    static STENCIL_BACK_PASS_DEPTH_PASS : number ;
    static STENCIL_BACK_REF : number ;
    static STENCIL_BACK_VALUE_MASK : number ;
    static STENCIL_BACK_WRITEMASK : number ;
    static STENCIL_BITS : number ;
    static STENCIL_BUFFER_BIT : number ;
    static STENCIL_CLEAR_VALUE : number ;
    static STENCIL_FAIL : number ;
    static STENCIL_FUNC : number ;
    static STENCIL_INDEX : number ;
    static STENCIL_INDEX8 : number ;
    static STENCIL_PASS_DEPTH_FAIL : number ;
    static STENCIL_PASS_DEPTH_PASS : number ;
    static STENCIL_REF : number ;
    static STENCIL_TEST : number ;
    static STENCIL_VALUE_MASK : number ;
    static STENCIL_WRITEMASK : number ;
    static STREAM_DRAW : number ;
    static SUBPIXEL_BITS : number ;
    static TEXTURE : number ;
    static TEXTURE0 : number ;
    static TEXTURE1 : number ;
    static TEXTURE10 : number ;
    static TEXTURE11 : number ;
    static TEXTURE12 : number ;
    static TEXTURE13 : number ;
    static TEXTURE14 : number ;
    static TEXTURE15 : number ;
    static TEXTURE16 : number ;
    static TEXTURE17 : number ;
    static TEXTURE18 : number ;
    static TEXTURE19 : number ;
    static TEXTURE2 : number ;
    static TEXTURE20 : number ;
    static TEXTURE21 : number ;
    static TEXTURE22 : number ;
    static TEXTURE23 : number ;
    static TEXTURE24 : number ;
    static TEXTURE25 : number ;
    static TEXTURE26 : number ;
    static TEXTURE27 : number ;
    static TEXTURE28 : number ;
    static TEXTURE29 : number ;
    static TEXTURE3 : number ;
    static TEXTURE30 : number ;
    static TEXTURE31 : number ;
    static TEXTURE4 : number ;
    static TEXTURE5 : number ;
    static TEXTURE6 : number ;
    static TEXTURE7 : number ;
    static TEXTURE8 : number ;
    static TEXTURE9 : number ;
    static TEXTURE_2D : number ;
    static TEXTURE_BINDING_2D : number ;
    static TEXTURE_BINDING_CUBE_MAP : number ;
    static TEXTURE_CUBE_MAP : number ;
    static TEXTURE_CUBE_MAP_NEGATIVE_X : number ;
    static TEXTURE_CUBE_MAP_NEGATIVE_Y : number ;
    static TEXTURE_CUBE_MAP_NEGATIVE_Z : number ;
    static TEXTURE_CUBE_MAP_POSITIVE_X : number ;
    static TEXTURE_CUBE_MAP_POSITIVE_Y : number ;
    static TEXTURE_CUBE_MAP_POSITIVE_Z : number ;
    static TEXTURE_MAG_FILTER : number ;
    static TEXTURE_MIN_FILTER : number ;
    static TEXTURE_WRAP_S : number ;
    static TEXTURE_WRAP_T : number ;
    static TRIANGLES : number ;
    static TRIANGLE_FAN : number ;
    static TRIANGLE_STRIP : number ;
    static UNPACK_ALIGNMENT : number ;
    static UNPACK_COLORSPACE_CONVERSION_WEBGL : number ;
    static UNPACK_FLIP_Y_WEBGL : number ;
    static UNPACK_PREMULTIPLY_ALPHA_WEBGL : number ;
    static UNSIGNED_BYTE : number ;
    static UNSIGNED_INT : number ;
    static UNSIGNED_SHORT : number ;
    static UNSIGNED_SHORT_4_4_4_4 : number ;
    static UNSIGNED_SHORT_5_5_5_1 : number ;
    static UNSIGNED_SHORT_5_6_5 : number ;
    static VALIDATE_STATUS : number ;
    static VENDOR : number ;
    static VERSION : number ;
    static VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : number ;
    static VERTEX_ATTRIB_ARRAY_ENABLED : number ;
    static VERTEX_ATTRIB_ARRAY_NORMALIZED : number ;
    static VERTEX_ATTRIB_ARRAY_POINTER : number ;
    static VERTEX_ATTRIB_ARRAY_SIZE : number ;
    static VERTEX_ATTRIB_ARRAY_STRIDE : number ;
    static VERTEX_ATTRIB_ARRAY_TYPE : number ;
    static VERTEX_SHADER : number ;
    static VIEWPORT : number ;
    static ZERO : number ;
  }
  class WebGLRenderingContext_Instance {
    private noStructuralTyping_: any;
    ACTIVE_ATTRIBUTES : number ;
    ACTIVE_TEXTURE : number ;
    ACTIVE_UNIFORMS : number ;
    ALIASED_LINE_WIDTH_RANGE : number ;
    ALIASED_POINT_SIZE_RANGE : number ;
    ALPHA : number ;
    ALPHA_BITS : number ;
    ALWAYS : number ;
    ARRAY_BUFFER : number ;
    ARRAY_BUFFER_BINDING : number ;
    ATTACHED_SHADERS : number ;
    BACK : number ;
    BLEND : number ;
    BLEND_COLOR : number ;
    BLEND_DST_ALPHA : number ;
    BLEND_DST_RGB : number ;
    BLEND_EQUATION : number ;
    BLEND_EQUATION_ALPHA : number ;
    BLEND_EQUATION_RGB : number ;
    BLEND_SRC_ALPHA : number ;
    BLEND_SRC_RGB : number ;
    BLUE_BITS : number ;
    BOOL : number ;
    BOOL_VEC2 : number ;
    BOOL_VEC3 : number ;
    BOOL_VEC4 : number ;
    BROWSER_DEFAULT_WEBGL : number ;
    BUFFER_SIZE : number ;
    BUFFER_USAGE : number ;
    BYTE : number ;
    CCW : number ;
    CLAMP_TO_EDGE : number ;
    COLOR_ATTACHMENT0 : number ;
    COLOR_BUFFER_BIT : number ;
    COLOR_CLEAR_VALUE : number ;
    COLOR_WRITEMASK : number ;
    COMPILE_STATUS : number ;
    COMPRESSED_TEXTURE_FORMATS : number ;
    CONSTANT_ALPHA : number ;
    CONSTANT_COLOR : number ;
    CONTEXT_LOST_WEBGL : number ;
    CULL_FACE : number ;
    CULL_FACE_MODE : number ;
    CURRENT_PROGRAM : number ;
    CURRENT_VERTEX_ATTRIB : number ;
    CW : number ;
    DECR : number ;
    DECR_WRAP : number ;
    DELETE_STATUS : number ;
    DEPTH_ATTACHMENT : number ;
    DEPTH_BITS : number ;
    DEPTH_BUFFER_BIT : number ;
    DEPTH_CLEAR_VALUE : number ;
    DEPTH_COMPONENT : number ;
    DEPTH_COMPONENT16 : number ;
    DEPTH_FUNC : number ;
    DEPTH_RANGE : number ;
    DEPTH_STENCIL : number ;
    DEPTH_STENCIL_ATTACHMENT : number ;
    DEPTH_TEST : number ;
    DEPTH_WRITEMASK : number ;
    DITHER : number ;
    DONT_CARE : number ;
    DST_ALPHA : number ;
    DST_COLOR : number ;
    DYNAMIC_DRAW : number ;
    ELEMENT_ARRAY_BUFFER : number ;
    ELEMENT_ARRAY_BUFFER_BINDING : number ;
    EQUAL : number ;
    FASTEST : number ;
    FLOAT : number ;
    FLOAT_MAT2 : number ;
    FLOAT_MAT3 : number ;
    FLOAT_MAT4 : number ;
    FLOAT_VEC2 : number ;
    FLOAT_VEC3 : number ;
    FLOAT_VEC4 : number ;
    FRAGMENT_SHADER : number ;
    FRAMEBUFFER : number ;
    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : number ;
    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : number ;
    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : number ;
    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : number ;
    FRAMEBUFFER_BINDING : number ;
    FRAMEBUFFER_COMPLETE : number ;
    FRAMEBUFFER_INCOMPLETE_ATTACHMENT : number ;
    FRAMEBUFFER_INCOMPLETE_DIMENSIONS : number ;
    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : number ;
    FRAMEBUFFER_UNSUPPORTED : number ;
    FRONT : number ;
    FRONT_AND_BACK : number ;
    FRONT_FACE : number ;
    FUNC_ADD : number ;
    FUNC_REVERSE_SUBTRACT : number ;
    FUNC_SUBTRACT : number ;
    GENERATE_MIPMAP_HINT : number ;
    GEQUAL : number ;
    GREATER : number ;
    GREEN_BITS : number ;
    HIGH_FLOAT : number ;
    HIGH_INT : number ;
    INCR : number ;
    INCR_WRAP : number ;
    INT : number ;
    INT_VEC2 : number ;
    INT_VEC3 : number ;
    INT_VEC4 : number ;
    INVALID_ENUM : number ;
    INVALID_FRAMEBUFFER_OPERATION : number ;
    INVALID_OPERATION : number ;
    INVALID_VALUE : number ;
    INVERT : number ;
    KEEP : number ;
    LEQUAL : number ;
    LESS : number ;
    LINEAR : number ;
    LINEAR_MIPMAP_LINEAR : number ;
    LINEAR_MIPMAP_NEAREST : number ;
    LINES : number ;
    LINE_LOOP : number ;
    LINE_STRIP : number ;
    LINE_WIDTH : number ;
    LINK_STATUS : number ;
    LOW_FLOAT : number ;
    LOW_INT : number ;
    LUMINANCE : number ;
    LUMINANCE_ALPHA : number ;
    MAX_COMBINED_TEXTURE_IMAGE_UNITS : number ;
    MAX_CUBE_MAP_TEXTURE_SIZE : number ;
    MAX_FRAGMENT_UNIFORM_VECTORS : number ;
    MAX_RENDERBUFFER_SIZE : number ;
    MAX_TEXTURE_IMAGE_UNITS : number ;
    MAX_TEXTURE_SIZE : number ;
    MAX_VARYING_VECTORS : number ;
    MAX_VERTEX_ATTRIBS : number ;
    MAX_VERTEX_TEXTURE_IMAGE_UNITS : number ;
    MAX_VERTEX_UNIFORM_VECTORS : number ;
    MAX_VIEWPORT_DIMS : number ;
    MEDIUM_FLOAT : number ;
    MEDIUM_INT : number ;
    MIRRORED_REPEAT : number ;
    NEAREST : number ;
    NEAREST_MIPMAP_LINEAR : number ;
    NEAREST_MIPMAP_NEAREST : number ;
    NEVER : number ;
    NICEST : number ;
    NONE : number ;
    NOTEQUAL : number ;
    NO_ERROR : number ;
    ONE : number ;
    ONE_MINUS_CONSTANT_ALPHA : number ;
    ONE_MINUS_CONSTANT_COLOR : number ;
    ONE_MINUS_DST_ALPHA : number ;
    ONE_MINUS_DST_COLOR : number ;
    ONE_MINUS_SRC_ALPHA : number ;
    ONE_MINUS_SRC_COLOR : number ;
    OUT_OF_MEMORY : number ;
    PACK_ALIGNMENT : number ;
    POINTS : number ;
    POLYGON_OFFSET_FACTOR : number ;
    POLYGON_OFFSET_FILL : number ;
    POLYGON_OFFSET_UNITS : number ;
    RED_BITS : number ;
    RENDERBUFFER : number ;
    RENDERBUFFER_ALPHA_SIZE : number ;
    RENDERBUFFER_BINDING : number ;
    RENDERBUFFER_BLUE_SIZE : number ;
    RENDERBUFFER_DEPTH_SIZE : number ;
    RENDERBUFFER_GREEN_SIZE : number ;
    RENDERBUFFER_HEIGHT : number ;
    RENDERBUFFER_INTERNAL_FORMAT : number ;
    RENDERBUFFER_RED_SIZE : number ;
    RENDERBUFFER_STENCIL_SIZE : number ;
    RENDERBUFFER_WIDTH : number ;
    RENDERER : number ;
    REPEAT : number ;
    REPLACE : number ;
    RGB : number ;
    RGB565 : number ;
    RGB5_A1 : number ;
    RGBA : number ;
    RGBA4 : number ;
    SAMPLER_2D : number ;
    SAMPLER_CUBE : number ;
    SAMPLES : number ;
    SAMPLE_ALPHA_TO_COVERAGE : number ;
    SAMPLE_BUFFERS : number ;
    SAMPLE_COVERAGE : number ;
    SAMPLE_COVERAGE_INVERT : number ;
    SAMPLE_COVERAGE_VALUE : number ;
    SCISSOR_BOX : number ;
    SCISSOR_TEST : number ;
    SHADER_TYPE : number ;
    SHADING_LANGUAGE_VERSION : number ;
    SHORT : number ;
    SRC_ALPHA : number ;
    SRC_ALPHA_SATURATE : number ;
    SRC_COLOR : number ;
    STATIC_DRAW : number ;
    STENCIL_ATTACHMENT : number ;
    STENCIL_BACK_FAIL : number ;
    STENCIL_BACK_FUNC : number ;
    STENCIL_BACK_PASS_DEPTH_FAIL : number ;
    STENCIL_BACK_PASS_DEPTH_PASS : number ;
    STENCIL_BACK_REF : number ;
    STENCIL_BACK_VALUE_MASK : number ;
    STENCIL_BACK_WRITEMASK : number ;
    STENCIL_BITS : number ;
    STENCIL_BUFFER_BIT : number ;
    STENCIL_CLEAR_VALUE : number ;
    STENCIL_FAIL : number ;
    STENCIL_FUNC : number ;
    STENCIL_INDEX : number ;
    STENCIL_INDEX8 : number ;
    STENCIL_PASS_DEPTH_FAIL : number ;
    STENCIL_PASS_DEPTH_PASS : number ;
    STENCIL_REF : number ;
    STENCIL_TEST : number ;
    STENCIL_VALUE_MASK : number ;
    STENCIL_WRITEMASK : number ;
    STREAM_DRAW : number ;
    SUBPIXEL_BITS : number ;
    TEXTURE : number ;
    TEXTURE0 : number ;
    TEXTURE1 : number ;
    TEXTURE10 : number ;
    TEXTURE11 : number ;
    TEXTURE12 : number ;
    TEXTURE13 : number ;
    TEXTURE14 : number ;
    TEXTURE15 : number ;
    TEXTURE16 : number ;
    TEXTURE17 : number ;
    TEXTURE18 : number ;
    TEXTURE19 : number ;
    TEXTURE2 : number ;
    TEXTURE20 : number ;
    TEXTURE21 : number ;
    TEXTURE22 : number ;
    TEXTURE23 : number ;
    TEXTURE24 : number ;
    TEXTURE25 : number ;
    TEXTURE26 : number ;
    TEXTURE27 : number ;
    TEXTURE28 : number ;
    TEXTURE29 : number ;
    TEXTURE3 : number ;
    TEXTURE30 : number ;
    TEXTURE31 : number ;
    TEXTURE4 : number ;
    TEXTURE5 : number ;
    TEXTURE6 : number ;
    TEXTURE7 : number ;
    TEXTURE8 : number ;
    TEXTURE9 : number ;
    TEXTURE_2D : number ;
    TEXTURE_BINDING_2D : number ;
    TEXTURE_BINDING_CUBE_MAP : number ;
    TEXTURE_CUBE_MAP : number ;
    TEXTURE_CUBE_MAP_NEGATIVE_X : number ;
    TEXTURE_CUBE_MAP_NEGATIVE_Y : number ;
    TEXTURE_CUBE_MAP_NEGATIVE_Z : number ;
    TEXTURE_CUBE_MAP_POSITIVE_X : number ;
    TEXTURE_CUBE_MAP_POSITIVE_Y : number ;
    TEXTURE_CUBE_MAP_POSITIVE_Z : number ;
    TEXTURE_MAG_FILTER : number ;
    TEXTURE_MIN_FILTER : number ;
    TEXTURE_WRAP_S : number ;
    TEXTURE_WRAP_T : number ;
    TRIANGLES : number ;
    TRIANGLE_FAN : number ;
    TRIANGLE_STRIP : number ;
    UNPACK_ALIGNMENT : number ;
    UNPACK_COLORSPACE_CONVERSION_WEBGL : number ;
    UNPACK_FLIP_Y_WEBGL : number ;
    UNPACK_PREMULTIPLY_ALPHA_WEBGL : number ;
    UNSIGNED_BYTE : number ;
    UNSIGNED_INT : number ;
    UNSIGNED_SHORT : number ;
    UNSIGNED_SHORT_4_4_4_4 : number ;
    UNSIGNED_SHORT_5_5_5_1 : number ;
    UNSIGNED_SHORT_5_6_5 : number ;
    VALIDATE_STATUS : number ;
    VENDOR : number ;
    VERSION : number ;
    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : number ;
    VERTEX_ATTRIB_ARRAY_ENABLED : number ;
    VERTEX_ATTRIB_ARRAY_NORMALIZED : number ;
    VERTEX_ATTRIB_ARRAY_POINTER : number ;
    VERTEX_ATTRIB_ARRAY_SIZE : number ;
    VERTEX_ATTRIB_ARRAY_STRIDE : number ;
    VERTEX_ATTRIB_ARRAY_TYPE : number ;
    VERTEX_SHADER : number ;
    VIEWPORT : number ;
    ZERO : number ;
    activeTexture (texture : number ) : any ;
    attachShader (program : WebGLProgram | null , shader : WebGLShader | null ) : any ;
    bindAttribLocation (program : WebGLProgram | null , index : number , name : string ) : any ;
    bindBuffer (target : number , buffer : WebGLBuffer | null ) : any ;
    bindFramebuffer (target : number , buffer : WebGLFramebuffer | null ) : any ;
    bindRenderbuffer (target : number , buffer : WebGLRenderbuffer | null ) : any ;
    bindTexture (target : number , texture : WebGLTexture | null ) : any ;
    blendColor (red : number , green : number , blue : number , alpha : number ) : any ;
    blendEquation (mode : number ) : any ;
    blendEquationSeparate (modeRGB : number , modeAlpha : number ) : any ;
    blendFunc (sfactor : number , dfactor : number ) : any ;
    blendFuncSeparate (srcRGB : number , dstRGB : number , srcAlpha : number , dstAlpha : number ) : any ;
    bufferData (target : number , data : ArrayBufferView | null | ArrayBuffer | number , usage : number ) : any ;
    bufferSubData (target : number , offset : number , data : ArrayBufferView | null | ArrayBuffer ) : any ;
    canvas : HTMLCanvasElement ;
    checkFramebufferStatus (target : number ) : number ;
    clear (mask : number ) : any ;
    clearColor (red : number , green : number , blue : number , alpha : number ) : any ;
    clearDepth (depth : number ) : any ;
    clearStencil (s : number ) : any ;
    colorMask (red : boolean , green : boolean , blue : boolean , alpha : boolean ) : any ;
    compileShader (shader : WebGLShader | null ) : any ;
    compressedTexImage2D (target : number , level : number , internalformat : number , width : number , height : number , border : number , data : ArrayBufferView | null ) : any ;
    compressedTexSubImage2D (target : number , level : number , xoffset : number , yoffset : number , width : number , height : number , format : number , data : ArrayBufferView | null ) : any ;
    copyTexImage2D (target : number , level : number , format : number , x : number , y : number , width : number , height : number , border : number ) : any ;
    copyTexSubImage2D (target : number , level : number , xoffset : number , yoffset : number , x : number , y : number , width : number , height : number ) : any ;
    createBuffer ( ) : WebGLBuffer ;
    createFramebuffer ( ) : WebGLFramebuffer ;
    createProgram ( ) : WebGLProgram ;
    createRenderbuffer ( ) : WebGLRenderbuffer ;
    createShader (type : number ) : WebGLShader ;
    createTexture ( ) : WebGLTexture ;
    cullFace (mode : number ) : any ;
    deleteBuffer (buffer : WebGLBuffer | null ) : any ;
    deleteFramebuffer (buffer : WebGLFramebuffer | null ) : any ;
    deleteProgram (program : WebGLProgram | null ) : any ;
    deleteRenderbuffer (buffer : WebGLRenderbuffer | null ) : any ;
    deleteShader (shader : WebGLShader | null ) : any ;
    deleteTexture (texture : WebGLTexture | null ) : any ;
    depthFunc (func : number ) : any ;
    depthMask (flag : boolean ) : any ;
    depthRange (nearVal : number , farVal : number ) : any ;
    detachShader (program : WebGLProgram | null , shader : WebGLShader | null ) : any ;
    disable (flags : number ) : any ;
    disableVertexAttribArray (index : number ) : any ;
    drawArrays (mode : number , first : number , count : number ) : any ;
    drawElements (mode : number , count : number , type : number , offset : number ) : any ;
    drawingBufferHeight : number ;
    drawingBufferWidth : number ;
    enable (cap : number ) : any ;
    enableVertexAttribArray (index : number ) : any ;
    finish ( ) : any ;
    flush ( ) : any ;
    framebufferRenderbuffer (target : number , attachment : number , renderbuffertarget : number , renderbuffer : WebGLRenderbuffer | null ) : any ;
    framebufferTexture2D (target : number , attachment : number , textarget : number , texture : WebGLTexture | null , level : number ) : any ;
    frontFace (mode : number ) : any ;
    generateMipmap (target : number ) : any ;
    getActiveAttrib (program : WebGLProgram | null , index : number ) : WebGLActiveInfo | null ;
    getActiveUniform (program : WebGLProgram | null , index : number ) : WebGLActiveInfo | null ;
    getAttachedShaders (program : WebGLProgram | null ) : ( WebGLShader | null ) [] ;
    getAttribLocation (program : WebGLProgram | null , name : string ) : number ;
    getBufferParameter (target : number , pname : number ) : any ;
    getContextAttributes ( ) : WebGLContextAttributes ;
    getError ( ) : number ;
    /**
     * Note that this has side effects by enabling the extension even if the
     * result is not used.
     */
    getExtension (name : string ) : Object | null ;
    getFramebufferAttachmentParameter (target : number , attachment : number , pname : number ) : any ;
    getParameter (pname : number ) : any ;
    getProgramInfoLog (program : WebGLProgram | null ) : string ;
    getProgramParameter (program : WebGLProgram | null , pname : number ) : any ;
    getRenderbufferParameter (target : number , pname : number ) : any ;
    getShaderInfoLog (shader : WebGLShader | null ) : string ;
    getShaderParameter (shader : WebGLShader | null , pname : number ) : any ;
    getShaderPrecisionFormat (shadertype : number , precisiontype : number ) : WebGLShaderPrecisionFormat | null ;
    getShaderSource (shader : WebGLShader | null ) : string ;
    getSupportedExtensions ( ) : string [] ;
    getTexParameter (target : number , pname : number ) : any ;
    getUniform (program : WebGLProgram | null , location : WebGLUniformLocation | null ) : any ;
    getUniformLocation (program : WebGLProgram | null , name : string ) : WebGLUniformLocation | null ;
    getVertexAttrib (index : number , pname : number ) : any ;
    getVertexAttribOffset (index : number , pname : number ) : number ;
    hint (target : number , mode : number ) : any ;
    isBuffer (buffer : WebGLObject | null ) : boolean ;
    isContextLost ( ) : boolean ;
    isEnabled (cap : number ) : boolean ;
    isFramebuffer (framebuffer : WebGLObject | null ) : boolean ;
    isProgram (program : WebGLObject | null ) : boolean ;
    isRenderbuffer (renderbuffer : WebGLObject | null ) : boolean ;
    isShader (shader : WebGLObject | null ) : boolean ;
    isTexture (texture : WebGLObject | null ) : boolean ;
    lineWidth (width : number ) : any ;
    linkProgram (program : WebGLProgram | null ) : any ;
    pixelStorei (pname : number , param : number ) : any ;
    polygonOffset (factor : number , units : number ) : any ;
    readPixels (x : number , y : number , width : number , height : number , format : number , type : number , pixels : ArrayBufferView | null ) : any ;
    renderbufferStorage (target : number , internalformat : number , width : number , height : number ) : any ;
    sampleCoverage (coverage : number , invert : boolean ) : any ;
    scissor (x : number , y : number , width : number , height : number ) : any ;
    shaderSource (shader : WebGLShader | null , source : string ) : any ;
    stencilFunc (func : number , ref : number , mask : number ) : any ;
    stencilFuncSeparate (face : number , func : number , ref : number , mask : number ) : any ;
    stencilMask (mask : number ) : any ;
    stencilMaskSeparate (face : number , mask : number ) : any ;
    stencilOp (fail : number , zfail : number , zpass : number ) : any ;
    stencilOpSeparate (face : number , fail : number , zfail : number , zpass : number ) : any ;
    texImage2D (target : number , level : number , internalformat : number , format : number , type : number , img : ImageData | null | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | number , opt_format ? : number , opt_type ? : number , opt_pixels ? : ArrayBufferView | null ) : any ;
    texParameterf (target : number , pname : number , param : number ) : any ;
    texParameteri (target : number , pname : number , param : number ) : any ;
    texSubImage2D (target : number , level : number , xoffset : number , yoffset : number , format : number , type : number , data : ImageData | null | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | number , opt_type ? : number , opt_pixels ? : ArrayBufferView | null ) : any ;
    uniform1f (location : WebGLUniformLocation | null , value : number ) : any ;
    uniform1fv (location : WebGLUniformLocation | null , value : Float32Array | null | number [] ) : any ;
    uniform1i (location : WebGLUniformLocation | null , value : number | boolean ) : any ;
    uniform1iv (location : WebGLUniformLocation | null , value : Int32Array | null | any [] ) : any ;
    uniform2f (location : WebGLUniformLocation | null , value1 : number , value2 : number ) : any ;
    uniform2fv (location : WebGLUniformLocation | null , value : Float32Array | null | number [] ) : any ;
    uniform2i (location : WebGLUniformLocation | null , value1 : number | boolean , value2 : number | boolean ) : any ;
    uniform2iv (location : WebGLUniformLocation | null , value : Int32Array | null | any [] ) : any ;
    uniform3f (location : WebGLUniformLocation | null , value1 : number , value2 : number , value3 : number ) : any ;
    uniform3fv (location : WebGLUniformLocation | null , value : Float32Array | null | number [] ) : any ;
    uniform3i (location : WebGLUniformLocation | null , value1 : number | boolean , value2 : number | boolean , value3 : number | boolean ) : any ;
    uniform3iv (location : WebGLUniformLocation | null , value : Int32Array | null | any [] ) : any ;
    uniform4f (location : WebGLUniformLocation | null , value1 : number , value2 : number , value3 : number , value4 : number ) : any ;
    uniform4fv (location : WebGLUniformLocation | null , value : Float32Array | null | number [] ) : any ;
    uniform4i (location : WebGLUniformLocation | null , value1 : number | boolean , value2 : number | boolean , value3 : number | boolean , value4 : number | boolean ) : any ;
    uniform4iv (location : WebGLUniformLocation | null , value : Int32Array | null | any [] ) : any ;
    uniformMatrix2fv (location : WebGLUniformLocation | null , transpose : boolean , data : Float32Array | null | number [] ) : any ;
    uniformMatrix3fv (location : WebGLUniformLocation | null , transpose : boolean , data : Float32Array | null | number [] ) : any ;
    uniformMatrix4fv (location : WebGLUniformLocation | null , transpose : boolean , data : Float32Array | null | number [] ) : any ;
    useProgram (program : WebGLProgram | null ) : any ;
    validateProgram (program : WebGLProgram | null ) : any ;
    vertexAttrib1f (indx : number , x : number ) : any ;
    vertexAttrib1fv (indx : number , values : Float32Array | null | number [] ) : any ;
    vertexAttrib2f (indx : number , x : number , y : number ) : any ;
    vertexAttrib2fv (indx : number , values : Float32Array | null | number [] ) : any ;
    vertexAttrib3f (indx : number , x : number , y : number , z : number ) : any ;
    vertexAttrib3fv (indx : number , values : Float32Array | null | number [] ) : any ;
    vertexAttrib4f (indx : number , x : number , y : number , z : number , w : number ) : any ;
    vertexAttrib4fv (indx : number , values : Float32Array | null | number [] ) : any ;
    vertexAttribPointer (indx : number , size : number , type : number , normalized : boolean , stride : number , offset : number ) : any ;
    viewport (x : number , y : number , width : number , height : number ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLShader extends WebGLShader_Instance {
  }
  class WebGLShader_Instance extends WebGLObject_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLShaderPrecisionFormat extends WebGLShaderPrecisionFormat_Instance {
  }
  class WebGLShaderPrecisionFormat_Instance {
    private noStructuralTyping_: any;
    precision : number ;
    rangeMax : number ;
    rangeMin : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLTexture extends WebGLTexture_Instance {
  }
  class WebGLTexture_Instance extends WebGLObject_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLUniformLocation extends WebGLUniformLocation_Instance {
  }
  class WebGLUniformLocation_Instance {
    private noStructuralTyping_: any;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebGLVertexArrayObjectOES extends WebGLVertexArrayObjectOES_Instance {
  }
  class WebGLVertexArrayObjectOES_Instance extends WebGLObject_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebKitAnimationEvent extends WebKitAnimationEvent_Instance {
  }
  class WebKitAnimationEvent_Instance extends GlobalEvent {
    animationName : string ;
    elapsedTime : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * This has replaced BlobBuilder in Chrome since WebKit revision 84008.
   */
  class WebKitBlobBuilder extends WebKitBlobBuilder_Instance {
  }
  class WebKitBlobBuilder_Instance {
    private noStructuralTyping_: any;
    append (data : string | Blob | null | ArrayBuffer , endings ? : string ) : any ;
    getBlob (contentType ? : string ) : Blob ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebKitCSSMatrix extends WebKitCSSMatrix_Instance {
  }
  class WebKitCSSMatrix_Instance extends CSSMatrix_Instance {
    constructor (opt_matrix ? : string ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebKitNamespace extends WebKitNamespace_Instance {
  }
  class WebKitNamespace_Instance {
    private noStructuralTyping_: any;
    messageHandlers : UserMessageHandlersNamespace ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebKitPoint extends WebKitPoint_Instance {
  }
  class WebKitPoint_Instance {
    private noStructuralTyping_: any;
    constructor (x : number , y : number ) ;
    x : number ;
    y : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebSocket extends WebSocket_Instance {
    /**
     * The connection has been closed or could not be opened.
     */
    static CLOSED : number ;
    /**
     * The connection is going through the closing handshake, or the close() method has been invoked.
     */
    static CLOSING : number ;
    /**
     * The connection has not yet been established.
     */
    static CONNECTING : number ;
    /**
     * The WebSocket connection is established and communication is possible.
     */
    static OPEN : number ;
  }
  class WebSocket_Instance implements EventTarget {
    private noStructuralTyping_: any;
    constructor (url : string , opt_protocol ? : string ) ;
    addEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    binaryType : string ;
    /**
     * Returns the number of bytes that have been queued but not yet sent.
     */
    bufferedAmount : number ;
    /**
     * Closes the Web Socket connection or connection attempt, if any.
     */
    close (opt_code ? : number , opt_reason ? : string ) : any ;
    dispatchEvent (evt : any ) : any ;
    /**
     * An event handler called on close event.
     */
    onclose : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * An event handler called on message event.
     * TODO(blickly): Change this to MessageEvent<*> and add casts as needed
     */
    onmessage : ( (a : MessageEvent < any > ) => any ) | null ;
    /**
     * An event handler called on open event.
     */
    onopen : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * Represents the state of the connection.
     */
    readyState : number ;
    removeEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    /**
     * Transmits data using the connection.
     */
    send (data : string | ArrayBuffer | null | ArrayBufferView ) : boolean ;
    /**
     * Returns the URL value that was passed to the constructor.
     */
    url : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WebWorker extends WebWorker_Instance {
  }
  class WebWorker_Instance implements EventTarget {
    private noStructuralTyping_: any;
    addEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    dispatchEvent (evt : any ) : any ;
    /**
     * Sent when the worker thread encounters an error.
     * TODO(tbreisacher): Should this change to function(!ErrorEvent)?
     */
    onerror : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * Sent when the worker thread posts a message to its creator.
     */
    onmessage : ( (a : MessageEvent < any > ) => any ) | null ;
    /**
     * Posts a message to the worker thread.
     */
    postMessage (message : string ) : any ;
    removeEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    /**
     * Stops the worker process
     */
    terminate ( ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WheelEvent extends WheelEvent_Instance {
    static DOM_DELTA_LINE : number ;
    static DOM_DELTA_PAGE : number ;
    static DOM_DELTA_PIXEL : number ;
  }
  class WheelEvent_Instance extends MouseEvent_Instance {
    constructor (type : string , opt_eventInitDict ? : { altKey ? : boolean , bubbles ? : boolean , button ? : number , buttons ? : number , cancelable ? : boolean , clientX ? : number , clientY ? : number , ctrlKey ? : boolean , deltaMode ? : number , deltaX ? : number , deltaY ? : number , deltaZ ? : number , detail ? : number , metaKey ? : boolean , relatedTarget ? : EventTarget | null , screenX ? : number , screenY ? : number , shiftKey ? : boolean , view ? : Window | null } ) ;
    deltaMode : number ;
    deltaX : number ;
    deltaY : number ;
    deltaZ : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Window extends Window_Instance {
  }
  class Window_Instance implements EventTarget {
    private noStructuralTyping_: any;
    Array < T > ( ...var_args : any [] ) : any [] ;
    Boolean (opt_value ? : any ) : boolean ;
    /**
     * TODO(nicksantos): This suppress tag probably isn't needed, and
     * should be removed.
     */
    CSS : CSSInterface | null ;
    Date (opt_yr_num ? : any , opt_mo_num ? : any , opt_day_num ? : any , opt_hr_num ? : any , opt_min_num ? : any , opt_sec_num ? : any , opt_ms_num ? : any ) : string ;
    Error (opt_message ? : any , opt_file ? : any , opt_line ? : any ) : GlobalError ;
    EvalError (opt_message ? : any , opt_file ? : any , opt_line ? : any ) : EvalError ;
    Function ( ...var_args : any [] ) : any ;
    Infinity : number ;
    Intl : Object ;
    JSON : JSONType ;
    JavaArray : any ;
    JavaClass : any ;
    JavaMember : any ;
    JavaObject : any ;
    JavaPackage : any ;
    Math : Object ;
    NaN : number ;
    Number (opt_value ? : any ) : number ;
    Object (opt_value ? : any ) : Object ;
    Packages : any ;
    RangeError (opt_message ? : any , opt_file ? : any , opt_line ? : any ) : RangeError ;
    ReferenceError (opt_message ? : any , opt_file ? : any , opt_line ? : any ) : ReferenceError ;
    Reflect : Object ;
    RegExp (opt_pattern ? : any , opt_flags ? : any ) : RegExp ;
    RuntimeObject (a ? : any ) : any ;
    ScriptEngine ( ) : string ;
    ScriptEngineBuildVersion ( ) : number ;
    ScriptEngineMajorVersion ( ) : number ;
    ScriptEngineMinorVersion ( ) : number ;
    String (opt_str ? : any ) : string ;
    Symbol (a : string ) : any ;
    SyntaxError (opt_message ? : any , opt_file ? : any , opt_line ? : any ) : SyntaxError ;
    TypeError (opt_message ? : any , opt_file ? : any , opt_line ? : any ) : TypeError ;
    URIError (opt_message ? : any , opt_file ? : any , opt_line ? : any ) : URIError ;
    alert : any ;
    /**
     * Not actually a global variable, but we need it in order for the current type
     * checker to typecheck the "arguments" variable in a function correctly.
     * TODO(tbreisacher): When the old type checker is gone, delete this and add
     * an 'arguments' variable of type Array<string> in the d8 externs.
     */
    arguments : Arguments < any > ;
    /**
     * Decodes a string of data which has been encoded using base-64 encoding.
     */
    atob (a : string ) : string ;
    btoa (a : string ) : string ;
    caches : CacheStorage ;
    cancelAnimationFrame (a : number ) : any ;
    cancelRequestAnimationFrame (a : number ) : any ;
    /**
     * namespace
     */
    chrome : Object ;
    clearImmediate (a : number | undefined | null ) : any ;
    clearInterval (a : number | undefined | null ) : any ;
    clearTimeout (a : number | undefined | null ) : any ;
    confirm (a : any ) : boolean ;
    decodeURI (a : string ) : string ;
    decodeURIComponent (a : string ) : string ;
    document : HTMLDocument ;
    dump : any ;
    encodeURI (a : string ) : string ;
    encodeURIComponent (a : string ) : string ;
    /**
     * Should only be used in browsers where encode/decodeURIComponent
     * are not present, as the latter handle fancy Unicode characters.
     */
    escape (a : string ) : string ;
    eval (a : string ) : any ;
    getComputedStyle (a : Element | null , b ? : string | null ) : CSSStyleDeclaration | null ;
    /**
     * Returns whether the object has a property with the specified name.
     * @param propertyName Implicitly cast to a string.
     */
    hasOwnProperty (a : any ) : boolean ;
    history : History ;
    isFinite (a : any ) : boolean ;
    isNaN (a : any ) : boolean ;
    java : any ;
    methods : any ;
    mozCancelAnimationFrame (a : number ) : any ;
    mozCancelRequestAnimationFrame (a : number ) : any ;
    mozRequestAnimationFrame (a : ( (a : number ) => any ) | null , b ? : Element | null ) : number ;
    msCancelAnimationFrame (a : number ) : any ;
    msCancelRequestAnimationFrame (a : number ) : any ;
    msRequestAnimationFrame (a : (a : number ) => any , b ? : Element | null ) : number ;
    navigator : Navigator ;
    netscape : any ;
    oCancelAnimationFrame (a : number ) : any ;
    oCancelRequestAnimationFrame (a : number ) : any ;
    oRequestAnimationFrame (a : (a : number ) => any , b ? : Element | null ) : number ;
    opera : any ;
    parseFloat (a : any ) : number ;
    /**
     * Parse an integer. Use of {@code parseInt} without {@code base} is strictly
     * banned in Google. If you really want to parse octal or hex based on the
     * leader, then pass {@code undefined} as the base.
     */
    parseInt (a : any , b : number | undefined ) : number ;
    /**
     * This is a superposition of the Window and Worker postMessage methods.
     */
    postMessage (a : any , b ? : string | Transferable [] , c ? : string | any [] ) : void ;
    prompt (a : string , b ? : string ) : string | null ;
    requestAnimationFrame (a : (a : number ) => any , b ? : Element | null ) : number ;
    screen : Screen ;
    self : Window ;
    setImmediate (a : ( ) => any ) : number ;
    setInterval (a : ( ( ...a : any [] ) => any ) | null | string , b ? : number ) : number ;
    setTimeout (a : ( ( ...a : any [] ) => any ) | null | string , b ? : number ,  ...c : any [] ) : number ;
    sun : any ;
    top : Window ;
    undefined : undefined ;
    /**
     * Should only be used in browsers where encode/decodeURIComponent
     * are not present, as the latter handle fancy Unicode characters.
     */
    unescape (a : string ) : string ;
    webCrypto : Object ;
    webkit : WebKitNamespace ;
    webkitCancelAnimationFrame (a : number ) : any ;
    webkitCancelRequestAnimationFrame (a : number ) : any ;
    webkitRequestAnimationFrame (a : (a : number ) => any , b ? : Element | null ) : number ;
    Components : any ;
    PERSISTENT : number ;
    TEMPORARY : number ;
    addEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    applicationCache : DOMApplicationCache | null ;
    attachEvent (a : string , b : ( ( ...a : any [] ) => any ) | null ) : any ;
    back ( ) : any ;
    blur ( ) : any ;
    captureEvents : any ;
    clipboardData : ClipboardData | null ;
    close ( ) : any ;
    closed : boolean ;
    console : Console ;
    content : Window | null ;
    controllers : any ;
    createObjectURL (obj : Object ) : string ;
    createPopup : any ;
    crypto : any ;
    /**
     * Gets/sets the status bar text for the given window.
     */
    defaultStatus : string ;
    detachEvent (a : string , b : ( ( ...a : any [] ) => any ) | null ) : any ;
    devicePixelRatio : number ;
    dialogArguments : any ;
    dialogHeight : any ;
    dialogLeft : any ;
    dialogTop : any ;
    dialogWidth : any ;
    directories : any ;
    dispatchEvent (evt : any ) : any ;
    event : any ;
    execScript : any ;
    external : Object ;
    fetch (input : Request | string , opt_init ? : { body ? : Blob | FormData | string , cache ? : RequestCache , credentials ? : RequestCredentials , headers ? : Headers | string [] [] , method ? : string , mode ? : RequestMode } ) : Promise < Response > ;
    find : any ;
    focus ( ) : any ;
    forward ( ) : any ;
    frameElement : HTMLObjectElement | null | HTMLIFrameElement ;
    /**
     * Allows lookup of frames by index or by name.
     */
    frames : Object | null ;
    fullScreen : boolean ;
    getAttention ( ) : any ;
    getSelection ( ) : Selection | null ;
    globalStorage : any ;
    home ( ) : any ;
    importScripts ( ...var_args : ( string | undefined ) [] ) : any ;
    indexedDB : IDBFactory | null ;
    innerHeight : number ;
    innerWidth : number ;
    /**
     * Returns the number of frames (either frame or iframe elements) in the
     * window.
     */
    length : number ;
    /**
     * Window implements WindowLocalStorage
     */
    localStorage : Storage | null ;
    /**
     * Location has an exception in the DeclaredGlobalExternsOnWindow pass
     * so we have to manually include it:
     * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/DeclaredGlobalExternsOnWindow.java#L116
     */
    location : Location ;
    locationbar : any ;
    matchMedia (media_query_list : string ) : MediaQueryList | null ;
    maxConnectionsPer1_0Server : any ;
    maxConnectionsPerServer : any ;
    menubar : any ;
    moveBy (x : number , y : number ) : any ;
    moveTo (x : number , y : number ) : any ;
    mozIndexedDB : IDBFactory | null ;
    moz_indexedDB : IDBFactory | null ;
    msIndexedDB : IDBFactory | null ;
    name : string ;
    navigate : any ;
    offscreenBuffering : any ;
    onabort : ( (a : GlobalEvent | null ) => any ) | null ;
    onbeforeunload : ( (a : GlobalEvent | null ) => any ) | null ;
    onblur : ( (a : GlobalEvent | null ) => any ) | null ;
    onchange : ( (a : GlobalEvent | null ) => any ) | null ;
    onclick : ( (a : GlobalEvent | null ) => any ) | null ;
    onclose : ( (a : GlobalEvent | null ) => any ) | null ;
    oncontextmenu : ( (a : GlobalEvent | null ) => any ) | null ;
    ondblclick : ( (a : GlobalEvent | null ) => any ) | null ;
    ondragdrop : ( (a : GlobalEvent | null ) => any ) | null ;
    onerror : ( (a : string , b : string , c : number ) => any ) | null ;
    onfocus : ( (a : GlobalEvent | null ) => any ) | null ;
    onhashchange : ( (a : GlobalEvent | null ) => any ) | null ;
    onkeydown : ( (a : GlobalEvent | null ) => any ) | null ;
    onkeypress : ( (a : GlobalEvent | null ) => any ) | null ;
    onkeyup : ( (a : GlobalEvent | null ) => any ) | null ;
    onload : ( (a : GlobalEvent | null ) => any ) | null ;
    onmousedown : ( (a : GlobalEvent | null ) => any ) | null ;
    onmousemove : ( (a : GlobalEvent | null ) => any ) | null ;
    onmouseout : ( (a : GlobalEvent | null ) => any ) | null ;
    onmouseover : ( (a : GlobalEvent | null ) => any ) | null ;
    onmouseup : ( (a : GlobalEvent | null ) => any ) | null ;
    onmousewheel : ( (a : GlobalEvent | null ) => any ) | null ;
    /**
     * Specifies the JavaScript method to invoke when the browser device's
     * orientation changes, i.e.the device is rotated.
     */
    onorientationchange : ( (a : GlobalEvent ) => any ) | null ;
    onpaint : ( (a : GlobalEvent | null ) => any ) | null ;
    onpopstate : ( (a : GlobalEvent | null ) => any ) | null ;
    onreset : ( (a : GlobalEvent | null ) => any ) | null ;
    onresize : ( (a : GlobalEvent | null ) => any ) | null ;
    onscroll : ( (a : GlobalEvent | null ) => any ) | null ;
    onselect : ( (a : GlobalEvent | null ) => any ) | null ;
    onsubmit : ( (a ? : GlobalEvent | null ) => any ) | null ;
    onunload : ( (a : GlobalEvent | null ) => any ) | null ;
    onwheel : ( (a : GlobalEvent | null ) => any ) | null ;
    open (opt_url ? : any , opt_windowName ? : string , opt_windowFeatures ? : string , opt_replace ? : boolean ) : Window | null ;
    openDatabase (name : string , version : string , description : string , size : number , opt_callback ? : DatabaseCallback | null | ( (a : Database | null ) => any ) ) : Database | null ;
    openDialog : any ;
    opener : Window | null ;
    /**
     * Returns the orientation of the browser's device, one of [-90, 0, 90, 180].
     */
    orientation : number ;
    outerHeight : number ;
    outerWidth : number ;
    pageXOffset : number ;
    pageYOffset : number ;
    parent : Window ;
    performance : Performance | null ;
    personalbar : any ;
    pkcs11 : any ;
    print ( ) : any ;
    releaseEvents : any ;
    removeEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    requestFileSystem (type : number , size : number , successCallback : (a : FileSystem ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
    resizeBy (width : number , height : number ) : any ;
    resizeTo (width : number , height : number ) : any ;
    resolveLocalFileSystemURI (uri : string , successCallback : (a : Entry ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
    returnValue : any ;
    revokeObjectURL (url : string ) : any ;
    screenLeft : any ;
    screenTop : any ;
    screenX : number ;
    screenY : number ;
    scroll (x : number , y : number ) : any ;
    scrollBy (x : number , y : number ) : any ;
    scrollByLines : any ;
    scrollByPages : any ;
    scrollMaxX : number ;
    scrollMaxY : number ;
    scrollTo (x : number , y : number ) : any ;
    scrollX : number ;
    scrollY : number ;
    scrollbars : any ;
    /**
     * Window implements WindowSessionStorage
     */
    sessionStorage : Storage | null ;
    setActive : any ;
    showHelp : any ;
    showModalDialog (a : string , b ? : any , c ? : string ) : any ;
    showModelessDialog : any ;
    sidebar : any ;
    sizeToContent : any ;
    status : string | null ;
    statusbar : any ;
    stop ( ) : any ;
    toolbar : any ;
    updateCommands : any ;
    webkitIndexedDB : IDBFactory | null ;
    /**
     * WebKit browsers expose the NotificationCenter API through
     * window.webkitNotifications.
     */
    webkitNotifications : NotificationCenter | null ;
    /**
     * This has replaced requestFileSystem in Chrome since WebKit revision 84224.
     */
    webkitRequestFileSystem (type : number , size : number , successCallback : (a : FileSystem ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
    /**
     * This has replaced resolveLocalFileSystemURI in Chrome since WebKit revision
     * 84224.
     */
    webkitResolveLocalFileSystemURI (uri : string , successCallback : (a : Entry ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
    webkitStorageInfo : StorageInfo ;
    window : Window ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface WindowLocalStorage {
    localStorage : Storage | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface WindowSessionStorage {
    sessionStorage : Storage | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class Worker extends Worker_Instance {
  }
  class Worker_Instance implements EventTarget {
    private noStructuralTyping_: any;
    constructor (opt_arg0 : any ) ;
    addEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    dispatchEvent (evt : any ) : any ;
    /**
     * Sent when the worker thread encounters an error.
     * TODO(tbreisacher): Should this change to function(!ErrorEvent)?
     */
    onerror : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * Sent when the worker thread posts a message to its creator.
     */
    onmessage : ( (a : MessageEvent < any > ) => any ) | null ;
    /**
     * Posts a message to the worker thread.
     */
    postMessage (message : any , opt_transfer ? : Transferable [] | null ) : any ;
    removeEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    /**
     * Stops the worker process
     */
    terminate ( ) : any ;
    /**
     * Posts a message to the worker thread.
     */
    webkitPostMessage (message : any , opt_transfer ? : Transferable [] | null ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface WorkerGlobalScope extends EventTarget {
    /**
     * Closes the worker represented by this WorkerGlobalScope.
     */
    close ( ) : any ;
    fetch (input : Request | string , opt_init ? : { body ? : Blob | FormData | string , cache ? : RequestCache , credentials ? : RequestCredentials , headers ? : Headers | string [] [] , method ? : string , mode ? : RequestMode } ) : Promise < Response > ;
    location : WorkerLocation | null ;
    /**
     * Sent when the worker encounters an error.
     */
    onerror : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * Sent when the worker goes offline.
     */
    onoffline : ( (a : GlobalEvent ) => any ) | null ;
    /**
     * Sent when the worker goes online.
     */
    ononline : ( (a : GlobalEvent ) => any ) | null ;
    self : WorkerGlobalScope | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  interface WorkerLocation {
    hash : string ;
    host : string ;
    hostname : string ;
    href : string ;
    origin : string ;
    pathname : string ;
    port : string ;
    protocol : string ;
    search : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class WritableStream extends WritableStream_Instance {
  }
  class WritableStream_Instance {
    private noStructuralTyping_: any;
    constructor (opt_underlyingSink ? : { abort ? : (a : any ) => Promise < any > | undefined , close ? : ( ) => Promise < any > | undefined , start ? : (a : any ) => Promise < any > | undefined , write ? : (a : any ) => Promise < any > | undefined } , opt_strategy ? : CountQueuingStrategy | ByteLengthQueuingStrategy | { highWaterMark : number , size ? : (a : any ) => number } ) ;
    abort (reason : any ) : Promise < undefined > ;
    close ( ) : Promise < undefined > ;
    closed : Promise < any > ;
    ready : Promise < any > ;
    state : string ;
    write (chunk : any ) : Promise < any > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * IE implements Cross Origin Resource Sharing (cross-domain XMLHttpRequests)
   * via the XDomainRequest object.
   */
  class XDomainRequest extends XDomainRequest_Instance {
  }
  class XDomainRequest_Instance {
    private noStructuralTyping_: any;
    /**
     * Aborts the request.
     */
    abort ( ) : any ;
    /**
     * The Content-Type of the response, or an empty string.
     */
    contentType : string ;
    /**
     * Called if the request could not be completed. Note that error information is
     * not available.
     */
    onerror : ( ( ) => any ) | null ;
    /**
     * Called when the response has finished.
     */
    onload : ( ( ) => any ) | null ;
    /**
     * Called every time part of the response has been received.
     */
    onprogress : ( ( ) => any ) | null ;
    /**
     * Called if the timeout period has elapsed.
     */
    ontimeout : ( ( ) => any ) | null ;
    /**
     * Sets the method and URL for the request.
     * @param bstrMethod Either "GET" or "POST"
     * @param bstrUrl The target URL
     */
    open (bstrMethod : string , bstrUrl : string ) : any ;
    /**
     * The current response body.
     */
    responseText : string ;
    /**
     * Sends the request.
     * @param varBody The POST body to send to the server. If omitted, the behavior is identical to sending an empty string.
     */
    send (varBody ? : string ) : any ;
    /**
     * The timeout (in milliseconds) for the request.
     */
    timeout : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class XMLDOMDocument extends XMLDOMDocument_Instance {
  }
  class XMLDOMDocument_Instance extends Document_Instance {
    abort ( ) : any ;
    async : boolean ;
    createNode (type : any , name : string , namespaceURI : string ) : Node | null ;
    load (xmlSource : string ) : boolean ;
    loadXML : (xmlString : string ) => boolean ;
    nodeFromID (id : string ) : Node | null ;
    ondataavailable ( ...a : any [] ) : any ;
    onreadystatechange ( ...a : any [] ) : any ;
    ontransformnode ( ...a : any [] ) : any ;
    parseError : Object | null ;
    preserveWhiteSpace : boolean ;
    readyState : number ;
    resolveExternals : boolean ;
    setProperty (name : string , value : any ) : any ;
    url : string ;
    validateOnParse : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * From http://www.w3.org/TR/XMLHttpRequest/
   *
   * (Draft)
   *
   * The XMLHttpRequest Object specification defines an API that provides
   * scripted client functionality for transferring data between a client and a
   * server.
   */
  class XMLHttpRequest extends XMLHttpRequest_Instance {
  }
  class XMLHttpRequest_Instance implements EventTarget {
    private noStructuralTyping_: any;
    abort ( ) : void ;
    addEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    dispatchEvent (evt : GlobalEvent ) : boolean ;
    getAllResponseHeaders ( ) : string ;
    getResponseHeader (header : string ) : string ;
    mozResponseArrayBuffer : ArrayBuffer | null ;
    onerror : ( ( ...a : any [] ) => any ) | null ;
    onprogress : ( (a : ProgressEvent ) => undefined ) | null ;
    onreadystatechange : ( ( ...a : any [] ) => any ) | null ;
    open (method : string , url : string , opt_async ? : boolean | null , opt_user ? : string | null , opt_password ? : string | null ) : void ;
    overrideMimeType (mimeType : string ) : any ;
    readyState : number ;
    removeEventListener (type : string , listener : EventListener | null | ( (a : GlobalEvent ) => boolean | undefined ) , opt_useCapture ? : boolean ) : void ;
    response : null | Object | string ;
    responseText : string ;
    responseType : string ;
    responseXML : Document | null ;
    send (opt_data ? : ArrayBuffer | null | ArrayBufferView | Blob | Document | FormData | string ) : void ;
    setRequestHeader (header : string , value : string ) : void ;
    status : number ;
    statusText : string ;
    upload : XMLHttpRequestUpload | null ;
    withCredentials : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * XMLHttpRequestEventTarget defines events for checking the status of a data
   * transfer between a client and a server. This should be a common base class
   * for XMLHttpRequest and XMLHttpRequestUpload.
   */
  class XMLHttpRequestEventTarget extends XMLHttpRequestEventTarget_Instance {
  }
  class XMLHttpRequestEventTarget_Instance implements EventTarget {
    private noStructuralTyping_: any;
    addEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
    dispatchEvent (evt : any ) : any ;
    removeEventListener (type : any , listener : any , opt_useCapture ? : boolean ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * An event target to track the status of an upload.
   */
  class XMLHttpRequestUpload extends XMLHttpRequestUpload_Instance {
  }
  class XMLHttpRequestUpload_Instance extends XMLHttpRequestEventTarget_Instance {
    onprogress : ( (a : ProgressEvent ) => undefined ) | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * XMLSerializer can be used to convert DOM subtree or DOM document into text.
   * XMLSerializer is available to unprivileged scripts.
   *
   * XMLSerializer is mainly useful for applications and extensions based on
   * Mozilla platform. While it's available to web pages, it's not part of any
   * standard and level of support in other browsers is unknown.
   */
  class XMLSerializer extends XMLSerializer_Instance {
  }
  class XMLSerializer_Instance {
    private noStructuralTyping_: any;
    /**
     * The subtree rooted by the specified element is serialized to a byte stream
     * using the character set specified.
     */
    serializeToStream (subtree : Node | null ) : Object | null ;
    /**
     * Returns the serialized subtree in the form of a string
     */
    serializeToString (subtree : Node | null ) : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class XPathEvaluator extends XPathEvaluator_Instance {
  }
  class XPathEvaluator_Instance {
    private noStructuralTyping_: any;
    createExpression (expr : string , opt_resolver ? : XPathNSResolver | null ) : any ;
    createNSResolver (nodeResolver : Node | null ) : any ;
    evaluate (expr : string , contextNode : Node | null , opt_resolver ? : XPathNSResolver | null , opt_type ? : number | null , opt_result ? : any ) : XPathResult | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class XPathException extends XPathException_Instance {
    static INVALID_EXPRESSION_ERR : number ;
    static TYPE_ERR : number ;
  }
  class XPathException_Instance {
    private noStructuralTyping_: any;
    code : number ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class XPathExpression extends XPathExpression_Instance {
  }
  class XPathExpression_Instance {
    private noStructuralTyping_: any;
    evaluate (contextNode : Node | null , opt_type ? : number , opt_result ? : any ) : any ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class XPathNSResolver extends XPathNSResolver_Instance {
  }
  class XPathNSResolver_Instance {
    private noStructuralTyping_: any;
    lookupNamespaceURI (prefix : string ) : string | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class XPathNamespace extends XPathNamespace_Instance {
    static XPATH_NAMESPACE_NODE : number ;
  }
  class XPathNamespace_Instance extends Node_Instance {
    ownerElement : Element | null ;
  }
}
declare namespace ಠ_ಠ.clutz {
  /**
   * From http://www.w3.org/TR/xpath
   *
   * XPath is a language for addressing parts of an XML document, designed to be
   * used by both XSLT and XPointer.
   */
  class XPathResult extends XPathResult_Instance {
    static ANY_TYPE : number ;
    static ANY_UNORDERED_NODE_TYPE : number ;
    static BOOLEAN_TYPE : number ;
    static FIRST_ORDERED_NODE_TYPE : number ;
    static NUMBER_TYPE : number ;
    static ORDERED_NODE_ITERATOR_TYPE : number ;
    static ORDERED_NODE_SNAPSHOT_TYPE : number ;
    static STRING_TYPE : number ;
    static UNORDERED_NODE_ITERATOR_TYPE : number ;
    static UNORDERED_NODE_SNAPSHOT_TYPE : number ;
  }
  class XPathResult_Instance {
    private noStructuralTyping_: any;
    booleanValue : boolean ;
    invalidInteratorState : boolean ;
    iterateNext ( ) : Node | null ;
    numberValue : number ;
    resultType : number ;
    singleNodeValue : Node | null ;
    snapshotItem (index : number ) : Node | null ;
    snapshotLength : number ;
    stringValue : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class XSLTProcessor extends XSLTProcessor_Instance {
  }
  class XSLTProcessor_Instance {
    private noStructuralTyping_: any;
  }
}
declare namespace ಠ_ಠ.clutz {
  function alert (x : any ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  var applicationCache : DOMApplicationCache | null ;
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Not actually a global variable, but we need it in order for the current type
   * checker to typecheck the "arguments" variable in a function correctly.
   * TODO(tbreisacher): When the old type checker is gone, delete this and add
   * an 'arguments' variable of type Array<string> in the d8 externs.
   */
  var arguments : Arguments < any > ;
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Decodes a string of data which has been encoded using base-64 encoding.
   */
  function atob (encodedData : string ) : string ;
}
declare namespace ಠ_ಠ.clutz {
  function btoa (stringToEncode : string ) : string ;
}
declare namespace ಠ_ಠ.clutz {
  var caches : CacheStorage ;
}
declare namespace ಠ_ಠ.clutz {
  function cancelAnimationFrame (handle : number ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function cancelRequestAnimationFrame (handle : number ) : any ;
}
declare namespace ಠ_ಠ.clutz.chrome.app {
  var isInstalled : boolean ;
}
declare namespace ಠ_ಠ.clutz.chrome {
  /**
   * Returns an object containing timing information.
   */
  function csi ( ) : ChromeCsiInfo ;
}
declare namespace ಠ_ಠ.clutz.chrome {
  /**
   * Returns an object representing current load times. Note that the properties
   * on the object do not change and the function must be called again to get
   * up-to-date data.
   */
  function loadTimes ( ) : ChromeLoadTimes ;
}
declare namespace ಠ_ಠ.clutz.chrome.runtime {
  function connect (opt_extensionIdOrConnectInfo ? : string | Object , opt_connectInfo ? : Object ) : Port ;
}
declare namespace ಠ_ಠ.clutz.chrome.runtime {
  var lastError__clutz_alias : Object | undefined ;
}
declare namespace ಠ_ಠ.clutz.chrome.runtime.lastError {
  var message : string | undefined ;
}
declare namespace ಠ_ಠ.clutz.chrome.runtime {
  function sendMessage (extensionIdOrMessage : any , opt_messageOrOptsOrCallback ? : any , opt_optsOrCallback ? : Object , opt_callback ? : (a : any ) => undefined ) : void ;
}
declare namespace ಠ_ಠ.clutz.chrome.webstore {
  function install (opt_urlOrSuccessCallbackOrFailureCallback ? : string | ( ( ...a : any [] ) => any ) , opt_successCallbackOrFailureCallback ? : ( ...a : any [] ) => any , opt_failureCallback ? : (a : string , b ? : string ) => any ) : any ;
}
declare namespace ಠ_ಠ.clutz.chrome.webstore {
  var onDownloadProgress : ChromeNumberEvent ;
}
declare namespace ಠ_ಠ.clutz.chrome.webstore {
  var onInstallStageChanged : ChromeStringEvent ;
}
declare namespace ಠ_ಠ.clutz {
  function clearImmediate (immediateID : number | undefined | null ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function clearInterval (intervalID : number | undefined | null ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function clearTimeout (timeoutID : number | undefined | null ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function confirm (message : any ) : boolean ;
}
declare namespace ಠ_ಠ.clutz {
  var console : Console ;
}
declare namespace ಠ_ಠ.clutz {
  class controlRange extends controlRange_Instance {
  }
  class controlRange_Instance {
    private noStructuralTyping_: any;
  }
}
declare namespace ಠ_ಠ.clutz {
  function createObjectURL (obj : Object ) : string ;
}
declare namespace ಠ_ಠ.clutz {
  function decodeURI (uri : string ) : string ;
}
declare namespace ಠ_ಠ.clutz {
  function decodeURIComponent (uri : string ) : string ;
}
declare namespace ಠ_ಠ.clutz {
  var document : HTMLDocument ;
}
declare namespace ಠ_ಠ.clutz {
  function dump (x : any ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function encodeURI (uri : string ) : string ;
}
declare namespace ಠ_ಠ.clutz {
  function encodeURIComponent (uri : string ) : string ;
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Should only be used in browsers where encode/decodeURIComponent
   * are not present, as the latter handle fancy Unicode characters.
   */
  function escape (str : string ) : string ;
}
declare namespace ಠ_ಠ.clutz {
  function eval (code : string ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function fetch (input : Request | string , opt_init ? : { body ? : Blob | FormData | string , cache ? : RequestCache , credentials ? : RequestCredentials , headers ? : Headers | string [] [] , method ? : string , mode ? : RequestMode } ) : Promise < Response > ;
}
declare namespace ಠ_ಠ.clutz {
  function getComputedStyle (element : Element | null , pseudoElt ? : string | null ) : CSSStyleDeclaration | null ;
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Returns whether the object has a property with the specified name.
   * @param propertyName Implicitly cast to a string.
   */
  function hasOwnProperty (propertyName : any ) : boolean ;
}
declare namespace ಠ_ಠ.clutz {
  var history : History ;
}
declare namespace ಠ_ಠ.clutz {
  function importScripts ( ...var_args : ( string | undefined ) [] ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function isFinite (num : any ) : boolean ;
}
declare namespace ಠ_ಠ.clutz {
  function isNaN (num : any ) : boolean ;
}
declare namespace ಠ_ಠ.clutz {
  var location : Location ;
}
declare namespace ಠ_ಠ.clutz {
  function mozCancelAnimationFrame (handle : number ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function mozCancelRequestAnimationFrame (handle : number ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function mozRequestAnimationFrame (callback : ( (a : number ) => any ) | null , opt_element ? : Element | null ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  function msCancelAnimationFrame (handle : number ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function msCancelRequestAnimationFrame (handle : number ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function msRequestAnimationFrame (callback : (a : number ) => any , opt_element ? : Element | null ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  var navigator : Navigator ;
}
declare namespace ಠ_ಠ.clutz {
  class nsIDOMPageTransitionEvent extends nsIDOMPageTransitionEvent_Instance {
  }
  class nsIDOMPageTransitionEvent_Instance {
    private noStructuralTyping_: any;
    persisted : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  function oCancelAnimationFrame (handle : number ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function oCancelRequestAnimationFrame (handle : number ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function oRequestAnimationFrame (callback : (a : number ) => any , opt_element ? : Element | null ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  function openDatabase (name : string , version : string , description : string , size : number , opt_callback ? : DatabaseCallback | null | ( (a : Database | null ) => any ) ) : Database | null ;
}
declare namespace ಠ_ಠ.clutz.opera {
  function version ( ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function parseFloat (num : any ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Parse an integer. Use of {@code parseInt} without {@code base} is strictly
   * banned in Google. If you really want to parse octal or hex based on the
   * leader, then pass {@code undefined} as the base.
   */
  function parseInt (num : any , base : number | undefined ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  /**
   * This is a superposition of the Window and Worker postMessage methods.
   */
  function postMessage (message : any , opt_targetOriginOrTransfer ? : string | Transferable [] , opt_targetOriginOrPortsOrTransfer ? : string | any [] ) : void ;
}
declare namespace ಠ_ಠ.clutz {
  function prompt (message : string , opt_value ? : string ) : string | null ;
}
declare namespace ಠ_ಠ.clutz {
  function requestAnimationFrame (callback : (a : number ) => any , opt_element ? : Element | null ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  function requestFileSystem (type : number , size : number , successCallback : (a : FileSystem ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function resolveLocalFileSystemURI (uri : string , successCallback : (a : Entry ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function revokeObjectURL (url : string ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  var screen : Screen ;
}
declare namespace ಠ_ಠ.clutz {
  var self : Window ;
}
declare namespace ಠ_ಠ.clutz {
  function setImmediate (callback : ( ) => any ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  function setInterval (callback : ( ( ...a : any [] ) => any ) | null | string , opt_delay ? : number ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  function setTimeout (callback : ( ( ...a : any [] ) => any ) | null | string , opt_delay ? : number ,  ...var_args : any [] ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  var top : Window ;
}
declare namespace ಠ_ಠ.clutz {
  var undefined : undefined ;
}
declare namespace ಠ_ಠ.clutz {
  /**
   * Should only be used in browsers where encode/decodeURIComponent
   * are not present, as the latter handle fancy Unicode characters.
   */
  function unescape (str : string ) : string ;
}
declare namespace ಠ_ಠ.clutz.webCrypto {
  type Algorithm = { name : string } | null ;
}
declare namespace ಠ_ಠ.clutz.webCrypto {
  type AlgorithmIdentifier = string | { name : string } ;
}
declare namespace ಠ_ಠ.clutz.webCrypto {
  class CryptoKey extends CryptoKey_Instance {
  }
  class CryptoKey_Instance {
    private noStructuralTyping_: any;
    algorithm : Object ;
    extractable : boolean ;
    type : string ;
    usages : Object ;
  }
}
declare namespace ಠ_ಠ.clutz.webCrypto {
  class JsonWebKey extends JsonWebKey_Instance {
  }
  class JsonWebKey_Instance {
    private noStructuralTyping_: any;
    alg : string ;
    crv : string ;
    d : string ;
    dp : string ;
    dq : string ;
    e : string ;
    ext : boolean ;
    k : string ;
    key_ops : string [] ;
    kty : string ;
    n : string ;
    oth : ಠ_ಠ.clutz.webCrypto.RsaOtherPrimesInfo [] ;
    p : string ;
    q : string ;
    qi : string ;
    use : string ;
    x : string ;
    y : string ;
  }
}
declare namespace ಠ_ಠ.clutz.webCrypto {
  type KeyAlgorithm = { name : string } | null ;
}
declare namespace ಠ_ಠ.clutz.webCrypto {
  class RsaOtherPrimesInfo extends RsaOtherPrimesInfo_Instance {
  }
  class RsaOtherPrimesInfo_Instance {
    private noStructuralTyping_: any;
    d : string ;
    r : string ;
    t : string ;
  }
}
declare namespace ಠ_ಠ.clutz.webCrypto {
  class SubtleCrypto extends SubtleCrypto_Instance {
  }
  class SubtleCrypto_Instance {
    private noStructuralTyping_: any;
    decrypt (algorithm : string | { name : string } , key : ಠ_ಠ.clutz.webCrypto.CryptoKey , data : ArrayBuffer | ArrayBufferView ) : Promise < any > ;
    deriveBits (algorithm : string | { name : string } , baseKey : ಠ_ಠ.clutz.webCrypto.CryptoKey , length : number ) : Promise < any > ;
    deriveKey (algorithm : string | { name : string } , baseKey : ಠ_ಠ.clutz.webCrypto.CryptoKey , derivedKeyAlgo : string | { name : string } , extractable : boolean , keyUsages : string [] ) : Promise < any > ;
    digest (algorithm : string | { name : string } , data : ArrayBuffer | ArrayBufferView ) : Promise < any > ;
    encrypt (algorithm : string | { name : string } , key : ಠ_ಠ.clutz.webCrypto.CryptoKey , data : ArrayBuffer | ArrayBufferView ) : Promise < any > ;
    exportKey (format : string , key : ಠ_ಠ.clutz.webCrypto.CryptoKey ) : Promise < any > ;
    generateKey (algorithm : string | { name : string } , extractable : boolean , keyUsages : string [] ) : Promise < any > ;
    importKey (format : string , keyData : ArrayBuffer | ArrayBufferView | ಠ_ಠ.clutz.webCrypto.JsonWebKey , algorithm : string | { name : string } , extractable : boolean , keyUsages : string [] ) : Promise < any > ;
    sign (algorithm : string | { name : string } , key : ಠ_ಠ.clutz.webCrypto.CryptoKey , data : ArrayBuffer | ArrayBufferView ) : Promise < any > ;
    unwrapKey (format : string , wrappedKey : ArrayBuffer | ArrayBufferView , unwrappingKey : ಠ_ಠ.clutz.webCrypto.CryptoKey , unwrapAlgorithm : string | { name : string } , unwrappedKeyAlgorithm : string | { name : string } , extractable : boolean , keyUsages : string [] ) : Promise < any > ;
    verify (algorithm : string | { name : string } , key : ಠ_ಠ.clutz.webCrypto.CryptoKey , signature : ArrayBuffer | ArrayBufferView , data : ArrayBuffer | ArrayBufferView ) : Promise < any > ;
    wrapKey (format : string , key : ಠ_ಠ.clutz.webCrypto.CryptoKey , wrappingKey : ಠ_ಠ.clutz.webCrypto.CryptoKey , wrapAlgorithm : string | { name : string } ) : Promise < any > ;
  }
}
declare namespace ಠ_ಠ.clutz {
  var webkit : WebKitNamespace ;
}
declare namespace ಠ_ಠ.clutz {
  class webkitAudioContext extends webkitAudioContext_Instance {
  }
  class webkitAudioContext_Instance extends AudioContext_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class webkitAudioPannerNode extends webkitAudioPannerNode_Instance {
  }
  class webkitAudioPannerNode_Instance extends AudioPannerNode_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  function webkitCancelAnimationFrame (handle : number ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  function webkitCancelRequestAnimationFrame (handle : number ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  class webkitIDBCursor extends webkitIDBCursor_Instance {
    static NEXT : number ;
    static NEXT_NO_DUPLICATE : number ;
    static PREV : number ;
    static PREV_NO_DUPLICATE : number ;
  }
  class webkitIDBCursor_Instance extends IDBCursor_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class webkitIDBDatabaseException extends webkitIDBDatabaseException_Instance {
    static ABORT_ERR : number ;
    static CONSTRAINT_ERR : number ;
    static DATA_ERR : number ;
    static NON_TRANSIENT_ERR : number ;
    static NOT_ALLOWED_ERR : number ;
    static NOT_FOUND_ERR : number ;
    static QUOTA_ERR : number ;
    static READ_ONLY_ERR : number ;
    static TIMEOUT_ERR : number ;
    static TRANSACTION_INACTIVE_ERR : number ;
    static UNKNOWN_ERR : number ;
  }
  class webkitIDBDatabaseException_Instance extends IDBDatabaseException_Instance {
    code : number ;
    message : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  class webkitIDBKeyRange extends webkitIDBKeyRange_Instance {
    static bound (left : number | string | Date | any [] , right : number | string | Date | any [] , openLeft ? : boolean , openRight ? : boolean ) : IDBKeyRange ;
    static lowerBound (bound : number | string | Date | any [] , open ? : boolean ) : IDBKeyRange ;
    static only (value : number | string | Date | any [] ) : IDBKeyRange ;
    static upperBound (bound : number | string | Date | any [] , open ? : boolean ) : IDBKeyRange ;
  }
  class webkitIDBKeyRange_Instance extends IDBKeyRange_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class webkitIDBRequest extends webkitIDBRequest_Instance {
    static DONE : number ;
    static LOADING : number ;
  }
  class webkitIDBRequest_Instance extends IDBRequest_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class webkitIDBTransaction extends webkitIDBTransaction_Instance {
    static READ_ONLY : number ;
    static READ_WRITE : number ;
    static VERSION_CHANGE : number ;
  }
  class webkitIDBTransaction_Instance extends IDBTransaction_Instance {
  }
}
declare namespace ಠ_ಠ.clutz {
  class webkitIDBVersionChangeEvent extends webkitIDBVersionChangeEvent_Instance {
  }
  class webkitIDBVersionChangeEvent_Instance extends IDBVersionChangeEvent_Instance {
    version : string ;
  }
}
declare namespace ಠ_ಠ.clutz {
  var webkitMediaStream : { new (a ? : MediaStream | MediaStreamTrack [] ) : MediaStream } ;
}
declare namespace ಠ_ಠ.clutz {
  class webkitOfflineAudioContext extends webkitOfflineAudioContext_Instance {
  }
  class webkitOfflineAudioContext_Instance extends OfflineAudioContext_Instance {
    constructor (numberOfChannels : number , length : number , sampleRate : number ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  var webkitRTCPeerConnection : { new (a : { iceServers : { url : string } [] } | null , b ? : Object ) : RTCPeerConnection } ;
}
declare namespace ಠ_ಠ.clutz {
  function webkitRequestAnimationFrame (callback : (a : number ) => any , opt_element ? : Element | null ) : number ;
}
declare namespace ಠ_ಠ.clutz {
  /**
   * This has replaced requestFileSystem in Chrome since WebKit revision 84224.
   */
  function webkitRequestFileSystem (type : number , size : number , successCallback : (a : FileSystem ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  /**
   * This has replaced resolveLocalFileSystemURI in Chrome since WebKit revision
   * 84224.
   */
  function webkitResolveLocalFileSystemURI (uri : string , successCallback : (a : Entry ) => any , errorCallback ? : (a : FileError ) => any ) : any ;
}
declare namespace ಠ_ಠ.clutz {
  /**
   * This has been replaced by URL in Chrome since WebKit revision 75739.
   */
  class webkitURL extends webkitURL_Instance {
    static createObjectURL (obj : Object ) : string ;
    static revokeObjectURL (url : string ) : any ;
  }
  class webkitURL_Instance {
    private noStructuralTyping_: any;
    /**
     * This has been replaced by URL in Chrome since WebKit revision 75739.
     */
    constructor (urlString : string , opt_base ? : string ) ;
  }
}
declare namespace ಠ_ಠ.clutz {
  var window__clutz_alias : Window ;
}
declare namespace ಠ_ಠ.clutz.window {
  type BodyInit = Blob | FormData | string ;
}
declare namespace ಠ_ಠ.clutz.window {
  type BufferSource = ArrayBuffer | ArrayBufferView ;
}
declare namespace ಠ_ಠ.clutz.window {
  type CacheQueryOptions = { cacheName ? : string , ignoreMethod ? : boolean , ignoreSearch ? : boolean , ignoreVary ? : boolean , prefixMatch ? : boolean } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type CanvasPixelArray = Uint8ClampedArray | null ;
}
declare namespace ಠ_ಠ.clutz.window {
  type ChildNode = DocumentType | null | Element | CharacterData ;
}
declare namespace ಠ_ಠ.clutz.window {
  type CustomEventInit = { bubbles ? : boolean , cancelable ? : boolean , detail : any } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type DragEventInit = { altKey ? : boolean , bubbles ? : boolean , button ? : number , buttons ? : number , cancelable ? : boolean , clientX ? : number , clientY ? : number , ctrlKey ? : boolean , dataTransfer ? : DataTransfer | null , detail ? : number , metaKey ? : boolean , relatedTarget ? : EventTarget | null , screenX ? : number , screenY ? : number , shiftKey ? : boolean , view ? : Window | null } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type ErrorEventInit = { bubbles ? : boolean , cancelable ? : boolean , colno : number , error : any , filename : string , lineno : number , message : string } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type EventInit = { bubbles ? : boolean , cancelable ? : boolean } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type ExtendableEventInit = { bubbles ? : boolean , cancelable ? : boolean } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type FetchEventInit = { bubbles ? : boolean , cancelable ? : boolean , client ? : ServiceWorkerClient , isReload ? : boolean , request ? : Request } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type FocusEventInit = { bubbles ? : boolean , cancelable ? : boolean , detail ? : number , relatedTarget ? : EventTarget | null , view ? : Window | null } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type FontFaceDescriptors = { featureSettings ? : string , stretch ? : string , style ? : string , unicodeRange ? : string , variant ? : string , weight ? : string } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type GetNotificationOptions = { tag ? : string } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type HeadersInit = Headers | string [] [] ;
}
declare namespace ಠ_ಠ.clutz.window {
  /**
   * Typedef for valid key types according to the w3 specification. Note that this
   * is slightly wider than what is actually allowed, as all Array elements must
   * have a valid key type.
   */
  type IDBKeyType = number | string | Date | any [] ;
}
declare namespace ಠ_ಠ.clutz.window {
  type InstallEventInit = { activeWorker ? : ServiceWorker , bubbles ? : boolean , cancelable ? : boolean } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type IteratorResult = { done : boolean , value ? : any } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type KeyboardEventInit = { altKey ? : boolean , bubbles ? : boolean , cancelable ? : boolean , char ? : string , code ? : string , ctrlKey ? : boolean , detail ? : number , key ? : string , locale ? : string , location ? : number , metaKey ? : boolean , repeat ? : boolean , shiftKey ? : boolean , view ? : Window | null } ;
}
declare namespace ಠ_ಠ.clutz.window {
  var MediaConstraintSet_ : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz.window {
  /**
   * This type is used extensively in
   * {@see http://dev.w3.org/2011/webrtc/editor/webrtc.html} but is not yet
   * defined.
   */
  type MediaConstraints = Object | null ;
}
declare namespace ಠ_ಠ.clutz.window {
  type MediaDeviceKind = string ;
}
declare namespace ಠ_ಠ.clutz.window {
  type MediaQueryListListener = (a : MediaQueryList ) => undefined ;
}
declare namespace ಠ_ಠ.clutz.window {
  type MediaStreamConstraints = Object | null ;
}
declare namespace ಠ_ಠ.clutz.window {
  type MediaStreamTrackState = string ;
}
declare namespace ಠ_ಠ.clutz.window {
  /**
   * This type and two more below are defined as unions with Object because they
   * are normally used as record types by constructing an Object literal, but all
   * of their properties are optional.
   */
  type MediaTrackConstraintSet = Object | null ;
}
declare namespace ಠ_ಠ.clutz.window {
  type MediaTrackConstraints = Object | null ;
}
declare namespace ಠ_ಠ.clutz.window {
  type MidiPermissionDescriptor = { name : PermissionName , sysex : boolean } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type MouseEventInit = { altKey ? : boolean , bubbles ? : boolean , button ? : number , buttons ? : number , cancelable ? : boolean , clientX ? : number , clientY ? : number , ctrlKey ? : boolean , detail ? : number , metaKey ? : boolean , relatedTarget ? : EventTarget | null , screenX ? : number , screenY ? : number , shiftKey ? : boolean , view ? : Window | null } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type MutationObserverInit = { attributeFilter ? : string [] , attributeOldValue ? : boolean , attributes ? : boolean , characterData ? : boolean , characterDataOldValue ? : boolean , childList ? : boolean , subtree ? : boolean } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type NonDocumentTypeChildNode = Element | null | CharacterData ;
}
declare namespace ಠ_ಠ.clutz.window {
  type NotificationOptions = { body ? : string , dir ? : string , icon ? : string , lang ? : string , requireInteraction ? : boolean , tag ? : string } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type NotificationPermissionCallback = (a : string ) => any ;
}
declare namespace ಠ_ಠ.clutz.window {
  type ParentNode = Document | null | DocumentFragment | Element ;
}
declare namespace ಠ_ಠ.clutz.window {
  type PermissionDescriptor = { name : PermissionName } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type PipeOptions = { preventAbort ? : boolean , preventCancel ? : boolean , preventClose ? : boolean } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type ProgressEventInit = { lengthComputable ? : boolean , loaded ? : number , total ? : number } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type PushPermissionDescriptor = { name : PermissionName , userVisibleOnly : boolean } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type PushSubscriptionOptions = { userVisibleOnly ? : boolean } ;
}
declare namespace ಠ_ಠ.clutz.window {
  /**
   * The value of {@code highWaterMark} in a custom strategy must be non-negative.
   */
  type QueuingStrategy = CountQueuingStrategy | ByteLengthQueuingStrategy | { highWaterMark : number , size ? : (a : any ) => number } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type RTCConfiguration = { iceServers : { url : string } [] } | null ;
}
declare namespace ಠ_ಠ.clutz.window {
  var RTCConfigurationRecord_ : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz.window {
  type RTCDataChannelInit = null | { reliable : boolean } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type RTCDataChannelInitRecord_ = { reliable : boolean } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type RTCIceConnectionState = string ;
}
declare namespace ಠ_ಠ.clutz.window {
  type RTCIceGatheringState = string ;
}
declare namespace ಠ_ಠ.clutz.window {
  var RTCIceServer : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz.window {
  var RTCIceServerRecord_ : ಠ_ಠ.clutz.PrivateType;
}
declare namespace ಠ_ಠ.clutz.window {
  type RTCPeerConnectionErrorCallback = (a : string ) => any ;
}
declare namespace ಠ_ಠ.clutz.window {
  type RTCSdpType = string ;
}
declare namespace ಠ_ಠ.clutz.window {
  type RTCSessionDescriptionCallback = (a : RTCSessionDescription ) => any ;
}
declare namespace ಠ_ಠ.clutz.window {
  type RTCSignalingState = string ;
}
declare namespace ಠ_ಠ.clutz.window {
  type RTCStatsCallback = (a : RTCStatsResponse , b ? : MediaStreamTrack | null ) => any ;
}
declare namespace ಠ_ಠ.clutz.window {
  /**
   * TODO(bemasc): Remove this type once it is no longer in use.  It has already
   * been removed from the specification.
   */
  type RTCStatsElement = RTCStatsReport | null ;
}
declare namespace ಠ_ಠ.clutz.window {
  type RTCVoidCallback = ( ) => any ;
}
declare namespace ಠ_ಠ.clutz.window {
  type ReadableStreamSource = undefined | { cancel ? : (a : any ) => Promise < any > | undefined , pull ? : (a : ReadableStreamController ) => Promise < any > | undefined , start ? : (a : ReadableStreamController ) => Promise < any > | undefined } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type RegistrationOptions = { scope : string } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type RequestInfo = Request | string ;
}
declare namespace ಠ_ಠ.clutz.window {
  type RequestInit = { body ? : Blob | FormData | string , cache ? : RequestCache , credentials ? : RequestCredentials , headers ? : Headers | string [] [] , method ? : string , mode ? : RequestMode } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type ResponseInit = { headers : Headers | string [] [] , status : number , statusText : string } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type SQLStatementCallback = (a : SQLTransaction , b : SQLResultSet ) => undefined ;
}
declare namespace ಠ_ಠ.clutz.window {
  type ServiceWorkerClientQueryOptions = { includeUncontrolled ? : boolean } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type Thenable = { then : any } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type TouchEventInit = { bubbles ? : boolean , cancelable ? : boolean , changedTouches ? : ( Touch | null ) [] , detail ? : number , relatedTarget ? : EventTarget | null , targetTouches ? : ( Touch | null ) [] , touches ? : ( Touch | null ) [] , view ? : Window | null } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type TouchInitDict = { clientX ? : number , clientY ? : number , force ? : number , identifier : number , pageX ? : number , pageY ? : number , radiusX ? : number , radiusY ? : number , rotationAngle ? : number , screenX ? : number , screenY ? : number , target : EventTarget } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type TransformStream = { readable : ReadableStream , writable : WritableStream } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type TraversalDocument = { createNodeIterator : (a : Node | null , b ? : number , c ? : NodeFilter | null , d ? : boolean ) => NodeIterator | null , createTreeWalker : (a : Node | null , b ? : number , c ? : NodeFilter | null , d ? : boolean ) => TreeWalker | null } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type UIEventInit = { bubbles ? : boolean , cancelable ? : boolean , detail ? : number , view ? : Window | null } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type VideoPlaybackQuality = { corruptedVideoFrames : number , creationTime : number , droppedVideoFrames : number , totalFrameDelay : number , totalVideoFrames : number } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type WheelEventInit = { altKey ? : boolean , bubbles ? : boolean , button ? : number , buttons ? : number , cancelable ? : boolean , clientX ? : number , clientY ? : number , ctrlKey ? : boolean , deltaMode ? : number , deltaX ? : number , deltaY ? : number , deltaZ ? : number , detail ? : number , metaKey ? : boolean , relatedTarget ? : EventTarget | null , screenX ? : number , screenY ? : number , shiftKey ? : boolean , view ? : Window | null } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type WritableStreamSink = undefined | { abort ? : (a : any ) => Promise < any > | undefined , close ? : ( ) => Promise < any > | undefined , start ? : (a : any ) => Promise < any > | undefined , write ? : (a : any ) => Promise < any > | undefined } ;
}
declare namespace ಠ_ಠ.clutz.window {
  type symbol = any ;
}
declare namespace ಠ_ಠ.clutz.goog.defineClass {
  type ClassDescriptor = { constructor ? : ( ...a : any [] ) => any , statics ? : Object | null } ;
}
