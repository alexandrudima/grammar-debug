declare namespace ಠ_ಠ.clutz.goog {
  var DEBUG : boolean ;
  /**
   * True if goog.dependencies_ is available.
   */
  var DEPENDENCIES_ENABLED : boolean ;
  var DISALLOW_TEST_ONLY_CODE : boolean ;
  var ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING : boolean ;
  var ENABLE_DEBUG_LOADER : boolean ;
  var LOAD_MODULE_USING_EVAL : boolean ;
  var LOCALE : string ;
  var NATIVE_ARRAY_PROTOTYPES : boolean ;
  var SEAL_MODULE_EXPORTS : boolean ;
  var STRICT_MODE_COMPATIBLE : boolean ;
  var TRANSPILE : string ;
  var TRANSPILER : string ;
  var TRUSTED_SITE : boolean ;
  /**
   * When defining a class Foo with an abstract method bar(), you can do:
   * Foo.prototype.bar = goog.abstractMethod
   *
   * Now if a subclass of Foo fails to override bar(), an error will be thrown
   * when bar() is invoked.
   *
   * Note: This does not take the name of the function to override as an argument
   * because that would make it more difficult to obfuscate our JavaScript code.
   */
  function abstractMethod ( ...a : any [] ) : any ;
  /**
   * Adds a dependency from a file to the files it requires.
   * @param relPath The path to the js file.
   * @param provides An array of strings with the names of the objects this file provides.
   * @param requires An array of strings with the names of the objects this file requires.
   * @param opt_loadFlags Parameters indicating how the file must be loaded.  The boolean 'true' is equivalent to {'module': 'goog'} for backwards-compatibility.  Valid properties and values include {'module': 'goog'} and {'lang': 'es6'}.
   */
  function addDependency (relPath : string , provides : string [] , requires : string [] , opt_loadFlags ? : boolean | { [ /* warning: coerced from ? */ key: string ]: string } ) : void ;
  /**
   * Adds a {@code getInstance} static method that always returns the same
   * instance object.
   * @param ctor The constructor for the class to add the static method to.
   */
  function addSingletonGetter (ctor : ( ...a : any [] ) => any ) : void ;
  /**
   * Call up to the superclass.
   *
   * If this is called from a constructor, then this calls the superclass
   * constructor with arguments 1-N.
   *
   * If this is called from a prototype method, then you must pass the name of the
   * method as the second argument to this function. If you do not, you will get a
   * runtime error. This calls the superclass' method with arguments 2-N.
   *
   * This function only works if you use goog.inherits to express inheritance
   * relationships between your classes.
   *
   * This function is a compiler primitive. At compile-time, the compiler will do
   * macro expansion to remove a lot of the extra overhead that this function
   * introduces. The compiler will also enforce a lot of the assumptions that this
   * function makes, and treat it as a compiler error if you break them.
   * @param me Should always be "this".
   * @param opt_methodName The method name if calling a super method.
   * @param var_args The rest of the arguments.
   */
  function base (me : Object , opt_methodName ? : any ,  ...var_args : any [] ) : any ;
  /**
   * Path for included scripts.
   */
  var basePath : string ;
  /**
   * Partially applies this function to a particular 'this object' and zero or
   * more arguments. The result is a new function with some arguments of the first
   * function pre-filled and the value of this 'pre-specified'.
   *
   * Remaining arguments specified at call-time are appended to the pre-specified
   * ones.
   *
   * Also see: {@link #partial}.
   *
   * Usage:
   * <pre>var barMethBound = goog.bind(myFunction, myObj, 'arg1', 'arg2');
   * barMethBound('arg3', 'arg4');</pre>
   * @param fn A function to partially apply.
   * @param selfObj Specifies the object which this should point to when the function is run.
   * @param var_args Additional arguments that are partially applied to the function.
   */
  function bind < T > (fn : ( ( ...a : any [] ) => any ) | null , selfObj : T ,  ...var_args : any [] ) : ( ...a : any [] ) => any ;
  /**
   * Clones a value. The input may be an Object, Array, or basic type. Objects and
   * arrays will be cloned recursively.
   *
   * WARNINGS:
   * <code>goog.cloneObject</code> does not detect reference loops. Objects that
   * refer to themselves will cause infinite recursion.
   *
   * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies
   * UIDs created by <code>getUid</code> into cloned results.
   * @param obj The value to clone.
   */
  function cloneObject (obj : any ) : any ;
  /**
   * Defines a named value. In uncompiled mode, the value is retrieved from
   * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and
   * has the property specified, and otherwise used the defined defaultValue.
   * When compiled the default can be overridden using the compiler
   * options or the value set in the CLOSURE_DEFINES object.
   * @param name The distinguished name to provide.
   */
  function define (name : string , defaultValue : string | number | boolean ) : void ;
  /**
   * Creates a restricted form of a Closure "class":
   * - from the compiler's perspective, the instance returned from the
   * constructor is sealed (no new properties may be added).  This enables
   * better checks.
   * - the compiler will rewrite this definition to a form that is optimal
   * for type checking and optimization (initially this will be a more
   * traditional form).
   * @param superClass The superclass, Object or null.
   * @param def An object literal describing the class.  It may have the following properties: "constructor": the constructor function "statics": an object literal containing methods to add to the constructor as "static" methods or a function that will receive the constructor function as its only parameter to which static properties can be added. all other properties are added to the prototype.
   */
  function defineClass (superClass : ( ( ...a : any [] ) => any ) | null , def : ಠ_ಠ.clutz.goog.defineClass.ClassDescriptor ) : ( ...a : any [] ) => any ;
  /**
   * Exports a property unobfuscated into the object's namespace.
   * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);
   * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);
   * @param object Object whose static property is being exported.
   * @param publicName Unobfuscated name to export.
   * @param symbol Object the name should point to.
   */
  function exportProperty (object : Object | null , publicName : string , symbol : any ) : void ;
  /**
   * Exposes an unobfuscated global namespace path for the given object.
   * Note that fields of the exported object *will* be obfuscated, unless they are
   * exported in turn via this function or goog.exportProperty.
   *
   * Also handy for making public items that are defined in anonymous closures.
   *
   * ex. goog.exportSymbol('public.path.Foo', Foo);
   *
   * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);
   * public.path.Foo.staticFunction();
   *
   * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',
   * Foo.prototype.myMethod);
   * new public.path.Foo().myMethod();
   * @param publicPath Unobfuscated name to export.
   * @param object Object the name should point to.
   * @param opt_objectToExportTo The object to add the path to; default is goog.global.
   */
  function exportSymbol (publicPath : string , object : any , opt_objectToExportTo ? : Object | null ) : void ;
  /**
   * Forward declares a symbol. This is an indication to the compiler that the
   * symbol may be used in the source yet is not required and may not be provided
   * in compilation.
   *
   * The most common usage of forward declaration is code that takes a type as a
   * function parameter but does not need to require it. By forward declaring
   * instead of requiring, no hard dependency is made, and (if not required
   * elsewhere) the namespace may never be required and thus, not be pulled
   * into the JavaScript binary. If it is required elsewhere, it will be type
   * checked as normal.
   * @param name The namespace to forward declare in the form of "goog.package.part".
   */
  function forwardDeclare (name : string ) : void ;
  /**
   * Handles strings that are intended to be used as CSS class names.
   *
   * This function works in tandem with @see goog.setCssNameMapping.
   *
   * Without any mapping set, the arguments are simple joined with a hyphen and
   * passed through unaltered.
   *
   * When there is a mapping, there are two possible styles in which these
   * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)
   * of the passed in css name is rewritten according to the map. In the BY_WHOLE
   * style, the full css name is looked up in the map directly. If a rewrite is
   * not specified by the map, the compiler will output a warning.
   *
   * When the mapping is passed to the compiler, it will replace calls to
   * goog.getCssName with the strings from the mapping, e.g.
   * var x = goog.getCssName('foo');
   * var y = goog.getCssName(this.baseClass, 'active');
   * becomes:
   * var x = 'foo';
   * var y = this.baseClass + '-active';
   *
   * If one argument is passed it will be processed, if two are passed only the
   * modifier will be processed, as it is assumed the first argument was generated
   * as a result of calling goog.getCssName.
   * @param className The class name.
   * @param opt_modifier A modifier to be appended to the class name.
   */
  function getCssName (className : string , opt_modifier ? : string ) : string ;
  /**
   * Adds a hash code field to an object. The hash code is unique for the
   * given object.
   * @param obj The object to get the hash code for.
   */
  function getHashCode (a : Object | null ) : number ;
  /**
   * Gets a localized message.
   *
   * This function is a compiler primitive. If you give the compiler a localized
   * message bundle, it will replace the string at compile-time with a localized
   * version, and expand goog.getMsg call to a concatenated string.
   *
   * Messages must be initialized in the form:
   * <code>
   * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});
   * </code>
   *
   * This function produces a string which should be treated as plain text. Use
   * {@link goog.html.SafeHtmlFormatter} in conjunction with goog.getMsg to
   * produce SafeHtml.
   * @param str Translatable string, places holders in the form {$foo}.
   * @param opt_values Maps place holder name to value.
   */
  function getMsg (str : string , opt_values ? : { [ key: string ]: string } | null ) : string ;
  /**
   * Gets a localized message. If the message does not have a translation, gives a
   * fallback message.
   *
   * This is useful when introducing a new message that has not yet been
   * translated into all languages.
   *
   * This function is a compiler primitive. Must be used in the form:
   * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>
   * where MSG_A and MSG_B were initialized with goog.getMsg.
   * @param a The preferred message.
   * @param b The fallback message.
   */
  function getMsgWithFallback (a : string , b : string ) : string ;
  /**
   * Returns an object based on its fully qualified external name.  The object
   * is not found if null or undefined.  If you are using a compilation pass that
   * renames property names beware that using this function will not find renamed
   * properties.
   * @param name The fully qualified name.
   * @param opt_obj The object within which to look; default is |goog.global|.
   */
  function getObjectByName (name : string , opt_obj ? : Object | null ) : any ;
  /**
   * Gets a unique ID for an object. This mutates the object so that further calls
   * with the same object as a parameter returns the same value. The unique ID is
   * guaranteed to be unique across the current session amongst objects that are
   * passed into {@code getUid}. There is no guarantee that the ID is unique or
   * consistent across sessions. It is unsafe to generate unique ID for function
   * prototypes.
   * @param obj The object to get the unique ID for.
   */
  function getUid (obj : Object | null ) : number ;
  /**
   * Evals JavaScript in the global scope.  In IE this uses execScript, other
   * browsers use goog.global.eval. If goog.global.eval does not evaluate in the
   * global scope (for example, in Safari), appends a script tag instead.
   * Throws an exception if neither execScript or eval is defined.
   * @param script JavaScript string.
   */
  function globalEval (script : string ) : void ;
  /**
   * Globalizes a whole namespace, such as goog or goog.lang.
   * @param obj The namespace to globalize.
   * @param opt_global The object to add the properties to.
   */
  function globalize (obj : Object , opt_global ? : Object | null ) : void ;
  /**
   * Whether the given object is already assigned a unique ID.
   *
   * This does not modify the object.
   * @param obj The object to check.
   */
  function hasUid (obj : Object ) : boolean ;
  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * Usage:
   * <pre>
   * function ParentClass(a, b) { }
   * ParentClass.prototype.foo = function(a) { };
   *
   * function ChildClass(a, b, c) {
   * ChildClass.base(this, 'constructor', a, b);
   * }
   * goog.inherits(ChildClass, ParentClass);
   *
   * var child = new ChildClass('a', 'b', 'see');
   * child.foo(); // This works.
   * </pre>
   * @param childCtor Child class.
   * @param parentCtor Parent class.
   */
  function inherits (childCtor : ( ...a : any [] ) => any , parentCtor : ( ...a : any [] ) => any ) : void ;
  /**
   * Returns true if the specified value is an array.
   * @param val Variable to test.
   */
  function isArray (val : any ) : boolean ;
  /**
   * Returns true if the object looks like an array. To qualify as array like
   * the value needs to be either a NodeList or an object with a Number length
   * property. As a special case, a function value is not array like, because its
   * length property is fixed to correspond to the number of expected arguments.
   * @param val Variable to test.
   */
  function isArrayLike (val : any ) : boolean ;
  /**
   * Returns true if the specified value is a boolean.
   * @param val Variable to test.
   */
  function isBoolean (val : any ) : boolean ;
  /**
   * Returns true if the object looks like a Date. To qualify as Date-like the
   * value needs to be an object and have a getFullYear() function.
   * @param val Variable to test.
   */
  function isDateLike (val : any ) : boolean ;
  /**
   * Returns true if the specified value is not undefined.
   * WARNING: Do not use this to test if an object has a property. Use the in
   * operator instead.
   * @param val Variable to test.
   */
  function isDef (val : any ) : boolean ;
  /**
   * Returns true if the specified value is defined and not null.
   * @param val Variable to test.
   */
  function isDefAndNotNull (val : any ) : boolean ;
  /**
   * Returns true if the specified value is a function.
   * @param val Variable to test.
   */
  function isFunction (val : any ) : boolean ;
  /**
   * Returns true if the specified value is null.
   * @param val Variable to test.
   */
  function isNull (val : any ) : boolean ;
  /**
   * Returns true if the specified value is a number.
   * @param val Variable to test.
   */
  function isNumber (val : any ) : boolean ;
  /**
   * Returns true if the specified value is an object.  This includes arrays and
   * functions.
   * @param val Variable to test.
   */
  function isObject (val : any ) : boolean ;
  /**
   * Returns true if the specified value is a string.
   * @param val Variable to test.
   */
  function isString (val : any ) : boolean ;
  function loadModule (moduleDef : ( (a : any ) => any ) | string ) : void ;
  /**
   * Load a goog.module from the provided URL.  This is not a general purpose
   * code loader and does not support late loading code, that is it should only
   * be used during page load. This method exists to support unit tests and
   * "debug" loaders that would otherwise have inserted script tags. Under the
   * hood this needs to use a synchronous XHR and is not recommeneded for
   * production code.
   *
   * The module's goog.requires must have already been satisified; an exception
   * will be thrown if this is not the case. This assumption is that no
   * "deps.js" file exists, so there is no way to discover and locate the
   * module-to-be-loaded's dependencies and no attempt is made to do so.
   *
   * There should only be one attempt to load a module.  If
   * "goog.loadModuleFromUrl" is called for an already loaded module, an
   * exception will be throw.
   * @param url The URL from which to attempt to load the goog.module.
   */
  function loadModuleFromUrl (url : string ) : void ;
  /**
   * Copies all the members of a source object to a target object. This method
   * does not work on all browsers for all objects that contain keys such as
   * toString or hasOwnProperty. Use goog.object.extend for this purpose.
   * @param target Target.
   * @param source Source.
   */
  function mixin (target : Object | null , source : Object | null ) : void ;
  /**
   * Defines a module in Closure.
   *
   * Marks that this file must be loaded as a module and claims the namespace.
   *
   * A namespace may only be defined once in a codebase. It may be defined using
   * goog.provide() or goog.module().
   *
   * goog.module() has three requirements:
   * - goog.module may not be used in the same file as goog.provide.
   * - goog.module must be the first statement in the file.
   * - only one goog.module is allowed per file.
   *
   * When a goog.module annotated file is loaded, it is enclosed in
   * a strict function closure. This means that:
   * - any variables declared in a goog.module file are private to the file
   * (not global), though the compiler is expected to inline the module.
   * - The code must obey all the rules of "strict" JavaScript.
   * - the file will be marked as "use strict"
   *
   * NOTE: unlike goog.provide, goog.module does not declare any symbols by
   * itself. If declared symbols are desired, use
   * goog.module.declareLegacyNamespace().
   *
   *
   * See the public goog.module proposal: http://goo.gl/Va1hin
   * @param name Namespace provided by this file in the form "goog.package.part", is expected but not required.
   */
  function module (name : string ) : void ;
  function now ( ) : number ;
  /**
   * Null function used for default values of callbacks, etc.
   */
  function nullFunction ( ) : void ;
  /**
   * Like goog.bind(), except that a 'this object' is not required. Useful when
   * the target function is already bound.
   *
   * Usage:
   * var g = goog.partial(f, arg1, arg2);
   * g(arg3, arg4);
   * @param fn A function to partially apply.
   * @param var_args Additional arguments that are partially applied to fn.
   */
  function partial (fn : ( ( ...a : any [] ) => any ) | null ,  ...var_args : any [] ) : ( ...a : any [] ) => any ;
  /**
   * Defines a namespace in Closure.
   *
   * A namespace may only be defined once in a codebase. It may be defined using
   * goog.provide() or goog.module().
   *
   * The presence of one or more goog.provide() calls in a file indicates
   * that the file defines the given objects/namespaces.
   * Provided symbols must not be null or undefined.
   *
   * In addition, goog.provide() creates the object stubs for a namespace
   * (for example, goog.provide("goog.foo.bar") will create the object
   * goog.foo.bar if it does not already exist).
   *
   * Build tools also scan for provide/require/module statements
   * to discern dependencies, build dependency files (see deps.js), etc.
   * @param name Namespace provided by this file in the form "goog.package.part".
   */
  function provide (name : string ) : void ;
  /**
   * Removes the hash code field from an object.
   * @param obj The object to remove the field from.
   */
  function removeHashCode (a : Object | null ) : any ;
  /**
   * Removes the unique ID from an object. This is useful if the object was
   * previously mutated using {@code goog.getUid} in which case the mutation is
   * undone.
   * @param obj The object to remove the unique ID field from.
   */
  function removeUid (obj : Object | null ) : void ;
  function require (name : string ) : ಠ_ಠ.clutz.ClosureSymbolNotGoogProvided;
  /**
   * Allow for aliasing within scope functions.  This function exists for
   * uncompiled code - in compiled code the calls will be inlined and the aliases
   * applied.  In uncompiled code the function is simply run since the aliases as
   * written are valid JavaScript.
   * @param fn Function to call.  This function can contain aliases to namespaces (e.g. "var dom = goog.dom") or classes (e.g. "var Timer = goog.Timer").
   */
  function scope (fn : ( ) => any ) : void ;
  /**
   * Sets the map to check when returning a value from goog.getCssName(). Example:
   * <pre>
   * goog.setCssNameMapping({
   * "goog": "a",
   * "disabled": "b",
   * });
   *
   * var x = goog.getCssName('goog');
   * // The following evaluates to: "a a-b".
   * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')
   * </pre>
   * When declared as a map of string literals to string literals, the JSCompiler
   * will replace all calls to goog.getCssName() using the supplied map if the
   * --process_closure_primitives flag is set.
   * @param mapping A map of strings to strings where keys are possible arguments to goog.getCssName() and values are the corresponding values that should be returned.
   * @param opt_style The style of css name mapping. There are two valid options: 'BY_PART', and 'BY_WHOLE'.
   */
  function setCssNameMapping (mapping : Object , opt_style ? : string ) : void ;
  /**
   * Marks that the current file should only be used for testing, and never for
   * live code in production.
   *
   * In the case of unit tests, the message may optionally be an exact namespace
   * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra
   * provide (if not explicitly defined in the code).
   * @param opt_message Optional message to add to the error that's raised when used in production code.
   */
  function setTestOnly (opt_message ? : string ) : void ;
  /**
   * Sealing classes breaks the older idiom of assigning properties on the
   * prototype rather than in the constructor. As such, goog.defineClass
   * must not seal subclasses of these old-style classes until they are fixed.
   * Until then, this marks a class as "broken", instructing defineClass
   * not to seal subclasses.
   * @param ctr The legacy constructor to tag as unsealable.
   */
  function tagUnsealableClass (ctr : ( ...a : any [] ) => any ) : void ;
  /**
   * This is a "fixed" version of the typeof operator.  It differs from the typeof
   * operator in such a way that null returns 'null' and arrays return 'array'.
   * @param value The value to get the type of.
   */
  function typeOf (value : any ) : string ;
}
declare module 'goog:goog' {
  import alias = ಠ_ಠ.clutz.goog;
  export = alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * A deprecated alias.
   */
  type Delay < THIS > = ಠ_ಠ.clutz.goog.async.Delay < THIS > ;
  var Delay : typeof ಠ_ಠ.clutz.goog.async.Delay ;
}
declare module 'goog:goog.Delay' {
  import alias = ಠ_ಠ.clutz.goog.Delay;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * Class that provides the basic implementation for disposable objects. If your
   * class holds one or more references to COM objects, DOM nodes, or other
   * disposable objects, it should extend this class or implement the disposable
   * interface (defined in goog.disposable.IDisposable).
   */
  class Disposable extends Disposable_Instance {
    static INCLUDE_STACK_ON_CREATION : boolean ;
    static MONITORING_MODE : number ;
    /**
     * Clears the registry of undisposed objects but doesn't dispose of them.
     */
    static clearUndisposedObjects ( ) : void ;
    static getUndisposedObjects ( ) : ಠ_ಠ.clutz.goog.Disposable [] ;
    /**
     * Returns True if we can verify the object is disposed.
     * Calls {@code isDisposed} on the argument if it supports it.  If obj
     * is not an object with an isDisposed() method, return false.
     * @param obj The object to investigate.
     */
    static isDisposed (obj : any ) : boolean ;
  }
  class Disposable_Instance implements ಠ_ಠ.clutz.goog.disposable.IDisposable {
    private noStructuralTyping_: any;
    /**
     * Invokes a callback function when this object is disposed. Callbacks are
     * invoked in the order in which they were added. If a callback is added to
     * an already disposed Disposable, it will be called immediately.
     * @param callback The callback function.
     * @param opt_scope An optional scope to call the callback in.
     */
    addOnDisposeCallback < T > (callback : ( ) => any , opt_scope ? : T ) : void ;
    /**
     * If monitoring the goog.Disposable instances is enabled, stores the creation
     * stack trace of the Disposable instance.
     */
    creationStack : string ;
    /**
     * Disposes of the object. If the object hasn't already been disposed of, calls
     * {@link #disposeInternal}. Classes that extend {@code goog.Disposable} should
     * override {@link #disposeInternal} in order to delete references to COM
     * objects, DOM nodes, and other disposable objects. Reentrant.
     */
    dispose ( ) : void ;
    /**
     * Deletes or nulls out any references to COM objects, DOM nodes, or other
     * disposable objects. Classes that extend {@code goog.Disposable} should
     * override this method.
     * Not reentrant. To avoid calling it twice, it must only be called from the
     * subclass' {@code disposeInternal} method. Everywhere else the public
     * {@code dispose} method must be used.
     * For example:
     * <pre>
     * mypackage.MyClass = function() {
     * mypackage.MyClass.base(this, 'constructor');
     * // Constructor logic specific to MyClass.
     * ...
     * };
     * goog.inherits(mypackage.MyClass, goog.Disposable);
     *
     * mypackage.MyClass.prototype.disposeInternal = function() {
     * // Dispose logic specific to MyClass.
     * ...
     * // Call superclass's disposeInternal at the end of the subclass's, like
     * // in C++, to avoid hard-to-catch issues.
     * mypackage.MyClass.base(this, 'disposeInternal');
     * };
     * </pre>
     */
    disposeInternal ( ) : void ;
    getDisposed ( ) : boolean ;
    isDisposed ( ) : boolean ;
    /**
     * Associates a disposable object with this object so that they will be disposed
     * together.
     * @param disposable that will be disposed when this object is disposed.
     */
    registerDisposable (disposable : ಠ_ಠ.clutz.goog.disposable.IDisposable | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.Disposable {
  type MonitoringMode = number ;
  var MonitoringMode : {
    INTERACTIVE : MonitoringMode ,
    OFF : MonitoringMode ,
    PERMANENT : MonitoringMode ,
  };
}
declare module 'goog:goog.Disposable' {
  import alias = ಠ_ಠ.clutz.goog.Disposable;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * A history management object. Can be instantiated in user-visible mode (uses
   * the address fragment to manage state) or in hidden mode. This object should
   * be created from a script in the document body before the document has
   * finished loading.
   *
   * To store the hidden states in browsers other than IE, a hidden iframe is
   * used. It must point to a valid html page on the same domain (which can and
   * probably should be blank.)
   *
   * Sample instantiation and usage:
   *
   * <pre>
   * // Instantiate history to use the address bar for state.
   * var h = new goog.History();
   * goog.events.listen(h, goog.history.EventType.NAVIGATE, navCallback);
   * h.setEnabled(true);
   *
   * // Any changes to the location hash will call the following function.
   * function navCallback(e) {
   * alert('Navigated to state "' + e.token + '"');
   * }
   *
   * // The history token can also be set from code directly.
   * h.setToken('foo');
   * </pre>
   */
  class History extends History_Instance {
    /**
     * Whether the browser always requires the hash to be present. Internet Explorer
     * before version 8 will reload the HTML page if the hash is omitted.
     */
    static HASH_ALWAYS_REQUIRED : boolean ;
    /**
     * Whether the current browser is Internet Explorer prior to version 8. Many IE
     * specific workarounds developed before version 8 are unnecessary in more
     * current versions.
     */
    static LEGACY_IE : boolean ;
    /**
     * Whether the browser supports HTML5 history management's onhashchange event.
     * {@link http://www.w3.org/TR/html5/history.html}. IE 9 in compatibility mode
     * indicates that onhashchange is in window, but testing reveals the event
     * isn't actually fired.
     */
    static isOnHashChangeSupported ( ) : boolean ;
  }
  class History_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * A history management object. Can be instantiated in user-visible mode (uses
     * the address fragment to manage state) or in hidden mode. This object should
     * be created from a script in the document body before the document has
     * finished loading.
     *
     * To store the hidden states in browsers other than IE, a hidden iframe is
     * used. It must point to a valid html page on the same domain (which can and
     * probably should be blank.)
     *
     * Sample instantiation and usage:
     *
     * <pre>
     * // Instantiate history to use the address bar for state.
     * var h = new goog.History();
     * goog.events.listen(h, goog.history.EventType.NAVIGATE, navCallback);
     * h.setEnabled(true);
     *
     * // Any changes to the location hash will call the following function.
     * function navCallback(e) {
     * alert('Navigated to state "' + e.token + '"');
     * }
     *
     * // The history token can also be set from code directly.
     * h.setToken('foo');
     * </pre>
     * @param opt_invisible True to use hidden history states instead of the user-visible location hash.
     * @param opt_blankPageUrl A URL to a blank page on the same server. Required if opt_invisible is true. This URL is also used as the src for the iframe used to track history state in IE (if not specified the iframe is not given a src attribute). Access is Denied error may occur in IE7 if the window's URL's scheme is https, and this URL is not specified.
     * @param opt_input The hidden input element to be used to store the history token.  If not provided, a hidden input element will be created using document.write.
     * @param opt_iframe The hidden iframe that will be used by IE for pushing history state changes, or by all browsers if opt_invisible is true. If not provided, a hidden iframe element will be created using document.write.
     */
    constructor (opt_invisible ? : boolean , opt_blankPageUrl ? : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl , opt_input ? : HTMLInputElement | null , opt_iframe ? : HTMLIFrameElement | null ) ;
    /**
     * IE-only variable for determining if the document has loaded.
     */
    documentLoaded : boolean ;
    disposeInternal ( ) : void ;
    getToken ( ) : string ;
    /**
     * Callback for the window onload event in IE. This is necessary to read the
     * value of the hidden input after restoring a history session. The value of
     * input elements is not viewable until after window onload for some reason (the
     * iframe state is similarly unavailable during the loading phase.)  If
     * setEnabled is called before the iframe has completed loading, the history
     * object will actually be enabled at this point.
     */
    onDocumentLoaded ( ) : void ;
    /**
     * Replaces the current history state without affecting the rest of the history
     * stack.
     * @param token The history state identifier.
     * @param opt_title Optional title used when setting the hidden iframe title in IE.
     */
    replaceToken (token : string , opt_title ? : string ) : void ;
    /**
     * Starts or stops the History polling loop. When enabled, the History object
     * will immediately fire an event for the current location. The caller can set
     * up event listeners between the call to the constructor and the call to
     * setEnabled.
     *
     * On IE, actual startup may be delayed until the iframe and hidden input
     * element have been loaded and can be polled. This behavior is transparent to
     * the caller.
     * @param enable Whether to enable the history polling loop.
     */
    setEnabled (enable : boolean ) : void ;
    /**
     * Sets the history state. When user visible states are used, the URL fragment
     * will be set to the provided token.  Sometimes it is necessary to set the
     * history token before the document title has changed, in this case IE's
     * history drop down can be out of sync with the token.  To get around this
     * problem, the app can pass in a title to use with the hidden iframe.
     * @param token The history state identifier.
     * @param opt_title Optional title used when setting the hidden iframe title in IE.
     */
    setToken (token : string , opt_title ? : string ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.History {
  type PollingType = number ;
  var PollingType : {
    LONG : PollingType ,
    NORMAL : PollingType ,
  };
}
declare module 'goog:goog.History' {
  import alias = ಠ_ಠ.clutz.goog.History;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.History {
  /**
   * Constant for the history change event type.
   */
  type Event = ಠ_ಠ.clutz.goog.history.Event ;
  var Event : typeof ಠ_ಠ.clutz.goog.history.Event ;
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.History.Event'): typeof ಠ_ಠ.clutz.goog.History.Event;
}
declare module 'goog:goog.History.Event' {
  import alias = ಠ_ಠ.clutz.goog.History.Event;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.History {
  /**
   * Constant for the history change event type.
   */
  type EventType = string ;
  var EventType : {
    NAVIGATE : EventType ,
  };
}
declare namespace ಠ_ಠ.clutz.goog {
  function require(name: 'goog.History.EventType'): typeof ಠ_ಠ.clutz.goog.History.EventType;
}
declare module 'goog:goog.History.EventType' {
  import alias = ಠ_ಠ.clutz.goog.History.EventType;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * Promises provide a result that may be resolved asynchronously. A Promise may
   * be resolved by being fulfilled with a fulfillment value, rejected with a
   * rejection reason, or blocked by another Promise. A Promise is said to be
   * settled if it is either fulfilled or rejected. Once settled, the Promise
   * result is immutable.
   *
   * Promises may represent results of any type, including undefined. Rejection
   * reasons are typically Errors, but may also be of any type. Closure Promises
   * allow for optional type annotations that enforce that fulfillment values are
   * of the appropriate types at compile time.
   *
   * The result of a Promise is accessible by calling {@code then} and registering
   * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise
   * is settled, the relevant callbacks are invoked with the fulfillment value or
   * rejection reason as argument. Callbacks are always invoked in the order they
   * were registered, even when additional {@code then} calls are made from inside
   * another callback. A callback is always run asynchronously sometime after the
   * scope containing the registering {@code then} invocation has returned.
   *
   * If a Promise is resolved with another Promise, the first Promise will block
   * until the second is settled, and then assumes the same result as the second
   * Promise. This allows Promises to depend on the results of other Promises,
   * linking together multiple asynchronous operations.
   *
   * This implementation is compatible with the Promises/A+ specification and
   * passes that specification's conformance test suite. A Closure Promise may be
   * resolved with a Promise instance (or sufficiently compatible Promise-like
   * object) created by other Promise implementations. From the specification,
   * Promise-like objects are known as "Thenables".
   */
  class Promise < TYPE , RESOLVER_CONTEXT > extends Promise_Instance < TYPE , RESOLVER_CONTEXT > {
    static DEFAULT_MAX_UNUSED : number ;
    static LONG_STACK_TRACES : boolean ;
    static UNHANDLED_REJECTION_DELAY : number ;
    static all < TYPE > (promises : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : ಠ_ಠ.clutz.goog.Promise < TYPE [] , any > ;
    static allSettled < TYPE > (promises : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : ಠ_ಠ.clutz.goog.Promise < { fulfilled : boolean , reason ? : any , value ? : TYPE } [] , any > ;
    static firstFulfilled < TYPE > (promises : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : ಠ_ಠ.clutz.goog.Promise < TYPE , any > ;
    static race < TYPE > (promises : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : ಠ_ಠ.clutz.goog.Promise < TYPE , any > ;
    static reject (opt_reason ? : any ) : ಠ_ಠ.clutz.goog.Promise < any , any > ;
    static resolve < VALUE , RESULT > (opt_value ? : VALUE ) : RESULT ;
    /**
     * Sets a handler that will be called with reasons from unhandled rejected
     * Promises. If the rejected Promise (or one of its descendants) has an
     * {@code onRejected} callback registered, the rejection will be considered
     * handled, and the rejection handler will not be called.
     *
     * By default, unhandled rejections are rethrown so that the error may be
     * captured by the developer console or a {@code window.onerror} handler.
     * @param handler A function that will be called with reasons from rejected Promises. Defaults to {@code goog.async.throwException}.
     */
    static setUnhandledRejectionHandler (handler : (a : any ) => any ) : void ;
    static withResolver < TYPE > ( ) : ಠ_ಠ.clutz.goog.promise.Resolver < TYPE > ;
  }
  class Promise_Instance < TYPE , RESOLVER_CONTEXT > implements ಠ_ಠ.clutz.goog.Thenable < TYPE > {
    private noStructuralTyping_: any;
    /**
     * Promises provide a result that may be resolved asynchronously. A Promise may
     * be resolved by being fulfilled with a fulfillment value, rejected with a
     * rejection reason, or blocked by another Promise. A Promise is said to be
     * settled if it is either fulfilled or rejected. Once settled, the Promise
     * result is immutable.
     *
     * Promises may represent results of any type, including undefined. Rejection
     * reasons are typically Errors, but may also be of any type. Closure Promises
     * allow for optional type annotations that enforce that fulfillment values are
     * of the appropriate types at compile time.
     *
     * The result of a Promise is accessible by calling {@code then} and registering
     * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise
     * is settled, the relevant callbacks are invoked with the fulfillment value or
     * rejection reason as argument. Callbacks are always invoked in the order they
     * were registered, even when additional {@code then} calls are made from inside
     * another callback. A callback is always run asynchronously sometime after the
     * scope containing the registering {@code then} invocation has returned.
     *
     * If a Promise is resolved with another Promise, the first Promise will block
     * until the second is settled, and then assumes the same result as the second
     * Promise. This allows Promises to depend on the results of other Promises,
     * linking together multiple asynchronous operations.
     *
     * This implementation is compatible with the Promises/A+ specification and
     * passes that specification's conformance test suite. A Closure Promise may be
     * resolved with a Promise instance (or sufficiently compatible Promise-like
     * object) created by other Promise implementations. From the specification,
     * Promise-like objects are known as "Thenables".
     * @param resolver Initialization function that is invoked immediately with {@code resolve} and {@code reject} functions as arguments. The Promise is resolved or rejected with the first argument passed to either function.
     * @param opt_context An optional context for executing the resolver function. If unspecified, the resolver function will be executed in the default scope.
     */
    constructor (resolver : (a : (a ? : TYPE | IThenable < TYPE > | null | { then : any } ) => any , b : (a ? : any ) => any ) => undefined , opt_context ? : RESOLVER_CONTEXT ) ;
    /**
     * Cancels the Promise if it is still pending by rejecting it with a cancel
     * Error. No action is performed if the Promise is already resolved.
     *
     * All child Promises of the canceled Promise will be rejected with the same
     * cancel error, as with normal Promise rejection. If the Promise to be canceled
     * is the only child of a pending Promise, the parent Promise will also be
     * canceled. Cancellation may propagate upward through multiple generations.
     * @param opt_message An optional debugging message for describing the cancellation reason.
     */
    cancel (opt_message ? : string ) : void ;
    /**
     * Adds callbacks that will operate on the result of the Promise, returning a
     * new child Promise.
     *
     * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked
     * with the fulfillment value as argument, and the child Promise will be
     * fulfilled with the return value of the callback. If the callback throws an
     * exception, the child Promise will be rejected with the thrown value instead.
     *
     * If the Promise is rejected, the {@code onRejected} callback will be invoked
     * with the rejection reason as argument, and the child Promise will be resolved
     * with the return value or rejected with the thrown value of the callback.
     */
    then < VALUE , THIS , RESULT > (opt_onFulfilled ? : ( (a : TYPE ) => VALUE ) | null , opt_onRejected ? : ( (a : any ) => any ) | null , opt_context ? : THIS ) : RESULT ;
    /**
     * Adds a callback that will be invoked when the Promise is settled (fulfilled
     * or rejected). The callback receives no argument, and no new child Promise is
     * created. This is useful for ensuring that cleanup takes place after certain
     * asynchronous operations. Callbacks added with {@code thenAlways} will be
     * executed in the same order with other calls to {@code then},
     * {@code thenAlways}, or {@code thenCatch}.
     *
     * Since it does not produce a new child Promise, cancellation propagation is
     * not prevented by adding callbacks with {@code thenAlways}. A Promise that has
     * a cleanup handler added with {@code thenAlways} will be canceled if all of
     * its children created by {@code then} (or {@code thenCatch}) are canceled.
     * Additionally, since any rejections are not passed to the callback, it does
     * not stop the unhandled rejection handler from running.
     * @param onSettled A function that will be invoked when the Promise is settled (fulfilled or rejected).
     * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed in the global scope.
     */
    thenAlways < THIS > (onSettled : ( ) => undefined , opt_context ? : THIS ) : ಠ_ಠ.clutz.goog.Promise < TYPE , any > ;
    /**
     * Adds a callback that will be invoked only if the Promise is rejected. This
     * is equivalent to {@code then(null, onRejected)}.
     * @param onRejected A function that will be invoked with the rejection reason if the Promise is rejected.
     * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed in the global scope.
     */
    thenCatch < THIS > (onRejected : (a : any ) => any , opt_context ? : THIS ) : ಠ_ಠ.clutz.goog.Promise < any , any > ;
    /**
     * Adds callbacks that will operate on the result of the Promise without
     * returning a child Promise (unlike "then").
     *
     * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked
     * with the fulfillment value as argument.
     *
     * If the Promise is rejected, the {@code onRejected} callback will be invoked
     * with the rejection reason as argument.
     * @param opt_onFulfilled A function that will be invoked with the fulfillment value if the Promise is fulfilled.
     * @param opt_onRejected A function that will be invoked with the rejection reason if the Promise is rejected.
     * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed with the default this.
     */
    thenVoid < THIS > (opt_onFulfilled ? : ( (a : TYPE ) => any ) | null , opt_onRejected ? : ( (a : any ) => any ) | null , opt_context ? : THIS ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.Promise {
  class CancellationError extends CancellationError_Instance {
  }
  class CancellationError_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
    /**
     * Error used as a rejection reason for canceled Promises.
     */
    constructor (opt_message ? : string ) ;
  }
}
declare module 'goog:goog.Promise' {
  import alias = ಠ_ಠ.clutz.goog.Promise;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * Provides a more strict interface for Thenables in terms of
   * http://promisesaplus.com for interop with {@see goog.Promise}.
   */
  interface Thenable < TYPE > extends IThenable < TYPE > {
    /**
     * Adds callbacks that will operate on the result of the Thenable, returning a
     * new child Promise.
     *
     * If the Thenable is fulfilled, the {@code onFulfilled} callback will be
     * invoked with the fulfillment value as argument, and the child Promise will
     * be fulfilled with the return value of the callback. If the callback throws
     * an exception, the child Promise will be rejected with the thrown value
     * instead.
     *
     * If the Thenable is rejected, the {@code onRejected} callback will be invoked
     * with the rejection reason as argument, and the child Promise will be rejected
     * with the return value of the callback or thrown value.
     * @param opt_onFulfilled A function that will be invoked with the fulfillment value if the Promise is fulfilled.
     * @param opt_onRejected A function that will be invoked with the rejection reason if the Promise is rejected.
     * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed with the default this.
     */
    then < VALUE , THIS , RESULT > (opt_onFulfilled ? : ( (a : TYPE ) => VALUE ) | null , opt_onRejected ? : ( (a : any ) => any ) | null , opt_context ? : THIS ) : RESULT ;
  }
}
declare namespace ಠ_ಠ.clutz.goog.Thenable {
  var IMPLEMENTED_BY_PROP : string ;
  function addImplementation (ctor : { new ( ...a : any [] ) : ಠ_ಠ.clutz.goog.Thenable < any > } ) : void ;
  function isImplementedBy (object : any ) : boolean ;
}
declare module 'goog:goog.Thenable' {
  import alias = ಠ_ಠ.clutz.goog.Thenable;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * A deprecated alias.
   */
  type Throttle < T > = ಠ_ಠ.clutz.goog.async.Throttle < T > ;
  var Throttle : typeof ಠ_ಠ.clutz.goog.async.Throttle ;
}
declare module 'goog:goog.Throttle' {
  import alias = ಠ_ಠ.clutz.goog.Throttle;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * Class for handling timing events.
   */
  class Timer extends Timer_Instance {
    /**
     * Constant for the timer's event type.
     */
    static TICK : string ;
    /**
     * Calls the given function once, after the optional pause.
     * <p>
     * The function is always called asynchronously, even if the delay is 0. This
     * is a common trick to schedule a function to run after a batch of browser
     * event processing.
     * @param listener Function or object that has a handleEvent method.
     * @param opt_delay Milliseconds to wait; default is 0.
     * @param opt_handler Object in whose scope to call the listener.
     */
    static callOnce < SCOPE > (listener : ( ( ) => any ) | { handleEvent : ( ) => any } | null , opt_delay ? : number , opt_handler ? : SCOPE ) : number ;
    /**
     * Clears a timeout initiated by {@link #callOnce}.
     * @param timerId A timer ID.
     */
    static clear (timerId : number | null ) : void ;
    /**
     * An object that implements {@code setTimeout}, {@code setInterval},
     * {@code clearTimeout} and {@code clearInterval}. We default to the global
     * object. Changing {@code goog.Timer.defaultTimerObject} changes the object for
     * all timer instances which can be useful if your environment has some other
     * implementation of timers you'd like to use.
     */
    static defaultTimerObject : { clearTimeout : any , setTimeout : any } ;
    /**
     * Variable that controls the timer error correction. If the timer is called
     * before the requested interval times {@code intervalScale}, which often
     * happens on Mozilla, the timer is rescheduled.
     */
    static intervalScale : number ;
    static promise < RESULT > (delay : number , opt_result ? : RESULT | ಠ_ಠ.clutz.goog.Thenable < RESULT > | null | { then : any } ) : ಠ_ಠ.clutz.goog.Promise < RESULT , any > ;
  }
  class Timer_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
    /**
     * Class for handling timing events.
     * @param opt_interval Number of ms between ticks (default: 1ms).
     * @param opt_timerObject An object that has {@code setTimeout}, {@code setInterval}, {@code clearTimeout} and {@code clearInterval} (e.g., {@code window}).
     */
    constructor (opt_interval ? : number , opt_timerObject ? : Object | null ) ;
    /**
     * Dispatches the TICK event. This is its own method so subclasses can override.
     */
    dispatchTick ( ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Whether this timer is enabled
     */
    enabled : boolean ;
    /**
     * Gets the interval of the timer.
     */
    getInterval ( ) : number ;
    /**
     * Sets the interval of the timer.
     * @param interval Number of ms between ticks.
     */
    setInterval (interval : number ) : void ;
    /**
     * Starts the timer.
     */
    start ( ) : void ;
    /**
     * Stops the timer.
     */
    stop ( ) : void ;
  }
}
declare module 'goog:goog.Timer' {
  import alias = ಠ_ಠ.clutz.goog.Timer;
  export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * This class contains setters and getters for the parts of the URI.
   * The <code>getXyz</code>/<code>setXyz</code> methods return the decoded part
   * -- so<code>goog.Uri.parse('/foo%20bar').getPath()</code> will return the
   * decoded path, <code>/foo bar</code>.
   *
   * Reserved characters (see RFC 3986 section 2.2) can be present in
   * their percent-encoded form in scheme, domain, and path URI components and
   * will not be auto-decoded. For example:
   * <code>goog.Uri.parse('rel%61tive/path%2fto/resource').getPath()</code> will
   * return <code>relative/path%2fto/resource</code>.
   *
   * The constructor accepts an optional unparsed, raw URI string.  The parser
   * is relaxed, so special characters that aren't escaped but don't cause
   * ambiguities will not cause parse failures.
   *
   * All setters return <code>this</code> and so may be chained, a la
   * <code>goog.Uri.parse('/foo').setFragment('part').toString()</code>.
   */
  class Uri extends Uri_Instance {
    /**
     * Parameter name added to stop caching.
     */
    static RANDOM_PARAM : string ;
    /**
     * Creates a new goog.Uri object from unencoded parts.
     * @param opt_scheme Scheme/protocol or full URI to parse.
     * @param opt_userInfo username:password.
     * @param opt_domain www.google.com.
     * @param opt_port 9830.
     * @param opt_path /some/path/to/a/file.html.
     * @param opt_query a=1&b=2.
     * @param opt_fragment The fragment without the #.
     * @param opt_ignoreCase Whether to ignore parameter name case in #getParameterValue.
     */
    static create (opt_scheme ? : string | null , opt_userInfo ? : string | null , opt_domain ? : string | null , opt_port ? : number | null , opt_path ? : string | null , opt_query ? : string | ಠ_ಠ.clutz.goog.Uri.QueryData | null , opt_fragment ? : string | null , opt_ignoreCase ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Checks whether two URIs have the same domain.
     * @param uri1String First URI string.
     * @param uri2String Second URI string.
     */
    static haveSameDomain (uri1String : string , uri2String : string ) : boolean ;
    /**
     * Creates a uri from the string form.  Basically an alias of new goog.Uri().
     * If a Uri object is passed to parse then it will return a clone of the object.
     * @param uri Raw URI string or instance of Uri object.
     * @param opt_ignoreCase Whether to ignore the case of parameter names in #getParameterValue.
     */
    static parse (uri : any , opt_ignoreCase ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * If true, we preserve the type of query parameters set programmatically.
     *
     * This means that if you set a parameter to a boolean, and then call
     * getParameterValue, you will get a boolean back.
     *
     * If false, we will coerce parameters to strings, just as they would
     * appear in real URIs.
     *
     * TODO(nicksantos): Remove this once people have time to fix all tests.
     */
    static preserveParameterTypesCompatibilityFlag : boolean ;
    /**
     * Removes dot segments in given path component, as described in
     * RFC 3986, section 5.2.4.
     * @param path A non-empty path component.
     */
    static removeDotSegments (path : string ) : string ;
    /**
     * Resolves a relative Uri against a base Uri, accepting both strings and
     * Uri objects.
     * @param base Base Uri.
     * @param rel Relative Uri.
     */
    static resolve (base : any , rel : any ) : ಠ_ಠ.clutz.goog.Uri ;
  }
  class Uri_Instance {
    private noStructuralTyping_: any;
    /**
     * This class contains setters and getters for the parts of the URI.
     * The <code>getXyz</code>/<code>setXyz</code> methods return the decoded part
     * -- so<code>goog.Uri.parse('/foo%20bar').getPath()</code> will return the
     * decoded path, <code>/foo bar</code>.
     *
     * Reserved characters (see RFC 3986 section 2.2) can be present in
     * their percent-encoded form in scheme, domain, and path URI components and
     * will not be auto-decoded. For example:
     * <code>goog.Uri.parse('rel%61tive/path%2fto/resource').getPath()</code> will
     * return <code>relative/path%2fto/resource</code>.
     *
     * The constructor accepts an optional unparsed, raw URI string.  The parser
     * is relaxed, so special characters that aren't escaped but don't cause
     * ambiguities will not cause parse failures.
     *
     * All setters return <code>this</code> and so may be chained, a la
     * <code>goog.Uri.parse('/foo').setFragment('part').toString()</code>.
     * @param opt_uri Optional string URI to parse (use goog.Uri.create() to create a URI from parts), or if a goog.Uri is passed, a clone is created.
     * @param opt_ignoreCase If true, #getParameterValue will ignore the case of the parameter name.
     */
    constructor (opt_uri ? : any , opt_ignoreCase ? : boolean ) ;
    /**
     * Clones the URI instance.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Checks if this Uri has been marked as read only, and if so, throws an error.
     * This should be called whenever any modifying function is called.
     */
    enforceReadOnly ( ) : void ;
    getDecodedQuery ( ) : string ;
    getDomain ( ) : string ;
    getEncodedQuery ( ) : string ;
    getFragment ( ) : string ;
    getIgnoreCase ( ) : boolean ;
    /**
     * Returns the first value for a given cgi parameter or undefined if the given
     * parameter name does not appear in the query string.
     * @param paramName Unescaped parameter name.
     */
    getParameterValue (paramName : string ) : string | undefined ;
    /**
     * Returns the value<b>s</b> for a given cgi parameter as a list of decoded
     * query parameter values.
     * @param name The parameter to get values for.
     */
    getParameterValues (name : string ) : any [] ;
    getPath ( ) : string ;
    getPort ( ) : number | null ;
    getQuery ( ) : string ;
    /**
     * Returns the query data.
     */
    getQueryData ( ) : ಠ_ಠ.clutz.goog.Uri.QueryData ;
    getScheme ( ) : string ;
    getUserInfo ( ) : string ;
    hasDomain ( ) : boolean ;
    hasFragment ( ) : boolean ;
    hasPath ( ) : boolean ;
    hasPort ( ) : boolean ;
    hasQuery ( ) : boolean ;
    /**
     * Returns true if this has the same domain as that of uri2.
     * @param uri2 The URI object to compare to.
     */
    hasSameDomainAs (uri2 : ಠ_ಠ.clutz.goog.Uri ) : boolean ;
    hasScheme ( ) : boolean ;
    hasUserInfo ( ) : boolean ;
    isReadOnly ( ) : boolean ;
    /**
     * Adds a random parameter to the Uri.
     */
    makeUnique ( ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Removes the named query parameter.
     * @param key The parameter to remove.
     */
    removeParameter (key : string ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Resolves the given relative URI (a goog.Uri object), using the URI
     * represented by this instance as the base URI.
     *
     * There are several kinds of relative URIs:<br>
     * 1. foo - replaces the last part of the path, the whole query and fragment<br>
     * 2. /foo - replaces the the path, the query and fragment<br>
     * 3. //foo - replaces everything from the domain on.  foo is a domain name<br>
     * 4. ?foo - replace the query and fragment<br>
     * 5. #foo - replace the fragment only
     *
     * Additionally, if relative URI has a non-empty path, all ".." and "."
     * segments will be resolved, as described in RFC 3986.
     * @param relativeUri The relative URI to resolve.
     */
    resolve (relativeUri : ಠ_ಠ.clutz.goog.Uri ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the domain.
     * @param newDomain New domain value.
     * @param opt_decode Optional param for whether to decode new value.
     */
    setDomain (newDomain : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the URI fragment.
     * @param newFragment New fragment value.
     * @param opt_decode Optional param for whether to decode new value.
     */
    setFragment (newFragment : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets whether to ignore case.
     * NOTE: If there are already key/value pairs in the QueryData, and
     * ignoreCase_ is set to false, the keys will all be lower-cased.
     * @param ignoreCase whether this goog.Uri should ignore case.
     */
    setIgnoreCase (ignoreCase : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the value of the named query parameters, clearing previous values for
     * that key.
     * @param key The parameter to set.
     * @param value The new value.
     */
    setParameterValue (key : string , value : any ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the values of the named query parameters, clearing previous values for
     * that key.  Not new values will currently be moved to the end of the query
     * string.
     *
     * So, <code>goog.Uri.parse('foo?a=b&c=d&e=f').setParameterValues('c', ['new'])
     * </code> yields <tt>foo?a=b&e=f&c=new</tt>.</p>
     * @param key The parameter to set.
     * @param values The new values. If values is a single string then it will be treated as the sole value.
     */
    setParameterValues (key : string , values : any ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the path.
     * @param newPath New path value.
     * @param opt_decode Optional param for whether to decode new value.
     */
    setPath (newPath : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the port number.
     * @param newPort Port number. Will be explicitly casted to a number.
     */
    setPort (newPort : any ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the URI query.
     * @param newQuery New query value.
     * @param opt_decode Optional param for whether to decode new value.
     */
    setQuery (newQuery : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the query data.
     * @param queryData QueryData object.
     * @param opt_decode Optional param for whether to decode new value. Applies only if queryData is a string.
     */
    setQueryData (queryData : ಠ_ಠ.clutz.goog.Uri.QueryData | null | string | undefined , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets whether Uri is read only. If this goog.Uri is read-only,
     * enforceReadOnly_ will be called at the start of any function that may modify
     * this Uri.
     * @param isReadOnly whether this goog.Uri should be read only.
     */
    setReadOnly (isReadOnly : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the scheme/protocol.
     * @param newScheme New scheme value.
     * @param opt_decode Optional param for whether to decode new value.
     */
    setScheme (newScheme : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Sets the userInfo.
     * @param newUserInfo New userInfo value.
     * @param opt_decode Optional param for whether to decode new value.
     */
    setUserInfo (newUserInfo : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    toString ( ) : string ;
  }
}