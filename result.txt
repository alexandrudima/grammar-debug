

===========================================
TOKENIZING LINE 1
declare namespace ಠ_ಠ.clutz.goog {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-33): 
       ಠ_ಠ.clutz.goog 
      * source.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 2
  var DEBUG : boolean ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-11): 
      DEBUG
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (12-13): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (14-21): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (22-24): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 3
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,3] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 4
   * True if goog.dependencies_ is available.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-46): 
         * True if goog.dependencies_ is available.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,3] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 5
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 6
  var DEPENDENCIES_ENABLED : boolean ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-26): 
      DEPENDENCIES_ENABLED
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (27-28): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (29-36): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (37-39): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 7
  var DISALLOW_TEST_ONLY_CODE : boolean ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-29): 
      DISALLOW_TEST_ONLY_CODE
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (30-31): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (32-39): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (40-42): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 8
  var ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING : boolean ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-43): 
      ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (44-45): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (46-53): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (54-56): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 9
  var ENABLE_DEBUG_LOADER : boolean ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-25): 
      ENABLE_DEBUG_LOADER
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (26-27): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (28-35): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (36-38): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 10
  var LOAD_MODULE_USING_EVAL : boolean ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-28): 
      LOAD_MODULE_USING_EVAL
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (29-30): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (31-38): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (39-41): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 11
  var LOCALE : string ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-12): 
      LOCALE
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (12-13): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (13-14): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (15-21): 
      string
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (22-24): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 12
  var NATIVE_ARRAY_PROTOTYPES : boolean ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-29): 
      NATIVE_ARRAY_PROTOTYPES
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (30-31): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (32-39): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (40-42): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 13
  var SEAL_MODULE_EXPORTS : boolean ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-25): 
      SEAL_MODULE_EXPORTS
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (26-27): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (28-35): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (36-38): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 14
  var STRICT_MODE_COMPATIBLE : boolean ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-28): 
      STRICT_MODE_COMPATIBLE
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (29-30): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (31-38): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (39-41): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 15
  var TRANSPILE : string ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-15): 
      TRANSPILE
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (16-17): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (18-24): 
      string
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (25-27): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 16
  var TRANSPILER : string ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-16): 
      TRANSPILER
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (17-18): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (19-25): 
      string
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (26-28): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 17
  var TRUSTED_SITE : boolean ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-18): 
      TRUSTED_SITE
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (19-20): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (21-28): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (29-31): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 18
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,4] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 19
   * When defining a class Foo with an abstract method bar(), you can do:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
         * When defining a class Foo with an abstract method bar(), you can do:
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,4] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 20
   * Foo.prototype.bar = goog.abstractMethod

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-45): 
         * Foo.prototype.bar = goog.abstractMethod
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,4] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 21
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,4] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 22
   * Now if a subclass of Foo fails to override bar(), an error will be thrown

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * Now if a subclass of Foo fails to override bar(), an error will be thrown
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,4] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 23
   * when bar() is invoked.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-28): 
         * when bar() is invoked.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,4] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 24
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,4] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 25
   * Note: This does not take the name of the function to override as an argument

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * Note: This does not take the name of the function to override as an argument
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,4] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 26
   * because that would make it more difficult to obfuscate our JavaScript code.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * because that would make it more difficult to obfuscate our JavaScript code.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,4] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 27
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 28
  function abstractMethod ( ...a : any [] ) : any ;

  LINE CONTAINS 23 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-25): 
      abstractMethod
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (26-27): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (28-31): 
      ...
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (31-32): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (33-34): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-38): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (39-40): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (40-41): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (42-43): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (43-45): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (46-49): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (50-52): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 29
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,5] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 30
   * Adds a dependency from a file to the files it requires.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-61): 
         * Adds a dependency from a file to the files it requires.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,5] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 31
   * @param relPath The path to the js file.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-45): 
         * @param relPath The path to the js file.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,5] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 32
   * @param provides An array of strings with the names of the objects this file provides.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-91): 
         * @param provides An array of strings with the names of the objects this file provides.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,5] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 33
   * @param requires An array of strings with the names of the objects this file requires.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-91): 
         * @param requires An array of strings with the names of the objects this file requires.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,5] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 34
   * @param opt_loadFlags Parameters indicating how the file must be loaded.  The boolean 'true' is equivalent to {'module': 'goog'} for backwards-compatibility.  Valid properties and values include {'module': 'goog'} and {'lang': 'es6'}.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-239): 
         * @param opt_loadFlags Parameters indicating how the file must be loaded.  The boolean 'true' is equivalent to {'module': 'goog'} for backwards-compatibility.  Valid properties and values include {'module': 'goog'} and {'lang': 'es6'}.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,5] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 35
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 36
  function addDependency (relPath : string , provides : string [] , requires : string [] , opt_loadFlags ? : boolean | { [ /* warning: coerced from ? */ key: string ]: string } ) : void ;

  LINE CONTAINS 72 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-24): 
      addDependency
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (25-26): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (26-33): 
      relPath
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (34-35): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-42): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (43-44): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (45-53): 
      provides
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (54-55): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (55-56): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (56-62): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (62-63): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (63-64): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (64-65): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (66-67): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (67-68): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (68-76): 
      requires
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (76-77): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (77-78): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (78-79): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (79-85): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (85-86): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (86-87): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (87-88): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (88-89): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (89-90): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (90-91): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (91-104): 
      opt_loadFlags
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (104-105): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (105-106): 
      ?
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (106-107): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (107-108): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (108-109): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (109-116): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (116-117): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (117-118): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (118-119): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (119-120): 
      {
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (120-121): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
    => TOKEN (121-122): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.brace.square.ts
    => TOKEN (122-123): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
    => TOKEN (123-125): 
      /*
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * comment.block.ts
    => TOKEN (125-150): 
       warning: coerced from ? 
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * comment.block.ts
    => TOKEN (150-152): 
      */
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * comment.block.ts
    => TOKEN (152-153): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
    => TOKEN (153-156): 
      key
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.indexer.parameter.ts
      * variable.parameter.ts
    => TOKEN (156-157): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (157-158): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (158-164): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (164-165): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (165-166): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.brace.square.ts
    => TOKEN (166-167): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.type.annotation.ts
    => TOKEN (167-168): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.type.annotation.ts
    => TOKEN (168-174): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (174-175): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.type.annotation.ts
    => TOKEN (175-176): 
      }
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (176-177): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (177-178): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (178-180): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (180-181): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (181-185): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (185-186): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (186-188): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 37
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,6] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 38
   * Adds a {@code getInstance} static method that always returns the same

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-75): 
         * Adds a {@code getInstance} static method that always returns the same
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,6] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 39
   * instance object.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-22): 
         * instance object.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,6] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 40
   * @param ctor The constructor for the class to add the static method to.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
         * @param ctor The constructor for the class to add the static method to.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,6] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 41
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 42
  function addSingletonGetter (ctor : ( ...a : any [] ) => any ) : void ;

  LINE CONTAINS 33 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-29): 
      addSingletonGetter
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (30-31): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (31-35): 
      ctor
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (36-37): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (37-39): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (40-41): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (41-42): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (42-43): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (43-44): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (44-47): 
       : 
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (47-50): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (51-52): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (52-53): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (54-55): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (55-56): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (56-58): 
      =>
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
    => TOKEN (59-62): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (62-63): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (63-64): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (64-66): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (66-67): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (67-71): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (71-72): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (72-74): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 43
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 44
   * Call up to the superclass.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-32): 
         * Call up to the superclass.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 45
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 46
   * If this is called from a constructor, then this calls the superclass

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
         * If this is called from a constructor, then this calls the superclass
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 47
   * constructor with arguments 1-N.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-37): 
         * constructor with arguments 1-N.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 48
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 49
   * If this is called from a prototype method, then you must pass the name of the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * If this is called from a prototype method, then you must pass the name of the
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 50
   * method as the second argument to this function. If you do not, you will get a

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * method as the second argument to this function. If you do not, you will get a
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 51
   * runtime error. This calls the superclass' method with arguments 2-N.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
         * runtime error. This calls the superclass' method with arguments 2-N.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 52
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 53
   * This function only works if you use goog.inherits to express inheritance

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * This function only works if you use goog.inherits to express inheritance
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 54
   * relationships between your classes.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-41): 
         * relationships between your classes.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 55
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 56
   * This function is a compiler primitive. At compile-time, the compiler will do

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * This function is a compiler primitive. At compile-time, the compiler will do
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 57
   * macro expansion to remove a lot of the extra overhead that this function

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * macro expansion to remove a lot of the extra overhead that this function
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 58
   * introduces. The compiler will also enforce a lot of the assumptions that this

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * introduces. The compiler will also enforce a lot of the assumptions that this
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 59
   * function makes, and treat it as a compiler error if you break them.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
         * function makes, and treat it as a compiler error if you break them.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 60
   * @param me Should always be "this".

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-40): 
         * @param me Should always be "this".
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 61
   * @param opt_methodName The method name if calling a super method.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-70): 
         * @param opt_methodName The method name if calling a super method.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 62
   * @param var_args The rest of the arguments.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-48): 
         * @param var_args The rest of the arguments.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,7] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 63
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 64
  function base (me : Object , opt_methodName ? : any ,  ...var_args : any [] ) : any ;

  LINE CONTAINS 39 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-15): 
      base
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-19): 
      me
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (20-21): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (22-28): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-30): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (31-45): 
      opt_methodName
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (46-47): 
      ?
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (48-49): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (50-53): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (54-57): 
      ,  
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (57-60): 
      ...
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (60-68): 
      var_args
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (68-69): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (69-70): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (70-71): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (71-74): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (74-75): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (75-76): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (76-77): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (77-78): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (78-79): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (79-81): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (81-82): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (82-85): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (85-86): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (86-88): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 65
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,8] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 66
   * Path for included scripts.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-32): 
         * Path for included scripts.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,8] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 67
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 68
  var basePath : string ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-14): 
      basePath
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (15-16): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (17-23): 
      string
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (24-26): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 69
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 70
   * Partially applies this function to a particular 'this object' and zero or

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * Partially applies this function to a particular 'this object' and zero or
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 71
   * more arguments. The result is a new function with some arguments of the first

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * more arguments. The result is a new function with some arguments of the first
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 72
   * function pre-filled and the value of this 'pre-specified'.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-64): 
         * function pre-filled and the value of this 'pre-specified'.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 73
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 74
   * Remaining arguments specified at call-time are appended to the pre-specified

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * Remaining arguments specified at call-time are appended to the pre-specified
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 75
   * ones.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-11): 
         * ones.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 76
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 77
   * Also see: {@link #partial}.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-33): 
         * Also see: {@link #partial}.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 78
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 79
   * Usage:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-12): 
         * Usage:
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 80
   * <pre>var barMethBound = goog.bind(myFunction, myObj, 'arg1', 'arg2');

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-75): 
         * <pre>var barMethBound = goog.bind(myFunction, myObj, 'arg1', 'arg2');
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 81
   * barMethBound('arg3', 'arg4');</pre>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-41): 
         * barMethBound('arg3', 'arg4');</pre>
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 82
   * @param fn A function to partially apply.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-46): 
         * @param fn A function to partially apply.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 83
   * @param selfObj Specifies the object which this should point to when the function is run.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-94): 
         * @param selfObj Specifies the object which this should point to when the function is run.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 84
   * @param var_args Additional arguments that are partially applied to the function.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-86): 
         * @param var_args Additional arguments that are partially applied to the function.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,9] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 85
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 86
  function bind < T > (fn : ( ( ...a : any [] ) => any ) | null , selfObj : T ,  ...var_args : any [] ) : ( ...a : any [] ) => any ;

  LINE CONTAINS 80 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-15): 
      bind
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (16-17): 
      <
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.type.parameters.ts
    => TOKEN (18-19): 
      T
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.type.parameters.ts
    => TOKEN (20-21): 
      >
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.type.parameters.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (22-23): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-25): 
      fn
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (26-27): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-29): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (29-31): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (32-33): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (33-34): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (34-35): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (35-36): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (36-39): 
       : 
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (39-42): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (43-44): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (44-45): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (46-47): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (48-50): 
      =>
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
    => TOKEN (51-54): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (55-56): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (57-58): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (59-63): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (63-64): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (64-65): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (66-73): 
      selfObj
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (73-74): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (74-75): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (75-76): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (76-77): 
      T
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (77-78): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (78-81): 
      ,  
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (81-84): 
      ...
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (84-92): 
      var_args
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (92-93): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (93-94): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (94-95): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (95-98): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (98-99): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (99-100): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (100-101): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (101-102): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (102-103): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (103-105): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (105-107): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (107-108): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (108-109): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (109-110): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (110-111): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (111-112): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (112-115): 
       : 
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (115-118): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (118-119): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (119-120): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (120-121): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (121-122): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (122-123): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (123-124): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (124-126): 
      =>
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (126-127): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.function.return.ts
    => TOKEN (127-130): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (130-131): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (131-133): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 87
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,10] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 88
   * Clones a value. The input may be an Object, Array, or basic type. Objects and

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * Clones a value. The input may be an Object, Array, or basic type. Objects and
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,10] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 89
   * arrays will be cloned recursively.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-40): 
         * arrays will be cloned recursively.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,10] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 90
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,10] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 91
   * WARNINGS:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-15): 
         * WARNINGS:
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,10] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 92
   * <code>goog.cloneObject</code> does not detect reference loops. Objects that

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * <code>goog.cloneObject</code> does not detect reference loops. Objects that
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,10] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 93
   * refer to themselves will cause infinite recursion.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-56): 
         * refer to themselves will cause infinite recursion.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,10] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 94
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,10] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 95
   * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,10] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 96
   * UIDs created by <code>getUid</code> into cloned results.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-62): 
         * UIDs created by <code>getUid</code> into cloned results.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,10] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 97
   * @param obj The value to clone.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-36): 
         * @param obj The value to clone.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,10] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 98
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 99
  function cloneObject (obj : any ) : any ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-22): 
      cloneObject
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (23-24): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (24-27): 
      obj
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (28-29): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (30-33): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (35-37): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (38-41): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (42-44): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 100
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,11] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 101
   * Defines a named value. In uncompiled mode, the value is retrieved from

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
         * Defines a named value. In uncompiled mode, the value is retrieved from
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,11] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 102
   * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,11] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 103
   * has the property specified, and otherwise used the defined defaultValue.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * has the property specified, and otherwise used the defined defaultValue.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,11] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 104
   * When compiled the default can be overridden using the compiler

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-68): 
         * When compiled the default can be overridden using the compiler
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,11] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 105
   * options or the value set in the CLOSURE_DEFINES object.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-61): 
         * options or the value set in the CLOSURE_DEFINES object.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,11] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 106
   * @param name The distinguished name to provide.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-52): 
         * @param name The distinguished name to provide.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,11] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 107
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 108
  function define (name : string , defaultValue : string | number | boolean ) : void ;

  LINE CONTAINS 34 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-17): 
      define
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (18-19): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-23): 
      name
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (24-25): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-32): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-34): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (35-47): 
      defaultValue
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (48-49): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (50-56): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (57-58): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (59-65): 
      number
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (66-67): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (67-68): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (68-75): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (75-76): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (76-77): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (77-79): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (79-80): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (80-84): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (84-85): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (85-87): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 109
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,12] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 110
   * Creates a restricted form of a Closure "class":

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-53): 
         * Creates a restricted form of a Closure "class":
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,12] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 111
   * - from the compiler's perspective, the instance returned from the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-71): 
         * - from the compiler's perspective, the instance returned from the
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,12] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 112
   * constructor is sealed (no new properties may be added).  This enables

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-75): 
         * constructor is sealed (no new properties may be added).  This enables
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,12] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 113
   * better checks.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-20): 
         * better checks.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,12] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 114
   * - the compiler will rewrite this definition to a form that is optimal

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-75): 
         * - the compiler will rewrite this definition to a form that is optimal
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,12] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 115
   * for type checking and optimization (initially this will be a more

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-71): 
         * for type checking and optimization (initially this will be a more
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,12] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 116
   * traditional form).

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-24): 
         * traditional form).
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,12] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 117
   * @param superClass The superclass, Object or null.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-55): 
         * @param superClass The superclass, Object or null.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,12] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 118
   * @param def An object literal describing the class.  It may have the following properties: "constructor": the constructor function "statics": an object literal containing methods to add to the constructor as "static" methods or a function that will receive the constructor function as its only parameter to which static properties can be added. all other properties are added to the prototype.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-398): 
         * @param def An object literal describing the class.  It may have the following properties: "constructor": the constructor function "statics": an object literal containing methods to add to the constructor as "static" methods or a function that will receive the constructor function as its only parameter to which static properties can be added. all other properties are added to the prototype.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,12] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 119
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 120
  function defineClass (superClass : ( ( ...a : any [] ) => any ) | null , def : ಠ_ಠ.clutz.goog.defineClass.ClassDescriptor ) : ( ...a : any [] ) => any ;

  LINE CONTAINS 63 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-22): 
      defineClass
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (23-24): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (24-34): 
      superClass
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (35-36): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-38): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (38-40): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (41-42): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (42-43): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (43-44): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (44-45): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (45-48): 
       : 
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (48-51): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (52-53): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (53-54): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (55-56): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (57-59): 
      =>
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (59-60): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
    => TOKEN (60-63): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (63-64): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (64-65): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (66-67): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (67-68): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (68-72): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (72-73): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (73-74): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (74-75): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (75-78): 
      def
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (78-79): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (79-80): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (80-82): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (82-123): 
      _ಠ.clutz.goog.defineClass.ClassDescriptor
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (123-124): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (124-125): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (125-127): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (127-129): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (129-130): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (130-131): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (131-132): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (132-133): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (133-134): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (134-137): 
       : 
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (137-140): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (140-141): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (141-142): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (142-143): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (143-144): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (144-145): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (145-146): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (146-148): 
      =>
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (148-149): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.function.return.ts
    => TOKEN (149-152): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (152-153): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (153-155): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 121
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,13] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 122
   * Exports a property unobfuscated into the object's namespace.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-66): 
         * Exports a property unobfuscated into the object's namespace.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,13] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 123
   * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
         * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,13] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 124
   * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,13] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 125
   * @param object Object whose static property is being exported.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-67): 
         * @param object Object whose static property is being exported.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,13] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 126
   * @param publicName Unobfuscated name to export.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-52): 
         * @param publicName Unobfuscated name to export.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,13] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 127
   * @param symbol Object the name should point to.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-52): 
         * @param symbol Object the name should point to.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,13] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 128
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 129
  function exportProperty (object : Object | null , publicName : string , symbol : any ) : void ;

  LINE CONTAINS 38 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-25): 
      exportProperty
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (26-27): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (27-33): 
      object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (34-35): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-42): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (43-44): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (45-49): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (50-51): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (52-62): 
      publicName
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (62-63): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (63-64): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (64-65): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (65-71): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (71-72): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (72-73): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (73-74): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (74-80): 
      symbol
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (80-81): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (81-82): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (82-83): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (83-86): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (86-87): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (87-88): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (88-90): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (90-91): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (91-95): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (95-96): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (96-98): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 130
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 131
   * Exposes an unobfuscated global namespace path for the given object.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
         * Exposes an unobfuscated global namespace path for the given object.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 132
   * Note that fields of the exported object *will* be obfuscated, unless they are

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * Note that fields of the exported object *will* be obfuscated, unless they are
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 133
   * exported in turn via this function or goog.exportProperty.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-64): 
         * exported in turn via this function or goog.exportProperty.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 134
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 135
   * Also handy for making public items that are defined in anonymous closures.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * Also handy for making public items that are defined in anonymous closures.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 136
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 137
   * ex. goog.exportSymbol('public.path.Foo', Foo);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-52): 
         * ex. goog.exportSymbol('public.path.Foo', Foo);
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 138
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 139
   * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 140
   * public.path.Foo.staticFunction();

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-39): 
         * public.path.Foo.staticFunction();
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 141
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 142
   * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-65): 
         * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 143
   * Foo.prototype.myMethod);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-30): 
         * Foo.prototype.myMethod);
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 144
   * new public.path.Foo().myMethod();

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-39): 
         * new public.path.Foo().myMethod();
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 145
   * @param publicPath Unobfuscated name to export.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-52): 
         * @param publicPath Unobfuscated name to export.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 146
   * @param object Object the name should point to.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-52): 
         * @param object Object the name should point to.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 147
   * @param opt_objectToExportTo The object to add the path to; default is goog.global.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-88): 
         * @param opt_objectToExportTo The object to add the path to; default is goog.global.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,14] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 148
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 149
  function exportSymbol (publicPath : string , object : any , opt_objectToExportTo ? : Object | null ) : void ;

  LINE CONTAINS 40 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-23): 
      exportSymbol
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (24-25): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (25-35): 
      publicPath
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (36-37): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (38-44): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (45-46): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (47-53): 
      object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (54-55): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (55-56): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (56-59): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (59-60): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (60-61): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (61-62): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (62-82): 
      opt_objectToExportTo
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (82-83): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (83-84): 
      ?
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (84-85): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (85-86): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (86-87): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (87-93): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (93-94): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (94-95): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (95-96): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (96-100): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (100-101): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (101-102): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (102-104): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (104-105): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (105-109): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (109-110): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (110-112): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 150
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,15] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 151
   * Forward declares a symbol. This is an indication to the compiler that the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * Forward declares a symbol. This is an indication to the compiler that the
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,15] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 152
   * symbol may be used in the source yet is not required and may not be provided

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * symbol may be used in the source yet is not required and may not be provided
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,15] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 153
   * in compilation.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-21): 
         * in compilation.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,15] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 154
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,15] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 155
   * The most common usage of forward declaration is code that takes a type as a

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * The most common usage of forward declaration is code that takes a type as a
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,15] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 156
   * function parameter but does not need to require it. By forward declaring

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * function parameter but does not need to require it. By forward declaring
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,15] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 157
   * instead of requiring, no hard dependency is made, and (if not required

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
         * instead of requiring, no hard dependency is made, and (if not required
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,15] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 158
   * elsewhere) the namespace may never be required and thus, not be pulled

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
         * elsewhere) the namespace may never be required and thus, not be pulled
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,15] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 159
   * into the JavaScript binary. If it is required elsewhere, it will be type

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * into the JavaScript binary. If it is required elsewhere, it will be type
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,15] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 160
   * checked as normal.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-24): 
         * checked as normal.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,15] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 161
   * @param name The namespace to forward declare in the form of "goog.package.part".

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-86): 
         * @param name The namespace to forward declare in the form of "goog.package.part".
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,15] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 162
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 163
  function forwardDeclare (name : string ) : void ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-25): 
      forwardDeclare
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (26-27): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (27-31): 
      name
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (32-33): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-40): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (41-42): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (42-44): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (45-49): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (50-52): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 164
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 165
   * Handles strings that are intended to be used as CSS class names.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-70): 
         * Handles strings that are intended to be used as CSS class names.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 166
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 167
   * This function works in tandem with @see goog.setCssNameMapping.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-69): 
         * This function works in tandem with @see goog.setCssNameMapping.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 168
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 169
   * Without any mapping set, the arguments are simple joined with a hyphen and

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * Without any mapping set, the arguments are simple joined with a hyphen and
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 170
   * passed through unaltered.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-31): 
         * passed through unaltered.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 171
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 172
   * When there is a mapping, there are two possible styles in which these

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-75): 
         * When there is a mapping, there are two possible styles in which these
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 173
   * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 174
   * of the passed in css name is rewritten according to the map. In the BY_WHOLE

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * of the passed in css name is rewritten according to the map. In the BY_WHOLE
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 175
   * style, the full css name is looked up in the map directly. If a rewrite is

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * style, the full css name is looked up in the map directly. If a rewrite is
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 176
   * not specified by the map, the compiler will output a warning.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-67): 
         * not specified by the map, the compiler will output a warning.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 177
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 178
   * When the mapping is passed to the compiler, it will replace calls to

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
         * When the mapping is passed to the compiler, it will replace calls to
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 179
   * goog.getCssName with the strings from the mapping, e.g.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-61): 
         * goog.getCssName with the strings from the mapping, e.g.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 180
   * var x = goog.getCssName('foo');

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-37): 
         * var x = goog.getCssName('foo');
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 181
   * var y = goog.getCssName(this.baseClass, 'active');

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-56): 
         * var y = goog.getCssName(this.baseClass, 'active');
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 182
   * becomes:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-14): 
         * becomes:
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 183
   * var x = 'foo';

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-20): 
         * var x = 'foo';
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 184
   * var y = this.baseClass + '-active';

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-41): 
         * var y = this.baseClass + '-active';
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 185
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 186
   * If one argument is passed it will be processed, if two are passed only the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * If one argument is passed it will be processed, if two are passed only the
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 187
   * modifier will be processed, as it is assumed the first argument was generated

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * modifier will be processed, as it is assumed the first argument was generated
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 188
   * as a result of calling goog.getCssName.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-45): 
         * as a result of calling goog.getCssName.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 189
   * @param className The class name.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-38): 
         * @param className The class name.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 190
   * @param opt_modifier A modifier to be appended to the class name.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-70): 
         * @param opt_modifier A modifier to be appended to the class name.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,16] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 191
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 192
  function getCssName (className : string , opt_modifier ? : string ) : string ;

  LINE CONTAINS 28 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-21): 
      getCssName
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (22-23): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-32): 
      className
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (33-34): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-41): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (42-43): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (44-56): 
      opt_modifier
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (57-58): 
      ?
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (59-60): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (61-67): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (67-68): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (68-69): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (69-71): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (71-72): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (72-78): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (78-79): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (79-81): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 193
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,17] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 194
   * Adds a hash code field to an object. The hash code is unique for the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
         * Adds a hash code field to an object. The hash code is unique for the
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,17] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 195
   * given object.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-19): 
         * given object.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,17] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 196
   * @param obj The object to get the hash code for.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-53): 
         * @param obj The object to get the hash code for.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,17] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 197
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 198
  function getHashCode (a : Object | null ) : number ;

  LINE CONTAINS 22 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-22): 
      getHashCode
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (23-24): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (24-25): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (26-27): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-34): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-36): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (37-41): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (42-43): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (43-45): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (46-52): 
      number
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (52-53): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (53-55): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 199
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 200
   * Gets a localized message.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-31): 
         * Gets a localized message.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 201
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 202
   * This function is a compiler primitive. If you give the compiler a localized

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * This function is a compiler primitive. If you give the compiler a localized
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 203
   * message bundle, it will replace the string at compile-time with a localized

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * message bundle, it will replace the string at compile-time with a localized
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 204
   * version, and expand goog.getMsg call to a concatenated string.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-68): 
         * version, and expand goog.getMsg call to a concatenated string.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 205
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 206
   * Messages must be initialized in the form:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-47): 
         * Messages must be initialized in the form:
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 207
   * <code>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-12): 
         * <code>
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 208
   * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 209
   * </code>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-13): 
         * </code>
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 210
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 211
   * This function produces a string which should be treated as plain text. Use

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * This function produces a string which should be treated as plain text. Use
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 212
   * {@link goog.html.SafeHtmlFormatter} in conjunction with goog.getMsg to

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
         * {@link goog.html.SafeHtmlFormatter} in conjunction with goog.getMsg to
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 213
   * produce SafeHtml.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-23): 
         * produce SafeHtml.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 214
   * @param str Translatable string, places holders in the form {$foo}.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-72): 
         * @param str Translatable string, places holders in the form {$foo}.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 215
   * @param opt_values Maps place holder name to value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-56): 
         * @param opt_values Maps place holder name to value.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,18] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 216
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 217
  function getMsg (str : string , opt_values ? : { [ key: string ]: string } | null ) : string ;

  LINE CONTAINS 46 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-17): 
      getMsg
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (18-19): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-22): 
      str
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (23-24): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (25-31): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (32-33): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (34-44): 
      opt_values
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (45-46): 
      ?
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (47-48): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (49-50): 
      {
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
    => TOKEN (51-52): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.brace.square.ts
    => TOKEN (52-53): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
    => TOKEN (53-56): 
      key
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.indexer.parameter.ts
      * variable.parameter.ts
    => TOKEN (56-57): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (57-58): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (58-64): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (64-65): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (65-66): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.indexer.declaration.ts
      * meta.brace.square.ts
    => TOKEN (66-67): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.type.annotation.ts
    => TOKEN (67-68): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.type.annotation.ts
    => TOKEN (68-74): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (74-75): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.type.annotation.ts
    => TOKEN (75-76): 
      }
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (76-77): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (77-78): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (78-79): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (79-83): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (83-84): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (84-85): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (85-87): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (87-88): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (88-94): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (94-95): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (95-97): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 218
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,19] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 219
   * Gets a localized message. If the message does not have a translation, gives a

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * Gets a localized message. If the message does not have a translation, gives a
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,19] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 220
   * fallback message.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-23): 
         * fallback message.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,19] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 221
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,19] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 222
   * This is useful when introducing a new message that has not yet been

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
         * This is useful when introducing a new message that has not yet been
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,19] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 223
   * translated into all languages.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-36): 
         * translated into all languages.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,19] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 224
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,19] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 225
   * This function is a compiler primitive. Must be used in the form:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-70): 
         * This function is a compiler primitive. Must be used in the form:
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,19] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 226
   * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-65): 
         * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,19] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 227
   * where MSG_A and MSG_B were initialized with goog.getMsg.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-62): 
         * where MSG_A and MSG_B were initialized with goog.getMsg.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,19] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 228
   * @param a The preferred message.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-37): 
         * @param a The preferred message.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,19] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 229
   * @param b The fallback message.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-36): 
         * @param b The fallback message.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,19] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 230
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 231
  function getMsgWithFallback (a : string , b : string ) : string ;

  LINE CONTAINS 26 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-29): 
      getMsgWithFallback
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (30-31): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (31-32): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (33-34): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-41): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (42-43): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (44-45): 
      b
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (46-47): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (48-54): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (55-56): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (56-58): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (59-65): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (66-68): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 232
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,20] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 233
   * Returns an object based on its fully qualified external name.  The object

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * Returns an object based on its fully qualified external name.  The object
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,20] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 234
   * is not found if null or undefined.  If you are using a compilation pass that

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * is not found if null or undefined.  If you are using a compilation pass that
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,20] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 235
   * renames property names beware that using this function will not find renamed

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * renames property names beware that using this function will not find renamed
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,20] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 236
   * properties.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-17): 
         * properties.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,20] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 237
   * @param name The fully qualified name.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-43): 
         * @param name The fully qualified name.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,20] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 238
   * @param opt_obj The object within which to look; default is |goog.global|.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * @param opt_obj The object within which to look; default is |goog.global|.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,20] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 239
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 240
  function getObjectByName (name : string , opt_obj ? : Object | null ) : any ;

  LINE CONTAINS 32 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-26): 
      getObjectByName
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (27-28): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (28-32): 
      name
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (33-34): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-41): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (42-43): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (44-51): 
      opt_obj
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (52-53): 
      ?
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (54-55): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (55-56): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (56-62): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (62-63): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (63-64): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (64-65): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (65-69): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (69-70): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (70-71): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (71-73): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (73-74): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (74-77): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (77-78): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (78-80): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 241
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,21] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 242
   * Gets a unique ID for an object. This mutates the object so that further calls

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * Gets a unique ID for an object. This mutates the object so that further calls
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,21] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 243
   * with the same object as a parameter returns the same value. The unique ID is

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * with the same object as a parameter returns the same value. The unique ID is
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,21] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 244
   * guaranteed to be unique across the current session amongst objects that are

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * guaranteed to be unique across the current session amongst objects that are
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,21] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 245
   * passed into {@code getUid}. There is no guarantee that the ID is unique or

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * passed into {@code getUid}. There is no guarantee that the ID is unique or
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,21] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 246
   * consistent across sessions. It is unsafe to generate unique ID for function

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * consistent across sessions. It is unsafe to generate unique ID for function
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,21] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 247
   * prototypes.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-17): 
         * prototypes.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,21] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 248
   * @param obj The object to get the unique ID for.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-53): 
         * @param obj The object to get the unique ID for.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,21] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 249
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 250
  function getUid (obj : Object | null ) : number ;

  LINE CONTAINS 22 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-17): 
      getUid
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (18-19): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-22): 
      obj
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (23-24): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (25-31): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (32-33): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-38): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (39-40): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (40-42): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (43-49): 
      number
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (50-52): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 251
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,22] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 252
   * Evals JavaScript in the global scope.  In IE this uses execScript, other

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * Evals JavaScript in the global scope.  In IE this uses execScript, other
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,22] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 253
   * browsers use goog.global.eval. If goog.global.eval does not evaluate in the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * browsers use goog.global.eval. If goog.global.eval does not evaluate in the
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,22] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 254
   * global scope (for example, in Safari), appends a script tag instead.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
         * global scope (for example, in Safari), appends a script tag instead.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,22] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 255
   * Throws an exception if neither execScript or eval is defined.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-67): 
         * Throws an exception if neither execScript or eval is defined.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,22] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 256
   * @param script JavaScript string.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-38): 
         * @param script JavaScript string.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,22] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 257
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 258
  function globalEval (script : string ) : void ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-21): 
      globalEval
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (22-23): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-29): 
      script
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (30-31): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (32-38): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (39-40): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (40-42): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (43-47): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (48-50): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 259
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,23] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 260
   * Globalizes a whole namespace, such as goog or goog.lang.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-62): 
         * Globalizes a whole namespace, such as goog or goog.lang.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,23] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 261
   * @param obj The namespace to globalize.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-44): 
         * @param obj The namespace to globalize.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,23] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 262
   * @param opt_global The object to add the properties to.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-60): 
         * @param opt_global The object to add the properties to.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,23] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 263
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 264
  function globalize (obj : Object , opt_global ? : Object | null ) : void ;

  LINE CONTAINS 32 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-20): 
      globalize
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (21-22): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (22-25): 
      obj
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (26-27): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-34): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-36): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (37-47): 
      opt_global
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (48-49): 
      ?
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (50-51): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (52-58): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (59-60): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (61-65): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (66-67): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (67-69): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (69-70): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (70-74): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (74-75): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (75-77): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 265
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,24] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 266
   * Whether the given object is already assigned a unique ID.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-63): 
         * Whether the given object is already assigned a unique ID.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,24] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 267
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,24] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 268
   * This does not modify the object.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-38): 
         * This does not modify the object.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,24] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 269
   * @param obj The object to check.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-37): 
         * @param obj The object to check.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,24] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 270
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 271
  function hasUid (obj : Object ) : boolean ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-17): 
      hasUid
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (18-19): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-22): 
      obj
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (23-24): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (25-31): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (32-33): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (33-35): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (36-43): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (44-46): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 272
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 273
   * Inherit the prototype methods from one constructor into another.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-70): 
         * Inherit the prototype methods from one constructor into another.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 274
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 275
   * Usage:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-12): 
         * Usage:
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 276
   * <pre>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-11): 
         * <pre>
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 277
   * function ParentClass(a, b) { }

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-36): 
         * function ParentClass(a, b) { }
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 278
   * ParentClass.prototype.foo = function(a) { };

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-50): 
         * ParentClass.prototype.foo = function(a) { };
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 279
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 280
   * function ChildClass(a, b, c) {

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-36): 
         * function ChildClass(a, b, c) {
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 281
   * ChildClass.base(this, 'constructor', a, b);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-49): 
         * ChildClass.base(this, 'constructor', a, b);
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 282
   * }

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
         * }
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 283
   * goog.inherits(ChildClass, ParentClass);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-45): 
         * goog.inherits(ChildClass, ParentClass);
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 284
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 285
   * var child = new ChildClass('a', 'b', 'see');

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-50): 
         * var child = new ChildClass('a', 'b', 'see');
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 286
   * child.foo(); // This works.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-33): 
         * child.foo(); // This works.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 287
   * </pre>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-12): 
         * </pre>
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 288
   * @param childCtor Child class.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-35): 
         * @param childCtor Child class.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 289
   * @param parentCtor Parent class.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-37): 
         * @param parentCtor Parent class.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,25] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 290
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 291
  function inherits (childCtor : ( ...a : any [] ) => any , parentCtor : ( ...a : any [] ) => any ) : void ;

  LINE CONTAINS 56 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-19): 
      inherits
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (20-21): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (21-30): 
      childCtor
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (31-32): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (32-34): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (35-36): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (36-37): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (37-38): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (38-39): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (39-42): 
       : 
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (42-45): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (46-47): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (47-48): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (49-50): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (51-53): 
      =>
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
    => TOKEN (54-57): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (57-58): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (58-59): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (59-60): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (60-70): 
      parentCtor
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (70-71): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (71-72): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (72-74): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (74-75): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (75-76): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (76-77): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (77-78): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (78-79): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (79-82): 
       : 
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (82-85): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (85-86): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (86-87): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (87-88): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (88-89): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (89-90): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (90-91): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (91-93): 
      =>
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (93-94): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
    => TOKEN (94-97): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (97-98): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (98-99): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (99-101): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (101-102): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (102-106): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (106-107): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (107-109): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 292
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,26] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 293
   * Returns true if the specified value is an array.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-54): 
         * Returns true if the specified value is an array.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,26] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 294
   * @param val Variable to test.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
         * @param val Variable to test.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,26] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 295
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 296
  function isArray (val : any ) : boolean ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-18): 
      isArray
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (19-20): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (20-23): 
      val
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (24-25): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-29): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (30-31): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (31-33): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (34-41): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (42-44): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 297
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,27] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 298
   * Returns true if the object looks like an array. To qualify as array like

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * Returns true if the object looks like an array. To qualify as array like
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,27] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 299
   * the value needs to be either a NodeList or an object with a Number length

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * the value needs to be either a NodeList or an object with a Number length
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,27] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 300
   * property. As a special case, a function value is not array like, because its

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * property. As a special case, a function value is not array like, because its
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,27] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 301
   * length property is fixed to correspond to the number of expected arguments.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * length property is fixed to correspond to the number of expected arguments.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,27] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 302
   * @param val Variable to test.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
         * @param val Variable to test.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,27] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 303
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 304
  function isArrayLike (val : any ) : boolean ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-22): 
      isArrayLike
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (23-24): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (24-27): 
      val
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (28-29): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (30-33): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (35-37): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (38-45): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (46-48): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 305
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,28] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 306
   * Returns true if the specified value is a boolean.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-55): 
         * Returns true if the specified value is a boolean.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,28] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 307
   * @param val Variable to test.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
         * @param val Variable to test.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,28] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 308
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 309
  function isBoolean (val : any ) : boolean ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-20): 
      isBoolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (21-22): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (22-25): 
      val
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (26-27): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-31): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (32-33): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (33-35): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (36-43): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (44-46): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 310
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,29] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 311
   * Returns true if the object looks like a Date. To qualify as Date-like the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * Returns true if the object looks like a Date. To qualify as Date-like the
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,29] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 312
   * value needs to be an object and have a getFullYear() function.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-68): 
         * value needs to be an object and have a getFullYear() function.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,29] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 313
   * @param val Variable to test.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
         * @param val Variable to test.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,29] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 314
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 315
  function isDateLike (val : any ) : boolean ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-21): 
      isDateLike
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (22-23): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-26): 
      val
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (27-28): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-32): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-34): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (34-36): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (37-44): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (45-47): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 316
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,30] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 317
   * Returns true if the specified value is not undefined.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-59): 
         * Returns true if the specified value is not undefined.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,30] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 318
   * WARNING: Do not use this to test if an object has a property. Use the in

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * WARNING: Do not use this to test if an object has a property. Use the in
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,30] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 319
   * operator instead.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-23): 
         * operator instead.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,30] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 320
   * @param val Variable to test.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
         * @param val Variable to test.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,30] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 321
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 322
  function isDef (val : any ) : boolean ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-16): 
      isDef
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (17-18): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (18-21): 
      val
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (22-23): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (24-27): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-29): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (29-31): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (32-39): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (40-42): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 323
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,31] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 324
   * Returns true if the specified value is defined and not null.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-66): 
         * Returns true if the specified value is defined and not null.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,31] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 325
   * @param val Variable to test.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
         * @param val Variable to test.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,31] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 326
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 327
  function isDefAndNotNull (val : any ) : boolean ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-26): 
      isDefAndNotNull
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (27-28): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (28-31): 
      val
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (32-33): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-37): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (38-39): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (39-41): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (42-49): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (50-52): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 328
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,32] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 329
   * Returns true if the specified value is a function.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-56): 
         * Returns true if the specified value is a function.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,32] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 330
   * @param val Variable to test.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
         * @param val Variable to test.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,32] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 331
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 332
  function isFunction (val : any ) : boolean ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-21): 
      isFunction
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (22-23): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-26): 
      val
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (27-28): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-32): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-34): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (34-36): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (37-44): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (45-47): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 333
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,33] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 334
   * Returns true if the specified value is null.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-50): 
         * Returns true if the specified value is null.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,33] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 335
   * @param val Variable to test.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
         * @param val Variable to test.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,33] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 336
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 337
  function isNull (val : any ) : boolean ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-17): 
      isNull
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (18-19): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-22): 
      val
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (23-24): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (25-28): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-30): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (30-32): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (33-40): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (41-43): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 338
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,34] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 339
   * Returns true if the specified value is a number.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-54): 
         * Returns true if the specified value is a number.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,34] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 340
   * @param val Variable to test.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
         * @param val Variable to test.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,34] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 341
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 342
  function isNumber (val : any ) : boolean ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-19): 
      isNumber
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (20-21): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (21-24): 
      val
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (25-26): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-30): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (31-32): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (32-34): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (35-42): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (43-45): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 343
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,35] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 344
   * Returns true if the specified value is an object.  This includes arrays and

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * Returns true if the specified value is an object.  This includes arrays and
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,35] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 345
   * functions.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-16): 
         * functions.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,35] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 346
   * @param val Variable to test.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
         * @param val Variable to test.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,35] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 347
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 348
  function isObject (val : any ) : boolean ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-19): 
      isObject
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (20-21): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (21-24): 
      val
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (25-26): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-30): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (31-32): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (32-34): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (35-42): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (43-45): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 349
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,36] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 350
   * Returns true if the specified value is a string.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-54): 
         * Returns true if the specified value is a string.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,36] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 351
   * @param val Variable to test.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
         * @param val Variable to test.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,36] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 352
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 353
  function isString (val : any ) : boolean ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-19): 
      isString
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (20-21): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (21-24): 
      val
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (25-26): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-30): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (31-32): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (32-34): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (35-42): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (43-45): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 354
  function loadModule (moduleDef : ( (a : any ) => any ) | string ) : void ;

  LINE CONTAINS 33 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-21): 
      loadModule
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (22-23): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-32): 
      moduleDef
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (33-34): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-36): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (36-38): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (38-39): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (39-42): 
       : 
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (42-45): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (46-47): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (48-50): 
      =>
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
    => TOKEN (51-54): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (55-56): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (57-58): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (59-65): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (66-67): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (67-69): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (69-70): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (70-74): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (74-75): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (75-77): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 355
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 356
   * Load a goog.module from the provided URL.  This is not a general purpose

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * Load a goog.module from the provided URL.  This is not a general purpose
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 357
   * code loader and does not support late loading code, that is it should only

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * code loader and does not support late loading code, that is it should only
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 358
   * be used during page load. This method exists to support unit tests and

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
         * be used during page load. This method exists to support unit tests and
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 359
   * "debug" loaders that would otherwise have inserted script tags. Under the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * "debug" loaders that would otherwise have inserted script tags. Under the
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 360
   * hood this needs to use a synchronous XHR and is not recommeneded for

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
         * hood this needs to use a synchronous XHR and is not recommeneded for
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 361
   * production code.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-22): 
         * production code.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 362
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 363
   * The module's goog.requires must have already been satisified; an exception

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * The module's goog.requires must have already been satisified; an exception
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 364
   * will be thrown if this is not the case. This assumption is that no

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-72): 
         * will be thrown if this is not the case. This assumption is that no
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 365
   * "deps.js" file exists, so there is no way to discover and locate the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
         * "deps.js" file exists, so there is no way to discover and locate the
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 366
   * module-to-be-loaded's dependencies and no attempt is made to do so.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
         * module-to-be-loaded's dependencies and no attempt is made to do so.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 367
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 368
   * There should only be one attempt to load a module.  If

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-60): 
         * There should only be one attempt to load a module.  If
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 369
   * "goog.loadModuleFromUrl" is called for an already loaded module, an

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
         * "goog.loadModuleFromUrl" is called for an already loaded module, an
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 370
   * exception will be throw.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-30): 
         * exception will be throw.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 371
   * @param url The URL from which to attempt to load the goog.module.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-71): 
         * @param url The URL from which to attempt to load the goog.module.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,37] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 372
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 373
  function loadModuleFromUrl (url : string ) : void ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-28): 
      loadModuleFromUrl
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (29-30): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (30-33): 
      url
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (34-35): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-42): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (43-44): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (44-46): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (47-51): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (52-54): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 374
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,38] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 375
   * Copies all the members of a source object to a target object. This method

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * Copies all the members of a source object to a target object. This method
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,38] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 376
   * does not work on all browsers for all objects that contain keys such as

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-77): 
         * does not work on all browsers for all objects that contain keys such as
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,38] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 377
   * toString or hasOwnProperty. Use goog.object.extend for this purpose.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
         * toString or hasOwnProperty. Use goog.object.extend for this purpose.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,38] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 378
   * @param target Target.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-27): 
         * @param target Target.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,38] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 379
   * @param source Source.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-27): 
         * @param source Source.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,38] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 380
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 381
  function mixin (target : Object | null , source : Object | null ) : void ;

  LINE CONTAINS 34 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-16): 
      mixin
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (17-18): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (18-24): 
      target
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (25-26): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-33): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-40): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (41-42): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (43-49): 
      source
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (50-51): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (52-58): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (59-60): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (61-65): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (66-67): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (67-69): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (69-70): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (70-74): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (74-75): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (75-77): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 382
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 383
   * Defines a module in Closure.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
         * Defines a module in Closure.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 384
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 385
   * Marks that this file must be loaded as a module and claims the namespace.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * Marks that this file must be loaded as a module and claims the namespace.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 386
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 387
   * A namespace may only be defined once in a codebase. It may be defined using

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * A namespace may only be defined once in a codebase. It may be defined using
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 388
   * goog.provide() or goog.module().

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-38): 
         * goog.provide() or goog.module().
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 389
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 390
   * goog.module() has three requirements:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-43): 
         * goog.module() has three requirements:
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 391
   * - goog.module may not be used in the same file as goog.provide.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-69): 
         * - goog.module may not be used in the same file as goog.provide.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 392
   * - goog.module must be the first statement in the file.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-60): 
         * - goog.module must be the first statement in the file.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 393
   * - only one goog.module is allowed per file.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-49): 
         * - only one goog.module is allowed per file.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 394
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 395
   * When a goog.module annotated file is loaded, it is enclosed in

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-68): 
         * When a goog.module annotated file is loaded, it is enclosed in
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 396
   * a strict function closure. This means that:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-49): 
         * a strict function closure. This means that:
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 397
   * - any variables declared in a goog.module file are private to the file

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
         * - any variables declared in a goog.module file are private to the file
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 398
   * (not global), though the compiler is expected to inline the module.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
         * (not global), though the compiler is expected to inline the module.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 399
   * - The code must obey all the rules of "strict" JavaScript.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-64): 
         * - The code must obey all the rules of "strict" JavaScript.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 400
   * - the file will be marked as "use strict"

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-47): 
         * - the file will be marked as "use strict"
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 401
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 402
   * NOTE: unlike goog.provide, goog.module does not declare any symbols by

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
         * NOTE: unlike goog.provide, goog.module does not declare any symbols by
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 403
   * itself. If declared symbols are desired, use

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-50): 
         * itself. If declared symbols are desired, use
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 404
   * goog.module.declareLegacyNamespace().

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-43): 
         * goog.module.declareLegacyNamespace().
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 405
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 406
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 407
   * See the public goog.module proposal: http://goo.gl/Va1hin

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-63): 
         * See the public goog.module proposal: http://goo.gl/Va1hin
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 408
   * @param name Namespace provided by this file in the form "goog.package.part", is expected but not required.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-112): 
         * @param name Namespace provided by this file in the form "goog.package.part", is expected but not required.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,39] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 409
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 410
  function module (name : string ) : void ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-17): 
      module
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (18-19): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-23): 
      name
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (24-25): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-32): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-34): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (34-36): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (37-41): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (42-44): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 411
  function now ( ) : number ;

  LINE CONTAINS 13 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-14): 
      now
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (15-16): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (17-18): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (18-20): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (21-27): 
      number
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (28-30): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 412
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,40] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 413
   * Null function used for default values of callbacks, etc.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-62): 
         * Null function used for default values of callbacks, etc.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,40] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 414
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 415
  function nullFunction ( ) : void ;

  LINE CONTAINS 13 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-23): 
      nullFunction
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (24-25): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (26-27): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (27-29): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (30-34): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (35-37): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 416
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,41] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 417
   * Like goog.bind(), except that a 'this object' is not required. Useful when

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * Like goog.bind(), except that a 'this object' is not required. Useful when
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,41] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 418
   * the target function is already bound.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-43): 
         * the target function is already bound.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,41] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 419
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,41] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 420
   * Usage:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-12): 
         * Usage:
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,41] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 421
   * var g = goog.partial(f, arg1, arg2);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-42): 
         * var g = goog.partial(f, arg1, arg2);
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,41] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 422
   * g(arg3, arg4);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-20): 
         * g(arg3, arg4);
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,41] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 423
   * @param fn A function to partially apply.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-46): 
         * @param fn A function to partially apply.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,41] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 424
   * @param var_args Additional arguments that are partially applied to fn.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
         * @param var_args Additional arguments that are partially applied to fn.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,41] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 425
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 426
  function partial (fn : ( ( ...a : any [] ) => any ) | null ,  ...var_args : any [] ) : ( ...a : any [] ) => any ;

  LINE CONTAINS 66 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-18): 
      partial
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (19-20): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (20-22): 
      fn
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (23-24): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (24-26): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (26-28): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (29-30): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (30-31): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (31-32): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (32-33): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (33-36): 
       : 
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (36-39): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (40-41): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (41-42): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (43-44): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (45-47): 
      =>
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
    => TOKEN (48-51): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (52-53): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (54-55): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (55-56): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (56-60): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (61-64): 
      ,  
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (64-67): 
      ...
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (67-75): 
      var_args
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (75-76): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (76-77): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (77-78): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (78-81): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (81-82): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (82-83): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (83-84): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (84-85): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (85-86): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (86-88): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (88-90): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (90-91): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (91-92): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (92-93): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (93-94): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (94-95): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (95-98): 
       : 
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (98-101): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (101-102): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (102-103): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (103-104): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (104-105): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (105-106): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.paren.cover.ts
    => TOKEN (106-107): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (107-109): 
      =>
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (109-110): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.function.return.ts
    => TOKEN (110-113): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (113-114): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (114-116): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 427
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 428
   * Defines a namespace in Closure.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-37): 
         * Defines a namespace in Closure.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 429
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 430
   * A namespace may only be defined once in a codebase. It may be defined using

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * A namespace may only be defined once in a codebase. It may be defined using
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 431
   * goog.provide() or goog.module().

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-38): 
         * goog.provide() or goog.module().
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 432
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 433
   * The presence of one or more goog.provide() calls in a file indicates

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
         * The presence of one or more goog.provide() calls in a file indicates
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 434
   * that the file defines the given objects/namespaces.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-57): 
         * that the file defines the given objects/namespaces.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 435
   * Provided symbols must not be null or undefined.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-53): 
         * Provided symbols must not be null or undefined.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 436
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 437
   * In addition, goog.provide() creates the object stubs for a namespace

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
         * In addition, goog.provide() creates the object stubs for a namespace
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 438
   * (for example, goog.provide("goog.foo.bar") will create the object

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-71): 
         * (for example, goog.provide("goog.foo.bar") will create the object
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 439
   * goog.foo.bar if it does not already exist).

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-49): 
         * goog.foo.bar if it does not already exist).
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 440
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 441
   * Build tools also scan for provide/require/module statements

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-65): 
         * Build tools also scan for provide/require/module statements
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 442
   * to discern dependencies, build dependency files (see deps.js), etc.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
         * to discern dependencies, build dependency files (see deps.js), etc.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 443
   * @param name Namespace provided by this file in the form "goog.package.part".

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * @param name Namespace provided by this file in the form "goog.package.part".
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,42] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 444
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 445
  function provide (name : string ) : void ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-18): 
      provide
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (19-20): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (20-24): 
      name
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (25-26): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-33): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (35-37): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (38-42): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (43-45): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 446
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,43] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 447
   * Removes the hash code field from an object.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-49): 
         * Removes the hash code field from an object.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,43] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 448
   * @param obj The object to remove the field from.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-53): 
         * @param obj The object to remove the field from.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,43] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 449
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 450
  function removeHashCode (a : Object | null ) : any ;

  LINE CONTAINS 22 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-25): 
      removeHashCode
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (26-27): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (27-28): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (29-30): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (31-37): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (38-39): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (40-44): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (45-46): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (46-48): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (49-52): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (52-53): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (53-55): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 451
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,44] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 452
   * Removes the unique ID from an object. This is useful if the object was

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
         * Removes the unique ID from an object. This is useful if the object was
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,44] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 453
   * previously mutated using {@code goog.getUid} in which case the mutation is

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * previously mutated using {@code goog.getUid} in which case the mutation is
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,44] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 454
   * undone.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-13): 
         * undone.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,44] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 455
   * @param obj The object to remove the unique ID field from.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-63): 
         * @param obj The object to remove the unique ID field from.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,44] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 456
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 457
  function removeUid (obj : Object | null ) : void ;

  LINE CONTAINS 22 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-20): 
      removeUid
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (21-22): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (22-25): 
      obj
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (26-27): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-34): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-36): 
      |
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (37-41): 
      null
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (42-43): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (43-45): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (46-50): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (51-53): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 458
  function require (name : string ) : ಠ_ಠ.clutz.ClosureSymbolNotGoogProvided;

  LINE CONTAINS 17 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-18): 
      require
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (19-20): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (20-24): 
      name
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (25-26): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-33): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (35-37): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (37-39): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (39-76): 
      _ಠ.clutz.ClosureSymbolNotGoogProvided
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.name.ts
    => TOKEN (76-78): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 459
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,45] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 460
   * Allow for aliasing within scope functions.  This function exists for

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
         * Allow for aliasing within scope functions.  This function exists for
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,45] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 461
   * uncompiled code - in compiled code the calls will be inlined and the aliases

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * uncompiled code - in compiled code the calls will be inlined and the aliases
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,45] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 462
   * applied.  In uncompiled code the function is simply run since the aliases as

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * applied.  In uncompiled code the function is simply run since the aliases as
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,45] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 463
   * written are valid JavaScript.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-35): 
         * written are valid JavaScript.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,45] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 464
   * @param fn Function to call.  This function can contain aliases to namespaces (e.g. "var dom = goog.dom") or classes (e.g. "var Timer = goog.Timer").

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-154): 
         * @param fn Function to call.  This function can contain aliases to namespaces (e.g. "var dom = goog.dom") or classes (e.g. "var Timer = goog.Timer").
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,45] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 465
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 466
  function scope (fn : ( ) => any ) : void ;

  LINE CONTAINS 23 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-16): 
      scope
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (17-18): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (18-20): 
      fn
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (21-22): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (22-24): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (25-26): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-29): 
      =>
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
    => TOKEN (30-33): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (35-37): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (38-42): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (43-45): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 467
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 468
   * Sets the map to check when returning a value from goog.getCssName(). Example:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * Sets the map to check when returning a value from goog.getCssName(). Example:
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 469
   * <pre>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-11): 
         * <pre>
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 470
   * goog.setCssNameMapping({

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-30): 
         * goog.setCssNameMapping({
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 471
   * "goog": "a",

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-18): 
         * "goog": "a",
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 472
   * "disabled": "b",

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-22): 
         * "disabled": "b",
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 473
   * });

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-9): 
         * });
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 474
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 475
   * var x = goog.getCssName('goog');

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-38): 
         * var x = goog.getCssName('goog');
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 476
   * // The following evaluates to: "a a-b".

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-45): 
         * // The following evaluates to: "a a-b".
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 477
   * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-68): 
         * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 478
   * </pre>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-12): 
         * </pre>
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 479
   * When declared as a map of string literals to string literals, the JSCompiler

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * When declared as a map of string literals to string literals, the JSCompiler
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 480
   * will replace all calls to goog.getCssName() using the supplied map if the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * will replace all calls to goog.getCssName() using the supplied map if the
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 481
   * --process_closure_primitives flag is set.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-47): 
         * --process_closure_primitives flag is set.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 482
   * @param mapping A map of strings to strings where keys are possible arguments to goog.getCssName() and values are the corresponding values that should be returned.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-168): 
         * @param mapping A map of strings to strings where keys are possible arguments to goog.getCssName() and values are the corresponding values that should be returned.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 483
   * @param opt_style The style of css name mapping. There are two valid options: 'BY_PART', and 'BY_WHOLE'.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-109): 
         * @param opt_style The style of css name mapping. There are two valid options: 'BY_PART', and 'BY_WHOLE'.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,46] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 484
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 485
  function setCssNameMapping (mapping : Object , opt_style ? : string ) : void ;

  LINE CONTAINS 28 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-28): 
      setCssNameMapping
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (29-30): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (30-37): 
      mapping
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (38-39): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (40-46): 
      Object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (47-48): 
      ,
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (49-58): 
      opt_style
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (59-60): 
      ?
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (61-62): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (62-63): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (63-69): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (69-70): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (70-71): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (71-73): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (73-74): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (74-78): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (78-79): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (79-81): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 486
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,47] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 487
   * Marks that the current file should only be used for testing, and never for

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * Marks that the current file should only be used for testing, and never for
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,47] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 488
   * live code in production.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-30): 
         * live code in production.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,47] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 489
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,47] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 490
   * In the case of unit tests, the message may optionally be an exact namespace

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * In the case of unit tests, the message may optionally be an exact namespace
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,47] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 491
   * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,47] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 492
   * provide (if not explicitly defined in the code).

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-54): 
         * provide (if not explicitly defined in the code).
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,47] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 493
   * @param opt_message Optional message to add to the error that's raised when used in production code.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-105): 
         * @param opt_message Optional message to add to the error that's raised when used in production code.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,47] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 494
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 495
  function setTestOnly (opt_message ? : string ) : void ;

  LINE CONTAINS 20 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-22): 
      setTestOnly
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (23-24): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (24-35): 
      opt_message
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (36-37): 
      ?
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
    => TOKEN (38-39): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (40-46): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (47-48): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (48-50): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (51-55): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (55-56): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (56-58): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 496
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,48] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 497
   * Sealing classes breaks the older idiom of assigning properties on the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-75): 
         * Sealing classes breaks the older idiom of assigning properties on the
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,48] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 498
   * prototype rather than in the constructor. As such, goog.defineClass

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
         * prototype rather than in the constructor. As such, goog.defineClass
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,48] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 499
   * must not seal subclasses of these old-style classes until they are fixed.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * must not seal subclasses of these old-style classes until they are fixed.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,48] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 500
   * Until then, this marks a class as "broken", instructing defineClass

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
         * Until then, this marks a class as "broken", instructing defineClass
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,48] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 501
   * not to seal subclasses.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-29): 
         * not to seal subclasses.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,48] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 502
   * @param ctr The legacy constructor to tag as unsealable.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-61): 
         * @param ctr The legacy constructor to tag as unsealable.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,48] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 503
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 504
  function tagUnsealableClass (ctr : ( ...a : any [] ) => any ) : void ;

  LINE CONTAINS 33 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-29): 
      tagUnsealableClass
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (30-31): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (31-34): 
      ctr
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (35-36): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-38): 
       (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (39-40): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (40-41): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (41-42): 
      .
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (42-43): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (43-46): 
       : 
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (46-49): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (50-51): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (51-52): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (52-53): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (53-54): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (55-57): 
      =>
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (57-58): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
    => TOKEN (58-61): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (61-62): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (62-63): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (63-65): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (66-70): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (70-71): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (71-73): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 505
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,49] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 506
   * This is a "fixed" version of the typeof operator.  It differs from the typeof

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * This is a "fixed" version of the typeof operator.  It differs from the typeof
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,49] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 507
   * operator in such a way that null returns 'null' and arrays return 'array'.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * operator in such a way that null returns 'null' and arrays return 'array'.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,49] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 508
   * @param value The value to get the type of.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-48): 
         * @param value The value to get the type of.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,49] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 509
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 510
  function typeOf (value : any ) : string ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-17): 
      typeOf
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (18-19): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-24): 
      value
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (25-26): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-30): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (31-32): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (32-34): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (35-41): 
      string
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (42-44): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,1] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 511
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 512
declare module 'goog:goog' {

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-14): 
      module
      * source.ts
      * storage.type.ts
    => TOKEN (14-15): 
       
      * source.ts
    => TOKEN (15-16): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (16-25): 
      goog:goog
      * source.ts
      * string.single.ts
    => TOKEN (25-26): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (26-27): 
       
      * source.ts
    => TOKEN (27-28): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,50] BeginEndRule "meta.block.ts", entered @26
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 513
  import alias = ಠ_ಠ.clutz.goog;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      import
      * source.ts
      * meta.block.ts
      * keyword.control.import.include.ts
    => TOKEN (8-15): 
       alias 
      * source.ts
      * meta.block.ts
    => TOKEN (15-16): 
      =
      * source.ts
      * meta.block.ts
      * keyword.operator.comparison.ts
    => TOKEN (16-33): 
       ಠ_ಠ.clutz.goog;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,50] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 514
  export = alias;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      export
      * source.ts
      * meta.block.ts
      * storage.type.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
    => TOKEN (9-10): 
      =
      * source.ts
      * meta.block.ts
      * keyword.operator.comparison.ts
    => TOKEN (10-18): 
       alias;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,50] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 515
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 516
declare namespace ಠ_ಠ.clutz.goog {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-33): 
       ಠ_ಠ.clutz.goog 
      * source.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,51] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 517
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,52] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,51] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 518
   * A deprecated alias.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-25): 
         * A deprecated alias.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,52] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,51] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 519
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,51] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 520
  type Delay < THIS > = ಠ_ಠ.clutz.goog.async.Delay < THIS > ;

  LINE CONTAINS 22 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-6): 
      type
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * keyword.other.ts
    => TOKEN (6-7): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (7-12): 
      Delay
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * entity.name.class.ts
    => TOKEN (12-13): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (13-14): 
      <
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (15-19): 
      THIS
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (20-21): 
      >
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (22-24): 
      = 
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * keyword.operator.comparison.ts
    => TOKEN (24-25): 
      ಠ
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (25-50): 
      _ಠ.clutz.goog.async.Delay
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.name.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (51-52): 
      <
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (52-53): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (53-57): 
      THIS
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (57-58): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (58-59): 
      >
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (59-60): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (60-62): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,51] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 521
  var Delay : typeof ಠ_ಠ.clutz.goog.async.Delay ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-11): 
      Delay
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (12-13): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (14-20): 
      typeof
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * keyword.others.ts
    => TOKEN (20-22): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (22-47): 
      _ಠ.clutz.goog.async.Delay
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (48-50): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,51] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 522
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 523
declare module 'goog:goog.Delay' {

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-14): 
      module
      * source.ts
      * storage.type.ts
    => TOKEN (14-15): 
       
      * source.ts
    => TOKEN (15-16): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (16-31): 
      goog:goog.Delay
      * source.ts
      * string.single.ts
    => TOKEN (31-32): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (32-33): 
       
      * source.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,53] BeginEndRule "meta.block.ts", entered @32
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 524
  import alias = ಠ_ಠ.clutz.goog.Delay;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      import
      * source.ts
      * meta.block.ts
      * keyword.control.import.include.ts
    => TOKEN (8-15): 
       alias 
      * source.ts
      * meta.block.ts
    => TOKEN (15-16): 
      =
      * source.ts
      * meta.block.ts
      * keyword.operator.comparison.ts
    => TOKEN (16-39): 
       ಠ_ಠ.clutz.goog.Delay;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,53] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 525
  export default alias;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      export
      * source.ts
      * meta.block.ts
      * storage.type.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
    => TOKEN (9-16): 
      default
      * source.ts
      * meta.block.ts
      * keyword.control.ts
    => TOKEN (16-24): 
       alias;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,53] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 526
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 527
declare namespace ಠ_ಠ.clutz.goog {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-33): 
       ಠ_ಠ.clutz.goog 
      * source.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,54] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 528
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,55] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 529
   * Class that provides the basic implementation for disposable objects. If your

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * Class that provides the basic implementation for disposable objects. If your
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,55] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 530
   * class holds one or more references to COM objects, DOM nodes, or other

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
         * class holds one or more references to COM objects, DOM nodes, or other
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,55] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 531
   * disposable objects, it should extend this class or implement the disposable

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * disposable objects, it should extend this class or implement the disposable
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,55] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 532
   * interface (defined in goog.disposable.IDisposable).

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-57): 
         * interface (defined in goog.disposable.IDisposable).
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,55] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 533
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 534
  class Disposable extends Disposable_Instance {

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-7): 
      class
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * storage.type.ts
    => TOKEN (7-8): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (8-18): 
      Disposable
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.name.ts
      * entity.name.class.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (19-26): 
      extends
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * keyword.other.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (27-46): 
      Disposable_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (47-48): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,56] BeginEndRule "meta.object.body.ts", entered @47
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @0
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 535
    static INCLUDE_STACK_ON_CREATION : boolean ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (11-36): 
      INCLUDE_STACK_ON_CREATION
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (37-39): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (39-46): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (47-49): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 536
    static MONITORING_MODE : number ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (11-26): 
      MONITORING_MODE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (27-29): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (29-35): 
      number
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (36-38): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 537
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,58] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 538
     * Clears the registry of undisposed objects but doesn't dispose of them.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * Clears the registry of undisposed objects but doesn't dispose of them.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,58] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 539
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 540
    static clearUndisposedObjects ( ) : void ;

  LINE CONTAINS 14 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-33): 
      clearUndisposedObjects
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (34-35): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (36-37): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (38-39): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (40-44): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (45-47): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 541
    static getUndisposedObjects ( ) : ಠ_ಠ.clutz.goog.Disposable [] ;

  LINE CONTAINS 17 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-31): 
      getUndisposedObjects
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (32-33): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (34-35): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (36-37): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (37-39): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (39-63): 
      _ಠ.clutz.goog.Disposable
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (63-64): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (64-65): 
      [
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (65-66): 
      ]
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (66-67): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (67-69): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 542
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,59] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 543
     * Returns True if we can verify the object is disposed.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-61): 
           * Returns True if we can verify the object is disposed.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,59] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 544
     * Calls {@code isDisposed} on the argument if it supports it.  If obj

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-75): 
           * Calls {@code isDisposed} on the argument if it supports it.  If obj
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,59] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 545
     * is not an object with an isDisposed() method, return false.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-67): 
           * is not an object with an isDisposed() method, return false.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,59] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 546
     * @param obj The object to investigate.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-45): 
           * @param obj The object to investigate.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,59] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 547
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 548
    static isDisposed (obj : any ) : boolean ;

  LINE CONTAINS 19 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-21): 
      isDisposed
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (22-23): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-26): 
      obj
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (27-28): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-32): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-34): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (35-36): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (37-44): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (45-47): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,56] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,57] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 549
  }

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 550
  class Disposable_Instance implements ಠ_ಠ.clutz.goog.disposable.IDisposable {

  LINE CONTAINS 16 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-7): 
      class
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * storage.type.ts
    => TOKEN (7-8): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (8-27): 
      Disposable_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.name.ts
      * entity.name.class.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (28-38): 
      implements
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * keyword.other.ts
    => TOKEN (38-43): 
       ಠ_ಠ.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (43-48): 
      clutz
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (48-49): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (49-53): 
      goog
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (53-54): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (54-64): 
      disposable
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (64-65): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (65-76): 
      IDisposable
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (76-77): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (77-78): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @77
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @0
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 551
    private noStructuralTyping_: any;

  LINE CONTAINS 7 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-11): 
      private
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * storage.modifier.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (12-31): 
      noStructuralTyping_
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (31-33): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (33-36): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (36-38): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 552
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,62] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 553
     * Invokes a callback function when this object is disposed. Callbacks are

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
           * Invokes a callback function when this object is disposed. Callbacks are
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,62] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 554
     * invoked in the order in which they were added. If a callback is added to

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * invoked in the order in which they were added. If a callback is added to
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,62] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 555
     * an already disposed Disposable, it will be called immediately.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-70): 
           * an already disposed Disposable, it will be called immediately.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,62] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 556
     * @param callback The callback function.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-46): 
           * @param callback The callback function.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,62] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 557
     * @param opt_scope An optional scope to call the callback in.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-67): 
           * @param opt_scope An optional scope to call the callback in.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,62] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 558
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 559
    addOnDisposeCallback < T > (callback : ( ) => any , opt_scope ? : T ) : void ;

  LINE CONTAINS 38 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-24): 
      addOnDisposeCallback
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (25-26): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (27-28): 
      T
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (29-30): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (31-32): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (32-40): 
      callback
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (41-42): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (42-44): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (45-46): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (47-49): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
    => TOKEN (50-53): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (54-55): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (55-56): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (56-65): 
      opt_scope
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (66-67): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (67-68): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (68-69): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (69-70): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (70-71): 
      T
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (71-72): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (72-73): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (73-74): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (74-75): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (75-76): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (76-80): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (80-81): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (81-83): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 560
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,63] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 561
     * If monitoring the goog.Disposable instances is enabled, stores the creation

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * If monitoring the goog.Disposable instances is enabled, stores the creation
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,63] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 562
     * stack trace of the Disposable instance.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-47): 
           * stack trace of the Disposable instance.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,63] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 563
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 564
    creationStack : string ;

  LINE CONTAINS 7 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (4-17): 
      creationStack
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (18-20): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (20-26): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (27-29): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 565
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,64] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 566
     * Disposes of the object. If the object hasn't already been disposed of, calls

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * Disposes of the object. If the object hasn't already been disposed of, calls
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,64] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 567
     * {@link #disposeInternal}. Classes that extend {@code goog.Disposable} should

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * {@link #disposeInternal}. Classes that extend {@code goog.Disposable} should
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,64] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 568
     * override {@link #disposeInternal} in order to delete references to COM

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * override {@link #disposeInternal} in order to delete references to COM
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,64] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 569
     * objects, DOM nodes, and other disposable objects. Reentrant.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-68): 
           * objects, DOM nodes, and other disposable objects. Reentrant.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,64] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 570
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 571
    dispose ( ) : void ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-11): 
      dispose
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (12-13): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (14-15): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (18-22): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (23-25): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 572
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 573
     * Deletes or nulls out any references to COM objects, DOM nodes, or other

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
           * Deletes or nulls out any references to COM objects, DOM nodes, or other
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 574
     * disposable objects. Classes that extend {@code goog.Disposable} should

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * disposable objects. Classes that extend {@code goog.Disposable} should
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 575
     * override this method.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-29): 
           * override this method.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 576
     * Not reentrant. To avoid calling it twice, it must only be called from the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * Not reentrant. To avoid calling it twice, it must only be called from the
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 577
     * subclass' {@code disposeInternal} method. Everywhere else the public

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
           * subclass' {@code disposeInternal} method. Everywhere else the public
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 578
     * {@code dispose} method must be used.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-44): 
           * {@code dispose} method must be used.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 579
     * For example:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-20): 
           * For example:
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 580
     * <pre>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-13): 
           * <pre>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 581
     * mypackage.MyClass = function() {

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-40): 
           * mypackage.MyClass = function() {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 582
     * mypackage.MyClass.base(this, 'constructor');

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-52): 
           * mypackage.MyClass.base(this, 'constructor');
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 583
     * // Constructor logic specific to MyClass.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-49): 
           * // Constructor logic specific to MyClass.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 584
     * ...

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-11): 
           * ...
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 585
     * };

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-10): 
           * };
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 586
     * goog.inherits(mypackage.MyClass, goog.Disposable);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-58): 
           * goog.inherits(mypackage.MyClass, goog.Disposable);
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 587
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 588
     * mypackage.MyClass.prototype.disposeInternal = function() {

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-66): 
           * mypackage.MyClass.prototype.disposeInternal = function() {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 589
     * // Dispose logic specific to MyClass.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-45): 
           * // Dispose logic specific to MyClass.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 590
     * ...

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-11): 
           * ...
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 591
     * // Call superclass's disposeInternal at the end of the subclass's, like

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
           * // Call superclass's disposeInternal at the end of the subclass's, like
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 592
     * // in C++, to avoid hard-to-catch issues.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-49): 
           * // in C++, to avoid hard-to-catch issues.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 593
     * mypackage.MyClass.base(this, 'disposeInternal');

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-56): 
           * mypackage.MyClass.base(this, 'disposeInternal');
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 594
     * };

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-10): 
           * };
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 595
     * </pre>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-14): 
           * </pre>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,65] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 596
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 597
    disposeInternal ( ) : void ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-19): 
      disposeInternal
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (22-23): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (24-25): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (26-30): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (31-33): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 598
    getDisposed ( ) : boolean ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      getDisposed
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (18-19): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (22-29): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (30-32): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 599
    isDisposed ( ) : boolean ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-14): 
      isDisposed
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (15-16): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (17-18): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (19-20): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (21-28): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (29-31): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 600
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,66] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 601
     * Associates a disposable object with this object so that they will be disposed

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * Associates a disposable object with this object so that they will be disposed
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,66] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 602
     * together.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-17): 
           * together.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,66] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 603
     * @param disposable that will be disposed when this object is disposed.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-77): 
           * @param disposable that will be disposed when this object is disposed.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,66] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 604
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 605
    registerDisposable (disposable : ಠ_ಠ.clutz.goog.disposable.IDisposable | null ) : void ;

  LINE CONTAINS 21 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-22): 
      registerDisposable
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (23-24): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (24-34): 
      disposable
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (35-36): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-38): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (38-74): 
      _ಠ.clutz.goog.disposable.IDisposable
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (74-75): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (75-76): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (76-77): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (77-81): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (81-82): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (82-83): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (83-84): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (84-85): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (85-86): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (86-90): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (90-91): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (91-93): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,60] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,61] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 606
  }

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,54] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 607
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 608
declare namespace ಠ_ಠ.clutz.goog.Disposable {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-44): 
       ಠ_ಠ.clutz.goog.Disposable 
      * source.ts
    => TOKEN (44-45): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,67] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 609
  type MonitoringMode = number ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-6): 
      type
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * keyword.other.ts
    => TOKEN (6-7): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (7-21): 
      MonitoringMode
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * entity.name.class.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (22-24): 
      = 
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * keyword.operator.comparison.ts
    => TOKEN (24-30): 
      number
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (31-33): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,67] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 610
  var MonitoringMode : {

  LINE CONTAINS 8 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-20): 
      MonitoringMode
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (21-22): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (23-24): 
      {
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 6 RULES:
      * [63,68] BeginEndRule "meta.object.type.ts", entered @22
      * [86,69] BeginEndRule "meta.type.annotation.ts", entered @21
      * [38,70] BeginEndRule "meta.var-single-variable.expr.ts", entered @5
      * [36,71] BeginEndRule "meta.var.expr.ts", entered @0
      * [160,67] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 611
    INTERACTIVE : MonitoringMode ,

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (4-15): 
      INTERACTIVE
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (16-33): 
      : MonitoringMode 
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (33-35): 
      ,
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts

  LINE END RULE STACK CONTAINS 6 RULES:
      * [63,68] BeginEndRule "meta.object.type.ts", entered @-1
      * [86,69] BeginEndRule "meta.type.annotation.ts", entered @-1
      * [38,70] BeginEndRule "meta.var-single-variable.expr.ts", entered @-1
      * [36,71] BeginEndRule "meta.var.expr.ts", entered @-1
      * [160,67] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 612
    OFF : MonitoringMode ,

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (4-7): 
      OFF
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (7-8): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (8-25): 
      : MonitoringMode 
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (25-27): 
      ,
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts

  LINE END RULE STACK CONTAINS 6 RULES:
      * [63,68] BeginEndRule "meta.object.type.ts", entered @-1
      * [86,69] BeginEndRule "meta.type.annotation.ts", entered @-1
      * [38,70] BeginEndRule "meta.var-single-variable.expr.ts", entered @-1
      * [36,71] BeginEndRule "meta.var.expr.ts", entered @-1
      * [160,67] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 613
    PERMANENT : MonitoringMode ,

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (4-13): 
      PERMANENT
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (14-31): 
      : MonitoringMode 
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (31-33): 
      ,
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts

  LINE END RULE STACK CONTAINS 6 RULES:
      * [63,68] BeginEndRule "meta.object.type.ts", entered @-1
      * [86,69] BeginEndRule "meta.type.annotation.ts", entered @-1
      * [38,70] BeginEndRule "meta.var-single-variable.expr.ts", entered @-1
      * [36,71] BeginEndRule "meta.var.expr.ts", entered @-1
      * [160,67] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 614
  };

  LINE CONTAINS 3 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (3-5): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,67] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 615
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 616
declare module 'goog:goog.Disposable' {

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-14): 
      module
      * source.ts
      * storage.type.ts
    => TOKEN (14-15): 
       
      * source.ts
    => TOKEN (15-16): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (16-36): 
      goog:goog.Disposable
      * source.ts
      * string.single.ts
    => TOKEN (36-37): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (37-38): 
       
      * source.ts
    => TOKEN (38-39): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,72] BeginEndRule "meta.block.ts", entered @37
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 617
  import alias = ಠ_ಠ.clutz.goog.Disposable;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      import
      * source.ts
      * meta.block.ts
      * keyword.control.import.include.ts
    => TOKEN (8-15): 
       alias 
      * source.ts
      * meta.block.ts
    => TOKEN (15-16): 
      =
      * source.ts
      * meta.block.ts
      * keyword.operator.comparison.ts
    => TOKEN (16-44): 
       ಠ_ಠ.clutz.goog.Disposable;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,72] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 618
  export default alias;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      export
      * source.ts
      * meta.block.ts
      * storage.type.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
    => TOKEN (9-16): 
      default
      * source.ts
      * meta.block.ts
      * keyword.control.ts
    => TOKEN (16-24): 
       alias;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,72] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 619
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 620
declare namespace ಠ_ಠ.clutz.goog {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-33): 
       ಠ_ಠ.clutz.goog 
      * source.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,73] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 621
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 622
   * A history management object. Can be instantiated in user-visible mode (uses

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * A history management object. Can be instantiated in user-visible mode (uses
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 623
   * the address fragment to manage state) or in hidden mode. This object should

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * the address fragment to manage state) or in hidden mode. This object should
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 624
   * be created from a script in the document body before the document has

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-75): 
         * be created from a script in the document body before the document has
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 625
   * finished loading.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-23): 
         * finished loading.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 626
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 627
   * To store the hidden states in browsers other than IE, a hidden iframe is

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * To store the hidden states in browsers other than IE, a hidden iframe is
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 628
   * used. It must point to a valid html page on the same domain (which can and

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * used. It must point to a valid html page on the same domain (which can and
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 629
   * probably should be blank.)

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-32): 
         * probably should be blank.)
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 630
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 631
   * Sample instantiation and usage:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-37): 
         * Sample instantiation and usage:
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 632
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 633
   * <pre>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-11): 
         * <pre>
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 634
   * // Instantiate history to use the address bar for state.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-62): 
         * // Instantiate history to use the address bar for state.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 635
   * var h = new goog.History();

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-33): 
         * var h = new goog.History();
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 636
   * goog.events.listen(h, goog.history.EventType.NAVIGATE, navCallback);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
         * goog.events.listen(h, goog.history.EventType.NAVIGATE, navCallback);
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 637
   * h.setEnabled(true);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-25): 
         * h.setEnabled(true);
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 638
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 639
   * // Any changes to the location hash will call the following function.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-75): 
         * // Any changes to the location hash will call the following function.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 640
   * function navCallback(e) {

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-31): 
         * function navCallback(e) {
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 641
   * alert('Navigated to state "' + e.token + '"');

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-52): 
         * alert('Navigated to state "' + e.token + '"');
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 642
   * }

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
         * }
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 643
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 644
   * // The history token can also be set from code directly.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-62): 
         * // The history token can also be set from code directly.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 645
   * h.setToken('foo');

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-24): 
         * h.setToken('foo');
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 646
   * </pre>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-12): 
         * </pre>
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,74] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 647
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 648
  class History extends History_Instance {

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-7): 
      class
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * storage.type.ts
    => TOKEN (7-8): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (8-15): 
      History
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.name.ts
      * entity.name.class.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (16-23): 
      extends
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * keyword.other.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (24-40): 
      History_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (41-42): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,75] BeginEndRule "meta.object.body.ts", entered @41
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @0
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 649
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,77] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 650
     * Whether the browser always requires the hash to be present. Internet Explorer

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * Whether the browser always requires the hash to be present. Internet Explorer
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,77] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 651
     * before version 8 will reload the HTML page if the hash is omitted.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
           * before version 8 will reload the HTML page if the hash is omitted.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,77] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 652
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 653
    static HASH_ALWAYS_REQUIRED : boolean ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (11-31): 
      HASH_ALWAYS_REQUIRED
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (32-34): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (34-41): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (42-44): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 654
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,78] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 655
     * Whether the current browser is Internet Explorer prior to version 8. Many IE

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * Whether the current browser is Internet Explorer prior to version 8. Many IE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,78] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 656
     * specific workarounds developed before version 8 are unnecessary in more

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
           * specific workarounds developed before version 8 are unnecessary in more
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,78] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 657
     * current versions.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-25): 
           * current versions.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,78] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 658
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 659
    static LEGACY_IE : boolean ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (11-20): 
      LEGACY_IE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (21-23): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (23-30): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (31-33): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 660
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,79] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 661
     * Whether the browser supports HTML5 history management's onhashchange event.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * Whether the browser supports HTML5 history management's onhashchange event.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,79] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 662
     * {@link http://www.w3.org/TR/html5/history.html}. IE 9 in compatibility mode

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * {@link http://www.w3.org/TR/html5/history.html}. IE 9 in compatibility mode
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,79] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 663
     * indicates that onhashchange is in window, but testing reveals the event

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
           * indicates that onhashchange is in window, but testing reveals the event
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,79] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 664
     * isn't actually fired.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-29): 
           * isn't actually fired.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,79] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 665
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 666
    static isOnHashChangeSupported ( ) : boolean ;

  LINE CONTAINS 14 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-34): 
      isOnHashChangeSupported
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (35-36): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (37-38): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (39-40): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (41-48): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (49-51): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,75] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,76] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 667
  }

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 668
  class History_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {

  LINE CONTAINS 16 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-7): 
      class
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * storage.type.ts
    => TOKEN (7-8): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (8-24): 
      History_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.name.ts
      * entity.name.class.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (25-32): 
      extends
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * keyword.other.ts
    => TOKEN (32-37): 
       ಠ_ಠ.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (37-42): 
      clutz
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (42-43): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (43-47): 
      goog
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (47-48): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (48-54): 
      events
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (54-55): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (55-75): 
      EventTarget_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (75-76): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (76-77): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @76
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @0
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 669
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 670
     * A history management object. Can be instantiated in user-visible mode (uses

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * A history management object. Can be instantiated in user-visible mode (uses
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 671
     * the address fragment to manage state) or in hidden mode. This object should

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * the address fragment to manage state) or in hidden mode. This object should
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 672
     * be created from a script in the document body before the document has

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-77): 
           * be created from a script in the document body before the document has
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 673
     * finished loading.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-25): 
           * finished loading.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 674
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 675
     * To store the hidden states in browsers other than IE, a hidden iframe is

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * To store the hidden states in browsers other than IE, a hidden iframe is
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 676
     * used. It must point to a valid html page on the same domain (which can and

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * used. It must point to a valid html page on the same domain (which can and
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 677
     * probably should be blank.)

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
           * probably should be blank.)
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 678
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 679
     * Sample instantiation and usage:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-39): 
           * Sample instantiation and usage:
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 680
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 681
     * <pre>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-13): 
           * <pre>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 682
     * // Instantiate history to use the address bar for state.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-64): 
           * // Instantiate history to use the address bar for state.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 683
     * var h = new goog.History();

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-35): 
           * var h = new goog.History();
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 684
     * goog.events.listen(h, goog.history.EventType.NAVIGATE, navCallback);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
           * goog.events.listen(h, goog.history.EventType.NAVIGATE, navCallback);
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 685
     * h.setEnabled(true);

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-27): 
           * h.setEnabled(true);
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 686
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 687
     * // Any changes to the location hash will call the following function.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-77): 
           * // Any changes to the location hash will call the following function.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 688
     * function navCallback(e) {

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-33): 
           * function navCallback(e) {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 689
     * alert('Navigated to state "' + e.token + '"');

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-54): 
           * alert('Navigated to state "' + e.token + '"');
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 690
     * }

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-9): 
           * }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 691
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 692
     * // The history token can also be set from code directly.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-64): 
           * // The history token can also be set from code directly.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 693
     * h.setToken('foo');

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-26): 
           * h.setToken('foo');
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 694
     * </pre>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-14): 
           * </pre>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 695
     * @param opt_invisible True to use hidden history states instead of the user-visible location hash.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-105): 
           * @param opt_invisible True to use hidden history states instead of the user-visible location hash.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 696
     * @param opt_blankPageUrl A URL to a blank page on the same server. Required if opt_invisible is true. This URL is also used as the src for the iframe used to track history state in IE (if not specified the iframe is not given a src attribute). Access is Denied error may occur in IE7 if the window's URL's scheme is https, and this URL is not specified.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-360): 
           * @param opt_blankPageUrl A URL to a blank page on the same server. Required if opt_invisible is true. This URL is also used as the src for the iframe used to track history state in IE (if not specified the iframe is not given a src attribute). Access is Denied error may occur in IE7 if the window's URL's scheme is https, and this URL is not specified.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 697
     * @param opt_input The hidden input element to be used to store the history token.  If not provided, a hidden input element will be created using document.write.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-167): 
           * @param opt_input The hidden input element to be used to store the history token.  If not provided, a hidden input element will be created using document.write.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 698
     * @param opt_iframe The hidden iframe that will be used by IE for pushing history state changes, or by all browsers if opt_invisible is true. If not provided, a hidden iframe element will be created using document.write.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-226): 
           * @param opt_iframe The hidden iframe that will be used by IE for pushing history state changes, or by all browsers if opt_invisible is true. If not provided, a hidden iframe element will be created using document.write.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,82] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 699
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 700
    constructor (opt_invisible ? : boolean , opt_blankPageUrl ? : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl , opt_input ? : HTMLInputElement | null , opt_iframe ? : HTMLIFrameElement | null ) ;

  LINE CONTAINS 53 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      constructor
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * storage.type.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-30): 
      opt_invisible
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (31-32): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (33-34): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-42): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (43-44): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (45-61): 
      opt_blankPageUrl
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (61-62): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (62-63): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (63-64): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (64-65): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (65-67): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (67-104): 
      _ಠ.clutz.goog.html.TrustedResourceUrl
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (104-105): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (105-106): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (106-107): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (107-116): 
      opt_input
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (116-117): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (117-118): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (118-119): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (119-120): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (120-121): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (121-137): 
      HTMLInputElement
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (137-138): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (138-139): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (139-140): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (140-144): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (144-145): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (145-146): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (146-147): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (147-157): 
      opt_iframe
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (157-158): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (158-159): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (159-160): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (160-161): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (161-162): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (162-179): 
      HTMLIFrameElement
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (179-180): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (180-181): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (181-182): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (182-186): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (186-187): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (187-188): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (188-189): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (189-191): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 701
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,83] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 702
     * IE-only variable for determining if the document has loaded.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-68): 
           * IE-only variable for determining if the document has loaded.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,83] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 703
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 704
    documentLoaded : boolean ;

  LINE CONTAINS 7 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (4-18): 
      documentLoaded
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (19-21): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (21-28): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (29-31): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 705
    disposeInternal ( ) : void ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-19): 
      disposeInternal
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (22-23): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (24-25): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (26-30): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (31-33): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 706
    getToken ( ) : string ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-12): 
      getToken
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (12-13): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (13-14): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (15-16): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (17-18): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (19-25): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (26-28): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 707
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,84] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 708
     * Callback for the window onload event in IE. This is necessary to read the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * Callback for the window onload event in IE. This is necessary to read the
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,84] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 709
     * value of the hidden input after restoring a history session. The value of

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * value of the hidden input after restoring a history session. The value of
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,84] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 710
     * input elements is not viewable until after window onload for some reason (the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * input elements is not viewable until after window onload for some reason (the
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,84] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 711
     * iframe state is similarly unavailable during the loading phase.)  If

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
           * iframe state is similarly unavailable during the loading phase.)  If
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,84] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 712
     * setEnabled is called before the iframe has completed loading, the history

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * setEnabled is called before the iframe has completed loading, the history
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,84] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 713
     * object will actually be enabled at this point.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-54): 
           * object will actually be enabled at this point.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,84] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 714
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 715
    onDocumentLoaded ( ) : void ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-20): 
      onDocumentLoaded
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (21-22): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (23-24): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (25-26): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (27-31): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (32-34): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 716
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,85] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 717
     * Replaces the current history state without affecting the rest of the history

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * Replaces the current history state without affecting the rest of the history
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,85] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 718
     * stack.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-14): 
           * stack.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,85] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 719
     * @param token The history state identifier.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-50): 
           * @param token The history state identifier.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,85] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 720
     * @param opt_title Optional title used when setting the hidden iframe title in IE.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-88): 
           * @param opt_title Optional title used when setting the hidden iframe title in IE.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,85] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 721
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 722
    replaceToken (token : string , opt_title ? : string ) : void ;

  LINE CONTAINS 27 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-16): 
      replaceToken
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (17-18): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (18-23): 
      token
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (24-25): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-32): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-34): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (35-44): 
      opt_title
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (45-46): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (47-48): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (49-55): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (55-56): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (56-57): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (57-58): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (58-59): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (59-60): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (60-64): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (64-65): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (65-67): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 723
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,86] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 724
     * Starts or stops the History polling loop. When enabled, the History object

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * Starts or stops the History polling loop. When enabled, the History object
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,86] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 725
     * will immediately fire an event for the current location. The caller can set

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * will immediately fire an event for the current location. The caller can set
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,86] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 726
     * up event listeners between the call to the constructor and the call to

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * up event listeners between the call to the constructor and the call to
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,86] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 727
     * setEnabled.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-19): 
           * setEnabled.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,86] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 728
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,86] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 729
     * On IE, actual startup may be delayed until the iframe and hidden input

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * On IE, actual startup may be delayed until the iframe and hidden input
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,86] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 730
     * element have been loaded and can be polled. This behavior is transparent to

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * element have been loaded and can be polled. This behavior is transparent to
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,86] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 731
     * the caller.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-19): 
           * the caller.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,86] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 732
     * @param enable Whether to enable the history polling loop.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-65): 
           * @param enable Whether to enable the history polling loop.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,86] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 733
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 734
    setEnabled (enable : boolean ) : void ;

  LINE CONTAINS 17 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-14): 
      setEnabled
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (15-16): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (16-22): 
      enable
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (23-24): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (25-32): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-34): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (35-36): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (37-41): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (42-44): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 735
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,87] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 736
     * Sets the history state. When user visible states are used, the URL fragment

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * Sets the history state. When user visible states are used, the URL fragment
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,87] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 737
     * will be set to the provided token.  Sometimes it is necessary to set the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * will be set to the provided token.  Sometimes it is necessary to set the
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,87] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 738
     * history token before the document title has changed, in this case IE's

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * history token before the document title has changed, in this case IE's
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,87] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 739
     * history drop down can be out of sync with the token.  To get around this

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * history drop down can be out of sync with the token.  To get around this
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,87] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 740
     * problem, the app can pass in a title to use with the hidden iframe.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-75): 
           * problem, the app can pass in a title to use with the hidden iframe.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,87] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 741
     * @param token The history state identifier.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-50): 
           * @param token The history state identifier.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,87] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 742
     * @param opt_title Optional title used when setting the hidden iframe title in IE.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-88): 
           * @param opt_title Optional title used when setting the hidden iframe title in IE.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,87] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 743
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 744
    setToken (token : string , opt_title ? : string ) : void ;

  LINE CONTAINS 27 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-12): 
      setToken
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (12-13): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (13-14): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (14-19): 
      token
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (20-21): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (22-28): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-30): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (31-40): 
      opt_title
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (41-42): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (43-44): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (45-51): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (52-53): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (54-55): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (55-56): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (56-60): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (61-63): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,80] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,81] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 745
  }

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,73] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 746
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 747
declare namespace ಠ_ಠ.clutz.goog.History {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-41): 
       ಠ_ಠ.clutz.goog.History 
      * source.ts
    => TOKEN (41-42): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,88] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 748
  type PollingType = number ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-6): 
      type
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * keyword.other.ts
    => TOKEN (6-7): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (7-18): 
      PollingType
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * entity.name.class.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (19-21): 
      = 
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * keyword.operator.comparison.ts
    => TOKEN (21-27): 
      number
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (28-30): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,88] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 749
  var PollingType : {

  LINE CONTAINS 8 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-17): 
      PollingType
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (18-19): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (20-21): 
      {
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 6 RULES:
      * [63,89] BeginEndRule "meta.object.type.ts", entered @19
      * [86,90] BeginEndRule "meta.type.annotation.ts", entered @18
      * [38,91] BeginEndRule "meta.var-single-variable.expr.ts", entered @5
      * [36,92] BeginEndRule "meta.var.expr.ts", entered @0
      * [160,88] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 750
    LONG : PollingType ,

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (4-8): 
      LONG
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (9-23): 
      : PollingType 
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (23-25): 
      ,
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts

  LINE END RULE STACK CONTAINS 6 RULES:
      * [63,89] BeginEndRule "meta.object.type.ts", entered @-1
      * [86,90] BeginEndRule "meta.type.annotation.ts", entered @-1
      * [38,91] BeginEndRule "meta.var-single-variable.expr.ts", entered @-1
      * [36,92] BeginEndRule "meta.var.expr.ts", entered @-1
      * [160,88] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 751
    NORMAL : PollingType ,

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (4-10): 
      NORMAL
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (11-25): 
      : PollingType 
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (25-27): 
      ,
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts

  LINE END RULE STACK CONTAINS 6 RULES:
      * [63,89] BeginEndRule "meta.object.type.ts", entered @-1
      * [86,90] BeginEndRule "meta.type.annotation.ts", entered @-1
      * [38,91] BeginEndRule "meta.var-single-variable.expr.ts", entered @-1
      * [36,92] BeginEndRule "meta.var.expr.ts", entered @-1
      * [160,88] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 752
  };

  LINE CONTAINS 3 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (3-5): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,88] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 753
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 754
declare module 'goog:goog.History' {

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-14): 
      module
      * source.ts
      * storage.type.ts
    => TOKEN (14-15): 
       
      * source.ts
    => TOKEN (15-16): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (16-33): 
      goog:goog.History
      * source.ts
      * string.single.ts
    => TOKEN (33-34): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (34-35): 
       
      * source.ts
    => TOKEN (35-36): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,93] BeginEndRule "meta.block.ts", entered @34
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 755
  import alias = ಠ_ಠ.clutz.goog.History;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      import
      * source.ts
      * meta.block.ts
      * keyword.control.import.include.ts
    => TOKEN (8-15): 
       alias 
      * source.ts
      * meta.block.ts
    => TOKEN (15-16): 
      =
      * source.ts
      * meta.block.ts
      * keyword.operator.comparison.ts
    => TOKEN (16-41): 
       ಠ_ಠ.clutz.goog.History;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,93] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 756
  export default alias;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      export
      * source.ts
      * meta.block.ts
      * storage.type.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
    => TOKEN (9-16): 
      default
      * source.ts
      * meta.block.ts
      * keyword.control.ts
    => TOKEN (16-24): 
       alias;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,93] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 757
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 758
declare namespace ಠ_ಠ.clutz.goog.History {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-41): 
       ಠ_ಠ.clutz.goog.History 
      * source.ts
    => TOKEN (41-42): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,94] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 759
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,95] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,94] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 760
   * Constant for the history change event type.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-49): 
         * Constant for the history change event type.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,95] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,94] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 761
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,94] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 762
  type Event = ಠ_ಠ.clutz.goog.history.Event ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-6): 
      type
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * keyword.other.ts
    => TOKEN (6-7): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (7-12): 
      Event
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * entity.name.class.ts
    => TOKEN (12-13): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (13-15): 
      = 
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * keyword.operator.comparison.ts
    => TOKEN (15-16): 
      ಠ
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (16-43): 
      _ಠ.clutz.goog.history.Event
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.name.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (44-46): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,94] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 763
  var Event : typeof ಠ_ಠ.clutz.goog.history.Event ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-11): 
      Event
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (12-13): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (14-20): 
      typeof
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * keyword.others.ts
    => TOKEN (20-22): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (22-49): 
      _ಠ.clutz.goog.history.Event
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (50-52): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,94] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 764
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 765
declare namespace ಠ_ಠ.clutz.goog {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-33): 
       ಠ_ಠ.clutz.goog 
      * source.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,96] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 766
  function require(name: 'goog.History.Event'): typeof ಠ_ಠ.clutz.goog.History.Event;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-18): 
      require
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (18-19): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-23): 
      name
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (23-24): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (25-26): 
      '
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * string.single.ts
    => TOKEN (26-44): 
      goog.History.Event
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * string.single.ts
    => TOKEN (44-45): 
      '
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * string.single.ts
    => TOKEN (45-46): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (46-47): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (48-54): 
      typeof
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.name.ts
    => TOKEN (54-56): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (56-83): 
      _ಠ.clutz.goog.History.Event
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.name.ts
    => TOKEN (83-85): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,96] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 767
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 768
declare module 'goog:goog.History.Event' {

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-14): 
      module
      * source.ts
      * storage.type.ts
    => TOKEN (14-15): 
       
      * source.ts
    => TOKEN (15-16): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (16-39): 
      goog:goog.History.Event
      * source.ts
      * string.single.ts
    => TOKEN (39-40): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (40-41): 
       
      * source.ts
    => TOKEN (41-42): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,97] BeginEndRule "meta.block.ts", entered @40
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 769
  import alias = ಠ_ಠ.clutz.goog.History.Event;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      import
      * source.ts
      * meta.block.ts
      * keyword.control.import.include.ts
    => TOKEN (8-15): 
       alias 
      * source.ts
      * meta.block.ts
    => TOKEN (15-16): 
      =
      * source.ts
      * meta.block.ts
      * keyword.operator.comparison.ts
    => TOKEN (16-47): 
       ಠ_ಠ.clutz.goog.History.Event;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,97] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 770
  export default alias;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      export
      * source.ts
      * meta.block.ts
      * storage.type.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
    => TOKEN (9-16): 
      default
      * source.ts
      * meta.block.ts
      * keyword.control.ts
    => TOKEN (16-24): 
       alias;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,97] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 771
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 772
declare namespace ಠ_ಠ.clutz.goog.History {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-41): 
       ಠ_ಠ.clutz.goog.History 
      * source.ts
    => TOKEN (41-42): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,98] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 773
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,99] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,98] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 774
   * Constant for the history change event type.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-49): 
         * Constant for the history change event type.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,99] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,98] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 775
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,98] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 776
  type EventType = string ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-6): 
      type
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * keyword.other.ts
    => TOKEN (6-7): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (7-16): 
      EventType
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * entity.name.class.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (17-19): 
      = 
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * keyword.operator.comparison.ts
    => TOKEN (19-25): 
      string
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (26-28): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,98] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 777
  var EventType : {

  LINE CONTAINS 8 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-15): 
      EventType
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (16-17): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (18-19): 
      {
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 6 RULES:
      * [63,100] BeginEndRule "meta.object.type.ts", entered @17
      * [86,101] BeginEndRule "meta.type.annotation.ts", entered @16
      * [38,102] BeginEndRule "meta.var-single-variable.expr.ts", entered @5
      * [36,103] BeginEndRule "meta.var.expr.ts", entered @0
      * [160,98] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 778
    NAVIGATE : EventType ,

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (4-12): 
      NAVIGATE
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (12-13): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (13-25): 
      : EventType 
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (25-27): 
      ,
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts

  LINE END RULE STACK CONTAINS 6 RULES:
      * [63,100] BeginEndRule "meta.object.type.ts", entered @-1
      * [86,101] BeginEndRule "meta.type.annotation.ts", entered @-1
      * [38,102] BeginEndRule "meta.var-single-variable.expr.ts", entered @-1
      * [36,103] BeginEndRule "meta.var.expr.ts", entered @-1
      * [160,98] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 779
  };

  LINE CONTAINS 3 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (3-5): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,98] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 780
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 781
declare namespace ಠ_ಠ.clutz.goog {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-33): 
       ಠ_ಠ.clutz.goog 
      * source.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,104] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 782
  function require(name: 'goog.History.EventType'): typeof ಠ_ಠ.clutz.goog.History.EventType;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-18): 
      require
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (18-19): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-23): 
      name
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (23-24): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (25-26): 
      '
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * string.single.ts
    => TOKEN (26-48): 
      goog.History.EventType
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * string.single.ts
    => TOKEN (48-49): 
      '
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * string.single.ts
    => TOKEN (49-50): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (50-51): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (52-58): 
      typeof
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.name.ts
    => TOKEN (58-60): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (60-91): 
      _ಠ.clutz.goog.History.EventType
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.name.ts
    => TOKEN (91-93): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,104] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 783
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 784
declare module 'goog:goog.History.EventType' {

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-14): 
      module
      * source.ts
      * storage.type.ts
    => TOKEN (14-15): 
       
      * source.ts
    => TOKEN (15-16): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (16-43): 
      goog:goog.History.EventType
      * source.ts
      * string.single.ts
    => TOKEN (43-44): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (44-45): 
       
      * source.ts
    => TOKEN (45-46): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,105] BeginEndRule "meta.block.ts", entered @44
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 785
  import alias = ಠ_ಠ.clutz.goog.History.EventType;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      import
      * source.ts
      * meta.block.ts
      * keyword.control.import.include.ts
    => TOKEN (8-15): 
       alias 
      * source.ts
      * meta.block.ts
    => TOKEN (15-16): 
      =
      * source.ts
      * meta.block.ts
      * keyword.operator.comparison.ts
    => TOKEN (16-51): 
       ಠ_ಠ.clutz.goog.History.EventType;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,105] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 786
  export default alias;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      export
      * source.ts
      * meta.block.ts
      * storage.type.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
    => TOKEN (9-16): 
      default
      * source.ts
      * meta.block.ts
      * keyword.control.ts
    => TOKEN (16-24): 
       alias;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,105] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 787
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 788
declare namespace ಠ_ಠ.clutz.goog {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-33): 
       ಠ_ಠ.clutz.goog 
      * source.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,106] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 789
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 790
   * Promises provide a result that may be resolved asynchronously. A Promise may

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * Promises provide a result that may be resolved asynchronously. A Promise may
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 791
   * be resolved by being fulfilled with a fulfillment value, rejected with a

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * be resolved by being fulfilled with a fulfillment value, rejected with a
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 792
   * rejection reason, or blocked by another Promise. A Promise is said to be

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * rejection reason, or blocked by another Promise. A Promise is said to be
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 793
   * settled if it is either fulfilled or rejected. Once settled, the Promise

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * settled if it is either fulfilled or rejected. Once settled, the Promise
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 794
   * result is immutable.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-26): 
         * result is immutable.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 795
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 796
   * Promises may represent results of any type, including undefined. Rejection

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
         * Promises may represent results of any type, including undefined. Rejection
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 797
   * reasons are typically Errors, but may also be of any type. Closure Promises

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * reasons are typically Errors, but may also be of any type. Closure Promises
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 798
   * allow for optional type annotations that enforce that fulfillment values are

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * allow for optional type annotations that enforce that fulfillment values are
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 799
   * of the appropriate types at compile time.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-47): 
         * of the appropriate types at compile time.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 800
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 801
   * The result of a Promise is accessible by calling {@code then} and registering

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * The result of a Promise is accessible by calling {@code then} and registering
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 802
   * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
         * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 803
   * is settled, the relevant callbacks are invoked with the fulfillment value or

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * is settled, the relevant callbacks are invoked with the fulfillment value or
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 804
   * rejection reason as argument. Callbacks are always invoked in the order they

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * rejection reason as argument. Callbacks are always invoked in the order they
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 805
   * were registered, even when additional {@code then} calls are made from inside

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
         * were registered, even when additional {@code then} calls are made from inside
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 806
   * another callback. A callback is always run asynchronously sometime after the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * another callback. A callback is always run asynchronously sometime after the
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 807
   * scope containing the registering {@code then} invocation has returned.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
         * scope containing the registering {@code then} invocation has returned.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 808
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 809
   * If a Promise is resolved with another Promise, the first Promise will block

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * If a Promise is resolved with another Promise, the first Promise will block
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 810
   * until the second is settled, and then assumes the same result as the second

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * until the second is settled, and then assumes the same result as the second
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 811
   * Promise. This allows Promises to depend on the results of other Promises,

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * Promise. This allows Promises to depend on the results of other Promises,
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 812
   * linking together multiple asynchronous operations.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-56): 
         * linking together multiple asynchronous operations.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 813
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 814
   * This implementation is compatible with the Promises/A+ specification and

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * This implementation is compatible with the Promises/A+ specification and
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 815
   * passes that specification's conformance test suite. A Closure Promise may be

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
         * passes that specification's conformance test suite. A Closure Promise may be
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 816
   * resolved with a Promise instance (or sufficiently compatible Promise-like

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * resolved with a Promise instance (or sufficiently compatible Promise-like
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 817
   * object) created by other Promise implementations. From the specification,

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * object) created by other Promise implementations. From the specification,
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 818
   * Promise-like objects are known as "Thenables".

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-52): 
         * Promise-like objects are known as "Thenables".
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,107] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 819
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 820
  class Promise < TYPE , RESOLVER_CONTEXT > extends Promise_Instance < TYPE , RESOLVER_CONTEXT > {

  LINE CONTAINS 26 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-7): 
      class
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * storage.type.ts
    => TOKEN (7-8): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (8-15): 
      Promise
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.name.ts
      * entity.name.class.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (16-17): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
    => TOKEN (18-22): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (22-25): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
    => TOKEN (25-41): 
      RESOLVER_CONTEXT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
    => TOKEN (42-43): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (44-51): 
      extends
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * keyword.other.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (52-68): 
      Promise_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (68-69): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (69-70): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (70-71): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
    => TOKEN (71-75): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (75-78): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
    => TOKEN (78-94): 
      RESOLVER_CONTEXT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (94-95): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
    => TOKEN (95-96): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
    => TOKEN (96-97): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (97-98): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,108] BeginEndRule "meta.object.body.ts", entered @97
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @0
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 821
    static DEFAULT_MAX_UNUSED : number ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (11-29): 
      DEFAULT_MAX_UNUSED
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (30-32): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (32-38): 
      number
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (39-41): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 822
    static LONG_STACK_TRACES : boolean ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (11-28): 
      LONG_STACK_TRACES
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (29-31): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (31-38): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (39-41): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 823
    static UNHANDLED_REJECTION_DELAY : number ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (11-36): 
      UNHANDLED_REJECTION_DELAY
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (37-39): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (39-45): 
      number
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (46-48): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 824
    static all < TYPE > (promises : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : ಠ_ಠ.clutz.goog.Promise < TYPE [] , any > ;

  LINE CONTAINS 36 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-14): 
      all
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (15-16): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (17-21): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (22-23): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (24-25): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (25-33): 
      promises
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (34-35): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-37): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (37-71): 
      _ಠ.clutz.goog.uri.utils.QueryArray
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (71-72): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (72-73): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (73-74): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (74-75): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (75-77): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (77-98): 
      _ಠ.clutz.goog.Promise
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (98-99): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (99-100): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (100-101): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (101-105): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (105-106): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (106-107): 
      [
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (107-108): 
      ]
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (108-111): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (111-114): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (114-115): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (115-116): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (116-117): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (117-119): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 825
    static allSettled < TYPE > (promises : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : ಠ_ಠ.clutz.goog.Promise < { fulfilled : boolean , reason ? : any , value ? : TYPE } [] , any > ;

  LINE CONTAINS 57 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-21): 
      allSettled
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (22-23): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (24-28): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (29-30): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (31-32): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (32-40): 
      promises
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (41-42): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (42-44): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (44-78): 
      _ಠ.clutz.goog.uri.utils.QueryArray
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (78-79): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (79-80): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (80-81): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (81-82): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (82-84): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (84-105): 
      _ಠ.clutz.goog.Promise
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (105-106): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (106-107): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (107-108): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (108-109): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (109-110): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (110-119): 
      fulfilled
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (119-120): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (120-122): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (122-129): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (129-130): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (130-131): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
    => TOKEN (131-132): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (132-138): 
      reason
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (138-139): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (139-141): 
      ? 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * keyword.others.ts
    => TOKEN (141-143): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (143-146): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (146-147): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (147-148): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
    => TOKEN (148-149): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (149-154): 
      value
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (154-155): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (155-157): 
      ? 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * keyword.others.ts
    => TOKEN (157-164): 
      : TYPE 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (164-165): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (165-166): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (166-167): 
      [
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (167-168): 
      ]
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (168-171): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (171-174): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (174-175): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (175-176): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (176-177): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (177-179): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 826
    static firstFulfilled < TYPE > (promises : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : ಠ_ಠ.clutz.goog.Promise < TYPE , any > ;

  LINE CONTAINS 33 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-25): 
      firstFulfilled
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (26-27): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (28-32): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (33-34): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (35-36): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (36-44): 
      promises
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (45-46): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (46-48): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (48-82): 
      _ಠ.clutz.goog.uri.utils.QueryArray
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (82-83): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (83-84): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (84-85): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (85-86): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (86-88): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (88-109): 
      _ಠ.clutz.goog.Promise
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (109-110): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (110-111): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (111-112): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (112-116): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (116-119): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (119-122): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (122-123): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (123-124): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (124-125): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (125-127): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 827
    static race < TYPE > (promises : ಠ_ಠ.clutz.goog.uri.utils.QueryArray ) : ಠ_ಠ.clutz.goog.Promise < TYPE , any > ;

  LINE CONTAINS 33 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-15): 
      race
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (18-22): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (23-24): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (25-26): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (26-34): 
      promises
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (35-36): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-38): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (38-72): 
      _ಠ.clutz.goog.uri.utils.QueryArray
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (72-73): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (73-74): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (74-75): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (75-76): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (76-78): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (78-99): 
      _ಠ.clutz.goog.Promise
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (99-100): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (100-101): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (101-102): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (102-106): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (106-109): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (109-112): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (112-113): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (113-114): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (114-115): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (115-117): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 828
    static reject (opt_reason ? : any ) : ಠ_ಠ.clutz.goog.Promise < any , any > ;

  LINE CONTAINS 29 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-17): 
      reject
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (18-19): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-29): 
      opt_reason
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (30-31): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (32-33): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-37): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (38-39): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (40-41): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (41-43): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (43-64): 
      _ಠ.clutz.goog.Promise
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (64-65): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (65-66): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (66-67): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (67-70): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (70-73): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (73-76): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (76-77): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (77-78): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (78-79): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (79-81): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 829
    static resolve < VALUE , RESULT > (opt_value ? : VALUE ) : RESULT ;

  LINE CONTAINS 29 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-18): 
      resolve
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (19-20): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (21-26): 
      VALUE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (26-29): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (29-35): 
      RESULT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (36-37): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (38-39): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (39-48): 
      opt_value
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (49-50): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (51-52): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (52-53): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (53-58): 
      VALUE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (59-60): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (61-62): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (62-63): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (63-69): 
      RESULT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (69-70): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (70-72): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 830
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,110] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 831
     * Sets a handler that will be called with reasons from unhandled rejected

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
           * Sets a handler that will be called with reasons from unhandled rejected
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,110] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 832
     * Promises. If the rejected Promise (or one of its descendants) has an

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
           * Promises. If the rejected Promise (or one of its descendants) has an
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,110] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 833
     * {@code onRejected} callback registered, the rejection will be considered

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * {@code onRejected} callback registered, the rejection will be considered
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,110] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 834
     * handled, and the rejection handler will not be called.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-62): 
           * handled, and the rejection handler will not be called.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,110] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 835
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,110] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 836
     * By default, unhandled rejections are rethrown so that the error may be

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * By default, unhandled rejections are rethrown so that the error may be
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,110] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 837
     * captured by the developer console or a {@code window.onerror} handler.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * captured by the developer console or a {@code window.onerror} handler.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,110] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 838
     * @param handler A function that will be called with reasons from rejected Promises. Defaults to {@code goog.async.throwException}.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-137): 
           * @param handler A function that will be called with reasons from rejected Promises. Defaults to {@code goog.async.throwException}.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,110] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 839
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 840
    static setUnhandledRejectionHandler (handler : (a : any ) => any ) : void ;

  LINE CONTAINS 27 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-39): 
      setUnhandledRejectionHandler
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (40-41): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (41-48): 
      handler
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (49-50): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (50-52): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (52-53): 
      a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (53-56): 
       : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (56-59): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (59-60): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (60-61): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (61-62): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (62-64): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (64-65): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
    => TOKEN (65-68): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (68-69): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (69-70): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (70-71): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (71-72): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (72-73): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (73-77): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (77-78): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (78-80): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 841
    static withResolver < TYPE > ( ) : ಠ_ಠ.clutz.goog.promise.Resolver < TYPE > ;

  LINE CONTAINS 26 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-23): 
      withResolver
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (24-25): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (26-30): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (31-32): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (33-34): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (35-36): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (37-38): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (38-40): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (40-70): 
      _ಠ.clutz.goog.promise.Resolver
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (70-71): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (71-72): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (72-73): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (73-77): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (77-78): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (78-79): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (79-80): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (80-82): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,108] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,109] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 842
  }

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 843
  class Promise_Instance < TYPE , RESOLVER_CONTEXT > implements ಠ_ಠ.clutz.goog.Thenable < TYPE > {

  LINE CONTAINS 28 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-7): 
      class
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * storage.type.ts
    => TOKEN (7-8): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (8-24): 
      Promise_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.name.ts
      * entity.name.class.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (25-26): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
    => TOKEN (27-31): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (31-34): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
    => TOKEN (34-50): 
      RESOLVER_CONTEXT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
    => TOKEN (51-52): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
    => TOKEN (52-53): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (53-63): 
      implements
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * keyword.other.ts
    => TOKEN (63-68): 
       ಠ_ಠ.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (68-73): 
      clutz
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (73-74): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (74-78): 
      goog
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (78-79): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (79-87): 
      Thenable
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (87-88): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (88-89): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (89-90): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
    => TOKEN (90-94): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (94-95): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
    => TOKEN (95-96): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
    => TOKEN (96-97): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (97-98): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @97
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @0
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 844
    private noStructuralTyping_: any;

  LINE CONTAINS 7 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-11): 
      private
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * storage.modifier.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (12-31): 
      noStructuralTyping_
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (31-33): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (33-36): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (36-38): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 845
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 846
     * Promises provide a result that may be resolved asynchronously. A Promise may

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * Promises provide a result that may be resolved asynchronously. A Promise may
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 847
     * be resolved by being fulfilled with a fulfillment value, rejected with a

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * be resolved by being fulfilled with a fulfillment value, rejected with a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 848
     * rejection reason, or blocked by another Promise. A Promise is said to be

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * rejection reason, or blocked by another Promise. A Promise is said to be
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 849
     * settled if it is either fulfilled or rejected. Once settled, the Promise

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * settled if it is either fulfilled or rejected. Once settled, the Promise
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 850
     * result is immutable.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-28): 
           * result is immutable.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 851
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 852
     * Promises may represent results of any type, including undefined. Rejection

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * Promises may represent results of any type, including undefined. Rejection
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 853
     * reasons are typically Errors, but may also be of any type. Closure Promises

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * reasons are typically Errors, but may also be of any type. Closure Promises
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 854
     * allow for optional type annotations that enforce that fulfillment values are

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * allow for optional type annotations that enforce that fulfillment values are
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 855
     * of the appropriate types at compile time.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-49): 
           * of the appropriate types at compile time.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 856
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 857
     * The result of a Promise is accessible by calling {@code then} and registering

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * The result of a Promise is accessible by calling {@code then} and registering
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 858
     * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 859
     * is settled, the relevant callbacks are invoked with the fulfillment value or

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * is settled, the relevant callbacks are invoked with the fulfillment value or
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 860
     * rejection reason as argument. Callbacks are always invoked in the order they

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * rejection reason as argument. Callbacks are always invoked in the order they
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 861
     * were registered, even when additional {@code then} calls are made from inside

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * were registered, even when additional {@code then} calls are made from inside
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 862
     * another callback. A callback is always run asynchronously sometime after the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * another callback. A callback is always run asynchronously sometime after the
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 863
     * scope containing the registering {@code then} invocation has returned.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * scope containing the registering {@code then} invocation has returned.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 864
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 865
     * If a Promise is resolved with another Promise, the first Promise will block

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * If a Promise is resolved with another Promise, the first Promise will block
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 866
     * until the second is settled, and then assumes the same result as the second

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * until the second is settled, and then assumes the same result as the second
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 867
     * Promise. This allows Promises to depend on the results of other Promises,

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * Promise. This allows Promises to depend on the results of other Promises,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 868
     * linking together multiple asynchronous operations.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-58): 
           * linking together multiple asynchronous operations.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 869
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 870
     * This implementation is compatible with the Promises/A+ specification and

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * This implementation is compatible with the Promises/A+ specification and
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 871
     * passes that specification's conformance test suite. A Closure Promise may be

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * passes that specification's conformance test suite. A Closure Promise may be
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 872
     * resolved with a Promise instance (or sufficiently compatible Promise-like

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * resolved with a Promise instance (or sufficiently compatible Promise-like
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 873
     * object) created by other Promise implementations. From the specification,

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * object) created by other Promise implementations. From the specification,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 874
     * Promise-like objects are known as "Thenables".

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-54): 
           * Promise-like objects are known as "Thenables".
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 875
     * @param resolver Initialization function that is invoked immediately with {@code resolve} and {@code reject} functions as arguments. The Promise is resolved or rejected with the first argument passed to either function.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-226): 
           * @param resolver Initialization function that is invoked immediately with {@code resolve} and {@code reject} functions as arguments. The Promise is resolved or rejected with the first argument passed to either function.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 876
     * @param opt_context An optional context for executing the resolver function. If unspecified, the resolver function will be executed in the default scope.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-160): 
           * @param opt_context An optional context for executing the resolver function. If unspecified, the resolver function will be executed in the default scope.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,113] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 877
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 878
    constructor (resolver : (a : (a ? : TYPE | IThenable < TYPE > | null | { then : any } ) => any , b : (a ? : any ) => any ) => undefined , opt_context ? : RESOLVER_CONTEXT ) ;

  LINE CONTAINS 78 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      constructor
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * storage.type.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-25): 
      resolver
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (26-27): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-29): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (29-30): 
      a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (30-32): 
       :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (32-34): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (34-35): 
      a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (35-40): 
       ? : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (40-44): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (45-46): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (47-56): 
      IThenable
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (57-58): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.parameters.ts
    => TOKEN (59-63): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (63-64): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.parameters.ts
    => TOKEN (64-65): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.parameters.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (66-67): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (67-68): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (68-72): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (72-73): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (73-74): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * keyword.operator.type.ts
    => TOKEN (74-75): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (75-76): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (76-77): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (77-81): 
      then
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (81-82): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (82-84): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (84-87): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (87-88): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (88-89): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (89-90): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (90-91): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (91-92): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (92-94): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (94-95): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
    => TOKEN (95-98): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (98-101): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (101-102): 
      b
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (102-104): 
       :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (104-106): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (106-107): 
      a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (107-112): 
       ? : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (112-115): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (115-116): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (116-117): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (117-118): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (118-120): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (120-121): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
    => TOKEN (121-124): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (124-125): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (125-126): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (126-127): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (127-129): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (129-130): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
    => TOKEN (130-139): 
      undefined
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * meta.type.name.ts
    => TOKEN (139-140): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (140-141): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (141-142): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (142-153): 
      opt_context
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (153-154): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (154-155): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (155-156): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (156-157): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (157-158): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (158-174): 
      RESOLVER_CONTEXT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (174-175): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (175-176): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (176-177): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (177-179): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 879
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,114] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 880
     * Cancels the Promise if it is still pending by rejecting it with a cancel

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * Cancels the Promise if it is still pending by rejecting it with a cancel
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,114] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 881
     * Error. No action is performed if the Promise is already resolved.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
           * Error. No action is performed if the Promise is already resolved.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,114] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 882
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,114] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 883
     * All child Promises of the canceled Promise will be rejected with the same

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * All child Promises of the canceled Promise will be rejected with the same
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,114] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 884
     * cancel error, as with normal Promise rejection. If the Promise to be canceled

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * cancel error, as with normal Promise rejection. If the Promise to be canceled
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,114] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 885
     * is the only child of a pending Promise, the parent Promise will also be

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
           * is the only child of a pending Promise, the parent Promise will also be
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,114] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 886
     * canceled. Cancellation may propagate upward through multiple generations.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * canceled. Cancellation may propagate upward through multiple generations.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,114] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 887
     * @param opt_message An optional debugging message for describing the cancellation reason.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-96): 
           * @param opt_message An optional debugging message for describing the cancellation reason.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,114] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 888
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 889
    cancel (opt_message ? : string ) : void ;

  LINE CONTAINS 19 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      cancel
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (11-12): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (12-23): 
      opt_message
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (24-25): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (26-27): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-34): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-36): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (37-38): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (39-43): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (44-46): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 890
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,115] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 891
     * Adds callbacks that will operate on the result of the Promise, returning a

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * Adds callbacks that will operate on the result of the Promise, returning a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,115] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 892
     * new child Promise.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-26): 
           * new child Promise.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,115] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 893
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,115] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 894
     * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,115] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 895
     * with the fulfillment value as argument, and the child Promise will be

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-77): 
           * with the fulfillment value as argument, and the child Promise will be
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,115] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 896
     * fulfilled with the return value of the callback. If the callback throws an

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * fulfilled with the return value of the callback. If the callback throws an
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,115] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 897
     * exception, the child Promise will be rejected with the thrown value instead.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * exception, the child Promise will be rejected with the thrown value instead.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,115] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 898
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,115] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 899
     * If the Promise is rejected, the {@code onRejected} callback will be invoked

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * If the Promise is rejected, the {@code onRejected} callback will be invoked
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,115] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 900
     * with the rejection reason as argument, and the child Promise will be resolved

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * with the rejection reason as argument, and the child Promise will be resolved
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,115] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 901
     * with the return value or rejected with the thrown value of the callback.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * with the return value or rejected with the thrown value of the callback.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,115] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 902
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 903
    then < VALUE , THIS , RESULT > (opt_onFulfilled ? : ( (a : TYPE ) => VALUE ) | null , opt_onRejected ? : ( (a : any ) => any ) | null , opt_context ? : THIS ) : RESULT ;

  LINE CONTAINS 79 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-8): 
      then
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (9-10): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (11-16): 
      VALUE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (16-19): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (19-23): 
      THIS
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (23-26): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (26-32): 
      RESULT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (33-34): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (35-36): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (36-51): 
      opt_onFulfilled
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (52-53): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (54-55): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (55-57): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (57-59): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (59-60): 
      a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (60-63): 
       : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (63-67): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (67-68): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (68-69): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (69-70): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (70-72): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (72-73): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
    => TOKEN (73-78): 
      VALUE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * meta.type.name.ts
    => TOKEN (78-79): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (79-80): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (80-81): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (81-82): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (82-83): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (83-87): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (87-88): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (88-89): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (89-90): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (90-104): 
      opt_onRejected
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (104-105): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (105-106): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (106-107): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (107-108): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (108-110): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (110-112): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (112-113): 
      a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (113-116): 
       : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (116-119): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (119-120): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (120-121): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (121-122): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (122-124): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (124-125): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
    => TOKEN (125-128): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (128-129): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (129-130): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (130-131): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (131-132): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (132-133): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (133-137): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (137-138): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (138-139): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (139-140): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (140-151): 
      opt_context
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (151-152): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (152-153): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (153-154): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (154-155): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (155-156): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (156-160): 
      THIS
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (160-161): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (161-162): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (162-163): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (163-164): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (164-165): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (165-171): 
      RESULT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (171-172): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (172-174): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 904
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 905
     * Adds a callback that will be invoked when the Promise is settled (fulfilled

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * Adds a callback that will be invoked when the Promise is settled (fulfilled
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 906
     * or rejected). The callback receives no argument, and no new child Promise is

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * or rejected). The callback receives no argument, and no new child Promise is
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 907
     * created. This is useful for ensuring that cleanup takes place after certain

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * created. This is useful for ensuring that cleanup takes place after certain
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 908
     * asynchronous operations. Callbacks added with {@code thenAlways} will be

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * asynchronous operations. Callbacks added with {@code thenAlways} will be
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 909
     * executed in the same order with other calls to {@code then},

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-68): 
           * executed in the same order with other calls to {@code then},
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 910
     * {@code thenAlways}, or {@code thenCatch}.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-49): 
           * {@code thenAlways}, or {@code thenCatch}.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 911
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 912
     * Since it does not produce a new child Promise, cancellation propagation is

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * Since it does not produce a new child Promise, cancellation propagation is
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 913
     * not prevented by adding callbacks with {@code thenAlways}. A Promise that has

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * not prevented by adding callbacks with {@code thenAlways}. A Promise that has
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 914
     * a cleanup handler added with {@code thenAlways} will be canceled if all of

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * a cleanup handler added with {@code thenAlways} will be canceled if all of
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 915
     * its children created by {@code then} (or {@code thenCatch}) are canceled.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * its children created by {@code then} (or {@code thenCatch}) are canceled.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 916
     * Additionally, since any rejections are not passed to the callback, it does

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * Additionally, since any rejections are not passed to the callback, it does
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 917
     * not stop the unhandled rejection handler from running.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-62): 
           * not stop the unhandled rejection handler from running.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 918
     * @param onSettled A function that will be invoked when the Promise is settled (fulfilled or rejected).

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-109): 
           * @param onSettled A function that will be invoked when the Promise is settled (fulfilled or rejected).
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 919
     * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed in the global scope.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-163): 
           * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed in the global scope.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,116] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 920
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 921
    thenAlways < THIS > (onSettled : ( ) => undefined , opt_context ? : THIS ) : ಠ_ಠ.clutz.goog.Promise < TYPE , any > ;

  LINE CONTAINS 46 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-14): 
      thenAlways
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (15-16): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (17-21): 
      THIS
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (22-23): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (24-25): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (25-34): 
      onSettled
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (35-36): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-38): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (39-40): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (41-43): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
    => TOKEN (44-53): 
      undefined
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * meta.type.name.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (54-55): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (55-56): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (56-67): 
      opt_context
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (67-68): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (68-69): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (69-70): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (70-71): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (71-72): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (72-76): 
      THIS
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (76-77): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (77-78): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (78-79): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (79-80): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (80-82): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (82-103): 
      _ಠ.clutz.goog.Promise
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (103-104): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (104-105): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (105-106): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (106-110): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (110-113): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (113-116): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (116-117): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (117-118): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (118-119): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (119-121): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 922
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,117] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 923
     * Adds a callback that will be invoked only if the Promise is rejected. This

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * Adds a callback that will be invoked only if the Promise is rejected. This
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,117] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 924
     * is equivalent to {@code then(null, onRejected)}.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-56): 
           * is equivalent to {@code then(null, onRejected)}.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,117] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 925
     * @param onRejected A function that will be invoked with the rejection reason if the Promise is rejected.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-111): 
           * @param onRejected A function that will be invoked with the rejection reason if the Promise is rejected.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,117] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 926
     * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed in the global scope.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-163): 
           * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed in the global scope.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,117] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 927
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 928
    thenCatch < THIS > (onRejected : (a : any ) => any , opt_context ? : THIS ) : ಠ_ಠ.clutz.goog.Promise < any , any > ;

  LINE CONTAINS 49 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-13): 
      thenCatch
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (14-15): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (16-20): 
      THIS
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (21-22): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (23-24): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (24-34): 
      onRejected
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (35-36): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-38): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (38-39): 
      a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (39-42): 
       : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (42-45): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (46-47): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (48-50): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
    => TOKEN (51-54): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (55-56): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (57-68): 
      opt_context
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (68-69): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (69-70): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (70-71): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (71-72): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (72-73): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (73-77): 
      THIS
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (77-78): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (78-79): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (79-80): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (80-81): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (81-83): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (83-104): 
      _ಠ.clutz.goog.Promise
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (104-105): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (105-106): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (106-107): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (107-110): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (110-113): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (113-116): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (116-117): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (117-118): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (118-119): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (119-121): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 929
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,118] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 930
     * Adds callbacks that will operate on the result of the Promise without

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-77): 
           * Adds callbacks that will operate on the result of the Promise without
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,118] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 931
     * returning a child Promise (unlike "then").

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-50): 
           * returning a child Promise (unlike "then").
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,118] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 932
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,118] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 933
     * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,118] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 934
     * with the fulfillment value as argument.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-47): 
           * with the fulfillment value as argument.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,118] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 935
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,118] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 936
     * If the Promise is rejected, the {@code onRejected} callback will be invoked

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * If the Promise is rejected, the {@code onRejected} callback will be invoked
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,118] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 937
     * with the rejection reason as argument.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-46): 
           * with the rejection reason as argument.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,118] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 938
     * @param opt_onFulfilled A function that will be invoked with the fulfillment value if the Promise is fulfilled.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-118): 
           * @param opt_onFulfilled A function that will be invoked with the fulfillment value if the Promise is fulfilled.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,118] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 939
     * @param opt_onRejected A function that will be invoked with the rejection reason if the Promise is rejected.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-115): 
           * @param opt_onRejected A function that will be invoked with the rejection reason if the Promise is rejected.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,118] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 940
     * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed with the default this.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-165): 
           * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed with the default this.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,118] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 941
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 942
    thenVoid < THIS > (opt_onFulfilled ? : ( (a : TYPE ) => any ) | null , opt_onRejected ? : ( (a : any ) => any ) | null , opt_context ? : THIS ) : void ;

  LINE CONTAINS 75 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-12): 
      thenVoid
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (12-13): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (13-14): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (15-19): 
      THIS
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (20-21): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (22-23): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-38): 
      opt_onFulfilled
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (39-40): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (41-42): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (42-44): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (44-46): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (46-47): 
      a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (47-50): 
       : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (50-54): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (55-56): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (57-59): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (59-60): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
    => TOKEN (60-63): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (63-64): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (64-65): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (66-67): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (67-68): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (68-72): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (72-73): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (73-74): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (74-75): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (75-89): 
      opt_onRejected
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (89-90): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (90-91): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (91-92): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (92-93): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (93-95): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (95-97): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (97-98): 
      a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (98-101): 
       : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (101-104): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (104-105): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (105-106): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (106-107): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (107-109): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (109-110): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
    => TOKEN (110-113): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (113-114): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (114-115): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (115-116): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (116-117): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (117-118): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (118-122): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (122-123): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (123-124): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (124-125): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (125-136): 
      opt_context
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (136-137): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (137-138): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (138-139): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (139-140): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (140-141): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (141-145): 
      THIS
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (145-146): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (146-147): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (147-148): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (148-149): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (149-150): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (150-154): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (154-155): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (155-157): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,111] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,112] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 943
  }

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,106] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 944
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 945
declare namespace ಠ_ಠ.clutz.goog.Promise {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-41): 
       ಠ_ಠ.clutz.goog.Promise 
      * source.ts
    => TOKEN (41-42): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,119] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 946
  class CancellationError extends CancellationError_Instance {

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-7): 
      class
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * storage.type.ts
    => TOKEN (7-8): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (8-25): 
      CancellationError
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.name.ts
      * entity.name.class.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (26-33): 
      extends
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * keyword.other.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (34-60): 
      CancellationError_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (61-62): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,120] BeginEndRule "meta.object.body.ts", entered @61
      * [125,121] BeginEndRule "meta.declaration.object.ts", entered @0
      * [160,119] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 947
  }

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,119] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 948
  class CancellationError_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {

  LINE CONTAINS 16 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-7): 
      class
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * storage.type.ts
    => TOKEN (7-8): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (8-34): 
      CancellationError_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.name.ts
      * entity.name.class.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (35-42): 
      extends
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * keyword.other.ts
    => TOKEN (42-47): 
       ಠ_ಠ.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (47-52): 
      clutz
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (52-53): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (53-57): 
      goog
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (57-58): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (58-63): 
      debug
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (63-64): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (64-78): 
      Error_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (78-79): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (79-80): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,122] BeginEndRule "meta.object.body.ts", entered @79
      * [125,123] BeginEndRule "meta.declaration.object.ts", entered @0
      * [160,119] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 949
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,124] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,122] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,123] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,119] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 950
     * Error used as a rejection reason for canceled Promises.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-63): 
           * Error used as a rejection reason for canceled Promises.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,124] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,122] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,123] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,119] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 951
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,122] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,123] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,119] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 952
    constructor (opt_message ? : string ) ;

  LINE CONTAINS 15 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      constructor
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * storage.type.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-28): 
      opt_message
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (29-30): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (31-32): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-39): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (40-41): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (42-44): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,122] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,123] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,119] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 953
  }

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,119] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 954
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 955
declare module 'goog:goog.Promise' {

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-14): 
      module
      * source.ts
      * storage.type.ts
    => TOKEN (14-15): 
       
      * source.ts
    => TOKEN (15-16): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (16-33): 
      goog:goog.Promise
      * source.ts
      * string.single.ts
    => TOKEN (33-34): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (34-35): 
       
      * source.ts
    => TOKEN (35-36): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,125] BeginEndRule "meta.block.ts", entered @34
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 956
  import alias = ಠ_ಠ.clutz.goog.Promise;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      import
      * source.ts
      * meta.block.ts
      * keyword.control.import.include.ts
    => TOKEN (8-15): 
       alias 
      * source.ts
      * meta.block.ts
    => TOKEN (15-16): 
      =
      * source.ts
      * meta.block.ts
      * keyword.operator.comparison.ts
    => TOKEN (16-41): 
       ಠ_ಠ.clutz.goog.Promise;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,125] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 957
  export default alias;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      export
      * source.ts
      * meta.block.ts
      * storage.type.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
    => TOKEN (9-16): 
      default
      * source.ts
      * meta.block.ts
      * keyword.control.ts
    => TOKEN (16-24): 
       alias;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,125] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 958
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 959
declare namespace ಠ_ಠ.clutz.goog {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-33): 
       ಠ_ಠ.clutz.goog 
      * source.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,126] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 960
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,127] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 961
   * Provides a more strict interface for Thenables in terms of

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-64): 
         * Provides a more strict interface for Thenables in terms of
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,127] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 962
   * http://promisesaplus.com for interop with {@see goog.Promise}.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-68): 
         * http://promisesaplus.com for interop with {@see goog.Promise}.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,127] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 963
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 964
  interface Thenable < TYPE > extends IThenable < TYPE > {

  LINE CONTAINS 22 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-11): 
      interface
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * storage.type.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (12-20): 
      Thenable
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.name.ts
      * entity.name.class.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (21-22): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
    => TOKEN (23-27): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
    => TOKEN (28-29): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.type.parameters.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (30-37): 
      extends
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * keyword.other.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (38-47): 
      IThenable
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (48-49): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
    => TOKEN (50-54): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
    => TOKEN (55-56): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.type.parameters.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (57-58): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,128] BeginEndRule "meta.object.body.ts", entered @57
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @0
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 965
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 966
     * Adds callbacks that will operate on the result of the Thenable, returning a

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * Adds callbacks that will operate on the result of the Thenable, returning a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 967
     * new child Promise.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-26): 
           * new child Promise.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 968
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 969
     * If the Thenable is fulfilled, the {@code onFulfilled} callback will be

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * If the Thenable is fulfilled, the {@code onFulfilled} callback will be
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 970
     * invoked with the fulfillment value as argument, and the child Promise will

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * invoked with the fulfillment value as argument, and the child Promise will
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 971
     * be fulfilled with the return value of the callback. If the callback throws

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * be fulfilled with the return value of the callback. If the callback throws
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 972
     * an exception, the child Promise will be rejected with the thrown value

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * an exception, the child Promise will be rejected with the thrown value
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 973
     * instead.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-16): 
           * instead.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 974
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 975
     * If the Thenable is rejected, the {@code onRejected} callback will be invoked

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * If the Thenable is rejected, the {@code onRejected} callback will be invoked
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 976
     * with the rejection reason as argument, and the child Promise will be rejected

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * with the rejection reason as argument, and the child Promise will be rejected
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 977
     * with the return value of the callback or thrown value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-62): 
           * with the return value of the callback or thrown value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 978
     * @param opt_onFulfilled A function that will be invoked with the fulfillment value if the Promise is fulfilled.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-118): 
           * @param opt_onFulfilled A function that will be invoked with the fulfillment value if the Promise is fulfilled.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 979
     * @param opt_onRejected A function that will be invoked with the rejection reason if the Promise is rejected.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-115): 
           * @param opt_onRejected A function that will be invoked with the rejection reason if the Promise is rejected.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 980
     * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed with the default this.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-165): 
           * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed with the default this.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,130] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 981
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 982
    then < VALUE , THIS , RESULT > (opt_onFulfilled ? : ( (a : TYPE ) => VALUE ) | null , opt_onRejected ? : ( (a : any ) => any ) | null , opt_context ? : THIS ) : RESULT ;

  LINE CONTAINS 79 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-8): 
      then
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (9-10): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (11-16): 
      VALUE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (16-19): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (19-23): 
      THIS
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (23-26): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (26-32): 
      RESULT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (33-34): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (35-36): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (36-51): 
      opt_onFulfilled
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (52-53): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (54-55): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (55-57): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (57-59): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (59-60): 
      a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (60-63): 
       : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (63-67): 
      TYPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (67-68): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (68-69): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (69-70): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (70-72): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (72-73): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
    => TOKEN (73-78): 
      VALUE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * meta.type.name.ts
    => TOKEN (78-79): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (79-80): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (80-81): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (81-82): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (82-83): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (83-87): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (87-88): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (88-89): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (89-90): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (90-104): 
      opt_onRejected
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (104-105): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (105-106): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (106-107): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (107-108): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (108-110): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (110-112): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (112-113): 
      a
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.name.ts
    => TOKEN (113-116): 
       : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (116-119): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (119-120): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (120-121): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (121-122): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (122-124): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (124-125): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
    => TOKEN (125-128): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (128-129): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (129-130): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (130-131): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (131-132): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (132-133): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (133-137): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (137-138): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (138-139): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (139-140): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (140-151): 
      opt_context
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (151-152): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (152-153): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (153-154): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (154-155): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (155-156): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (156-160): 
      THIS
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (160-161): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (161-162): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (162-163): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (163-164): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (164-165): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (165-171): 
      RESULT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (171-172): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (172-174): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,128] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,129] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 983
  }

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,126] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 984
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 985
declare namespace ಠ_ಠ.clutz.goog.Thenable {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-42): 
       ಠ_ಠ.clutz.goog.Thenable 
      * source.ts
    => TOKEN (42-43): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,131] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 986
  var IMPLEMENTED_BY_PROP : string ;

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-25): 
      IMPLEMENTED_BY_PROP
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (26-27): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (28-34): 
      string
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (35-37): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,131] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 987
  function addImplementation (ctor : { new ( ...a : any [] ) : ಠ_ಠ.clutz.goog.Thenable < any > } ) : void ;

  LINE CONTAINS 46 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-28): 
      addImplementation
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (29-30): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (30-34): 
      ctor
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (35-36): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (37-38): 
      {
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
    => TOKEN (39-42): 
      new
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * keyword.operator.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
    => TOKEN (43-44): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (45-48): 
      ...
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (48-49): 
      a
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (50-51): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (52-55): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (55-56): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (56-57): 
      [
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (57-58): 
      ]
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (59-60): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
    => TOKEN (61-62): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (62-64): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (64-86): 
      _ಠ.clutz.goog.Thenable
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (86-87): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (87-88): 
      <
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (88-89): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (89-92): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (92-93): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (93-94): 
      >
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (94-95): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (95-96): 
      }
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (96-97): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (97-98): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (98-100): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (100-101): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (101-105): 
      void
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (105-106): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (106-108): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,131] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 988
  function isImplementedBy (object : any ) : boolean ;

  LINE CONTAINS 18 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-10): 
      function
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * storage.type.function.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (11-26): 
      isImplementedBy
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * entity.name.function.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
    => TOKEN (27-28): 
      (
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (28-34): 
      object
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (35-36): 
      :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (37-40): 
      any
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (41-42): 
      )
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (42-44): 
       :
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (45-52): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (52-53): 
       
      * source.ts
      * meta.block.ts
      * meta.function.ts
      * meta.return.type.ts
    => TOKEN (53-55): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,131] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 989
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 990
declare module 'goog:goog.Thenable' {

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-14): 
      module
      * source.ts
      * storage.type.ts
    => TOKEN (14-15): 
       
      * source.ts
    => TOKEN (15-16): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (16-34): 
      goog:goog.Thenable
      * source.ts
      * string.single.ts
    => TOKEN (34-35): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (35-36): 
       
      * source.ts
    => TOKEN (36-37): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,132] BeginEndRule "meta.block.ts", entered @35
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 991
  import alias = ಠ_ಠ.clutz.goog.Thenable;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      import
      * source.ts
      * meta.block.ts
      * keyword.control.import.include.ts
    => TOKEN (8-15): 
       alias 
      * source.ts
      * meta.block.ts
    => TOKEN (15-16): 
      =
      * source.ts
      * meta.block.ts
      * keyword.operator.comparison.ts
    => TOKEN (16-42): 
       ಠ_ಠ.clutz.goog.Thenable;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,132] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 992
  export default alias;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      export
      * source.ts
      * meta.block.ts
      * storage.type.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
    => TOKEN (9-16): 
      default
      * source.ts
      * meta.block.ts
      * keyword.control.ts
    => TOKEN (16-24): 
       alias;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,132] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 993
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 994
declare namespace ಠ_ಠ.clutz.goog {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-33): 
       ಠ_ಠ.clutz.goog 
      * source.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,133] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 995
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,134] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,133] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 996
   * A deprecated alias.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-25): 
         * A deprecated alias.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,134] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,133] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 997
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,133] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 998
  type Throttle < T > = ಠ_ಠ.clutz.goog.async.Throttle < T > ;

  LINE CONTAINS 22 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-6): 
      type
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * keyword.other.ts
    => TOKEN (6-7): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (7-15): 
      Throttle
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * entity.name.class.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (16-17): 
      <
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (18-19): 
      T
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (20-21): 
      >
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (22-24): 
      = 
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * keyword.operator.comparison.ts
    => TOKEN (24-25): 
      ಠ
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (25-53): 
      _ಠ.clutz.goog.async.Throttle
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.name.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (54-55): 
      <
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (55-56): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (56-57): 
      T
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (57-58): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (58-59): 
      >
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (59-60): 
       
      * source.ts
      * meta.block.ts
      * meta.type.declaration.ts
    => TOKEN (60-62): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,133] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 999
  var Throttle : typeof ಠ_ಠ.clutz.goog.async.Throttle ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (2-5): 
      var
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * storage.type.ts
    => TOKEN (5-6): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
    => TOKEN (6-14): 
      Throttle
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * variable.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
    => TOKEN (15-16): 
      :
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (17-23): 
      typeof
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * keyword.others.ts
    => TOKEN (23-25): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (25-53): 
      _ಠ.clutz.goog.async.Throttle
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.var.expr.ts
      * meta.var-single-variable.expr.ts
      * meta.type.annotation.ts
    => TOKEN (54-56): 
      ;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,133] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1000
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1001
declare module 'goog:goog.Throttle' {

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-14): 
      module
      * source.ts
      * storage.type.ts
    => TOKEN (14-15): 
       
      * source.ts
    => TOKEN (15-16): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (16-34): 
      goog:goog.Throttle
      * source.ts
      * string.single.ts
    => TOKEN (34-35): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (35-36): 
       
      * source.ts
    => TOKEN (36-37): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,135] BeginEndRule "meta.block.ts", entered @35
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1002
  import alias = ಠ_ಠ.clutz.goog.Throttle;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      import
      * source.ts
      * meta.block.ts
      * keyword.control.import.include.ts
    => TOKEN (8-15): 
       alias 
      * source.ts
      * meta.block.ts
    => TOKEN (15-16): 
      =
      * source.ts
      * meta.block.ts
      * keyword.operator.comparison.ts
    => TOKEN (16-42): 
       ಠ_ಠ.clutz.goog.Throttle;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,135] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1003
  export default alias;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      export
      * source.ts
      * meta.block.ts
      * storage.type.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
    => TOKEN (9-16): 
      default
      * source.ts
      * meta.block.ts
      * keyword.control.ts
    => TOKEN (16-24): 
       alias;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,135] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1004
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1005
declare namespace ಠ_ಠ.clutz.goog {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-33): 
       ಠ_ಠ.clutz.goog 
      * source.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,136] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1006
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,137] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1007
   * Class for handling timing events.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-39): 
         * Class for handling timing events.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,137] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1008
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1009
  class Timer extends Timer_Instance {

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-7): 
      class
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * storage.type.ts
    => TOKEN (7-8): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (8-13): 
      Timer
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.name.ts
      * entity.name.class.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (14-21): 
      extends
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * keyword.other.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (22-36): 
      Timer_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (37-38): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,138] BeginEndRule "meta.object.body.ts", entered @37
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @0
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1010
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,140] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1011
     * Constant for the timer's event type.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-44): 
           * Constant for the timer's event type.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,140] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1012
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1013
    static TICK : string ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (11-15): 
      TICK
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (16-18): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (18-24): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (25-27): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1014
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,141] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1015
     * Calls the given function once, after the optional pause.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-64): 
           * Calls the given function once, after the optional pause.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,141] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1016
     * <p>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-11): 
           * <p>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,141] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1017
     * The function is always called asynchronously, even if the delay is 0. This

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * The function is always called asynchronously, even if the delay is 0. This
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,141] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1018
     * is a common trick to schedule a function to run after a batch of browser

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * is a common trick to schedule a function to run after a batch of browser
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,141] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1019
     * event processing.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-25): 
           * event processing.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,141] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1020
     * @param listener Function or object that has a handleEvent method.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
           * @param listener Function or object that has a handleEvent method.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,141] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1021
     * @param opt_delay Milliseconds to wait; default is 0.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-60): 
           * @param opt_delay Milliseconds to wait; default is 0.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,141] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1022
     * @param opt_handler Object in whose scope to call the listener.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-70): 
           * @param opt_handler Object in whose scope to call the listener.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,141] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1023
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1024
    static callOnce < SCOPE > (listener : ( ( ) => any ) | { handleEvent : ( ) => any } | null , opt_delay ? : number , opt_handler ? : SCOPE ) : number ;

  LINE CONTAINS 74 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-19): 
      callOnce
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (22-27): 
      SCOPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (28-29): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (30-31): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (31-39): 
      listener
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (40-41): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (41-43): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (43-45): 
       (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (46-47): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.paren.cover.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (48-50): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * keyword.operator.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
    => TOKEN (51-54): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
      * meta.type.function.return.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (55-56): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.paren.cover.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (57-58): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (59-60): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (61-72): 
      handleEvent
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (72-73): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (73-75): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (75-76): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * meta.brace.paren.ts
    => TOKEN (76-77): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (77-78): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * meta.brace.paren.ts
    => TOKEN (78-79): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (79-81): 
      =>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * keyword.operator.ts
    => TOKEN (81-82): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (82-85): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (85-86): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (86-87): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (87-88): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (88-89): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (89-90): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (90-94): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (94-95): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (95-96): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (96-97): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (97-106): 
      opt_delay
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (106-107): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (107-108): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (108-109): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (109-110): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (110-111): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (111-117): 
      number
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (117-118): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (118-119): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (119-120): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (120-131): 
      opt_handler
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (131-132): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (132-133): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (133-134): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (134-135): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (135-136): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (136-141): 
      SCOPE
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (141-142): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (142-143): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (143-144): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (144-145): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (145-146): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (146-152): 
      number
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (152-153): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (153-155): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1025
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,142] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1026
     * Clears a timeout initiated by {@link #callOnce}.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-56): 
           * Clears a timeout initiated by {@link #callOnce}.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,142] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1027
     * @param timerId A timer ID.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-34): 
           * @param timerId A timer ID.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,142] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1028
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1029
    static clear (timerId : number | null ) : void ;

  LINE CONTAINS 23 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-16): 
      clear
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (17-18): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (18-25): 
      timerId
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (26-27): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-34): 
      number
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-36): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (37-41): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (42-43): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (44-45): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (46-50): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (51-53): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1030
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,143] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1031
     * An object that implements {@code setTimeout}, {@code setInterval},

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
           * An object that implements {@code setTimeout}, {@code setInterval},
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,143] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1032
     * {@code clearTimeout} and {@code clearInterval}. We default to the global

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * {@code clearTimeout} and {@code clearInterval}. We default to the global
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,143] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1033
     * object. Changing {@code goog.Timer.defaultTimerObject} changes the object for

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * object. Changing {@code goog.Timer.defaultTimerObject} changes the object for
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,143] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1034
     * all timer instances which can be useful if your environment has some other

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * all timer instances which can be useful if your environment has some other
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,143] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1035
     * implementation of timers you'd like to use.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-51): 
           * implementation of timers you'd like to use.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,143] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1036
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1037
    static defaultTimerObject : { clearTimeout : any , setTimeout : any } ;

  LINE CONTAINS 19 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (11-29): 
      defaultTimerObject
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (30-32): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (32-33): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.block.ts
      * meta.brace.curly.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.block.ts
    => TOKEN (34-48): 
      clearTimeout :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.block.ts
      * meta.object.member.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.block.ts
      * meta.object.member.ts
    => TOKEN (49-52): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.block.ts
      * meta.object.member.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (52-53): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.block.ts
      * meta.object.member.ts
    => TOKEN (53-55): 
      , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.block.ts
    => TOKEN (55-67): 
      setTimeout :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.block.ts
      * meta.object.member.ts
    => TOKEN (67-68): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.block.ts
      * meta.object.member.ts
    => TOKEN (68-71): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.block.ts
      * meta.object.member.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (71-72): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.block.ts
      * meta.object.member.ts
    => TOKEN (72-73): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.block.ts
      * meta.brace.curly.ts
    => TOKEN (73-76): 
       ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1038
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,144] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1039
     * Variable that controls the timer error correction. If the timer is called

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * Variable that controls the timer error correction. If the timer is called
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,144] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1040
     * before the requested interval times {@code intervalScale}, which often

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * before the requested interval times {@code intervalScale}, which often
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,144] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1041
     * happens on Mozilla, the timer is rescheduled.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-53): 
           * happens on Mozilla, the timer is rescheduled.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,144] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1042
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1043
    static intervalScale : number ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (11-24): 
      intervalScale
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (25-27): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (27-33): 
      number
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (34-36): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1044
    static promise < RESULT > (delay : number , opt_result ? : RESULT | ಠ_ಠ.clutz.goog.Thenable < RESULT > | null | { then : any } ) : ಠ_ಠ.clutz.goog.Promise < RESULT , any > ;

  LINE CONTAINS 68 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-18): 
      promise
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (19-20): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (21-27): 
      RESULT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (28-29): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.parameters.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (30-31): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (31-36): 
      delay
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (37-38): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (39-45): 
      number
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (46-47): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (48-58): 
      opt_result
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (59-60): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (61-62): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (62-63): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (63-69): 
      RESULT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (69-70): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (70-71): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (71-73): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (73-95): 
      _ಠ.clutz.goog.Thenable
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (95-96): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (96-97): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (97-98): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (98-104): 
      RESULT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (104-105): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (105-106): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (106-107): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (107-108): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (108-109): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (109-113): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (113-114): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (114-115): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (115-116): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (116-117): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (117-118): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (118-122): 
      then
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (122-123): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (123-125): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (125-128): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (128-129): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.field.declaration.ts
    => TOKEN (129-130): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.object.type.ts
      * meta.brace.curly.ts
    => TOKEN (130-131): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (131-132): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (132-133): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (133-134): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (134-136): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (136-157): 
      _ಠ.clutz.goog.Promise
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (157-158): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (158-159): 
      <
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.brace.angle.ts
    => TOKEN (159-160): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (160-166): 
      RESULT
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.name.ts
    => TOKEN (166-169): 
       , 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (169-172): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (172-173): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (173-174): 
      >
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.parameters.ts
    => TOKEN (174-175): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (175-177): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,138] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,139] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1045
  }

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1046
  class Timer_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {

  LINE CONTAINS 16 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-7): 
      class
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * storage.type.ts
    => TOKEN (7-8): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (8-22): 
      Timer_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.name.ts
      * entity.name.class.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (23-30): 
      extends
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * keyword.other.ts
    => TOKEN (30-35): 
       ಠ_ಠ.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (35-40): 
      clutz
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (40-41): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (41-45): 
      goog
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (45-46): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (46-52): 
      events
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (52-53): 
      .
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (53-73): 
      EventTarget_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (73-74): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (74-75): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @74
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @0
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1047
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,147] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1048
     * Class for handling timing events.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-41): 
           * Class for handling timing events.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,147] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1049
     * @param opt_interval Number of ms between ticks (default: 1ms).

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-70): 
           * @param opt_interval Number of ms between ticks (default: 1ms).
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,147] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1050
     * @param opt_timerObject An object that has {@code setTimeout}, {@code setInterval}, {@code clearTimeout} and {@code clearInterval} (e.g., {@code window}).

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-161): 
           * @param opt_timerObject An object that has {@code setTimeout}, {@code setInterval}, {@code clearTimeout} and {@code clearInterval} (e.g., {@code window}).
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,147] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1051
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1052
    constructor (opt_interval ? : number , opt_timerObject ? : Object | null ) ;

  LINE CONTAINS 29 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      constructor
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * storage.type.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-29): 
      opt_interval
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (30-31): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (32-33): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-40): 
      number
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (41-42): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (43-58): 
      opt_timerObject
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (59-60): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (61-62): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (62-63): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (63-69): 
      Object
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (69-70): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (70-71): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (71-72): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (72-76): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (76-77): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (77-78): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (78-79): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (79-81): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1053
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,148] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1054
     * Dispatches the TICK event. This is its own method so subclasses can override.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * Dispatches the TICK event. This is its own method so subclasses can override.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,148] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1055
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1056
    dispatchTick ( ) : void ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-16): 
      dispatchTick
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (17-18): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (19-20): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (21-22): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (23-27): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (28-30): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1057
    disposeInternal ( ) : void ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-19): 
      disposeInternal
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (22-23): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (24-25): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (26-30): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (31-33): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1058
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,149] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1059
     * Whether this timer is enabled

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-37): 
           * Whether this timer is enabled
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,149] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1060
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1061
    enabled : boolean ;

  LINE CONTAINS 7 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (4-11): 
      enabled
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (12-14): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (14-21): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (22-24): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1062
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,150] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1063
     * Gets the interval of the timer.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-39): 
           * Gets the interval of the timer.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,150] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1064
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1065
    getInterval ( ) : number ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      getInterval
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (18-19): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (22-28): 
      number
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (29-31): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1066
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,151] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1067
     * Sets the interval of the timer.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-39): 
           * Sets the interval of the timer.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,151] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1068
     * @param interval Number of ms between ticks.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-51): 
           * @param interval Number of ms between ticks.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,151] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1069
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1070
    setInterval (interval : number ) : void ;

  LINE CONTAINS 17 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      setInterval
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-25): 
      interval
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (26-27): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-34): 
      number
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-36): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (37-38): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (39-43): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (44-46): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1071
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,152] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1072
     * Starts the timer.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-25): 
           * Starts the timer.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,152] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1073
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1074
    start ( ) : void ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-9): 
      start
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (9-10): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (10-11): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (12-13): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (14-15): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (16-20): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (21-23): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1075
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,153] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1076
     * Stops the timer.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-24): 
           * Stops the timer.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,153] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1077
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1078
    stop ( ) : void ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-8): 
      stop
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (9-10): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (11-12): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (12-13): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (13-14): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (15-19): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (20-22): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,145] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,146] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1079
  }

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,136] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1080
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1081
declare module 'goog:goog.Timer' {

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-14): 
      module
      * source.ts
      * storage.type.ts
    => TOKEN (14-15): 
       
      * source.ts
    => TOKEN (15-16): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (16-31): 
      goog:goog.Timer
      * source.ts
      * string.single.ts
    => TOKEN (31-32): 
      '
      * source.ts
      * string.single.ts
    => TOKEN (32-33): 
       
      * source.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,154] BeginEndRule "meta.block.ts", entered @32
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1082
  import alias = ಠ_ಠ.clutz.goog.Timer;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      import
      * source.ts
      * meta.block.ts
      * keyword.control.import.include.ts
    => TOKEN (8-15): 
       alias 
      * source.ts
      * meta.block.ts
    => TOKEN (15-16): 
      =
      * source.ts
      * meta.block.ts
      * keyword.operator.comparison.ts
    => TOKEN (16-39): 
       ಠ_ಠ.clutz.goog.Timer;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,154] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1083
  export default alias;

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-8): 
      export
      * source.ts
      * meta.block.ts
      * storage.type.ts
    => TOKEN (8-9): 
       
      * source.ts
      * meta.block.ts
    => TOKEN (9-16): 
      default
      * source.ts
      * meta.block.ts
      * keyword.control.ts
    => TOKEN (16-24): 
       alias;
      * source.ts
      * meta.block.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,154] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1084
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1085
declare namespace ಠ_ಠ.clutz.goog {

  LINE CONTAINS 5 TOKENS:
    => TOKEN (0-7): 
      declare
      * source.ts
      * keyword.control.ts
    => TOKEN (7-8): 
       
      * source.ts
    => TOKEN (8-17): 
      namespace
      * source.ts
      * storage.type.ts
    => TOKEN (17-33): 
       ಠ_ಠ.clutz.goog 
      * source.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,155] BeginEndRule "meta.block.ts", entered @17
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1086
  /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-5): 
      /**
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @0
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1087
   * This class contains setters and getters for the parts of the URI.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-71): 
         * This class contains setters and getters for the parts of the URI.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1088
   * The <code>getXyz</code>/<code>setXyz</code> methods return the decoded part

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * The <code>getXyz</code>/<code>setXyz</code> methods return the decoded part
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1089
   * -- so<code>goog.Uri.parse('/foo%20bar').getPath()</code> will return the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
         * -- so<code>goog.Uri.parse('/foo%20bar').getPath()</code> will return the
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1090
   * decoded path, <code>/foo bar</code>.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-42): 
         * decoded path, <code>/foo bar</code>.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1091
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1092
   * Reserved characters (see RFC 3986 section 2.2) can be present in

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-70): 
         * Reserved characters (see RFC 3986 section 2.2) can be present in
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1093
   * their percent-encoded form in scheme, domain, and path URI components and

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * their percent-encoded form in scheme, domain, and path URI components and
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1094
   * will not be auto-decoded. For example:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-44): 
         * will not be auto-decoded. For example:
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1095
   * <code>goog.Uri.parse('rel%61tive/path%2fto/resource').getPath()</code> will

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
         * <code>goog.Uri.parse('rel%61tive/path%2fto/resource').getPath()</code> will
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1096
   * return <code>relative/path%2fto/resource</code>.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-54): 
         * return <code>relative/path%2fto/resource</code>.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1097
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1098
   * The constructor accepts an optional unparsed, raw URI string.  The parser

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
         * The constructor accepts an optional unparsed, raw URI string.  The parser
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1099
   * is relaxed, so special characters that aren't escaped but don't cause

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-75): 
         * is relaxed, so special characters that aren't escaped but don't cause
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1100
   * ambiguities will not cause parse failures.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-48): 
         * ambiguities will not cause parse failures.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1101
   *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-5): 
         *
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1102
   * All setters return <code>this</code> and so may be chained, a la

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-70): 
         * All setters return <code>this</code> and so may be chained, a la
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1103
   * <code>goog.Uri.parse('/foo').setFragment('part').toString()</code>.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
         * <code>goog.Uri.parse('/foo').setFragment('part').toString()</code>.
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 3 RULES:
      * [21,156] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1104
   */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-3): 
         
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts
    => TOKEN (3-5): 
      */
      * source.ts
      * meta.block.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1105
  class Uri extends Uri_Instance {

  LINE CONTAINS 10 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-7): 
      class
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * storage.type.ts
    => TOKEN (7-8): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (8-11): 
      Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.name.ts
      * entity.name.class.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (12-19): 
      extends
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * keyword.other.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (20-32): 
      Uri_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
      * meta.object.heritage.parent.ts
      * support.type.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.heritage.ts
    => TOKEN (33-34): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @33
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @0
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1106
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,159] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1107
     * Parameter name added to stop caching.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-45): 
           * Parameter name added to stop caching.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,159] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1108
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1109
    static RANDOM_PARAM : string ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (11-23): 
      RANDOM_PARAM
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (24-26): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (26-32): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (33-35): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1110
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,160] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1111
     * Creates a new goog.Uri object from unencoded parts.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-59): 
           * Creates a new goog.Uri object from unencoded parts.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,160] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1112
     * @param opt_scheme Scheme/protocol or full URI to parse.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-63): 
           * @param opt_scheme Scheme/protocol or full URI to parse.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,160] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1113
     * @param opt_userInfo username:password.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-46): 
           * @param opt_userInfo username:password.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,160] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1114
     * @param opt_domain www.google.com.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-41): 
           * @param opt_domain www.google.com.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,160] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1115
     * @param opt_port 9830.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-29): 
           * @param opt_port 9830.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,160] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1116
     * @param opt_path /some/path/to/a/file.html.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-50): 
           * @param opt_path /some/path/to/a/file.html.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,160] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1117
     * @param opt_query a=1&b=2.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-33): 
           * @param opt_query a=1&b=2.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,160] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1118
     * @param opt_fragment The fragment without the #.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-55): 
           * @param opt_fragment The fragment without the #.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,160] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1119
     * @param opt_ignoreCase Whether to ignore parameter name case in #getParameterValue.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-90): 
           * @param opt_ignoreCase Whether to ignore parameter name case in #getParameterValue.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,160] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1120
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1121
    static create (opt_scheme ? : string | null , opt_userInfo ? : string | null , opt_domain ? : string | null , opt_port ? : number | null , opt_path ? : string | null , opt_query ? : string | ಠ_ಠ.clutz.goog.Uri.QueryData | null , opt_fragment ? : string | null , opt_ignoreCase ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 123 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-17): 
      create
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (18-19): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-29): 
      opt_scheme
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (30-31): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (32-33): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-40): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (40-41): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (41-42): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (43-47): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (48-49): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (50-62): 
      opt_userInfo
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (62-63): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (63-64): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (64-65): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (65-66): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (66-67): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (67-73): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (73-74): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (74-75): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (75-76): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (76-80): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (80-81): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (81-82): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (82-83): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (83-93): 
      opt_domain
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (93-94): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (94-95): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (95-96): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (96-97): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (97-98): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (98-104): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (104-105): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (105-106): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (106-107): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (107-111): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (111-112): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (112-113): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (113-114): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (114-122): 
      opt_port
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (122-123): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (123-124): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (124-125): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (125-126): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (126-127): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (127-133): 
      number
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (133-134): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (134-135): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (135-136): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (136-140): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (140-141): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (141-142): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (142-143): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (143-151): 
      opt_path
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (151-152): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (152-153): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (153-154): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (154-155): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (155-156): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (156-162): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (162-163): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (163-164): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (164-165): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (165-169): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (169-170): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (170-171): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (171-172): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (172-181): 
      opt_query
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (181-182): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (182-183): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (183-184): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (184-185): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (185-186): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (186-192): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (192-193): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (193-194): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (194-196): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (196-223): 
      _ಠ.clutz.goog.Uri.QueryData
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (223-224): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (224-225): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (225-226): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (226-230): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (230-231): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (231-232): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (232-233): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (233-245): 
      opt_fragment
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (245-246): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (246-247): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (247-248): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (248-249): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (249-250): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (250-256): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (256-257): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (257-258): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (258-259): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (259-263): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (263-264): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (264-265): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (265-266): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (266-280): 
      opt_ignoreCase
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (280-281): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (281-282): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (282-283): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (283-284): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (284-285): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (285-292): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (292-293): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (293-294): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (294-295): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (295-296): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (296-298): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (298-315): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (315-316): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (316-318): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1122
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,161] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1123
     * Checks whether two URIs have the same domain.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-53): 
           * Checks whether two URIs have the same domain.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,161] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1124
     * @param uri1String First URI string.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-43): 
           * @param uri1String First URI string.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,161] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1125
     * @param uri2String Second URI string.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-44): 
           * @param uri2String Second URI string.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,161] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1126
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1127
    static haveSameDomain (uri1String : string , uri2String : string ) : boolean ;

  LINE CONTAINS 27 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-25): 
      haveSameDomain
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (26-27): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (27-37): 
      uri1String
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (38-39): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (40-46): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (47-48): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (49-59): 
      uri2String
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (59-60): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (60-61): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (61-62): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (62-68): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (68-69): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (69-70): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (70-71): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (71-72): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (72-73): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (73-80): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (80-81): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (81-83): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1128
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,162] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1129
     * Creates a uri from the string form.  Basically an alias of new goog.Uri().

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * Creates a uri from the string form.  Basically an alias of new goog.Uri().
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,162] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1130
     * If a Uri object is passed to parse then it will return a clone of the object.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * If a Uri object is passed to parse then it will return a clone of the object.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,162] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1131
     * @param uri Raw URI string or instance of Uri object.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-60): 
           * @param uri Raw URI string or instance of Uri object.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,162] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1132
     * @param opt_ignoreCase Whether to ignore the case of parameter names in #getParameterValue.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-98): 
           * @param opt_ignoreCase Whether to ignore the case of parameter names in #getParameterValue.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,162] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1133
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1134
    static parse (uri : any , opt_ignoreCase ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 29 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-16): 
      parse
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (17-18): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (18-21): 
      uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (22-23): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (24-27): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-29): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (30-44): 
      opt_ignoreCase
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (45-46): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (47-48): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (49-56): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (57-58): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (59-60): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (60-62): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (62-79): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (79-80): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (80-82): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1135
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,163] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1136
     * If true, we preserve the type of query parameters set programmatically.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-79): 
           * If true, we preserve the type of query parameters set programmatically.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,163] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1137
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,163] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1138
     * This means that if you set a parameter to a boolean, and then call

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
           * This means that if you set a parameter to a boolean, and then call
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,163] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1139
     * getParameterValue, you will get a boolean back.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-55): 
           * getParameterValue, you will get a boolean back.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,163] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1140
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,163] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1141
     * If false, we will coerce parameters to strings, just as they would

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
           * If false, we will coerce parameters to strings, just as they would
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,163] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1142
     * appear in real URIs.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-28): 
           * appear in real URIs.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,163] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1143
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,163] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1144
     * TODO(nicksantos): Remove this once people have time to fix all tests.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-77): 
           * TODO(nicksantos): Remove this once people have time to fix all tests.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,163] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1145
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1146
    static preserveParameterTypesCompatibilityFlag : boolean ;

  LINE CONTAINS 9 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (11-50): 
      preserveParameterTypesCompatibilityFlag
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (51-53): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (53-60): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (61-63): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1147
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,164] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1148
     * Removes dot segments in given path component, as described in

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-69): 
           * Removes dot segments in given path component, as described in
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,164] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1149
     * RFC 3986, section 5.2.4.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-32): 
           * RFC 3986, section 5.2.4.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,164] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1150
     * @param path A non-empty path component.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-47): 
           * @param path A non-empty path component.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,164] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1151
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1152
    static removeDotSegments (path : string ) : string ;

  LINE CONTAINS 19 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-28): 
      removeDotSegments
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (29-30): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (30-34): 
      path
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (35-36): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (37-43): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (44-45): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (46-47): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (48-54): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (55-57): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1153
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,165] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1154
     * Resolves a relative Uri against a base Uri, accepting both strings and

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-78): 
           * Resolves a relative Uri against a base Uri, accepting both strings and
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,165] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1155
     * Uri objects.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-20): 
           * Uri objects.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,165] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1156
     * @param base Base Uri.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-29): 
           * @param base Base Uri.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,165] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1157
     * @param rel Relative Uri.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-32): 
           * @param rel Relative Uri.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,165] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1158
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1159
    static resolve (base : any , rel : any ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 27 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-10): 
      static
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * keyword.other.ts
    => TOKEN (10-11): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (11-18): 
      resolve
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (19-20): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (20-24): 
      base
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (25-26): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-30): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (31-32): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (33-36): 
      rel
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (37-38): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (39-42): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (43-44): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (45-46): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (46-48): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (48-65): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (66-68): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,157] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,158] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1160
  }

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1161
  class Uri_Instance {

  LINE CONTAINS 6 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
    => TOKEN (2-7): 
      class
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * storage.type.ts
    => TOKEN (7-8): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (8-20): 
      Uri_Instance
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.name.ts
      * entity.name.class.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
    => TOKEN (21-22): 
      {
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @20
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @0
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1162
    private noStructuralTyping_: any;

  LINE CONTAINS 7 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-11): 
      private
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * storage.modifier.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (12-31): 
      noStructuralTyping_
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * variable.ts
    => TOKEN (31-33): 
      : 
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
    => TOKEN (33-36): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.field.declaration.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (36-38): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1163
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1164
     * This class contains setters and getters for the parts of the URI.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
           * This class contains setters and getters for the parts of the URI.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1165
     * The <code>getXyz</code>/<code>setXyz</code> methods return the decoded part

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * The <code>getXyz</code>/<code>setXyz</code> methods return the decoded part
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1166
     * -- so<code>goog.Uri.parse('/foo%20bar').getPath()</code> will return the

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * -- so<code>goog.Uri.parse('/foo%20bar').getPath()</code> will return the
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1167
     * decoded path, <code>/foo bar</code>.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-44): 
           * decoded path, <code>/foo bar</code>.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1168
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1169
     * Reserved characters (see RFC 3986 section 2.2) can be present in

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-72): 
           * Reserved characters (see RFC 3986 section 2.2) can be present in
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1170
     * their percent-encoded form in scheme, domain, and path URI components and

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * their percent-encoded form in scheme, domain, and path URI components and
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1171
     * will not be auto-decoded. For example:

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-46): 
           * will not be auto-decoded. For example:
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1172
     * <code>goog.Uri.parse('rel%61tive/path%2fto/resource').getPath()</code> will

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * <code>goog.Uri.parse('rel%61tive/path%2fto/resource').getPath()</code> will
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1173
     * return <code>relative/path%2fto/resource</code>.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-56): 
           * return <code>relative/path%2fto/resource</code>.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1174
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1175
     * The constructor accepts an optional unparsed, raw URI string.  The parser

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * The constructor accepts an optional unparsed, raw URI string.  The parser
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1176
     * is relaxed, so special characters that aren't escaped but don't cause

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-77): 
           * is relaxed, so special characters that aren't escaped but don't cause
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1177
     * ambiguities will not cause parse failures.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-50): 
           * ambiguities will not cause parse failures.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1178
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1179
     * All setters return <code>this</code> and so may be chained, a la

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-72): 
           * All setters return <code>this</code> and so may be chained, a la
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1180
     * <code>goog.Uri.parse('/foo').setFragment('part').toString()</code>.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-75): 
           * <code>goog.Uri.parse('/foo').setFragment('part').toString()</code>.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1181
     * @param opt_uri Optional string URI to parse (use goog.Uri.create() to create a URI from parts), or if a goog.Uri is passed, a clone is created.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-151): 
           * @param opt_uri Optional string URI to parse (use goog.Uri.create() to create a URI from parts), or if a goog.Uri is passed, a clone is created.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1182
     * @param opt_ignoreCase If true, #getParameterValue will ignore the case of the parameter name.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-101): 
           * @param opt_ignoreCase If true, #getParameterValue will ignore the case of the parameter name.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,168] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1183
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1184
    constructor (opt_uri ? : any , opt_ignoreCase ? : boolean ) ;

  LINE CONTAINS 25 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      constructor
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * storage.type.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-24): 
      opt_uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (25-26): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (27-28): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-32): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (33-34): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (35-49): 
      opt_ignoreCase
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (50-51): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (52-53): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (54-61): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (61-62): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (62-63): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (63-64): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (64-66): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1185
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,169] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1186
     * Clones the URI instance.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-32): 
           * Clones the URI instance.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,169] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1187
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1188
    clone ( ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-9): 
      clone
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (9-10): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (10-11): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (12-13): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (14-15): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (15-17): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (17-34): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (35-37): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1189
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,170] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1190
     * Checks if this Uri has been marked as read only, and if so, throws an error.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * Checks if this Uri has been marked as read only, and if so, throws an error.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,170] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1191
     * This should be called whenever any modifying function is called.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-72): 
           * This should be called whenever any modifying function is called.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,170] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1192
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1193
    enforceReadOnly ( ) : void ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-19): 
      enforceReadOnly
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (22-23): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (24-25): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (26-30): 
      void
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (31-33): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1194
    getDecodedQuery ( ) : string ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-19): 
      getDecodedQuery
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (22-23): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (24-25): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (26-32): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (33-35): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1195
    getDomain ( ) : string ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-13): 
      getDomain
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (14-15): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (16-17): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (18-19): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (20-26): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (27-29): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1196
    getEncodedQuery ( ) : string ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-19): 
      getEncodedQuery
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (22-23): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (24-25): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (26-32): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (33-35): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1197
    getFragment ( ) : string ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      getFragment
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (18-19): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (22-28): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (29-31): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1198
    getIgnoreCase ( ) : boolean ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-17): 
      getIgnoreCase
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (18-19): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (20-21): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (22-23): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (23-24): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (24-31): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (32-34): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1199
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,171] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1200
     * Returns the first value for a given cgi parameter or undefined if the given

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * Returns the first value for a given cgi parameter or undefined if the given
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,171] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1201
     * parameter name does not appear in the query string.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-59): 
           * parameter name does not appear in the query string.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,171] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1202
     * @param paramName Unescaped parameter name.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-50): 
           * @param paramName Unescaped parameter name.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,171] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1203
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1204
    getParameterValue (paramName : string ) : string | undefined ;

  LINE CONTAINS 21 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-21): 
      getParameterValue
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (22-23): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-32): 
      paramName
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (32-33): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (33-34): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (35-41): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (42-43): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (44-45): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (46-52): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (52-53): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (53-54): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (55-64): 
      undefined
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (64-65): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (65-67): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1205
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,172] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1206
     * Returns the value<b>s</b> for a given cgi parameter as a list of decoded

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-80): 
           * Returns the value<b>s</b> for a given cgi parameter as a list of decoded
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,172] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1207
     * query parameter values.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-31): 
           * query parameter values.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,172] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1208
     * @param name The parameter to get values for.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-52): 
           * @param name The parameter to get values for.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,172] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1209
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1210
    getParameterValues (name : string ) : any [] ;

  LINE CONTAINS 20 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-22): 
      getParameterValues
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (23-24): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (24-28): 
      name
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (29-30): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (31-37): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (38-39): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (40-41): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (42-45): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (46-47): 
      [
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (47-48): 
      ]
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.tuple.ts
      * meta.brace.square.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (49-51): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1211
    getPath ( ) : string ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-11): 
      getPath
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (12-13): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (14-15): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (18-24): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (25-27): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1212
    getPort ( ) : number | null ;

  LINE CONTAINS 16 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-11): 
      getPort
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (12-13): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (14-15): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (18-24): 
      number
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (25-26): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (27-31): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (32-34): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1213
    getQuery ( ) : string ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-12): 
      getQuery
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (12-13): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (13-14): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (15-16): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (17-18): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (19-25): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (26-28): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1214
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,173] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1215
     * Returns the query data.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-31): 
           * Returns the query data.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,173] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1216
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1217
    getQueryData ( ) : ಠ_ಠ.clutz.goog.Uri.QueryData ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-16): 
      getQueryData
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (17-18): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (19-20): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (21-22): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (22-24): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (24-51): 
      _ಠ.clutz.goog.Uri.QueryData
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (52-54): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1218
    getScheme ( ) : string ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-13): 
      getScheme
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (14-15): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (16-17): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (18-19): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (20-26): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (27-29): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1219
    getUserInfo ( ) : string ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      getUserInfo
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (18-19): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (22-28): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (29-31): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1220
    hasDomain ( ) : boolean ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-13): 
      hasDomain
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (14-15): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (16-17): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (18-19): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (20-27): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (28-30): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1221
    hasFragment ( ) : boolean ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      hasFragment
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (18-19): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (22-29): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (30-32): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1222
    hasPath ( ) : boolean ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-11): 
      hasPath
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (12-13): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (14-15): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (18-25): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (26-28): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1223
    hasPort ( ) : boolean ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-11): 
      hasPort
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (12-13): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (14-15): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (18-25): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (26-28): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1224
    hasQuery ( ) : boolean ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-12): 
      hasQuery
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (12-13): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (13-14): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (15-16): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (17-18): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (19-26): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (27-29): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1225
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,174] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1226
     * Returns true if this has the same domain as that of uri2.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-65): 
           * Returns true if this has the same domain as that of uri2.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,174] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1227
     * @param uri2 The URI object to compare to.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-49): 
           * @param uri2 The URI object to compare to.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,174] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1228
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1229
    hasSameDomainAs (uri2 : ಠ_ಠ.clutz.goog.Uri ) : boolean ;

  LINE CONTAINS 17 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-19): 
      hasSameDomainAs
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (21-25): 
      uri2
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (26-27): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-29): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-46): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (47-48): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (49-50): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (51-58): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (59-61): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1230
    hasScheme ( ) : boolean ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-13): 
      hasScheme
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (14-15): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (16-17): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (18-19): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (20-27): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (28-30): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1231
    hasUserInfo ( ) : boolean ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      hasUserInfo
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (18-19): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (22-29): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (30-32): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1232
    isReadOnly ( ) : boolean ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-14): 
      isReadOnly
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (15-16): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (17-18): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (19-20): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (21-28): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (29-31): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1233
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,175] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1234
     * Adds a random parameter to the Uri.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-43): 
           * Adds a random parameter to the Uri.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,175] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1235
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1236
    makeUnique ( ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-14): 
      makeUnique
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (15-16): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (17-18): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (19-20): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (20-22): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (22-39): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (40-42): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1237
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,176] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1238
     * Removes the named query parameter.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-42): 
           * Removes the named query parameter.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,176] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1239
     * @param key The parameter to remove.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-43): 
           * @param key The parameter to remove.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,176] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1240
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1241
    removeParameter (key : string ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 17 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-19): 
      removeParameter
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (19-20): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (20-21): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (21-24): 
      key
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (25-26): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-33): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (36-37): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (37-39): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (39-56): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (57-59): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1242
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1243
     * Resolves the given relative URI (a goog.Uri object), using the URI

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
           * Resolves the given relative URI (a goog.Uri object), using the URI
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1244
     * represented by this instance as the base URI.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-53): 
           * represented by this instance as the base URI.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1245
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1246
     * There are several kinds of relative URIs:<br>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-53): 
           * There are several kinds of relative URIs:<br>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1247
     * 1. foo - replaces the last part of the path, the whole query and fragment<br>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-85): 
           * 1. foo - replaces the last part of the path, the whole query and fragment<br>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1248
     * 2. /foo - replaces the the path, the query and fragment<br>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-67): 
           * 2. /foo - replaces the the path, the query and fragment<br>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1249
     * 3. //foo - replaces everything from the domain on.  foo is a domain name<br>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * 3. //foo - replaces everything from the domain on.  foo is a domain name<br>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1250
     * 4. ?foo - replace the query and fragment<br>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-52): 
           * 4. ?foo - replace the query and fragment<br>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1251
     * 5. #foo - replace the fragment only

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-43): 
           * 5. #foo - replace the fragment only
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1252
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1253
     * Additionally, if relative URI has a non-empty path, all ".." and "."

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-76): 
           * Additionally, if relative URI has a non-empty path, all ".." and "."
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1254
     * segments will be resolved, as described in RFC 3986.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-60): 
           * segments will be resolved, as described in RFC 3986.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1255
     * @param relativeUri The relative URI to resolve.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-55): 
           * @param relativeUri The relative URI to resolve.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,177] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1256
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1257
    resolve (relativeUri : ಠ_ಠ.clutz.goog.Uri ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 17 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-11): 
      resolve
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (12-13): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (13-24): 
      relativeUri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (25-26): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-28): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-45): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (46-47): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (48-49): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (49-51): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (51-68): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (68-69): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (69-71): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1258
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,178] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1259
     * Sets the domain.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-24): 
           * Sets the domain.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,178] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1260
     * @param newDomain New domain value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-42): 
           * @param newDomain New domain value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,178] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1261
     * @param opt_decode Optional param for whether to decode new value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
           * @param opt_decode Optional param for whether to decode new value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,178] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1262
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1263
    setDomain (newDomain : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 27 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-13): 
      setDomain
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (14-15): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (15-24): 
      newDomain
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (25-26): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-33): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (36-46): 
      opt_decode
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (47-48): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (49-50): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (51-58): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (59-60): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (61-62): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (62-64): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (64-81): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (81-82): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (82-84): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1264
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,179] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1265
     * Sets the URI fragment.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-30): 
           * Sets the URI fragment.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,179] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1266
     * @param newFragment New fragment value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-46): 
           * @param newFragment New fragment value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,179] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1267
     * @param opt_decode Optional param for whether to decode new value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
           * @param opt_decode Optional param for whether to decode new value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,179] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1268
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1269
    setFragment (newFragment : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 27 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      setFragment
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-28): 
      newFragment
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (29-30): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (31-37): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (38-39): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (40-50): 
      opt_decode
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (51-52): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (52-53): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (53-54): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (55-62): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (62-63): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (63-64): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (64-65): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (65-66): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (66-68): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (68-85): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (85-86): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (86-88): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1270
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,180] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1271
     * Sets whether to ignore case.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-36): 
           * Sets whether to ignore case.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,180] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1272
     * NOTE: If there are already key/value pairs in the QueryData, and

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-72): 
           * NOTE: If there are already key/value pairs in the QueryData, and
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,180] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1273
     * ignoreCase_ is set to false, the keys will all be lower-cased.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-70): 
           * ignoreCase_ is set to false, the keys will all be lower-cased.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,180] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1274
     * @param ignoreCase whether this goog.Uri should ignore case.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-67): 
           * @param ignoreCase whether this goog.Uri should ignore case.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,180] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1275
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1276
    setIgnoreCase (ignoreCase : boolean ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 17 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-17): 
      setIgnoreCase
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (17-18): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (18-19): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (19-29): 
      ignoreCase
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (30-31): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (32-39): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (40-41): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (41-42): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (42-43): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (43-45): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (45-62): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (62-63): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (63-65): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1277
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,181] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1278
     * Sets the value of the named query parameters, clearing previous values for

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-82): 
           * Sets the value of the named query parameters, clearing previous values for
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,181] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1279
     * that key.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-17): 
           * that key.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,181] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1280
     * @param key The parameter to set.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-40): 
           * @param key The parameter to set.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,181] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1281
     * @param value The new value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-35): 
           * @param value The new value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,181] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1282
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1283
    setParameterValue (key : string , value : any ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 25 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-21): 
      setParameterValue
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (21-22): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (22-23): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (23-26): 
      key
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (27-28): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-35): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (36-37): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (38-43): 
      value
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (43-44): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (44-45): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (46-49): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (50-51): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (52-53): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (53-55): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (55-72): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (72-73): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (73-75): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1284
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,182] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1285
     * Sets the values of the named query parameters, clearing previous values for

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-83): 
           * Sets the values of the named query parameters, clearing previous values for
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,182] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1286
     * that key.  Not new values will currently be moved to the end of the query

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-81): 
           * that key.  Not new values will currently be moved to the end of the query
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,182] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1287
     * string.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-15): 
           * string.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,182] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1288
     *

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-7): 
           *
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,182] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1289
     * So, <code>goog.Uri.parse('foo?a=b&c=d&e=f').setParameterValues('c', ['new'])

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * So, <code>goog.Uri.parse('foo?a=b&c=d&e=f').setParameterValues('c', ['new'])
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,182] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1290
     * </code> yields <tt>foo?a=b&e=f&c=new</tt>.</p>

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-54): 
           * </code> yields <tt>foo?a=b&e=f&c=new</tt>.</p>
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,182] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1291
     * @param key The parameter to set.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-40): 
           * @param key The parameter to set.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,182] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1292
     * @param values The new values. If values is a single string then it will be treated as the sole value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-109): 
           * @param values The new values. If values is a single string then it will be treated as the sole value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,182] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1293
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1294
    setParameterValues (key : string , values : any ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 25 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-22): 
      setParameterValues
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (23-24): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (24-27): 
      key
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (28-29): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (30-36): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (36-37): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (37-38): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (38-39): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (39-45): 
      values
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (45-46): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (46-47): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (47-48): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (48-51): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (51-52): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (52-53): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (53-54): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (54-55): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (55-57): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (57-74): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (74-75): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (75-77): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1295
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,183] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1296
     * Sets the path.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-22): 
           * Sets the path.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,183] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1297
     * @param newPath New path value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-38): 
           * @param newPath New path value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,183] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1298
     * @param opt_decode Optional param for whether to decode new value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
           * @param opt_decode Optional param for whether to decode new value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,183] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1299
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1300
    setPath (newPath : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 27 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-11): 
      setPath
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (12-13): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (13-20): 
      newPath
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (21-22): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (23-29): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (30-31): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (32-42): 
      opt_decode
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (42-43): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (43-44): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (45-46): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (47-54): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (55-56): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (57-58): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (58-60): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (60-77): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (77-78): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (78-80): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1301
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,184] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1302
     * Sets the port number.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-29): 
           * Sets the port number.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,184] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1303
     * @param newPort Port number. Will be explicitly casted to a number.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-74): 
           * @param newPort Port number. Will be explicitly casted to a number.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,184] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1304
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1305
    setPort (newPort : any ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 17 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-11): 
      setPort
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (11-12): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (12-13): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (13-20): 
      newPort
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (20-21): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (21-22): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (23-26): 
      any
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-28): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (29-30): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (30-32): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (32-49): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (49-50): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (50-52): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1306
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,185] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1307
     * Sets the URI query.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-27): 
           * Sets the URI query.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,185] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1308
     * @param newQuery New query value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-40): 
           * @param newQuery New query value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,185] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1309
     * @param opt_decode Optional param for whether to decode new value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
           * @param opt_decode Optional param for whether to decode new value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,185] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1310
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1311
    setQuery (newQuery : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 27 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-12): 
      setQuery
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (12-13): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (13-14): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (14-22): 
      newQuery
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (22-23): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (23-24): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (25-31): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (31-32): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (32-33): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (34-44): 
      opt_decode
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (44-45): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (45-46): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (47-48): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (49-56): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (56-57): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (57-58): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (59-60): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (60-62): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (62-79): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (79-80): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (80-82): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1312
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,186] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1313
     * Sets the query data.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-28): 
           * Sets the query data.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,186] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1314
     * @param queryData QueryData object.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-42): 
           * @param queryData QueryData object.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,186] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1315
     * @param opt_decode Optional param for whether to decode new value. Applies only if queryData is a string.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-112): 
           * @param opt_decode Optional param for whether to decode new value. Applies only if queryData is a string.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,186] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1316
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1317
    setQueryData (queryData : ಠ_ಠ.clutz.goog.Uri.QueryData | null | string | undefined , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 39 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-16): 
      setQueryData
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (17-18): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (18-27): 
      queryData
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (28-29): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-31): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (31-58): 
      _ಠ.clutz.goog.Uri.QueryData
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (59-60): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (61-65): 
      null
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (65-66): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (66-67): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (67-68): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (68-74): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (74-75): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (75-76): 
      |
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * keyword.operator.type.ts
    => TOKEN (76-77): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (77-86): 
      undefined
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (86-87): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (87-88): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (88-89): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (89-99): 
      opt_decode
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (99-100): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (100-101): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (101-102): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (102-103): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (103-104): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (104-111): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (111-112): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (112-113): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (113-114): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (114-115): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (115-117): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (117-134): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (134-135): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (135-137): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1318
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,187] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1319
     * Sets whether Uri is read only. If this goog.Uri is read-only,

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-69): 
           * Sets whether Uri is read only. If this goog.Uri is read-only,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,187] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1320
     * enforceReadOnly_ will be called at the start of any function that may modify

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-84): 
           * enforceReadOnly_ will be called at the start of any function that may modify
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,187] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1321
     * this Uri.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-17): 
           * this Uri.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,187] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1322
     * @param isReadOnly whether this goog.Uri should be read only.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-68): 
           * @param isReadOnly whether this goog.Uri should be read only.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,187] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1323
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1324
    setReadOnly (isReadOnly : boolean ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 17 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      setReadOnly
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-27): 
      isReadOnly
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (27-28): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (28-29): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (29-30): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (30-37): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (38-39): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (40-41): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (41-43): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (43-60): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (61-63): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1325
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,188] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1326
     * Sets the scheme/protocol.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-33): 
           * Sets the scheme/protocol.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,188] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1327
     * @param newScheme New scheme value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-42): 
           * @param newScheme New scheme value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,188] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1328
     * @param opt_decode Optional param for whether to decode new value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
           * @param opt_decode Optional param for whether to decode new value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,188] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1329
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1330
    setScheme (newScheme : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 27 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-13): 
      setScheme
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (13-14): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (14-15): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (15-24): 
      newScheme
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (24-25): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (25-26): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (26-27): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (27-33): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (33-34): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (34-35): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (35-36): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (36-46): 
      opt_decode
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (46-47): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (47-48): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (48-49): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (49-50): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (51-58): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (58-59): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (59-60): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (60-61): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (61-62): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (62-64): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (64-81): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (81-82): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (82-84): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1331
    /**

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-7): 
      /**
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,189] BeginEndRule "comment.block.documentation.ts", entered @0
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1332
     * Sets the userInfo.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-26): 
           * Sets the userInfo.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,189] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1333
     * @param newUserInfo New userInfo value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-46): 
           * @param newUserInfo New userInfo value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,189] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1334
     * @param opt_decode Optional param for whether to decode new value.

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-73): 
           * @param opt_decode Optional param for whether to decode new value.
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 5 RULES:
      * [21,189] BeginEndRule "comment.block.documentation.ts", entered @-1
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1335
     */

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-5): 
           
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts
    => TOKEN (5-7): 
      */
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * comment.block.documentation.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1336
    setUserInfo (newUserInfo : string , opt_decode ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;

  LINE CONTAINS 27 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-15): 
      setUserInfo
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (15-16): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (16-17): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (17-28): 
      newUserInfo
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (28-29): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (29-30): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (30-31): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (31-37): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (37-38): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (38-39): 
      ,
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (39-40): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (40-50): 
      opt_decode
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * variable.parameter.ts
    => TOKEN (50-51): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
    => TOKEN (51-52): 
      ?
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * parameter.name.ts
      * keyword.others.ts
    => TOKEN (52-53): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (53-54): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (54-55): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (55-62): 
      boolean
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (62-63): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.type.annotation.ts
    => TOKEN (63-64): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (64-65): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (65-66): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (66-68): 
       ಠ
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (68-85): 
      _ಠ.clutz.goog.Uri
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.name.ts
    => TOKEN (85-86): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (86-88): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1337
    toString ( ) : string ;

  LINE CONTAINS 12 TOKENS:
    => TOKEN (0-4): 
          
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (4-12): 
      toString
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * entity.name.function.ts
    => TOKEN (12-13): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (13-14): 
      (
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (14-15): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
    => TOKEN (15-16): 
      )
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.function.type.parameter.ts
      * meta.brace.round.ts
    => TOKEN (16-17): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
    => TOKEN (17-18): 
      :
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (18-19): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (19-25): 
      string
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
      * meta.type.primitive.ts
      * support.type.ts
    => TOKEN (25-26): 
       
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.method.declaration.ts
      * meta.type.annotation.ts
    => TOKEN (26-28): 
      ;
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts

  LINE END RULE STACK CONTAINS 4 RULES:
      * [137,166] BeginEndRule "meta.object.body.ts", entered @-1
      * [125,167] BeginEndRule "meta.declaration.object.ts", entered @-1
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1338
  }

  LINE CONTAINS 2 TOKENS:
    => TOKEN (0-2): 
        
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
    => TOKEN (2-3): 
      }
      * source.ts
      * meta.block.ts
      * meta.declaration.object.ts
      * meta.object.body.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 2 RULES:
      * [160,155] BeginEndRule "meta.block.ts", entered @-1
      * [1,2] IncludeOnlyRule "source.ts", entered @-1


===========================================
TOKENIZING LINE 1339
}

  LINE CONTAINS 1 TOKENS:
    => TOKEN (0-1): 
      }
      * source.ts
      * meta.block.ts
      * meta.brace.curly.ts

  LINE END RULE STACK CONTAINS 1 RULES:
      * [1,2] IncludeOnlyRule "source.ts", entered @-1
